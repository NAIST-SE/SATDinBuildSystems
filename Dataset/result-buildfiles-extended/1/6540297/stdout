{
  "Repository" : "6540297",
  "Revision" : "HEAD",
  "ObjectId" : "682c9d42a1ccb63e1d8117014877e7d96254f672",
  "CommitTime" : "2019-04-02T06:03:30Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "57c4cdf1624d23ee06941bbfcc49392a6e5cd00c",
      "LastModified" : "2019-01-06T14:05:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ubuntu 14.04 - VERSION 2.8.12\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindReadline.cmake" : {
      "ObjectId" : "18bffc593ccfba9b7de0b1ebf7a47da6aa607792",
      "LastModified" : "2019-01-09T12:30:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources:\n\n#     https://eicweb.phy.anl.gov/whit/physica/blob/master/cmake/Modules/FindReadline.cmake\n\n#     http://dailycommit.blogspot.ru/2016/08/how-to-search-for-readline-library-with.html\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find readline include dirs and libraries\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Readline)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n# Readline_ROOT_DIR         Set this variable to the root installation of\n\n#                           readline if the module has problems finding the\n\n#                           proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n# READLINE_FOUND            System has readline, include and lib dirs found.\n\n# Readline_INCLUDE_DIR      The readline include directories.\n\n# Readline_LIBRARY          The readline library.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/compiler.cmake" : {
      "ObjectId" : "1d923a4f55e8042bca58866eb5ba28364645e20b",
      "LastModified" : "2019-01-09T12:30:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--- C++98 ---\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#--- C++11 ---\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#--- C++14 ---\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#--- C++14 ---\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/qt.cmake" : {
      "ObjectId" : "8547b36b7f18a0479830a4f8dfe4b39c9cab382b",
      "LastModified" : "2019-01-09T12:30:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/qt4.cmake" : {
      "ObjectId" : "b0cb46627fa3a01f3103e67f2a2649e92950b082",
      "LastModified" : "2019-01-09T12:30:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# [CMake with Qt4](https://wiki.qt.io/Using_CMake_build_system)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# using Qt meta-system (precompiler)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/qt5.cmake" : {
      "ObjectId" : "701bb6aab5432458f2578ddc5ab16c5991f9f28f",
      "LastModified" : "2019-01-21T16:10:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# [CMake Manual](http://doc.qt.io/qt-5/cmake-manual.html)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already found\n",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# using Qt meta-system (precompiler)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/solution.cmake" : {
      "ObjectId" : "e58804721c6a9d708aef365d82a19ace282eebc6",
      "LastModified" : "2019-04-02T06:03:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For use of CHECK_INCLUDE_FILE_CXX()\n",
        "Line" : 1,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "# include(CheckCXXCompilerFlag)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include(compiler)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Check C++ features\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Below line cause the error on Elbrus platform: Unsupported compiler MSVC\n\n#  COMPILERS GNU Clang MSVC\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# pthread\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# [FindBoost](https://cmake.org/cmake/help/git-master/module/FindBoost.html)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Platform-specific features\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# PostgreSQL\n\n#\n\n# When CMake not found PostgreSQL but last is exists.\n\n# 1. On Ubuntu CMake outputs \"-- Could NOT find PostgreSQL (missing:  PostgreSQL_TYPE_INCLUDE_DIR) (found version \"9.X.X\")\"\n\n#    This occured because CMake not found 'pg_type.h'. Need to install package 'postgresql-server-dev-9.X'\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Optional: Stack trace pretty printer library for C++\n\n# https://github.com/bombela/backward-cpp\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#configure_file(${CMAKE_SOURCE_DIR}/pfs_config.h.in ${CMAKE_BINARY_DIR}/pfs_config.h)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/demo-logger/CMakeLists.txt" : {
      "ObjectId" : "a117e7dbc1efed6f7639a18c9a010490b310bc50",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/demo-sfinae/CMakeLists.txt" : {
      "ObjectId" : "61539cd9ca1163f8315a459ce0496cf9baada98b",
      "LastModified" : "2019-01-09T12:30:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(pfs-demo-sfinae pfs)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/pfs/CMakeLists.txt" : {
      "ObjectId" : "455258da173f49c7313ecf4a9f24e3bef71f895d",
      "LastModified" : "2019-03-01T10:37:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   Db\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   IO\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#filter \"platforms:unix* or elbrus*\"\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#--filter { \"action:gmake*\", \"files:../src/pfs/db/sqlite3.c\" }\n\n#--    buildoptions { \"-Wno-implicit-fallthrough\" }\n\n#filter { \"action:gmake*\", \"files:**/sqlite3.c\" }\n\n#    buildoptions { \"-Wno-implicit-fallthrough\" }\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set `pfs` library dependencies\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#   TODO\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# [Is it possible to get CMake to build both a static and shared version of the same library?](https://stackoverflow.com/questions/2152077/is-it-possible-to-get-cmake-to-build-both-a-static-and-shared-version-of-the-sam)\n\n#===============================================================================\n\n# this is the \"object library\" target: compiles the sources only once\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# shared libraries need PIC\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use preferred standard\n\n#set_property(TARGET PFS_LIB_OBJLIB PROPERTY CXX_STANDARD ${PFS_PREFERRED_CXX_STANDARD})\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# shared and static libraries built from the same object files\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#===============================================================================\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "27f8d279de20e4e9b207fc00bc8f3a1d7ff170ed",
      "LastModified" : "2019-03-07T12:39:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   TODO\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the \"object library\" target: compiles the sources only once\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optional: shared libraries need PIC\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Add unit test targets\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#list(APPEND MY_TEST_TARGETS filesystem) -- Fixme\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#list(APPEND MY_TEST_TARGETS optional) -- Experimental yet\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#list(APPEND MY_TEST_TARGETS rpc)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#list(APPEND MY_TEST_TARGETS variadic-templates)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################################\n\n# SQL test specific configuration                                              #\n\n################################################################################\n\n#set(test-sql_SOURCES\n\n#    sql/test.cpp\n\n#    sql/sqlite3.cpp)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Process all unit test targets\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#set_property(TARGET test-${MY_TEST_TARGET} PROPERTY CXX_STANDARD ${PFS_PREFERRED_CXX_STANDARD})\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Helper library for test `dynamic_library`\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#set_property(TARGET shared_object PROPERTY CXX_STANDARD ${PFS_PREFERRED_CXX_STANDARD})\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    }
  },
  "FileTypes" : {
    "CMAKE" : 11
  },
  "ElapsedTime" : 801
}