{
  "Repository" : "31547489",
  "Revision" : "HEAD",
  "ObjectId" : "44f7cb20dc69023b2a8ec406308907757684e78e",
  "CommitTime" : "2019-04-09T07:55:51Z",
  "Files" : {
    "3rdparty/gtest/CMakeLists.txt" : {
      "ObjectId" : "621d0f0421543eba41e1d69f497814104bb9c6a7",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 210,
        "CharPositionInLine" : 43
      },
      "22" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 232,
        "CharPositionInLine" : 46
      },
      "26" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "3rdparty/gtest/Makefile.am" : {
      "ObjectId" : "29797e4e9de4e1d5e5f93bba14288de87f623946",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "3rdparty/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "777b91ed4b8caa226ea55cfa61fe7ec433ffb452",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 83,
        "CharPositionInLine" : 42
      },
      "17" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 126,
        "CharPositionInLine" : 32
      },
      "24" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "3rdparty/gtest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "3rdparty/gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Apps/CMakeLists.txt" : {
      "ObjectId" : "3619b3f363c5544b9c6c90f46e22f7f3d1b30b6c",
      "LastModified" : "2018-11-02T11:32:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add local modules\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add 'check' target which builds all test applications, then executes the tests\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Apps/Common/CMakeLists.txt" : {
      "ObjectId" : "5e9bec35ac49b9f76fdb3364eef0b13a410461d2",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common application sources\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unit tests\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeLists.txt" : {
      "ObjectId" : "e63229818aea607b06e4e596733464b92ca7dae2",
      "LastModified" : "2018-11-02T11:32:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate header with version info\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Required defines (well, PROFILE_LEVEL is not actually required, but...)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add local modules\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Required include directories\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate build flags in build tree\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make the IFEM library\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate doxy in build tree\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# For generating the doxy\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Unit tests\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# lib\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# headers\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# cmake modules\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# source code\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# documentation and license\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "cmake/Modules/FindARPACK.cmake" : {
      "ObjectId" : "9e20e8c3f717ae51d7e00fca346c07a258b5611c",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For kongull until they get their act together\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCBLAS.cmake" : {
      "ObjectId" : "3cd776d2ba2711f50dd88392b4b625b73d3cf76f",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindCXX11.cmake" : {
      "ObjectId" : "3a21e9580053aa94d540ad2653a92e021f66643a",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# try to use compiler flag -std=c++14\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try to use compiler flag -std=c++0x for older compilers\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindIFEM.cmake" : {
      "ObjectId" : "bfb80bfdead43e709fafff0a328f6415735d9d54",
      "LastModified" : "2018-11-02T11:32:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# IFEM uses C++ and Fortran\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Custom profiles\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build wants IFEM as a submodule\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# To get FOUND variables in current context\n",
        "Line" : 63,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : "# Build is in-tree\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Export version information\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Needed as we have templates using these flags\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindIFEMDeps.cmake" : {
      "ObjectId" : "9c15eef8b185251f0bd4681c25cf4d3b3b7023e4",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Custom profiles\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# IFEM includes Fortran code\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# And C++ code\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Required dependences\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Mimimum GoTools version\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TinyXML\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# SuperLU\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LR splines\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# HAVE_MPI is used instead of HAS_MPI due to usage in external templated dependencies (ISTL)\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# PETSc\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# HDF5\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# SPR\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# SAMG\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# VTF writer\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# OpenMP\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# UMFPack\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ISTL - need to be after UMFPack and SuperLU\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Cereal\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Portability issues\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# lacks on osx\n",
        "Line" : 250,
        "CharPositionInLine" : 79
      },
      "20" : {
        "Text" : "# Other things\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/Modules/FindISTL.cmake" : {
      "ObjectId" : "570c3e5914fd33435d103fb97ad8fa09b353e448",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindPetsc.cmake" : {
      "ObjectId" : "18bc81d6d2e4f8e07a5225883f19dbde1c141391",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindSAMG.cmake" : {
      "ObjectId" : "b48cf9c2ff5d1927fd701185655893083e646fcb",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindSLEPc.cmake" : {
      "ObjectId" : "33d9a7148e07be4375c6393bea4a4e663b14c0af",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n#\n\n#  This file is part of the Feel library\n\n#\n\n#  Author(s): Christophe Prud'homme <christophe.prudhomme@ujf-grenoble.fr>\n\n#       Date: 2010-01-22\n\n#\n\n#  Copyright (C) 2010 Universit� Joseph Fourier\n\n#\n\n#  This library is free software; you can redistribute it and/or\n\n#  modify it under the terms of the GNU Lesser General Public\n\n#  License as published by the Free Software Foundation; either\n\n#  version 3.0 of the License, or (at your option) any later version.\n\n#\n\n#  This library is distributed in the hope that it will be useful,\n\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n\n#  Lesser General Public License for more details.\n\n#\n\n#  You should have received a copy of the GNU Lesser General Public\n\n#  License along with this library; if not, write to the Free Software\n\n#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Debian\n",
        "Line" : 27,
        "CharPositionInLine" : 26
      },
      "2" : {
        "Text" : "# message( \"*** SLEPc directory : ${SLEPC_DIR}\" )\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindSPR.cmake" : {
      "ObjectId" : "ba138a2ea89ab74336ea60ad450b0de897e8db22",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindSuiteSparse.cmake" : {
      "ObjectId" : "0b77b836cf369a6d95c4b5a933fac8d98c59d374",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Tim Davis' SuiteSparse collection of sparse matrix libraries\n\n#\n\n# Synopsis:\n\n#   find_package (SuiteSparse COMPONENTS <list-of-components>)\n\n#\n\n# Components are:\n\n#   amd              Approximate Minimum Degree ordering\n\n#   camd             Constrained Approximate Minimum Degree ordering\n\n#   colamd           COLumn Approximate Minimum Degree ordering\n\n#   ccolamd          Constrained COLumn Approximate Minimum Degree ordering\n\n#   cholmod          Supernodal sparse Cholesky factorization and update\n\n#   umfpack          Unsymmetric MultiFrontal sparse LU factorization\n\n#\n\n# The following variables will be set:\n\n#\n\n#   SuiteSparse_FOUND            True if all dependencies are satisfied\n\n#   SuiteSparse_Xxx_FOUND        True if module Xxx is found\n\n#   HAVE_SUITESPARSE_Xxx_H       Binary value indicating presence of header\n\n#   SuiteSparse_INCLUDE_DIRS     Paths containing the SuiteSparse header files\n\n#   SuiteSparse_LIBRARIES        Name of the libraries which must be linked\n\n#   SuiteSparse_DEFINITIONS      Defines that must be passed to the compiler\n\n#   SuiteSparse_LINKER_FLAGS     Options that must be passed when linking\n\n#\n\n# The following options can be set to configure the module:\n\n#\n\n#   SUITESPARSE_USE_STATIC       Link with a static library, even if a\n\n#                                dynamic library is also present. Note that\n\n#                                setting this to OFF does not ensure that a\n\n#                                shared library will be used.\n\n#\n\n# See <http://www.cise.ufl.edu/research/sparse/SuiteSparse>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2012 Uni Research AS\n\n# This file is licensed under the GNU General Public License v3.0\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# variables to pass on to other packages\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we need to link to BLAS and LAPACK\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we also need the math part of the runtime library\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if we don't get any further clues about where to look, then start\n\n# roaming around the system\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# search system directories by default\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# pick up paths from the environment if specified there; these replace the\n\n# pre-defined paths so that we don't accidentially pick up old stuff\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CMake uses _DIR suffix as default for config-mode files; it is unlikely\n\n# that we are building SuiteSparse ourselves; use _ROOT suffix to specify\n\n# location to pre-canned binaries\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# most commonly, we use the uppercase version of this variable\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# if we have specified a search path, then confine ourselves to that\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# transitive closure of dependencies; after this SuiteSparse_MODULES is the\n\n# full list of modules that must be found to satisfy the user's link demands\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if someone else already have found all the packages for us, then don't do anything\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# only search in architecture-relevant directory\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# if we are told to link SuiteSparse statically, add these parts\n\n# to the name so we always match only that particular type of lib\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if SuiteSparse >= 4.0 we must also link with libsuitesparseconfig\n\n# assume that this is the case if we find the library; otherwise just\n\n# ignore it (older versions don't have a file named like this)\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# POSIX.1-2001 REALTIME portion require us to link this library too for\n\n# clock_gettime() which is used by suitesparseconfig\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# search filesystem for each of the module individually\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# search for files which implements this module\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# start out by including the module itself; other dependencies will be added later\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# insert any inter-modular dependencies here\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# optional libraries; don't insert any -NOT_FOUND paths\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# always remove the *first* library from the list\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# test if umfpack is usable with only amd and not cholmod\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# if we don't have cholmod, then we certainly cannot have umfpack with cholmod\n",
        "Line" : 231,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# don't reset these sets; if two packages request SuiteSparse with\n\n# different modules, we want the sets to be merged\n\n#set (SuiteSparse_LIBRARIES \"\")\n\n#set (SuiteSparse_INCLUDE_DIRS \"\")\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# determine which modules were found based on whether all dependencies\n\n# were satisfied; create a list of ALL modules (specified) that was found\n\n# (to be included in one swoop in CMakeLists.txt)\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# use empty string instead of zero, so it can be tested with #ifdef\n\n# as well as #if in the source code\n",
        "Line" : 260,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# print a message to indicate status of this package\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# add these after checking to not pollute the message output (checking for\n\n# BLAS and LAPACK is REQUIRED so if they are not found, we'll have failed\n\n# already; suitesparseconfig is \"optional\" anyway)\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/Modules/FindSuperLU.cmake" : {
      "ObjectId" : "e3d36082f9f1b4da841a808b32e43fa898b46efa",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindTinyXML.cmake" : {
      "ObjectId" : "2f3bc3c6bb22baefda37762eb58ed0e642e47d90",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find TinyXML\n\n# Find the native TinyXML includes and library\n\n#\n\n#   TINYXML_FOUND       - True if TinyXML found.\n\n#   TINYXML_INCLUDE_DIR - where to find tinyxml.h, etc.\n\n#   TINYXML_LIBRARIES   - List of libraries when using TinyXML.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TINYXML_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindVTFWriter.cmake" : {
      "ObjectId" : "19ec050417604cc46c94b31a411949b798509c2d",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/IFEMOptions.cmake" : {
      "ObjectId" : "9df0e10f3aa281aa629dcf0c5a15a3db22f53143",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Scripts/CheckCommits.cmake" : {
      "ObjectId" : "a417117c1ab8ccad539ae3064445a0e4ec5cedf6",
      "LastModified" : "2018-11-02T11:32:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check that there are no changes in working-tree\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup base of tests\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setup end of tests\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup target to build\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build threads\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Record current HEAD\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Grab revision list\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Checkout\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Build\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/Scripts/DownloadGTest.cmake" : {
      "ObjectId" : "9accfe89b3181992dbb3c82ccc225b874063693d",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################### GTEST\n\n# Enable ExternalProject CMake module\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default ExternalProject root directory\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add gtest\n\n# http://stackoverflow.com/questions/9689183/cmake-googletest\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disable install step\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Wrap download, configure and build steps in a script to log output\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Specify include dir\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Library\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Scripts/IFEMDoxy.cmake" : {
      "ObjectId" : "1d39ad360b3b91c354ee9946958382daad9bed8d",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the appropriate target to generate doxy for used build configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Scripts/IFEMTesting.cmake" : {
      "ObjectId" : "8046a73728c515be5d1746d2eeb4f6923512c987",
      "LastModified" : "2018-11-19T09:25:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get GTest tests as CMake tests.\n\n# Copied from FindGTest.cmake\n\n# Thanks to Daniel Blezek <blezek@gmail.com> for the GTEST_ADD_TESTS code\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Groups parametrized tests under a single ctest entry\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Parallel unit tests. These all run with 4 processes.\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Generate regtest script with correct paths\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Scripts/UseMultiArch.cmake" : {
      "ObjectId" : "afa13a13a8aed565d87873739ecc259ea463445c",
      "LastModified" : "2018-08-09T07:58:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Multiarch support in object code library directories\n\n#\n\n# This module sets the following variable\n\n#\tCMAKE_INSTALL_LIBDIR\t     to lib, lib64 or lib/x86_64-linux-gnu\n\n#\t                             depending on the platform; use this path\n\n#\t                             for platform-specific binaries.\n\n#\n\n#\tCMAKE_INSTALL_LIBDIR_NOARCH  to lib or lib64 depending on the platform;\n\n#\t                             use this path for architecture-independent\n\n#\t                             files.\n\n#\n\n# Note that it will override the results of GNUInstallDirs if included after\n\n# that module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fedora uses lib64/ for 64-bit systems, Debian uses lib/x86_64-linux-gnu;\n\n# Fedora put module files in lib64/ too, but Debian uses lib/ for that\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Debian or Ubuntu?\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# 64-bit system?\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# let the user override if somewhere else is desirable\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2762
}