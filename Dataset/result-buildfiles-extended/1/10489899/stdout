{
  "Repository" : "10489899",
  "Revision" : "HEAD",
  "ObjectId" : "afde0af387b980cbfc82fa36fa15eba9f1ac6499",
  "CommitTime" : "2018-02-14T20:01:59Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "99cab262165e32f09991868b23b5b6c7738d9cd6",
      "LastModified" : "2018-02-13T20:19:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Version definitions\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# a bit hacky -- if a toolchain file si present, assume\n\n# cross compilation to raspberry pi\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We configure RPATH handling here, assuming that the fakeroot on\n\n# the raspberry will be located at /opt/rpi_fakeroot\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set RPATH to \"binary directory\" (for dev mode) and \"/opt/rpi_faekroot\"\n\n# for \"installed\" mode\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Avoid source tree pollution\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Force CMAKE_BUILD_TYPE\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ODB stuff\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Build Options\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cfg/CMakeLists.txt" : {
      "ObjectId" : "861c059c280d860afa961fd36ad20ce8074c1552",
      "LastModified" : "2014-07-24T09:46:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindCXX11.cmake" : {
      "ObjectId" : "badcec9c186ab68a9d236fb3f7fb87148f839cf5",
      "LastModified" : "2014-03-27T10:13:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds if the compiler has C++11 support\n\n# This module can be used to detect compiler flags for using C++11, and checks\n\n# a small subset of the language.\n\n#\n\n# The following variables are set:\n\n#   CXX11_FLAGS - flags to add to the CXX compiler for C++11 support\n\n#   CXX11_FOUND - true if the compiler supports C++11\n\n#\n\n# TODO: When compilers starts implementing the whole C++11, check the full set\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Gnu and Intel Linux\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#Microsoft Visual Studio, and everything that automatically accepts C++11\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#Intel windows\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/FindODB.cmake" : {
      "ObjectId" : "9ae626b6d1528a78828d055fcbc4e26dde6a739c",
      "LastModified" : "2016-08-19T13:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This module defines the following variables:\n\n#\n\n#   ODB_USE_FILE - Path to the UseODB.cmake file. Use it to include the ODB use file.\n\n#                  The use file defines the needed functionality to compile and use\n\n#                  odb generated headers.\n\n#\n\n#   ODB_FOUND - All required components and the core library were found\n\n#   ODB_INCLUDR_DIRS - Combined list of all components include dirs\n\n#   ODB_LIBRARIES - Combined list of all componenets libraries\n\n#\n\n#   ODB_LIBODB_FOUND - Libodb core library was found\n\n#   ODB_LIBODB_INCLUDE_DIRS - Include dirs for libodb core library\n\n#   ODB_LIBODB_LIBRARIES - Libraries for libodb core library\n\n#\n\n# For each requested component the following variables are defined:\n\n#\n\n#   ODB_<component>_FOUND - The component was found\n\n#   ODB_<component>_INCLUDE_DIRS - The components include dirs\n\n#   ODB_<component>_LIBRARIES - The components libraries\n\n#\n\n# <component> is the original or uppercase name of the component\n\n#\n\n# The component names relate directly to the odb module names.\n\n# So for the libodb-mysql.so library, the component is named mysql,\n\n# for the libodb-qt.so module it's qt, and so on.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindSodium.cmake" : {
      "ObjectId" : "a2a4496411703a0b04cb3a385969563bfda4d910",
      "LastModified" : "2016-08-19T13:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Sodium\n\n# Find the native libsodium includes and library.\n\n# Once done this will define\n\n#\n\n#  SODIUM_INCLUDE_DIR    - where to find libsodium header files, etc.\n\n#  SODIUM_LIBRARY        - List of libraries when using libsodium.\n\n#  SODIUM_FOUND          - True if libsodium found.\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SODIUM_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindTCLAP.cmake" : {
      "ObjectId" : "402a866a5d171196472c8a779fdc0c6f8e26f676",
      "LastModified" : "2016-08-19T13:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# RPI\n\n# Authors: B.Bleuz√©, V.Garcia\n\n# Created: 04/04/2011\n\n#\n\n# Distributed under the BSD licence:\n\n# Copyright (c) 2011, INRIA\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# - Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the following disclaimer.\n\n# - Redistributions in binary form must reproduce the above copyright notice,\n\n# this list of conditions and the following disclaimer in the documentation\n\n# and/or other materials provided with the distribution.\n\n# - Neither the name of INRIA nor the names of its contributors may be used\n\n# to endorse or promote products derived from this software without\n\n# specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY\n\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN if ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the TCLAP library\n\n# Once done this will define\n\n#\n\n# TCLAP_FOUND         - system has TCLAP and it can be used\n\n# TCLAP_INCLUDE_DIR   - directory where the header file can be found\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# already found\n",
        "Line" : 46,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 3
    },
    "cmake/FindWebSocketpp.cmake" : {
      "ObjectId" : "7132372fbee20b77271b509250da1b0f5673a112",
      "LastModified" : "2016-08-19T13:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libwebsocketpp library\n\n# Once done this will define\n\n#\n\n#  WEBSOCKETPP_FOUND - system has libwebsocketpp\n\n#  WEBSOCKETPP_INCLUDE_DIR - the libwebsocketpp include directory\n\n#  WEBSOCKETPP_LIBRARY - Link these to use libwebsocketpp\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set WEBSOCKETPP_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "db6cd4a1d054320cffe88efe562dbf548810cc7f",
      "LastModified" : "2017-09-11T19:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This has been included from https://github.com/rpavlik/cmake-modules\n\n#\n\n# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n#  git_local_changes(<var>)\n\n#\n\n# Returns either \"CLEAN\" or \"DIRTY\" with respect to uncommitted changes.\n\n# Uses the return code of \"git diff-index --quiet HEAD --\".\n\n# Does not regard untracked files.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 53,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 57,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#(ARGN MATCHES \"||\") OR\n\n#(ARGN MATCHES \"\\\\;\"))\n\n#message(\"Please report the following error to the project!\")\n\n#message(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/UseODB.cmake" : {
      "ObjectId" : "ebef8c110269ee7f59577c96c03e7a1a81ea0cad",
      "LastModified" : "2017-09-11T19:18:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "33703a559ce88e7df5ef4d7a95d5101f7b1c7e91",
      "LastModified" : "2017-09-11T19:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2014 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we need the CMake variables CMAKE_SCRIPT_MODE_FILE and CMAKE_ARGV available since 2.8.5\n\n# we need APPEND_STRING option for set_property available since 2.8.6\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# use CMake's predefined compiler version variable (available since CMake 2.8.8)\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 66,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# assume GCC like command line interface\n",
        "Line" : 74,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 188,
        "CharPositionInLine" : 7
      },
      "11" : {
        "Text" : "# remove from head\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# process transitive libraries\n",
        "Line" : 301,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# option with separate argument\n",
        "Line" : 325,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# remember option\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# option with joined argument\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# flush remembered option\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 341,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 364,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# add option from CMake target type variable\n",
        "Line" : 373,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# handle POSITION_INDEPENDENT_CODE property introduced with CMake 2.8.9 if policy CMP0018 is turned on\n",
        "Line" : 376,
        "CharPositionInLine" : 3
      },
      "21" : {
        "Text" : "# default to old behavior\n",
        "Line" : 379,
        "CharPositionInLine" : 3
      },
      "22" : {
        "Text" : "# NEW behavior: honor the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 386,
        "CharPositionInLine" : 3
      },
      "23" : {
        "Text" : "# OLD behavior or policy not set: use the value of CMAKE_SHARED_LIBRARY_<Lang>_FLAGS\n",
        "Line" : 396,
        "CharPositionInLine" : 3
      },
      "24" : {
        "Text" : "# flags variable for module library uses different name SHARED_MODULE\n\n# (e.g., CMAKE_SHARED_MODULE_C_FLAGS)\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# add_definitions may have been used to add flags to the compiler command\n",
        "Line" : 408,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# add target compile options\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# platform specific flags\n",
        "Line" : 442,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# default include dirs\n",
        "Line" : 477,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 482,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# target include directories\n",
        "Line" : 489,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 500,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# mimic CMake SystemTools::MakeCindentifier behavior\n",
        "Line" : 554,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 582,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# target export define symbol\n",
        "Line" : 586,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 591,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# target compile definitions\n",
        "Line" : 600,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 609,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 619,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 635,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 865,
        "CharPositionInLine" : 3
      },
      "42" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 873,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 876,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# header is outside\n",
        "Line" : 890,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 901,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# check header file extension\n",
        "Line" : 911,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 924,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 929,
        "CharPositionInLine" : 3
      },
      "49" : {
        "Text" : "# GCC like output\n",
        "Line" : 938,
        "CharPositionInLine" : 3
      },
      "50" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 954,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# canonize slashes\n",
        "Line" : 957,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 959,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# then separate lines\n",
        "Line" : 961,
        "CharPositionInLine" : 1
      },
      "54" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 964,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 982,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# update stack\n",
        "Line" : 992,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1008,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1010,
        "CharPositionInLine" : 5
      },
      "59" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1017,
        "CharPositionInLine" : 5
      },
      "60" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1026,
        "CharPositionInLine" : 8
      },
      "61" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1038,
        "CharPositionInLine" : 5
      },
      "62" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1073,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1092,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# use explicitly provided source file location\n",
        "Line" : 1224,
        "CharPositionInLine" : 3
      },
      "65" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1227,
        "CharPositionInLine" : 3
      },
      "66" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1278,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1313,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# append to list\n",
        "Line" : 1322,
        "CharPositionInLine" : 3
      },
      "69" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1325,
        "CharPositionInLine" : 3
      },
      "70" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1329,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# append to list\n",
        "Line" : 1334,
        "CharPositionInLine" : 3
      },
      "72" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1340,
        "CharPositionInLine" : 3
      },
      "73" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n",
        "Line" : 1347,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# append to list\n",
        "Line" : 1351,
        "CharPositionInLine" : 3
      },
      "75" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1354,
        "CharPositionInLine" : 3
      },
      "76" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1359,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "# append to list\n",
        "Line" : 1368,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1371,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1375,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# append to list\n",
        "Line" : 1380,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1386,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n",
        "Line" : 1405,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# append to list\n",
        "Line" : 1415,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1419,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1423,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# append to list\n",
        "Line" : 1432,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1435,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1443,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "# append to list\n",
        "Line" : 1455,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1462,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1469,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# append to list\n",
        "Line" : 1480,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1489,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n",
        "Line" : 1506,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# append to list\n",
        "Line" : 1513,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1516,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1520,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# append to list\n",
        "Line" : 1522,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1525,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1530,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# append to list\n",
        "Line" : 1535,
        "CharPositionInLine" : 3
      },
      "102" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1538,
        "CharPositionInLine" : 3
      },
      "103" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1542,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# append to list\n",
        "Line" : 1548,
        "CharPositionInLine" : 3
      },
      "105" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1551,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1557,
        "CharPositionInLine" : 3
      },
      "107" : {
        "Text" : "# append to list\n",
        "Line" : 1565,
        "CharPositionInLine" : 5
      },
      "108" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1571,
        "CharPositionInLine" : 5
      },
      "109" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1578,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "# append to list\n",
        "Line" : 1580,
        "CharPositionInLine" : 5
      },
      "111" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1583,
        "CharPositionInLine" : 5
      },
      "112" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1588,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "# append to list\n",
        "Line" : 1597,
        "CharPositionInLine" : 5
      },
      "114" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1603,
        "CharPositionInLine" : 5
      },
      "115" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1610,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "# append to list\n",
        "Line" : 1612,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1615,
        "CharPositionInLine" : 5
      },
      "118" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1652,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1668,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1672,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1681,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1684,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1703,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1767,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1778,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1781,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1852,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1857,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 1860,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1863,
        "CharPositionInLine" : 4
      },
      "131" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 1866,
        "CharPositionInLine" : 4
      },
      "132" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 1898,
        "CharPositionInLine" : 1
      },
      "133" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 1901,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 1906,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 1922,
        "CharPositionInLine" : 1
      },
      "136" : {
        "Text" : "# GCC and clang raise a fatal error if a file is not found during preprocessing\n\n# thus we depend on target's generated source files for prefix header generation\n",
        "Line" : 1926,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 1944,
        "CharPositionInLine" : 1
      },
      "138" : {
        "Text" : "# remove COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 1971,
        "CharPositionInLine" : 1
      },
      "139" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 1993,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# the file(GENERATE ...) command requires cmake 2.8.12 or later\n",
        "Line" : 1995,
        "CharPositionInLine" : 3
      },
      "141" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the first source file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2013,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# make first source file depend on prefix header\n",
        "Line" : 2026,
        "CharPositionInLine" : 3
      },
      "143" : {
        "Text" : "# mark first source file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2028,
        "CharPositionInLine" : 3
      },
      "144" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2032,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the first source file\n\n# the first source file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2056,
        "CharPositionInLine" : 2
      },
      "146" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2060,
        "CharPositionInLine" : 3
      },
      "147" : {
        "Text" : "# make source files depend on precompiled header\n",
        "Line" : 2069,
        "CharPositionInLine" : 3
      },
      "148" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2074,
        "CharPositionInLine" : 3
      },
      "149" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2082,
        "CharPositionInLine" : 3
      },
      "150" : {
        "Text" : "# make source files depend on precompiled header\n",
        "Line" : 2085,
        "CharPositionInLine" : 2
      },
      "151" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2092,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2099,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# make source files depend on prefix header\n",
        "Line" : 2101,
        "CharPositionInLine" : 1
      },
      "154" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n\n# if necessary, we also generate a single prefix header which includes all language specific prefix headers\n",
        "Line" : 2169,
        "CharPositionInLine" : 2
      },
      "155" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2193,
        "CharPositionInLine" : 2
      },
      "156" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2197,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2201,
        "CharPositionInLine" : 3
      },
      "158" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2225,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2231,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2240,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2248,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# create a joint unity file from all unity file segments\n",
        "Line" : 2264,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2301,
        "CharPositionInLine" : 2
      },
      "164" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2326,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2501,
        "CharPositionInLine" : 3
      },
      "166" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2505,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2519,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# use all available cores\n",
        "Line" : 2539,
        "CharPositionInLine" : 3
      },
      "169" : {
        "Text" : "# a unity source segment must not contain less than COTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES files\n",
        "Line" : 2544,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2568,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2584,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2593,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2609,
        "CharPositionInLine" : 3
      },
      "174" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2613,
        "CharPositionInLine" : 1
      },
      "175" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2638,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2643,
        "CharPositionInLine" : 4
      },
      "177" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2658,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2668,
        "CharPositionInLine" : 1
      },
      "179" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2678,
        "CharPositionInLine" : 1
      },
      "180" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2684,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# if cotire is applied to a target which has not been added in the current source dir,\n\n# non-existing files cannot be referenced from the unity build target (this is a CMake restriction)\n",
        "Line" : 2692,
        "CharPositionInLine" : 3
      },
      "182" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2708,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# generate unity target\n",
        "Line" : 2715,
        "CharPositionInLine" : 1
      },
      "184" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2725,
        "CharPositionInLine" : 1
      },
      "185" : {
        "Text" : "# copy output name\n",
        "Line" : 2754,
        "CharPositionInLine" : 1
      },
      "186" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2762,
        "CharPositionInLine" : 1
      },
      "187" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2771,
        "CharPositionInLine" : 1
      },
      "188" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2777,
        "CharPositionInLine" : 1
      },
      "189" : {
        "Text" : "# copy Qt stuff\n",
        "Line" : 2787,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2791,
        "CharPositionInLine" : 1
      },
      "191" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 2794,
        "CharPositionInLine" : 1
      },
      "192" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 2798,
        "CharPositionInLine" : 1
      },
      "193" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2805,
        "CharPositionInLine" : 1
      },
      "194" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2810,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# trivial checks\n",
        "Line" : 2840,
        "CharPositionInLine" : 1
      },
      "196" : {
        "Text" : "# resolve alias\n",
        "Line" : 2846,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 2854,
        "CharPositionInLine" : 1
      },
      "198" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 2870,
        "CharPositionInLine" : 1
      },
      "199" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 2902,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 2955,
        "CharPositionInLine" : 1
      },
      "201" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3041,
        "CharPositionInLine" : 1
      },
      "202" : {
        "Text" : "# include target script if available\n",
        "Line" : 3053,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3055,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# for MSVC, compiler IDs may not always be set correctly\n",
        "Line" : 3064,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3079,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3101,
        "CharPositionInLine" : 3
      },
      "207" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3104,
        "CharPositionInLine" : 3
      },
      "208" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3125,
        "CharPositionInLine" : 3
      },
      "209" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3128,
        "CharPositionInLine" : 3
      },
      "210" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3208,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3248,
        "CharPositionInLine" : 3
      },
      "212" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3289,
        "CharPositionInLine" : 3
      },
      "213" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3296,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3349,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3414,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3568,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 217
    },
    "cmake/rpi-cross.cmake" : {
      "ObjectId" : "1e5469c6d5f6337c409785052c59c8b1365dc573",
      "LastModified" : "2017-09-11T19:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "8d17fb952d0c14acb52898a77fc21f246f5084b3",
      "LastModified" : "2018-02-07T20:00:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include mode to extract Git Revision.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Store revision in GIT_SHA1 var.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automatically generates a file to store the GIT SHA1 version.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Rule for ODB code generation.\n\n# Build a shared library: leosac_db\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#LLA flags'\n",
        "Line" : 191,
        "CharPositionInLine" : 17
      },
      "5" : {
        "Text" : "#Add GProf compile flag\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add debug flags\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Add optimization flags\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Set compilation flags for current target\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Somehow, cross compile requires us to link against libcrypto\n\n# and librt\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We disable per-exception stacktrace generation when cross compiling\n\n# because that is a debug feature that takes a lot of ram and can't\n\n# be properly freed.\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Disable stacktrace generation.\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Build modules\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/altmodules/CMakeLists.txt" : {
      "ObjectId" : "a2cff266ed31056768beec6f5262761686d00c33",
      "LastModified" : "2017-09-11T19:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Automatically add all subdirectories here.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/db/CMakeLists.txt" : {
      "ObjectId" : "4ee72b4eda6fb521e64312ece9a8c12da12d3eae",
      "LastModified" : "2017-10-18T12:20:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Build scripts for database support code.\n\n## We run multiple compilation with close but slightly different\n\n## compilation flag (most notably the INCLUDE_PREFIX variable).\n\n##\n\n## All those compilation are part of the same ODB schema: \"core\".\n\n## This schema hold database structure information for the leosac\n\n## core system. Modules can create additional schema.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ODB configuration for tools/db (LogEntry).\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ODB configuration for auth stuff (User/Group)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ODB configuration for Audit log\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ODB configuration for Credentials\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ODB configuration for Updates\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ODB configuration for Hardware devices\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# leosac_db library that contains database support code\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## This generate a leosac.sql file\n\n## for creating the database structure.\n\n##\n\n## Also generate changelog and database schema as separate C++ source file.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/modules/CMakeLists.txt" : {
      "ObjectId" : "9df0a1ef32374d7909d8f28b8fe64f0030b1e0ed",
      "LastModified" : "2017-09-11T19:18:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/auth/CMakeLists.txt" : {
      "ObjectId" : "5fe072ccaca204c41fa142085d3ac6b1900ecf21",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -fvisibility=hidden\")\n",
        "Line" : 3,
        "CharPositionInLine" : 56
      },
      "CommentCount" : 1
    },
    "src/modules/auth/auth-db/CMakeLists.txt" : {
      "ObjectId" : "4a6b03e76bc86593536b00f904d4380fafb1c3b0",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Database support\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/auth/auth-file/CMakeLists.txt" : {
      "ObjectId" : "deca6e3be2c36d200342ef9e3ef15df4cb21374d",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/bench-toggle/CMakeLists.txt" : {
      "ObjectId" : "64833f02f05fa04aeab215603d5539b1328141cf",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(${BENCHTOGGLE_BIN} PUBLIC ${CMAKE_SOURCE_DIR}/src \"${CMAKE_SOURCE_DIR}/zmqpp/src\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/doorman/CMakeLists.txt" : {
      "ObjectId" : "5a63ef1dec8a62fea94ba71f4bd2628c7d72382a",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/event-publish/CMakeLists.txt" : {
      "ObjectId" : "c3cdca8b9ea81396da62b9b1aa33055a20d08c3d",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/instrumentation/CMakeLists.txt" : {
      "ObjectId" : "e2974829ef08fe954dd5d52e90eb412c3ad8980a",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/led-buzzer/CMakeLists.txt" : {
      "ObjectId" : "6bd7158c600b1bffcc15819f974db1310d9df96d",
      "LastModified" : "2017-10-18T12:20:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/monitor/CMakeLists.txt" : {
      "ObjectId" : "0d19fa0e906bca7ccd2b784723e48fb2e2518930",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(${PERSISTENTMONITOR_BIN} PUBLIC ${CMAKE_SOURCE_DIR}/src \"${CMAKE_SOURCE_DIR}/zmqpp/src\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/notifd/CMakeLists.txt" : {
      "ObjectId" : "090e572c132268769261950bc516a695c17a15df",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Database support\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/pifacedigital/CMakeLists.txt" : {
      "ObjectId" : "3b97f7720614d459830ba03b5362aa7d195fa63d",
      "LastModified" : "2017-10-18T12:20:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Database support\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/pifacedigital/lib/CMakeLists.txt" : {
      "ObjectId" : "0c38002a4bc4fff9397e79273fe264ad531186e1",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/replication/CMakeLists.txt" : {
      "ObjectId" : "28aa45ce92030e4819926d3fa97c92868517e067",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/rpleth/CMakeLists.txt" : {
      "ObjectId" : "b3a7e9e9cd6ed215daa0ff125d44b97e8d8ee1da",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/smtp/CMakeLists.txt" : {
      "ObjectId" : "ca040e440016c354cdfdf61d1970263e86e392ff",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Database support\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/stdin-controller/CMakeLists.txt" : {
      "ObjectId" : "ff62383b89a7e443bbaafaf35473d9bade96e820",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(${STDINCONTROLLER_BIN} PUBLIC ${CMAKE_SOURCE_DIR}/src \"${CMAKE_SOURCE_DIR}/zmqpp/src\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/sysfsgpio/CMakeLists.txt" : {
      "ObjectId" : "550487acd36e9f1da1fe90450ae77ef1f35d984a",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/tcp-notifier/CMakeLists.txt" : {
      "ObjectId" : "a1281d95ffe684721413c466ba9ee54996ded3ed",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/test-and-reset/CMakeLists.txt" : {
      "ObjectId" : "cc846e445169e9e20372a5432ddf0388c14a8515",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/modules/websock-api/CMakeLists.txt" : {
      "ObjectId" : "3f9892c7766374f8bb14b6dd88e000bd3ceede29",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ODB generated code use a simple #include, so it needs to be able\n\n# to find our header file.\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# And for Generated ODB code to access our headers\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "src/modules/wiegand/CMakeLists.txt" : {
      "ObjectId" : "e11cd376ec190d2807c73381200cb5a089eac8d0",
      "LastModified" : "2017-10-18T12:20:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Database support\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/modules/ws-notifier/CMakeLists.txt" : {
      "ObjectId" : "367cb6f496d58bcfa09015114536c71df9bb155c",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "91ff090e78527e5365f72cdc051b643880d7fa5e",
      "LastModified" : "2017-09-28T14:39:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## module we link against\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## pass the data folder as a parameter.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 38
  },
  "ElapsedTime" : 1437
}