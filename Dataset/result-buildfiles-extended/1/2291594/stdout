{
  "Repository" : "2291594",
  "Revision" : "HEAD",
  "ObjectId" : "587e97ff951fc7900d5f63b9bffd54b2d41359e8",
  "CommitTime" : "2019-02-04T04:07:22Z",
  "Files" : {
    "pljava-ant/pom.xml" : {
      "ObjectId" : "01ddaecbca5aac9ae8a2032c23241e7da4310801",
      "LastModified" : "2016-02-01T05:19:13Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "pljava-api/pom.xml" : {
      "ObjectId" : "352cd414379f2610d971614117acfacf46c0a7ef",
      "LastModified" : "2016-02-01T05:19:13Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "pljava-examples/pom.xml" : {
      "ObjectId" : "70809e0c4639058876d358dae9c8463faf863d8e",
      "LastModified" : "2018-10-29T04:35:58Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "pljava-packaging/Makefile" : {
      "ObjectId" : "28ef5d24c49f818d45a0343d2bb9f64b6f0fd6f1",
      "LastModified" : "2016-02-01T05:19:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------\n\n# Copyright (c) 2003, 2004 TADA AB - Taby Sweden\n\n# Distributed under the terms shown in the file COPYRIGHT.\n\n#\n\n# @author Thomas Hallgren\n\n#-------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "pljava-packaging/build.xml" : {
      "ObjectId" : "db07e296cfe3fe7f0266f248fa442e0c48b02650",
      "LastModified" : "2018-11-05T06:03:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "containsregex pattern=\".*SNAPSHOT-(.*)-shared.*$\" replace=\"\\1\" /",
        "Line" : 14,
        "CharPositionInLine" : 92
      },
      "1" : {
        "Text" : "\n\t\t\tCreate a new ant task <jarxbuild> for building a jar that self-\n\t\t\textracts by including org/gjt/cuspy/JarX.class. <jarxbuild> takes\n\t\t\tone attribute, destfile= (which should be absolute, consider\n\t\t\tspecifying ${basedir} at the front). To specify what goes IN the\n\t\t\tjar, supply nested zipfileset elements; that class was chosen\n\t\t\tbecause it already supports prefix=, fullpath=, and filemode=\n\t\t\tattributes to control the stored path and permission info, as well\n\t\t\tas all the scanning/inclusion/exclusion rules you could want. But by\n\t\t\titself, it isn't enough to tell JarX which files are binary or text,\n\t\t\tor the encodings of the text files. That is conveyed by which alias\n\t\t\tis used for each zipfileset. That is, you don't literally use\n\t\t\tnested <zipfileset> elements, but instead <binary>, <ascii>, or\n\t\t\t<utf8> elements, which all are zipfilesets behind the scenes and\n\t\t\thave all the same attributes and elements. Any files supplied in\n\t\t\ta <binary> element will be archived and unarchived unchanged.\n\t\t\tFiles supplied in an <ascii> or <utf8> element will be treated as\n\t\t\ttext and have their line endings converted to local conventions on\n\t\t\textraction; they won't be transcoded, but will be stored in and\n\t\t\textracted from the jar in the specified encoding (and verified to\n\t\t\tbe well-formed in it). That obviously isn't a fully-general way to\n\t\t\tspecify the text handling, but it gets the job done, and if you have\n\t\t\tanother case to handle, just add another zipfileset <element> with\n\t\t\tanother name, and edit the javascript below to know what to do\n\t\t\twith it.\n\n\t\t\tTo emphasize, files given in an <ascii> or <utf8> element are\n\t\t\textracted in exactly that encoding on any target platform regardless\n\t\t\tof the platform's default encoding. That's appropriate for an\n\t\t\textension .control file (which must be <ascii> because PostgreSQL\n\t\t\tassumes it), and any extension .sql scripts we supply (which must\n\t\t\tbe <utf8> because the .control file says so). It's possible that\n\t\t\tfor some other text files we might include (general docs or\n\t\t\twhat not), it would be nicer to let them be extracted into the\n\t\t\tplatform's default encoding (achieved by specifying a fixed value\n\t\t\tsuch as UTF-8 for _JarX_CharsetInArchive while entirely omitting\n\t\t\t_JarX_CharsetWhenUnpacked). But at the moment no such files are\n\t\t\tbeing included, so I haven't provided another element name to give\n\t\t\tthat behavior.\n\n\t\t\tThere has to be a <binary> element supplying JarX.class itself.\n\n\t\t\tThe <jarxbuild> task also accepts nested text, which will be treated\n\t\t\tas a path-resolver script (the language is assumed to be\n\t\t\tapplication/javascript; I'm lazy). It will be stuffed into the\n\t\t\tmanifest in a form that survives manifest line-wrapping, and JarX\n\t\t\twill use it at extraction time to rewrite pathnames. In this case,\n\t\t\tthat script (see further below) will use pg_config or system\n\t\t\tproperties to determine the extraction paths.\n\t\t",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : " JarX is there ",
        "Line" : 86,
        "CharPositionInLine" : 68
      },
      "3" : {
        "Text" : " Now build the jar using the <jarxbuild> task just created. ",
        "Line" : 257,
        "CharPositionInLine" : 70
      },
      "4" : {
        "Text" : " For any past version that has been released from which a\n\t\t\t     simple update is possible, just repeat the next entry, with\n\t\t\t\t the from-version changed.\n\t\t\t  ",
        "Line" : 283,
        "CharPositionInLine" : 9
      },
      "5" : {
        "Text" : " If editing the script below, expand tabs to spaces (at 4 columns, and only\n\t for the lines of the script) before saving. Line-wrapped into the manifest,\n\t it looks horrible with tabs.\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "pljava-packaging/pom.xml" : {
      "ObjectId" : "cf29e57cfae9286d366059212ca227afd00d9802",
      "LastModified" : "2018-10-29T04:35:58Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "pljava-so/build.xml" : {
      "ObjectId" : "d57b4554397bf81be487d5136e2d152c142cd0a7",
      "LastModified" : "2018-10-29T04:35:58Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " First gather all values from the pg_config executable. ",
        "Line" : 40,
        "CharPositionInLine" : 66
      },
      "1" : {
        "Text" : " Finally write all properties to a file which Maven understands. ",
        "Line" : 93,
        "CharPositionInLine" : 75
      },
      "CommentCount" : 2
    },
    "pljava-so/pom.xml" : {
      "ObjectId" : "5e206bae37fd68467e0521d615e6293a0619a0b3",
      "LastModified" : "2018-10-29T04:35:58Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " use -Dnar.cores=1 if non-interleaved warning messages wanted ",
        "Line" : 17,
        "CharPositionInLine" : 72
      },
      "1" : {
        "Text" : " I still have an inner voice telling me it should never (well,\n\t\t\thardly ever) be necessary to mention these PostgreSQL libraries\n\t\t\tduring the PL/Java link, and on any platform where it isn't\n\t\t\tnecessary, it is better not to. Leaving them unresolved should\n\t\t\tallow them to be resolved within the backend process itself, where\n\t\t\tthe correct versions will be found, whereas if they are seen at\n\t\t\tlink time and DT_NEEDED entries are made for them, the runtime\n\t\t\tlinker may pull in *wrong* versions if there are links in the system\n\t\t\tlibrary locations to a different, default-selected PG version.\n\n\t\t\tHowever, they were put here by someone, so were probably needed on\n\t\t\tsome platform for some reason, so it would be reckless to take them\n\t\t\tout completely. Here they are as a profile. If you can build without\n\t\t\tactivating this profile and nothing goes wrong, profit. Otherwise,\n\t\t\tadd -Plinkpglibs on the command line and see if that helps. If it\n\t\t\tdoes, please report your platform and configuration so we know\n\t\t\twhere these are actually needed. If it doesn't help, the trouble\n\t\t\tis somewhere else.\n\n\t\t\tThis profile is placed first to avoid changing the resulting\n\t\t\tlibrary order when another profile that adds to libraries (like\n\t\t\tcompiler-mingw64) are also active.\n\t\t\t",
        "Line" : 44,
        "CharPositionInLine" : 7
      },
      "2" : {
        "Text" : " Need this for Visual Studio 2013 and Postgresql v9.3 and below ",
        "Line" : 118,
        "CharPositionInLine" : 81
      },
      "3" : {
        "Text" : " If the pljava.so must include a RUNPATH for the runtime linker,\n\t\t\tactivate this profile by setting -Dpgsql.runpath to the needed path.\n\t\t\tIf the prefix for the option is something other than -Wl,-rpath=\n\t\t\tthen also set -Dpgsql.runpathpfx to the necessary prefix (including\n\t\t\tthe = if there is one). If this scheme is not flexible enough to\n\t\t\taccommodate your linker, then you may as well just edit this file\n\t\t\tand add the right linker options directly. ",
        "Line" : 206,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : " When building a package for a known distro, if there is a good\n\t\t\tdefault to use for pljava.libjvm_location in that distro, a\n\t\t\tdownstream package maintainer is encouraged to set that default\n\t\t\ton the mvn command line with -Dpljava.libjvmdefault=<full path>\n\t\t\tso that users on that distro can have PL/Java work right out of\n\t\t\tthe box. ",
        "Line" : 239,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : " Several things that could not be done using Maven plugins. This\n\t\t\t\t plugin must be listed FIRST as the pgsql.properties file has to\n\t\t\t\t be written before properties-maven-plugin is called, which can\n\t\t\t\t apparently also only happen in the \"initialize\" phase.\n\t\t\t\t In addition to generating a bunch of properties based on\n\t\t\t\t pg_config (done by the <ant/> task nested below, which relies\n\t\t\t\t on the external build.xml file), the <script> element given\n\t\t\t\t directly here is used to properly quote pljava.libjvmdefault\n\t\t\t\t as a new property pljava.qlibjvmdefault in the form of a C\n\t\t\t\t string literal, to be passed to the C compiler in a <define>.\n\t\t\t  ",
        "Line" : 290,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : " Converts pg_config output\n\t\t\t\t\t\t\t\t\t to \"pgsql.properties\" ",
        "Line" : 382,
        "CharPositionInLine" : 36
      },
      "7" : {
        "Text" : " Reads the pg_config properties, which were extracted by an Ant task\n\t\t\t\tin the \"initialize\" phase, into Maven variables. As this plugin seems to\n\t\t\t\tget ignored in any phase other than \"initialize\" it must be listed after\n\t\t\t\tthe Ant task. ",
        "Line" : 393,
        "CharPositionInLine" : 22
      },
      "8" : {
        "Text" : " Compiles and links the C library. ",
        "Line" : 413,
        "CharPositionInLine" : 46
      },
      "9" : {
        "Text" : " Generates C header files from Java class files. ",
        "Line" : 422,
        "CharPositionInLine" : 62
      },
      "10" : {
        "Text" : " Compiles the C sources to object files. ",
        "Line" : 434,
        "CharPositionInLine" : 54
      },
      "11" : {
        "Text" : " uncomment the next line if you need to configure your compiler (e.g. clang)\n\t\t\t\t\t\t<name>${CPP_COMPILER}</name>\n\t\t\t\t",
        "Line" : 438,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : " TODO: hardcoded paths ",
        "Line" : 443,
        "CharPositionInLine" : 38
      },
      "13" : {
        "Text" : " Options/extra libs/etc. for the linker go here. ",
        "Line" : 453,
        "CharPositionInLine" : 62
      },
      "14" : {
        "Text" : " Builds a *.so library. ",
        "Line" : 457,
        "CharPositionInLine" : 37
      },
      "15" : {
        "Text" : " Do not add \"-lstdc++\". Adds \"-shared-libgcc\" though. ",
        "Line" : 461,
        "CharPositionInLine" : 69
      },
      "16" : {
        "Text" : " The deploy goal will be hijacked by an ant task so the original plugin\n\t\t\t\thas to be silenced until we actually use it.\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-deploy-plugin</artifactId>\n\t\t\t\t<version>2.7</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<skip>true</skip>\n\t\t\t\t</configuration>\n\t\t\t</plugin> ",
        "Line" : 477,
        "CharPositionInLine" : 17
      },
      "17" : {
        "Text" : "This plugin's configuration is used to store Eclipse m2e settings\n\t\t\t\t\tonly. It has no influence on the Maven build itself. ",
        "Line" : 483,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 18
    },
    "pljava-so/src/main/c/Makefile" : {
      "ObjectId" : "5759c8805dd9c8ab13e6777a56e3edc7ceff94a3",
      "LastModified" : "2016-02-01T05:19:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------\n\n# Copyright (c) 2004, 2005, 2006 TADA AB - Taby Sweden\n\n# Copyright (c) 2007 - 2011 PostgreSQL Global Development Group\n\n#\n\n# Distributed under the terms shown in the file COPYRIGHT\n\n# found in the root folder of this project or at\n\n# http://wiki.tada.se/index.php?title=PLJava_License\n\n#\n\n# @author Thomas Hallgren\n\n#-------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Must include PGXS at this point since it defines PORTNAME and VERSION\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# override with JAVAVM_FWX_ROOT=/... on command line\n\n# if something else is needed\n\n#\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#\n\n# Mingw is a bit special in that we use a \"normal\" windows\n\n# port of the Java Runtime Environment (unless we use gcj\n\n# of course). The headers etc. for the JRE is windows style\n\n# and contains __int64. GNU compiler doesn't know __int64,\n\n# instead it uses long long.\n\n#\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Don't use higher standard then c89 since this rules out older compilers. We\n\n# must use 'long long' however, since JNI defines it.\n\n#\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# shlib naming convention for plugins (no 'lib')\n\n#\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Normal case\n\n#\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# PORTNAME == aix\n",
        "Line" : 233,
        "CharPositionInLine" : 5
      },
      "8" : {
        "Text" : "# AIX case\n\n#\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# PORTNAME == aix\n",
        "Line" : 241,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# PORTNAME == win32\n",
        "Line" : 243,
        "CharPositionInLine" : 5
      },
      "11" : {
        "Text" : "# win32 case\n\n#\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# PORTNAME == win32\n",
        "Line" : 271,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 13
    },
    "pljava/pom.xml" : {
      "ObjectId" : "cb54e7ab6aea96a7a3fbf4c81670be0d1a32d8b4",
      "LastModified" : "2016-02-01T05:19:13Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n\t\t\t\t\t\t\t\t  This section totally doesn't belong here - it\n\t\t\t\t\t\t\t\t  is crazy that the shade plugin cannot copy it\n\t\t\t\t\t\t\t\t  from the manifest of the API jar being shaded\n\t\t\t\t\t\t\t\t  in - even the manifest transformer is no help.\n\t\t\t\t\t\t\t\t",
        "Line" : 60,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 1
    },
    "pom.xml" : {
      "ObjectId" : "2c25d9d2b27a9e027777730f92be3c2749066001",
      "LastModified" : "2018-10-29T04:35:58Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " later versions are Java 7+ ",
        "Line" : 83,
        "CharPositionInLine" : 65
      },
      "1" : {
        "Text" : " later versions are Java 7+ ",
        "Line" : 88,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 2
    },
    "src/java/test/Makefile" : {
      "ObjectId" : "fc39d29323bfd114fd0e5c5a3a67d8426fb4d46d",
      "LastModified" : "2016-02-01T05:19:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------------\n\n# Copyright (c) 2004, 2005 TADA AB - Taby Sweden\n\n# Distributed under the terms shown in the file COPYRIGHT\n\n# found in the root folder of this project or at\n\n# http://eng.tada.se/osprojects/COPYRIGHT.html\n\n#\n\n# @author Thomas Hallgren\n\n#-------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/java/test/build.xml" : {
      "ObjectId" : "a2a26865dd6f41b9e5af15d9ee46a74dda1fa998",
      "LastModified" : "2016-02-01T05:19:13Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 3,
    "ANT" : 3,
    "MAVEN" : 7
  },
  "ElapsedTime" : 1426
}