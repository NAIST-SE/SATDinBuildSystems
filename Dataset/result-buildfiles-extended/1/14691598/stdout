{
  "Repository" : "14691598",
  "Revision" : "HEAD",
  "ObjectId" : "f65a06c62e9911d092a1fcc2f8f474cada060d85",
  "CommitTime" : "2018-08-24T13:17:15Z",
  "Files" : {
    "Android/AS-Test/app/CMakeLists.txt" : {
      "ObjectId" : "ea96606b3b71542a4e24deb6de701d85e9c853da",
      "LastModified" : "2017-02-07T14:16:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sets the minimum version of CMake required to build the native\n\n# library. You should either keep the default value or only pass a\n\n# value of 3.4.0 or lower.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Creates and names a library, sets it as either STATIC\n\n# or SHARED, and provides the relative paths to its source code.\n\n# You can define multiple libraries, and CMake builds it for you.\n\n# Gradle automatically packages shared libraries with your APK.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sets the name of the library.\n",
        "Line" : 12,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Sets the library as a shared library.\n",
        "Line" : 15,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Provides a relative path to your source file(s).\n\n# Associated headers in the same location as their source\n\n# file are automatically included.\n",
        "Line" : 18,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# Searches for a specified prebuilt library and stores the path as a\n\n# variable. Because system libraries are included in the search path by\n\n# default, you only need to specify the name of the public NDK library\n\n# you want to add. CMake verifies that the library exists before\n\n# completing its build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Sets the name of the path variable.\n",
        "Line" : 29,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : "# Specifies the name of the NDK library that\n\n# you want CMake to locate.\n",
        "Line" : 32,
        "CharPositionInLine" : 14
      },
      "8" : {
        "Text" : "# Specifies libraries CMake should link to your target library. You\n\n# can link multiple libraries, such as libraries you define in the\n\n# build script, prebuilt third-party libraries, or system libraries.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Specifies the target library.\n",
        "Line" : 40,
        "CharPositionInLine" : 23
      },
      "10" : {
        "Text" : "# Links the target library to the log library\n\n# included in the NDK.\n",
        "Line" : 43,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 11
    },
    "Android/AS-Test/app/proguard-rules.pro" : {
      "ObjectId" : "b7a10948fcec7957ab8d58a71de17d9acba69707",
      "LastModified" : "2017-02-07T14:16:26Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in F:\\ProgramFiles\\android\\sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "OpenSteer/linux/Makefile" : {
      "ObjectId" : "90ba3eccf3e3e71af554f85a1f399a9749b11824",
      "LastModified" : "2017-03-13T14:04:27Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#########################################################################\n\n###\n\n###\n\n### OpenSteer -- Steering Behaviors for Autonomous Characters\n\n###\n\n### Copyright (c) 1999, 2000, 2002-2003, Sony Computer Entertainment America\n\n### Original authors: Bret Mogilefsky and Tyler Daniel, minor tweaks by Craig\n\n### Reynolds <craig_reynolds@playstation.sony.com>\n\n###\n\n### Permission is hereby granted, free of charge, to any person obtaining a\n\n### copy of this software and associated documentation files (the \"Software\"),\n\n### to deal in the Software without restriction, including without limitation\n\n### the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n### and/or sell copies of the Software, and to permit persons to whom the\n\n### Software is furnished to do so, subject to the following conditions:\n\n###\n\n### The above copyright notice and this permission notice shall be included in\n\n### all copies or substantial portions of the Software.\n\n###\n\n### THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n### IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n### FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n\n### THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n### LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n### FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n### DEALINGS IN THE SOFTWARE.\n\n###\n\n###\n\n#########################################################################\n\n### \n\n### Boilerplate Makefile by Bret Mogilefsky (mogul@playstation.sony.com)\n\n### \twith heaps of help from Tyler Daniel\n\n###\n\n### Use this makefile as a template for new projects!\n\n### \n\n### General Features:\n\n###\n\n###\tJust specify SRCS and go!\n\n###\tAutomatic and minimal (fast!) dependency generation (for vu microcode as well)\n\n###\tAllows keeping source and headers from src and include dirs, or elsewhere.\n\n###\tBuilds in a subdirectory.\n\n###\tAllows additional defines, include dirs, and lib dirs without \n\n###\t\tspecifying -D, -I, and -L\n\n###   Easy to specify parallel builds (debug, optimized, release, etc)\n\n###   Easy to add flags on a per-file, per-build, or per-file-build basis\n\n###\tCan specify parent projects to make first (libraries)\n\n###\tBuilds libraries\n\n###\tSlices, dices, feeds your cat, calls your mum.\n\n###\n\n### VU microcode features:\n\n###\n\n###\tGenerates depencies for microcode (for .include and #include)\n\n###\tUses a preprocessing script to manage registers (configurable)\n\n###\tRuns the c preprocessor over microcode - you can use #define and #include\n\n###\t\tfreely (and share #defines with c/c++)\n\n###\tSupport for vcl\n\n###\n\n### Useful targets:\n\n###\n\n###\trun\t\tRun the executable.\n\n###\txrun\t\tRun the executable under a new xterminal.\n\n###\tclean\t\tRemove everything we can rebuild.\n\n###\ttags\t\tGenerate source-browsing tags for Emacs.\n\n###\n\n### Using builds:\n\n###\n\n### \tTo specify a particular build include the name of the build anywhere on\n\n### \tthe command line:\n\n### \t\tmake xrun optimized,\n\n###   \tmake clean optimized, etc.\n\n###\n\n### \tIncluded builds (add your own!):\n\n### \t\tdebug\n\n###\t\toptimized\t(default)\n\n###\t\trelease\n\n###\n\n###\tFor more info see the \"Build Options\" section below\n\n##########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##########################################################################\n\n### Target\n\n##########################################################################\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The name of the binary file we want to generate.  Also handles libraries! (.a)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########################################################################\n\n### Files and Paths - this is probably the only section you'll need to change\n\n##########################################################################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The source files for the project.\n\n# get all cpp source files\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get all c source files\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# .. or add them manually\n\n#SRCS += ...\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#SRCS\t\t+= $(foreach DIR,$(SRCDIRS),$(subst $(DIR)/,,$(wildcard $(DIR)/*.cpp)))\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Additional objects to link. Only add things that aren't built from SRCS!\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Additional libs to link with.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Additional locations for header files\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Additional locations for library files\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Additional locations for source files\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Object files and the target will be placed in this directory with an\n\n# underscore and the buildname appended (e.g., for the \"debug\" build: objs_debug/)\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Dependency files will be placed in this directory with an underscore and\n\n# the buildname appended (e.g., for the \"debug\" build: deps_debug/)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If this project depends other projects (a ps2 rendering library for example) that should\n\n# be built with make before making this one, list the directories here.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##########################################################################\n\n### Common Options (shared across builds)\n\n##########################################################################\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# link against libraries\n\n#LIBS\t\t+= libstdc++.a\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# find sce headers\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# find sce libraries\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Additional preprocessor definitions\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Compiler optimization options\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Compiler debug options\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# enable all warnings\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Command-line arguments to be passed to the target when we run it\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########################################################################\n\n### Build Options - applied per-build\n\n##########################################################################\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Which build to do if none is specified on the command line\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "################# application ####################\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Specifics for the \"debug\" build\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Specifics for the \"optimized\" build \n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Specifics for the \"release\" build\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# You can specify flags for a new build type \"hamburger\" as follows:\n\n# BUILDNAMES\t\t+= hamburger\n\n# hamburger_INCDIRS\t= someincdirs\n\n# hamburger_LIBDIRS\t= somelibdirs\n\n# hamburger_DEFINES\t= somedefs\n\n# hamburger_OPTFLAGS\t= someoptflags\n\n# hamburger_DEBUGFLAGS\t= somedebugflags\n\n# hamburger_RUNARGS\t= somerunargs\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "##########################################################################\n\n### Per-file Options\n\n##########################################################################\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Additional defines and include dirs can be specified on a per-file basis\n\n# by prefixing with the stem of the filename.  For example, if I wanted special flags\n\n# for building mucilage.cpp, I could add any of the following \n\n# mucilage_INCDIRS\t= someincdirs \n\n# mucilage_LIBDIRS\t= somelibdirs\n\n# mucilage_DEFINES\t= somedefs\n\n# mucilage_OPTFLAGS\t= someoptflags\n\n# mucilage_DEBUGFLAGS\t= somedebugflags\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "##########################################################################\n\n### Per-file, per-build Options\n\n##########################################################################\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Similar to above.. To apply special flags for building mucilage.cpp for\n\n# the debug build, I could add any of the following\n\n# mucilage_debug_INCDIRS\t= someincdirs \n\n# mucilage_debug_LIBDIRS\t= somelibdirs\n\n# mucilage_debug_DEFINES\t= somedefs\n\n# mucilage_debug_OPTFLAGS\t= someoptflags\n\n# mucilage_debug_DEBUGFLAGS\t= somedebugflags\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "##########################################################################\n\n### Makefile operation\n\n##########################################################################\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Set this to 1 to print status messages (like 'Compiling somefile.cpp...')\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Set this to 1 to print the exact command lines used to build files\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "##########################################################################\n\n### include the makefile that does all the work\n\n##########################################################################\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "Project/MyProject/MyProject/ThirdParty/Inc/LuaIntf/CMakeLists.txt" : {
      "ObjectId" : "ed516e4cf08ae94a4972de064fc27ea93c8846e5",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# �����ļ�\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Project/MyProject/MyProject/ThirdParty/Src/CMakeLists.txt" : {
      "ObjectId" : "d489ae8adb828dba1239f5fe22bb51573d842b10",
      "LastModified" : "2018-06-26T16:20:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(Sockets-2.3.9.9)\n\n#add_subdirectory(Sockets-2.3.9.9/tests)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory(gtest-1.7.0)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_subdirectory(LuaBridge/Source/LuaBridge)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Project/MyProject/MyProject/ThirdParty/Src/LuaBridge/Source/LuaBridge/CMakeLists.txt" : {
      "ObjectId" : "52fda7e986acf1ccf1521c08626d3849ef28898a",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# �����ļ�\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#file(GLOB_RECURSE COPY_SRC \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n\n#install(FILES ${COPY_SRC} DESTINATION \"${CMAKE_SOURCE_DIR}/../Inc/${PROJECT_NAME}\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Project/MyProject/MyProject/ThirdParty/Src/LuaIntf/LuaIntf/CMakeLists.txt" : {
      "ObjectId" : "ed516e4cf08ae94a4972de064fc27ea93c8846e5",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# �����ļ�\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Project/MyProject/MyProject/ThirdParty/Src/Sockets-2.3.9.9/CMakeLists.txt" : {
      "ObjectId" : "c55a59c23f2f788f2ad4fba69477462d93a22bd5",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ֻ���� win32 ƽ̨  \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(LIBRARY_OUTPUT_PATH \"${CMAKE_SOURCE_DIR}/../Lib/${PROJECT_NAME}\")\n",
        "Line" : 242,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#file(REMOVE_RECURSE \"${CMAKE_CURRENT_SOURCE_DIR}/../../Lib/${PROJECT_NAME}\")\n\n#file(MAKE_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/../../Lib/${PROJECT_NAME}\")\n",
        "Line" : 322,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#INSTALL(DIRECTORY ${LIBRARY_OUTPUT_PATH} DESTINATION \"${CMAKE_CURRENT_SOURCE_DIR}/../../Lib/${PROJECT_NAME}\")\n",
        "Line" : 325,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#message(STATUS \"fff\" ${LIBRARY_OUTPUT_PATH})\n\n#message(STATUS \"fff\" ${CMAKE_CURRRENT_BINARY_DIR})\n\n#message(STATUS \"fff\" ${Sockets_BINARY_DIR})\n",
        "Line" : 327,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "Project/MyProject/MyProject/ThirdParty/Src/Sockets-2.3.9.9/Makefile" : {
      "ObjectId" : "e784d5a0bc0c833ffb6e7758a729e083530db229",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# platforms:\n\n#  linux-x86-32\n\n#  linux-x86-64\n\n#  win32-cygwin\n\n#  solaris9-sparc-64\n\n#  macosx\n\n#  solaris8\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 'Makefile.version' defines the $(VERSION) of the library, and also\n\n# setup the OBJS variable - stuff to be compiled.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Overall name of library, used to define library name(s) and\n\n# target directory of installed include files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debian GNU/Linux\n\n#NAME =\t\tsockets\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# .h files installed to $(DESTDIR)/$(PREFIX)/include/$(NAME)\n\n# static lib .a files installed to $(DESTDIR)/$(PREFIX)/lib\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# debian\n\n#PREFIX =\t/usr\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# include paths\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add for libxml2 if not in above location\n\n#CFLAGS +=\t`xml2-config --cflags`\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# CXX, CFLAGS, LIBS, LDFLAGS, LDFLAGSSO\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# uncomment these lines if the library should be in its own namespace\n\n#CFLAGS +=\t-DSOCKETS_NAMESPACE=sockets\n\n#CFLAGS +=\t-DSOCKETS_NAMESPACE_STR='\"sockets\"'\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Enable insane amounts of debug output to stdout/stderr:\n\n#CFLAGS +=\t-D_DEBUG\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# everything which follows is www.alhem.net/Sockets website maintenance stuff, please ignore\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# no binary files, zip will translate lf to cr lf\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "Project/MyProject/MyProject/ThirdParty/Src/Sockets-2.3.9.9/tests/CMakeLists.txt" : {
      "ObjectId" : "ffd4f2cc0f9de26c5d1fe9ea179597ae4cc6d196",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ֻ���� win32 ƽ̨  \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Project/MyProject/MyProject/ThirdParty/Src/Sockets-2.3.9.9/tests/Makefile" : {
      "ObjectId" : "fa2c6693b554ed1e1f045d8ae4cd95a00e60a68c",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-L$(SOCKETS) -lSockets \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#LIBS +=\t\t-lsctp\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Project/MyProject/MyProject/ThirdParty/Src/TestStaticLib/CMakeLists.txt" : {
      "ObjectId" : "5ec6f82af33fd48d09c71787acc1e461bc1a8f7e",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ֻ���� win32 ƽ̨  \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(LIBRARY_OUTPUT_PATH \"${CMAKE_SOURCE_DIR}/../Lib/${PROJECT_NAME}\")\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "Project/MyProject/MyProject/ThirdParty/Src/gtest-1.7.0/CMakeLists.txt" : {
      "ObjectId" : "7bb1607f9df77c68ff2d20e5e0628f73218dbfe4",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "Project/MyProject/MyProject/ThirdParty/Src/gtest-1.7.0/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "Project/MyProject/MyProject/ThirdParty/Src/gtest-1.7.0/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "Project/MyProject/MyProject/ThirdParty/Src/gtest-1.7.0/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Project/MyProject/MyProject/ThirdParty/Src/gtest-1.7.0/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Project/MyProject/MyProject/ThirdParty/Src/lua-5.3.1/Makefile" : {
      "ObjectId" : "5ee56011249728bf4ddd85e58ea7685ecdb4f931",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "Project/MyProject/MyProject/ThirdParty/Src/lua-5.3.1/src/CMakeLists.txt" : {
      "ObjectId" : "c4706711da5e5d1b6c92c6febd77a8c0f275eadf",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#./luac.c\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# lua ���ʺ�ʹ�� VS ���� DLL ����Ϊ VS ���Ҫ���� Lua DLL ����Ҫһ�� def �ļ����У�������б��뾯�档VS ������������� LUA_LIB ���� LUA_CORE ���ͻ��о��棬��������壬#define LUA_API __declspec(dllimport) ����˶�������\n\n# Lua ����� Dll�����忴 luaconf.h�� LUA_CORE �Ѿ���  Lua Դ�������ж����ˣ����ʹ�� LUA_LIB \n\n#ADD_DEFINITIONS(-DLUA_BUILD_AS_DLL -DLUA_CORE)\n\n#ADD_DEFINITIONS(-DLUA_BUILD_AS_DLL -DLUA_LIB)\n\n#ADD_LIBRARY(Lua SHARED ${SRCS})\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# �����ļ�\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Project/MyProject/MyProject/ThirdParty/Src/lua-5.3.1/src/Makefile" : {
      "ObjectId" : "d71c75c8732257fefa4c3ff279589f05d6f74d2a",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Project/MyProject/MyProject/ThirdParty/Src/luacppinterface-master/CMakeLists.txt" : {
      "ObjectId" : "71158af8b59d34b5d73a2a7b44e1a9ea9b4864e1",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Project/MyProject/MyProject/ThirdParty/Src/luacppinterface-master/LuaCppInterface/Makefile.am" : {
      "ObjectId" : "95936257c895bd082eee7aad2b3178825d01ac63",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "Project/MyProject/MyProject/ThirdParty/Src/luacppinterface-master/Makefile.am" : {
      "ObjectId" : "a9f35164db356bf8c454f8d7697140294975fa10",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "Project/MyProject/MyProject/ThirdParty/Src/luacppinterface-master/tests/Makefile.am" : {
      "ObjectId" : "c28ae9471981d79cdc14b80d567bec15392d7415",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "Project/MyProject/MyProject/ThirdParty/Src/luasocket-master/CMakeLists.txt" : {
      "ObjectId" : "6cf9244ab075eb258d33641961909a74f676357a",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# �����ļ�\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Project/MyProject/MyProject/ThirdParty/Src/stateMachine-master/Makefile" : {
      "ObjectId" : "3c49a4f146fbef28edf024458c7fef3d2f2d18bd",
      "LastModified" : "2018-05-09T13:50:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Test/TestCMakeAndroid/CMakeLists.txt" : {
      "ObjectId" : "600adea4a7be0fcfbfd63c709081e54c6d23abfb",
      "LastModified" : "2018-08-22T04:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#****************************This is Project Info****************************\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#****************************This is Compile Flag****************************\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__ANDROID__ -DANDROID\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#****************************This is Include File/Directories****************************\n\n#INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#****************************This is Source File/Directories****************************\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#****************************This is Library Directories****************************\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#****************************This is 3Party Library****************************\n\n#LINK_LIBRARIES(pthread)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#****************************This is Output Directory****************************\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#****************************This is Output Library****************************\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Test/TestFile/CMakeLists.txt" : {
      "ObjectId" : "84fe221ccf4f3662b31ed95540e0697bab26d961",
      "LastModified" : "2018-08-22T04:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_DEFINITIONS(-DTEST)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Test/TestMeDelegate/CMakeLists.txt" : {
      "ObjectId" : "a4b7083232cac1511b52b053abca8c675d074fe3",
      "LastModified" : "2018-08-22T04:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_DEFINITIONS(-DTEST)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Test/TestMyDelegate/CMakeLists.txt" : {
      "ObjectId" : "1fb31087ba1a45ec0d0ba492046f817a14909bf1",
      "LastModified" : "2018-08-22T04:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_DEFINITIONS(-DTEST)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Test/TestMyDelegatePort/CMakeLists.txt" : {
      "ObjectId" : "1fb31087ba1a45ec0d0ba492046f817a14909bf1",
      "LastModified" : "2018-08-22T04:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_DEFINITIONS(-DTEST)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Test/TestMyDelegatePortSimple/CMakeLists.txt" : {
      "ObjectId" : "8c18e0c6a2713a974fd42845fbccd0e119ecbccc",
      "LastModified" : "2018-08-22T04:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_DEFINITIONS(-DTEST)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Test/TestPort/CMakeLists.txt" : {
      "ObjectId" : "199a0a78c7086464291ab0f28008a3f18cf9f7cc",
      "LastModified" : "2018-08-22T04:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_DEFINITIONS(-DTEST)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 20,
    "QMAKE" : 1,
    "MAKEFILE" : 8,
    "AUTOMAKE" : 4
  },
  "ElapsedTime" : 7383
}