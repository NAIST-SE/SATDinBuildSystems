{
  "Repository" : "13895811",
  "Revision" : "HEAD",
  "ObjectId" : "cf2559f43f5dfdf2f726f438bf21bcbf182ebc93",
  "CommitTime" : "2018-06-10T19:59:37Z",
  "Files" : {
    "3rdparty/CMakeLists.txt" : {
      "ObjectId" : "325281a55ffbb193e662c85eac5a13555710ff6c",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/Qt/CMakeLists.txt" : {
      "ObjectId" : "8da6d837bf56beb2fd942a58739d664120003700",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/SFML/CMakeLists.txt" : {
      "ObjectId" : "dfac395ad2c27ebf742d006be147317a8575e198",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeLists.txt" : {
      "ObjectId" : "3fc476dec74a2151d49bfe9eeaaf7419d51c84d3",
      "LastModified" : "2018-05-12T12:36:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- Script Setup\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use Debug build by default.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disable in-source builds and modifications\n\n# to the source tree.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enable compiler tests.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check that all the custom module paths exist. This is particularly important\n\n# to ensure the user has pulled any relevant Git submodules.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# --- Compiler Properties\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# --- Options\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# --- Compiler Flags\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Enable most warnings.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Not concerned about C++98 compatibility.\n",
        "Line" : 86,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Not that concerned about switches which don't explicitly handle every case\n\n# (i.e. and use a default case instead).\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Not that concerned about vtables emitted in every compilation unit (they\n\n# should be merged when linking).\n",
        "Line" : 93,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Often very difficult to avoid padding warnings.\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Use C++11.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add version as preprocessor defines.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --- User config\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --- Dependencies\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Find LLVM (for code generation).\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Check LLVM version.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Also use LLVM_OBJ_ROOT here for custom builds of LLVM.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Build LLVM ABI\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# --- Subdirectories\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# All headers are in the /include directory.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Compute list of standard library modules as build target dependencies.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# 3rd-party library Loci bindings.\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Documentation.\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Loci examples that are build by the compiler.\n",
        "Line" : 328,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Compiler libraries (e.g. SemanticAnalysis).\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Language runtime.\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Standard library.\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Compiler tests (e.g. that particular source files compile or don't compile).\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Compiler tools (such as the 'locic' command line tool).\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Unit tests.\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Utilities.\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Add a 'check' target that builds and tests the compiler.\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "cmake/ConcatFiles.cmake" : {
      "ObjectId" : "4f1e69cfe4c98f70e9e2f267d0704d65118aba55",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/LLVMABI.cmake" : {
      "ObjectId" : "0902682e5ff2e73df5fd1f5060c5b134cc8acb79",
      "LastModified" : "2016-09-03T14:14:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Build llvm-abi support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Pull llvm-abi from repository and build it.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create imported library target.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/LociModule.cmake" : {
      "ObjectId" : "c92d60139d7010d5734cf27c06726b6747a6c10b",
      "LastModified" : "2015-12-22T20:13:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Run compiler.\n",
        "Line" : 37,
        "CharPositionInLine" : 11
      },
      "1" : {
        "Text" : "# Use clang to build C source files into LLVM bitcode.\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Link Loci and C modules together.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/MakeCString.cmake" : {
      "ObjectId" : "917f5241ce14a34ab1e27fe5748768c9b9f2771b",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/PrecompiledHeader.cmake" : {
      "ObjectId" : "72b7729c603dda6e18e61ccac66c82efd1668b34",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Function for setting up precompiled headers. Usage:\n\n#\n\n#   add_library/executable(target\n\n#       pchheader.c pchheader.cpp pchheader.h)\n\n#\n\n#   add_precompiled_header(target pchheader.h\n\n#       [FORCEINCLUDE]\n\n#       [SOURCE_C pchheader.c]\n\n#       [SOURCE_CXX pchheader.cpp])\n\n#\n\n# Options:\n\n#\n\n#   FORCEINCLUDE: Add compiler flags to automatically include the\n\n#   pchheader.h from every source file. Works with both GCC and\n\n#   MSVC. This is recommended.\n\n#\n\n#   SOURCE_C/CXX: Specifies the .c/.cpp source file that includes\n\n#   pchheader.h for generating the pre-compiled header\n\n#   output. Defaults to pchheader.c. Only required for MSVC.\n\n#\n\n# Caveats:\n\n#\n\n#   * Its not currently possible to use the same precompiled-header in\n\n#     more than a single target in the same directory (No way to set\n\n#     the source file properties differently for each target).\n\n#\n\n#   * MSVC: A source file with the same name as the header must exist\n\n#     and be included in the target (E.g. header.cpp). Name of file\n\n#     can be changed using the SOURCE_CXX/SOURCE_C options.\n\n#\n\n# License:\n\n#\n\n# Copyright (C) 2009-2013 Lars Christensen <larsch@belunktum.dk>\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the 'Software') deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindCSFML.cmake" : {
      "ObjectId" : "81564cde4b359ef4a68fc34ac7fb28e58a7470c0",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SFML\n\n# ----\n\n# SFML - Copyright (C) 2007-2015 Laurent Gomila - laurent@sfml-dev.org\n\n# This software is provided 'as-is', without any express or\n\n# implied warranty. In no event will the authors be held\n\n# liable for any damages arising from the use of this software.\n\n# Permission is granted to anyone to use this software for any purpose,\n\n# including commercial applications, and to alter it and redistribute\n\n# it freely, subject to the following restrictions:\n\n# 1. The origin of this software must not be misrepresented;\n\n# you must not claim that you wrote the original software.\n\n# If you use this software in a product, an acknowledgment\n\n# in the product documentation would be appreciated but\n\n# is not required.\n\n# 2. Altered source versions must be plainly marked as such,\n\n# and must not be misrepresented as being the original software.\n\n# 3. This notice may not be removed or altered from any\n\n# source distribution.\n\n# \n\n# This script locates the CSFML library\n\n# ------------------------------------\n\n#\n\n# Usage\n\n# -----\n\n#\n\n# When you try to locate the CSFML libraries, you must specify which modules you want to use (system, window, graphics, network, audio, main).\n\n# If none is given, the CSFML_LIBRARIES variable will be empty and you'll end up linking to nothing.\n\n# example:\n\n#   find_package(CSFML COMPONENTS graphics window system) // find the graphics, window and system modules\n\n#\n\n# You can enforce a specific version, either MAJOR.MINOR or only MAJOR.\n\n# If nothing is specified, the version won't be checked (i.e. any version will be accepted).\n\n# example:\n\n#   find_package(CSFML COMPONENTS ...)     // no specific version required\n\n#   find_package(CSFML 2 COMPONENTS ...)   // any 2.x version\n\n#   find_package(CSFML 2.4 COMPONENTS ...) // version 2.4 or greater\n\n#\n\n# By default, the dynamic libraries of CSFML will be found. To find the static ones instead,\n\n# you must set the CSFML_STATIC_LIBRARIES variable to TRUE before calling find_package(CSFML ...).\n\n# Since you have to link yourself all the CSFML dependencies when you link it statically, the following\n\n# additional variables are defined: CSFML_XXX_DEPENDENCIES and CSFML_DEPENDENCIES (see their detailed\n\n# description below).\n\n# In case of static linking, the CSFML_STATIC macro will also be defined by this script.\n\n# example:\n\n#   set(CSFML_STATIC_LIBRARIES TRUE)\n\n#   find_package(CSFML 2 COMPONENTS network system)\n\n#\n\n# On Mac OS X if CSFML_STATIC_LIBRARIES is not set to TRUE then by default CMake will search for frameworks unless\n\n# CMAKE_FIND_FRAMEWORK is set to \"NEVER\" for example. Please refer to CMake documentation for more details.\n\n# Moreover, keep in mind that CSFML frameworks are only available as release libraries unlike dylibs which\n\n# are available for both release and debug modes.\n\n#\n\n# If CSFML is not installed in a standard path, you can use the CSFML_ROOT CMake (or environment) variable\n\n# to tell CMake where CSFML is.\n\n#\n\n# Output\n\n# ------\n\n#\n\n# This script defines the following variables:\n\n# - For each specified module XXX (system, window, graphics, network, audio, main):\n\n#   - CSFML_XXX_LIBRARY_DEBUG:   the name of the debug library of the xxx module (set to CSFML_XXX_LIBRARY_RELEASE is no debug version is found)\n\n#   - CSFML_XXX_LIBRARY_RELEASE: the name of the release library of the xxx module (set to CSFML_XXX_LIBRARY_DEBUG is no release version is found)\n\n#   - CSFML_XXX_LIBRARY:         the name of the library to link to for the xxx module (includes both debug and optimized names if necessary)\n\n#   - CSFML_XXX_FOUND:           true if either the debug or release library of the xxx module is found\n\n#   - CSFML_XXX_DEPENDENCIES:    the list of libraries the module depends on, in case of static linking\n\n# - CSFML_LIBRARIES:    the list of all libraries corresponding to the required modules\n\n# - CSFML_FOUND:        true if all the required modules are found\n\n# - CSFML_INCLUDE_DIR:  the path where CSFML headers are located (the directory containing the CSFML/Config.h file)\n\n# - CSFML_DEPENDENCIES: the list of libraries CSFML depends on, in case of static linking\n\n#\n\n# example:\n\n#   find_package(CSFML 2 COMPONENTS system window graphics audio REQUIRED)\n\n#   include_directories(${CSFML_INCLUDE_DIR})\n\n#   add_executable(myapp ...)\n\n#   target_link_libraries(myapp ${CSFML_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the CSFML_STATIC macro if static build was chosen\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the list of search paths for headers and libraries\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the CSFML include directory\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the version number\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extract the major and minor version numbers from CSFML/Config.h\n\n# we have to handle framework a little bit differently:\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if we could extract them, compare with the requested version number\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# transform version numbers to an integer\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# compare them\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# CSFML version is < 2.0\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# find the requested modules\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# will be set to false if one of the required modules is not found\n",
        "Line" : 136,
        "CharPositionInLine" : 22
      },
      "12" : {
        "Text" : "# no suffix for csfml-main, it is always a static library\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# release library\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# debug library\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# static release library\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# static debug library\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dynamic release library\n",
        "Line" : 168,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# dynamic debug library\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# choose the entries that fit the requested link type\n",
        "Line" : 180,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# library found\n",
        "Line" : 199,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# if both are found, set CSFML_XXX_LIBRARY to contain both\n",
        "Line" : 202,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# if only one debug/release variant is found, set the other to be equal to the found one\n",
        "Line" : 208,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# debug and not release\n",
        "Line" : 210,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# release and not debug\n",
        "Line" : 215,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# library not found\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# mark as advanced\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to the global list of libraries\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in case of static linking, we must also define the list of all the dependencies of CSFML libraries\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# detect the OS\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# start with an empty list\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# macro that searches for a 3rd-party library\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# csfml-system\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 271,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# csfml-network\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# update the list -- these are only system libraries, no need to find them\n",
        "Line" : 288,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# csfml-window\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# find libraries\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# update the list\n",
        "Line" : 306,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# csfml-graphics\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# find libraries\n",
        "Line" : 326,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# update the list\n",
        "Line" : 331,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# csfml-audio\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# find libraries\n",
        "Line" : 340,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# update the list\n",
        "Line" : 347,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# handle errors\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# CSFML version not ok\n",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# include directory or library not found\n",
        "Line" : 363,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# fatal error\n",
        "Line" : 368,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# error but continue\n",
        "Line" : 371,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# handle success\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "cmake/modules/FindClang.cmake" : {
      "ObjectId" : "84fc9cf706a1370c7d1bab9f8132bcea0ba645b9",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() Module for Clang binary\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Clang)\n\n#\n\n# If successful the following variables will be defined\n\n# CLANG_FOUND\n\n# CLANG_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If user specifies a name only look for clang with\n\n# that particular binary name.\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Otherwise search for clang with a\n\n# set of typical names.\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# If user specifies a directory only look for clang\n\n# in that particular root directory.\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Otherwise search for clang in default paths.\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "874607123b035cc61a93443384d78c8e586e0b3b",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake find_package() Module for Sphinx documentation generator\n\n# http://sphinx-doc.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Sphinx)\n\n#\n\n# If successful the following variables will be defined\n\n# SPHINX_FOUND\n\n# SPHINX_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set SPHINX_FOUND to true if SPHINX_EXECUTABLE exists\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide options for controlling different types of output\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "d435879caa0e980ce51b34988186271c65938c87",
      "LastModified" : "2017-02-08T23:13:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Utility function (copied from LLVM).\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PDF needs special handling since Sphinx will generate\n\n# LaTeX documentation which then needs to be converted\n\n# into a PDF document.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Build Latex documentation.\n",
        "Line" : 86,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Quiet: no output other than errors and warnings.\n",
        "Line" : 90,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# Source\n",
        "Line" : 91,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# Output\n",
        "Line" : 92,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "# Run make to generate the PDF documentation.\n\n# (Suppressing Makefile output since it is very verbose,\n\n# and we can probably assume that Sphinx will produce\n\n# valid LaTex).\n",
        "Line" : 93,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Quiet: no output other than errors and warnings.\n",
        "Line" : 110,
        "CharPositionInLine" : 7
      },
      "8" : {
        "Text" : "# Source\n",
        "Line" : 111,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : "# Output\n",
        "Line" : 112,
        "CharPositionInLine" : 26
      },
      "10" : {
        "Text" : "# When \"clean\" target is run, remove the Sphinx build directory\n",
        "Line" : 120,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# We need to remove ${SPHINX_DOC_TREE_DIR} when make clean is run\n\n# but we should only add this path once\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 12
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "5529d343273912c0a2d1e4cdd4b63c71e3caba4c",
      "LastModified" : "2016-01-17T19:07:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Run compiler.\n",
        "Line" : 18,
        "CharPositionInLine" : 10
      },
      "1" : {
        "Text" : "# Run compiler.\n",
        "Line" : 24,
        "CharPositionInLine" : 10
      },
      "2" : {
        "Text" : "# Create a file of all symbols in the primary module.\n",
        "Line" : 41,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Create a file of all symbols in the primary module.\n",
        "Line" : 44,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Link bitcode files together.\n",
        "Line" : 47,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Link bitcode files together.\n",
        "Line" : 50,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Internalize all dependency symbols in linked module.\n",
        "Line" : 53,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Internalize all dependency symbols in linked module.\n",
        "Line" : 56,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Run 'opt' multiple times for maximum optimisation.\n",
        "Line" : 59,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Disassemble for debugging.\n",
        "Line" : 66,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Use 'llc' to generate non-optimised platform object file.\n",
        "Line" : 69,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# Use 'llc' to generate optimised platform object file.\n",
        "Line" : 72,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# Use 'clang' to generate non-optimised platform binary.\n",
        "Line" : 75,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# Use 'clang' to generate optimised platform binary.\n",
        "Line" : 78,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 14
    },
    "examples/Calculator/CMakeLists.txt" : {
      "ObjectId" : "88a25f7896ff498ecd9a99a9b559ef6baf3f5d5d",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/ChainReversi/CMakeLists.txt" : {
      "ObjectId" : "4a7cff85835e2383611160326ceefe92b8029ebd",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CommandLine/CMakeLists.txt" : {
      "ObjectId" : "e385aea98134119d7dd9387a4a2b8e723a0e1b55",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Events/CMakeLists.txt" : {
      "ObjectId" : "d0ef4634bd19fcbd400a6fd5fd0650bbe4dc2138",
      "LastModified" : "2015-12-22T20:12:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/GUI/CMakeLists.txt" : {
      "ObjectId" : "2a4bca7e16f7f6a87a904f3811b603b8da659ffc",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Looper/CMakeLists.txt" : {
      "ObjectId" : "0bd96e06334b54801300d366c532bef30a7f7398",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Network/CMakeLists.txt" : {
      "ObjectId" : "65d329349ccec0f5519fa4de51551e717f759d97",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/Simulations/CMakeLists.txt" : {
      "ObjectId" : "66c5244ede3064abdcaad42fbea8c7874b44dde0",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/SplitModule/CMakeLists.txt" : {
      "ObjectId" : "de04e1efe53df0f24ccca320a62be043407e4fd4",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/AST/CMakeLists.txt" : {
      "ObjectId" : "43949da3553267a7cd086f4e1120319d0bba74a1",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "1dd634d22e1f397a1287a23b51de1bf3493fbdfe",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build abstract syntax tree structures.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build code generator.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build frontend.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build lexer.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build parser.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build semantic analysis.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build support library.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "lib/CodeGen/CMakeLists.txt" : {
      "ObjectId" : "43d102eaa5b5304e0ae3afe7244a5532f93befac",
      "LastModified" : "2017-01-27T12:38:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Frontend/CMakeLists.txt" : {
      "ObjectId" : "bc6c203c1a7a38aadce6ee22e85f495be505328f",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Lex/CMakeLists.txt" : {
      "ObjectId" : "004d20c9a4a982bd052d7782865e08a613b24d83",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Parser/CMakeLists.txt" : {
      "ObjectId" : "be9b01b36ad5178418e100fd43f925e26ecad697",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SemanticAnalysis/CMakeLists.txt" : {
      "ObjectId" : "bbb1c4b03652ef3498900c684895da83288b576b",
      "LastModified" : "2018-06-10T18:01:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Support/CMakeLists.txt" : {
      "ObjectId" : "ec01f923f5d97bfeee6154ed40c3014341b28b1d",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "runtime/CMakeLists.txt" : {
      "ObjectId" : "b1464ad887cf382bd4934ece3102787fc1a0c481",
      "LastModified" : "2017-01-27T12:38:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/CMakeLists.txt" : {
      "ObjectId" : "cd44d1b835394f58441d13c398056824ef246f62",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/CMakeLists.txt" : {
      "ObjectId" : "268a60ea8b4cb8031d77a19776af20935f3faf87",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/concurrency/CMakeLists.txt" : {
      "ObjectId" : "7529e28da7ee616e4a0e28d8547f95c754199d1a",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/container/CMakeLists.txt" : {
      "ObjectId" : "99052ea3e74376d79c4efadb2201a65c884bef04",
      "LastModified" : "2017-01-27T14:09:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/event/CMakeLists.txt" : {
      "ObjectId" : "955e8bf56c435d7771b0680ea45a9cfe3df60273",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/filesystem/CMakeLists.txt" : {
      "ObjectId" : "d49cae4b465049b657000944ac95da6c5e8e2372",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/future/CMakeLists.txt" : {
      "ObjectId" : "ca2de5d7a33e36cd830657385de4a5b1a829e137",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/memory/CMakeLists.txt" : {
      "ObjectId" : "ad026e873aa4b97bcfeda53ea687eeb5f0df6787",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/network/CMakeLists.txt" : {
      "ObjectId" : "51509add48e41b88606ff5a210a4aab16dfaf123",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/std/string/CMakeLists.txt" : {
      "ObjectId" : "6b98b57a252851ca4447c60873d8c1158b1a3e7a",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "530abe32cbcf5a881d0fafef8d00e9d5e940ab98",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler tests.\n\n# Run 'make test' or 'ctest' to execute these.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "fa931f67f7b6319d1008d969cb9a7effc32cfd0e",
      "LastModified" : "2018-06-10T18:01:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Need rdynamic to ensure runtime symbols (e.g. __loci_assert_failed) are available\n\n# for tests when interpreting.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build compiler.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build vtable generator.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "unittests/CMakeLists.txt" : {
      "ObjectId" : "c2c1e9d496fd43af25ebabcba48693e20c0259c3",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests.\n\n# Run 'make test' or 'ctest' to execute these.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/Lex/CMakeLists.txt" : {
      "ObjectId" : "ffd970fe9da06d7d159c079f5ffec215b7bca5fc",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests for 'Lex' library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/Parser/CMakeLists.txt" : {
      "ObjectId" : "5ececd64bb5e15d9acf4bf5950ca999033cc81bc",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests for 'Parser' library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "unittests/Support/CMakeLists.txt" : {
      "ObjectId" : "f4d1172b08293e2bcadd1177d4249c2128be6ab5",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests for 'Support' library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/CMakeLists.txt" : {
      "ObjectId" : "4b6779b7f14ad783cc2401245e05d3bf063f44f7",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/FileCheck/CMakeLists.txt" : {
      "ObjectId" : "3f233968138c3765b3b516aaa9454ee686fc876a",
      "LastModified" : "2018-06-10T18:01:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/googletest/CMakeLists.txt" : {
      "ObjectId" : "0863391f57fc9b2dbea3ef905ec05abe928728ab",
      "LastModified" : "2017-01-12T17:41:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 51
  },
  "ElapsedTime" : 2894
}