{
  "Repository" : "78337625",
  "Revision" : "HEAD",
  "ObjectId" : "3f297889563bcbec671982c655996ccff63fa253",
  "CommitTime" : "2019-04-04T06:38:39Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "617e4b2f382a3c06d14ad2843f48728f7b1d4670",
      "LastModified" : "2019-04-02T11:19:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of Leela Zero.\n\n# Copyright (C) 2017 Marco Calignano\n\n# Copyright (C) 2017-2019 Gian-Carlo Pascutto and contributors\n\n# Leela Zero is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n# Leela Zero is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n\n# along with Leela Zero.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We don't want to install gtest, exclude it from `all`\n",
        "Line" : 21,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : "# Required Packages\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need OpenBLAS for now, because we make some specific\n\n# calls. Ideally we'd use OpenBLAS is possible and fall back to\n\n# not doing those calls if it's not present.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# See if we can set optimization flags as expected.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Reuse for leelaz and gtest\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Google Test below\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "autogtp/CMakeLists.txt" : {
      "ObjectId" : "a97d5fc0ad546e1a1da874a50f26238337420ec0",
      "LastModified" : "2018-09-05T11:59:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "autogtp/autogtp.pro" : {
      "ObjectId" : "6eb81577ce84185028f50a51ac97e801b2096f08",
      "LastModified" : "2018-02-01T17:53:10Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/CMakePushCheckState.cmake" : {
      "ObjectId" : "98eea0532d68cda67bd673bf05dd4b1c86cfc68d",
      "LastModified" : "2017-11-15T17:22:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# CMakePushCheckState\n\n# -------------------\n\n#\n\n#\n\n#\n\n# This module defines three macros: CMAKE_PUSH_CHECK_STATE()\n\n# CMAKE_POP_CHECK_STATE() and CMAKE_RESET_CHECK_STATE() These macros can\n\n# be used to save, restore and reset (i.e., clear contents) the state of\n\n# the variables CMAKE_REQUIRED_FLAGS, CMAKE_REQUIRED_DEFINITIONS,\n\n# CMAKE_REQUIRED_LIBRARIES, CMAKE_REQUIRED_INCLUDES and CMAKE_EXTRA_INCLUDE_FILES\n\n# used by the various Check-files coming with CMake, like e.g.\n\n# check_function_exists() etc.  The variable contents are pushed on a\n\n# stack, pushing multiple times is supported.  This is useful e.g.  when\n\n# executing such tests in a Find-module, where they have to be set, but\n\n# after the Find-module has been executed they should have the same\n\n# value as they had before.\n\n#\n\n# CMAKE_PUSH_CHECK_STATE() macro receives optional argument RESET.\n\n# Whether it's specified, CMAKE_PUSH_CHECK_STATE() will set all\n\n# CMAKE_REQUIRED_* variables to empty values, same as\n\n# CMAKE_RESET_CHECK_STATE() call will do.\n\n#\n\n# Usage:\n\n#\n\n# ::\n\n#\n\n#    cmake_push_check_state(RESET)\n\n#    set(CMAKE_REQUIRED_DEFINITIONS -DSOME_MORE_DEF)\n\n#    check_function_exists(...)\n\n#    cmake_reset_check_state()\n\n#    set(CMAKE_REQUIRED_DEFINITIONS -DANOTHER_DEF)\n\n#    check_function_exists(...)\n\n#    cmake_pop_check_state()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't pop more than we pushed\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/CheckFortranFunctionExists.cmake" : {
      "ObjectId" : "5fc740ab86f38e6b3bae02b20b4a735078c17981",
      "LastModified" : "2017-11-15T17:22:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# CheckFortranFunctionExists\n\n# --------------------------\n\n#\n\n# macro which checks if the Fortran function exists\n\n#\n\n# CHECK_FORTRAN_FUNCTION_EXISTS(FUNCTION VARIABLE)\n\n#\n\n# ::\n\n#\n\n#   FUNCTION - the name of the Fortran function\n\n#   VARIABLE - variable to store the result\n\n#              Will be created as an internal cache variable.\n\n#\n\n#\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    message(STATUS \"${OUTPUT}\")\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/CheckFunctionExists.cmake" : {
      "ObjectId" : "ef080621d6edbbe38d267cc7ff28da884a38281b",
      "LastModified" : "2017-11-15T17:22:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# CheckFunctionExists\n\n# -------------------\n\n#\n\n# Check if a C function can be linked::\n\n#\n\n#   check_function_exists(<function> <variable>)\n\n#\n\n# Check that the ``<function>`` is provided by libraries on the system and store\n\n# the result in a ``<variable>``. ``<variable>`` will be created as an internal\n\n# cache variable.\n\n#\n\n# The following variables may be set before calling this macro to modify the\n\n# way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n\n#\n\n# .. note::\n\n#\n\n#   Prefer using :Module:`CheckSymbolExists` instead of this module,\n\n#   for the following reasons:\n\n#\n\n#   * ``check_function_exists()`` can't detect functions that are inlined\n\n#     in headers or specified as a macro.\n\n#\n\n#   * ``check_function_exists()`` can't detect anything in the 32-bit\n\n#     versions of the Win32 API, because of a mismatch in calling conventions.\n\n#\n\n#   * ``check_function_exists()`` only verifies linking, it does not verify\n\n#     that the function is declared in system headers.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindBLAS.cmake" : {
      "ObjectId" : "2684617fe624f4c241df1d7b75e3d5e74ad6834d",
      "LastModified" : "2017-11-15T17:22:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindBLAS\n\n# --------\n\n#\n\n# Find BLAS library\n\n#\n\n# This module finds an installed fortran library that implements the\n\n# BLAS linear-algebra interface (see http://www.netlib.org/blas/).  The\n\n# list of libraries searched for is taken from the autoconf macro file,\n\n# acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#\n\n# ::\n\n#\n\n#   BLAS_FOUND - set to true if a library implementing the BLAS interface\n\n#     is found\n\n#   BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n\n#     and -L).\n\n#   BLAS_LIBRARIES - uncached list of libraries (using full path name) to\n\n#     link against to use BLAS\n\n#   BLAS95_LIBRARIES - uncached list of libraries (using full path name)\n\n#     to link against to use BLAS95 interface\n\n#   BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\n\n#     is found\n\n#   BLA_STATIC  if set on this determines what kind of linkage we do (static)\n\n#   BLA_VENDOR  if set checks only the specified vendor, if not set checks\n\n#      all the possibilities\n\n#   BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n\n#\n\n# List of vendors (BLA_VENDOR) valid in this module:\n\n#\n\n# * Goto\n\n# * OpenBLAS\n\n# * ATLAS PhiPACK\n\n# * CXML\n\n# * DXML\n\n# * SunPerf\n\n# * SCSL\n\n# * SGIMATH\n\n# * IBMESSL\n\n# * Intel10_32 (intel mkl v10 32 bit)\n\n# * Intel10_64lp (intel mkl v10 64 bit, lp thread model, lp64 model)\n\n# * Intel10_64lp_seq (intel mkl v10 64 bit, sequential code, lp64 model)\n\n# * Intel (older versions of mkl 32 and 64 bit)\n\n# * ACML\n\n# * ACML_MP\n\n# * ACML_GPU\n\n# * Apple\n\n# * NAS\n\n# * Generic\n\n#\n\n# .. note::\n\n#\n\n#   C/CXX should be enabled to use Intel mkl\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check the language being used\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#  message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# gotoblas (http://www.tacc.utexas.edu/tacc-projects/gotoblas2)\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# OpenBLAS (http://www.openblas.net)\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# BLAS in IBM ESSL library? (requires generic BLAS lib, too)\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# try to find acml in \"standard\" paths\n",
        "Line" : 314,
        "CharPositionInLine" : 3
      },
      "21" : {
        "Text" : "# 32 bit builds not supported on Open64 but for code simplicity\n\n# We'll just use the same directory twice\n",
        "Line" : 348,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Either acml or acml_mp should be in LD_LIBRARY_PATH but not both\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# ACML\n",
        "Line" : 443,
        "CharPositionInLine" : 9
      },
      "24" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 509,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 520,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# old version\n",
        "Line" : 527,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 530,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 535,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# old version\n",
        "Line" : 548,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 552,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 576,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 587,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# old version\n",
        "Line" : 590,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 593,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 602,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# old version\n",
        "Line" : 616,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 620,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "#older vesions of intel mkl libs\n",
        "Line" : 634,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 42
    },
    "cmake/Modules/FindOpenCL.cmake" : {
      "ObjectId" : "5d791106cf1ef8c3dab6b28c9b82638c9ba62620",
      "LastModified" : "2017-11-15T17:22:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindOpenCL\n\n# ----------\n\n#\n\n# Try to find OpenCL\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target ``OpenCL::OpenCL``, if\n\n# OpenCL has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables::\n\n#\n\n#   OpenCL_FOUND          - True if OpenCL was found\n\n#   OpenCL_INCLUDE_DIRS   - include directories for OpenCL\n\n#   OpenCL_LIBRARIES      - link against this library to use OpenCL\n\n#   OpenCL_VERSION_STRING - Highest supported OpenCL version (eg. 1.2)\n\n#   OpenCL_VERSION_MAJOR  - The major version of the OpenCL implementation\n\n#   OpenCL_VERSION_MINOR  - The minor version of the OpenCL implementation\n\n#\n\n# The module will also define two cache variables::\n\n#\n\n#   OpenCL_INCLUDE_DIR    - the OpenCL include directory\n\n#   OpenCL_LIBRARY        - the path to the OpenCL library\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "67f6bd6f2bcd1a0313078a28a07cc584df7b885b",
      "LastModified" : "2017-11-15T17:22:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindPackageHandleStandardArgs\n-----------------------------\n\nThis module provides a function intended to be used in :ref:`Find Modules`\nimplementing :command:`find_package(<PackageName>)` calls.  It handles the\n``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.\nIt also sets the ``<PackageName>_FOUND`` variable.  The package is\nconsidered found if all variables listed contain valid results, e.g.\nvalid filepaths.\n\n.. command:: find_package_handle_standard_args\n\n  There are two signatures::\n\n    find_package_handle_standard_args(<PackageName>\n      (DEFAULT_MSG|<custom-failure-message>)\n      <required-var>...\n      )\n\n    find_package_handle_standard_args(<PackageName>\n      [FOUND_VAR <result-var>]\n      [REQUIRED_VARS <required-var>...]\n      [VERSION_VAR <version-var>]\n      [HANDLE_COMPONENTS]\n      [CONFIG_MODE]\n      [FAIL_MESSAGE <custom-failure-message>]\n      )\n\n  The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all\n  the variables ``<required-var>...`` are valid and any optional\n  constraints are satisfied, and ``FALSE`` otherwise.  A success or\n  failure message may be displayed based on the results and on\n  whether the ``REQUIRED`` and/or ``QUIET`` option was given to\n  the :command:`find_package` call.\n\n  The options are:\n\n  ``(DEFAULT_MSG|<custom-failure-message>)``\n    In the simple signature this specifies the failure message.\n    Use ``DEFAULT_MSG`` to ask for a default message to be computed\n    (recommended).  Not valid in the full signature.\n\n  ``FOUND_VAR <result-var>``\n    Obsolete.  Specifies either ``<PackageName>_FOUND`` or\n    ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only\n    for compatibility with older versions of CMake and is now ignored.\n    Result variables of both names are always set for compatibility.\n\n  ``REQUIRED_VARS <required-var>...``\n    Specify the variables which are required for this package.\n    These may be named in the generated failure message asking the\n    user to set the missing variable values.  Therefore these should\n    typically be cache entries such as ``FOO_LIBRARY`` and not output\n    variables like ``FOO_LIBRARIES``.\n\n  ``VERSION_VAR <version-var>``\n    Specify the name of a variable that holds the version of the package\n    that has been found.  This version will be checked against the\n    (potentially) specified required version given to the\n    :command:`find_package` call, including its ``EXACT`` option.\n    The default messages include information about the required\n    version and the version which has been actually found, both\n    if the version is ok or not.\n\n  ``HANDLE_COMPONENTS``\n    Enable handling of package components.  In this case, the command\n    will report which components have been found and which are missing,\n    and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``\n    if any of the required components (i.e. not the ones listed after\n    the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are\n    missing.\n\n  ``CONFIG_MODE``\n    Specify that the calling find module is a wrapper around a\n    call to ``find_package(<PackageName> NO_MODULE)``.  This implies\n    a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command\n    will automatically check whether the package configuration file\n    was found.\n\n  ``FAIL_MESSAGE <custom-failure-message>``\n    Specify a custom failure message instead of using the default\n    generated message.  Not recommended.\n\nExample for the simple signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibXml2 DEFAULT_MSG\n    LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\nThe ``LibXml2`` package is considered to be found if both\n``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.\nThen also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found\nand ``REQUIRED`` was used, it fails with a\n:command:`message(FATAL_ERROR)`, independent whether ``QUIET`` was\nused or not.  If it is found, success will be reported, including\nthe content of the first ``<required-var>``.  On repeated CMake runs,\nthe same message will not be printed again.\n\nExample for the full signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibArchive\n    REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\n    VERSION_VAR LibArchive_VERSION)\n\nIn this case, the ``LibArchive`` package is considered to be found if\nboth ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.\nAlso the version of ``LibArchive`` will be checked by using the version\ncontained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,\nthe default messages will be printed.\n\nAnother example for the full signature:\n\n.. code-block:: cmake\n\n  find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n  find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\nIn this case, a ``FindAutmoc4.cmake`` module wraps a call to\n``find_package(Automoc4 NO_MODULE)`` and adds an additional search\ndirectory for ``automoc4``.  Then the call to\n``find_package_handle_standard_args`` produces a proper success/failure\nmessage.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Set up the arguments for `cmake_parse_arguments`.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check whether we are in 'simple' or 'extended' mode:\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# component handling\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# version handling:\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# exact version required\n",
        "Line" : 298,
        "CharPositionInLine" : 44
      },
      "17" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 304,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 334,
        "CharPositionInLine" : 17
      },
      "21" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 345,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Check with DEFINED as the found version may be 0.\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# print the result:\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "cmake/Modules/FindPackageMessage.cmake" : {
      "ObjectId" : "6821cee4f77a9d84c74f2c140870a2163ae5a5f0",
      "LastModified" : "2017-11-15T17:22:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/Modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "8ab03bc5f0b766462e05edb6afbe9c20e8115b46",
      "LastModified" : "2018-09-05T11:59:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n#  git_local_changes(<var>)\n\n#\n\n# Returns either \"CLEAN\" or \"DIRTY\" with respect to uncommitted changes.\n\n# Uses the return code of \"git diff-index --quiet HEAD --\".\n\n# Does not regard untracked files.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 51,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 55,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 111,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "src/Makefile" : {
      "ObjectId" : "047622d0487c0437bd965707a11b1872c6599f8b",
      "LastModified" : "2018-09-26T07:31:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# for Linux with OpenBLAS\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for macOS (comment out the Linux part)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for MKL instead of OpenBLAS\n\n#DYNAMIC_LIBS += -lmkl_rt\n\n#CXXFLAGS += -I/opt/intel/mkl/include\n\n#LDFLAGS  += -L/opt/intel/mkl/lib/intel64/\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "validation/CMakeLists.txt" : {
      "ObjectId" : "42db8d7db2439645266c100df4eaeae0f5b2e1e3",
      "LastModified" : "2018-09-05T11:59:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "validation/validation.pro" : {
      "ObjectId" : "e94e09ea2f436931e573efcc1b31a7e38cfac57f",
      "LastModified" : "2018-09-05T11:59:35Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 11,
    "QMAKE" : 2,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1623
}