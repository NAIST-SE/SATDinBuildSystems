{
  "Repository" : "38757808",
  "Revision" : "HEAD",
  "ObjectId" : "45cf90f075478acfe41634e528e4392d85778c3a",
  "CommitTime" : "2017-01-20T19:03:38Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c235523aa296e39c6bc40b00d0ac34540f8a3962",
      "LastModified" : "2016-09-21T21:28:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Compile with c++11 or c++0x depending on the compiler version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make compiler messages nice with colored tags.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#if user does not specify prefix we assign it to the exec directory\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Define the default build type to be Release\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Add additional CXX flags if we use the Debug option\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Install options\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Definitions without options\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Adds the install prefix for referencing in the source code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Definitions with options\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#The MCA will write DAMM histograms as output\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#Find packages needed for poll2\n\n#Load additional find_package scripts.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#Find thread library for poll2 and scanLib\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#Find the PLX Library\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#Find the Pixie Firmware\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#Find curses library used for poll2/scan/skeleton/scope/etc\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#Find the PLX Library\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#add_definitions(\"-DPLX_LINUX -DPCI_CODE -DPLX_LITTLE_ENDIAN\")\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#Find the Pixie Firmware\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#Create pixie.cfg and copy slot_def.set as well as default.set to current.set\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#Use the cmake script created by PXI_CONFIG to install the files it\n\n#created when make cfg is typed\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#Find ROOT if USE_ROOT was set.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#------------------------------------------------------------------------------\n\n#Build the Core library\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#Build the scan library\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#Building polling tools\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#Build the pixie interface\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "#Build the MCA objects\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "#Build the setup tools\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "#Build poll\n",
        "Line" : 164,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "#Build PxiDump\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#Build/install the miscellaneous stuff\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "Core/CMakeLists.txt" : {
      "ObjectId" : "a3e69865c86a77aab1468592b09ff3467e818de2",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Core/source/CMakeLists.txt" : {
      "ObjectId" : "4a098255d0bfe25dbdfd27cf2950acae58cfc743",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Core/tests/CMakeLists.txt" : {
      "ObjectId" : "60b5258cc0342c94a0d2011d1acfd64cae891999",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Interface/source/CMakeLists.txt" : {
      "ObjectId" : "afbf41bac9b905dec2bc72b335191374220227f1",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Order is important, PXI before PLX\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "MCA/CMakeLists.txt" : {
      "ObjectId" : "7b6809975324a6559980af232586a116bc840399",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "MCA/source/CMakeLists.txt" : {
      "ObjectId" : "cdaaa5b212eed93e00b9369df28face9ff2928fb",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Determine the sources based on use flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#build the MCA library\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#If we can we build the MCA program\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Poll/CMakeLists.txt" : {
      "ObjectId" : "240248e61039b88b155ac2fcd2f0f99861974ddf",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Poll/source/CMakeLists.txt" : {
      "ObjectId" : "86f4a8672ca00c3636106df91b60a66026fc9eb8",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "PxiDump/CMakeLists.txt" : {
      "ObjectId" : "d9cffdf0be23683f478d40d20352e9ca6195bda1",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "PxiDump/source/CMakeLists.txt" : {
      "ObjectId" : "a9f7af88c92810d69d0bce77c68636da5256f50e",
      "LastModified" : "2016-09-04T00:36:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/CMakeLists.txt" : {
      "ObjectId" : "2c43983935b0c8d450ecd6fde9b1407893069ac5",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Everything below is dependent on ScanLib, so we include the headers.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Find HRIBF Libraries\n",
        "Line" : 7,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#If we are using HRIBF interface we need to include the ScanorInterface header\n\n#\tfor the following code.\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#We will always build this since it includes a static lib for the rest\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Build utilities.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Scan/ScanLib/CMakeLists.txt" : {
      "ObjectId" : "33d6647312e1f10810bca4cb06bd65386f2e7353",
      "LastModified" : "2016-09-21T21:28:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Install include directories to support the shared library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Scan/ScanLib/source/CMakeLists.txt" : {
      "ObjectId" : "7b75349b2d3b5b481a23008239bf68e8f0b6e67b",
      "LastModified" : "2016-09-21T21:28:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Set the scan sources that we will make a lib out of\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Add the sources to the library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Create PixieScan static library and add ncurses if we have it\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Scan/scanor/CMakeLists.txt" : {
      "ObjectId" : "33d6647312e1f10810bca4cb06bd65386f2e7353",
      "LastModified" : "2016-09-21T21:28:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Install include directories to support the shared library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Scan/scanor/source/CMakeLists.txt" : {
      "ObjectId" : "e96a0d8e83fcd7456be96d196e03640133852a52",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We need fPIC below to create shared libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Scan/util/CMakeLists.txt" : {
      "ObjectId" : "d9cffdf0be23683f478d40d20352e9ca6195bda1",
      "LastModified" : "2016-09-21T21:28:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/util/source/CMakeLists.txt" : {
      "ObjectId" : "e6fe940a49068005373efcbdbb1778d63a17e283",
      "LastModified" : "2016-09-21T21:28:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install headReader executable.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Scan/utkscan/CMakeLists.txt" : {
      "ObjectId" : "76e70143c180fef230ef86bf5e7694afd72072f6",
      "LastModified" : "2016-10-15T17:11:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#CMake file for UTKScan.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# newreadout is needed to account for a change to pixie16 readout\n\n# structure change on 03/20/08. Is is REQUIRED!!\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#utkscan will have Gamma-Gamma gating in the GeProcessor\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#utkscan will be streamlined for online processing\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#utkscan will have debugging for the TreeCorrelator\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#utkscan will be more verbose in its output\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Check if GSL is installed\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Add the local include directories to the build tree\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Add the Analyzers to the build\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Add the core classes to the build\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Add the experiment specific processors to the build\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#Add the processors to the build\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#Create utkscan program\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#Add libraries to be linked with utkscan\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#If we have GSL installed link\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#If ROOT is installed we'll link\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#Install utkscan to the bin directory\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#Install configuration files to the share directory\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "Scan/utkscan/analyzers/CMakeLists.txt" : {
      "ObjectId" : "26e71698462d4276d49f30db368ce952497a7d33",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/utkscan/analyzers/source/CMakeLists.txt" : {
      "ObjectId" : "f6862fdaca5202fe7cbbf9e69a7f42c273398a09",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/utkscan/analyzers/tests/CMakeLists.txt" : {
      "ObjectId" : "9568d1ef8ba14681d0afcbbc5490439c084ef0a4",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Build the test to see if the GSL fitting algorithm is behaving.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Scan/utkscan/core/CMakeLists.txt" : {
      "ObjectId" : "b7307a5f43695cf86c52014320def0f07922df2b",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/utkscan/core/source/CMakeLists.txt" : {
      "ObjectId" : "730c3526f3dcc30d0a8fd029763f1415ceb50f08",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  StatsData.cpp \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Scan/utkscan/experiment/CMakeLists.txt" : {
      "ObjectId" : "17d813b43f80d8b28bf3861ea53a5b87f3643753",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/utkscan/experiment/source/CMakeLists.txt" : {
      "ObjectId" : "13e53cb675cc8abacb18409a968a436c53540309",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/utkscan/processors/CMakeLists.txt" : {
      "ObjectId" : "b7307a5f43695cf86c52014320def0f07922df2b",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Scan/utkscan/processors/source/CMakeLists.txt" : {
      "ObjectId" : "ebde48e829a33cc8c0193dccfb2cde876972cfa5",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  BetaProcessor.cpp\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  DssdProcessor.cpp\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  ImplantSsdProcessor.cpp\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  LiquidProcessor.cpp\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  LitePositionProcessor.cpp\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  McpProcessor.cpp\n\n#  NeutronProcessor.cpp\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  ScintProcessor.cpp\n\n#  SsdBetaProcessor.cpp\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  ValidProcessor.cpp\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Setup/CMakeLists.txt" : {
      "ObjectId" : "a2d332d4edff8f782cf7a2371fade57ad6a94b0f",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Setup/Traces/CMakeLists.txt" : {
      "ObjectId" : "b0803c5fc75935801a26f07779d46c3f7313dfaa",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install the traces scripts to share.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Setup/source/CMakeLists.txt" : {
      "ObjectId" : "ac21a9488708f4ed412aad4c4622aff8d8c5175c",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Build and install setup utilities, and configuration file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The order matters here! CRT\n",
        "Line" : 8,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindGSL.cmake" : {
      "ObjectId" : "03f303c2fef92fb2607038d90c3952554e666016",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find gnu scientific library GSL\n\n# See \n\n# http://www.gnu.org/software/gsl/  and \n\n# http://gnuwin32.sourceforge.net/packages/gsl.htm\n\n#\n\n# Based on a script of Felix Woelk and Jan Woetzel\n\n# (www.mip.informatik.uni-kiel.de)\n\n# \n\n# It defines the following variables:\n\n#  GSL_FOUND - system has GSL lib\n\n#  GSL_INCLUDE_DIRS - where to find headers \n\n#  GSL_LIBRARIES - full path to the libraries\n\n#  GSL_LIBRARY_DIRS, the directory where the PLplot library is found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially \"`gsl-config\n\n#--cxxflags`\"\n\n#  GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix\n\n#  GSL_EXE_LINKER_FLAGS = rpath on Unix\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support the REQUIRED and QUIET arguments.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#run the gsl-config to get the GSL Version\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# run the gsl-config program to get cxxflags\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# parse definitions from cflags; drop -D* from CFLAGS\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# parse include dirs from cflags; drop -I prefix\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#      message(\"GSL_DEFINITIONS=${GSL_DEFINITIONS}\")\n\n#      message(\"GSL_INCLUDE_DIRS=${GSL_INCLUDE_DIRS}\")\n\n#      message(\"GSL_CFLAGS=${GSL_CFLAGS}\")\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# run the gsl-config program to get the libs\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#run the gsl-config program to get the GSL installation prefix\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "cmake/modules/FindHRIBF.cmake" : {
      "ObjectId" : "2eecf7052842fd261ca0621cebcf5f3835ab43c7",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find the HRIBF libraries\n\n#\n\n#Sets the usual variables for find_package scripts\n\n#\n\n#Authored: K. Smith and S. V. Paulauskas May 18, 2016\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Support the REQUIRED and QUIET arguments.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindPLX.cmake" : {
      "ObjectId" : "804dc7d2a45eae31b348c6fa594eaefd35af3ef5",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the PLX Library\n\n#\n\n# Sets the usual variables expected for find_package scripts:\n\n#\n\n# PLX_LIBRARY_DIR - location of PLX library.\n\n# PLX_LIBRARIES - list of libraries to be linked.\n\n# PLX_FOUND - true if PLX was found.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Support the REQUIRED and QUIET arguments, and set PLX_FOUND if found.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CACHE STRING \"List of PLX libraries\")\n",
        "Line" : 21,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindPXI.cmake" : {
      "ObjectId" : "a847455fa19b807242267f6f2a6870cddefc197c",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the PXI Library\n\n#\n\n# Sets the usual variables expected for find_package scripts:\n\n#\n\n# PXI_LIBRARY_DIR\n\n# PXI_FOUND - true if PXI was found.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Support the REQUIRED and QUIET arguments, and set PXI_FOUND if found.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Write the base directory\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#create an installer that can be invoked by\n\n#add_custom_target(config ${CMAKE_COMMAND} -P pixie_cfg.cmake)\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#Following are lists of keys and the glob expr to find the files\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#SpFpgaFile\n\n#ComFpgaFile\n",
        "Line" : 45,
        "CharPositionInLine" : 27
      },
      "6" : {
        "Text" : "#DspConfFile\n\n#DspVarFile\n",
        "Line" : 47,
        "CharPositionInLine" : 22
      },
      "7" : {
        "Text" : "#CrateConfig\n",
        "Line" : 49,
        "CharPositionInLine" : 19
      },
      "8" : {
        "Text" : "#SlotFile\n",
        "Line" : 50,
        "CharPositionInLine" : 29
      },
      "9" : {
        "Text" : "#DspSetFile\n",
        "Line" : 51,
        "CharPositionInLine" : 28
      },
      "10" : {
        "Text" : "#We loop over each item in the list and search for a matching file\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#Get key name and expression form the list\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#Find all files matching hte expression\n\n# Returns the path of the file relative to the base directory.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#Check that a unique match was found\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#Rename set file to current.set to maintain default.set for backup\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#Append the config file\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#Added the working set file name\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 17
    },
    "cmake/modules/FindROOT.cmake" : {
      "ObjectId" : "5c8fe36ec36cbaf1071d6193397d7d25c093c041",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds ROOT instalation\n\n# This module sets up ROOT information \n\n# It defines:\n\n# ROOT_FOUND          If the ROOT is found\n\n# ROOT_INCLUDE_DIR    PATH to the include directory\n\n# ROOT_LIBRARIES      Most common libraries\n\n# ROOT_GUI_LIBRARIES  Most common gui libraries\n\n# ROOT_LIBRARY_DIR    PATH to the library directory \n\n#\n\n#Last updated by K. Smith (ksmit218@utk.edu) on Apr 10, 2014\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Find the root-config executable\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#If we found root-config then get all relevent varaiables\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---Report the status of finding ROOT-------------------\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function ROOT_GENERATE_DICTIONARY( dictionary   \n\n#                                    header1 header2 ... \n\n#                                    LINKDEF linkdef1 ... \n\n#                                    OPTIONS opt1...)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#---Get LinkDef.h file------------------------------------\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#---call rootcint------------------------------------------\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function REFLEX_GENERATE_DICTIONARY(dictionary   \n\n#                                     header1 header2 ... \n\n#                                     SELECTION selectionfile ... \n\n#                                     OPTIONS opt1...)\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#---Get Selection file------------------------------------\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#---Get preprocessor definitions--------------------------\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#---Nanes and others---------------------------------------\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#---Check GCCXML and get path-----------------------------\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#---Actual command----------------------------------------\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "share/CMakeLists.txt" : {
      "ObjectId" : "0a18b73331e0bb7336e5995d7a8ca3c1eac4f8de",
      "LastModified" : "2016-10-10T15:36:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Configure and install the module file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Configure and install the systemd service file \n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Configure and install the init.d script to load the plx drivers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Configure and install the init.d script to unload the plx drivers\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 37
  },
  "ElapsedTime" : 2081
}