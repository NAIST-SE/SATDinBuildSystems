{
  "Repository" : "26240475",
  "Revision" : "HEAD",
  "ObjectId" : "16589c29302bfec51079f62dd247864be54b71d3",
  "CommitTime" : "2017-05-11T18:07:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6955adca60b695f6f5785497283e721991c7c168",
      "LastModified" : "2017-02-10T18:39:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The patch version may have been bumped for prerelease purposes; be sure to\n\n# check gazebo-release/ubuntu/debian/changelog@default to determine what the\n\n# next patch version should be for a regular release.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################\n\n# Package Creation:\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If we're configuring only to package source, stop here\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Documentation\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure documentation uploader\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we're configuring only to build docs, stop here\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use GNUInstallDirst to get canonical paths\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# with -fPIC\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# developer's option to cache PKG_CONFIG_PATH and\n\n# LD_LIBRARY_PATH for local installs\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#####################################\n\n# Check for low memory version to use in some tests\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "######################################\n\n# Enable screen tests by default\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#####################################\n\n# Define some variables that are going to be used in two places:\n\n# 1. In CMake code to pass preprocessor definitions to certain source files\n\n# (especially in common/CMakeLists.txt).\n\n# 2. In the generation of cmake/setup.sh from cmake/setup.sh.in\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Seems that OGRE_PLUGINDIR can end in a newline, which will cause problems when\n\n# we pass it to the compiler later.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check for DRI capable Display\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#####################################\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set the default build type\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# TODO: still convert to uppercase to keep backwards compatibility with\n\n# uppercase old supported and deprecated modes\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#####################################\n\n# Handle CFlags\n\n# USE_UPSTREAM_CFLAGS (default TRUE)\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# USE_HOST_CFLAGS (default TRUE)\n\n# Will check building host machine for proper cflags\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Will use predefined gazebo developers cflags\n\n# this needs to be called after HostCFlags\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# use gazebo own set of flags\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Check if warning options are avaliable for the compiler and return WARNING_CXX_FLAGS variable\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Default Windows-MSVC.cmake sets MSVC warning flag to /W3. Add some extra warning excludes.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Check and add visibility hidden by default. Only in UNIX\n\n# Windows and MacosX does not handled properly the hidden compilation\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Unable to be filtered flags (failing due to limitations in filter_valid_compiler_warnings)\n\n# Handling exceptions rightly\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Visual Studio enables c++11 support by default\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#################################################\n\n# OS Specific initialization\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Main includes for compilation\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#################################################\n\n# Configure 3rd Party Packages after OS Specific initialization\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#################################################\n\n# Print warnings and errors\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "########### Add uninstall target ###############\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "########################################\n\n# Write the config.h file\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Also install the setup.sh in an unversioned location\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "########################################\n\n# Make the package config files\n",
        "Line" : 345,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# set boost pkgconfig cflags\n",
        "Line" : 349,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# set boost pkgconfig libs\n",
        "Line" : 356,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Prefix always -l\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Remove the prefix lib (not always present, like in pthread)\n",
        "Line" : 367,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "########################################\n\n# Make the cmake config files\n",
        "Line" : 377,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Order is important, if A depends on B, please add B after A.\n\n# The list should have at the very end the libraries\n\n# without internal interdependencies\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# No other internal dependencies:\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Use write_basic_package_version_file to generate a ConfigVersion file that\n\n# allow users of gazebo to specify the API or version to depend on\n\n# TODO: keep this instruction until deprecate Ubuntu/Precise and update with\n\n# https://github.com/Kitware/CMake/blob/v2.8.8/Modules/CMakePackageConfigHelpers.cmake\n",
        "Line" : 417,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "########################################\n\n# If present, load platform-specific build hooks.  This system is used,\n\n# for example, by the Ubuntu overlay (in the gazebo-release repo), to\n\n# arrange for installation of Ubuntu-specific application-launching\n\n# configuration.\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 43
    },
    "cmake/CheckDRIDisplay.cmake" : {
      "ObjectId" : "1255e4b22a16f77e3a29e3bc6d30f642a5513b5c",
      "LastModified" : "2016-01-28T09:58:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindDRI support\n\n# Check for existance of glxinfo application\n\n# Check for existance of support for pyopengl\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Continue check for DRI support in the display\n\n# Try to run glxinfo. If not found, variable will be empty\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# If not display found, it will throw an error\n\n# Another grep pattern: \"direct rendering:[[:space:]]*Yes[[:space:]]*\"\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# RESULT_VARIABLE is store in a FAIL variable since the command\n\n# returns 0 if ok and 1 if error (inverse than cmake IF)\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Check error string: no python module means no pyopengl\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# -1 will imply pyopengl is present but real DRI test fails\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "cmake/CodeCoverage.cmake" : {
      "ObjectId" : "bd5364c0870ecabd1c54b8c9e681a569eee855c3",
      "LastModified" : "2016-01-28T09:58:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check prereqs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 12,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Param _targetname The name of new the custom make target\n\n# Param _outputname lcov output is generated as _outputname.info\n\n#                   HTML report is generated in _outputname/index.html\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 27,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 31,
        "CharPositionInLine" : 9
      },
      "7" : {
        "Text" : "# Setup target\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Show info where to find the report. And cleanup\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 53,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 11
    },
    "cmake/DefaultCFlags.cmake" : {
      "ObjectId" : "03e2ae4958f2af119498f361e7a4b98da5ec11b4",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build type link flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -s doesn't work with clang or Visual Studio, see alternative in link below:\n\n# http://stackoverflow.com/questions/6085491/gcc-vs-clang-symbol-strippingu\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# -fno-default-inline -fno-implicit-inline-templates are unimplemented, cause errors in clang\n\n# -fno-elide-constructors can cause seg-faults in clang 3.4 and earlier\n\n# http://llvm.org/bugs/show_bug.cgi?id=12208\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#####################################\n\n# Set all the global build flags\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compiler-specific C++11 activation.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/DissectVersion.cmake" : {
      "ObjectId" : "826aa7f2126e2627482bd2e07e9c601b0b054bc9",
      "LastModified" : "2016-01-28T09:58:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find version components\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindFreeimage.cmake" : {
      "ObjectId" : "a989ec7fdba84d93415423f07b460fe21f65f7c3",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################\n\n# Find packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check the FreeImage header for the right version\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/FindGooglePerfTools.cmake" : {
      "ObjectId" : "bb125d538e04a7a5e45cac165ed407efb7fcf081",
      "LastModified" : "2016-01-28T09:58:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find Google perftools\n\n# Find the Google perftools includes and libraries\n\n# This module defines\n\n#  GOOGLE_PERFTOOLS_INCLUDE_DIR, where to find heap-profiler.h, etc.\n\n#  GOOGLE_PERFTOOLS_FOUND, If false, do not try to use Google perftools.\n\n# also defined for general use are\n\n#  TCMALLOC_LIBRARIES, where to find the tcmalloc library.\n\n#  STACKTRACE_LIBRARIES, where to find the stacktrace library.\n\n#  PROFILER_LIBRARIES, where to find the profiler library.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindGraphviz.cmake" : {
      "ObjectId" : "4d6d6fc452c7dd876eea96f65ce0e20270ebd280",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Graphviz cgraph library\n\n# Once done this will define\n\n#\n\n#  GRAPHVIZ_FOUND - system has Graphviz installed\n\n#  GRAPHVIZ_INCLUDE_DIR\n\n#  GRAPHVIZ_GVC_LIBRARY\n\n#  GRAPHVIZ_CGRAPH_LIBRARY\n\n#  GRAPHVIZ_CDT_LIBRARY\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 13,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generated by pkg-config\n",
        "Line" : 32,
        "CharPositionInLine" : 37
      },
      "4" : {
        "Text" : "#  MESSAGE(STATUS \"Could not find libgvc.\" )\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generated by pkg-config\n",
        "Line" : 46,
        "CharPositionInLine" : 40
      },
      "6" : {
        "Text" : "#  MESSAGE(STATUS \"Could not find libcgraph.\" )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generated by pkg-config\n",
        "Line" : 60,
        "CharPositionInLine" : 37
      },
      "8" : {
        "Text" : "#  MESSAGE(STATUS \"Could not find libcdt.\" )\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Generated by pkg-config\n",
        "Line" : 74,
        "CharPositionInLine" : 38
      },
      "10" : {
        "Text" : "# show the POPPLER_(XPDF/QT4)_INCLUDE_DIR and POPPLER_LIBRARIES variables only in the advanced view\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/FindOS.cmake" : {
      "ObjectId" : "7a12f95497c60f1dcffa0c458cd908d5f8eadfe8",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check the OS type.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake does not distinguish Linux from other Unices.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Nor *BSD\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Or Solaris. I'm seeing a trend, here\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Windows is easy (for once)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check if it's an Apple OS\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check if it's OS X or another MacOS (that's got to be pretty unlikely)\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# QNX\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#################################################\n\n# Check for non-case-sensitive filesystems\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindSSE.cmake" : {
      "ObjectId" : "9cd131ea7e50bb17dbe2089dac70acba161c11b4",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if SSE instructions are available on the machine where \n\n# the project is compiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# /proc/cpuinfo apparently omits sse3 :(\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# TODO\n",
        "Line" : 88,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/GazeboTestUtils.cmake" : {
      "ObjectId" : "7dded5e47d6285f75baefb45394c5f99117df0f6",
      "LastModified" : "2017-02-10T18:40:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#################################################\n\n# VAR: GZ_BUILD_TESTS_EXTRA_EXE_SRCS\n\n# Hack: extra sources to build binaries can be supplied to gz_build_tests in\n\n# the variable GZ_BUILD_TESTS_EXTRA_EXE_SRCS. This variable will be clean up\n\n# at the end of the function\n\n#\n\n# ARG: EXTRA_LIBS\n\n# List extra libraries that the sources should be linked against after the\n\n# EXTRA_LIBS tag. Example:\n\n# gz_build_tests(${test_sources} EXTRA_LIBS ${test_libraries})\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build all the tests\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# gtest uses pthread on UNIX\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Check that the test produced a result and create a failure if it didn't.\n\n# Guards against crashed and timed out tests.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Redefine build display tests\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Redefine build qt tests\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Build all the tests\n",
        "Line" : 95,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# gazebo_gui and libgazebo will bring all most of gazebo\n\n# libraries as dependencies\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# QTest need and extra -o parameter to write logging information to a file\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check that the test produced a result and create a failure if it didn't.\n\n# Guards against crashed and timed out tests.\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Fake macros when no valid display is found\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Fake macro when no valid DRI display is found\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "cmake/GazeboUtils.cmake" : {
      "ObjectId" : "974a6d20f7a6f2e75f62c9d18128107337eee51c",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#APPEND_TO_CACHED_STRING(_string _cacheDesc [items...])\n\n# Appends items to a cached list.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#STRING(STRIP ${${_string}} ${_string})\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "################################################################################\n\n# APPEND_TO_CACHED_LIST (_list _cacheDesc [items...]\n\n# Appends items to a cached list.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################\n\n# Append sources to the server sources list\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################\n\n# Append headers to the server headers list\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n# Append sources to the sensor sources list\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n\n# Append sources to the controller sources list\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#################################################\n\n# Macro to turn a list into a string (why doesn't CMake have this built-in?)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#STRING(STRIP ${${_string}} ${_string})\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#################################################\n\n# BUILD ERROR macro\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#################################################\n\n# BUILD WARNING macro\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#################################################\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Not defining STATIC or SHARED will use BUILD_SHARED_LIBS variable\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#################################################\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#################################################\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#################################################\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#################################################\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#################################################\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Using dynamic linking in UNIX by default\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#################################################\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Using static linking in Windows by default\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Need for M_PI constant\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Don't pull in the Windows min/max macros\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#use static libraries for FREEIMAGE\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Use dynamic linking for boost\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# And we want exceptions\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Not need if proper cmake gnerator (-G \"...Win64\") is passed to cmake\n\n# Enable as a second measure to workaround over bug\n\n# http://www.cmake.org/Bug/print_bug_page.php?bug_id=11240\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "#################################################\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# NOTE MacOSX provides different system versions than CMake is parsing.\n\n#      The following table lists the most recent OSX versions\n\n#     9.x.x = Mac OSX Leopard (10.5)\n\n#    10.x.x = Mac OSX Snow Leopard (10.6)\n\n#    11.x.x = Mac OSX Lion (10.7)\n\n#    12.x.x = Mac OSX Mountain Lion (10.8)\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# libstdc++ used on 10.8 and earlier\n\n# libc++ after that\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# This should be migrated to more fine control solution based on set_property APPEND\n\n# directories. It's present on cmake 2.8.8 while precise version is 2.8.7\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#################################################\n\n# Macro to setup supported compiler flags\n\n# Based on work of Florent Lamiraux, Thomas Moulard, JRL, CNRS/AIST.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#####################################\n\n# Gnu Precompiled Headers\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# target_name a target name for generating the PCH file\n\n# filename the name of the PCH file, relative to the dir of the CMakeLists calling the macro\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "cmake/HostCFlags.cmake" : {
      "ObjectId" : "c40e166eec5b9d49b4ed71ce53b13227acf0c668",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Man.cmake" : {
      "ObjectId" : "1f1ef9ec2f4ed14db8bb38ca81cc62f57bc39d61",
      "LastModified" : "2016-06-16T22:28:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# It is not possible add a dependency to target 'install'\n\n# Run hard-coded 'cmake --build . --target man' when the target install is built\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/Ronn2Man.cmake" : {
      "ObjectId" : "d474d055155cd4c596ea6dc4448fa5b4f245b032",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Based on work of Emmanuel Roullit <emmanuel@netsniff-ng.org>\n\n# Copyright 2009, 2012 Emmanuel Roullit.\n\n# Subject to the GPL, version 2.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# empty macro\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/SearchForStuff.cmake" : {
      "ObjectId" : "4843bd13355ad09dea5444de6fc7eb0e7aeeb5bd",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################\n\n# 1. can not use BUILD_TYPE_PROFILE is defined after include this module\n\n# 2. TODO: TOUPPER is a hack until we fix the build system to support standard build names\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################\n\n# The Google Protobuf library for message generation + serialization\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########################################\n\n# Find packages\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In Visual Studio we use configure.bat to trick all path cmake\n\n# variables so let's consider that as a replacement for pkgconfig\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# FindCURL.cmake distributed with CMake exports \n\n# the CURL_INCLUDE_DIRS variable, while the pkg_check_modules\n\n# function exports the CURL_INCLUDEDIR variable.\n\n# TODO: once the configure.bat VS2013 based script has been removed, \n\n#       remove the call pkg_check_modules(CURL libcurl) and all the uses of \n\n#       CURL_LIBDIR and CURL_INCLUDEDIR and use directly the variables \n\n#       CURL_INCLUDE_DIRS and CURL_LIBRARIES provided by FindCURL.cmake \n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#################################################\n\n# Find Simbody\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#list(APPEND CMAKE_MODULE_PATH ${SimTK_INSTALL_PREFIX}/share/cmake)\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#################################################\n\n# Find DART\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#################################################\n\n# Find tinyxml. Only debian distributions package tinyxml with a pkg-config\n\n# Use pkg_check_modules and fallback to manual detection\n\n# (needed, at least, for MacOS)\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Use system installation on UNIX and Apple, and internal copy on Windows\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Needed in WIN32 since in UNIX the flag is added in the code installed\n",
        "Line" : 214,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#################################################\n\n# Find tinyxml2. Only debian distributions package tinyxml with a pkg-config\n\n# Use pkg_check_modules and fallback to manual detection\n\n# (needed, at least, for MacOS)\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Use system installation on UNIX and Apple, and internal copy on Windows\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Needed in WIN32 since in UNIX the flag is added in the code installed\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#################################################\n\n# Find libtar.\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#################################################\n\n# Find TBB\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#################################################\n\n# Find OGRE\n\n# On Windows, we assume that all the OGRE* defines are passed in manually\n\n# to CMake.\n",
        "Line" : 318,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# If OGRE was not found, try with the standard find_package(OGRE)\n",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Add each component include directories to OGRE_INCLUDE_DIRS because\n\n# some OGRE components headers include without prefix headers contained\n\n# in other components (see http://www.ogre3d.org/forums/viewtopic.php?f=2&t=73222)\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Also find OGRE's plugin directory, which is provided in its .pc file as the\n\n# `plugindir` variable.  We have to call pkg-config manually to get it.\n\n# On Windows, we assume that all the OGRE* defines are passed in manually\n\n# to CMake.\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# This variable will be substituted into cmake/setup.sh.in\n",
        "Line" : 414,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "########################################\n\n# Check and find libccd (if needed)\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "########################################\n\n# Find OpenAL\n\n# pkg_check_modules(OAL openal)\n\n# if (NOT OAL_FOUND)\n\n#   BUILD_WARNING (\"Openal not found. Audio capabilities will be disabled.\")\n\n#   set (HAVE_OPENAL FALSE)\n\n# else (NOT OAL_FOUND)\n\n#   set (HAVE_OPENAL TRUE)\n\n# endif ()\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "########################################\n\n# Find libswscale format\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "########################################\n\n# Find AV device. Only check for this on linux.\n",
        "Line" : 449,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "########################################\n\n# Find AV format\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "########################################\n\n# Find avcodec\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "########################################\n\n# Find avutil\n",
        "Line" : 487,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "########################################\n\n# Find Player\n",
        "Line" : 501,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "########################################\n\n# Find GNU Triangulation Surface Library\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#################################################\n\n# Find bullet\n\n# First and preferred option is to look for bullet standard pkgconfig,\n\n# so check it first. if it is not present, check for the OSRF\n\n# custom bullet2.82.pc file\n",
        "Line" : 528,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "########################################\n\n# Find libusb\n",
        "Line" : 551,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#################################################\n\n# Find Oculus SDK.\n",
        "Line" : 564,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "########################################\n\n# Find SDFormat\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "########################################\n\n# Find QT\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "########################################\n\n# Find Boost, if not specified manually\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "########################################\n\n# Find libdl\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "########################################\n\n# Find gdal\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "########################################\n\n# Include man pages stuff\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "########################################\n\n# Find Space Navigator header and library\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "########################################\n\n# Find xsltproc, which is used by tools/check_test_ran.py\n",
        "Line" : 676,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "########################################\n\n# Find uuid-dev Library\n\n#pkg_check_modules(uuid uuid)\n\n#if (uuid_FOUND)\n\n#  message (STATUS \"Looking for uuid - found\")\n\n#  set (HAVE_UUID TRUE)\n\n#else ()\n\n#  set (HAVE_UUID FALSE)\n\n#  BUILD_WARNING (\"uuid-dev library not found - Gazebo will not have uuid support.\")\n\n#endif ()\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "########################################\n\n# Find uuid\n\n#  - In UNIX we use uuid library.\n\n#  - In Windows the native RPC call, no dependency needed.\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "########################################\n\n# Find graphviz\n",
        "Line" : 712,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "########################################\n\n# Find ignition msgs\n",
        "Line" : 724,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "########################################\n\n# Find ignition math library\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "########################################\n\n# Find the Ignition_Transport library\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "################################################\n\n# Find Valgrind for checking memory leaks in the\n\n# tests\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "########################################\n\n# Find OSVR SDK\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "########################################\n\n# Find QWT (QT graphing library)\n",
        "Line" : 782,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# version\n",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# in Windows, the path need to point to the parent to get correct qwt/foo headers\n",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 56
    },
    "cmake/gazebo_cpack.cmake" : {
      "ObjectId" : "259be8f4087242d0f1c65895019ac6cdc4c5f3e7",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#Find available package generators\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DEB\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#execute_process(COMMAND dpkg --print-architecture _NPROCE)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/gazeborc.cmake" : {
      "ObjectId" : "3924c8d51e3978c45875243872fedfd2f8514b9c",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/CMakeLists.txt" : {
      "ObjectId" : "2d2080c73ce33314896a4e8b98c4f4d46b27155e",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_subdirectory(ann)\n\n# add_subdirectory(fcl)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/ann/CMakeLists.txt" : {
      "ObjectId" : "e00db82d67af2ab7c362373e549e148f44010e75",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/fcl/CMakeLists.txt" : {
      "ObjectId" : "2bc40f69a25c574e7cd4a678e02a360c0b51aba8",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/libccd/CMakeLists.txt" : {
      "ObjectId" : "9a17e4e06467a48cf6f31a19954edf74a903dca9",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/opende/CMakeLists.txt" : {
      "ObjectId" : "72977819400caf7253ed136454fe83fc536260e8",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################\n\n# Include all the search paths for headers\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/opende/GIMPACT/CMakeLists.txt" : {
      "ObjectId" : "5b574184790013bb1c95aa33717db4f66ea6a5c7",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################\n\n# Include all the search paths for headers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/opende/GIMPACT/Makefile.am" : {
      "ObjectId" : "7a4f8e53ca255d610227af3be91fdf2afe3ce2d0",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "deps/opende/GIMPACT/include/GIMPACT/Makefile.am" : {
      "ObjectId" : "347ae72cc47500afde07e2328ad241fa747f3d0e",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "deps/opende/GIMPACT/include/Makefile.am" : {
      "ObjectId" : "e247258b4d6dd91243ae0435ff463cc464f7ac18",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "deps/opende/GIMPACT/src/Makefile.am" : {
      "ObjectId" : "c43cb7d11cc342c5a900b49a4ae132b340a6e7cd",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "deps/opende/OPCODE/CMakeLists.txt" : {
      "ObjectId" : "0a834854f7725961739a3ddda5790513ee6801cf",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################\n\n# Include all the search paths for headers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/opende/OPCODE/Ice/Makefile.am" : {
      "ObjectId" : "aca7a6ffdca21de1520ceaec1d98622307179896",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "deps/opende/ou/CMakeLists.txt" : {
      "ObjectId" : "02a9e33558db55fcbfa2052996ea20ece3b3b308",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/parallel_quickstep/CMakeLists.txt" : {
      "ObjectId" : "c4273423aee1f82e0b1409540ea82ec894cf7e77",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-DTIMING)# -DVERBOSE -DBENCHMARKING -DERROR )\n",
        "Line" : 40,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# default to CPU fall back so everyone can compile this package\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(USE_CUDA \"1\")\n\n#set(USE_OPENCL \"1\")\n\n#set(USE_OPENMP \"1\")\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################\n\n# Automatically set USE_CUDA to 1 if it is found\n\n# uncomment to enable\n\n################################################\n\n# CMake 2.8.0 or greater required for built-in CUDA module\n\n#if( ${CMAKE_MINOR_VERSION} GREATER 6.2 )\n\n#  if( ${CMAKE_MINOR_VERSION} LESS 8 )\n\n#    set(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/CMakeModules/;${CMAKE_MODULE_PATH}\")\n\n#  endif( ${CMAKE_MINOR_VERSION} LESS 8 )\n\n#  find_package(CUDA QUIET)\n\n#  if (CUDA_FOUND)\n\n#    set(USE_CPU)\n\n#    set(USE_CUDA \"1\")\n\n#    MESSAGE(STATUS \"CUDA Found, compiling with CUDA support\")\n\n#  else (CUDA_FOUND)\n\n#    MESSAGE(STATUS \"CUDA Not Found, using default CPU\")\n\n#  endif (CUDA_FOUND)\n\n#endif( ${CMAKE_MINOR_VERSION} GREATER 6.2 )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake 2.8.0 or greater required for built-in CUDA module\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#default to oldest stuff\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#include_directories( ${OPENCL_INCLUDE_DIRS} )\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "deps/parallel_quickstep/CMakeModules/FindCUDA.cmake" : {
      "ObjectId" : "6539057ba9131498aedeb5903bdf1fa1d8b70927",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Tools for building CUDA C files: libraries and build dependencies.\n\n# This script locates the NVIDIA CUDA C tools. It should work on linux, windows,\n\n# and mac and should be reasonably up to date with CUDA C releases.\n\n#\n\n# This script makes use of the standard find_package arguments of <VERSION>,\n\n# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\n\n# was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix\n\n# cannot be determined by the location of nvcc in the system path and REQUIRED\n\n# is specified to find_package(). To use a different installed version of the\n\n# toolkit set the environment variable CUDA_BIN_PATH before running cmake\n\n# (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda)\n\n# or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If you change the value of\n\n# CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be\n\n# relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default location. In\n\n# newer versions of the toolkit the cuda library is included with the graphics\n\n# driver- be sure that the driver version matches what is needed by the cuda\n\n# runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the script (in\n\n# alphebetical order).  Note that any of these flags can be changed multiple\n\n# times in the same directory before calling CUDA_ADD_EXECUTABLE,\n\n# CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX or CUDA_WRAP_SRCS.\n\n#\n\n#  CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#  -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#     Note that making this different from the host code when generating object\n\n#     or C files from CUDA code just won't work, because size_t gets defined by\n\n#     nvcc in the generated source.  If you compile to PTX and then load the\n\n#     file yourself, you can mix bit sizes between device and host.\n\n#\n\n#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#  -- Set to ON if you want the custom build rule to be attached to the source\n\n#     file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#     targets.\n\n#\n\n#     This allows the user to build the target from the CUDA file; however, bad\n\n#     things can happen if the CUDA source file is added to multiple targets.\n\n#     When performing parallel builds it is possible for the custom build\n\n#     command to be run more than once and in parallel causing cryptic build\n\n#     errors.  VS runs the rules for every source file in the target, and a\n\n#     source can have only one rule no matter how many projects it is added to.\n\n#     When the rule is run from multiple targets race conditions can occur on\n\n#     the generated file.  Eventually everything will get built, but if the user\n\n#     is unaware of this behavior, there may be confusion.  It would be nice if\n\n#     this script could detect the reuse of source files across multiple targets\n\n#     and turn the option off for the user, but no good solution could be found.\n\n#\n\n#  CUDA_BUILD_CUBIN (Default OFF)\n\n#  -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#     Device mode. The output is parsed and register, shared memory usage is\n\n#     printed during build.\n\n#\n\n#  CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#  -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#     when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#  CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#  -- Set to the path you wish to have the generated files placed.  If it is\n\n#     blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#     Intermediate files will always be placed in\n\n#     CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#  CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#  -- Set to OFF for C compilation of host code.\n\n#\n\n#  CUDA_NVCC_FLAGS\n\n#  CUDA_NVCC_FLAGS_<CONFIG>\n\n#  -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#     semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#  -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#     dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#     host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#     generated host code match the rest of the system better.  Sometimes\n\n#     certain flags give nvcc problems, and this will help you turn the flag\n\n#     propagation off.  This does not affect the flags supplied directly to nvcc\n\n#     via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#     CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#     shared library compilation are not affected by this flag.\n\n#\n\n#  CUDA_VERBOSE_BUILD (Default OFF)\n\n#  -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#     using a Makefile generator the value defaults to VERBOSE (run make\n\n#     VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#     always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order):\n\n#\n\n#  CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#  -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#     you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#  -- Adds the cublas library to the target (can be any target).  Handles\n\n#     whether you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                       [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Creates an executable \"cuda_target\" which is made up of the files\n\n#     specified.  All of the non CUDA C files are compiled using the standard\n\n#     build rules specified by CMAKE and the cuda files are compiled to object\n\n#     files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#     added automatically to include_directories().  Some standard CMake target\n\n#     calls can be used on the target after calling this macro\n\n#     (e.g. set_target_properties and target_link_libraries), but setting\n\n#     properties that adjust compilation flags will not affect code compiled by\n\n#     nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#     CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#  CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#  CUDA_BUILD_CLEAN_TARGET()\n\n#  -- Creates a convience target that deletes all the dependency files\n\n#     generated.  You should make clean after running this target to ensure the\n\n#     dependency files get regenerated.\n\n#\n\n#  CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                [OPTIONS ...] )\n\n#  -- Returns a list of generated files from the input source files to be used\n\n#     with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#  CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#  -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#  CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#  -- Sets the directories that should be passed to nvcc\n\n#     (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#     files.\n\n#\n\n#  CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#  -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#     CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#     function under the hood.\n\n#\n\n#     Given the list of files (file0 file1 ... fileN) this macro generates\n\n#     custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#     \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#     or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#     The arguments passed in after OPTIONS are extra command line options to\n\n#     give to nvcc.  You can also specify per configuration options by\n\n#     specifying the name of the configuration followed by the options.  General\n\n#     options must preceed configuration specific options.  Not all\n\n#     configurations need to be specified, only the ones provided will be used.\n\n#\n\n#        OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#        DEBUG -g\n\n#        RELEASE --use_fast_math\n\n#        RELWITHDEBINFO --use_fast_math;-g\n\n#        MINSIZEREL --use_fast_math\n\n#\n\n#     For certain configurations (namely VS generating object files with\n\n#     CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#     be produced for the given cuda file.  This is because when you add the\n\n#     cuda file to Visual Studio it knows that this file produces an object file\n\n#     and will link in the resulting object file automatically.\n\n#\n\n#     This script will also generate a separate cmake script that is used at\n\n#     build time to invoke nvcc.  This is for serveral reasons.\n\n#\n\n#       1. nvcc can return negative numbers as return values which confuses\n\n#       Visual Studio into thinking that the command succeeded.  The script now\n\n#       checks the error codes and produces errors when there was a problem.\n\n#\n\n#       2. nvcc has been known to not delete incomplete results when it\n\n#       encounters problems.  This confuses build systems into thinking the\n\n#       target was generated when in fact an unusable file exists.  The script\n\n#       now deletes the output files if there was an error.\n\n#\n\n#       3. By putting all the options that affect the build into a file and then\n\n#       make the build rule dependent on the file, the output files will be\n\n#       regenerated when the options change.\n\n#\n\n#     This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#     determine when to target the object compilation for a shared library.\n\n#     BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#     CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#     objects intended for shared libraries.  A preprocessor macro,\n\n#     <target_name>_EXPORTS is defined when a shared library compilation is\n\n#     detected.\n\n#\n\n#     Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n# The script defines the following variables:\n\n#\n\n#  CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#  CUDA_VERSION_MINOR    -- The minor version.\n\n#  CUDA_VERSION\n\n#  CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#  CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                           SDK.  This script will not directly support finding\n\n#                           specific libraries or headers, as that isn't\n\n#                           supported by NVIDIA.  If you want to change\n\n#                           libraries when the path changes see the\n\n#                           FindCUDA.cmake script for an example of how to clear\n\n#                           these variables.  There are also examples of how to\n\n#                           use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                           libraries, if you so choose (at your own risk).\n\n#  CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                           for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#  CUDA_LIBRARIES        -- Cuda RT library.\n\n#  CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                           implementation (alternative to:\n\n#                           CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#  CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                           implementation (alterative to:\n\n#                           CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#\n\n#\n\n#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to have at least this version to support the VERSION_LESS argument to 'if' (2.6.2) and unset (2.6.3)\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND true\")\n",
        "Line" : 323,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#message(\"searching for ${f}\")\n",
        "Line" : 325,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 327,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\n",
        "Line" : 432,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Now search default paths\n",
        "Line" : 446,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 456,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Compute the version.\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Here we need to determine if the version we found is acceptable.  We will\n\n# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\n\n# specified.  The presence of either of these options checks the version\n\n# string and signals if the version is acceptable or not.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 517,
        "CharPositionInLine" : 21
      },
      "48" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 542,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# We need to add the path to cudart to the linker using rpath, since the\n\n# library name for the cuda libraries is prepended with @rpath.\n",
        "Line" : 550,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Add cuda library to the link line only if it is found.\n",
        "Line" : 562,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Search for cufft and cublas libraries.\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "########################\n\n# Look for the SDK stuff\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil32)\n\n# endif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "##############################################################################\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 695,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 719,
        "CharPositionInLine" : 8
      },
      "72" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 726,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 732,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 737,
        "CharPositionInLine" : 8
      },
      "75" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 748,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 767,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependant upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 786,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Set up all the command line flags here, so that they can be overriden on a per target basis.\n",
        "Line" : 812,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 816,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Emulation.\n",
        "Line" : 818,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 821,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.\n",
        "Line" : 843,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# Add nvcc flag for 64b Windows\n",
        "Line" : 847,
        "CharPositionInLine" : 6
      },
      "84" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 852,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 862,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n",
        "Line" : 864,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# Reset these variables\n",
        "Line" : 872,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 882,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 885,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# STATIC\n",
        "Line" : 891,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 897,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 899,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 905,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 914,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 917,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# nvcc chokes on -g3, so replace it with -g\n",
        "Line" : 921,
        "CharPositionInLine" : 6
      },
      "97" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 931,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 938,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 943,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# Determine output directory\n",
        "Line" : 955,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 962,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 965,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 968,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 972,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 986,
        "CharPositionInLine" : 6
      },
      "106" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 996,
        "CharPositionInLine" : 6
      },
      "107" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1000,
        "CharPositionInLine" : 31
      },
      "108" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1004,
        "CharPositionInLine" : 6
      },
      "109" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1012,
        "CharPositionInLine" : 6
      },
      "110" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1015,
        "CharPositionInLine" : 6
      },
      "111" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1022,
        "CharPositionInLine" : 6
      },
      "112" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1030,
        "CharPositionInLine" : 6
      },
      "113" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1033,
        "CharPositionInLine" : 6
      },
      "114" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1050,
        "CharPositionInLine" : 6
      },
      "115" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1058,
        "CharPositionInLine" : 6
      },
      "116" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1061,
        "CharPositionInLine" : 8
      },
      "117" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1065,
        "CharPositionInLine" : 8
      },
      "118" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1077,
        "CharPositionInLine" : 6
      },
      "119" : {
        "Text" : "# Don't add the object file to the list of generated files if we are using\n\n# visual studio and we are attaching the build rule to the cuda file.  VS\n\n# will add our object file to the linker automatically for us.\n",
        "Line" : 1080,
        "CharPositionInLine" : 6
      },
      "120" : {
        "Text" : "# Visual Studio 8 crashes when you close the solution when you don't add the object file.\n",
        "Line" : 1086,
        "CharPositionInLine" : 8
      },
      "121" : {
        "Text" : "#message(\"Not adding ${generated_file}\")\n",
        "Line" : 1088,
        "CharPositionInLine" : 10
      },
      "122" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1097,
        "CharPositionInLine" : 6
      },
      "123" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1105,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1110,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1119,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1122,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# Add the library.\n",
        "Line" : 1127,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1137,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1147,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1156,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1158,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Add the library.\n",
        "Line" : 1161,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1171,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1181,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1188,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1190,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1199,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1206,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1208,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1216,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1229,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1242,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1248,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1259,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 145
    },
    "deps/parallel_quickstep/CMakeModules/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "7fce167c23ac70663c370d34a8809c4e2d0015ce",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "deps/parallel_quickstep/CMakeModules/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "2518c685250cf3c1b78779eae3c1946d3678d220",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 62,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 64,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# else (${entry} MATCHES \"^_\")\n",
        "Line" : 68,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# endif (${entry} MATCHES \"^_\")\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Registers\n",
        "Line" : 77,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Local memory\n",
        "Line" : 83,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Shared memory\n",
        "Line" : 89,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "deps/parallel_quickstep/CMakeModules/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "7349da322453e9bb0e205c91f7c59ea55562a078",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Echo the command\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Run the command\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Delete the target file\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Note that this will remove all occurances of -G.\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Generate the code\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 272,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 32
    },
    "deps/parallel_quickstep/CMakeModules/FindOpenCL.cmake" : {
      "ObjectId" : "66ea59b231f88bd36141d2c2c41c121641d77baa",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find OpenCL\n\n# This module tries to find an OpenCL implementation on your system. It supports\n\n# AMD / ATI, Apple and NVIDIA implementations, but shoudl work, too.\n\n#\n\n# Once done this will define\n\n#  OPENCL_FOUND        - system has OpenCL\n\n#  OPENCL_INCLUDE_DIRS  - the OpenCL include directory\n\n#  OPENCL_LIBRARIES    - link these to use OpenCL\n\n#\n\n# WIN32 should work, but is untested\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Now search default paths\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# The AMD SDK currently installs both x86 and x86_64 libraries\n\n# This is only a hack to find out architecture\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# On Win32 search relative to the library\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Unix style platforms\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# The AMD SDK currently does not place its headers\n\n# in /usr/include, therefore also search relative\n\n# to the library\n\n#FIND_PATH(OPENCL_INCLUDE_DIRS CL/cl.h PATHS ${_OPENCL_INC_CAND})\n\n#FIND_PATH(_OPENCL_CPP_INCLUDE_DIRS CL/cl.hpp PATHS ${_OPENCL_INC_CAND})\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# This is often the same, so clean up\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "23c5dc391ffb94ef745656b7fb94d930e97f1ae0",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate the API documentation\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Generate the messages documentation\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "examples/ignition/CMakeLists.txt" : {
      "ObjectId" : "a7b88cf6063638b4171faee7a4d38cf16d2d27de",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/animate_joints/CMakeLists.txt" : {
      "ObjectId" : "ec65655c03f2f8d08ac0331368b226de3878c0a0",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/animate_pose/CMakeLists.txt" : {
      "ObjectId" : "93168d169d04020dcbcbe5bae84bbae3a8edad9f",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/camera/CMakeLists.txt" : {
      "ObjectId" : "984fae41313817033aeff147711b23f13a0aed28",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/custom_messages/CMakeLists.txt" : {
      "ObjectId" : "76a8de8b8e0e97a7676b27d57c89007ca6e5f27b",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/custom_messages/msgs/CMakeLists.txt" : {
      "ObjectId" : "7356f5153f45cf0473c8c5512fadb561e96dfd1b",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/factory/CMakeLists.txt" : {
      "ObjectId" : "7f602771835614fddadb6974b09e549f00406fde",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/gui_overlay_plugin_spawn/CMakeLists.txt" : {
      "ObjectId" : "72fa62111286353cbb24d9ab25a892c86aebd0ce",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/gui_overlay_plugin_time/CMakeLists.txt" : {
      "ObjectId" : "e7cbd1d58543582de3a158cf6bfcf7429aef99fa",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/hello_world/CMakeLists.txt" : {
      "ObjectId" : "360017ed48b1237cf1fbb54125a7cd53800ccbd3",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/mainwindow_example/CMakeLists.txt" : {
      "ObjectId" : "38abe6596462e57017f743222b8012fc9a4a2730",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/model_move/CMakeLists.txt" : {
      "ObjectId" : "2a0eaad03e040999978a89c1c1af18332fc4f91b",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find packages\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include appropriate directories\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create libraries and executables\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/plugins/model_push/CMakeLists.txt" : {
      "ObjectId" : "7bf6e0a50f048ba8efce6a624e6940c9ee896a7f",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/model_visuals/CMakeLists.txt" : {
      "ObjectId" : "c2d998ce05f6bf5a0ece1365f335cd7d98fced42",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/parameters/CMakeLists.txt" : {
      "ObjectId" : "63d56f9d16d3ba7c1abd3d00f5d8640d916f6e68",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/projector/CMakeLists.txt" : {
      "ObjectId" : "82037e4e18b22f70d1ca80572ee3a93011c6bc74",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/system_gui_plugin/CMakeLists.txt" : {
      "ObjectId" : "a57fa3ef5512b1489e740fd2e45d77f5854308ec",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/plugins/world_edit/CMakeLists.txt" : {
      "ObjectId" : "311d50ad60e430e7ef1f8fdcee99f84b092893c4",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/actuator/CMakeLists.txt" : {
      "ObjectId" : "d99ddaf292e5bd3b50aab0d50b81c2d208c811c6",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/animated_box/CMakeLists.txt" : {
      "ObjectId" : "54a4977f38fcc13047ca3e5a5e13b124f0ecfe36",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find packages\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include appropriate directories\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create libraries and executables\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/stand_alone/arrange/CMakeLists.txt" : {
      "ObjectId" : "11457e9d33fcd83073dce3026439d05c1788e988",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/clone_simulation/CMakeLists.txt" : {
      "ObjectId" : "5f00763f50f2909f568398194cbc15e918f0ec87",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/custom_main/CMakeLists.txt" : {
      "ObjectId" : "5a25ec14faa4a7e8d470b3888cb977e6bfe2efe9",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/custom_main_pkgconfig/CMakeLists.txt" : {
      "ObjectId" : "c99ca11eae683fbe92d7d6b91584775c1956297b",
      "LastModified" : "2016-02-03T01:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/harness/CMakeLists.txt" : {
      "ObjectId" : "6b1c8653d1d5cea511bb603686156363904e35b2",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/introspection_client/CMakeLists.txt" : {
      "ObjectId" : "4791747f6c962bce4d7980d11eb167526cff130d",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/listener/CMakeLists.txt" : {
      "ObjectId" : "95454c96097a54b3ef42ad7853582e0d24e96c51",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/marker/CMakeLists.txt" : {
      "ObjectId" : "4f982d39aafbf12990674f8967fa138b66f0a893",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/publisher/CMakeLists.txt" : {
      "ObjectId" : "d98dbc56d4fe2313f1955e1f0de70145d449bb39",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/stand_alone/test_fixture/CMakeLists.txt" : {
      "ObjectId" : "6eb0e0b79beb7f4530360db3431136bf459c8c79",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build gtest\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/stand_alone/test_fixture/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "examples/stand_alone/transporter/CMakeLists.txt" : {
      "ObjectId" : "e1449c2e4a828ec6504e1652dbb1055e10ec15f7",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/CMakeLists.txt" : {
      "ObjectId" : "b7dae1b3eb920b58fc59c3b9c40c896a962d24b9",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Extra libs needed when linking statically (e.g., on WIN32)\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# gazebo executable doesn't yet work on Windows\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gazebo/common/CMakeLists.txt" : {
      "ObjectId" : "e0b1fb426ead5b6e89b6fe76c6437cb7d4ac3366",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tiny obj loader\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Timer test fails on OSX\n\n# See issue #1626\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 0x601 = Windows 7.  TBB needs to know this.\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# rt is used for clock_gettime, which is not available on apple or windows\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "gazebo/gui/CMakeLists.txt" : {
      "ObjectId" : "e71b6569b92b2177887badebeae8e4af45093f75",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Activate Export macro for building the library itself\n\n# if QGVCORE_LIB is not set or equal 0 (null), import macro is used\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# MainWindow is using screen rendering\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate executables for each of the QT unit tests\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "gazebo/gui/building/CMakeLists.txt" : {
      "ObjectId" : "7f5f191cb16c1cb15b41127d303eb6fc80f0b516",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/gui/model/CMakeLists.txt" : {
      "ObjectId" : "dff3a6e2cd51e8eb898654f76c29151d3b900dea",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/gui/plot/CMakeLists.txt" : {
      "ObjectId" : "2abaefa152a73a990b89562d33c7381fe4e39d40",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/gui/qgv/CMakeLists.txt" : {
      "ObjectId" : "4f21070b82c1536adae3cc65218249c428e23aba",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/gui/qgv/GraphViz.pri" : {
      "ObjectId" : "60ee8b4755c3fea6ea965492589959ad90518d13",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#GraphViz librairie\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Configure Windows GraphViz path here :\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "gazebo/gui/qgv/QGVCore.pro" : {
      "ObjectId" : "8d2e4a3157ecff2ae47e05632c78e9749400e05e",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------\n\n#\n\n# Project created by QtCreator 2013-04-17T09:06:06\n\n#\n\n#-------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#GraphViz librairie\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gazebo/gui/qtpropertybrowser/CMakeLists.txt" : {
      "ObjectId" : "0096e6762c90d7af40bc151d0208e023b13c2df5",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_PACKAGE_QTGUI TRUE)\n\n#\n\n#add_definitions( ${QT_DEFINITIONS} )\n\n#\n\n#set(qtpropertyeditor_SRCS\n\n#                           qtpropertybrowser.cpp\n\n#                           qtpropertymanager.cpp\n\n#                           qteditorfactory.cpp\n\n#                           qtvariantproperty.cpp\n\n#                           qttreepropertybrowser.cpp\n\n#                           qtbuttonpropertybrowser.cpp\n\n#                           qtgroupboxpropertybrowser.cpp\n\n#                           qtpropertybrowserutils.cpp\n\n#)\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include_directories( ${QT_INCLUDE_DIR} )\n\n#\n\n#qt4_generate_moc(\n\n#  qtpropertybrowser.h\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtpropertybrowser.cpp\n\n#)\n\n#qt4_generate_moc(\n\n#  qtpropertymanager.h\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtpropertymanager.cpp\n\n#)\n\n#qt4_generate_moc(\n\n#  qteditorfactory.h\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qteditorfactory.cpp\n\n#)\n\n#qt4_generate_moc(\n\n#  qtvariantproperty.h\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtvariantproperty.cpp\n\n#)\n\n#qt4_generate_moc(\n\n#  qttreepropertybrowser.h\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qttreepropertybrowser.cpp\n\n#)\n\n#qt4_generate_moc(\n\n#  qtbuttonpropertybrowser.h\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtbuttonpropertybrowser.cpp\n\n#)\n\n#qt4_generate_moc(\n\n#  qtgroupboxpropertybrowser.h\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtgroupboxpropertybrowser.cpp\n\n#)\n\n#qt4_generate_moc(\n\n#  qtpropertymanager.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/qtpropertymanager.moc\n\n#)\n\n#qt4_generate_moc(\n\n#  qteditorfactory.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/qteditorfactory.moc\n\n#)\n\n#qt4_generate_moc(\n\n#  qttreepropertybrowser.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/qttreepropertybrowser.moc\n\n#)\n\n#\n\n#set(\n\n#  qtpropertyeditor_HEADERS_ONLY_MOC\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtpropertybrowser.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtpropertymanager.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qteditorfactory.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtvariantproperty.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qttreepropertybrowser.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtbuttonpropertybrowser.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtgroupboxpropertybrowser.cpp\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/qtpropertymanager.moc\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/qteditorfactory.moc\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/qttreepropertybrowser.moc\n\n#)\n\n#\n\n#set_source_files_properties(\n\n#  ${qtpropertyeditor_HEADERS_ONLY_MOC}\n\n#  PROPERTIES\n\n#    HEADER_FILE_ONLY true\n\n#)\n\n#\n\n##qt4_generate_moc(\n\n##  qtpropertybrowserutils_p.h\n\n##  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtpropertybrowserutils_p.cpp\n\n##)\n\n##\n\n##set(\n\n##  qtpropertyeditor_HEADERS_MOC\n\n##  ${CMAKE_CURRENT_BINARY_DIR}/moc_qtpropertybrowseutils_p.cpp\n\n##)\n\n##\n\n##set(\n\n##  qtpropertyeditor_MOC\n\n##  ${qtpropertyeditor_HEADERS_MOC}\n\n##  ${qtpropertyeditor_HEADERS_ONLY_MOC}\n\n##)\n\n#\n\n#qt4_add_resources(\n\n#  qtpropertyeditor_RESOURCES\n\n#  qtpropertybrowser.qrc\n\n#)\n\n#\n\n#QT4_ADD_RESOURCES(RESOURCE_SRCS qtpropertybrowser.qrc)\n\n#\n\n#set(SRCS ${extension_MOC}\n\n#         ${qtpropertyeditor_MOC}\n\n#         ${qtpropertyeditor_SRCS}\n\n#         ${qtpropertyeditor_RESOURCES}\n\n#)\n\n#\n\n#add_library(gazebo_qtpropertybrowser SHARED ${SRCS})\n\n#\n\n#target_link_libraries(gazebo_qtpropertybrowser ${QT_LIBRARIES})\n\n#\n\n#add_definitions(${QT_DEFINITIONS})\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gazebo/gui/terrain/CMakeLists.txt" : {
      "ObjectId" : "f2b6654b4cc8959e060a1af20f86d8b28fb1ef19",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/gui/viewers/CMakeLists.txt" : {
      "ObjectId" : "923bce54d8bafcaa567d83e3db495f7724096007",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/msgs/CMakeLists.txt" : {
      "ObjectId" : "10bd88c143289e31b47c72a67e4e7dc98b1ce811",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n# Append str to a string property of a target.\n\n# target: string: target name.\n\n# property: name of target�s property. e.g: COMPILE_FLAGS, or LINK_FLAGS\n\n# str: string: string to be appended to the property\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# property non-existent or empty\n",
        "Line" : 159,
        "CharPositionInLine" : 27
      },
      "2" : {
        "Text" : "# Need to add default visibility to gazebo_msgs\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# property non-existent or empty\n",
        "Line" : 193,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 4
    },
    "gazebo/physics/CMakeLists.txt" : {
      "ObjectId" : "0846ae64ca797cfa9c5559712cdce5b61a9f8b26",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in ODE by default\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add Bullet support if present\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add DART support if present\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add Simbody support if present\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Be sure to locate this definition *after* add_subdirectories\n\n# in order to get the proper visibility when building libs\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Link in Bullet support if present\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link in DART support if present\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link in Simbody support if present\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# unit tests\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# unit tests with gazebo_test_fixture\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "gazebo/physics/bullet/CMakeLists.txt" : {
      "ObjectId" : "7892e4bfcf97edefbb2b4d3f9a115aa67b0148e1",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/physics/dart/CMakeLists.txt" : {
      "ObjectId" : "714b2647579fca8d57ca36adb11c4a14c9e8ac9a",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/physics/ode/CMakeLists.txt" : {
      "ObjectId" : "8a8e3bd8cc40e4d510064830a5fbc7b61764d5a1",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/physics/simbody/CMakeLists.txt" : {
      "ObjectId" : "7f409ed0f2096cd745bb56c41a54511916bf7bc8",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/rendering/CMakeLists.txt" : {
      "ObjectId" : "efe6590d23de3cc04eafe89b695ba6669f554d6c",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This captures headers that should not be installed.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gazebo/rendering/deferred_shading/CMakeLists.txt" : {
      "ObjectId" : "955e562a6d5030c8cc316037b55ed193b00283b7",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/rendering/selection_buffer/CMakeLists.txt" : {
      "ObjectId" : "69a39cfe26ea86ba710b5c45984cc3a1440d5ffb",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/rendering/skyx/CMake/CMakeLists.txt" : {
      "ObjectId" : "ee7536ad72768396fa4f03aa36a7f88fd838084d",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for SkyX\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################\n\n# Install useful CMake modules.\n\n# These are necessary to compile the samples from the install\n\n# directory, but can also be used for custom projects.\n\n#############################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gazebo/rendering/skyx/CMake/SkyXConfigureBuild.cmake" : {
      "ObjectId" : "8ddec4beba5e6a3df70bbe85dc1f0d231467c786",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for SkyX\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# This file takes care of configuring SkyX to build with the settings\n\n# given in CMake. It creates the necessary config.h file and will\n\n# also prepare package files for pkg-config and CMake.\n\n#######################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No static build for the moment\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# dynamic or static build\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create the pkg-config package files on Unix systems\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Enable intrinsics on MSVC in debug mode\n\n# Not actually necessary in release mode since /O2 implies /Oi but can't easily add this per build type?\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "gazebo/rendering/skyx/CMake/SkyXDependencies.cmake" : {
      "ObjectId" : "acf390be33e20498c563caae94890b73361f31ed",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for SKYX\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# Find all necessary and optional SKYX dependencies\n\n#######################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SKYX_DEPENDENCIES_DIR can be used to specify a single base\n\n# folder where the required dependencies may be found.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set hardcoded path guesses for various platforms\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# give guesses as hints to the find_package calls\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n\n# Core dependencies\n\n#######################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find Boost, you can comment those lines if Ogre was not compiled using boost threads.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Uncomment bellow if Ogre was compiled with boost threading\n\n#set(SKYX_BOOST_COMPONENTS thread date_time)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Try again with the other type of libs\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Find Ogre 3D, plus terrain and paging components\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#set (OGRE_INCLUDE_DIRS \"/home/nkoenig/local/include/OGRE\")\n\n#set (OGRE_LIBRARY_DIRS \"/home/nkoenig/local/lib/OGRE /home/nkoenig/local/lib\")\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#######################################################################\n\n# Tools dependencies\n\n#######################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Find Doxygen\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#######################################################################\n\n# Samples dependencies (comment if not needed)\n\n#######################################################################\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Find OIS\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#######################################################################\n\n# All dependencies were checked\n\n#######################################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Display results, terminate if anything required is missing\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add library and include paths from the dependencies\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "gazebo/rendering/skyx/CMake/Utils/SkyXConfigTargets.cmake" : {
      "ObjectId" : "09fecb6aab0f4fa2535bab25f4f1fa6ed1643d3a",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for SKYX\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure settings and install targets\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create vcproj.user file for Visual Studio to set debug working directory\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install targets according to current build type\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# setup common target settings\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# setup library build\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add static prefix, if compiling static version\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# add GCC visibility flags to shared library build\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# install debug pdb files\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# setup SkyX sample build\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set install RPATH for Unix systems\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# add GCC visibility flags to shared library build\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# disable \"lib\" prefix on Unix\n",
        "Line" : 138,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# install debug pdb files - no _d on exe\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "gazebo/rendering/skyx/CMake/Utils/SkyXFindPkgMacros.cmake" : {
      "ObjectId" : "339d99d618b449817a1c041648290b09fa85f7d5",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################\n\n# Provides some common functionality for the FindPackage modules\n\n##################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Begin processing of package\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Display a status message unless FIND_QUIETLY is set\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Construct search paths for includes and libraries from a PREFIX_PATH\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# clear cache variables if a certain variable changed\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test against internal check variable\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try to get some hints from pkg-config, if available\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Couple a set of release AND debug libraries (or frameworks)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate debug names from given release names\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the parent dir from DIR to VAR\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Do the final processing for the package find.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Slightly customised framework finder\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "gazebo/rendering/skyx/CMake/Utils/SkyXGetVersion.cmake" : {
      "ObjectId" : "12b2d749a66b4d7d7b3d2d900188b0bc1de8be16",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for SKYX\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gazebo/rendering/skyx/CMake/Utils/SkyXMacroLogFeature.cmake" : {
      "ObjectId" : "b73f378bf974f4ea64fbf3172ae4e26cb75edd13",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for SKYX\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file defines the Feature Logging macros.\n\n#\n\n# MACRO_LOG_FEATURE(VAR FEATURE DESCRIPTION URL [REQUIRED [MIN_VERSION [COMMENTS]]])\n\n#   Logs the information so that it can be displayed at the end\n\n#   of the configure run\n\n#   VAR : TRUE or FALSE, indicating whether the feature is supported\n\n#   FEATURE: name of the feature, e.g. \"libjpeg\"\n\n#   DESCRIPTION: description what this feature provides\n\n#   URL: home page\n\n#   REQUIRED: TRUE or FALSE, indicating whether the featue is required\n\n#   MIN_VERSION: minimum version number. empty string if unneeded\n\n#   COMMENTS: More info you may want to provide.  empty string if unnecessary\n\n#\n\n# MACRO_DISPLAY_FEATURE_LOG()\n\n#   Call this to display the collected results.\n\n#   Exits CMake with a FATAL error message if a required feature is missing\n\n#\n\n# Example:\n\n#\n\n# INCLUDE(MacroLogFeature)\n\n#\n\n# FIND_PACKAGE(JPEG)\n\n# MACRO_LOG_FEATURE(JPEG_FOUND \"libjpeg\" \"Support JPEG images\" \"http://www.ijg.org\" TRUE \"3.2a\" \"\")\n\n# ...\n\n# MACRO_DISPLAY_FEATURE_LOG()\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2006, Allen Winter, <winter@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#      SET(_logtext \"${_logtext}\\n\") #double-space missing features?\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "gazebo/rendering/skyx/CMakeLists.txt" : {
      "ObjectId" : "3df3cd79b452ac4f0aa3d48eacbee65088848cbb",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/sensors/CMakeLists.txt" : {
      "ObjectId" : "885edb8683615a534ca2df64e3b3b5f7d1c3e652",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gazebo/test/CMakeLists.txt" : {
      "ObjectId" : "0f71e8ba3af40d9b443b89e1d6073bcdeca79f93",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build ServerFixture library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gazebo/transport/CMakeLists.txt" : {
      "ObjectId" : "77c7105c84b482a8cd85ee5f079728bab1b7d45f",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 0x601 = Windows 7.  TBB needs to know this.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# unit tests\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "gazebo/util/CMakeLists.txt" : {
      "ObjectId" : "224480821c1a6961b72b49850a0bdd7d436626e1",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interfaces/CMakeLists.txt" : {
      "ObjectId" : "7fbc233b29eb6649e28eee2a35ab795d0a598207",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "interfaces/player/CMakeLists.txt" : {
      "ObjectId" : "65553e56ad37324c1d7a1d8fe0b5f3a383a1d3d8",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Position3dInterface.cc\n\n#FiducialInterface.cc\n\n#PTZInterface.cc\n\n#OpaqueInterface.cc\n\n#ActarrayInterface.cc\n\n#GripperInterface.cc\n\n#BumperInterface.cc\n\n#IRInterface.cc\n\n#ImuInterface.cc\n",
        "Line" : 9,
        "CharPositionInLine" : 13
      },
      "1" : {
        "Text" : "#gz_install_includes(\"player\" ${headers} ${CMAKE_CURRENT_BINARY_DIR}/physics.h)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "interfaces/player/player_cfgs/CMakeLists.txt" : {
      "ObjectId" : "3c5f74ea91326844265d71f2e2e4bc992e5a9214",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/CMakeLists.txt" : {
      "ObjectId" : "8c651154c08b5166d8a1a17daa31f5f00001be56",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use glsl 150 shaders if ogre version >= 1.9\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "media/audio/CMakeLists.txt" : {
      "ObjectId" : "6b0a6e123e16a5bcbedcd0a9edd9c7278d662c54",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/dem/CMakeLists.txt" : {
      "ObjectId" : "addacb85baa42f010e61d07c86c7e915b542d452",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/fonts/CMakeLists.txt" : {
      "ObjectId" : "f974026486c54cfbcf02282a9ab8763175b03818",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/gui/CMakeLists.txt" : {
      "ObjectId" : "98ba89ceff8d358f2d753275687b42a40faceb43",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/gui/animations/CMakeLists.txt" : {
      "ObjectId" : "8c326ce3dc73abd962476d96637f31918da36d9f",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/gui/fonts/CMakeLists.txt" : {
      "ObjectId" : "9cfeec87cd9ff163eaf745a22ba7e08829a7203a",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/gui/imagesets/CMakeLists.txt" : {
      "ObjectId" : "17fb4049f4163d08d7768a600360b98fbe807b64",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/gui/layouts/CMakeLists.txt" : {
      "ObjectId" : "fdd390e1f9ee404705c1fe5b124ac5e2eb7b057e",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/gui/looknfeel/CMakeLists.txt" : {
      "ObjectId" : "43eaa032f0c1919a61ed4bf837a0800c146e5d4b",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/gui/schemes/CMakeLists.txt" : {
      "ObjectId" : "dc2120ded2f45993605fc3ec4a1e6a43a65fe7a5",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/materials/CMakeLists.txt" : {
      "ObjectId" : "30ea97d12b40b3891e4820279d538a3a61355db6",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/materials/programs/CMakeLists.txt" : {
      "ObjectId" : "66e1d4eb3ed1fc5c9ef00e3f780c82c9e1176b97",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/materials/programs/deferred_rendering/CMakeLists.txt" : {
      "ObjectId" : "f051ca86ee2df33ac1e9a549c32a1ea7e0e02a5e",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/materials/programs/deferred_rendering/deferred_lighting/CMakeLists.txt" : {
      "ObjectId" : "50634daac1d2d073cd1f39579df8f2365a472a77",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/materials/programs/deferred_rendering/deferred_shading/CMakeLists.txt" : {
      "ObjectId" : "d3757edc6b3bda483cb7a3d07820bcdefdbe9e8d",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/materials/scripts/CMakeLists.txt" : {
      "ObjectId" : "fbbd4bcd5336e458ed8e9536e0da821c45ea9cde",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "d53e7a0914a9e4c1c28537f5540c382c164d170c",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/CMakeLists.txt" : {
      "ObjectId" : "999866735bb712f62ffd74631929c43b02e51b9c",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/PioneerArm/CMakeLists.txt" : {
      "ObjectId" : "1deaaa4779c9d5087155d4f5f3e8def0af470551",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/blender/CMakeLists.txt" : {
      "ObjectId" : "447952ba7f31f6a7c20e3655239075d0df27f0f7",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/chair3/CMakeLists.txt" : {
      "ObjectId" : "bf8af030940ad934f3cbbd1def4c8f46fd804cf3",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/chair3/images/CMakeLists.txt" : {
      "ObjectId" : "1e58c61812e7af3a9bbd8a69453526f5d27e124f",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/chair3/models/CMakeLists.txt" : {
      "ObjectId" : "3e356600302c8c822a25fa54de79bfb8ac9f56c2",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/epuck/CMakeLists.txt" : {
      "ObjectId" : "b323d8e5360cf93d53714e7668b872a409db40fb",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/models/rovio/CMakeLists.txt" : {
      "ObjectId" : "cb3ca061a4a28e61e19523593ead9a43f246237b",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET (files rovio_body.mesh\n\n#           rio.mesh\n\n#           sonyvid30_top.mesh\n\n#)\n\n#\n\n#INSTALL(FILES ${files} DESTINATION ${CMAKE_INSTALL_PREFIX}/share/gazebo-${GAZEBO_MAJOR_VERSION}/media/models/sonyvid30)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "media/models/sonyvid30/CMakeLists.txt" : {
      "ObjectId" : "b541b7e3a53e05afa698824b07e2a1369e28cdc3",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/rtshaderlib/CMakeLists.txt" : {
      "ObjectId" : "1386bd820f02d8e32ec43cab8cce8348819f33e8",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# remove shader version string if ogre version >= 1.9\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "media/rtshaderlib/materials/CMakeLists.txt" : {
      "ObjectId" : "5c18a89ecf4f76db675ba080ab313d9edaa2f9a7",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/rtshaderlib150/CMakeLists.txt" : {
      "ObjectId" : "6f8ec19f807a95482d25a8c9daaf09be8ebf15ad",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/rtshaderlib150/materials/CMakeLists.txt" : {
      "ObjectId" : "5c18a89ecf4f76db675ba080ab313d9edaa2f9a7",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "media/skyx/CMakeLists.txt" : {
      "ObjectId" : "e58988e235c864860b892a7b71985d04d83c7537",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "models/CMakeLists.txt" : {
      "ObjectId" : "9ab096a66af324be75db3a501231b143d1f7f080",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The set of built-in models should be very small. Only the most essential\n\n# models needed to make Gazebo run without an internet connection should be\n\n# included here.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/CMakeLists.txt" : {
      "ObjectId" : "7dc64b24d50428d9f4cff26185e9b3444caf90dc",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tinyxml are used since the plugins are linking against gazebo_common\n\n# which uses tinxyml. Not defining the link directory here will end up\n\n# failures in clang.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/events/CMakeLists.txt" : {
      "ObjectId" : "6f459ecab9ceb3ca0aa29e8b1d113dbfdafa1b00",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/rest_web/CMakeLists.txt" : {
      "ObjectId" : "9c6241d0df48323cfa09f7bafecfe27bc804ff6f",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "975bed1bf1681af0df7b0c1d422076ea56bdbd54",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build gtest\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/cmake/CMakeLists.txt" : {
      "ObjectId" : "493678423c2076c5fe6b7f6c34b6820e76d2ea02",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Using GAZEBO_VERSION and not GAZEBO_VERSION_FULL since\n\n# probably this way is closer to users implementation, using just\n\n# two version number.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/cmake/plugin/CMakeLists.txt" : {
      "ObjectId" : "32df313a95e1c05a18022929a1cf5700f865391e",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This GAZEBO_VERSION does not come from gazebo cmake system, it is passed\n\n# to this test using add_definitions in the CMakeLists.txt in ../ directory \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/examples/CMakeLists.txt" : {
      "ObjectId" : "2fe7c435e7966a13d86c88c11a191c0ff9b8ae2b",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Increase timeout since there are many tests\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/gtest/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "test/integration/CMakeLists.txt" : {
      "ObjectId" : "46aabda4f11f6681970454e601356ab30487c07e",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable the player test for now, until we figure out a better way to test them\n\n#if (INCLUDE_PLAYER)\n\n#  add_subdirectory(player)\n\n#endif()\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#state_log.cc\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Increase timeout, to account for model download time.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Increase timeout for debug-mode\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add plugin dependency\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build the display tests (need extra sources to compile)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Increase timeout, to account for model download time.\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "test/integration/player/CMakeLists.txt" : {
      "ObjectId" : "1017380f2b662ccd03c5ca58e311feb1ec971758",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/performance/CMakeLists.txt" : {
      "ObjectId" : "14b0b35db1d2a817fdb170d380d5b50b268083cc",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Per issue #802, these tests are not yet portable\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/pkgconfig/CMakeLists.txt" : {
      "ObjectId" : "99367daa8a5c69431b01d8fc27941034c7638a30",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/pkgconfig/plugin/CMakeLists.txt" : {
      "ObjectId" : "784cd1003b4c88a51a442b8d839397e88a69194b",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/plugins/CMakeLists.txt" : {
      "ObjectId" : "7251118757030479244c5510edaf5232df63c22c",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/regression/CMakeLists.txt" : {
      "ObjectId" : "57bbc5dbb91be472c5eea052173bd87b46e55661",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build the display tests (need extra sources to compile)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "b349dcfe3437084ca0e91d5904a943a19df19aea",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Force multiple definitions since there is a collision with sdformat GetAsEuler() function\n\n# https://bitbucket.org/osrf/sdformat/src/a3fa3d1163cc2fe991ac106e51695b99f8b119ca/include/sdf/Types.hh?at=default&fileviewer=file-view-default#Types.hh-437\n\n# it is defined inside an .hh file and bring to gz linking via sdformat and gazebo_gui/gazebo_common\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "worlds/CMakeLists.txt" : {
      "ObjectId" : "76dcca8ed2f08140e7acd3592b30c25d817a995e",
      "LastModified" : "2017-05-03T00:51:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 150,
    "QMAKE" : 2,
    "AUTOMAKE" : 5
  },
  "ElapsedTime" : 18739
}