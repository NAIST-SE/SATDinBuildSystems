{
  "Repository" : "56812109",
  "Revision" : "HEAD",
  "ObjectId" : "748acfc9835d06524caee77b63c41f7fc4aaca3b",
  "CommitTime" : "2019-04-17T07:25:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "8cec6d17e675ad6b19cab6a8517b5b0f5b9fb5c5",
      "LastModified" : "2018-09-12T10:41:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for static build etc.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Yes, there exists also FindGTest.\n\n# Yes, we do want to use this one instead:\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/BuildFlatBuffers.cmake" : {
      "ObjectId" : "42f78de778d9b8cb794fef822797caa2e5876f5e",
      "LastModified" : "2017-04-24T12:51:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015 Google Inc. All rights reserved.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# General function to create FlatBuffer build rules for the given list of\n\n# schemas.\n\n#\n\n# flatbuffers_schemas: A list of flatbuffer schema files to process.\n\n#\n\n# schema_include_dirs: A list of schema file include directories, which will be\n\n# passed to flatc via the -I parameter.\n\n#\n\n# custom_target_name: The generated files will be added as dependencies for a\n\n# new custom target with this name. You should add that target as a dependency\n\n# for your main target to ensure these files are built. You can also retrieve\n\n# various properties from this target, such as GENERATED_INCLUDES_DIR,\n\n# BINARY_SCHEMAS_DIR, and COPY_TEXT_SCHEMAS_DIR.\n\n#\n\n# additional_dependencies: A list of additional dependencies that you'd like\n\n# all generated files to depend on. Pass in a blank string if you have none.\n\n#\n\n# generated_includes_dir: Where to generate the C++ header files for these\n\n# schemas. The generated includes directory will automatically be added to\n\n# CMake's include directories, and will be where generated header files are\n\n# placed. This parameter is optional; pass in empty string if you don't want to\n\n# generate include files for these schemas.\n\n#\n\n# binary_schemas_dir: If you specify an optional binary schema directory, binary\n\n# schemas will be generated for these schemas as well, and placed into the given\n\n# directory.\n\n#\n\n# copy_text_schemas_dir: If you want all text schemas (including schemas from\n\n# all schema include directories) copied into a directory (for example, if you\n\n# need them within your project to build JSON files), you can specify that\n\n# folder here. All text schemas will be copied to that folder.\n\n#\n\n# IMPORTANT: Make sure you quote all list arguments you pass to this function!\n\n# Otherwise CMake will only pass in the first element.\n\n# Example: build_flatbuffers(\"${fb_files}\" \"${include_dirs}\" target_name ...)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test if including from FindFlatBuffers\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Generate the include files parameters.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Copy text schemas from dependent folders.\n",
        "Line" : 81,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# For each schema, do the things we requested.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create a custom target that depends on all the generated files.\n\n# This is the target that you can depend on to trigger all these\n\n# to be built.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Register the include directory we are using.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Register the binary schemas dir we are using.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Register the text schema copy dir we are using.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "cmake/CodeCoverage.cmake" : {
      "ObjectId" : "da0591903d4e6bde5ae86289010f7038c67a5746",
      "LastModified" : "2018-02-27T14:09:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# CHECK VALID COMPILER\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 127,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 131,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Setup target\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 141,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Run tests\n",
        "Line" : 144,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 147,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 163,
        "CharPositionInLine" : 14
      },
      "15" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 174,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 178,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Run tests\n",
        "Line" : 182,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Running gcovr\n",
        "Line" : 185,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 197,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 22
    },
    "cmake/FindCLI11.cmake" : {
      "ObjectId" : "ed8517e7243a21b0a6a00556a5e631e3ed97472d",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindConcurrentQueue.cmake" : {
      "ObjectId" : "0ae71b55f189bea57701d3036ac820cfd89b12e5",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindEPICSV4.cmake" : {
      "ObjectId" : "1a8220ec94b212b29d1b68373d7cfac6e78dfb84",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# According to the official ESS wiki documentation, the base path to the\n\n# EPICS v4 modules is given by EPICS_MODULES_PATH\n\n# Also, all EPICS bases can be found in EPICS_BASES_PATH\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Even though not mentioned on the wiki, the official ESS EPICS installation\n\n# provides the version of the EPICS base as used by EPICS v4\n\n# in EPICS_V4_BASE_VERSION\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# It is NOT an error if this variable is not set.\n\n# We want to be able to discover it using standard CMAKE_PATH variables too.\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Yes, we do use this possibility.  Please do not remove.\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# NOTE\n\n# It is NOT a fatal error is we do not find it here.\n\n# find_path() can still find it if specified using CMAKE_PATH variables\n\n# and we do use that possibility.\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Currently, the official environment gives no hint about which specific\n\n# version of the modules we should use.  We therefore pin it to the ones\n\n# which are currently considered as 'production' for our purposes.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The ESS EPICS v4 installation uses a non-standard schema:\n\n# .../pv<Module>/<module-version>/<base-version>/...\n\n# whereas a standard local EPICS compile produces\n\n# .../pv<Module>/...\n\n# so we support both schemes in the following.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Of course, you can also just point the standard CMAKE_*_PATH variables to\n\n# your custom EPICS installation.  This is what we do to test different\n\n# EPICS versions quickly.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We could check all of them, but is it worth it?\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindFlatBuffers.cmake" : {
      "ObjectId" : "86f754de7cb65269c11406c8afb34b0b3be7a054",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014 Stefan.Eilemann@epfl.ch\n\n# Copyright 2014 Google Inc. All rights reserved.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the flatbuffers schema compiler\n\n#\n\n# Output Variables:\n\n# * FLATBUFFERS_FLATC_EXECUTABLE the flatc compiler executable\n\n# * FLATBUFFERS_FOUND\n\n#\n\n# Provides:\n\n# * FLATBUFFERS_GENERATE_C_HEADERS(Name <files>) creates the C++ headers\n\n#   for the given flatbuffer schema files.\n\n#   Returns the header files in ${Name}_OUTPUTS\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindGitCommitExtract.cmake" : {
      "ObjectId" : "f2bd0697faebeb951c48b0b566a5f769fff077de",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Extract the current git version to use for compilation.\n\n# Does not cause a recompile if the commit did not change.\n\n# To use, make your target depend on 'git_commit_current'.\n\n# It will create ${CMAKE_CURRENT_BINARY_DIR}/git_commit_current.cpp which\n\n# you should add to your list of sources.\n\n# Contact: Dominik Werder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindGoogletest.cmake" : {
      "ObjectId" : "5344bd55829273985dfe38d1f3bfdd93e05eeecd",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGraylogLogger.cmake" : {
      "ObjectId" : "dafa35e19510a7dcd6092f1f070cd4111b10186c",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# opt-in (as requested)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindJSONForModernCPP.cmake" : {
      "ObjectId" : "9d31dd8c298969252f0da377199f91fca246097e",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindRapidjson.cmake" : {
      "ObjectId" : "2902cdfe4c58b3be70d03b4669b65659558545cd",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindRdKafka.cmake" : {
      "ObjectId" : "8e3be1c9023581243c38d9cc80cc156974cf8682",
      "LastModified" : "2019-01-25T11:05:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindStaticData.cmake" : {
      "ObjectId" : "167d52ff6ee2ec553f9a550ffd4ba8246734a258",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# You can pass a list of COMPONENTS when you find_package() this package\n\n# and it will convert the listed files into blobs to be included in your\n\n# project.\n\n# Make your target depend on 'xxd_generate'.\n\n# Contact: Dominik Werder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindStreamingDataTypes.cmake" : {
      "ObjectId" : "fd65f6c8cc2f095cf336f8187dcb36ad0c28bb4f",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If generated flatbuffer headers are available from conan they are used,\n\n# otherwise locates the streaming-data-types repository and sets up a target\n\n# called 'flatbuffers_generate' which generates the flatbuffer headers.\n\n# Make your target depend on 'flatbuffers_generate'.\n\n# When you call this using find_package, you can specify a minimum version\n\n# for the streaming data types:\n\n# find_package(streaming_data_types COMPONENTS <minimum-git-commit>)\n\n# you must then make your target depend on 'check_streaming_data_types'\n\n# so that it can abort compilation if streaming data types does not suffice.\n\n# Usage of this package requires of course the git suite to be available.\n\n# Contact: Dominik Werder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The common case as fallback:\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/conan.cmake" : {
      "ObjectId" : "09fd62b6b204a8cb05e2bfbb978588c3d0bac515",
      "LastModified" : "2018-07-25T09:21:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The MIT License (MIT)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2018 JFrog\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This file comes from: https://github.com/conan-io/cmake-conan. Please refer\n\n# to this repository for issues and documentation.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Its purpose is to wrap and launch Conan C/C++ Package Manager when cmake is called.\n\n# It will take CMake current settings (os, compiler, compiler version, architecture)\n\n# and translate them to conan settings for installing and retrieving dependencies.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# It is intended to facilitate developers building projects that have conan dependencies,\n\n# but it is only necessary on the end-user side. It is not necessary to create conan\n\n# packages, in fact it shouldn't be use for that. Check the project documentation.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(STATUS \"COMPILER \" ${CMAKE_CXX_COMPILER})\n\n#message(STATUS \"COMPILER \" ${CMAKE_CXX_COMPILER_ID})\n\n#message(STATUS \"VERSION \" ${CMAKE_CXX_COMPILER_VERSION})\n\n#message(STATUS \"FLAGS \" ${CMAKE_LANG_FLAGS})\n\n#message(STATUS \"LIB ARCH \" ${CMAKE_CXX_LIBRARY_ARCHITECTURE})\n\n#message(STATUS \"BUILD TYPE \" ${CMAKE_BUILD_TYPE})\n\n#message(STATUS \"GENERATOR \" ${CMAKE_GENERATOR})\n\n#message(STATUS \"GENERATOR WIN64 \" ${CMAKE_CL_64})\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#handle -s os setting\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#use default conan os setting if CMAKE_SYSTEM_NAME is not defined\n",
        "Line" : 91,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#check if the cmake system is a conan supported one\n",
        "Line" : 99,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# using GCC\n\n# TODO: Handle other params\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# using AppleClang\n",
        "Line" : 137,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Allow -D_GLIBCXX_USE_CXX11_ABI=ON/OFF as argument to cmake\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Check if there's any add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Use C++11 stdlib as default if gcc is 5.1+\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Calls \"conan install\"\n\n# Argument BUILD is equivalant to --build={missing, PkgName,...} or\n\n# --build when argument is 'BUILD all' (which builds all packages from source)\n\n# Argument CONAN_COMMAND, to specify the conan path, e.g. in case of running from source\n\n# cmake does not identify conan as command, even if it is +x and it is in the path\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# A conan file has been specified - apply specified options as well if provided\n",
        "Line" : 293,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# configure_file will make sure cmake re-runs when conanfile is updated\n",
        "Line" : 331,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Generate, writing in disk a conanfile.txt with the requires, options, and imports\n\n# specified as arguments\n\n# This will be considered as temporary file, generated in CMAKE_CURRENT_BINARY_DIR)\n",
        "Line" : 340,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Checks for the existence of conanbuildinfo.cmake, and loads it\n\n# important that it is macro, so variables defined at parent scope\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 22
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "026398cc3d73a782f7f734d3fd7df1b69ac8ce0a",
      "LastModified" : "2019-02-26T14:50:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Skip xxd_generate and git_commit_current\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Skip git_commit_current\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/tests/CMakeLists.txt" : {
      "ObjectId" : "fb7458b84a2126b5d01e02cd204771ecec9a02f3",
      "LastModified" : "2019-03-21T08:09:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 18
  },
  "ElapsedTime" : 1048
}