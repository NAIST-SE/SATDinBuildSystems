{
  "Repository" : "10818154",
  "Revision" : "HEAD",
  "ObjectId" : "a7d2f7f23de7f63283695f72cb697ac43a41196e",
  "CommitTime" : "2016-06-14T18:54:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "07f448d5cb5afc13e1024a0280e4d6d1e7c000ce",
      "LastModified" : "2016-03-31T17:41:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Search for appropriate packages on linux, osx and not compile them\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include individual projects\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We always build game otherwise we would miss the generated header\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(NO_USE_SYSTEM_ZLIB ON)\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "android/Makefile" : {
      "ObjectId" : "f493403d8f66aa09922e2e40df76e386c522b5cc",
      "LastModified" : "2015-09-13T21:17:33Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#$(Q)cd $(ANDROID_PROJECT) && ant uninstall\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "android/android-project/build.xml" : {
      "ObjectId" : "e8d13b261fda33e59c34b4f4dac31de895b6bb9e",
      "LastModified" : "2014-08-16T21:35:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "cmake/Modules/CMakeParseArguments.cmake" : {
      "ObjectId" : "a350064f16fee7f87c4f1c832af90353f33f8ead",
      "LastModified" : "2014-08-22T08:18:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include(CMakeParseArguments)\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords> <multi_value_keywords> args...)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions for\n\n# parsing the arguments given to that macro or function.\n\n# It processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e. keywords which can be used when calling the macro without any value\n\n# following, like e.g. the OPTIONAL keyword of the install() command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g. DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this macro\n\n# which can be followed by more than one value, like e.g. the TARGETS or\n\n# FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.\n\n# These variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see whether\n\n# your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments as the\n\n# real install() command:\n\n#\n\n#   function(MY_INSTALL)\n\n#     set(options OPTIONAL FAST)\n\n#     set(oneValueArgs DESTINATION RENAME)\n\n#     set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#     cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN} )\n\n#     ...\n\n#\n\n# Assume my_install() has been called like this:\n\n#   my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the following\n\n# variables:\n\n#   MY_INSTALL_OPTIONAL = TRUE\n\n#   MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#   MY_INSTALL_DESTINATION = \"bin\"\n\n#   MY_INSTALL_RENAME = \"\" (was not used)\n\n#   MY_INSTALL_TARGETS = \"foo;bar\"\n\n#   MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#   MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n# You can the continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g. if directly after a one_value_keyword\n\n# another recognized keyword follows, this is interpreted as the beginning of\n\n# the new option.\n\n# E.g. my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION would\n\n# be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 97,
        "CharPositionInLine" : 56
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 98,
        "CharPositionInLine" : 62
      },
      "7" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 99,
        "CharPositionInLine" : 60
      },
      "8" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/Modules/EnsureVersion.cmake" : {
      "ObjectId" : "1ac7f452abf33f54ccf6d686dcd438a39c1b5557",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file defines the following macros for developers to use in ensuring\n\n# that installed software is of the right version:\n\n#\n\n# ENSURE_VERSION        - test that a version number is greater than\n\n#                               or equal to some minimum\n\n# ENSURE_VERSION_RANGE - test that a version number is greater than\n\n#                               or equal to some minimum and less than some\n\n#                               maximum\n\n# ENSURE_VERSION2       - deprecated, do not use in new code\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ENSURE_VERSION\n\n# This macro compares version numbers of the form \"x.y.z\" or \"x.y\"\n\n# ENSURE_VERSION( FOO_MIN_VERSION FOO_VERSION_FOUND FOO_VERSION_OK)\n\n# will set FOO_VERSION_OK to true if FOO_VERSION_FOUND >= FOO_MIN_VERSION\n\n# Leading and trailing text is ok, e.g.\n\n# ENSURE_VERSION( \"2.5.31\" \"flex 2.5.4a\" VERSION_OK)\n\n# which means 2.5.31 is required and \"flex 2.5.4a\" is what was found on the system\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ENSURE_VERSION_RANGE\n\n# This macro ensures that a version number of the form\n\n# \"x.y.z\" or \"x.y\" falls within a range defined by\n\n# min_version <= found_version < max_version.\n\n# If this expression holds, FOO_VERSION_OK will be set TRUE\n\n#\n\n# Example: ENSURE_VERSION_RANGE3( \"0.1.0\" ${FOOCODE_VERSION} \"0.7.0\" FOO_VERSION_OK )\n\n#\n\n# This macro will break silently if any of x,y,z are greater than 100.\n\n#\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NORMALIZE_VERSION\n\n# Helper macro to convert version numbers of the form \"x.y.z\"\n\n# to an integer equal to 10^4 * x + 10^2 * y + z\n\n#\n\n# This macro will break silently if any of x,y,z are greater than 100.\n\n#\n\n# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CHECK_RANGE_INCLUSIVE_LOWER\n\n# Helper macro to check whether x <= y < z\n\n#\n\n# Copyright (c) 2007, Will Stephenson <wstephenson@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# parse the parts of the version string\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# compute an overall version number which can be compared at once\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "25d8df39fe98e553ca2659e038d0f06281f5c9c2",
      "LastModified" : "2014-08-22T08:18:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to find_package().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>]\n\n#                                           [HANDLE_COMPONENTS]\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# If the package supports components, use the HANDLE_COMPONENTS option to enable\n\n# handling them. In this case, find_package_handle_standard_args() will report\n\n# which components have been found and which are missing, and the <NAME>_FOUND\n\n# variable will be set to FALSE if any of the required components (i.e. not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call.  In this case VERSION_VAR will be set\n\n# to <NAME>_VERSION and the macro will automatically check whether the\n\n# Config module was found.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# exact version required\n",
        "Line" : 240,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 248,
        "CharPositionInLine" : 17
      },
      "16" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 259,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# print the result:\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "cmake/Modules/FindSDL2.cmake" : {
      "ObjectId" : "c2833fc50510d370f30f81533a35d34d03d33e7f",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n#    If this is defined, then no SDL2_main will be linked in because\n\n#    only applications need main().\n\n#    Otherwise, it is assumed you are building an application and this\n\n#    module will attempt to locate and set the the proper link flags\n\n#    as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#windows\n",
        "Line" : 74,
        "CharPositionInLine" : 59
      },
      "3" : {
        "Text" : "#freebsd sdl2\n",
        "Line" : 84,
        "CharPositionInLine" : 26
      },
      "4" : {
        "Text" : "# Fink\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 87,
        "CharPositionInLine" : 13
      },
      "6" : {
        "Text" : "# Blastwave\n",
        "Line" : 88,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "#haiku\n",
        "Line" : 90,
        "CharPositionInLine" : 44
      },
      "8" : {
        "Text" : "#haiku\n",
        "Line" : 106,
        "CharPositionInLine" : 29
      },
      "9" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#haiku\n",
        "Line" : 132,
        "CharPositionInLine" : 32
      },
      "12" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# For SDL2main\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# For MinGW library\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 20
    },
    "cmake/Modules/FindSDL2_mixer.cmake" : {
      "ObjectId" : "b85369fc3dbfd69284de57e80f77556e3f98a380",
      "LastModified" : "2014-08-22T08:18:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL_mixer library\n\n# This module defines:\n\n#  SDL2_MIXER_LIBRARIES, the name of the library to link against\n\n#  SDL2_MIXER_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_MIXER_FOUND, if false, do not try to link against\n\n#  SDL2_MIXER_VERSION_STRING - human-readable string containing the version of SDL_mixer\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#  SDL2MIXER_LIBRARY (same value as SDL2_MIXER_LIBRARIES)\n\n#  SDL2MIXER_INCLUDE_DIR (same value as SDL2_MIXER_INCLUDE_DIRS)\n\n#  SDL2MIXER_FOUND (same value as SDL2_MIXER_FOUND)\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building SDL.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#haiku\n",
        "Line" : 46,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : "#haiku\n",
        "Line" : 60,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "#windows\n",
        "Line" : 61,
        "CharPositionInLine" : 31
      },
      "5" : {
        "Text" : "# for backward compatiblity\n\n#set(SDL2MIXER_LIBRARY ${SDL2_MIXER_LIBRARIES})\n\n#set(SDL2MIXER_INCLUDE_DIR ${SDL2_MIXER_INCLUDE_DIRS})\n\n#set(SDL2MIXER_FOUND ${SDL2_MIXER_FOUND})\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindSDL2_ttf.cmake" : {
      "ObjectId" : "6fc3b21befcef6dc818354d235e98a80e0de4406",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL_ttf library\n\n# This module defines:\n\n#  SDL2_TTF_LIBRARIES, the name of the library to link against\n\n#  SDL2_TTF_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_TTF_FOUND, if false, do not try to link against\n\n#  SDL2_TTF_VERSION_STRING - human-readable string containing the version of SDL_ttf\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building SDL.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#haiku\n",
        "Line" : 41,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "#haiku\n",
        "Line" : 55,
        "CharPositionInLine" : 24
      },
      "4" : {
        "Text" : "#windows\n",
        "Line" : 56,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "# for backward compatiblity\n\n#set(SDL2TTF_LIBRARY ${SDL2_TTF_LIBRARIES})\n\n#set(SDL2TTF_INCLUDE_DIR ${SDL2_TTF_INCLUDE_DIRS})\n\n#set(SDL2TTF_FOUND ${SDL2_TTF_FOUND})\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/GenerateVersionHPP.cmake" : {
      "ObjectId" : "82ca0b6cf2fabc8e3659ce0f86eae36814a885c6",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make sure we're using minimum the required version of git, so the \"dirty-testing\" will work properly\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Last minute check - ensure that we have a proper revision\n\n# If everything above fails (means the user has erased the git revision control directory or removed the origin/HEAD tag)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No valid ways available to find/set the revision/hash, so let's force some defaults\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Its not set during initial run\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create the actual revision file from the above params\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/version.hpp.in.cmake" : {
      "ObjectId" : "822258661e830f13b82865ecaaba36289d283c6e",
      "LastModified" : "2016-06-05T12:30:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ifndef __CAESARIA_PROJECT_VERSION_INCLUDE_H_\n\n#define __CAESARIA_PROJECT_VERSION_INCLUDE_H_\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#define GAME_VERSION_MAJOR 0\n\n#define GAME_VERSION_MINOR 5\n\n#define GAME_VERSION_REVSN @rev_number@\n\n#define GAME_BUILD_NUMBER  80\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#endif\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "dep/aes/CMakeLists.txt" : {
      "ObjectId" : "4801c575b1f8b266c3b2a8d33e49a0b09e462dbb",
      "LastModified" : "2016-04-03T19:23:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dep/bzip2/CMakeLists.txt" : {
      "ObjectId" : "aa6042f44a5cac7d1a825fb37b908e7ac1086ba8",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dep/curl/CMakeLists.txt" : {
      "ObjectId" : "51619403f529e5542318f3b9d10ea26f119a21fd",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include all the necessary files for macros\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if header file exists and add it to the list.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Different sizeofs, etc.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#    define CURL_SIZEOF_LONG        4\n\n#    define CURL_TYPEOF_CURL_OFF_T  long long\n\n#    define CURL_FORMAT_CURL_OFF_T  \"lld\"\n\n#    define CURL_FORMAT_CURL_OFF_TU \"llu\"\n\n#    define CURL_FORMAT_OFF_T       \"%lld\"\n\n#    define CURL_SIZEOF_CURL_OFF_T  8\n\n#    define CURL_SUFFIX_CURL_OFF_T  LL\n\n#    define CURL_SUFFIX_CURL_OFF_TU ULL\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: need adjustment here.\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "dep/freetype/CMakeLists.txt" : {
      "ObjectId" : "a13000a8a3bd7254c683703dd2ed8582b8a404b0",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(${FREETYPELIB_NAME} ${ZLIB_NAME})\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dep/libpng/CMakeLists.txt" : {
      "ObjectId" : "b78ce86c81e76a6fd442af5592c0a69c4d0f36a1",
      "LastModified" : "2016-04-03T19:23:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(${PROJECT_NAME} ${ZLIB_LIBRARY})\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "dep/litehtml/CMakeLists.txt" : {
      "ObjectId" : "d6e8b0af0080e1f20c14d52685b69401912dbf17",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dep/lzma/CMakeLists.txt" : {
      "ObjectId" : "0aaf2534d778129975acdb8ffc44416f052c176d",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dep/minizip/CMakeLists.txt" : {
      "ObjectId" : "ddc0fafa112b01f841453224c355940e38323780",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dep/mixer/CMakeLists.txt" : {
      "ObjectId" : "073bca9163d79a30a4c47f4e8aaefb0681549986",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable this if you want to support loading OGG Vorbis music via Tremor\n\n# The library path should be a relative path to this directory.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dep/mixer/external/libogg-1.3.1/include/Makefile.am" : {
      "ObjectId" : "0084e4d8298a2ec161888420af70ba0f1f3cc778",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dep/mixer/external/libogg-1.3.1/include/ogg/Makefile.am" : {
      "ObjectId" : "142699d35608e1bbe175746ef0073f8f2e01fb61",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dep/picoc/CMakeLists.txt" : {
      "ObjectId" : "5ef5f883c9fa9ae8a859990be16c7c15db03251c",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dep/sdl2mini/CMakeLists.txt" : {
      "ObjectId" : "8fb03a04dac30c143174ab9d127bdadd588786a5",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file(GLOB AUDIO_PULSE_SOURCES_LIST \"src/audio/pulseaudio/*.c\")\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#add_definitions(-DSDL_AUDIO_DRIVER_PULSEAUDIO=1)\n\n#add_definitions(-DSDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC=1)\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#add_definitions(-DSDL_AUDIO_DRIVER_ALSA_DYNAMIC=1)\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "dep/smk/CMakeLists.txt" : {
      "ObjectId" : "c92ef6ee2c01f7f7d79353816bb9e917b98228e3",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dep/ttf/CMakeLists.txt" : {
      "ObjectId" : "a2dbeab9fdd9d96cfa4da5c067947a9aecb03622",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_package(Freetype REQUIRED)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries(${PROJECT_NAME} ${PNG_LIBRARY})\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "dep/zlib/CMakeLists.txt" : {
      "ObjectId" : "dc073464a0d14a83370be4d8160b02fc6a97d4a4",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required on Unix OS family to be able to be linked into shared libraries.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expose public includes to other through cache variable.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "sgreader/CMakeLists.txt" : {
      "ObjectId" : "e1d464c034d979681a58813871d422eca0bc8bb9",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QT4\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#QT4_WRAP_CPP(HEADERS_MOC ${HEADERS} main.cpp)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Qxt\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "sgreader/sgreader.pro" : {
      "ObjectId" : "a8d3ab7dc645142539453d35f83648a9cd1c2fa1",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Input\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "bb2162b25108769ad0bdb1f2a22116bc5ad289c9",
      "LastModified" : "2016-04-28T20:44:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find revision ID and hash of the sourcetree\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#select compiler\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# using Clang\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# using GCC\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "######################## osx clang settings ##################################\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#include steam libraries\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E copy \"${STEAM_API_DIR}/bin/osx32/libsdkencryptedappticket.dylib\" \"${WORK_DIR}/libsdkencryptedappticket.dylib\"\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Enforce C++11\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check for C++11 suport\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "######################## Win32 settings #################################\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################## set visual studio virtual folders ###############\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#############################################################################\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#set app run params\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#avoid compiler warning\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "####################### Win32 mingw settings ##################################\n\n#not show console window\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#include steam libraries\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "####################### linux gcc settings ######################################\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#################### get locales ###############################\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#################################################################\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# set compiler options\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#release options strip bin\n",
        "Line" : 245,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Enforce C++11\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Check for C++11 suport\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#include steam libraries\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E copy \"${STEAM_API_DIR}/bin/linux64/libsdkencryptedappticket.so\" \"${WORK_DIR}/libsdkencryptedappticket.so\"\n",
        "Line" : 270,
        "CharPositionInLine" : 10
      },
      "26" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E copy \"${STEAM_API_DIR}/bin/linux32/libsdkencryptedappticket.so\" \"${WORK_DIR}/libsdkencryptedappticket.so\"\n",
        "Line" : 279,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 27
    },
    "tileset/CMakeLists.txt" : {
      "ObjectId" : "8f59b4c7431769ec7846bd976868b2da65731720",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find revision ID and hash of the sourcetree\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prepare working directory\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set compiler options\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enforce C++11\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "updater/CMakeLists.txt" : {
      "ObjectId" : "072bb745748ca3b2a6f792ae41aca838f6a147d6",
      "LastModified" : "2016-04-01T20:46:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find revision ID and hash of the sourcetree\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prepare working directory\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set compiler options\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enforce C++11\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "xcompile/win32-cross.cmake" : {
      "ObjectId" : "89ae11eeedd95257f44b1c45d24edfea4ac1c9cf",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "xcompile/win64-cross.cmake" : {
      "ObjectId" : "a836b73c25087562cf8724c91fd983c628ca2a90",
      "LastModified" : "2016-03-18T11:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 29,
    "QMAKE" : 1,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 2,
    "ANT" : 1
  },
  "ElapsedTime" : 12748
}