{
  "Repository" : "31347797",
  "Revision" : "HEAD",
  "ObjectId" : "208c184de9ce7515e4a42fd68d456c5b68931e89",
  "CommitTime" : "2019-03-31T02:25:32Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d73aee72b2dd988f9f541eab3f7c911af3b9ddd0",
      "LastModified" : "2018-06-17T21:33:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tools, includes the GUI profiler\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Add subdir for example applications\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Add documentation directory, not built by default (increases build time)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "d33481d6076e1ea04e35840714debb03bc7a10cf",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Here lies examples of code usage\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Core\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ASIO examples, we leave this as core\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#    add_subdirectory(asio/base-server)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Not going to say.\n\n#add_subdirectory(rsread)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# SDL2\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Sprite rendering with SDL2\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Joystick visualizer\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# OpenAL\n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Examples of CAudio API through OpenAL and Coffee audio abstraction layer\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# GLeam\n\n#\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# CBlam\n\n#\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Examples of the CBlam API and its import of Blam engine data\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# Assimp\n\n#\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n\n# Chromium Embedded Framework\n\n#\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Offscreen rendering test\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n#\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# SWIG APIs\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n#\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# Font rendering, stb_truetype.h\n\n#\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "examples/asio/base-client/CMakeLists.txt" : {
      "ObjectId" : "29f09b06462d37398042a5a574e93ef55259e57c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/asio/base-server/CMakeLists.txt" : {
      "ObjectId" : "b7db5439a242d6c5c64df528924e6bc978f0ee78",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/asio/irc-client/CMakeLists.txt" : {
      "ObjectId" : "b0051045208bef2450685cf697a6006f5c225db1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/assimp/model-load/CMakeLists.txt" : {
      "ObjectId" : "d37b20a0105718f2049325d606e3b02f72a7c66c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/audio/caudio-test/CMakeLists.txt" : {
      "ObjectId" : "9851ca2d8b47180dda7d9b3abb9e0b3fb309509c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/blam/cblam-testing/CMakeLists.txt" : {
      "ObjectId" : "349373adc9d9d6d33090c69051532cff7dc635a3",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/cef/base-test/CMakeLists.txt" : {
      "ObjectId" : "68102796e93e8da08de5fd1fd3384723d0aeea30",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/components/CMakeLists.txt" : {
      "ObjectId" : "6aed6f514771b72c2f9e2e422953af6d5e3293d0",
      "LastModified" : "2019-03-18T22:53:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/core/env-test/CMakeLists.txt" : {
      "ObjectId" : "b1de9a80c7e978071bea3994e86a50ccb9201a86",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/core/gpu-query/CMakeLists.txt" : {
      "ObjectId" : "8105ffc33eb8cfab99d796db301c09b5d539ebaf",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/core/power-test/CMakeLists.txt" : {
      "ObjectId" : "b4924ecbc2c369fc8888e68d8c14716ca883a34b",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/discord/basic/CMakeLists.txt" : {
      "ObjectId" : "1fc586046611d5b01483aa1f3466cc227a84a11c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/font-rendering/CMakeLists.txt" : {
      "ObjectId" : "12a17b9c85b252c901dcc2488bd42f7490e945ab",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/font-rendering/base-text-output/CMakeLists.txt" : {
      "ObjectId" : "6f23a8a3a813e3f440e7d6817c793928db49e2b6",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/gleam/compress-formats/CMakeLists.txt" : {
      "ObjectId" : "69196bada307320b6fdccbd5cf5f886dccaab7b3",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/gleam/rhi/base-test/CMakeLists.txt" : {
      "ObjectId" : "856fd6ba6a878590be08390c03ce375fd149abe7",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/gleam/shadow-test/CMakeLists.txt" : {
      "ObjectId" : "195d3f8ee14388300e0d1dfb09a2b9454e76a79f",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/input/joystick-test/CMakeLists.txt" : {
      "ObjectId" : "96cee8a507773a94cd5bd789c07ac6c78d1d51f1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/rsread/CMakeLists.txt" : {
      "ObjectId" : "b7b365e2b88ce6d305a2fbe92febde54e2feae06",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/sdl_sprite/base-test/CMakeLists.txt" : {
      "ObjectId" : "7e7eea2cb07999aedfa28335c078f24e0ff3f7c0",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/wrapper/native-test/CMakeLists.txt" : {
      "ObjectId" : "499ee4411084d128fff236f2abaa4b4ff6f140b5",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "567a8e020df0f2bd977ecd9592b1742fe1f03992",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Contains platform layer replacements\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add subdir for core modules\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add subdir for generation of language bindings\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add subdir for extensions, weak bindings of libraries\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/bindings/CMakeLists.txt" : {
      "ObjectId" : "1cdb5ee2175f86c02544fe166790ba32a75aeec2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Builds a C-like wrapper library for SWIG to embed\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/bindings/c-binding/CMakeLists.txt" : {
      "ObjectId" : "72d8f9f3babe2e466309f4463a781adf8bc90323",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/CMakeLists.txt" : {
      "ObjectId" : "5bdade638c2ca4888c63d7dc36b89b694e9167e9",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Explicit C++ build\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Ignore missing headers\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Python build\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#    install( FILES\n\n#        \"${SWIG_MODULE_${TARGET}_REAL_NAME}\"\n\n#        DESTINATION lib\n\n#        )\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SWIG import\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We have interfaces in this directory\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link with some libraries\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/bindings/swig/csharp/CMakeLists.txt" : {
      "ObjectId" : "dc2f93d6419f080fe78c98570b4af0bdb019b03e",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/dlang/CMakeLists.txt" : {
      "ObjectId" : "679f8241a48fc8975d4559d17d708ca050388362",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/python/CMakeLists.txt" : {
      "ObjectId" : "68364113cb584a9de373f7acbc935b3c66d93e7d",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/bindings/swig/python3/CMakeLists.txt" : {
      "ObjectId" : "3a42d3d2b85fa374e95a59d2bd5f947908349dc0",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/coffee/CMakeLists.txt" : {
      "ObjectId" : "9596655f795200e553ade6e223eb916baa5204e1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/coffee/application/CMakeLists.txt" : {
      "ObjectId" : "a6d6f4341ac80e54f7e98c9b75a6e26e671f53d2",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Linked only by applications, contains main()\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/coffee/asio/CMakeLists.txt" : {
      "ObjectId" : "75543b3a2ac6c974dd39952354b047f209c1c6c6",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenSSL used for ASIO networking\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/coffee/assimp/CMakeLists.txt" : {
      "ObjectId" : "c2223fd9857700e6d378fcecc5342f291c460997",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/coffee/audio/CMakeLists.txt" : {
      "ObjectId" : "ff4e4176c86cbdd8dad0754131b64d961776a984",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is the stb_vorbis decoder. Say hello, stb\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# This is a collection of general audio functions\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/coffee/blam/CMakeLists.txt" : {
      "ObjectId" : "94aa5a6a0ee1d8af1a4753df28337b70ef5c9111",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/coffee/core/CMakeLists.txt" : {
      "ObjectId" : "4279009de008c4936493691fefd81af9a1a7c5b2",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We slap tinyXML2 in here, just cause\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#\n\n# Debug functions\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#\n\n# to_string(...) functions\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# Core functionality, state and etc.\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# File-related functionality\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n# Task queues, for easier time scheduling\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\n\n# libz compression and whatever compression Windows has\n\n#\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Virtual filesystem\n\n#\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# EventApplication C wrapper\n\n#\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Utilities for printing in the terminal\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Generic application data storage, for application state\n\n#\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Profiling export to Chrome trace format\n\n#\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# Avoid this\n\n#\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Object ownership and labeling\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#\n\n# Custom INI reader/writer\n\n#\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# Entity-Component-System implementation\n\n#\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Unit test librar that dies properly when a test fails\n\n#\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "src/coffee/graphics/CMakeLists.txt" : {
      "ObjectId" : "c399aca1dbd9824bb7cc76ca36901d78a9109567",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GLEAM supports OpenGL 3.3 -> 4.6 and OpenGL ES 2.0 -> 3.2\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/coffee/graphics/apis/gleam/CMakeLists.txt" : {
      "ObjectId" : "d0e63d3ee152e376b4fdc94bfec14046bfc2938f",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On Android, GLES 3.x is used through a different library\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Elsewhere, just use GLESv2\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "src/coffee/graphics/common/CMakeLists.txt" : {
      "ObjectId" : "1b26579b7565b7be4442fb896b8bc62915240426",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/coffee/image/CMakeLists.txt" : {
      "ObjectId" : "6ec9d28563fb8963ecbce5808a02c7d0eba26a0e",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/coffee/sdl2/CMakeLists.txt" : {
      "ObjectId" : "014362876ccfe0ae57f5a960c45382d2fc2e21f3",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/coffee/windowing/CMakeLists.txt" : {
      "ObjectId" : "1435785ea9604381068ab2eed387c7909c07bc06",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add CEAGL layer, to provide EGL\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/ext/CMakeLists.txt" : {
      "ObjectId" : "fc0c3cb5c8ea8dda383c71a3addfc45d61401ae0",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Whether we should build with support for the PCL extension\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Whether we should build with support for the Kinect extension\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Whether we should build with support for the Qt extension\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Discord Rich Presence API\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# - What is an ext-classified library?\n\n# These libraries have less tight bindings to the framework, and will most likely introduce different paradigms to the engine. (Eg. smart pointers, different containers)\n\n# For any of these to be accepted as core they must be fully obscured and isolated from the Coffee namespace, and not leak any unwanted types. There are also requirements for library size. Any use of bloated libraries is certain not to be accepted. (Boost being one of them)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Point Cloud Library\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#The Qt library, includes some MOC and QRC things, some compilation flags required. See the NodeEditorTest example for an example of it running.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Retro frontend support, GPL code is tricky to link with. We need an interface for this.\n\n#add_subdirectory(retro-shim)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Freenect2 binding, might be promoted to core\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/ext/cef/CMakeLists.txt" : {
      "ObjectId" : "c574ca8e907861874596f933bdb18eee4cc2c8b2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ext/discord/CMakeLists.txt" : {
      "ObjectId" : "6e1b7dd8dcf9abda94ac0818e5946084c9381362",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ext/kinect-shim/CMakeLists.txt" : {
      "ObjectId" : "c982303ec24e884a6d26e383bf204ef8833e956d",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ext/pcl-shim/CMakeLists.txt" : {
      "ObjectId" : "b79f88e72563276c835c1d4027cd7f2f9d2bfcf9",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#PCL_FOUND\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "src/ext/qt-shim/CMakeLists.txt" : {
      "ObjectId" : "80ae53193973b5cc6526e84eae3330647aff5134",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ext/qt-shim/qt-dialogs/CMakeLists.txt" : {
      "ObjectId" : "130bbd62a939d45db52899cc297af5ef272d93b7",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ext/qt-shim/qt-node-editor/CMakeLists.txt" : {
      "ObjectId" : "76a1d9b11cd31772b207fc29d9d3afa60e1afcc4",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/peripheral/CMakeLists.txt" : {
      "ObjectId" : "e520973fc22c2972212b3781a4da53a78569b828",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################\n\n# STL extensions, replacing STL where it does not exist\n\n############################################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################################################\n\n# Backup thread naming\n\n#  - for platforms where thread naming doesn't really exist\n\n############################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#\n\n# Alternative thread implementations\n\n# Used for platforms without std::thread/std::mutex support\n\n# Implemented here:\n\n#  - Gamecube/Wii LWP\n\n#\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "############################################################\n\n# Platform layer\n\n############################################################\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/peripheral/platform/CMakeLists.txt" : {
      "ObjectId" : "87dd474c0ebab9178daa0f65c2cafcea0a6c321e",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This one is pretty important, let's keep it here\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#\n\n#\n\n# SDL power management info\n\n#\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#\n\n# Android, there's a lot of weird stuff here because NativeActivity sucks\n\n# Generally should not be touched\n\n#\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This flag gives a lot of false positives for aligned accesses\n",
        "Line" : 82,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#\n\n#\n\n# Apple iOS/OS X-specific code\n\n#\n\n#\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# System information queries\n\n#\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Some functions are exposed by Obj-C\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#\n\n#\n\n# Portable POSIX code\n\n#\n\n#\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# POSIX environment functions\n\n#\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#\n\n# Stacktrace using libunwind\n\n#\n",
        "Line" : 132,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "#\n\n# Dynamic linking (libdl)\n\n#\n",
        "Line" : 137,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#\n\n# File management\n\n#\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "#\n\n#\n\n# Linux desktop-specific code\n\n#\n\n#\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# Linux-specific system calls and behavior all around\n\n#\n",
        "Line" : 163,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#\n\n#\n\n# Emscripten-specific code\n\n#\n\n#\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# Like POSIX, but limited\n\n#\n",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#\n\n#\n\n# Raspberry Pi-specific code\n\n#\n\n#\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# Extracts Raspberry Pi board name\n\n#\n",
        "Line" : 198,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "#\n\n#\n\n# Maemo-specific code\n\n#\n\n#\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# Accelerometers, light sensors and etc.\n\n#\n",
        "Line" : 212,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#\n\n#\n\n# Windows Win32/UWP-specific code\n\n#\n\n#\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#        platforms/win32/errors.cpp\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "c150489fe567a077f34b9418d2d4f1c90c832eb6",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This needs different testing and setup\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Known to not work with:\n\n#  - Android (limitations in ant buildtool? thinks it's invalid)\n\n#  - Windows (just plain terrible filename encoding)\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This dummy target helps coverage see all the code,\n\n#  for more accurate coverage info.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/cmd-api/CMakeLists.txt" : {
      "ObjectId" : "1b0189301e5671d5742d71cbbaeae4499f5d74e5",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#coffee_add_test ( Unit_Cmd_Test01 \"Cu_Commandline\" test01.cpp Core )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/datastorage-api/CMakeLists.txt" : {
      "ObjectId" : "f6f45baa1a56fbc888a1fde73ccf489cea38e535",
      "LastModified" : "2018-02-21T19:24:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/datastorage-api/ini/CMakeLists.txt" : {
      "ObjectId" : "ef70f0d76565316f7079af034515286db37985f2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/datastorage-api/save-api/CMakeLists.txt" : {
      "ObjectId" : "d754cf49b687148d460283f208f0669732389103",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/datastorage-api/virtfs/CMakeLists.txt" : {
      "ObjectId" : "ca277639db0120e67ad9b20fc73d471227216ab7",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/file-api/CMakeLists.txt" : {
      "ObjectId" : "8d7788bf02913f02e8d099a64b98e98721f8e0e2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Testing anonymous buffers for memory allocation\n\n#  can be more efficient that malloc() on some systems\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The tests below require a 64-bit or 32-bit PAE system\n\n# These tests will not run on mobile devices,\n\n#  most likely (unless they have swap space, and tons of it)\n\n# These tests might not fare well on Windows and <8GB RAM systems\n\n# TODO: Skip these tests on more low-memory systems\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "tests/graphics/CMakeLists.txt" : {
      "ObjectId" : "ca1b5df24e5c12d5e4ba770521483722b2070946",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/graphics/api-verify/CMakeLists.txt" : {
      "ObjectId" : "668fa0118834a4205c3823996e260b1cd1acd332",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/graphics/pixel-types/CMakeLists.txt" : {
      "ObjectId" : "91633898697accccf1cd24c0496d066c371d1062",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/graphics/self-test/CMakeLists.txt" : {
      "ObjectId" : "bf9048a256776b1110298cdc637dcc5733412812",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/graphics/shader-types/CMakeLists.txt" : {
      "ObjectId" : "ead023ac8037265e393bfb7e1ce9d2d2588995df",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/http_test/CMakeLists.txt" : {
      "ObjectId" : "4638b565431a094549713a1f054cf70c577079a1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/image-api/CMakeLists.txt" : {
      "ObjectId" : "e2b22ad28b3f1ac787c169e047b3b61ff276ea4d",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/link-api/CMakeLists.txt" : {
      "ObjectId" : "a5f4153667f42941327c98f062842032a6f9f160",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/math-logic/CMakeLists.txt" : {
      "ObjectId" : "aa0659c686060ecb03da91db19a2e16beecdc709",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/math-logic/enum-ops/CMakeLists.txt" : {
      "ObjectId" : "cf9f49a92f8c39bbcf05b7fb328ff6c37344eb52",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/math-logic/lerp-ops/CMakeLists.txt" : {
      "ObjectId" : "7d9a6f21c3d54c0facd84e929e5e6e217dc8f0fe",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/math-logic/matrix-ops/CMakeLists.txt" : {
      "ObjectId" : "476bea6058443db41b68d722ea8e7afbbb5f21b4",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/mem-api/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/packaging-api/CMakeLists.txt" : {
      "ObjectId" : "85b1b8bc638604c6056f7bebe063f049f3289c50",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tests what happens to subdirectories and files on different systems, and whether it is desired behavior\n\n# This comes in handy to detect bugs, you know\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/profiling-api/CMakeLists.txt" : {
      "ObjectId" : "eac884fc787c19da017d3627a62a141662bab45a",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/size-tests/CMakeLists.txt" : {
      "ObjectId" : "009f6fb7a0cca7a8207087711dc45cd8d27b6dcd",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/string-api/CMakeLists.txt" : {
      "ObjectId" : "d31e82e144e389d47611095169adb1e7879434b9",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/string-api/plain_string/CMakeLists.txt" : {
      "ObjectId" : "b62355cde08b1e00b082a98cd71d263e6b0637e7",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/string-api/replace_test/CMakeLists.txt" : {
      "ObjectId" : "846749368435c7d1bf56568b9e75e5f8501d141a",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/string-api/str_interpret/CMakeLists.txt" : {
      "ObjectId" : "2db765b3bb952c95fea6069eade4b983d053223f",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/sysinfo-api/CMakeLists.txt" : {
      "ObjectId" : "dea592b2e3c080d25da161470396cd0b02ae5722",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/thread-api/CMakeLists.txt" : {
      "ObjectId" : "a8c50bfdac88cb78358bc355fc8d5d166b4c35fa",
      "LastModified" : "2017-11-22T02:06:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/thread-api/printing/CMakeLists.txt" : {
      "ObjectId" : "f39f4eb074dc58dd2e7c4fad7de148e8699c78ab",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/thread-api/workload/CMakeLists.txt" : {
      "ObjectId" : "8c1406e528e02ceff55244f7d55d67c8eb21b5a7",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/type-safe/CMakeLists.txt" : {
      "ObjectId" : "5f3a1e6d10532190a027f172a11cf8d76ed621be",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/vr-api/CMakeLists.txt" : {
      "ObjectId" : "872d1bf19e74b2884d241416968c454ee5c5c77c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/window-api/basic/CMakeLists.txt" : {
      "ObjectId" : "cfb8c62a7fcf18ea767103eb2539f48a19afae2c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindANGLE.cmake" : {
      "ObjectId" : "63818f898ac9a448e0dc72a3978fb934170d8087",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Future-proofing for x86/x86_64/armv7/arm64\n",
        "Line" : 10,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "#Future-proofing for x86/x86_64/armv7/arm64\n",
        "Line" : 13,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 2
    },
    "toolchain/cmake/Find/FindAndroidGlue.cmake" : {
      "ObjectId" : "e3d43351ae338b3b26a0b5cab41417e1d3e2e413",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# native_app_glue has a lot of spam in debug mode, we disable that\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Find/FindAndroidSDK.cmake" : {
      "ObjectId" : "e49fbeddb7481bb19aa4c98a8e29b59d515aa5fc",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindCEF.cmake" : {
      "ObjectId" : "0e2719aab054b100ff802ef7c9b761200deca7ac",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the CEF librar(ies/y)\n\n#\n\n# Defines:\n\n#   CEF_FOUND\n\n#   CEF_LIBRARIES\n\n#   CEF_INCLUDE_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Inputs:\n\n#   CEF_ROOT_DIR\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Which headers to search for\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Where to search for them\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Library name\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Library name\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#Fucking hell.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "toolchain/cmake/Find/FindCfAndroidMain.cmake" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindDBus.cmake" : {
      "ObjectId" : "5109898cf9d3c35cb4cf53624210473fae6d0e7e",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindInkscape.cmake" : {
      "ObjectId" : "d70b93e815c8eb66d05331197f0c4a250ea79646",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindLibDRM.cmake" : {
      "ObjectId" : "7e5fe3cbb8ec441bec246b3f28a9395ef9fd0883",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindMir.cmake" : {
      "ObjectId" : "59e97e45fcef974a5f27db96c032d73d673bc48c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindNativeLibraryDir.cmake" : {
      "ObjectId" : "1a067720562b20a6d39e10a7b33a62ed0078bef2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindNvidiaML.cmake" : {
      "ObjectId" : "a0ab1f583cbfb647e0302cd195971603c6098628",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindOVR.cmake" : {
      "ObjectId" : "daa2adb4ca3fa6fa9fc61ecda0f01797cdfff120",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find Oculus VR's SDK for Oculus Rift support\n\n#\n\n# Cache Variables: (probably not for direct use in your scripts)\n\n#  OVR_INCLUDE_DIR\n\n#  OVR_SOURCE_DIR\n\n#  OVR_LIBRARY\n\n#\n\n# Non-cache variables you might use in your CMakeLists.txt:\n\n#  OVR_FOUND\n\n#  OVR_INCLUDE_DIRS\n\n#  OVR_LIBRARIES\n\n#\n\n# Requires these CMake modules:\n\n#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)\n\n#\n\n# Original Author:\n\n# 2014 Kevin M. Godby <kevin@godby.org>\n\n#\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The OVR library is built in a directory tree that varies based on platform,\n\n# architecture, and compiler.\n\n#\n\n# The libraries live in one of the following locations:\n\n#\n\n# Lib/Win32/VS2012/libovrd.lib\n\n# Lib/Win32/VS2012/libovr.lib\n\n# Lib/Win32/VS2013/libovrd.lib\n\n# Lib/Win32/VS2013/libovr.lib\n\n# Lib/Win32/VS2010/libovrd.lib\n\n# Lib/Win32/VS2010/libovr.lib\n\n# Lib/x64/VS2012/libovr64d.lib\n\n# Lib/x64/VS2012/libovr64.lib\n\n# Lib/x64/VS2013/libovr64d.lib\n\n# Lib/x64/VS2013/libovr64.lib\n\n# Lib/x64/VS2010/libovr64d.lib\n\n# Lib/x64/VS2010/libovr64.lib\n\n# Lib/Linux/Release/x86_64/libovr.a\n\n# Lib/Linux/Debug/x86_64/libovr.a\n\n# Lib/Linux/Release/i386/libovr.a\n\n# Lib/Linux/Debug/i386/libovr.a\n\n# Lib/Mac/Release/libovr.a\n\n# Lib/Mac/Debug/libovr.a\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test compiler\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Microsoft Visual Studio 2010\n",
        "Line" : 52,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# Microsoft Visual Studio 2012\n",
        "Line" : 54,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "# Microsoft Visual Studio 2013\n",
        "Line" : 56,
        "CharPositionInLine" : 15
      },
      "6" : {
        "Text" : "# Test 32/64 bits\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Test platform\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# needs build type and arch\n",
        "Line" : 78,
        "CharPositionInLine" : 55
      },
      "9" : {
        "Text" : "# needs build type\n",
        "Line" : 80,
        "CharPositionInLine" : 53
      },
      "10" : {
        "Text" : "# Dependencies\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Linux-only dependencies\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#find_library(OVR_WINMM_LIBRARY winmm)\n\n#find_library(OVR_WS2_LIBRARY ws2_32)\n",
        "Line" : 194,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "#${OVR_WINMM_LIBRARY} ${OVR_WS2_LIBRARY})\n",
        "Line" : 196,
        "CharPositionInLine" : 59
      },
      "CommentCount" : 14
    },
    "toolchain/cmake/Find/FindOpenAL.cmake" : {
      "ObjectId" : "fbdf4e409cd90356aef2014009b95bca8b3baa1a",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# NOTE: Linking to this library on OSX and iOS is bad.\r\n\n# It will attempt to link (statically/dynamically) into a directory.\r\n\n# Don't try to link this on OSX and iOS.\r\n\n#\r\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Find/FindOpenVR.cmake" : {
      "ObjectId" : "e63fef50b1d6a2f23b1c2eb502c8ce12dd98cc4a",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindPressureCooker.cmake" : {
      "ObjectId" : "73bf0b47441bf5ecbdfb5d815a7142e64db1e3f9",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindRapidJson.cmake" : {
      "ObjectId" : "cc3ff84f59b86296629ea997c24d1513c4b69b64",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindSDL2.cmake" : {
      "ObjectId" : "e4dafc8e46c4dd7ca4f8cd086236c30b33fb6a65",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 74,
        "CharPositionInLine" : 15
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 75,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# This one is for MinGW\n",
        "Line" : 101,
        "CharPositionInLine" : 14
      },
      "6" : {
        "Text" : "# Default stuff\n",
        "Line" : 107,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# CMake architecture path\n",
        "Line" : 108,
        "CharPositionInLine" : 38
      },
      "8" : {
        "Text" : "# Android paths\n",
        "Line" : 110,
        "CharPositionInLine" : 40
      },
      "9" : {
        "Text" : "# CMake architecture path\n",
        "Line" : 113,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For SDL2main\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# For MinGW library\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#          asound\n\n#          pulse\n\n#          pulse-simple\n\n#          sndio\n\n#          Xcursor\n\n#          Xinerama\n\n#          Xi\n\n#          Xrandr\n\n#          Xss\n\n#          Xxf86vm\n\n#          xkbcommon\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n\n#  if(NOT EMSCRIPTEN)\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#  endif()\n\n# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#  SET(SDL2_LIBRARY_TEMP \"${SDL2_LIBRARY_TEMP}\" CACHE INTERNAL \"\")\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "toolchain/cmake/Find/FindSDL2GameControllerDB.cmake" : {
      "ObjectId" : "f25ae0051926955d54102eba01526b8469d6084c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindSDL2main.cmake" : {
      "ObjectId" : "cf334f273952b47523cef990e8018ba0addf828f",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find SDL2_android_main.c\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Find/FindSPIRVCross.cmake" : {
      "ObjectId" : "d5ad134b4cd5934bec2a6b5bba6b163bb5dd4340",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindSPIRVTools.cmake" : {
      "ObjectId" : "594de210b8dcd2f28fad8e144c2f6cb9358c1c3d",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindSquish.cmake" : {
      "ObjectId" : "5007a214e8c8d6d0da69363bca32106add47922a",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default stuff\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# CMake architecture path\n",
        "Line" : 32,
        "CharPositionInLine" : 40
      },
      "2" : {
        "Text" : "# Android paths\n",
        "Line" : 34,
        "CharPositionInLine" : 42
      },
      "3" : {
        "Text" : "# CMake architecture path\n",
        "Line" : 37,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 4
    },
    "toolchain/cmake/Find/FindStandardLibs.cmake" : {
      "ObjectId" : "d2dca86ad931e7a873dd99a6a75ac13b7792f90f",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some variables\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Platform-specific target options\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Libunwind is used to print function names at runtime\n\n# Windows does not support this library\n\n# Android's Bionic does not grant access to unwind, even though it is there. Bad Google, bad!\n",
        "Line" : 9,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# We use SDL2 for some platform functionality, like power info\n\n# On Android, it is also used to read assets and\n\n#  acquiring device info.\n",
        "Line" : 25,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "#    list ( APPEND CORE_EXTRA_LIBRARIES ${SDL2_LIBRARY} )\n",
        "Line" : 41,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Add the Android logging library, as well as android and GLESv*\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Logging and basic Android functions\n",
        "Line" : 57,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Linkage on Raspberry kind of looks like Android\n\n# We also have bcm_host for accessing OpenGL for some reason\n\n# Next we might look for OpenMAX?\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#        GLESv2\n",
        "Line" : 67,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Don't know what this is, but it's necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# For some of the file API\n\n# This one is not available on UWP\n\n#pathcch\n",
        "Line" : 76,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : "# Core includes\n",
        "Line" : 80,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# Used for thread details\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Necessary for Linux and possibly OS X (latter is untested)\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 14
    },
    "toolchain/cmake/Find/FindTinyXML2.cmake" : {
      "ObjectId" : "b633442207bf3fd88cd533171219f24984155637",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindUnwind.cmake" : {
      "ObjectId" : "8f9571e9181e92d132a7f2577c4be164a77b1c9b",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#From: https://github.com/cmccabe/lksmith/blob/master/cmake_modules/FindLibunwind.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the libunwind library\n\n#\n\n#  LIBUNWIND_FOUND       - True if libunwind was found.\n\n#  LIBUNWIND_LIBRARIES   - The libraries needed to use libunwind\n\n#  LIBUNWIND_INCLUDE_DIR - Location of unwind.h and libunwind.h\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For some reason, we have to link to two libunwind shared object files:\n\n# one arch-specific and one not.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "toolchain/cmake/Find/FindValgrind.cmake" : {
      "ObjectId" : "26a569dfc79ea0c1241c6257608bed6577265573",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindWayland.cmake" : {
      "ObjectId" : "91968a78e78f0463311e920b08532a827370a98a",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/FindXrandr.cmake" : {
      "ObjectId" : "bef67c4019940cc627a9fe87cafc4c918f253bd2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find the Xrandr library\n\n#\n\n# Cache Variables: (probably not for direct use in your scripts)\n\n#  XRANDR_INCLUDE_DIR\n\n#  XRANDR_SOURCE_DIR\n\n#  XRANDR_LIBRARY\n\n#\n\n# Non-cache variables you might use in your CMakeLists.txt:\n\n#  XRANDR_FOUND\n\n#  XRANDR_INCLUDE_DIRS\n\n#  XRANDR_LIBRARIES\n\n#\n\n# Requires these CMake modules:\n\n#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)\n\n#\n\n# Original Author:\n\n# 2014 Kevin M. Godby <kevin@godby.org>\n\n#\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Find/Findassimp.cmake" : {
      "ObjectId" : "4dfa26f92c36932fb858c0e24c33230d3b91cf71",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake architecture path\n",
        "Line" : 25,
        "CharPositionInLine" : 40
      },
      "1" : {
        "Text" : "# CMake architecture path\n",
        "Line" : 38,
        "CharPositionInLine" : 40
      },
      "2" : {
        "Text" : "# Static zlib for platforms shipping without it\n\n# Mainly used for Windows and MinGW*\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "toolchain/cmake/Find/Findglbinding.cmake" : {
      "ObjectId" : "3a45f01293f1a3c4be9808e7c7a7080dd2f474ce",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GLBINDING_FOUND\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GLBINDING_LIBRARIES\n\n# GLBINDING_INCLUDE_DIRS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GLBINDING_LIBRARY\n\n# GLBINDING_LIBRARY_RELEASE\n\n# GLBINDING_LIBRARY_DEBUG\n\n# GLBINDING_INCLUDE_DIR\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GLBINDING_BINARIES        (win32 only)\n\n# GLBINDING_BINARY_RELEASE  (win32 only)\n\n# GLBINDING_BINARY_DEBUG    (win32 only)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# DEBUG\n\n# message(\"${LIB_NAME_UPPER}_INCLUDE_DIR     = ${${LIB_NAME_UPPER}_INCLUDE_DIR}\")\n\n# message(\"${LIB_NAME_UPPER}_LIBRARY_RELEASE = ${${LIB_NAME_UPPER}_LIBRARY_RELEASE}\")\n\n# message(\"${LIB_NAME_UPPER}_LIBRARY_DEBUG   = ${${LIB_NAME_UPPER}_LIBRARY_DEBUG}\")\n\n# message(\"${LIB_NAME_UPPER}_LIBRARY         = ${${LIB_NAME_UPPER}_LIBRARY}\")\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "toolchain/cmake/Find/Findshaderc.cmake" : {
      "ObjectId" : "95c4fff8f29dbec1c76db8569d1979396f1761ce",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/Findstb.cmake" : {
      "ObjectId" : "cdfa2b6b9fe55f5d03ddcf1beb619fcc0dd6c0b9",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find/Findudev.cmake" : {
      "ObjectId" : "9ca99611d2defb9867fc2c83ad68c5a8536ebabf",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find the udev library\n\n#\n\n# Cache Variables: (probably not for direct use in your scripts)\n\n#  UDEV_INCLUDE_DIR\n\n#  UDEV_SOURCE_DIR\n\n#  UDEV_LIBRARY\n\n#\n\n# Non-cache variables you might use in your CMakeLists.txt:\n\n#  UDEV_FOUND\n\n#  UDEV_INCLUDE_DIRS\n\n#  UDEV_LIBRARIES\n\n#\n\n# Requires these CMake modules:\n\n#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)\n\n#\n\n# Original Author:\n\n# 2014 Kevin M. Godby <kevin@godby.org>\n\n#\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Find_Windows/FindOpenSSL.cmake" : {
      "ObjectId" : "5e253d5078e7709a546fbd3a5125bc57e1117cdc",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Find_Windows/Findassimp.cmake" : {
      "ObjectId" : "80e96521d531784b6273ee8413fa5da3b9236e95",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Modules/BuildFlags.cmake" : {
      "ObjectId" : "3586c2d620e8cf294b874fe56f4576a6f19266e2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Static builds by default\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Embedding a build string\n\n################################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build time strings, embedded within constexpr strings to keep track of when a build was made.\n\n# Because file timestamps are unreliable.\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# git hash is retrieved\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "################################################################################\n\n# Disabling dynamic linking on unsupported platforms\n\n################################################################################\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n\n# Strict Release builds\n\n################################################################################\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "toolchain/cmake/Modules/BuildFunctions.cmake" : {
      "ObjectId" : "3382b9b7f7ad3fb574d7726f1a794c72d67a1cd6",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Modules/BuildGenerators.cmake" : {
      "ObjectId" : "15c68675b6734e1e1fadad94ec7fa8ebd549d9de",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# For embedding license info and application info\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Modules/BuildLibrary.cmake" : {
      "ObjectId" : "f7dba09113487d511be822f9e82a141a50e49d19",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Contains some code for packaging frameworks\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    get_property( INC_DIRS GLOBAL PROPERTY CF_INCLUDE_DIRS )\n\n#    set_property(GLOBAL PROPERTY CF_INCLUDE_DIRS \"${INC_DIR};${INC_DIRS}\" )\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create a client-reproducible form of the incude directories for deploy\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Dedupe it, because it's a lot\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#        ${HEADER_DIR}/*.h\n\n#        ${HEADER_DIR}/*.hpp\n",
        "Line" : 193,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 5
    },
    "toolchain/cmake/Modules/BuildPackaging.cmake" : {
      "ObjectId" : "179e2b4077cae1af5709983048a5b429dd8d68fa",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    TARGET\n\n#    TITLE APP_COMPANY_NAME APP_VERSION_CODE\n\n#    INFO_STRING COPYRIGHT\n\n#    SOURCES LIBRARIES\n\n#    BUNDLE_LIBS BUNDLE_RSRCS BUNDLE_LICENSES\n\n#    PERMISSIONS\n\n#    BUNDLE_BINARIES\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Aesthetic details\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Package name generation\n\n# PACKAGE_PREFIX is prepended to target name\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Defines entire package name\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Application permissions, translated per platform\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Linking data\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# For shared libraries\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Just resources used by the program\n\n# Specified as the root of a resource directory\n",
        "Line" : 52,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# For required programs\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# For licenses, will be merged into binary\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Protocol schemes to register the application with\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Indicates building a console application. Mostly used on OSX to\n\n#  disable building as .app. Will output plain binary on OSX.\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# These define and create LICENSE_FILE and APPLICATION_INFO_FILE\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# We still install a basic binary executable\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 14
    },
    "toolchain/cmake/Modules/BuildTesting.cmake" : {
      "ObjectId" : "87babe48b7bbba2a0e7bbb0a5ba02fe27c1c6947",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CTest functions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# For automating tests using CTest\n\n################################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If a platform does not support simple testing, drop out here\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#            ${SDL2_ANDROID_MAIN_FILE}\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# There is not solution for iOS as of yet\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# We use a unit testing utility for Android,\n\n#  which installs and runs the test\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# In this case, CTest runs its normal course, locally\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Valgrind checks, for deep run-level checking\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# When generating coverage data, we need to add the targets here\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "toolchain/cmake/Modules/CMakeConvenience.cmake" : {
      "ObjectId" : "596758d75b55bc491abb2259d2635a5bbcac1e77",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Shorthand for enabling C++11, with less copy-pasta\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "dec4fda23c0719ab8cf85a86c6f51f6f7022b9dc",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# CHECK VALID COMPILER\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 115,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 148,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 152,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Setup target\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 166,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#        COMMAND ${CMAKE_COMMAND} -E remove ${coverage_info} ${coverage_cleaned}\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 187,
        "CharPositionInLine" : 14
      },
      "17" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 198,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 202,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# Run tests\n",
        "Line" : 206,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# Running gcovr\n",
        "Line" : 209,
        "CharPositionInLine" : 12
      },
      "22" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 221,
        "CharPositionInLine" : 14
      },
      "24" : {
        "Text" : "# APPEND_COVERAGE_COMPILER_FLAGS\n",
        "Line" : 227,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 25
    },
    "toolchain/cmake/Modules/InkscapeResize.cmake" : {
      "ObjectId" : "04af0603b11c008e6d33d60ee4edc6113e394045",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Modules/InstallConvenience.cmake" : {
      "ObjectId" : "ce43a18042dc2f334ebf8deb3a60cb4a26afb9c5",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If elements are empty, don't do anything\n",
        "Line" : 16,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Modules/QtIncludes.cmake" : {
      "ObjectId" : "7f71a3239c902d89c466ceaca0da8dec7a5c1a38",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Modules/SubprojectFunctions.cmake" : {
      "ObjectId" : "7b34791f81614ea5bfaee69be99cc868a2b149c9",
      "LastModified" : "2019-03-18T08:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# Basic CMake configuration\n\n############################################################################\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "############################################################################\n\n# Internal structure\n\n############################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "############################################################################\n\n# Platform-specific CMake modules\n\n############################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#        ${CMAKE_SOURCE_DIR}/cmake/Find_Android\n",
        "Line" : 50,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "############################################################################\n\n# CMake scripting paths\n\n############################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "############################################################################\n\n# CMake helper scripts\n\n############################################################################\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "############################################################################\n\n# Output types\n\n############################################################################\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "############################################################################\n\n# Build modifiers\n\n# These impact the build in multiple ways\n\n############################################################################\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "############################################################################\n\n# Coverage and testing\n\n############################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Enable coverage when requested\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Coverage and sanitizers\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "############################################################################\n\n# Packaging options\n\n############################################################################\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# The multiple Linux packaging formats\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# When building for Emscripten, we output HTML targets\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "################################################################################\n\n# Helper for importing Coffee libraries\n\n################################################################################\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "toolchain/cmake/Modules/ValgrindTest.cmake" : {
      "ObjectId" : "820278d0a5a634a7591dd61f3ce5bb1d7a541618",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Modules/WindowsPlatformDetect.cmake" : {
      "ObjectId" : "7a3e8ee191363dbb70b5749782474b67931effe2",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Windows is missing an identifier for libraries\n\n# This applies to all derivative builds\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Packaging/AndroidApkBuild.cmake" : {
      "ObjectId" : "7e2c8dd0c7a68f2a343794fa114120fe123d7cdd",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# APK signing\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Misc properties\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "############################################################################\n\n############################################################################\n\n############################################################################\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Lowercase the target name for package name\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "############################################################################\n\n############################################################################\n\n############################################################################\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "############################################################################\n\n############################################################################\n\n############################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\n\n# AndroidManifest.xml templating\n\n#\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#########################################################\n\n#\n\n# Android features\n\n#\n\n#########################################################\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#########################################################\n\n#\n\n# APK permissions\n\n#\n\n#########################################################\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# For valid options, see:\n\n# http://developer.android.com/guide/topics/manifest/activity-element.html\n",
        "Line" : 201,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "############################################################################\n\n############################################################################\n\n############################################################################\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#\n\n# APK naming\n\n#\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# For now, manage release builds through Android Studio\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "############################################################################\n\n############################################################################\n\n############################################################################\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#\n\n# Configure gradle/Android project files\n\n#\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#\n\n# Create build directory at configure time\n\n#\n",
        "Line" : 239,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#\n\n# We need to change the Gradle version used by the project\n\n#\n",
        "Line" : 247,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Fill in AndroidManifest with info create above\n",
        "Line" : 261,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Configure strings.xml with app info\n",
        "Line" : 267,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "#\n\n# Create project directories\n\n#\n",
        "Line" : 282,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#\n\n# Install asset files\n\n#\n",
        "Line" : 300,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "#\n\n# Install dependency libraries\n\n#\n",
        "Line" : 311,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "############################################################################\n\n############################################################################\n\n############################################################################\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#\n\n# Build steps\n\n#\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "############################################################################\n\n############################################################################\n\n############################################################################\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "toolchain/cmake/Packaging/EmscriptenBuild.cmake" : {
      "ObjectId" : "1b9e883dc9ae5de3750deeacdb0bf1c40755d042",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Packaging/GamecubeBuild.cmake" : {
      "ObjectId" : "438223ff88d721ad53c91ada455b6b5a6841a1af",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Packaging/LinuxAppImageBuild.cmake" : {
      "ObjectId" : "42d38be2e6e45c795c81e69c4144d804c543692d",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some prerequisites\n\n# TITLE here is used as the name of the final AppImage as well as the desktop entry's name\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Icon file to be used for the AppImage, only one in this case, preferrably SVG\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We define a way to reference this icon based on where it is located\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# This helps the window manager to recognize the program even if it has no embedded or loaded icon\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Sets the launch variable in .desktop entry\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This directory is used for temporary files, might get messy\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Where the AppDir is generated\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Remove the previous AppImage file to avoid confusion when generating a new one\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Create some necessary directory structure in AppDir\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Copy and configure some data for the AppDir\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Copy resources into AppDir\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Copy bundled libraries into AppDir\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Copy the binary to AppDir\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Do the actual packaging\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# First create squashfs\n",
        "Line" : 177,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Concatenate AppImage runtime with image\n",
        "Line" : 181,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Make image executable\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 17
    },
    "toolchain/cmake/Packaging/LinuxFlatpakBuild.cmake" : {
      "ObjectId" : "dd5a84c3741bd68ce5bc6246266431b3c21591e7",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Unify this with the in-app information somehow\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Create directory structures\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Configure metadata file\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Copy resources into flatpak\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Copy bundled libraries into flatpak\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Finally, copy binary into flatpak\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add arrangement to install flatpak structure somewhere else\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#    install (\n\n#        DIRECTORY\n\n#        \"${FLATPAK_BASE_DIR}\"\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#        DESTINATION\n\n#\t\"${CMAKE_PACKAGED_OUTPUT_PREFIX}/linux-flatpak\"\n\n#        )\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "toolchain/cmake/Packaging/LinuxSnappyBuild.cmake" : {
      "ObjectId" : "463cbfaf5c8a7a2e45583fb6e39f0071de002d9f",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#        \"system-observe\"\n\n#        \"hardware-observe\"\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#        \"network\"\n\n#        \"network-observe\"\n\n#        \"network-bind\"\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#        \"opengl\"\n\n#        \"x11\"\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#        \"pulseaudio\"\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Snapcraft does not like it if we have non-unique elements in the list, we therefore verify this\n",
        "Line" : 45,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# SDL2 needs to create a Unix socket, therefore we need this\n",
        "Line" : 47,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# Retrieve Snappy permissions list\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "toolchain/cmake/Packaging/MacAppBuild.cmake" : {
      "ObjectId" : "9a005b41fe8c3c59aeed0b99b091953c2947143b",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Process resource files\n\n# TODO: Process header files\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#    install(\n\n#        TARGETS \"${TARGET}\"\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#        EXPORT ${PROJECT_NAME}\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#        LIBRARY DESTINATION lib\n\n#        ARCHIVE DESTINATION lib\n\n#        FRAMEWORK DESTINATION frameworks\n\n#        PUBLIC_HEADER DESTINATION include\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#        COMPONENT bin\n\n#        )\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# iOS stores resources at the bottom level\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# For installing the icon in the bundle\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Extracted in order to be inserted into Info.plist\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# An exhaustive list of all the resources that will be bundled\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Installing frameworks\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#XCODE_PRODUCT_TYPE \"com.apple.product-type.application\"\n",
        "Line" : 155,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Lots of properties!\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "toolchain/cmake/Packaging/PermissionList.cmake" : {
      "ObjectId" : "d6d23439780874a6f3fba70213bf592a153136b5",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Packaging/WindowsImageBuild.cmake" : {
      "ObjectId" : "bf23064371f9db9019335ccf4e5968cbce99ee51",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate necessary binary files\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# We describe resources in a .rc file for in-memory access\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Clear resource descriptor to avoid dupes\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Clear resource header\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# First, get a relative filename\n\n# This is used to describe structure\n",
        "Line" : 77,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# We get a lower-case version to compare with other filenames\n",
        "Line" : 82,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# On Win32, package it into the .exe file\n",
        "Line" : 87,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "# If there is a directory path, append a \"_\" for\n\n#  it to be correct\n\n# This is disgusting.\n",
        "Line" : 89,
        "CharPositionInLine" : 20
      },
      "8" : {
        "Text" : "# Set virtual filename\n",
        "Line" : 95,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# Insert the file with directory path and filename\n\n#  into the .rc file\n",
        "Line" : 100,
        "CharPositionInLine" : 20
      },
      "10" : {
        "Text" : "# Increment resource number, inserted into .rc file\n",
        "Line" : 110,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# We add an application manifest to get on the good side\n\n#  with Windows 8.1+\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Finally we stir the smelly gak into PE\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#        ${SDL2_MAIN_C_FILE}\n\n#        ${SOURCES}\n\n#        ${WINDOWS_BASE_RESOURCE}\n\n#        ${RESOURCE_DESCRIPTOR}\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#${RESOURCE_HEADER}\n",
        "Line" : 177,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "#        ${MANIFEST_FILE}\n\n#        ${INCLUDED_LIBS}\n\n#        ${RESOURCE_FILES}\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# I need these seeds for mye research, Morty, gotta stuff\n\n#  it waaay up there, Morty.\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#set_target_properties ( ${TARGET}\n\n#\tPROPERTIES\n\n#\tRESOURCE \"${SDL2_LIBRARY_BIN};${ANGLE_LIBRARIES_BIN}\"\n\n#\t)\n",
        "Line" : 203,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# First, get a relative filename\n\n# This is used to describe structure\n",
        "Line" : 247,
        "CharPositionInLine" : 16
      },
      "19" : {
        "Text" : "# We get a lower-case version to compare\n\n#  with other filenames\n",
        "Line" : 252,
        "CharPositionInLine" : 16
      },
      "20" : {
        "Text" : "# On UWP, mark it as a .appx content file\n",
        "Line" : 261,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 21
    },
    "toolchain/cmake/Preload/baseline.cmake" : {
      "ObjectId" : "aa213249a1dec47cf01ba857f583ab2d46d9a09f",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/docs-all.cmake" : {
      "ObjectId" : "7c8d311cc42fc2f24dba4ee9abd78a14a7a8f815",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/gamecube.cmake" : {
      "ObjectId" : "af371234d67fc83a2f5d497e727bde479547f650",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/js-emscripten-wasm.cmake" : {
      "ObjectId" : "2d0a12963ab57fc43b60468c567db9f6ab91eadd",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/js-emscripten.cmake" : {
      "ObjectId" : "8ebbb633830db83b2a135572a85f91b19f71bf39",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-coverage.cmake" : {
      "ObjectId" : "2988ee52e10ac4819c0079b6a2711d6af29360b9",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-fedora.cmake" : {
      "ObjectId" : "e7d4cce5722d1d854607aa18ef0007900dd95921",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-generic.cmake" : {
      "ObjectId" : "00e6d7fb3a120884d19e61a189ed97b48652d78c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-gles.cmake" : {
      "ObjectId" : "a29f08afaa493924569c36fa26a35c4c4cdf60a8",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-gles20.cmake" : {
      "ObjectId" : "4928cab0b3404f31883a7aaebe7019346ba23bd4",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-maemo.cmake" : {
      "ObjectId" : "2c069fffa2d15c1df7ddb41ea9f402b1ed6cbb98",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-raspberry.cmake" : {
      "ObjectId" : "0d45d8630709f6679b1b63db7b24319ad98a102e",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-steam.cmake" : {
      "ObjectId" : "00e6d7fb3a120884d19e61a189ed97b48652d78c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-valgrind.cmake" : {
      "ObjectId" : "0da5264a72bee4e7f1d67e69ad7083a573929a01",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/linux-vr.cmake" : {
      "ObjectId" : "83b257e4ab046aa8941485797215bcf3ef66e387",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/nothing.cmake" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/osx-generic.cmake" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/osx-ios.cmake" : {
      "ObjectId" : "d1faae985366f17f0b5be3285c9536607d01ef7c",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/windows-angle.cmake" : {
      "ObjectId" : "953eab448c5283d4da00313bdefd2ffb32b5a1c6",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/windows-generic.cmake" : {
      "ObjectId" : "242ec835e228ce923aa5438f0165676b009bd567",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/windows-mingw64.cmake" : {
      "ObjectId" : "5be2fb80b806ca431cb7744ef7c8ba7c1ef642f3",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Preload/windows-uwp.cmake" : {
      "ObjectId" : "42e64294c5d5db7fdc3d24b942410988cae43aa0",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/all-android.toolchain.cmake" : {
      "ObjectId" : "09870bdd123dbfd531e9a84f069c2f6f953987d1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2016 The Android Open Source Project\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#      http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configurable variables.\n\n# Modeled after the ndk-build system.\n\n# For any variables defined in:\n\n#         https://developer.android.com/ndk/guides/android_mk.html\n\n#         https://developer.android.com/ndk/guides/application_mk.html\n\n# if it makes sense for CMake, then replace LOCAL, APP, or NDK with ANDROID, and\n\n# we have that variable below.\n\n# The exception is ANDROID_TOOLCHAIN vs NDK_TOOLCHAIN_VERSION.\n\n# Since we only have one version of each gcc and clang, specifying a version\n\n# doesn't make much sense.\n\n#\n\n# ANDROID_TOOLCHAIN\n\n# ANDROID_ABI\n\n# ANDROID_PLATFORM\n\n# ANDROID_STL\n\n# ANDROID_PIE\n\n# ANDROID_CPP_FEATURES\n\n# ANDROID_ALLOW_UNDEFINED_SYMBOLS\n\n# ANDROID_ARM_MODE\n\n# ANDROID_ARM_NEON\n\n# ANDROID_DISABLE_NO_EXECUTE\n\n# ANDROID_DISABLE_RELRO\n\n# ANDROID_DISABLE_FORMAT_STRING_CHECKS\n\n# ANDROID_CCACHE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Inhibit all of CMake's own NDK handling code.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake invokes the toolchain file twice during the first build, but only once\n\n# during subsequent rebuilds. This was causing the various flags to be added\n\n# twice on the first build, and on a rebuild ninja would see only one set of the\n\n# flags and rebuild the world.\n\n# https://github.com/android-ndk/ndk/issues/323\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Android NDK\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Allow the user to specify their own NDK path, but emit a warning. This is an\n\n# uncommon use case, but helpful if users want to use a bleeding edge\n\n# toolchain file with a stable NDK.\n\n# https://github.com/android-ndk/ndk/issues/473\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Android NDK revision\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Touch toolchain variable to suppress \"unused variable\" warning.\n\n# This happens if CMake is invoked with the same command line the second time.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compatibility for configurable variables.\n\n# Compatible with configurable variables from the other toolchain file:\n\n#         https://github.com/taka-no-me/android-cmake\n\n# TODO: We should consider dropping compatibility to simplify things once most\n\n# of our users have migrated to our standard set of configurable variables.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Default values for configurable variables.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Export configurable variables for the try_compile() command.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Standard cross-compiling stuff.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Allow users to override these values in case they want more strict behaviors.\n\n# For example, they may want to prevent the NDK's libz from being picked up so\n\n# they can use their own.\n\n# https://github.com/android-ndk/ndk/issues/517\n\n#if(NOT CMAKE_FIND_ROOT_PATH_MODE_PROGRAM)\n\n#  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n\n#endif()\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ABI.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Don't re-export libgcc symbols in every binary.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# STL.\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Behavior of CMAKE_SYSTEM_LIBRARY_PATH and CMAKE_LIBRARY_PATH are really weird\n\n# when CMAKE_SYSROOT is set. The library path is appended to the sysroot even if\n\n# the library path is an abspath. Using a relative path from the sysroot doesn't\n\n# work either, because the relative path is abspath'd relative to the current\n\n# CMakeLists.txt file before being appended :(\n\n#\n\n# We can try to get out of this problem by providing another root path for cmake\n\n# to check. CMAKE_FIND_ROOT_PATH is intended for this purpose:\n\n# https://cmake.org/cmake/help/v3.8/variable/CMAKE_FIND_ROOT_PATH.html\n\n#\n\n# In theory this should just be our sysroot, but since we don't have a single\n\n# sysroot that is correct (there's only one set of headers, but multiple\n\n# locations for libraries that need to be handled differently).  Some day we'll\n\n# want to move all the libraries into ${ANDROID_NDK}/sysroot, but we'll need to\n\n# make some fixes to Clang, various build systems, and possibly CMake itself to\n\n# get that working.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Sysroot.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# CMake 3.9 tries to use CMAKE_SYSROOT_COMPILE before it gets set from\n\n# CMAKE_SYSROOT, which leads to using the system's /usr/include. Set this\n\n# manually.\n\n# https://github.com/android-ndk/ndk/issues/467\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# The compiler driver doesn't check any arch specific include locations (though\n\n# maybe we should add that). Architecture specific headers like asm/ and\n\n# machine/ are installed to an arch-$ARCH subdirectory of the sysroot.\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# We need different sysroots for linking and compiling, but cmake doesn't\n\n# support that. Pass the sysroot flag manually when linking.\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# find_library searches a handful of paths as described by\n\n# https://cmake.org/cmake/help/v3.6/command/find_library.html.  Since libraries\n\n# are per-API level and headers aren't, We don't have libraries in the\n\n# CMAKE_SYSROOT. Set up CMAKE_SYSTEM_LIBRARY_PATH\n\n# (https://cmake.org/cmake/help/v3.6/variable/CMAKE_SYSTEM_LIBRARY_PATH.html)\n\n# instead.\n\n#\n\n# NB: The suffix is just lib here instead of dealing with lib64 because\n\n# apparently CMake does some automatic rewriting of that? I've been testing by\n\n# building my own CMake with a bunch of logging added, and that seems to be the\n\n# case.\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Toolchain.\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Clang can fail to compile if CMake doesn't correctly supply the target and\n\n# external toolchain, but to do so, CMake needs to already know that the\n\n# compiler is clang. Tell CMake that the compiler is really clang, but don't\n\n# use CMakeForceCompiler, since we still want compile checks. We only want\n\n# to skip the compiler ID detection step.\n",
        "Line" : 406,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Generic flags.\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Debug and release flags.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Toolchain and ABI specific flags.\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Disable integrated-as for better compatibility.\n",
        "Line" : 494,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Help clang use mips64el multilib GCC\n",
        "Line" : 499,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# http://b.android.com/222239\n\n# http://b.android.com/220159 (internal http://b/31809417)\n\n# x86 devices have stack alignment issues.\n",
        "Line" : 504,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# STL specific flags.\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Add the libc++ lib directory to the path so the linker scripts can pick up\n\n# the extra libraries.\n",
        "Line" : 538,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Configuration specific flags.\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# CMake automatically forwards all compiler flags to the linker,\n\n# and clang doesn't like having -Wa flags being used for linking.\n\n# To prevent CMake from doing this would require meddling with\n\n# the CMAKE_<LANG>_COMPILE_OBJECT rules, which would get quite messy.\n",
        "Line" : 613,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Convert these lists into strings.\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Set or retrieve the cached flags.\n\n# This is necessary in case the user sets/changes flags in subsequent\n\n# configures. If we included the Android flags in here, they would get\n\n# overwritten.\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Compatibility for read-only variables.\n\n# Read-only variables for compatibility with the other toolchain file.\n\n# We'll keep these around for the existing projects that still use them.\n\n# TODO: All of the variables here have equivalents in our standard set of\n\n# configurable variables, so we can remove these once most of our users migrate\n\n# to those variables.\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# CMake 3.7+ compatibility.\n",
        "Line" : 766,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "toolchain/cmake/Toolchains/all-ios.toolchain.cmake" : {
      "ObjectId" : "fe02cc7a30e4643106ed71a4ea67fec7b6247002",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR or SIMULATOR64\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Standard settings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Required as of cmake 2.8.10\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force the compilers to gcc for iOS\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Setup building for arm64 or not\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Setup iOS developer location unless specified manually with CMAKE_IOS_DEVELOPER_ROOT\n\n# Note Xcode 4.3 changed the installation location, choose the most recent one available\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# set the architecture for iOS\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This little macro lets you set any XCode specific property\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Added by H. Birch Tree\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#add_definitions (-fvisibility=hidden)\n\n#set ( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\" )\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "toolchain/cmake/Toolchains/cxx11.toolchain.cmake" : {
      "ObjectId" : "b83504d971d91aabfb92e49e5a756d5792c2b5e1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/js-emscripten.toolchain.cmake" : {
      "ObjectId" : "1e5b59e3d1c1361763cacecfc2cc997db2a5303d",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is a 'toolchain description file' for CMake.\n\n# It teaches CMake about the Emscripten compiler, so that CMake can generate makefiles\n\n# from CMakeLists.txt that invoke emcc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Since updating to LLVM 3.9, its build system requires CMake 3.4.3 or newer, so use this as a\n\n# baseline requirement for Emscripten toolchain as well, as developers will have this version or\n\n# they would have been unable to build LLVM in the first place.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To use this toolchain file with CMake, invoke CMake with the following command line parameters\n\n# cmake -DCMAKE_TOOLCHAIN_FILE=<EmscriptenRoot>/cmake/Modules/Platform/Emscripten.cmake\n\n#       -DCMAKE_BUILD_TYPE=<Debug|RelWithDebInfo|Release|MinSizeRel>\n\n#       -G \"Unix Makefiles\" (Linux and OSX)\n\n#       -G \"MinGW Makefiles\" (Windows)\n\n#       <path/to/CMakeLists.txt> # Note, pass in here ONLY the path to the file, not the filename 'CMakeLists.txt' itself.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# After that, build the generated Makefile with the command 'make'. On Windows, you may download and use 'mingw32-make' instead.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The following variable describes the target OS we are building to.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Advertise Emscripten as a 32-bit platform (as opposed to CMAKE_SYSTEM_PROCESSOR=x86_64 for 64-bit platform),\n\n# since some projects (e.g. OpenCV) use this to detect bitness.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Tell CMake how it should instruct the compiler to generate multiple versions of an outputted .so library: e.g. \"libfoo.so, libfoo.so.1, libfoo.so.1.4\" etc.\n\n# This feature is activated if a shared library project has the property SOVERSION defined.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In CMake, CMAKE_HOST_WIN32 is set when we are cross-compiling from Win32 to Emscripten: http://www.cmake.org/cmake/help/v2.8.12/cmake.html#variable:CMAKE_HOST_WIN32\n\n# The variable WIN32 is set only when the target arch that will run the code will be WIN32, so unset WIN32 when cross-compiling.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The same logic as above applies for APPLE and CMAKE_HOST_APPLE, so unset APPLE.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# And for UNIX and CMAKE_HOST_UNIX. However, Emscripten is often able to mimic being a Linux/Unix system, in which case a lot of existing CMakeLists.txt files can be configured for Emscripten while assuming UNIX build, so this is left enabled.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Do a no-op access on the CMAKE_TOOLCHAIN_FILE variable so that CMake will not issue a warning on it being unused.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# In order for check_function_exists() detection to work, we must signal it to pass an additional flag, which causes the compilation\n\n# to abort if linking results in any undefined symbols. The CMake detection mechanism depends on the undefined symbol error to be raised.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Locate where the Emscripten compiler resides in relative to this toolchain file.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If not found by above search, locate using the EMSCRIPTEN environment variable.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Abort if not found. \n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Normalize, convert Windows backslashes to forward slashes or CMake will crash.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Specify the compilers to use for C and C++\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Don't allow CMake to autodetect the compiler, since it does not understand Emscripten.\n\n# Pass -DEMSCRIPTEN_FORCE_COMPILERS=OFF to disable (sensible mostly only for testing/debugging purposes).\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Detect version of the 'emcc' executable. Note that for CMake, we tell it the version of the Clang compiler and not the version of Emscripten,\n\n# because CMake understands Clang better.\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# Toolchain script is interpreted multiple times, so don't rerun the check if already done before.\n",
        "Line" : 145,
        "CharPositionInLine" : 35
      },
      "20" : {
        "Text" : "# To find programs to execute during CMake run time with find_program(), e.g. 'git' or so, we allow looking\n\n# into system paths.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Since Emscripten is a cross-compiler, we should never look at the system-provided directories like /usr/include and so on.\n\n# Therefore only CMAKE_FIND_ROOT_PATH should be used as a find directory. See http://www.cmake.org/cmake/help/v3.0/variable/CMAKE_FIND_ROOT_PATH_MODE_INCLUDE.html\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# We would prefer to specify a standard set of Clang+Emscripten-friendly common convention for suffix files, especially for CMake executable files,\n\n# but if these are adjusted, ${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake will fail, since it depends on being able to compile output files with predefined names.\n\n#SET(CMAKE_LINK_LIBRARY_SUFFIX \"\")\n\n#SET(CMAKE_STATIC_LIBRARY_PREFIX \"\")\n\n#SET(CMAKE_SHARED_LIBRARY_PREFIX \"\")\n\n#SET(CMAKE_FIND_LIBRARY_PREFIXES \"\")\n\n#SET(CMAKE_FIND_LIBRARY_SUFFIXES \".bc\")\n\n#SET(CMAKE_SHARED_LIBRARY_SUFFIX \".bc\")\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Specify the program to use when building static libraries. Horse Emscripten-related command line options to clang.\n",
        "Line" : 219,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Set a global EMSCRIPTEN variable that can be used in client CMakeLists.txt to detect when building using Emscripten.\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Hardwire support for cmake-2.8/Modules/CMakeBackwardsCompatibilityC.cmake without having CMake to try complex things\n\n# to autodetect these:\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# A global counter to guarantee unique names for js library files.\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Internal function: Do not call from user CMakeLists.txt files. Use one of em_link_js_library()/em_link_pre_js()/em_link_post_js() instead.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# User can input list of JS files either as a single list, or as variable arguments to this function, so iterate over varargs, and treat each\n\n# item in varargs as a list itself, to support both syntax forms.\n",
        "Line" : 288,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# If the user edits the JS file, we want to relink the emscripten application, but unfortunately it is not possible to make a link step\n\n# depend directly on a source file. Instead, we must make a dummy no-op build target on that source file, and make the project depend on\n\n# that target.\n",
        "Line" : 292,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# Sanitate the source .js filename to a good symbol name to use as a dummy filename.\n",
        "Line" : 296,
        "CharPositionInLine" : 3
      },
      "31" : {
        "Text" : "# Create a new static library target that with a single dummy .c file.\n",
        "Line" : 302,
        "CharPositionInLine" : 3
      },
      "32" : {
        "Text" : "# Make the dummy .c file depend on the .js file we are linking, so that if the .js file is edited, the dummy .c file, and hence the static library will be avenge (no-op). This causes the main application to be relinked, which is what we want.\n\n# This approach was recommended by http://www.cmake.org/pipermail/cmake/2010-May/037206.html\n",
        "Line" : 304,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# Link the js-library to the target\n\n# When a linked library starts with a \"-\" cmake will just add it to the linker command line as it is.\n\n# The advantage of doing it this way is that the js-library will also be automatically linked to targets\n\n# that depend on this target.\n",
        "Line" : 309,
        "CharPositionInLine" : 3
      },
      "34" : {
        "Text" : "# This function links a (list of ) .js library file(s) to the given CMake project.\n\n# Example: em_link_js_library(my_executable \"lib1.js\" \"lib2.js\")\n\n#    will result in emcc passing --js-library lib1.js --js-library lib2.js to the emscripten linker, as well as\n\n#    tracking the modification timestamp between the linked .js files and the main project, so that editing the .js file\n\n#    will cause the target project to be relinked.\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# This function is identical to em_link_js_library(), except the .js files will be added with '--pre-js file.js' command line flag,\n\n# which is generally used to add some preamble .js code to a generated output file.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# This function is identical to em_link_js_library(), except the .js files will be added with '--post-js file.js' command line flag,\n\n# which is generally used to add some postamble .js code to a generated output file.\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Experimental support for targeting generation of Visual Studio project files (vs-tool) of Emscripten projects for Windows.\n\n# To use this, pass the combination -G \"Visual Studio 10\" -DCMAKE_TOOLCHAIN_FILE=Emscripten.cmake\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# By default, CMake generates VS project files with a <GenerateManifest>true</GenerateManifest> directive.\n\n# This causes VS to attempt to invoke rc.exe during the build, which will fail since app manifests are meaningless for Emscripten.\n\n# To disable this, add the following linker flag. This flag will not go to emcc, since the Visual Studio CMake generator will swallow it.\n",
        "Line" : 345,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# CMake is hardcoded to write a ClCompile directive <ObjectFileName>$(IntDir)</ObjectFileName> in all VS project files it generates.\n\n# This makes VS pass emcc a -o param that points to a directory instead of a file, which causes emcc autogenerate the output filename.\n\n# CMake is hardcoded to assume all object files have the suffix .obj, so adjust the emcc-autogenerated default suffix name to match.\n",
        "Line" : 349,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Also hint CMake that it should not hardcode <ObjectFileName> generation. Requires a custom CMake build for this to work (ignored on others)\n\n# See http://www.cmake.org/Bug/view.php?id=14673 and https://github.com/juj/CMake\n",
        "Line" : 353,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# Apply and cache Emscripten Visual Studio IDE-specific linker flags.\n",
        "Line" : 357,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# No-op on CMAKE_CROSSCOMPILING_EMULATOR so older versions of cmake do not\n\n# complain about unused CMake variable.\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 43
    },
    "toolchain/cmake/Toolchains/linux-asan_linux.toolchain.cmake" : {
      "ObjectId" : "aaff5ac19eed6c84fb11df24db19204dd4aceac6",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/linux-generic-i686_linux.toolchain.cmake" : {
      "ObjectId" : "3e62b4b0b83aaa6a7617efd6124ace994b738457",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This toolchain is used for cross-compiling 32-bit on 64-bit systems\n\n# This is not used for native compiling!\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/cmake/Toolchains/linux-generic_linux.toolchain.cmake" : {
      "ObjectId" : "d1a5cdffc2f7a38d154bc841553c006385d75843",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/linux-maemo-armv7-clang_linux.toolchain.cmake" : {
      "ObjectId" : "752dfb4f24a990e0842c2298dbbe328d57f07b2e",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set ( CMAKE_SYSROOT /usr/${TOOLCHAIN_PREFIX} )\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set ( GCC_ROOT \"${CMAKE_SYSROOT}/opt/gcc-6.1\" )'\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    -D__linux__\n\n#    -D__unix__\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#    c\n\n#    rt\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    atomic\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    /usr/arm-linux-gnueabi/include/c++/5/arm-linux-gnueabi/\n\n#    /usr/arm-linux-gnueabi/include/c++/5/\n\n#    /usr/arm-linux-gnueabi/include\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "toolchain/cmake/Toolchains/linux-maemo-armv7_linux.toolchain.cmake" : {
      "ObjectId" : "9eec636c24a5aff42bcd706756426d7ac34b1291",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/linux-powerpc.toolchain.cmake" : {
      "ObjectId" : "d8467d79fed459a23bab555ab922cf7d207caf74",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/linux-raspberry-aarch64_linux.toolchain.cmake" : {
      "ObjectId" : "1f34656bef1d664af156888191d034b4b1e39a43",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/linux-raspberry-armhf_linux.toolchain.cmake" : {
      "ObjectId" : "43e304152c94464b57f4b06635f298b8a4bded84",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/none-cube-powerpc-eabi_linux.toolchain.cmake" : {
      "ObjectId" : "d490362ee655a97e34613bde951a9a3638ce56c5",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/osx-generic_osx.toolchain.cmake" : {
      "ObjectId" : "fc5d837618e0a50ee28dc58d8a5bc5bdb94eaae7",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set ( CLANG_PATH \"/usr/local/opt/llvm@3.8\" )\n\n#set ( CMAKE_C_COMPILER ${CLANG_PATH}/bin/clang-3.8  )\n\n#set ( CMAKE_CXX_COMPILER ${CLANG_PATH}/bin/clang++-3.8 )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include_directories ( \"${CLANG_PATH}/lib/llvm-3.8/include/c++/v1\" )\n\n#link_directories(\"${CLANG_PATH}/lib/llvm-3.8/lib\")\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set ( CMAKE_C_COMPILER \"$ENV{CC}\"  )\n\n#set ( CMAKE_CXX_COMPILER \"$ENV{CXX}\" )\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Forcing use of C++11 (or later) libc++\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "toolchain/cmake/Toolchains/windows-mingw64_linux.toolchain.cmake" : {
      "ObjectId" : "290f08f58aea30a374c50c3d882adaca334906c5",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/cmake/Toolchains/windows-uwp_windows.toolchain.cmake" : {
      "ObjectId" : "8fa131930d4d5b407b8269f240fb53c89ccfa7e9",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For Windows, we disable most annoying warnings to save compilation time. (damn it, Microsoft...)\n\n# These include system headers (which are constantly giving off warnings)\n\n#  as well as small warnings for padding and etc.\n\n# Microsoft makes the worst headers of them all.\n\n# We also set a target Windows NT version for some reason\n\n# Vista is long gone, so 7 (0x0601) is a good target\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Windows UWP actually requires >= 0x0602, aka. Windows 8. We'll go for Windows 10, because UWP only runs on Windows 10\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# We add this flag to help us a bit, a lot easier\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# We allow pure C string functions. Fuck, Microsoft.\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "toolchain/cmake/Toolchains/windows-win32_windows.toolchain.cmake" : {
      "ObjectId" : "69fc0d2b6d9987a26f3d052d28da7696a19608b1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For Windows, we disable most annoying warnings to save compilation time. (damn it, Microsoft...)\n\n# These include system headers (which are constantly giving off warnings)\n\n#  as well as small warnings for padding and etc.\n\n# Microsoft makes the worst headers of them all.\n\n# We also set a target Windows NT version for some reason\n\n# Vista is long gone, so 7 (0x0601) is a good target\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolchain/docs-gen/CMakeLists.txt" : {
      "ObjectId" : "84a5974866aae53574a30378b46707548664f63a",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add target\n",
        "Line" : 16,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 1
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "9456172fac2431fe9f6af43edc775abdd06c731b",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/code-tools/clang-gen/CMakeLists.txt" : {
      "ObjectId" : "eba27540e75831f00452376b04ebf6bd56e64389",
      "LastModified" : "2018-04-18T22:37:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/data-management/blam-data-viewer/CMakeLists.txt" : {
      "ObjectId" : "200eea08b607d6545064868655a7cceb06f665a3",
      "LastModified" : "2018-04-18T22:37:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/data-management/pressure-cooker/CMakeLists.txt" : {
      "ObjectId" : "9baf09cb21e8ffcebc1fcd042c3216b047af47c1",
      "LastModified" : "2018-12-27T21:00:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Etc2Comp's project files are a mess. Let's not.\n",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 190
  },
  "ElapsedTime" : 3862
}