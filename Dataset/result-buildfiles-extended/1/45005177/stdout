{
  "Repository" : "45005177",
  "Revision" : "HEAD",
  "ObjectId" : "7100e47e308b597d4d508f699f2832d54423089b",
  "CommitTime" : "2019-03-21T13:44:54Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ff6d0096a9ed09aaa1f1ced769e26edc5fe53204",
      "LastModified" : "2019-03-18T20:32:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########### ########### ########### ########### ########### ########### ###########\n\n# User-configurable options.\n\n########### ########### ########### ########### ########### ########### ###########\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --- Paths to dependencies ---\n\n#\n\n# NOTE: Use 'ccmake' within build folder to set them, or set at the\n\n#       command like with: $ cmake -DEVPath_DIR=... rather than modifying\n\n#       this file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --- Inter-daemon communication method ---\n\n#\n\n# NOTE: Only ONE may be set to ON at a time.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --- Other SOS options ---\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# --- Advanced options ---\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########### ########### ########### ########### ########### ########### ###########\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########\n\n# Set some general project CMake settings\n\n###########\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#set(RULE_MESSAGES OFF)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Pull in macros\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Pull in the GIT repo information\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Set some host information\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set general Compiler flags\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#if(MAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.7)\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#else()\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++0x\")\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#endif()\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "###########\n\n# SOS_FORCE_RPATH OPTIONS\n\n###########\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 183,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "###########\n\n# Required packages\n\n###########\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "###########\n\n# SOS_CLOUD_SYNC OPTIONS - validate the selected configuration\n\n###########\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Verify that only one sync method has been enabled:\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Verify that the correct defines will propagate through the code:\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###########\n\n# SOS_CLOUD_SYNC_WITH_EVPATH OPTIONS\n\n###########\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "###########\n\n# SOS_CLOUD_SYNC_WITH_EVPATH OPTIONS\n\n###########\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Build the ADIOS examples?\n\n#find_package(ADIOS)\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "###########\n\n# SOS_CLOUD_SYNC_WITH_MPI OPTIONS\n\n###########\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "###########\n\n# SOS_CLOUD_SYNC_WITH_SOCKET OPTIONS\n\n###########\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###########\n\n# SOS_CLOUD_SYNC_WITH_ZEROMQ OPTIONS\n\n###########\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "###########\n\n# SOS_SECURE_WITH_MUNGE OPTIONS\n\n###########\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "###########\n\n# SOS_ENABLE_PYTHON OPTIONS\n\n###########\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "###########\n\n# Enable threading\n\n###########\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# set everything up to use -pthread\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Actually, required, but on Titan it will fail. \n\n# Therefore, we have the \"else\" clause for that system.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "###########\n\n# Special cases handled here\n\n###########\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# check for Cray static linking\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Set this later for the targets\n\n# set(LIBS \"${LIBS} ${DYNAMICLIB} ${MATHLIB}\")\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "###########\n\n# Other boilerplate CMake stuff\n\n###########\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# remove leading, trailing spaces from libraries\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "cmake/FindADIOS.cmake" : {
      "ObjectId" : "972a2551cf48160f2205ca3549db29e9fd65ba1a",
      "LastModified" : "2018-02-28T01:49:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find ADIOS\n\n# ~~~~~~~~~~~~\n\n# Copyright (c) 2017, Kevin Huck <khuck at cs.uoregon.edu>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# CMake module to search for ADIOS library\n\n#\n\n# If it's found it sets ADIOS_FOUND to TRUE\n\n# and following variables are set:\n\n#    ADIOS_INCLUDE_DIR\n\n#    ADIOS_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# First, look in only one variable, ADIOS_DIR.  This script will accept any of:\n\n# EVPATH_DIR, EVPATH_ROOT, ADIOS_DIR, ADIOS_ROOT, or environment variables\n\n# using the same set of names.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# First, see if the adios_config program is in our path.  \n\n# If so, use it.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIND_PATH and FIND_LIBRARY normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing. \n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/FindCZMQ.cmake" : {
      "ObjectId" : "90bb1f36b5ee84aa0411d5c2817948f33e285b40",
      "LastModified" : "2018-07-06T22:27:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find CZMQ Headers/Libs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Variables\n\n# CZMQ_DIR - set this to a location where ZeroMQ may be found\n\n#\n\n# CZMQ_FOUND        - True if CZMQ found\n\n# CZMQ_INCLUDE_DIR  - Location of CZMQ includes\n\n# CZMQ_LIBRARIES    - CZMQ libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindEVPath.cmake" : {
      "ObjectId" : "462507343f83cf1f09dfde9217a389800528237c",
      "LastModified" : "2018-07-06T22:27:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find EVPath\n\n# ~~~~~~~~~~~~\n\n# Copyright (c) 2017, Kevin Huck <khuck at cs.uoregon.edu>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# CMake module to search for EVPath library\n\n#\n\n# If it's found it sets EVPath_FOUND to TRUE\n\n# and following variables are set:\n\n#    EVPath_INCLUDE_DIR\n\n#    EVPath_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# First, look in only one variable, EVPath_DIR.  This script will accept any of:\n\n# EVPATH_DIR, EVPATH_ROOT, EVPath_DIR, EVPath_ROOT, or environment variables\n\n# using the same set of names.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# All upper case options\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Mixed case options\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# First, see if the evpath_config program is in our path.  \n\n# If so, use it.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# could be needed on some platforms\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FIND_PATH and FIND_LIBRARY normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing. \n",
        "Line" : 133,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "cmake/FindMunge.cmake" : {
      "ObjectId" : "760d96bef10ef6edc44866c7ae8eadf2c8f4697b",
      "LastModified" : "2018-01-03T18:05:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Munge\n\n# ~~~~~~~~~~~~\n\n# Copyright (c) 2017, Kevin Huck <khuck at cs.uoregon.edu>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# CMake module to search for Munge library\n\n#\n\n# If it's found it sets Munge_FOUND to TRUE\n\n# and following variables are set:\n\n#    Munge_INCLUDE_DIR\n\n#    Munge_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# First, look in only one variable, Munge_DIR.  This script will accept any of:\n\n# MUNGE_DIR, MUNGE_ROOT, Munge_DIR, Munge_ROOT, or environment variables\n\n# using the same set of names.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# All upper case options\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Mixed case options\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# FIND_PATH and FIND_LIBRARY normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing. \n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindSOS.cmake" : {
      "ObjectId" : "fa1e2a803976c7ff81df1269d8b9282568d748f0",
      "LastModified" : "2017-01-05T23:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibSOS\n\n# Once done this will define\n\n#  SOS_FOUND - System has SOS\n\n#  SOS_INCLUDE_DIRS - The SOS include directories\n\n#  SOS_LIBRARIES - The libraries needed to use SOS\n\n#  SOS_DEFINITIONS - Compiler switches required for using SOS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SOS_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindSQLite3.cmake" : {
      "ObjectId" : "9f2ce54cdae107b1feec0c4b717da5f229f4c34e",
      "LastModified" : "2018-01-03T18:05:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Sqlite3\n\n# ~~~~~~~~~~~~\n\n# Copyright (c) 2007, Martin Dobias <wonder.sk at gmail.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# CMake module to search for Sqlite3 library\n\n#\n\n# If it's found it sets SQLite3_FOUND to TRUE\n\n# and following variables are set:\n\n#    SQLite3_INCLUDE_DIR\n\n#    SQLite3_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# All upper case options\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Mixed case options\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# FIND_PATH and FIND_LIBRARY normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing. \n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# try to use framework on mac\n\n# want clean framework path, not unix compatibility path\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#FIND_PATH(SQLite3_INCLUDE_DIR SQLite3/sqlite3.h)\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FIND_PATH doesn't add \"Headers\" for a framework\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# prefer libsqlite3.a over .so, if available\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/FindTAU.cmake" : {
      "ObjectId" : "79bd1ef9afcbfd40a80761e0865e6a9bc9b55332",
      "LastModified" : "2017-05-08T16:06:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibTAU\n\n# Once done this will define\n\n#  TAU_FOUND - System has TAU\n\n#  TAU_INCLUDE_DIRS - The TAU include directories\n\n#  TAU_LIBRARIES - The libraries needed to use TAU\n\n#  TAU_DEFINITIONS - Compiler switches required for using TAU\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This if statement is specific to TAU, and should not be copied into other\n\n# Find cmake scripts.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set(TAU_LIBRARIES ${TAU_LIBRARY})\n\n# get the full list of TAU libraries.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TAU_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindZeroMQ.cmake" : {
      "ObjectId" : "58a178e12a88639784d444f6337242ea2687db52",
      "LastModified" : "2018-07-06T22:27:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find ZeroMQ Headers/Libs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Variables\n\n# ZeroMQ_DIR - set this to a location where ZeroMQ may be found\n\n#\n\n# ZeroMQ_FOUND - True of ZeroMQ found\n\n# ZeroMQ_INCLUDE_DIR - Location of ZeroMQ includes\n\n# ZeroMQ_LIBRARIES - ZeroMQ libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We should provide version to find_package_handle_standard_args in the same format as it was requested,\n\n# otherwise it can't check whether version matches exactly.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# User has requested ZeroMQ version without patch part => user is not interested in specific patch =>\n\n# any patch should be an exact match.\n",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# On Windows we have to use corresponding version (i.e. Release or Debug) of ZeroMQ because of `errno` CRT global variable\n\n# See more at http://www.drdobbs.com/avoiding-the-visual-c-runtime-library/184416623\n",
        "Line" : 71,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "8ab03bc5f0b766462e05edb6afbe9c20e8115b46",
      "LastModified" : "2017-05-22T22:26:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n#  git_local_changes(<var>)\n\n#\n\n# Returns either \"CLEAN\" or \"DIRTY\" with respect to uncommitted changes.\n\n# Uses the return code of \"git diff-index --quiet HEAD --\".\n\n# Does not regard untracked files.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 51,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 55,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 111,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/PreventInSourceBuilds.cmake" : {
      "ObjectId" : "fcb178dd319884be975113053739851ad242c353",
      "LastModified" : "2018-03-01T00:33:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This function will prevent in-source builds\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure the user doesn't play dirty with symlinks\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# disallow in-source builds\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/SOSProjectMacros.cmake" : {
      "ObjectId" : "43f590e81410607ebca4469a7628f51d90542e5e",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro for supporting C99 for all versions of CMake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/Makefile" : {
      "ObjectId" : "5fca85537b8e9870cd467ee9da5f1e1e80196959",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "37f604c12070874307cc468e05a5b64acd7ea65f",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_C_FLAGS \"-std=gnu99 -O3 -g -pedantic -Wall -Werror -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-function -Wno-maybe-uninitialized\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MPI\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PTHREADS\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# SOS\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${sos_flow_examples_BINARY_DIR}/bin\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/general/CMakeLists.txt" : {
      "ObjectId" : "4a69c6ffbe874a1babde0748477efd9f1e78c7e2",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TAU is NOT required.\n\n#if (DEFINED TAU_ROOT AND USE_TAU)\n\n#    find_package(TAU)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set (CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${TAU_LIBRARY_DIR})\n",
        "Line" : 12,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#endif()\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make sure the compiler can find include files from MPI\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add our executables\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link the executable to the correct libraries\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/lulesh/CMakeLists.txt" : {
      "ObjectId" : "1cd0ffc32e979a16e99c22e1f7bd3287da062627",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Copyright (c) 2015-2017, Lawrence Livermore National Security, LLC.\n\n# \n\n# Produced at the Lawrence Livermore National Laboratory\n\n# \n\n# LLNL-CODE-716457\n\n# \n\n# All rights reserved.\n\n# \n\n# This file is part of Alpine. \n\n# \n\n# For details, see: http://software.llnl.gov/alpine/.\n\n# \n\n# Please also read alpine/LICENSE\n\n# \n\n# Redistribution and use in source and binary forms, with or without \n\n# modification, are permitted provided that the following conditions are met:\n\n# \n\n# * Redistributions of source code must retain the above copyright notice, \n\n#   this list of conditions and the disclaimer below.\n\n# \n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the disclaimer (as noted below) in the\n\n#   documentation and/or other materials provided with the distribution.\n\n# \n\n# * Neither the name of the LLNS/LLNL nor the names of its contributors may\n\n#   be used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,\n\n# LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY\n\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL \n\n# DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \n\n# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n\n# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n\n# POSSIBILITY OF SUCH DAMAGE.\n\n# \n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/synthetic_1/CMakeLists.txt" : {
      "ObjectId" : "bccc18984fbb855a78479fa5cd6b939f1e9fb91e",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TAU is NOT required.\n\n#if (DEFINED TAU_ROOT AND USE_TAU)\n\n#    find_package(TAU)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set (CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${TAU_LIBRARY_DIR})\n",
        "Line" : 12,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#endif()\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make sure the compiler can find include files from MPI\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add our executables\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NOTE: This is commented out because FindADIOS.cmake it likely handling all of it now.\n\n#\n\n# Somewhat wonky, hopefully portable ADIOS stuff...\n\n#  ...should grab the right includes and libs that could be needed\n\n#     based on how ADIOS itself was configured.\n\n# exec_program(\"adios_config -c\" OUTPUT_VARIABLE ADIOS_COMPONENT_CFLAGS)\n\n# exec_program(\"adios_config -l\" OUTPUT_VARIABLE ADIOS_COMPONENT_LDFLAGS)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link the executable to the correct libraries\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "examples/vtk/CMakeLists.txt" : {
      "ObjectId" : "9da85ca2ea85cacae0d590d4cf10558c388bc31d",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FIND_PACKAGE( OpenMP REQUIRED)\n\n#if(OPENMP_FOUND)\n\n#    message(\"OPENMP FOUND\")\n\n#    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n\n#    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n\n#    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n\n#endif()\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "include/pipe-master/Makefile" : {
      "ObjectId" : "0fd7a0597412256911459e10de2f2e8fc304616c",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#-Werror\n",
        "Line" : 6,
        "CharPositionInLine" : 99
      },
      "1" : {
        "Text" : "#-pg #-flto\n",
        "Line" : 8,
        "CharPositionInLine" : 37
      },
      "CommentCount" : 2
    },
    "ref/strmalloc/Makefile" : {
      "ObjectId" : "aeb6f6a5d80d56499d4b0077fbf9f3ede31bfcfa",
      "LastModified" : "2018-01-17T00:43:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ref/workflow_wrapper/demo/Makefile" : {
      "ObjectId" : "9362e27ab097f6118a0b44d37b3dca565a3ca61b",
      "LastModified" : "2018-03-07T00:46:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ref/workflow_wrapper/shared_c/Makefile" : {
      "ObjectId" : "ff794faf06aaf15568945d70bc539ca6996dc225",
      "LastModified" : "2018-03-07T00:46:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "6b15e343ffb757c99356845ca350dd57de30473a",
      "LastModified" : "2019-03-18T18:16:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable c99 support.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If using SQLite3, add include files - it's required\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If using MPI, add the include files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need C++ because of sosd_spawn.cpp\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#TARGET ---> sos (library)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#TARGET ---> sosd (daemon)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Apple does not support the '-lrt' compiler option.\n",
        "Line" : 81,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Apple does no support the '-lrt' compiler option.\n",
        "Line" : 91,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Apple does no support the '-lrt' compiler option.\n",
        "Line" : 101,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# Apple does no support the '-lrt' compiler option.\n",
        "Line" : 111,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Apple does no support the '-lrt' compiler option.\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "#TARGET ---> sosd_stop (shut down the daemon)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#TARGET ---> sosd_trigger (trigger feedback from aggregator to listeners)\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#TARGET ---> sosd_probe (get daemon satus and display it)\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#TARGET ---> sosd_manifest (list of pubs this daemon is aware of, w/latest frame #)\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# sosd_spawn is used to spawn a listener if one isn't running\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#TARGET ---> demo_app (demonstration / example)\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#TARGET ---> tau_test (demonstration / example / unit test)\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#TARGET ---> proc_app (demonstration / example)\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "src/clients/CMakeLists.txt" : {
      "ObjectId" : "7bdfa2203b4580d9dab9b000d818f20fdd9958f3",
      "LastModified" : "2019-03-06T21:03:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If using SQLite3, add include files - it's required\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If using MPI, add the include files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#   NOTE: This CMakeLists.txt is special, it automatically\n\n#         compiles all <filename>.c files in this directory\n\n#         according to the standard SOSA rules.\n\n#\n\n#         If you want to do your own thing, comment out this\n\n#         section and check out the templates below.\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# target_link_libraries(sosa_py_runner ${PYTHON_LIBRARIES})\n\n# target_include_directories(sosa_py_runner PUBLIC ${PYTHON_INCLUDE_DIRS})\n\n# target_compile_options(sosa_py_runner PUBLIC ${PYTHON_CFLAGS_OTHER})\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/python/CMakeLists.txt" : {
      "ObjectId" : "b623474bbb37166053970fc9cdb87b1db04d451d",
      "LastModified" : "2019-03-06T21:03:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Annoyingly, CFFI only compiles with GCC.  So if SOS is configured with\n\n# something else, we have to change the compiler settings. Here's how\n\n# we do that: use the \"-E env CC=gcc\" mode for the python call.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create a custom target out of the library compilation result\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "12e4c962c83dfed2ca144fd1ab74f145b20f25f0",
      "LastModified" : "2019-03-06T21:03:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TARGET ---> test\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TARGET ---> kevin_test\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 21,
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 3629
}