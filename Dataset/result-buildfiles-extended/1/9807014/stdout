{
  "Repository" : "9807014",
  "Revision" : "HEAD",
  "ObjectId" : "de69c3c12d1a0251a9755debb8d54531811854ca",
  "CommitTime" : "2019-04-17T18:18:40Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "3f113fb27b54d75b459233841ec03afbd40f6ce5",
      "LastModified" : "2017-05-02T21:42:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set( CMAKE_VERBOSE_MAKEFILE ON )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project start\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 1. Configure (configure.cmake), used by user-apps and Examples\n\n#\t\tSetup verbose option \n\n#\t\tSetup BUILD_SHARED_LIBS lib option \n\n#\t\tSetup build type (debug/release)\n\n#\t\tSetup target platform( winodws, linux, ios, android...)\n\n#\t\tSetup GL target (ogl, es2, es3, etc...)\n\n#\t\tSetup <project>_LIB_DIRECTORY (\n\n#       \ti.e. Cinder uses:\n\n#\t\t\t\tset( CINDER_LIB_DIRECTORY \"lib/${<project>_TARGET_SUBFOLDER}/${CMAKE_BUILD_TYPE}/\" )\n\n# \t\t\tIMPORTANT: This is where user-apps expect lib to be found\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# 2. Configure (lib<project>_configure.cmake)\n\n#\t\tSetup <project>_SRC_DIR\n\n#\t\tSetup <project>_INC_DIR\n\n#\t\tSetup <project>_INCLUDE__(SYSTEM|USER)_(PRIVATE|INTERFACE) paths\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 3. SOURCE FILES for <project> (lib<project>_source_files.cmake)\n\n#\t\tSetup a bunch of different source_groups...\n\n#\t\tSet DS_CINDER_SRC_FILES\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# 4. Platform-specific cmake stuff ( libs, etc...) (platform_linux.cmake)\n\n#\t\tMostly add platform(linux)-specific include dirs and libraries\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 5. TARGET <project> (lib<project)_target.cmake)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 6. Build Examples?\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# 7. Configure/Build Projects\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# 8. Build Tests?\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/configure.cmake" : {
      "ObjectId" : "0b269f5fcb71f2a48eefe885d44f66cb9a64ab9e",
      "LastModified" : "2017-02-19T23:40:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set default build type to Debug\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DS_CINDER_LIB_DIRECTORY is the platform-specific, relative path that will be used to define\n\n# CMAKE_ARCHIVE_OUTPUT_DIRECTORY for libds-cinder-platform and also specifies where user apps will locate the cinder package\n\n#set( DS_CINDER_LIB_DIRECTORY \"lib/${DS_CINDER_TARGET_SUBFOLDER}/${CMAKE_BUILD_TYPE}/\" )\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Instead of following CINDER convention, let's put all the DsCinder libs in lib/ds_cinder/(Debug|Release)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup CINDER_PATH\n\n#\tTODO: Make this based on ENV var? \n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/examples/media_tester/CMakeLists.txt" : {
      "ObjectId" : "b06e8f07caae1fed132b83ff670776dcd1569808",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set( CMAKE_VERBOSE_MAKEFILE ON )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/examples/media_viewer/CMakeLists.txt" : {
      "ObjectId" : "c2399b039a8cd65c168371ba11d6ecb576ff0df3",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set( CMAKE_VERBOSE_MAKEFILE ON )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/examples/scroll_example/CMakeLists.txt" : {
      "ObjectId" : "f6c8e7ced1d353f28af8ff11feac518ae12d63b1",
      "LastModified" : "2017-04-05T19:41:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set( CMAKE_VERBOSE_MAKEFILE ON )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/libds-cinder-platform_configure.cmake" : {
      "ObjectId" : "8dca3f3f14fb1dcc604fd3e4b83b198de96ed5f8",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Load cmake modules from our own cmake Modules path\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Explanation of PUBLIC, PRIVATE, INTERFACE:\n\n# From StackOverflow: http://stackoverflow.com/questions/31981602/what-interface-public-private-mean-in-cmake-target-compilation-setting\n\n# These modes are useful if you have a target that is intended to be reused\n\n# (usually a library).\n\n#   * PRIVATE definitions only apply to the library target, but not to other\n\n#\t  targets that use this library. \n\n#   * INTERFACE definitions only apply to depending targets, but not to the\n\n#\t  library itself. \n\n#   * PUBLIC definitions apply both to the library target as wells as the\n\n#\t  depending targets.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Explanation of SYSTEM vs USER:\n\n# *_SYSTEM tells compiler that these are SYSTEM include directories, and will\n\n# disable some warnings.  This translates into the -isystem flag passed to GCC,\n\n# which will make GCC ignore any warnings generated inside these \"system\"\n\n# headers\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# *_INTERFACE includes get added to targets that depend on ds-cinder-platform.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#${ROOT_PATH}/lib/poco/include\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# *_PRIVATE includes are used by ds-cinder-platform internally, user apps explicitly add these as needed.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# find cross-platform packages -> DS_CINDER_INCLUDE_SYSTEM_(PRIVATE|PUBLIC)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/libds-cinder-platform_source_files.cmake" : {
      "ObjectId" : "df5ae61a52e4bdbaa55ec2b57b41c152b81ddf47",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is used to specify sources that become part of the libds-cinder-platform binary\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#${ROOT_PATH}/src/stdafx.cpp\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Need <intrin.h>\n",
        "Line" : 6,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : "# sprintf_s (windows)\n",
        "Line" : 8,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : "# error: invalid initialization of non-const reference of type ‘std::unique_ptr<ds::WorkRequest>&’ from an rvalue of type ‘std::unique_ptr<ds::WorkRequest>’\n",
        "Line" : 23,
        "CharPositionInLine" : 46
      },
      "5" : {
        "Text" : "# Uses winsock2 apis\n",
        "Line" : 31,
        "CharPositionInLine" : 47
      },
      "6" : {
        "Text" : "# Uses win32 and WGL APIs\n",
        "Line" : 35,
        "CharPositionInLine" : 44
      },
      "7" : {
        "Text" : "# error: invalid initialization of non-const reference of type ‘std::unique_ptr<ds::WorkRequest>&’ from an rvalue of type ‘std::unique_ptr<ds::WorkRequest>’\n",
        "Line" : 36,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "#${ROOT_PATH}/src/ds/storage/directory_watcher_win32.cpp\t# Uses win32 apis\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error: invalid initialization of non-const reference of type ‘std::unique_ptr<ds::WorkRequest>&’ from an rvalue of type ‘std::unique_ptr<ds::WorkRequest>’\n",
        "Line" : 45,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 10
    },
    "cmake/libds-cinder-platform_target.cmake" : {
      "ObjectId" : "9ee2c50d83f977231f5dd73108c60d4429ab739e",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Has something to do with  INTERFACE_LINK_LIBRARIES (NEW)\n\n# vs.\n\n# (IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>) (Old)?vs  \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The type is based on the value of the BUILD_SHARED_LIBS variable.\n\n# When OFF ( default value ) Cinder will be built as a static lib\n\n# and when ON as a shared library.\n\n# See https://cmake.org/cmake/help/v3.0/command/add_library.html for more info.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE: These two lines aren't in the libcinder_target.cmake:\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enable C++14\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable Warnings\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Disable a ton of initialization order warning\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Add colorized gcc output\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Disable Position-Independent-Executable (PIE)\n\n# Needed because Cinder's libboost libraries were not compiled \n\n# using -fpic or fPIC\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO: it would be nice to the following, but we can't until min required cmake is 3.3\n\n#target_compile_options( ds-cinder-platform PUBLIC $<$<COMPILE_LANGUAGE:CXX>:${DS_CINDER_CXX_FLAGS}> )\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This file will contain all dependencies, includes, definition, compiler flags and so on..\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Register ds-cinder-platform with cmake user package registry\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# And this command will generate a file on the ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}\n\n# that applications have to pull in order to link successfully with Cinder and its dependencies.\n\n# This specific ds-cinder-platformConfig.cmake file will just hold a path to the above mention \n\n# ds-cinder-platformTargets.cmake file which holds the actual info.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/modules/FindCairo.cmake" : {
      "ObjectId" : "c279c399743f674ef214485c0fc51180b1b074a8",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/performous/performous/tree/master/cmake/Modules\n\n# - Try to find Cairo\n\n# Once done, this will define\n\n#\n\n#  Cairo_FOUND - system has Cairo\n\n#  Cairo_INCLUDE_DIRS - the Cairo include directories\n\n#  Cairo_LIBRARIES - link these to use Cairo\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cairo depends on Freetype\n",
        "Line" : 10,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindFontConfig.cmake" : {
      "ObjectId" : "0025154bba11ca879119a48fe7ab2f3420429d23",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the  Fontconfig\n\n# Once done this will define\n\n#\n\n#  FONTCONFIG_FOUND - system has Fontconfig\n\n#  FONTCONFIG_INCLUDE_DIR - The include directory to use for the fontconfig headers\n\n#  FONTCONFIG_LIBRARIES - Link these to use FONTCONFIG\n\n#  FONTCONFIG_DEFINITIONS - Compiler switches required for using FONTCONFIG\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006,2007 Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the find_path() and find_library() calls\n",
        "Line" : 43,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindFreetype.cmake" : {
      "ObjectId" : "ac3fac1983e7293e13d9d1b83d5cb15dee6bff80",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/performous/performous/tree/master/cmake/Modules\n\n# - Try to find Freetype2\n\n# Once done, this will define\n\n#\n\n#  Freetype_FOUND - system has Freetype\n\n#  Freetype_INCLUDE_DIRS - the Freetype include directories\n\n#  Freetype_LIBRARIES - link these to use Freetype\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include dir\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindGLFW3.cmake" : {
      "ObjectId" : "4bfcdf7da4258b611f3c7e662fbcb701ddc40ea6",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/zero57/CMakeScripts/blob/master/FindGLFW3.cmake\n\n#\n\n# Try to find GLFW library and include path.\n\n# Once done this will define\n\n#\n\n# GLFW3_FOUND\n\n# GLFW3_INCLUDE_PATH\n\n# GLFW3_LIBRARY\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prefer the static library.\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindGObject.cmake" : {
      "ObjectId" : "dd7d85605e65c60e38973c84bb8ea07ce2c1a338",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/performous/performous/tree/master/cmake/Modules\n\n# - Try to find GObject 2.0\n\n# Once done, this will define\n\n#\n\n#  GObject_FOUND - system has GObject\n\n#  GObject_INCLUDE_DIRS - the GObject include directories\n\n#  GObject_LIBRARIES - link these to use GObject\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the library\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindGStreamer.cmake" : {
      "ObjectId" : "60fc0a5beb6cb900ccba243017b37a810add031f",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GStreamer and its plugins\n\n# Once done, this will define\n\n#\n\n#  GSTREAMER_FOUND - system has GStreamer\n\n#  GSTREAMER_INCLUDE_DIRS - the GStreamer include directories\n\n#  GSTREAMER_LIBRARIES - link these to use GStreamer\n\n#\n\n# Additionally, gstreamer-base is always looked for and required, and\n\n# the following related variables are defined:\n\n#\n\n#  GSTREAMER_BASE_INCLUDE_DIRS - gstreamer-base's include directory\n\n#  GSTREAMER_BASE_LIBRARIES - link to these to use gstreamer-base\n\n#\n\n# Optionally, the COMPONENTS keyword can be passed to find_package()\n\n# and GStreamer plugins can be looked for.  Currently, the following\n\n# plugins can be searched, and they define the following variables if\n\n# found:\n\n#\n\n#  gstreamer-app:        GSTREAMER_APP_INCLUDE_DIRS and GSTREAMER_APP_LIBRARIES\n\n#  gstreamer-audio:      GSTREAMER_AUDIO_INCLUDE_DIRS and GSTREAMER_AUDIO_LIBRARIES\n\n#  gstreamer-fft:        GSTREAMER_FFT_INCLUDE_DIRS and GSTREAMER_FFT_LIBRARIES\n\n#  gstreamer-gl:         GSTREAMER_GL_INCLUDE_DIRS and GSTREAMER_GL_LIBRARIES\n\n#  gstreamer-mpegts:     GSTREAMER_MPEGTS_INCLUDE_DIRS and GSTREAMER_MPEGTS_LIBRARIES\n\n#  gstreamer-pbutils:    GSTREAMER_PBUTILS_INCLUDE_DIRS and GSTREAMER_PBUTILS_LIBRARIES\n\n#  gstreamer-tag:        GSTREAMER_TAG_INCLUDE_DIRS and GSTREAMER_TAG_LIBRARIES\n\n#  gstreamer-video:      GSTREAMER_VIDEO_INCLUDE_DIRS and GSTREAMER_VIDEO_LIBRARIES\n\n#  NH ADDED: \n\n#  gstreamer-video:      GSTREAMER_NET_INCLUDE_DIRS and GSTREAMER_NET_LIBRARIES\n\n#\n\n# Copyright (C) 2012 Raphael Kubo da Costa <rakuco@webkit.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1.  Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n# 2.  Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS\n\n# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Helper macro to find a GStreamer plugin (or GStreamer itself)\n\n#   _component_prefix is prepended to the _INCLUDE_DIRS and _LIBRARIES variables (eg. \"GSTREAMER_AUDIO\")\n\n#   _pkgconfig_name is the component's pkg-config name (eg. \"gstreamer-1.0\", or \"gstreamer-video-1.0\").\n\n#   _library is the component's library name (eg. \"gstreamer-1.0\" or \"gstvideo-1.0\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------\n\n# 1. Find GStreamer itself\n\n# ------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# 1.1. Find headers and libraries\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -------------------------\n\n# 2. Find GStreamer plugins\n\n# -------------------------\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ------------------------------------------------\n\n# 3. Process the COMPONENTS passed to FIND_PACKAGE\n\n# ------------------------------------------------\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindGlib.cmake" : {
      "ObjectId" : "5f9ef06ee9db1e1ec65de903916711ea0a2efd47",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/performous/performous/tree/master/cmake/Modules\n\n# - Try to find Glib-2.0\n\n# Once done, this will define\n\n#\n\n#  Glib_FOUND - system has Glib\n\n#  Glib_INCLUDE_DIRS - the Glib include directories\n\n#  Glib_LIBRARIES - link these to use Glib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Main include dir\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Glib-related libraries also use a separate config header, which is in lib dir\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindHarfBuzz.cmake" : {
      "ObjectId" : "d4b4df761285cfbd3461b7a33e373a5348a9ccea",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Harfbuzz include and library directories.\n\n#\n\n# After successful discovery, this will set for inclusion where needed:\n\n# HARFBUZZ_INCLUDE_DIRS - containg the HarfBuzz headers\n\n# HARFBUZZ_LIBRARIES - containg the HarfBuzz library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindMediaInfoLib.cmake" : {
      "ObjectId" : "4199e41ffa83e89fb65079a27703a1cfc4b75fa0",
      "LastModified" : "2017-03-31T19:41:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/tkrotoff/QuarkPlayer/blob/master/cmake/modules/FindMediaInfoLib.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find MediaInfoLib\n\n# Once done this will define\n\n#\n\n#  MEDIAINFOLIB_FOUND - System has MediaInfoLib\n\n#  MEDIAINFOLIB_INCLUDE_DIRS - MediaInfoLib include directories\n\n#  MEDIAINFOLIB_LIBRARIES - Link these to use MediaInfoLib\n\n#  MEDIAINFOLIB_DEFINITIONS - Compiler switches required for using MediaInfoLib\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (C) 2010  Tanguy Krotoff <tkrotoff@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindMosquitto.cmake" : {
      "ObjectId" : "d8e7fdd41073782607d136d4a731f79c709eeb03",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libmosquitto\n\n# Find the native libmosquitto includes and libraries\n\n#\n\n#  MOSQUITTO_INCLUDE_DIR - where to find mosquitto.h, etc.\n\n#  MOSQUITTO_LIBRARIES   - List of libraries when using libmosquitto.\n\n#  MOSQUITTO_FOUND       - True if libmosquitto found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindMuPDF.cmake" : {
      "ObjectId" : "c1417b9690e1ab4c284bf164b550a4f6f8d9bf7f",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find MuPDF\n\n# Once done, this will define:\n\n#\n\n#  MuPDF_FOUND - system has MuPDF\n\n#  MuPDF_INCLUDE_DIRS - the MuPDF include directories\n\n#  MuPDF_LIBRARIES - link these to use MuPDF\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MuPDF Dependencies\n\n#libfind_package( MuPDF JPEG )\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindMuPDFbad.cmake" : {
      "ObjectId" : "77e0e68ba2f8c62f63ac643322593cea3b491f8e",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find MuPDF\n\n# Once done, this will define:\n\n#\n\n#  MUPDF_FOUND - system has MuPDF\n\n#  MUPDF_INCLUDE_DIRS - the MuPDF include directories\n\n#  MUPDF_LIBRARY - link these to use MuPDF\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include dir\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this lib depends on.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindOpenJPEG2.cmake" : {
      "ObjectId" : "0f2b087fa899877be1bce7f73670142153a1b2ca",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find OpenJPEG2\n\n# Once done, this will define:\n\n#\n\n#  OPENJPEG2_FOUND - system has OpenJPEG2\n\n#  OPENJPEG2_INCLUDE_DIRS - the OpenJPEG2 include directories\n\n#  OPENJPEG2_LIBRARIES - link these to use OpenJPEG2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include dir\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindPango.cmake" : {
      "ObjectId" : "5ac9e1f91662a530879c30502f1fa4df14660d2c",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/performous/performous/tree/master/cmake/Modules\n\n# - Try to find Pango\n\n# Once done, this will define\n\n#\n\n#  Pango_FOUND - system has Pango\n\n#  Pango_INCLUDE_DIRS - the Pango include directories\n\n#  Pango_LIBRARIES - link these to use Pango\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindPangoCairo.cmake" : {
      "ObjectId" : "7714b78b62c09e0668891036482cd589888d1897",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/performous/performous/tree/master/cmake/Modules\n\n# - Try to find PangoCairo\n\n# Once done, this will define\n\n#\n\n#  PangoCairo_FOUND - system has Pango\n\n#  PangoCairo_INCLUDE_DIRS - the Pango include directories\n\n#  PangoCairo_LIBRARIES - link these to use Pango\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/FindPoco.cmake" : {
      "ObjectId" : "668c469fcf12e8655a091937c969bb5fe4bb1cf7",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://code.ornl.gov/mantidproject/mantid/blob/708af6c79bfa72e7a584355b49a5efbe180b199f/Code/Mantid/Build/CMake/FindPoco.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - try to find Poco libraries and include files\n\n# POCO_INCLUDE_DIR where to find Standard.hxx, etc.\n\n# POCO_LIBRARIES libraries to link against\n\n# POCO_FOUND If false, do not try to use POCO\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set a version string by examining either the Poco/Version.h header or \n\n# the Poco/Foundation.h header if Version.h does not exist\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# regex quantifiers like {8} don't seem to work so we'll stick with + even though\n\n# it's not strictly true\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# pull out just the part after the 0x\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Pretty format\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set POCO_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindSnappy.cmake" : {
      "ObjectId" : "d3ea4c517af1c6553c8736278fb698ba8afe522c",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/lemire/FastPFor/blob/master/cmake_modules/Findsnappy.cmake\n\n# Snappy, a fast compressor/decompressor\n\n# Once done, this will define\n\n#\n\n#  Snappy_FOUND - system has Glib\n\n#  Snappy_INCLUDE_DIRS - the Glib include directories\n\n#  Snappy_LIBRARIES - link these to use Glib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindSqlite3.cmake" : {
      "ObjectId" : "599489e757eeaa4efa608c12a6a5f37bce897005",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From: https://github.com/darktable-org/darktable/blob/master/cmake/modules/FindSqlite3.cmake\n\n# - Try to find Sqlite3\n\n# Once done, this will define\n\n#\n\n#  Sqlite3_FOUND - system has Sqlite3\n\n#  Sqlite3_INCLUDE_DIRS - the Sqlite3 include directories\n\n#  Sqlite3_LIBRARIES - link these to use Sqlite3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/Findjbig2dec.cmake" : {
      "ObjectId" : "8e68f0e70283a5ba9c666120a9b0fa3c52a428c5",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find jbig2dec\n\n# Once done, this will define:\n\n#\n\n#  JBIG2DEC_FOUND - system has jbig2dec\n\n#  JBIG2DEC_INCLUDE_DIRS - the jbig2dec include directories\n\n#  JBIG2DEC_LIBRARIES - link these to use jbig2dec\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include dir\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/LibFindMacros.cmake" : {
      "ObjectId" : "586deb5876c11bda797acf18ff29b3f75ba61e6f",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Version 2.2\n\n# Public Domain, originally written by Lasse Käkäen <tronic>\n\n# Maintained at https://github.com/Tronic/cmake-modules\n\n# Please send your improvements as pull requests on Github.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find another package and make it a dependency of the current package.\n\n# This also automatically forwards the \"REQUIRED\" argument.\n\n# Usage: libfind_package(<prefix> <another package> [extra args to find_package])\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A simple wrapper to make pkg-config searches a bit easier.\n\n# Works the same as CMake's internal pkg_check_modules but is always quiet.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid useless copy&pasta by doing what most simple libraries do anyway:\n\n# pkg-config, find headers, find library.\n\n# Usage: libfind_pkg_detect(<prefix> <pkg-config args> FIND_PATH <name> [other args] FIND_LIBRARY <name> [other args])\n\n# E.g. libfind_pkg_detect(SDL2 sdl2 FIND_PATH SDL.h PATH_SUFFIXES SDL2 FIND_LIBRARY SDL2)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Parse arguments\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find library\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Extracts a version #define from a version.h file, output stored to <PREFIX>_VERSION.\n\n# Usage: libfind_version_header(Foobar foobar/version.h FOOBAR_VERSION_STR)\n\n# Fourth argument \"QUIET\" may be used for silently testing different define names.\n\n# This function does nothing if the version variable is already defined.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip processing if we already have a version or if the include dir was not found\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Process optional arguments\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Read the header and parse for version number\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# No regex match?\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Export the version string\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Skip processing if already processed during this configuration run\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Start with the assumption that the package was found\n",
        "Line" : 108,
        "CharPositionInLine" : 19
      },
      "15" : {
        "Text" : "# Did we find any files? Did we miss includes? These are for formatting better error messages.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Shorthands for some variables that we need often\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Lists of config option names (all, includes, libs)\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Process deps to add to \n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# The package seems to export option lists that we can use, woohoo!\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# If plural forms don't exist or they equal singular forms\n",
        "Line" : 133,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Singular forms can be used\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Oh no, we don't know the option names\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Include/library names separated by spaces (notice: not CMake lists)\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Process all includes and set found false if any are missing\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Process all libraries and set found false if any are missing\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Version checks\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# If all-OK, hide all config options, export variables, print status and exit\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Format messages for debug info and the type of error\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Fatal error out if REQUIRED\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Otherwise just print a nasty warning\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 31
    },
    "cmake/modules/cotire.cmake" : {
      "ObjectId" : "ab611007dc4e5ed872a629b99b5cde659c8eb7f2",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2016 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# BFS traversal of transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 441,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 452,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# used compiler supports language standard levels\n",
        "Line" : 454,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 472,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 484,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# platform specific flags\n",
        "Line" : 495,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# default include dirs\n",
        "Line" : 530,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 537,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 549,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# target include directories\n",
        "Line" : 561,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 573,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE refers to CMAKE_CURRENT_BINARY_DIR and CMAKE_CURRENT_SOURCE_DIR\n\n# at the time, when the target was created. These correspond to the target properties BINARY_DIR and SOURCE_DIR\n\n# which are only available with CMake 3.4 or later.\n",
        "Line" : 581,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# convert Windows paths in include directories to CMake paths\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 677,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# target export define symbol\n",
        "Line" : 681,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 686,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# target compile definitions\n",
        "Line" : 695,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 704,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 713,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 729,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# compiler launcher is only supported for Makefile and Ninja\n",
        "Line" : 881,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 970,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 1014,
        "CharPositionInLine" : 3
      },
      "54" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 1022,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 1025,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# header is outside\n",
        "Line" : 1039,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 1050,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# check header file extension\n",
        "Line" : 1060,
        "CharPositionInLine" : 1
      },
      "59" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1073,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1078,
        "CharPositionInLine" : 3
      },
      "61" : {
        "Text" : "# GCC like output\n",
        "Line" : 1087,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1103,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1106,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1108,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# then separate lines\n",
        "Line" : 1110,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1113,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1131,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# update stack\n",
        "Line" : 1141,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1157,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1159,
        "CharPositionInLine" : 5
      },
      "71" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1166,
        "CharPositionInLine" : 5
      },
      "72" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1175,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1187,
        "CharPositionInLine" : 5
      },
      "74" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1225,
        "CharPositionInLine" : 1
      },
      "75" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1241,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1392,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# create empty log file\n",
        "Line" : 1433,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1449,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1486,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# append to list\n",
        "Line" : 1495,
        "CharPositionInLine" : 3
      },
      "81" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1498,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1502,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# append to list\n",
        "Line" : 1507,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1513,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1520,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# append to list\n",
        "Line" : 1525,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1528,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1533,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "# append to list\n",
        "Line" : 1542,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1545,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1549,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# append to list\n",
        "Line" : 1554,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1560,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1579,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# append to list\n",
        "Line" : 1590,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1597,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1604,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# append to list\n",
        "Line" : 1613,
        "CharPositionInLine" : 3
      },
      "99" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1616,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1624,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# append to list\n",
        "Line" : 1636,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1643,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1650,
        "CharPositionInLine" : 3
      },
      "104" : {
        "Text" : "# append to list\n",
        "Line" : 1661,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1670,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1687,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# append to list\n",
        "Line" : 1695,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1701,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1708,
        "CharPositionInLine" : 3
      },
      "110" : {
        "Text" : "# append to list\n",
        "Line" : 1710,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1713,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1718,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# append to list\n",
        "Line" : 1723,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1726,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1730,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# append to list\n",
        "Line" : 1736,
        "CharPositionInLine" : 3
      },
      "117" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1739,
        "CharPositionInLine" : 3
      },
      "118" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1745,
        "CharPositionInLine" : 3
      },
      "119" : {
        "Text" : "# append to list\n",
        "Line" : 1753,
        "CharPositionInLine" : 5
      },
      "120" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1759,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1766,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# append to list\n",
        "Line" : 1768,
        "CharPositionInLine" : 5
      },
      "123" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1771,
        "CharPositionInLine" : 5
      },
      "124" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1776,
        "CharPositionInLine" : 3
      },
      "125" : {
        "Text" : "# append to list\n",
        "Line" : 1785,
        "CharPositionInLine" : 5
      },
      "126" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1791,
        "CharPositionInLine" : 5
      },
      "127" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1798,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# append to list\n",
        "Line" : 1800,
        "CharPositionInLine" : 5
      },
      "129" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1803,
        "CharPositionInLine" : 5
      },
      "130" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1840,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1856,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1860,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1867,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1870,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1909,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1928,
        "CharPositionInLine" : 1
      },
      "137" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1971,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1982,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1985,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 2056,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 2061,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 2064,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 2067,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 2070,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2102,
        "CharPositionInLine" : 1
      },
      "146" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2106,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2111,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2128,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2141,
        "CharPositionInLine" : 1
      },
      "150" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2166,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2171,
        "CharPositionInLine" : 3
      },
      "152" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2178,
        "CharPositionInLine" : 1
      },
      "153" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2181,
        "CharPositionInLine" : 1
      },
      "154" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2186,
        "CharPositionInLine" : 1
      },
      "155" : {
        "Text" : "# generate target script file\n",
        "Line" : 2209,
        "CharPositionInLine" : 1
      },
      "156" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2214,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2228,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2237,
        "CharPositionInLine" : 3
      },
      "159" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2239,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2243,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "# make precompiled header compilation depend on the actual compiler executable used to force\n\n# re-compilation when the compiler executable is updated. This prevents \"created by a different GCC executable\"\n\n# warnings when the precompiled header is included.\n",
        "Line" : 2252,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2274,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2279,
        "CharPositionInLine" : 3
      },
      "164" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2286,
        "CharPositionInLine" : 3
      },
      "165" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2292,
        "CharPositionInLine" : 3
      },
      "166" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2299,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2302,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2309,
        "CharPositionInLine" : 1
      },
      "169" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2316,
        "CharPositionInLine" : 1
      },
      "170" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2318,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2382,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2393,
        "CharPositionInLine" : 3
      },
      "173" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2404,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2412,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2416,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2420,
        "CharPositionInLine" : 3
      },
      "177" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2442,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2448,
        "CharPositionInLine" : 3
      },
      "179" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2457,
        "CharPositionInLine" : 3
      },
      "180" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2465,
        "CharPositionInLine" : 3
      },
      "181" : {
        "Text" : "# make prefix header generation depend on the actual compiler executable used to force\n\n# re-generation when the compiler executable is updated. This prevents \"file not found\"\n\n# errors for compiler version specific system header files.\n",
        "Line" : 2495,
        "CharPositionInLine" : 1
      },
      "182" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2513,
        "CharPositionInLine" : 1
      },
      "183" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2518,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2543,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2552,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2561,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2568,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2743,
        "CharPositionInLine" : 3
      },
      "189" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2747,
        "CharPositionInLine" : 3
      },
      "190" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2761,
        "CharPositionInLine" : 3
      },
      "191" : {
        "Text" : "# use all available cores\n",
        "Line" : 2781,
        "CharPositionInLine" : 3
      },
      "192" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2806,
        "CharPositionInLine" : 1
      },
      "193" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2813,
        "CharPositionInLine" : 1
      },
      "194" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2823,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2828,
        "CharPositionInLine" : 1
      },
      "196" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2830,
        "CharPositionInLine" : 2
      },
      "197" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2839,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2849,
        "CharPositionInLine" : 4
      },
      "199" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2856,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2860,
        "CharPositionInLine" : 1
      },
      "201" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2888,
        "CharPositionInLine" : 2
      },
      "202" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2893,
        "CharPositionInLine" : 4
      },
      "203" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2908,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2929,
        "CharPositionInLine" : 3
      },
      "205" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2937,
        "CharPositionInLine" : 3
      },
      "206" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2960,
        "CharPositionInLine" : 4
      },
      "207" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2972,
        "CharPositionInLine" : 1
      },
      "208" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2982,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2985,
        "CharPositionInLine" : 1
      },
      "210" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2990,
        "CharPositionInLine" : 2
      },
      "211" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2995,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# generate unity target\n",
        "Line" : 3002,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# depend on original target's automoc target, if it exists\n",
        "Line" : 3009,
        "CharPositionInLine" : 2
      },
      "214" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 3015,
        "CharPositionInLine" : 3
      },
      "215" : {
        "Text" : "# copy output location properties\n",
        "Line" : 3019,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 3029,
        "CharPositionInLine" : 3
      },
      "217" : {
        "Text" : "# copy output name\n",
        "Line" : 3054,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 3062,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# copy compile features\n",
        "Line" : 3074,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 3079,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# copy link stuff\n",
        "Line" : 3087,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 3098,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 3101,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 3107,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 3123,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# use output name from original target\n",
        "Line" : 3131,
        "CharPositionInLine" : 1
      },
      "227" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 3136,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# check if cotire can be applied to target at all\n",
        "Line" : 3160,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# resolve alias\n",
        "Line" : 3172,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3180,
        "CharPositionInLine" : 1
      },
      "231" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3196,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3201,
        "CharPositionInLine" : 1
      },
      "233" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3250,
        "CharPositionInLine" : 4
      },
      "234" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3312,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3399,
        "CharPositionInLine" : 1
      },
      "236" : {
        "Text" : "# include target script if available\n",
        "Line" : 3411,
        "CharPositionInLine" : 1
      },
      "237" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3413,
        "CharPositionInLine" : 2
      },
      "238" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3429,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3449,
        "CharPositionInLine" : 3
      },
      "240" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3452,
        "CharPositionInLine" : 3
      },
      "241" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3471,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3474,
        "CharPositionInLine" : 3
      },
      "243" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3542,
        "CharPositionInLine" : 3
      },
      "244" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3545,
        "CharPositionInLine" : 3
      },
      "245" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3568,
        "CharPositionInLine" : 1
      },
      "246" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3605,
        "CharPositionInLine" : 3
      },
      "247" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3639,
        "CharPositionInLine" : 2
      },
      "248" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3653,
        "CharPositionInLine" : 3
      },
      "249" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3660,
        "CharPositionInLine" : 1
      },
      "250" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3713,
        "CharPositionInLine" : 1
      },
      "251" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3785,
        "CharPositionInLine" : 1
      },
      "252" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3949,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 253
    },
    "cmake/modules/dsCinderMakeApp.cmake" : {
      "ObjectId" : "fa135262d47c0127df886aa7c1b3a9782a18f427",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Need this for ds_log_* functions\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compute app source files from either passed SOURCES or DYNAMIC_SOURCES\n\n# DYNAMIC_SOURCES can either be TRUE or a path specifying where to search for source files\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# ALSO: include CINDER configure.cmake...\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Place executable in app's bin directory\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#ds_log_v( \"CINDER BLOCKS: ${ARG_BLOCKS}\" )\n",
        "Line" : 63,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# This ensures that the application will link with the correct version of Cinder\n\n# based on the current build type without the need to remove the entire build folder\n\n# when switching build type after an initial configuration. See PR #1518 for more info. \n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# pull in ds-cinder-platform's exported configuration\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# HACK OMG WORKAROUND\n\n# Cinder adds GLFW compiler definitions as a space-separated list like so: \n\n#   --> list( APPEND GLFW_FLAGS \"-D_GLFW_X11 -D_GLFW_GLX -D_GLFW_USE_OPENGL\" ) <--\n\n# This breaks cotire, which interprets this as defining _GLFW_X11 as \"D_GLFW_GLX -D_GLFW_USE_OPENGL\",\n\n# when building the precompiled header.  To workaround this, we need to convert this space-separated,\n\n# \"-D\"-prefixed list into a normal list.\n",
        "Line" : 88,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# ensure the runtime output directory exists, in case we need to copy other files to it\n",
        "Line" : 101,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# set icon. TODO: make this overridable\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# copy .icns to bundle's resources folder\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# copy any other resources specified by user\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# copy resources to a folder next to the app names 'resources'. note the folder is flat, so duplicates will be overwritten\n",
        "Line" : 117,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# Don't allow resources to be added to the executable on linux\n",
        "Line" : 126,
        "CharPositionInLine" : 26
      },
      "15" : {
        "Text" : "# Override the default /MD with /MT\n",
        "Line" : 130,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# Force synchronous PDB writes\n",
        "Line" : 141,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# Force multiprocess compilation\n",
        "Line" : 143,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# Add lib dirs\n",
        "Line" : 145,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "## Add colorized gcc output\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# Add \"_debug\" to Debug build executable name\n",
        "Line" : 162,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Add include directories and library dependencies to app target\n",
        "Line" : 167,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# If we're using a path for DYNAMIC_SOURCES, use that path as a project include directory\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# Cinder Blocks (TODO: make this smarter?)\n",
        "Line" : 176,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "#list( APPEND CINDER_BLOCKS OSC TUIO )\n",
        "Line" : 178,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "#list( APPEND DS_CINDER_LIBS_DEPENDS ${blockName} )\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Ignore Specific Default Libraries\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# DsCinder projects/ components\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# First check if a target was defined. If so then includes and extra libraries will automatically be added to the app target.\n",
        "Line" : 208,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# Otherwise, check for either includes for a header-only projectComponent or libraries that need to be linked.\n\n# - sanity check to warn if someone passed in a projectComponent with unexpected cmake configuration\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Secret sauce: Add a custom target to make sure external\n\n# project is built before building this project\n",
        "Line" : 233,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# set bundle info.plist properties\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 253,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 33
    },
    "cmake/modules/findCMakeDirs.cmake" : {
      "ObjectId" : "0fe0a03d214b336653122ee9b1e7b2894e7fb8e3",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Recursively finds directories that contain a CMakeLists.txt (ex. examples and tests)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/platform_linux.cmake" : {
      "ObjectId" : "d205969b9f2c79e4d820a0f3e42965a0a6762590",
      "LastModified" : "2017-08-03T23:00:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add any linux-specific .cpp files...\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Common libs for Linux.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Poco\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: Use Debug libs?\n\n#${POCO_LIB_DIRECTORY}/libPocoNetd.a\n\n#${POCO_LIB_DIRECTORY}/libPocoFoundationd.a\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Cinder\n\n#list( APPEND DS_CINDER_INCLUDE_SYSTEM_PUBLIC \"${CINDER_PATH}/include\" )\n\n#list( APPEND CINDER_LIBS_DEPENDS ${CINDER_PATH}/lib/linux/x86_64/ogl/${CMAKE_BUILD_TYPE}/libcinder.a )\n\n#list( APPEND DS_CINDER_LIBS_DEPENDS ${CINDER_LIBRARIES} )\n\n#list( APPEND DS_CINDER_INCLUDE_SYSTEM_PUBLIC ${CINDER_INCLUDE_DIRS} )\n\n# pull in cinder's exported configuration\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Populate DS_CINDER_INCLUDE_SYSTEM_PRIVATE\n\n## Populate DS_CINDER_LIBS_DEPENDS\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Glib\n\n# GObject\n\n# Cairo\n\n# Pango\n\n# PangoCairo\n\n# Freetype2\n\n# FontConfig\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# cURL\n\n# Snappy\n\n# Sqlite3\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Glib\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# GObject\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Cairo\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Pango\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# PangoCairo\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Freetype2\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# FontConfig\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Curl\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Snappy\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Sqlite3\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# GStreamer and its dependencies.\n\n# GStreamer\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# If we have gst-gl available add it.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Boost\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Workaround for gcc bug on versions > 5.3.1 when building as a shared lib.\n\n#if( CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.3.1 AND BUILD_SHARED_LIBS )\n\n#list( APPEND DS_CINDER_LIBS_DEPENDS gcc )\n\n#endif()\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cmake/platform_msw.cmake" : {
      "ObjectId" : "a15b662c7adc6e95c391620c3f0d659df26d1fcd",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add any linux-specific .cpp files...\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Common libs for Linux.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Poco\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: Use Debug libs?\n\n#${POCO_LIB_DIRECTORY}/libPocoNetd.a\n\n#${POCO_LIB_DIRECTORY}/libPocoFoundationd.a\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Cinder\n\n#list( APPEND DS_CINDER_INCLUDE_SYSTEM_PUBLIC \"${CINDER_PATH}/include\" )\n\n#list( APPEND CINDER_LIBS_DEPENDS ${CINDER_PATH}/lib/linux/x86_64/ogl/${CMAKE_BUILD_TYPE}/libcinder.a )\n\n#list( APPEND DS_CINDER_LIBS_DEPENDS ${CINDER_LIBRARIES} )\n\n#list( APPEND DS_CINDER_INCLUDE_SYSTEM_PUBLIC ${CINDER_INCLUDE_DIRS} )\n\n# pull in cinder's exported configuration\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Populate DS_CINDER_INCLUDE_SYSTEM_PRIVATE\n\n## Populate DS_CINDER_LIBS_DEPENDS\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Glib\n\n# GObject\n\n# Cairo\n\n# Pango\n\n# PangoCairo\n\n# Freetype2\n\n# FontConfig\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# cURL\n\n# Snappy\n\n# Sqlite3\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Glib\n\n# find_package( Glib REQUIRED )\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# GObject\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Cairo\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# find_package( Cairo REQUIRED )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS ${Cairo_LIBRARIES} )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE ${Cairo_INCLUDE_DIRS} )\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Pango\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# find_package( Pango REQUIRED COMPONENTS )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS ${Pango_LIBRARIES} )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE ${Pango_INCLUDE_DIRS} )\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# PangoCairo\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE \"${DS_CINDER_PATH}/src/gtk/pango-1.0\" )\n\n# find_package( PangoCairo REQUIRED )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS ${PangoCairo_LIBRARIES} )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE ${PangoCairo_INCLUDE_DIRS} )\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Freetype2\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# find_package( Freetype REQUIRED )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS ${Freetype_LIBRARIES} )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE ${Freetype_INCLUDE_DIRS} )\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# FontConfig\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# find_package( FontConfig REQUIRED )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS ${FONTCONFIG_LIBRARIES} )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE ${FONTCONFIG_INCLUDE_DIRS} )\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Curl\n\n# set( PANGO_LIB_DIRECTORY \"${DS_CINDER_PATH}/lib/gtk\" )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS \"${PANGO_LIB_DIRECTORY}/lib64/pango-1.0.lib\" )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE \"${DS_CINDER_PATH}/src/gtk/pango-1.0\" )\n\n# find_package( CURL REQUIRED )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS ${CURL_LIBRARIES} )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE ${CURL_INCLUDE_DIR} )\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Snappy\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Sqlite3\n\n# set( SQLITE3_LIB_DIRECTORY \"${DS_CINDER_PATH}/lib/gtk\" )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS \"${SQLITE3_LIB_DIRECTORY}/lib64/sqlite3-1.0.lib\" )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE \"${DS_CINDER_PATH}/src/gtk/sqlite3-1.0\" )\n\n# find_package( Sqlite3 REQUIRED )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS ${Sqlite3_LIBRARIES} )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE ${Sqlite3_INCLUDE_DIRS} )\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# GStreamer and its dependencies.\n\n# GStreamer\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# find_package( GStreamer REQUIRED )\n\n# list( APPEND DS_CINDER_LIBS_DEPENDS \n\n# \t${GSTREAMER_LIBRARIES}\n\n# \t${GSTREAMER_BASE_LIBRARIES}\n\n# \t${GSTREAMER_APP_LIBRARIES}\n\n# \t${GSTREAMER_VIDEO_LIBRARIES}\n\n# )\n\n# list( APPEND DS_CINDER_INCLUDE_SYSTEM_PRIVATE\n\n# \t${GSTREAMER_INCLUDE_DIRS}\n\n# \t${GSTREAMER_BASE_INCLUDE_DIRS}\n\n# \t${GSTREAMER_APP_INCLUDE_DIRS}\n\n# \t${GSTREAMER_VIDEO_INCLUDE_DIRS}\n\n# )\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# If we have gst-gl available add it.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Boost\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Workaround for gcc bug on versions > 5.3.1 when building as a shared lib.\n\n#if( CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.3.1 AND BUILD_SHARED_LIBS )\n\n#list( APPEND DS_CINDER_LIBS_DEPENDS gcc )\n\n#endif()\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "cmake/utilities.cmake" : {
      "ObjectId" : "f65698289e38ce871c9975a491895f5073e58bb3",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get the path of the CMakeLists file evaluating this macro relative to the project's root source directory\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Build up all remaining arguments into the _msg var\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# deposit the concatenated message into 'msg' var for the parent function to use\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Only prints if DS_CINDER_VERBOSE is On\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Always prints\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Get all propreties that cmake supports\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Convert command output into a CMake list\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# message (\"Checking ${prop}\")\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Make a symlink post-build\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "projects/essentials/cmake/essentialsConfig.cmake" : {
      "ObjectId" : "eb818710b02599e0aed4f20f768639285ec43581",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${ESSENTIALS_SRC_PATH}/ds/ui/layout/layout_sprite.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Place compiled library in project's lib directory\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add \"_d\" to library name for debug builds\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO\n\n#set_target_properties( essentials PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${ROOT_PATH}/src/stdafx.h\" )\n\n#cotire( essentials )\n",
        "Line" : 76,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "projects/mosquitto/cmake/mosquittoConfig.cmake" : {
      "ObjectId" : "cbf5fcfdd709e9be4d7ebbc698bac818ec54c249",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Place compiled library in project's lib directory\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add \"_d\" to library name for debug builds\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Mosquitto\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# pull in ds_cinder's exported configuration\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# TODO\n\n#set_target_properties( mosquitto PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${ROOT_PATH}/src/stdafx.h\" )\n\n#cotire( mosquitto )\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "projects/pdf/cmake/pdfConfig.cmake" : {
      "ObjectId" : "e8a77752448b505bb387226e1297e8ed2e8cc70c",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Place compiled library in project's lib directory\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add \"_d\" to library name for debug builds\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Mupdf\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#target_link_libraries( pdf PRIVATE jpeg jbig -l:libjbig2dec.so.0 -l:libopenjpeg.so.5 )\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Freetype\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# HarfBuzz\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# pull in ds_cinder's exported configuration\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 58,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# TODO\n\n#set_target_properties( pdf PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${ROOT_PATH}/src/stdafx.h\" )\n\n#cotire( pdf )\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 10
    },
    "projects/physics/cmake/physicsConfig.cmake" : {
      "ObjectId" : "9846b5abbf8b0bb0211cf0c263d7345ac1772217",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This project actually includes all the lib dependency's sources (Box2D)..\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Place compiled library in project's lib directory\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add \"_d\" to library name for debug builds\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# pull in ds_cinder's exported configuration\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 93,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 102,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# TODO\n\n#set_target_properties( physics PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${ROOT_PATH}/src/stdafx.h\" )\n\n#cotire( physics )\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "projects/video/cmake/videoConfig.cmake" : {
      "ObjectId" : "d4d7a92074b6a68fcb44f5a06632dbd353b41cf0",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Place compiled library in project's lib directory\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add \"_d\" to library name for debug builds\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# GStreamer and its dependencies.\n\n# GStreamer\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# MediaInfo\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# TODO\n\n#set_target_properties( video PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${ROOT_PATH}/src/stdafx.h\" )\n\n#cotire( video )\n",
        "Line" : 69,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "projects/viewers/cmake/viewersConfig.cmake" : {
      "ObjectId" : "0549efbba532c1517fc5385bdc758b93e3e590cc",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Place compiled library in project's lib directory\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add \"_d\" to library name for debug builds\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Dependent components\n",
        "Line" : 43,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO\n\n#set_target_properties( viewers PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${ROOT_PATH}/src/stdafx.h\" )\n\n#cotire( viewers )\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "projects/web/cmake/webConfig.cmake" : {
      "ObjectId" : "caf3c7bcdf086dcbd3cdd508e47c456182790c31",
      "LastModified" : "2017-12-29T19:25:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Hook into CEF's CMake files\n\n# Not sure if this is the right way to do this...\n\n# TODO: Use ENV variable, or something...?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set CEF_ROOT\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Place compiled library in project's lib directory\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Add \"_d\" to library name for debug builds\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Override output location of libcef_dll_wrapper\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# This macro is defined by CEF, sets include directories and compile flags for library\n\n#SET_LIBRARY_TARGET_PROPERTIES(web)\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Logical target used to link the libcef library.\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# HACK: We need to specify path to libcef_dll_wrapper.a instead of just\n\n# plain target name (libcef_dll_wrapper) because otherwise, the \"web\"\n\n# target would inherit all the same compile flags as libcef_dll_wrapper.a,\n\n# which we don't want \n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#print_target_properties(web)\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# HMM... WTF?\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# GLFW required to get access to window handle\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# pull in ds_cinder's exported configuration\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# pull in cinder's exported configuration\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Make building wai faster using Cotire\n",
        "Line" : 93,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# TODO\n\n#set_target_properties( web PROPERTIES COTIRE_CXX_PREFIX_HEADER_INIT \"${ROOT_PATH}/src/stdafx.h\" )\n\n#cotire( web )\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "CMAKE" : 41
  },
  "ElapsedTime" : 5216
}