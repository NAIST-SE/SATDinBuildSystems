{
  "Repository" : "5928066",
  "Revision" : "HEAD",
  "ObjectId" : "e5f8a97cc9f350424a4831d81c6c3ebf3dd21d12",
  "CommitTime" : "2019-03-10T06:20:27Z",
  "Files" : {
    "node_modules.mac/cheerio/Makefile" : {
      "ObjectId" : "a50f45eafca157287b81661ce45ea93790e528d8",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/express/node_modules/accepts/node_modules/mime-types/Makefile" : {
      "ObjectId" : "ceaf011fb86c74745326bbb9a7b47225961709d7",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/express/node_modules/cookie-signature/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/express/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "node_modules.mac/express/node_modules/escape-html/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/express/node_modules/fresh/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/express/node_modules/range-parser/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/express/node_modules/type-is/node_modules/mime-types/Makefile" : {
      "ObjectId" : "ceaf011fb86c74745326bbb9a7b47225961709d7",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/neo4j/node_modules/http-status/Makefile" : {
      "ObjectId" : "f041f2d91379f03bdc347cf4f9f2f2c18191f182",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/neo4j/node_modules/request/node_modules/form-data/node_modules/combined-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/neo4j/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/neo4j/node_modules/request/node_modules/hawk/Makefile" : {
      "ObjectId" : "5f339bf34743cfff261c4656f1e3d98d3900f390",
      "LastModified" : "2014-06-21T16:38:34Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/neo4j/node_modules/request/node_modules/hawk/node_modules/boom/Makefile" : {
      "ObjectId" : "884ec6db159e9b72a99602b668b2e28fcb890949",
      "LastModified" : "2014-06-21T16:38:34Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/neo4j/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2014-06-21T16:38:34Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "node_modules.mac/neo4j/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "e605d6c049d83bf59240a5f9cc27269ac56ae0d5",
      "LastModified" : "2014-06-21T16:38:34Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/cheerio/Makefile" : {
      "ObjectId" : "a50f45eafca157287b81661ce45ea93790e528d8",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/express/node_modules/accepts/node_modules/mime-types/Makefile" : {
      "ObjectId" : "ceaf011fb86c74745326bbb9a7b47225961709d7",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/express/node_modules/cookie-signature/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/express/node_modules/debug/Makefile" : {
      "ObjectId" : "b0bde6e63f86f3e12d45b6fb22df637865b350f3",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "trash/node_modules/express/node_modules/escape-html/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/express/node_modules/fresh/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/express/node_modules/range-parser/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/express/node_modules/type-is/node_modules/mime-types/Makefile" : {
      "ObjectId" : "ceaf011fb86c74745326bbb9a7b47225961709d7",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/http-status/Makefile" : {
      "ObjectId" : "f041f2d91379f03bdc347cf4f9f2f2c18191f182",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/request/node_modules/form-data/node_modules/combined-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/request/node_modules/hawk/Makefile" : {
      "ObjectId" : "5f339bf34743cfff261c4656f1e3d98d3900f390",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/request/node_modules/hawk/node_modules/boom/Makefile" : {
      "ObjectId" : "884ec6db159e9b72a99602b668b2e28fcb890949",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "e605d6c049d83bf59240a5f9cc27269ac56ae0d5",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/neo4j/node_modules/streamline/node_modules/fibers/build/Makefile" : {
      "ObjectId" : "11814e090eedf42264aa7e444aea644ca3bfb849",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(thakis): Find out and document the difference between shared_library and\n\n# loadable_module on mac.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n\n# -bundle -single_module here (for osmesa.so).\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "trash/node_modules/request/node_modules/form-data/node_modules/combined-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/request/node_modules/hawk/Makefile" : {
      "ObjectId" : "5f339bf34743cfff261c4656f1e3d98d3900f390",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/request/node_modules/hawk/node_modules/boom/Makefile" : {
      "ObjectId" : "884ec6db159e9b72a99602b668b2e28fcb890949",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/request/node_modules/hawk/node_modules/cryptiles/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/request/node_modules/hawk/node_modules/hoek/Makefile" : {
      "ObjectId" : "e605d6c049d83bf59240a5f9cc27269ac56ae0d5",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/request/node_modules/hawk/node_modules/sntp/Makefile" : {
      "ObjectId" : "9e7138c2a6f532afb40d02c50c1e056345ae0756",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "trash/node_modules/sleep/build/Makefile" : {
      "ObjectId" : "736a32b350fcf65328bc27f75e42a15adef72647",
      "LastModified" : "2016-12-19T03:00:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We borrow heavily from the kernel build setup, though we are simpler since\n\n# we don't have Kconfig tweaking settings on us.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The implicit make rules have it looking for RCS files, among other things.\n\n# We instead explicitly write all the rules we care about.\n\n# It's even quicker (saves ~200ms) to pass -r on the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The source directory tree.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The name of the builddir.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The V=1 flag on command line makes us verbosely print command lines.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Specify BUILDTYPE=Release on the command line for a release build.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Directory all our build output goes into.\n\n# Note that this must be two directories beneath src/ for unit tests to pass,\n\n# as they reach into the src/ directory for data with relative paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Object output directory.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We build up a list of every single one of the targets so we can slurp in the\n\n# generated dependency rule Makefiles in one pass.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# C++ apps need to be linked with g++.\n\n#\n\n# Note: flock is used to seralize linking. Linking is a memory-intensive\n\n# process so running parallel links can often lead to thrashing.  To disable\n\n# the serialization, override LINK via an envrionment variable as follows:\n\n#\n\n#   export LINK=g++\n\n#\n\n# This will allow make to invoke N linker processes as specified in -jN.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n\n# to replicate this environment fallback in make as well.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Define a dir function that can handle spaces.\n\n# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n\n# \"leading spaces cannot appear in the text of the first argument as written.\n\n# These characters can be put into the argument value by variable substitution.\"\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Flags to make gcc output dependency info.  Note that you need to be\n\n# careful here to use the flags that ccache and distcc can understand.\n\n# We write to a dep file on the side first and then rename at the end\n\n# so we can't end up with a broken dep file.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We have to fixup the deps output in a few ways.\n\n# (1) the file output should mention the proper .o file.\n\n# ccache or distcc lose the path to the target, so we convert a rule of\n\n# the form:\n\n#   foobar.o: DEP1 DEP2\n\n# into\n\n#   path/to/foobar.o: DEP1 DEP2\n\n# (2) we want missing files not to cause us to fail to build.\n\n# We want to rewrite\n\n#   foobar.o: DEP1 DEP2 \\\n#               DEP3\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to\n\n#   DEP1:\n\n#   DEP2:\n\n#   DEP3:\n\n# so if the files are missing, they're just considered phony rules.\n\n# We have to do some pretty insane escaping to get those backslashes\n\n# and dollar signs past make, the shell, and sed at the same time.\n\n# Doesn't work with spaces, but that's fine: .d files have spaces in\n\n# their names replaced with other characters.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The depfile may not exist if the input file didn't have any #includes.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fixup path as in (1).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add extra rules as in (2).\n\n# We remove slashes and replace spaces with new lines;\n\n# remove blank lines;\n\n# delete the first line and append a colon to the remaining lines.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Command definitions:\n\n# - cmd_foo is the actual command to run;\n\n# - quiet_cmd_foo is the brief-output summary of the command.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Commands for precompiled header files.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gyp-mac-tool is written next to the root Makefile by gyp.\n\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n\n# already.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# send stderr to /dev/null to ignore messages when linking directories.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(thakis): Find out and document the difference between shared_library and\n\n# loadable_module on mac.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# TODO(thakis): The solink_module rule is likely wrong. Xcode seems to pass\n\n# -bundle -single_module here (for osmesa.so).\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Define an escape_quotes function to escape single quotes.\n\n# This allows us to handle quotes properly as long as we always use\n\n# use single quotes and escape_quotes.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This comment is here just to include a ' to unconfuse syntax highlighting.\n\n# Define an escape_vars function to escape '$' variable syntax.\n\n# This allows us to read/write command lines with shell variables (e.g.\n\n# $LD_LIBRARY_PATH), without triggering make substitution.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Helper that expands to a shell command to echo a string exactly as it is in\n\n# make. This uses printf instead of echo because printf's behaviour with respect\n\n# to escape sequences is more portable than echo's across different shells\n\n# (e.g., dash, bash).\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Helper to compare the command we're about to run against the command\n\n# we logged the last time we ran the command.  Produces an empty\n\n# string (false) when the commands match.\n\n# Tricky point: Make has no string-equality test function.\n\n# The kernel uses the following, but it seems like it would have false\n\n# positives, where one string reordered its arguments.\n\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We instead substitute each for the empty string into the other, and\n\n# say they're equal if both substitutions produce the empty string.\n\n# .d files contain ? instead of spaces, take that into account.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Helper that is non-empty when a prerequisite changes.\n\n# Normally make does this implicitly, but we force rules to always run\n\n# so we can check their command lines.\n\n#   $? -- new prerequisites\n\n#   $| -- order-only dependencies\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Helper that executes all postbuilds until one fails.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# do_cmd: run a command via the above cmd_foo names, if necessary.\n\n# Should always run for a given target to handle command-line changes.\n\n# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n\n# Third argument, if non-zero, makes it do POSTBUILDS processing.\n\n# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n\n# spaces already and dirx strips the ? characters.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Declare the \"all\" target first so it is the default,\n\n# even though we don't have the deps yet.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# make looks for ways to re-generate included makefiles, but in our case, we\n\n# don't have a direct way. Explicitly telling make that it has nothing to do\n\n# for them makes it go faster.\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n\n# do_cmd.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Suffix rules, putting all outputs into $(obj).\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Try building from generated source, too.\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# \"all\" is a concatenation of the \"all\" targets from all the included\n\n# sub-makefiles. This is just here to clarify.\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n\n# target in our tree. Only consider the ones with .d (dependency) info:\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 40
  },
  "ElapsedTime" : 3165
}