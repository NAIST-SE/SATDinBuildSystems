{
  "Repository" : "79808",
  "Revision" : "HEAD",
  "ObjectId" : "d2fd837398c5d5d0f70e0db80534baf103133548",
  "CommitTime" : "2018-03-04T04:56:03Z",
  "Files" : {
    "src/Makefile" : {
      "ObjectId" : "2e12d1f343247d29e518ac2b4dac56dd3845602e",
      "LastModified" : "2017-01-23T17:44:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "### \n\n###  Makefile to  generated  fast-efficient  C source,  some \n\n###  C++ code and  mostly Assembly  code where  some Assembly  \n\n###  code coming  from C-Source code  Assembled with gcc,  \n\n###  this  make  file  give possibility to a C-Source  file  \n\n###  to be de-compiled and graffed with Source and Assembly \n\n###  code for  comparaison.  There is  some  NASM Code  not \n\n###  intended to support are ideally code from Jon Erickson\n\n###  Computer science teacher from No Starch Press Book Akin\n\n###  to convert into Gnu AS and tell if it's protected \n\n###  against non-regular unistd call . \n\n###\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### \n\n### Important Path information \n\n### This project own source in current directory and dump object inside \n\n### a specific path and binary file somewhere else. \n\n### \n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### \n\n### Essential Shell mecanisn, used in both rules and target.  \n\n### \n\n#SEARCH_DEFINE\t\t\t\t\t:= $(findstring $(HAVE_INTERNAL_GCC), $(shell cat $(subst .o,.c,__FILE__)))\n\n#ISDEFINE_IGCC\t\t\t\t\t:= $(shell egrep -ic __INTERNALGCC__ $@ )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### Reserved for target protect / unprotect :\n\n### This is the file signature :\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Uses of ''arithmetic expression'' is only valid by \n\n### defining SHELL to /bin/bash  or compatible shell\n\n### handling ''arithmetic expression'', \n\n### example : \n\n###           ksh ( korn shell), \n\n###           zsh (zoidberg perl shell), \n\n###           awk (awkward but possible), \n\n###           python ( not tested yet but can be a solution )\n\n###           perl ( exist from doc http://bit.ly/2iGKPwT )\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### Testing a Fibonacci number reasonably, to be told \n\n### 50th Fibonacci number is 12586269025 and dor x86_64\n\n### architecture dual processor counting 2 x 3800.47 \n\n### bogomips, does take 2m14sec +/- 5 sec generating the\n\n### number Does a ulimit may broke a make instance if\n\n### a delay is imposed to make generation. Know to be\n\n### used --load-average in make may increase time and \n\n### avoid some processor to generate error or even \n\n### conflits.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### DEFINITION OF WHAT IS A OBJECT FILE, WHAT IS A BINARY FILE\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### OUTPUT DEFINITION, WHERE OBJ AND BINARIES GOES.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### FLAGS DEFINITIONS.\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#LD_AS32_FLAGS\t\t\t\t\t\t:=__LD_EMULATION__ -dynamic-linker __LDLINUX__ -lc\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "### Variable used and transformed by IFDEF Section.\n\n### Useless to change they are conditionned to have \n\n### theirs values upon uses of Prefixed-Variable like\n\n### ABI32 ASSEMBLY_GSTAB DECOMPILATION ASM_ENTRY_FUNC\n\n### RUN_WITH_DEBUGGER, GDB_GET_FUNCT_FROM_SOURCE, \n\n### WITH_ARG\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### Related to Generating Error without uses of $(error ...)\n\n### Notice, even Creating Variable. ERRHANDLER=error\n\n### $(eval $($(ERRHANDLER) ...) ), or $(call $(ERRHANDLER),...) \n\n### directly launch the error is a recipe does contain the word $(error...\n\n### even make version 3.81, does not allow uses of if in:\n\n### $(if [condition to call the error],$(error ..) ) .\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "### This Variable acting as function called ExitWithStateMsg\n\n### does requiert a reason to launch the desired exit code, with\n\n### $(VARIABLE) in Param1 holding the MESSAGE to Exit.\n\n### While Param2 is The variable Trigger compared with Param1\n\n### In situation of Param1 == Param2, you have to specify in\n\n### Param3 The error message or type it inside the third \n\n### field of this function. Especially important the Param4\n\n### reserved to launch a specific ERROR_LEVEL handled by \n\n### OS after. But default handled by make is '1' to set in \n\n### Param4.\n\n# Pragma Variable acting as function of ExitWithStateMsg ISSHA1SUM_CERT, FAILED, SIGN_ERR_BAD_DGST, 1 \n\n# Param1 : String Variable to compare\n\n# Param2 : String Variable to compare with Param1\n\n# Param3 : Variable name, the Error Message\n\n# Param4 : Exit State (usually 1)\n\n#\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### Compared to Fnct.D BoolVarTest that generate an if \n\n### statement, it can support makefile naming convention,\n\n### as long you back-slashing the dollar sign '$' it's not\n\n### causing any problem.  \n\n### calling :\n\n### BVTIdType=0 BVTIsValueToVarAssert=True BVTIsPreambule=False BVTBoolVarName=\"\\$(1)\" BVTBoolCase=\"\\$(2)\"  BVTVTVTPLA=\"\\$(ECHO) \\$(3) ; exit \\$(4)\" BoolVarTest \n\n### Using the BoolVarTest Template Assertion of ValueToVariable to redefine the $(ECHO)\n\n### Error message. Having some specificity against '$(ECHO)' inside the template,\n\n### replacing \\$(3) by __FNCT_ASRT__ and adding prefixed variable BVTVTFnctA=\"\\$(3)\"\n\n### of anything else will open the template structure.\n\n###\n\n### Notice: BVTIdType=0 is not mandatory if it's a simple \n\n### if statement. By contrast of generating an else it require\n\n### BVTIdType=4 + BVTIdType=5 with some worry about BVTIsPreambule\n\n### where it should be set to false. Many example are available \n\n### through https://github.com/priendeau/Fnct.d\n\n###\n\n### Other uses of BVTType,\n\n### While makefile recipe support starting the command with a '@'\n\n### BVTType from BoolVarTest may take other parameter.\n\n### This String is a comma separated value transformed into an \n\n### Array. Changing the order will simply break the output and \n\n### won't output a proper if-statement. But Adding a '@' to \n\n### any if statement like ;\n\n### BVTType=\"@if:fi,@if:elif,elif:elif,elif:else,@if:else,else:fi,elif:fi\"\n\n### will give to BoolVarTest in case we are calling BVTIdType=0\n\n### to generate an if-statement with command '@' for makefile\n\n### and hide the command from the prompt.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "### Warning ASM_MAIN_GLOBAL_START, required in grep action \n\n### which may report no information in blank space are \n\n### leaved within ASM_MAIN_GLOBAL_START declaration. \n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "### IFDEF Section, Theses are all the Pre-Fixed variable to use with makefile\n\n### to add specific behavior to your make. \n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "### clean the Library instance. \n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "### single if : $(if condition,then-part[,else-part])\n\n### since this is not easy to touch to comma separated value with makefile\n\n### Package-config query should remain with comma space value instead. \n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#PKG_STRING_RES\t\t\t\t\t\t:=findstring('$(EXTERN_CSV)',$(PKG_CONFIG_QUERY))\n\n#ifdef PKG_CONFIG_QUERY\n\n# $(words text)\n\n#endif\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "### BASH-INLINE command \n\n### AS_GET_TEXT_START, used to detect line-number where the _start function is \n\n### AS_GET_LINE_TEXT, used to report number of lines for an Assembly file .\n\n### inside the file . \n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "### This part is not using define/endef for extended variable and\n\n### not using $(1), $(2), $(3)... passed by $(call VariableName,Val1,Val2...) \n\n### handler\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "### Special extended variable. \n\n### Should check if Variable MKDIR \n\n### hold ${FNCTDLIBPATH}/md_cd and if \n\n### this file exist, or we should \n\n### to process install Fnct.D Library\n\n### first. \n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "### Special extended variable. \n\n### Start The basic Fnct.D, allowing important \n\n### function to work during the installation. \n\n### it may or not depends of the present \n\n### installed Fnct.D, or simply one inside the \n\n### cloned instance of Fnct.D . This Makefile\n\n### is located inside the Fnct.D/src path\n\n### starting from this point it will use\n\n### the ../md_cd, ../_sub_Structure ... \n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "### remove addition of .bashrc \n\n### compare with a save : \n\n### diff -U 3 --from-file=.bashrc .bashrc-save > bashrc.patch\n\n### restore the original\n\n### patch -p 3 .bashrc bashrc.patch \n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#Pragma Variable as function of TEST_FILE_ERASE\n\n#Used in Situation where it's important to verify \n\n#file presence before to clean . \n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "### A method to produce a easy-driven helper. it simply bypass the update status of\n\n### a target by yielding to other process such decode which is not producing fixed\n\n### target (a.k.a file's) so it may not telling about 'target' updated.     \n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "### Notice Target :helper.encode\n\n### is lacking file dependency by being reduced by a double substitution of Tag\n\n### __FILE__ and __SRC__ , which can be reduced to \n\n### helper.encode: helper.txt\n\n### \tbase64 --wrap=0 -d > helper.encode \n\n### but 3 target to maintain an helper is just enought. \n\n### An theses target are wll expanded to be buffered with option like \n\n### pass the decoding to an application like Zenity. \n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "### This Test should only remove error while processing \n\n### pkg-config commands. Some package should be missing \n\n### and should only report nothinor to not update the\n\n### Library addition makefile. \n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "### Target pkg-config-browser\n\n### Require prefixed-variable PKG_CONFIG_QUERY=\"...\" and Query can be a \n\n### full-name package or a part of a package. \n\n### \n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 899
}