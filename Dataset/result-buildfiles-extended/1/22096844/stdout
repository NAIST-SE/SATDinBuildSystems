{
  "Repository" : "22096844",
  "Revision" : "HEAD",
  "ObjectId" : "3d920d5837d59f0562ba61e68d4d5888d4e2e9bf",
  "CommitTime" : "2019-04-10T18:39:01Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "4e71b74554a1fcbcb56359b4a33bcd4d9cb035e4",
      "LastModified" : "2019-04-09T18:31:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Clang 4.0 does not recognise -std=c++17 option, and\n\n# needs -std=c++1z.\n\n# Clang 5.0 and later recognises -std=c++17\n\n# See http://clang.llvm.org/cxx_status.html for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default, try to catch everything.\n\n# This may be painful at first but it pays off in the long run.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No -fsanitize=address for GCC because of too many false positives.\n\n# No -fsanitize=leak for GCC because it broke on my Arch Linux after\n\n# last update.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are generic flags that should be used for compiling Viua VM.\n\n# Additional flags:\n\n# \t-Wpadded            -- maybe, but throws errors on current code\n\n#\t-Wsuggest-override  -- definitely, but it is a matter of style so not now\n\n#\t-Wsuggest-final-types\t-- ditto\n\n#\t-Wsuggest-final-methods\t-- ditto\n\n#\t-Wfloat-equal       -- maybe, floating-point comparison is a tricky subject\n\n#\t-Winline\t\t\t-- fails if GCC tries to inline calls that are unlikely and\n\n#\t\t\t\t\t\t\tthe code size would grow\n\n# \t-Wdisabled-optimization\t-- some source files are too big\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -Weverything\t\t\t\t\t\t-- in theory enables *everything*\n\n# -Wdeprecated-implementations\t\t-- makes sense for C++?\n\n# -Wpadded\t\t\t\t\t\t\t-- breaks existing code\n\n# -Wexit-time-destructors \t\t\t-- breaks existing code\n\n# -Wglobal-constructors\t\t\t\t-- breaks existing code\n\n# -Wmissing-variable-declarations\t-- breaks existing code\n\n# -Wcovered-switch-default \t\t\t-- breaks existing code\n\n# -Wunused-template\t\t\t\t\t-- breaks existing code\n\n# -Wfloat-equal \t\t\t\t\t-- breaks existing code\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# For different compilers (and for TravisCI) compiler flags should be overridden, because\n\n# of throwing too many false positives or being unsupported.\n\n# If any compiler that should be treated specially is detected, CXXFLAGS is adjusted for its (the\n\n# compiler's) needs; otherwise, generic CXXFLAGS are used.\n\n#\n\n# The process of setting CXXFLAGS in a multi-phase one.\n\n# There are several things that need to be decided on:\n\n# - the C++ standard to be used\n\n# - the set of warning flags\n\n# - the set of sanitiser flags\n\n# - optimisation level\n\n#\n\n# After all this parts are set, Make will compose the final CXXFLAGS.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# By default, use generic flags.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--param max-gcse-memory=67108864\n",
        "Line" : 209,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Combine compiler and sanitiser flags, and used C++ standard into final CXXFLAGS.\n\n# CXX_EXTRA_FLAGS are meant to be supplied on the command line.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# By default, the VM is compiled using no optimisations.\n\n# This makes for shorter compile times, but prevents speed-testing the VM.\n\n# You should run the VM with -O3 every once in a while to see how it's doing.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Expose symbols in the VM kernel binary to the shared libraries that are linked at runtime.\n\n# It is done this way to avoid making every library carry its own copy of functions used to access\n\n# registers, types, the kernel, etc.\n\n# I don't yet know how this will affect library compatibility. Runtime crashes because a symbol has\n\n# been moved? Shouldn't happen because the symbol will be located dynamically.\n\n# I guess we'll see.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "############################################################\n\n# BASICS\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "############################################################\n\n# CLEANING\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "############################################################\n\n# INSTALLATION AND UNINSTALLATION\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "############################################################\n\n# PLATFORM OBJECT FILES\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "############################################################\n\n# TESTING\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "############################################################\n\n# VERSION UPDATE\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "############################################################\n\n# TOOLS\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "############################################################\n\n# RULES\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# $(CXX) $(CXXFLAGS) -Wl,--no-undefined -fPIC -shared -o $@ $^\n",
        "Line" : 461,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "############################################################\n\n# VIRTUAL MACHINE CODE\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "############################################################\n\n# OBJECTS COMMON FOR DEBUGGER AND KERNEL COMPILATION\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "############################################################\n\n# STANDARD LIBRARY\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "####\n\n#### Fix for Travis CI.\n\n#### Once GNU Make is upgraded to 4.2 or later, these targets will not\n\n#### be needed.\n\n####\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "####\n\n#### End of fix for Travis CI.\n\n####\n",
        "Line" : 814,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "############################################################\n\n# OPCODE LISTER PROGRAM\n",
        "Line" : 831,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "############################################################\n\n# DEPENDENCY LIBRARIES\n",
        "Line" : 839,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#######################################################################\n\n# TOOLING\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "docs/manual/Makefile" : {
      "ObjectId" : "00b714a03bc95f301e2e31726b0e22c57f48f90e",
      "LastModified" : "2018-02-18T13:42:57Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1250
}