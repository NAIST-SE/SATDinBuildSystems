{
  "Repository" : "20907289",
  "Revision" : "HEAD",
  "ObjectId" : "1e3a154bb18db45953d521b224dae5134ff1cd38",
  "CommitTime" : "2019-04-17T09:00:13Z",
  "Files" : {
    "chainerx_cc/CMakeLists.txt" : {
      "ObjectId" : "56969bf1728b9a229fe344ae57ec7521a0ba7b04",
      "LastModified" : "2019-03-27T12:48:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake setup\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# includes\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure options\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allow to specify *one* --generate-code option of the nvcc command.\n\n# Supposed usage is to avoid slowness of PTX JIT compilation on development.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set CMAKE_BUILD_TYPE (defaults to Release).\n\n# CMake's specification is case-insensitive, but we only accept capitalized ones.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CUDA\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CUDA_cublas_device_LIBRARY is required for CUDA > 9.2 with cmake < to 3.12.2.\n\n# This is because cublas_device was deprecated in CUDA 9.2, but FindCUDA supported it in 3.12.2.\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# BLAS\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# C++ setup\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ref. https://texus.me/2015/09/06/cmake-and-gcov/\n",
        "Line" : 100,
        "CharPositionInLine" : 43
      },
      "10" : {
        "Text" : "# cmake -DCMAKE_BUILD_TYPE=Release\n",
        "Line" : 109,
        "CharPositionInLine" : 49
      },
      "11" : {
        "Text" : "# cmake -DCMAKE_BUILD_TYPE=Debug\n",
        "Line" : 110,
        "CharPositionInLine" : 38
      },
      "12" : {
        "Text" : "# cmake -DCHAINERX_ENABLE_COVERAGE=ON|OFF\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# cmake -DCHAINERX_WARNINGS_AS_ERRORS=ON|OFF\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# cmake -DCHAINERX_ENABLE_THREAD_SANITIZER=ON|OFF\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Compiler-specific workarounds\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# clang<6.0 suggests superfluous braces for std::array initialization.\n\n# https://bugs.llvm.org/show_bug.cgi?id=21629\n",
        "Line" : 143,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dl libs\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# pybind11\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# gsl-lite\n\n# gsl-lite is a header-only library, we do not need to build and run tests\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ref. https://github.com/martinmoene/gsl-lite#api-macro\n\n# As default, functions (methods) are decorated with __host__ __device__ for the CUDA platform.\n\n# We want to stop it because we get many warnings with nvcc.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# optional-lite\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Test\n\n# TODO(niboshi): Remove gtest dependency from testing\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(durswd): Remove it. It is hack for MSVC+LLVM\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Examples\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "chainerx_cc/chainerx/CMakeLists.txt" : {
      "ObjectId" : "b73fc779957f08fdd836f755d8dddfff5ff2d61e",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/chainerx/backend_testdata/CMakeLists.txt" : {
      "ObjectId" : "16d233549279ead8688ef06386a335908442eb16",
      "LastModified" : "2019-04-01T11:28:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/chainerx/cuda/CMakeLists.txt" : {
      "ObjectId" : "4f4620065110bfaa1f9eae9efff446d3c1364f8a",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/chainerx/kernels/CMakeLists.txt" : {
      "ObjectId" : "8679f8c033d0478596eab48e3bbf0a4cd7ca149c",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/chainerx/native/CMakeLists.txt" : {
      "ObjectId" : "8f91287c88cbc26f2c8d4f81fe86338c47335e9a",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Workaround for UNIX environments to guess the BLAS include directory from its library path (.so).\n\n# This workaround is required since CMake does not set the BLAS_INCLUDE_DIRS variable.\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Directory of .so.\n",
        "Line" : 43,
        "CharPositionInLine" : 73
      },
      "2" : {
        "Text" : "# Directory of lib.\n",
        "Line" : 44,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 3
    },
    "chainerx_cc/chainerx/python/CMakeLists.txt" : {
      "ObjectId" : "dbdd294dcd5d04c498cfd04125114cc141330017",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CUDA specific bindings.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Visibility (CXX_VISIBILITY_PRESET) must be set to \"default\" to register custom exceptions, overriding the visibility configured by pybind11_add_module.\n\n# Note however that this only seems to be an issue when building with libc++.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "chainerx_cc/chainerx/routines/CMakeLists.txt" : {
      "ObjectId" : "5171009995cf270846f7218c53dec001561318ca",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/chainerx/testing/CMakeLists.txt" : {
      "ObjectId" : "fefa9c67a8a6885acee0d07ba5f1b8b941795967",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(niboshi): Remove gtest dependency from testing\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "chainerx_cc/cmake/FindBLAS.cmake" : {
      "ObjectId" : "32df5bbcfddfeae0df1d2e080e552a283ab607c9",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file chainerx_cc/LICENSE.txt or https://cmake.org/licensing for details.\n\n#\n\n# Borrowed from https://github.com/Kitware/CMake/blob/7aa41095fd23d31a4572966ba53ad85f61f5bc99/Modules/FindBLAS.cmake,\n\n# and some modifications are appiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindBLAS\n--------\n\nFind BLAS library\n\nThis module finds an installed fortran library that implements the\nBLAS linear-algebra interface (see http://www.netlib.org/blas/).  The\nlist of libraries searched for is taken from the autoconf macro file,\nacx_blas.m4 (distributed at\nhttp://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\nThis module sets the following variables:\n\n::\n\n  BLAS_FOUND - set to true if a library implementing the BLAS interface\n    is found\n  BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n    and -L).\n  BLAS_LIBRARIES - uncached list of libraries (using full path name) to\n    link against to use BLAS (may be empty if compiler implicitly links\n    BLAS)\n  BLAS95_LIBRARIES - uncached list of libraries (using full path name)\n    to link against to use BLAS95 interface\n  BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\n    is found\n\nThe following variables can be used to control this module:\n\n::\n\n  BLA_STATIC  if set on this determines what kind of linkage we do (static)\n  BLA_VENDOR  if set checks only the specified vendor, if not set checks\n     all the possibilities\n  BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n  BLA_PREFER_PKGCONFIG  if set pkg-config will be used to search for a BLAS\n     library first and if one is found that is preferred\n\nList of vendors (BLA_VENDOR) valid in this module:\n\n* Goto\n* OpenBLAS\n* FLAME\n* ATLAS PhiPACK\n* CXML\n* DXML\n* SunPerf\n* SCSL\n* SGIMATH\n* IBMESSL\n* Intel10_32 (intel mkl v10 32 bit)\n* Intel10_64lp (intel mkl v10+ 64 bit, threaded code, lp64 model)\n* Intel10_64lp_seq (intel mkl v10+ 64 bit, sequential code, lp64 model)\n* Intel10_64ilp (intel mkl v10+ 64 bit, threaded code, ilp64 model)\n* Intel10_64ilp_seq (intel mkl v10+ 64 bit, sequential code, ilp64 model)\n* Intel (older versions of mkl 32 and 64 bit)\n* ACML\n* ACML_MP\n* ACML_GPU\n* Apple\n* NAS\n* Generic\n\n.. note::\n\n  C/CXX should be enabled to use Intel mkl\n\n#]=======================================================================]",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check the language being used\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\n",
        "Line" : 148,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#  message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Implicitly linked BLAS libraries\n",
        "Line" : 197,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#BLAS in intel mkl 10+ library? (em64t 64bit)\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 239,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 250,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# old version\n",
        "Line" : 257,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 260,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 265,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# old version\n",
        "Line" : 278,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 282,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 306,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 317,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# old version\n",
        "Line" : 320,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 323,
        "CharPositionInLine" : 12
      },
      "22" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 332,
        "CharPositionInLine" : 10
      },
      "23" : {
        "Text" : "# old version\n",
        "Line" : 346,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 350,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "#older vesions of intel mkl libs\n",
        "Line" : 364,
        "CharPositionInLine" : 10
      },
      "26" : {
        "Text" : "# gotoblas (http://www.tacc.utexas.edu/tacc-projects/gotoblas2)\n",
        "Line" : 397,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# OpenBLAS (http://www.openblas.net)\n",
        "Line" : 411,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# FLAME's blis library (https://github.com/flame/blis)\n",
        "Line" : 425,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# BLAS in IBM ESSL library? (requires generic BLAS lib, too)\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# try to find acml in \"standard\" paths\n",
        "Line" : 544,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# 32 bit builds not supported on Open64 but for code simplicity\n\n# We'll just use the same directory twice\n",
        "Line" : 578,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Either acml or acml_mp should be in LD_LIBRARY_PATH but not both\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ACML\n",
        "Line" : 673,
        "CharPositionInLine" : 9
      },
      "41" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# NOTE: ChainerX does not support ATLAS because we encountered\n\n# `undefined reference 'cblas_sgemm'` errors, at least on Ubuntu16.04.\n\n# Also, it is well known that ATLAS is significantly slower than OpenBLAS.\n",
        "Line" : 716,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Set BLAS_FOUND\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# On compilers that implicitly link BLAS (such as ftn, cc, and CC on Cray HPC machines)\n\n# we used a placeholder for empty BLAS_LIBRARIES to get through our logic above.\n",
        "Line" : 748,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "chainerx_cc/cmake/FindCuDNN.cmake" : {
      "ObjectId" : "4287ffc62d9e90c9db91683cea891989acd6447e",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find cuDNN\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  CUDNN_ROOT_DIR:            Base directory where all cuDNN components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  CUDNN_FOUND\n\n#  CUDNN_INCLUDE_DIRS\n\n#  CUDNN_LIBRARIES\n\n#  CUDNN_LIBRARY_DIRS\n\n#\n\n# Borrowed from https://github.com/pytorch/pytorch/blob/93f8d98027f29fc8190658fd52c2d5284e51875f/cmake/Modules/FindCuDNN.cmake,\n\n# and some modifications are appiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get cuDNN version\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Assemble cuDNN version\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "chainerx_cc/cmake/clang-tidy.cmake" : {
      "ObjectId" : "0234f930c8c11f9e6959b9836b86e0429d0acce6",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clang-tidy\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Let cmake generate compile_commands.json\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "chainerx_cc/cmake/third-party.cmake" : {
      "ObjectId" : "fb03b8d1c9826e1cc587f0fa3395f0331545e3af",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Download and unpack a third-party library at configure time\n\n# The original code is at the README of google-test:\n\n# https://github.com/google/googletest/tree/master/googletest\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "chainerx_cc/examples/CMakeLists.txt" : {
      "ObjectId" : "7fd8bc14620544ac1615405dfe65843b9299a4ef",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/examples/mnist/CMakeLists.txt" : {
      "ObjectId" : "223d097d3a70347012d6f040e4b0d7c49f765808",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/third_party/gsl-lite.cmake" : {
      "ObjectId" : "aac0c8597e6951adaeecd7cdbc44b96c3b466289",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/third_party/gtest.cmake" : {
      "ObjectId" : "59b2a5ba4edff061fdd966ec73ab35be8a5516b4",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/third_party/optional-lite.cmake" : {
      "ObjectId" : "09684b2e7959420c791386d31fd64ff5e8b5895e",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chainerx_cc/third_party/pybind11.cmake" : {
      "ObjectId" : "4a6f696ab34261b8c8f5ff11c50a200b0d835ca5",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/Makefile" : {
      "ObjectId" : "ae1e47a731792eb8f04c06c17cc4f45432957331",
      "LastModified" : "2019-04-17T06:50:17Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 19,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 5149
}