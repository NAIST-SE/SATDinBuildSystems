{
  "Repository" : "4489243",
  "Revision" : "HEAD",
  "ObjectId" : "ee4028b8e4cf6a85002a296a461534e2380f0d57",
  "CommitTime" : "2019-04-06T07:15:43Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1b0bca9f19bcbe24359df58c7fd32b57971057b1",
      "LastModified" : "2019-03-28T13:22:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## PROJECT\n\n## name and version\n\n##\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## INCLUDE\n\n##\n\n##\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## OPTIONS\n\n##\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n\n## CONFIGURATION\n\n##\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n\n## TARGET\n\n## create target and add include path\n\n##\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## add debug view definition file for msvc (natvis)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##\n\n## TESTS\n\n## create and configure the unit test target\n\n##\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#adds option BUILD_TESTING (default ON)\n",
        "Line" : 78,
        "CharPositionInLine" : 15
      },
      "8" : {
        "Text" : "##\n\n## INSTALL\n\n## install header files, generate and install cmake config files for find_package()\n\n##\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Makefile" : {
      "ObjectId" : "3afca525b1bc067350812d4d8811aafecba90265",
      "LastModified" : "2019-04-06T07:03:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########################################################################\n\n# configuration\n\n##########################################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# directory to recent compiler binaries\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find GNU sed to use `-i` parameter\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########################################################################\n\n# source files\n\n##########################################################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the list of sources in the include folder\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the single header (amalgamated from the source files)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########################################################################\n\n# documentation of the Makefile's targets\n\n##########################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# main target\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##########################################################################\n\n# unit tests\n\n##########################################################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# build unit tests\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# run unit tests\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# run unit tests and skip expensive tests\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##########################################################################\n\n# coverage\n\n##########################################################################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##########################################################################\n\n# documentation tests\n\n##########################################################################\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# compile example files and check output\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##########################################################################\n\n# warning detector\n\n##########################################################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# calling Clang with all warnings, except:\n\n# -Wno-c++2a-compat: u8 literals will behave differently in C++20...\n\n# -Wno-deprecated-declarations: the library deprecated some functions\n\n# -Wno-documentation-unknown-command: code uses user-defined commands like @complexity\n\n# -Wno-exit-time-destructors: warning in json code triggered by NLOHMANN_JSON_SERIALIZE_ENUM\n\n# -Wno-float-equal: not all comparisons in the tests can be replaced by Approx\n\n# -Wno-keyword-macro: unit-tests use \"#define private public\"\n\n# -Wno-padded: padding is nothing to warn about\n\n# -Wno-range-loop-analysis: items tests \"for(const auto i...)\"\n\n# -Wno-switch-enum -Wno-covered-switch-default: pedantic/contradicting warnings about switches\n\n# -Wno-weak-vtables: exception class is defined inline, but has virtual method\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# calling GCC with most warnings\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########################################################################\n\n# benchmarks\n\n##########################################################################\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########################################################################\n\n# fuzzing\n\n##########################################################################\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# the overall fuzz testing target\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "##########################################################################\n\n# Static analysis\n\n##########################################################################\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# call cppcheck <http://cppcheck.sourceforge.net>\n\n# Note: this target is called by Travis\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# call Clang Static Analyzer <https://clang-analyzer.llvm.org>\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# call cpplint <https://github.com/cpplint/cpplint>\n\n# Note: some errors expected due to false positives\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# call Clang-Tidy <https://clang.llvm.org/extra/clang-tidy/>\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# call PVS-Studio Analyzer <https://www.viva64.com/en/pvs-studio/>\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# call Infer <https://fbinfer.com> static analyzer\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# call OCLint <http://oclint.org> static analyzer\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# execute the test suite with Clang sanitizers (address and undefined behavior)\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "##########################################################################\n\n# Code format and source amalgamation\n\n##########################################################################\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# call the Artistic Style pretty printer on all source files\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# create single header file\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# call the amalgamation tool and pretty print\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# check if file single_include/nlohmann/json.hpp has been amalgamated from the nlohmann sources\n\n# Note: this target is called by Travis\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# check if every header in nlohmann includes sufficient headers to be compiled individually\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "##########################################################################\n\n# CMake\n\n##########################################################################\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# grep \"^option\" CMakeLists.txt test/CMakeLists.txt | sed 's/(/ /' | awk '{print $2}' | xargs\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# check if all flags of our CMake files work\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# call target `check_cmake_flags_do` twice: once for minimal required CMake version 3.1.0 and once for the installed version\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "##########################################################################\n\n# ChangeLog\n\n##########################################################################\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Create a ChangeLog based on the git log using the GitHub Changelog Generator\n\n# (<https://github.com/github-changelog-generator/github-changelog-generator>).\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# variable to control the diffs between the last released version and the current repository state\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "##########################################################################\n\n# Release files\n\n##########################################################################\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Create the files for a release and add signatures and hashes. We use `--no-extra` to make the resulting ZIP file\n\n# reproducible, see <https://content.pivotal.io/blog/barriers-to-deterministic-reproducible-zip-files>.\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "##########################################################################\n\n# Maintenance\n\n##########################################################################\n",
        "Line" : 607,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# clean up\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "953b1cb8497d3bbc0d672d669cf1f7096fda8dab",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set compiler flags\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configure Google Benchmarks\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# header directories\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# copy test files to build folder\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# benchmark binary\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "benchmarks/thirdparty/benchmark/CMakeLists.txt" : {
      "ObjectId" : "b1c1d3d5a90e4ff84b9c6b912ceda6ee626d6639",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n\n# Support no if() IN_LIST operator\n",
        "Line" : 6,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Allow unmet dependencies to be met using CMake's ExternalProject mechanics, which\n\n# may require downloading the source code.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This option can be used to disable building and running unit tests which depend on gtest\n\n# in cases where it is not possible to build or find a valid version of gtest.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME: The --coverage flag needs to be removed when building assembly\n\n# tests for this to work.\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 48,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# This option disables the building and running of the assembly verification tests\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 149,
        "CharPositionInLine" : 52
      },
      "17" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Coverage build type\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Set up directories\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Build the targets\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "benchmarks/thirdparty/benchmark/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "d0d2099814402a3fc54ed2be2b61cd4f31d5c5f7",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add -Werror to ensure the compiler generates an error if the warning flag\n\n# doesn't exist.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "benchmarks/thirdparty/benchmark/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "c4c4d660f1eba1a484fcd2c2c11f7e94115ace31",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "benchmarks/thirdparty/benchmark/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "88cebe3a1caac022b39199870c09d8804d45409b",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "benchmarks/thirdparty/benchmark/cmake/HandleGTest.cmake" : {
      "ObjectId" : "7ce1a633d65a2e7102ce8df365b7a2874f08e727",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Since 10/Feb/2017 the googletest trunk has had a bug where\n\n# -Werror=unused-function fires during the build on OS X. This is a temporary\n\n# workaround to keep our travis bots from failing. It should be removed\n\n# once gtest is fixed.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Use gmock_main instead of gtest_main because it initializes gtest as well.\n\n# Note: The libraries are listed in reverse order of their dependancies.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 2.8 and older don't respect INTERFACE_INCLUDE_DIRECTORIES, so we\n\n# have to add the paths ourselves.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# FIXME: We don't currently require the gmock library to build the tests,\n\n# and it's likely we won't find it, so we don't try. As long as we've\n\n# found the gmock/gmock.h header and gtest_main that should be good enough.\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "benchmarks/thirdparty/benchmark/cmake/Modules/FindLLVMAr.cmake" : {
      "ObjectId" : "23469813cfab5946c86002cef85caa10e7165380",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/thirdparty/benchmark/cmake/Modules/FindLLVMNm.cmake" : {
      "ObjectId" : "e56430a04f6e84629bb3e06ae511e6f14829319a",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/thirdparty/benchmark/cmake/Modules/FindLLVMRanLib.cmake" : {
      "ObjectId" : "7b53e1a790590bdfc07adf41f0ae74b4a9b61ff0",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/thirdparty/benchmark/cmake/llvm-toolchain.cmake" : {
      "ObjectId" : "fc119e52fd26a59786b3480f3e6c64c72b78ad8d",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/thirdparty/benchmark/cmake/split_list.cmake" : {
      "ObjectId" : "67aed3fdc8579b7d9a6f06a73fa9b6844976e691",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "benchmarks/thirdparty/benchmark/src/CMakeLists.txt" : {
      "ObjectId" : "701804ba0e00fa1105e8aa7fc6b3480bb5540005",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need extra libraries on Solaris\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Benchmark main library\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "doc/Makefile" : {
      "ObjectId" : "c255f972655a1a96050dc151079b3956ec4be925",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########################################################################\n\n# example files\n\n##########################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# where are the example cpp files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create output from a stand-alone example file\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# compare created output with current output of the example files\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# create links to try the code online\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# create output from all stand-alone example files\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check output of all stand-alone example files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########################################################################\n\n# Doxygen HTML documentation\n\n##########################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# create Doxygen documentation\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##########################################################################\n\n# docset\n\n##########################################################################\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# create docset for Dash\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "b73dfc9ad237e5a8454b8e6742916b8ee6f0e005",
      "LastModified" : "2019-04-06T07:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# enable profiling\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# from https://github.com/RWTH-HPC/CMake-codecov/blob/master/cmake/FindGcov.cmake\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# collect all source files from the chosen include dir\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add target to collect coverage information and generate HTML file\n\n# (filter script from https://stackoverflow.com/a/43726240/266378)\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#############################################################################\n\n# doctest library with the main function to speed up build\n\n#############################################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# https://stackoverflow.com/questions/2368811/how-to-set-warning-level-in-cmake\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force to always compile with W4\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Disable warning C4389: '==': signed/unsigned mismatch\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Disable warning C4309: 'static_cast': truncation of constant value\n\n# Disable warning C4566: character represented by universal-character-name '\\uFF01' cannot be represented in the current code page (1252)\n\n# Disable warning C4996: 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::operator <<': was declared deprecated\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# https://github.com/nlohmann/json/issues/1114\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#############################################################################\n\n# one executable for each unit test file\n\n#############################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#############################################################################\n\n# Test the generated build configs\n\n#############################################################################\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "test/Makefile" : {
      "ObjectId" : "499ff3c23bb3983297df5d58457db70655813b87",
      "LastModified" : "2019-04-03T15:28:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########################################################################\n\n# unit tests\n\n##########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# additional flags\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# main rules\n\n##############################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# single test file\n\n##############################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n\n# individual test cases\n\n##############################################################################\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n\n# fuzzer\n\n##############################################################################\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "test/cmake_add_subdirectory/CMakeLists.txt" : {
      "ObjectId" : "ad04547e7d1c3943781a7e119c7372eaf74a1274",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cmake_add_subdirectory/project/CMakeLists.txt" : {
      "ObjectId" : "21357b68579e1485d545ec331deaa0ad3992494f",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cmake_import/CMakeLists.txt" : {
      "ObjectId" : "911c342c6ded16a057d16480e9a7c05eafb0cd23",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cmake_import/project/CMakeLists.txt" : {
      "ObjectId" : "fe892fc1f67ff309e92e6a1507d461c8370e9282",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cmake_import_minver/CMakeLists.txt" : {
      "ObjectId" : "8cef2fabb4c29198bf6791a0f86dc1a11cf6d7f8",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cmake_import_minver/project/CMakeLists.txt" : {
      "ObjectId" : "29056bdc54601f760f957e4b01a2a7acce448656",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/thirdparty/Fuzzer/CMakeLists.txt" : {
      "ObjectId" : "70bd017bae6b6b5773f3c3bc41621571e4f358b9",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable the coverage and sanitizer instrumentation for the fuzzer itself.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/thirdparty/Fuzzer/test/CMakeLists.txt" : {
      "ObjectId" : "c0457746a0e76137a4957c6053d9813d8543e09c",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build all these tests with -O0, otherwise optimizations may merge some\n\n# basic blocks and we'll fail to discover the targets.\n\n# We change the flags for every build type because we might be doing\n\n# a multi-configuration build (e.g. Xcode) where CMAKE_BUILD_TYPE doesn't\n\n# mean anything.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Use of XX here is to avoid a CMake warning due to CMP0054\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Enable the coverage instrumentation (it is disabled for the Fuzzer lib).\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_libfuzzer_test(<name>\n\n#   SOURCES source0.cpp [source1.cpp ...]\n\n#   )\n\n#\n\n#   Declares a LibFuzzer test executable with target name LLVMFuzzer-<name>.\n\n#\n\n#   One or more source files to be compiled into the binary must be declared\n\n#   after the SOURCES keyword.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Place binary where llvm-lit expects to find it\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Variable to keep track of all test targets\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n\n# Basic tests\n\n###############################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LeakSanitizer is not supported on OSX right now\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "###############################################################################\n\n# Unit tests\n\n###############################################################################\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################\n\n# Additional tests\n\n###############################################################################\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add_subdirectory(uninstrumented)\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################\n\n# Configure lit to run the tests\n\n#\n\n# Note this is done after declaring all tests so we can inform lit if any tests\n\n# need to be disabled.\n\n###############################################################################\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "test/thirdparty/Fuzzer/test/no-coverage/CMakeLists.txt" : {
      "ObjectId" : "d2f6f438ad79d85ecda0d8053231a509c4b97cb0",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests are not instrumented with coverage,\n\n# but have coverage rt in the binary.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# AFL Driver test\n\n###############################################################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Propagate value into parent directory\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/thirdparty/Fuzzer/test/ubsan/CMakeLists.txt" : {
      "ObjectId" : "7a9eacdbe7df36e933f92d14e43a6ce87cc12f7c",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests are instrumented with ubsan in non-recovery mode.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Propagate value into parent directory\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/thirdparty/Fuzzer/test/uninstrumented/CMakeLists.txt" : {
      "ObjectId" : "29b66e6e586a6c8a30551bb563a91cdf5b2920fa",
      "LastModified" : "2019-01-16T13:50:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests are not instrumented with coverage and don't\n\n# have coverage rt in the binary.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Propagate value into parent directory\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 3669
}