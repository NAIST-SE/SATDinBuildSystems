{
  "Repository" : "84582",
  "Revision" : "HEAD",
  "ObjectId" : "40940b04dc2c9f84717d3516faa597908ac1393a",
  "CommitTime" : "2019-03-27T01:53:47Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "008a38b506b058d6d7306c29044984377ac50dd3",
      "LastModified" : "2019-03-19T00:47:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# lists a few additional items to exclude for Harbour packages\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# l10n\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following decides what will be the\n\n# input for the rsync targets that run on \n\n# the content we copy here to the sourcedir.\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# translations\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# cleanup the source tree\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# cleanup the source tree for a Sailfish OS package\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# first mark modrana.py as not executable as Harbour RPM validator does not like that\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# also mark the startup scripts as not executable to make the Harbour RPM validator happy\n",
        "Line" : 63,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# cleanup the source for a Sailfish OS Harbour package\n",
        "Line" : 66,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# install *all* available icons - just in case :)\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# install the desktop file\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# install the startup scripts\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# install the launcher\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# install the icons\n",
        "Line" : 109,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# install the desktop file\n",
        "Line" : 120,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# install the sailfish version of the launcher\n",
        "Line" : 123,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# build the generic version of the Qt5/C++ native launcher\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# build the Sailfish OS specififc version of the Qt5/C++ native launcher\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# make archive from folder contents, not git\n\n# - this is useful for debugging packaging issues to update the tarball quickly\n\n# - this really includes *everything* other than top-level compressed tarballs\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# prevent previous tarballs from being added\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# also exclude .git\n",
        "Line" : 165,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# stage all changed/added gettext files\n",
        "Line" : 233,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# stage all Qt translation files\n",
        "Line" : 237,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# run tests in a Docker container\n",
        "Line" : 249,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# run tests for Python code\n",
        "Line" : 255,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# run tests for QML code\n",
        "Line" : 259,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 26
    },
    "run/launcher/launcher.pro" : {
      "ObjectId" : "f352e8f9fc8c9af4ac230195340c7993713b814e",
      "LastModified" : "2019-03-14T02:27:44Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# The following define makes your compiler emit warnings if you use\n\n# any feature of Qt which as been marked deprecated (the exact warnings\n\n# depend on your compiler). Please consult the documentation of the\n\n# deprecated API in order to know how to port your code away from it.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can also make your code fail to compile if you use deprecated APIs.\n\n# In order to do so, uncomment the following line.\n\n# You can also select to disable deprecated APIs only up to a certain version of Qt.\n\n#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle platform specific stuff\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For Sailfish OS:\n\n# - tell the C++ code to use the correct ifdefs\n\n# - default to useing the silica UC backend\n\n# - add sailfishapp to CONFIG\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# default Universal Components backend\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path to the modRana main.qml\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Python path for modRana\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# define Universal Components set root folder path\n\n# - it ie expected this gets combined with the backend folder name and put to QML import path,\n\n#   so that the respective backend gets used on runtime\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# define default Universal Components folder name\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# deploy the resulting library into /usr/bin\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    }
  },
  "FileTypes" : {
    "QMAKE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2286
}