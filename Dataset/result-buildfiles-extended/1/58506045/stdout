{
  "Repository" : "58506045",
  "Revision" : "HEAD",
  "ObjectId" : "4ee5f3c6dbd0981f6d8c7a9b2b1763439cb56039",
  "CommitTime" : "2019-02-06T00:23:03Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ef6b2a782b4f225bf16faed0a4c40f5c4798e4a8",
      "LastModified" : "2019-01-29T22:41:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Define the package\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If building in debug mode, define the HAVE_KOKKOSKERNELS_DEBUG macro.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Set up subpackage-specific configuration options\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# \"Optimization level\" for KokkosKernels computational kernels.  The\n\n# higher the level, the more code variants get generated, and thus the\n\n# longer the compile times.  However, more code variants mean both\n\n# better performance overall, and more uniform performance for corner\n\n# cases.  Values of current interest (24 Apr 2014) are 0, 1, and 2.\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable experimental features of KokkosKernels if set at configure\n\n# time. Default is no.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define what execution spaces KokkosKernels enables.\n\n# KokkosKernels may enable fewer execution spaces than\n\n# Kokkos enables.  This can reduce build and test times.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ==================================================================\n\n# Enable Scalar Types for ETI\n\n# ==================================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ==================================================================\n\n# Enable Ordinal Types for ETI\n\n# ==================================================================\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ==================================================================\n\n# Enable Offset Types for ETI\n\n# ==================================================================\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#GLOBAL_SET(KokkosKernels_INST_OFFSET_INT64_T_DEFAULT  OFF)\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ==================================================================\n\n# Enable Third Party Libraries\n\n# ==================================================================\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# CUBLAS is ON by default when CUDA is enabled\n",
        "Line" : 305,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Tribit provides TPL mechanism for CUSPARSE; thus, use it\n",
        "Line" : 307,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# ==================================================================\n\n# Fortran Complex BLAS\n\n# ==================================================================\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ==================================================================\n\n# CMake Summary\n\n# ==================================================================\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ==================================================================\n\n# Process subdirectories\n\n# ==================================================================\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#TRIBITS_ADD_EXAMPLE_DIRECTORIES(example)\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "CheckHostBlasReturnComplex.cmake" : {
      "ObjectId" : "f7a74ce2be41d9bae83334cf4a5bfd5e5947472b",
      "LastModified" : "2019-01-29T22:41:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Dependencies.cmake" : {
      "ObjectId" : "84858624981dc2d18a33f5c2ce1a58ed347a6c28",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ExplicitInstantiationSupport.cmake" : {
      "ObjectId" : "c1accc56518de8254eaf99fd9c99c5b67d3656fb",
      "LastModified" : "2017-02-21T17:23:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# mfh 11 Oct 2016: Hack to work around #701.  Strip out anything that\n\n# looks like a Kokkos \"Node\" type (not the same as a Device type!!!)\n\n# from the manglings and typedefs lists.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This CMake module generates the following header file, which gets\n\n# written to the build directory (like other header files that CMake\n\n# generates).  The file contains macros that do instantiation over a\n\n# finite set of template parameter combinations.  We use the macros\n\n# both for ETI (explicit template instantiation), and for tests.\n\n# Thus, the macros need to be generated even if ETI is OFF.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Users have the option to generate the above header file themselves.\n\n# We prefer that users let Trilinos generate the header file.\n\n# However, folks who make intense use of TriBITS sometimes find that\n\n# reusing a previously generated header file shaves a couple minutes\n\n# off their CMake configuration time.  Thus, we give them that option.\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The user wants us to accept their header file and not generate one.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n# The user wants us to generate the header file.  This is the default\n\n# behavior.\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tpetra ETI type fields.  S, LO, D correspond to the template\n\n# parameters Scalar, LocalOrdinal, and DeviceType.  KokkosKernels does\n\n# not need to know about GlobalOrdinal so we omit that.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set up a pattern that excludes all Scalar types that are also\n\n# possible GlobalOrdinal types, but includes all other types.\n\n# TriBITS' ETI system knows how to interpret this pattern.\n\n#\n\n# FIXME (mfh 17 Aug 2015, 16 Oct 2015) A better way to do this would\n\n# be to subtract away all enabled GlobalOrdinal types.  Plus, what if\n\n# someone really wants a CrsMatrix<int,...>?\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TriBITS' ETI system expects a set of types to be a string, delimited\n\n# by |.  Each template parameter (e.g., Scalar, LocalOrdinal, ...) has\n\n# its own set.  The JOIN commands below set up those lists.  We use\n\n# the following sets that this subpackage defines:\n\n#\n\n# Scalar:       ${PACKAGE_NAME}_ETI_SCALARS\n\n# LocalOrdinal: ${PACKAGE_NAME}_ETI_LORDS\n\n# Device:       ${PACKAGE_NAME}_ETI_DEVICES\n\n#\n\n# Note that the Scalar set from Tpetra includes the Scalar =\n\n# GlobalOrdinal case.  We have to exclude that explicitly in what\n\n# follows.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set up the set of enabled type combinations, in a format that\n\n# TriBITS understands.\n\n#\n\n# mfh 17 Aug 2015, 16 Oct 2015: I don't exactly understand what's\n\n# going on here, but it looks like if ETI is enabled, we let users\n\n# modify ${PACKAGE_NAME}_ETI_LIBRARYSET, and if it's not, we don't.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Construct the \"type expansion\" string that TriBITS' ETI system\n\n# expects.  Even if ETI is OFF, we will use this to generate macros\n\n# for instantiating tests.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Construct the \"type expansion\" string that TriBITS' ETI system\n\n# expects.  Even if ETI is OFF, we will use this to generate macros\n\n# for instantiating tests.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Generate the instantiation macros.  These go into\n\n# ${PACKAGE_NAME}_ETIHelperMacros.h, which is generated from\n\n# ${PACKAGE_NAME}_ETIHelperMacros.h.in (in this directory).\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Generate macros that exclude possible ordinal types from the\n\n# list of Scalar types.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Generate macros include ONLY possible ordinal types in the list of Scalar types.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Generate macros that include all Scalar types (if applicable),\n\n# including possible ordinal types.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Generate \"mangled\" typedefs.  Macros sometimes get grumpy when types\n\n# have spaces, colons, or angle brackets in them.  This includes types\n\n# like \"long long\" or \"std::complex<double>\".  Thus, we define\n\n# typedefs that remove the offending characters.  The typedefs also\n\n# get written to the generated header file.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Generate the header file ${PACKAGE_NAME}_ETIHelperMacros.h, from the\n\n# file ${PACKAGE_NAME}_ETIHelperMacros.h.in (that lives in this\n\n# directory).  The generated header file gets written to the Trilinos\n\n# build directory, in packages/tpetra/kernels/src/.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "example/CMakeLists.txt" : {
      "ObjectId" : "e772c688d1f8816fdb1fac365f105af1f692a90d",
      "LastModified" : "2015-09-22T23:06:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/Makefile" : {
      "ObjectId" : "9dba24dfa01c503c5b59b4787bf20f112627ff84",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#=======================================================================\n\n#=================== Settings ==========================================\n\n#=======================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=======================================================================\n\n#=================== Include Kokkos and KokkosKernels ==================\n\n#=======================================================================\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(KOKKOS_PATH)/Makefile.kokkos\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=======================================================================\n\n#=================== Add common source files ===========================\n\n#=======================================================================\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=======================================================================\n\n#= Example Directories\n\n#=======================================================================\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#=======================================================================\n\n#========================== TARGETS ====================================\n\n#=======================================================================\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#=======================================================================\n\n#=================== Make Rules ========================================\n\n#=======================================================================\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#depend:\n\n#\tmakedepend -Y ${EXECUTABLES} $(TEST_HEADERS)\n\n# DO NOT DELETE\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "example/fenl/CMakeLists.txt" : {
      "ObjectId" : "2d1cacf5b16c8e4dc9c163978a3035838f093d39",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/fenl/Makefile" : {
      "ObjectId" : "37e1935b8c9c792755925f05fc62b145a5463cf9",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Settings for what to build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To enable Trilinos you need to copy KokkosKernels_config.h and KokkosKernels_ETIHelperMacros.h \n\n# from an appropriately configure Trilinos build directory (you don't need to build).\n\n# The rest is accessed from Trilinos source.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Path settings\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MKL_PATH=/home/projects/install/rhel6-x86_64/sems/compiler/intel/16.0.1/base/mkl\n\n#On Sandia Testbeds this should work:\n\n#MKL_PATH=${MKLROOT}\n\n#On Sandia SEMS modules this should work:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compilation rules\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "example/wiki/Makefile" : {
      "ObjectId" : "f7c3afc64f6dea1e877793a2a4d56ba7ec91970e",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Turn of ETI\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compilation rules\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "example/wiki/blas/abs/Makefile" : {
      "ObjectId" : "2f7cb9f2d71299bc9366ec9224a4adf9e5dcbf92",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "perf_test/CMakeLists.txt" : {
      "ObjectId" : "4028ce6824958168a12a77d8520d55296e637c3c",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# At some point, we may wish to make this into real \"performance\n\n# tests,\" in the sense that they can pass or fail.  At that point, use\n\n# \"CATEGORIES PERFORMANCE\" to mark them as such.  For now, we just\n\n# build the executables for manual use, but don't run the tests.  They\n\n# build correctly with or without MPI, but only run them with a single\n\n# MPI process.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_SUBDIRECTORIES(common)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "perf_test/Makefile" : {
      "ObjectId" : "b219dbc7cdc87c5d36fb277090979c0c34cdf9d0",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#=======================================================================\n\n#=================== Settings ==========================================\n\n#=======================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=======================================================================\n\n#=================== Include Kokkos and KokkosKernels ==================\n\n#=======================================================================\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(KOKKOS_PATH)/Makefile.kokkos\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=======================================================================\n\n#=================== Add common source files ===========================\n\n#=======================================================================\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=======================================================================\n\n#===================== SPARSE PERF =====================================\n\n#=======================================================================\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#removing this for now, as those blas tests have teuchos dependency.\n\n#EXECUTABLES = $(wildcard ${KOKKOSKERNELS_SRC_PATH}/perf_test/blas/*cpp)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build yaml dependent performance class unit tests\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#=======================================================================\n\n#===================== BATCHED BLAS/LAPACK PERF ========================\n\n#=======================================================================\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#=======================================================================\n\n#===================== TEST TARGETS ====================================\n\n#=======================================================================\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#TEST_TARGETS = $(patsubst %.cpp, %.exe, $(EXECUTABLES))\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#=======================================================================\n\n#=================== Make Rules ========================================\n\n#=======================================================================\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#depend:\n\n#\tmakedepend -Y ${EXECUTABLES} $(TEST_HEADERS)\n\n# DO NOT DELETE\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "perf_test/graph/CMakeLists.txt" : {
      "ObjectId" : "f5f3b812726c59fc21b54ef71803334d7c2b78d5",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Below will probably fail on GPUs.\n\n#TRIBITS_ADD_EXECUTABLE(\n\n#  graph_triangle\n\n#  SOURCES KokkosGraph_triangle.cpp      \n\n#  )\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "perf_test/performance/CMakeLists.txt" : {
      "ObjectId" : "d91ee5791ffb729e3c518321c27527f8ebdbe60e",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the two performance tests for the Performance class\n\n# located in Kokkos_Performance.hpp.\n\n# performance_validate validates the behavior of the Performance class.\n\n# performance_example is a simple example of using it.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "perf_test/sparse/CMakeLists.txt" : {
      "ObjectId" : "2c1c76e533cc012a7864a3938c20f0fccd57cb74",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "perf_test/sparse/spmv/Makefile" : {
      "ObjectId" : "b607dbd6c48967d2a631d5c567b162b708f45237",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Settings for what to build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To enable Trilinos you need to copy KokkosKernels_config.h and KokkosKernels_ETIHelperMacros.h \n\n# from an appropriately configure Trilinos build directory (you don't need to build).\n\n# The rest is accessed from Trilinos source.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Path settings\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MKL_PATH=/home/projects/install/rhel6-x86_64/sems/compiler/intel/16.0.1/base/mkl\n\n#On Sandia Testbeds this should work:\n\n#MKL_PATH=${MKLROOT}\n\n#On Sandia SEMS modules this should work:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Compilation rules\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "3b4914ae84fc6a9cfe3ee4456071e274e079bdb8",
      "LastModified" : "2019-01-29T22:41:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Include BLAS\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Blas host wrapper\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Include Sparse\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Include graph\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Include batched\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Include Common\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#LIST(APPEND HEADERS ${CMAKE_CURRENT_BINARY_DIR}/${PACKAGE_NAME}_ETIHelperMacros.h)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Make a trivial change here if you add a file either to this\n\n# directory, or to the impl/ subdirectory.  Keep making changes\n\n# whenever you add or remove a .cpp or .hpp file, and everything will\n\n# be OK.  Here is another such change, and here is yet another.\n\n#\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/Makefile" : {
      "ObjectId" : "de1d3d9cfc1efcf1fb285d23d40c7bf394c04bef",
      "LastModified" : "2019-01-29T22:41:41Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#=======================================================================\n\n#=================== Settings ==========================================\n\n#=======================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=======================================================================\n\n#=================== Include Kokkos and KokkosKernels ==================\n\n#=======================================================================\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\trm -f *.o $(KOKKOSKERNELS_INTERNAL_LIBRARY) KokkosKernels_config.h KokkosKernels_config.tmp KokkosCore_config.h KokkosCore_config.tmp \n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test_common/CMakeLists.txt" : {
      "ObjectId" : "a3e389a10676c2d917fc23431ef41f9b2c735ecb",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unit_test/CMakeLists.txt" : {
      "ObjectId" : "3155d6d0a6c3521df297df1988bc52b3a0862ce1",
      "LastModified" : "2019-01-29T22:41:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/batched)\n\n#INCLUDE_DIRECTORIES(REQUIRED_DURING_INSTALLATION_TESTING ${CMAKE_CURRENT_SOURCE_DIR}/batched)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Kyungjoo: when kokkoskernels and kokkos are symbolic link and their src directories are overrided\n\n#           the following relative path does not work or users should put kokkoskernels and kokkos\n\n#           at the same place\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disables pthreads, this is a problem for serial builds in Trilinos & Sierra if it's enabled.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#currently float 128 test is not working. So common tests are explicitly added.  \n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "unit_test/Makefile" : {
      "ObjectId" : "62996ffb85a1f3f7a5ee21611c19255b21f9c6d2",
      "LastModified" : "2019-01-29T22:41:41Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#=======================================================================\n\n#=================== Settings ==========================================\n\n#=======================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=======================================================================\n\n#=================== Include Kokkos and KokkosKernels ==================\n\n#=======================================================================\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include $(KOKKOS_PATH)/Makefile.kokkos\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=======================================================================\n\n#=================== Add common source files ===========================\n\n#=======================================================================\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=======================================================================\n\n#=================== OpenMP BACKEND ====================================\n\n#=======================================================================\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  OBJ_OPENMP += Test_OpenMP_Common_float128.o\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Real \n",
        "Line" : 131,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Complex\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Vector\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#=======================================================================\n\n#=================== Cuda BACKEND ====================================\n\n#=======================================================================\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Not yet ready need to figure out how to handle CUBLAS\n",
        "Line" : 225,
        "CharPositionInLine" : 37
      },
      "11" : {
        "Text" : "#OBJ_CUDA += Test_Cuda_Sparse_spmv.o\n\n#OBJ_CUDA += Test_Cuda_Sparse_trsv.o #removing trsv from cuda unit test as it runs only sequential.\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#OBJ_CUDA += Test_Cuda_Sparse_findRelOffset.o #removing findRelOffset from cuda test as the implementation is sequential.\n",
        "Line" : 233,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Real\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Complex\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#=======================================================================\n\n#=================== Serial BACKEND ====================================\n\n#=======================================================================\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#  OBJ_SERIAL += Test_Serial_Common_float128.o\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Real\n",
        "Line" : 346,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Complex\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Vector\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#=======================================================================\n\n#=================== Threads BACKEND ===================================\n\n#=======================================================================\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#  OBJ_THREADS += Test_Threads_Common_float128.o\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#=======================================================================\n\n#=================== Make Rules ========================================\n\n#=======================================================================\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Compilation rules\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "unit_test/standalone/Makefile" : {
      "ObjectId" : "d6d7d9675862567e5305514ba31e7fe17ab8ec07",
      "LastModified" : "2018-10-25T03:21:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Compilation rules\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "MAKEFILE" : 9
  },
  "ElapsedTime" : 2154
}