{
  "Repository" : "36980",
  "Revision" : "HEAD",
  "ObjectId" : "d34a72d1cc8c2c83a8bb4daf815bd02e5134183a",
  "CommitTime" : "2019-03-14T18:58:04Z",
  "Files" : {
    "CMake/CorrectWindowsPaths.cmake" : {
      "ObjectId" : "09bcdd67dcd04fd001d2b7acbd904b5014ebe42b",
      "LastModified" : "2015-06-12T18:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CorrectWindowsPaths - this module defines one macro\n\n#\n\n# CONVERT_CYGWIN_PATH( PATH )\n\n#  This uses the command cygpath (provided by cygwin) to convert\n\n#  unix-style paths into paths useable by cmake on windows\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindFFTW.cmake" : {
      "ObjectId" : "9767373ca156f4617ed40f0fe49874fd4aac8b5d",
      "LastModified" : "2015-06-12T18:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FFTW\n\n# Find the native FFTW includes and library\n\n#\n\n#  FFTW_INCLUDES    - where to find fftw3.h\n\n#  FFTW_LIBRARIES   - List of libraries when using FFTW.\n\n#  FFTW_FOUND       - True if FFTW found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FFTW_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/FindGSL.cmake" : {
      "ObjectId" : "0ede72366d5689055569f06b2f923d0f2afb2b1d",
      "LastModified" : "2015-06-12T18:01:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find GSL\n\n# Find the native GSL includes and library\n\n#\n\n#  GSL_INCLUDES    - where to find gsl/gsl_*.h, etc.\n\n#  GSL_LIBRARIES   - List of libraries when using GSL.\n\n#  GSL_FOUND       - True if GSL found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set GSL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/FindGit.cmake" : {
      "ObjectId" : "25f0616ec16a8f8933f552d3bbf3ac554783e25d",
      "LastModified" : "2015-06-12T18:01:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindJansson.cmake" : {
      "ObjectId" : "cfad7e4e13401e968f6dda53d14ed49c4891cd72",
      "LastModified" : "2016-09-13T07:59:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2014 Johannes Schauer <j.schauer@email.de>\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindNetCDF.cmake" : {
      "ObjectId" : "6551a78667e2a97901a987099ce6eacfaa667b94",
      "LastModified" : "2016-09-13T07:59:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find NetCDF\n\n# Find the native NetCDF includes and library\n\n#\n\n#  NETCDF_INCLUDES    - where to find netcdf.h, etc\n\n#  NETCDF_LIBRARIES   - Link these libraries when using NetCDF\n\n#  NETCDF_FOUND       - True if NetCDF found including required interfaces (see below)\n\n#\n\n# Your package can require certain interfaces to be FOUND by setting these\n\n#\n\n#  NETCDF_CXX         - require the C++ interface and link the C++ library\n\n#  NETCDF_F77         - require the F77 interface and link the fortran library\n\n#  NETCDF_F90         - require the F90 interface and link the fortran library\n\n#\n\n# The following are not for general use and are included in\n\n# NETCDF_LIBRARIES if the corresponding option above is set.\n\n#\n\n#  NETCDF_LIBRARIES_C    - Just the C interface\n\n#  NETCDF_LIBRARIES_CXX  - C++ interface, if available\n\n#  NETCDF_LIBRARIES_F77  - Fortran 77 interface, if available\n\n#  NETCDF_LIBRARIES_F90  - Fortran 90 interface, if available\n\n#\n\n# Normal usage would be:\n\n#  set (NETCDF_F90 \"YES\")\n\n#  find_package (NetCDF REQUIRED)\n\n#  target_link_libraries (uses_f90_interface ${NETCDF_LIBRARIES})\n\n#  target_link_libraries (only_uses_c_interface ${NETCDF_LIBRARIES_C})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# will be set to NO if we're missing any interfaces\n",
        "Line" : 64,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# prepend so that -lnetcdf is last\n",
        "Line" : 77,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NETCDF_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CMake/FindPETSc.cmake" : {
      "ObjectId" : "b7441ff751e52465b2c63334cc3637f362c16b08",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find PETSc\n\n# Once done this will define\n\n#\n\n#  PETSC_FOUND        - system has PETSc\n\n#  PETSC_INCLUDES     - the PETSc include directories\n\n#  PETSC_LIBRARIES    - Link these to use PETSc\n\n#  PETSC_COMPILER     - Compiler used by PETSc, helpful to find a compatible MPI\n\n#  PETSC_DEFINITIONS  - Compiler switches for using PETSc\n\n#  PETSC_MPIEXEC      - Executable for running MPI programs\n\n#  PETSC_VERSION      - Version string (MAJOR.MINOR.SUBMINOR)\n\n#\n\n#  Usage:\n\n#  find_package(PETSc COMPONENTS CXX)  - required if build --with-clanguage=C++ --with-c-support=0\n\n#  find_package(PETSc COMPONENTS C)    - standard behavior of checking build using a C compiler\n\n#  find_package(PETSc)                 - same as above\n\n#\n\n# Setting these changes the behavior of the search\n\n#  PETSC_DIR - directory in which PETSc resides\n\n#  PETSC_ARCH - build architecture\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Right now, this is designed for compatability with the --with-clanguage option, so\n\n# only allow one item in the components list.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This is a stub for allowing multiple components should that time ever come. Perhaps\n\n# to also test Fortran bindings?\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# break line into three fields (the first is always \"#define\")\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : "# Also in local scope so we have access below\n",
        "Line" : 65,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# make dev version compare higher than any patch level of a released version\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Debian uses versioned paths e.g /usr/lib/petscdir/3.5/\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Debian paths\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Arch Linux path\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# MacPorts path\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# If set, use environment variable first\n",
        "Line" : 102,
        "CharPositionInLine" : 39
      },
      "11" : {
        "Text" : "# Debian defaults\n",
        "Line" : 104,
        "CharPositionInLine" : 39
      },
      "12" : {
        "Text" : "# Determine whether the PETSc layout is old-style (through 2.3.3) or\n\n# new-style (>= 3.0.0)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# > 3.5\n",
        "Line" : 130,
        "CharPositionInLine" : 71
      },
      "14" : {
        "Text" : "# > 2.3.3\n",
        "Line" : 133,
        "CharPositionInLine" : 67
      },
      "15" : {
        "Text" : "# <= 2.3.3\n",
        "Line" : 136,
        "CharPositionInLine" : 63
      },
      "16" : {
        "Text" : "# Put variables into environment since they are needed to get\n\n# configuration (petscvariables) in the PETSc makefile\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# A temporary makefile to probe the PETSc configuration\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# We are done with the temporary Makefile, calling PETSC_GET_VARIABLE after this point is invalid!\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Extract include paths and libraries from compile command line\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#on windows we need to make sure we're linking against the right\n\n#runtime library\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Clear any stale value, if we got here, we need to find it again\n",
        "Line" : 209,
        "CharPositionInLine" : 76
      },
      "22" : {
        "Text" : "#windows expects \"libfoo\", linux expects \"foo\"\n",
        "Line" : 211,
        "CharPositionInLine" : 31
      },
      "23" : {
        "Text" : "# Look for petscvec first, if it doesn't exist, we must be using single-library\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# libpetscsys is called libpetsc prior to 3.1 (when single-library was introduced)\n",
        "Line" : 223,
        "CharPositionInLine" : 47
      },
      "25" : {
        "Text" : "# There is no libpetscvec\n",
        "Line" : 240,
        "CharPositionInLine" : 70
      },
      "26" : {
        "Text" : "# Debian 9/Ubuntu 16.04 uses _real and _complex extensions when using libraries in /usr/lib/petsc.\n",
        "Line" : 242,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Minimal includes fail, see if just adding full includes fixes it\n",
        "Line" : 299,
        "CharPositionInLine" : 33
      },
      "28" : {
        "Text" : "# It does, we just need all the includes (\n",
        "Line" : 301,
        "CharPositionInLine" : 33
      },
      "29" : {
        "Text" : "# We are going to need to link the external libs explicitly\n",
        "Line" : 304,
        "CharPositionInLine" : 35
      },
      "30" : {
        "Text" : "# It looks like we really need everything, should have listened to Matt\n",
        "Line" : 314,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# We fail anyways\n",
        "Line" : 317,
        "CharPositionInLine" : 29
      },
      "32" : {
        "Text" : "# We fail anyways\n",
        "Line" : 319,
        "CharPositionInLine" : 31
      },
      "33" : {
        "Text" : "# We do an out-of-source build so __FILE__ will be an absolute path, hence __INSDIR__ is superfluous\n",
        "Line" : 326,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Sometimes this can be used to assist FindMPI.cmake\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Note that we have forced values for all these choices.  If you\n\n# change these, you are telling the system to trust you that they\n\n# work.  It is likely that you will end up with a broken build.\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 36
    },
    "CMake/FindPETSc4Py.cmake" : {
      "ObjectId" : "915bac7c2d44b7e7a60511786ccb882251a3ff5e",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PETSc4Py (cribbed from the FENICs dolfin file FindNumPy.cmake)\n\n# Find the petsc4py include directory\n\n#\n\n#  PETSC4PY_INCLUDES     - where to find petsc4py/petsc4py.i, etc.\n\n#  PETSC4PY_FOUND        - True if petsc4py is found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMake/FindPNetCDF.cmake" : {
      "ObjectId" : "d1234681ba1592c77d1dcec9da5ef8504a6ced26",
      "LastModified" : "2016-09-13T07:59:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PNetCDF\n\n# Find the native PNetCDF includes and library\n\n#\n\n#  PNETCDF_INCLUDES    - where to find netcdf.h, etc\n\n#  PNETCDF_LIBRARIES   - Link these libraries when using NetCDF\n\n#  PNETCDF_FOUND       - True if PNetCDF was found\n\n#\n\n# Normal usage would be:\n\n#  find_package (PNetCDF REQUIRED)\n\n#  target_link_libraries (uses_pnetcdf ${PNETCDF_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PNETCDF_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/FindPROJ4.cmake" : {
      "ObjectId" : "3cf71a86e4ad917494cb43da23e4281b9031ebc5",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find proj.4\n\n# Find the native proj.4 includes and library\n\n#\n\n#  PROJ4_INCLUDES    - where to find proj_api.h\n\n#  PROJ4_LIBRARIES   - List of libraries when using proj.4.\n\n#  PROJ4_FOUND       - True if proj.4 found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PROJ4_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/FindPackageMultipass.cmake" : {
      "ObjectId" : "fbf06a7f0fc3aa20a0387f091eac4f74e7ffdab2",
      "LastModified" : "2016-09-13T07:59:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PackageMultipass - this module defines two macros\n\n#\n\n# FIND_PACKAGE_MULTIPASS (Name CURRENT\n\n#  STATES VAR0 VAR1 ...\n\n#  DEPENDENTS DEP0 DEP1 ...)\n\n#\n\n#  This function creates a cache entry <UPPERCASED-Name>_CURRENT which\n\n#  the user can set to \"NO\" to trigger a reconfiguration of the package.\n\n#  The first time this function is called, the values of\n\n#  <UPPERCASED-Name>_VAR0, ... are saved.  If <UPPERCASED-Name>_CURRENT\n\n#  is false or if any STATE has changed since the last time\n\n#  FIND_PACKAGE_MULTIPASS() was called, then CURRENT will be set to \"NO\",\n\n#  otherwise CURRENT will be \"YES\".  IF not CURRENT, then\n\n#  <UPPERCASED-Name>_DEP0, ... will be FORCED to NOTFOUND.\n\n#  Example:\n\n#    find_path (FOO_DIR include/foo.h)\n\n#    FIND_PACKAGE_MULTIPASS (Foo foo_current\n\n#      STATES DIR\n\n#      DEPENDENTS INCLUDES LIBRARIES)\n\n#    if (NOT foo_current)\n\n#      # Make temporary files, run programs, etc, to determine FOO_INCLUDES and FOO_LIBRARIES\n\n#    endif (NOT foo_current)\n\n#\n\n# MULTIPASS_SOURCE_RUNS (Name INCLUDES LIBRARIES SOURCE RUNS LANGUAGE)\n\n#  Always runs the given test, use this when you need to re-run tests\n\n#  because parent variables have made old cache entries stale. The LANGUAGE\n\n#  variable is either C or CXX indicating which compiler the test should\n\n#  use.\n\n# MULTIPASS_C_SOURCE_RUNS (Name INCLUDES LIBRARIES SOURCE RUNS)\n\n#  DEPRECATED! This is only included for backwards compatability. Use\n\n#  the more general MULTIPASS_SOURCE_RUNS instead.\n\n#  Always runs the given test, use this when you need to re-run tests\n\n#  because parent variables have made old cache entries stale.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The name of the stored value for the given state\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Clear all the dependent variables so that the module can reset them\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# This is a ridiculous hack.  CHECK_${language}_SOURCE_* thinks that if the\n\n# *name* of the return variable doesn't change, then the test does\n\n# not need to be re-run.  We keep an internal count which we\n\n# increment to guarantee that every test name is unique.  If we've\n\n# gotten here, then the configuration has changed enough that the\n\n# test *needs* to be rerun.\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Why can't I add to a cache variable?\n",
        "Line" : 91,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 5
    },
    "CMake/FindPython.cmake" : {
      "ObjectId" : "4ef344c426d434f0da5eac7d40603d6c8bf3bdd1",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find python executable and libraries.\n\n#\n\n#  PYTHON_EXECUTABLE   - name of the python executable.\n\n#  PYTHON_INCLUDES     - where to find Python.h, etc.\n\n#  PYTHON_FOUND        - True if python is found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindSphinx.cmake" : {
      "ObjectId" : "21257f7845c0d8f277f0d6c09e112d2f45c21583",
      "LastModified" : "2016-09-13T07:59:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - This module looks for Sphinx\n\n# Find the Sphinx documentation generator\n\n#\n\n# This modules defines\n\n#  SPHINX_EXECUTABLE\n\n#  SPHINX_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindUDUNITS2.cmake" : {
      "ObjectId" : "dcaf09e0252cd374e57bf0647a8b8d2a69b21a7a",
      "LastModified" : "2016-09-13T07:59:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find UDUNITS2\n\n# Find the native UDUNITS2 includes and library\n\n#\n\n#  UDUNITS2_INCLUDES    - where to find udunits2.h\n\n#  UDUNITS2_LIBRARIES   - libraries to link with\n\n#  UDUNITS2_FOUND       - True if UDUNITS2 was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# UDUNITS2 headers might be in .../include or .../include/udunits2.\n\n# We try both.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set UDUNITS2_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMake/PISM_CMake_macros.cmake" : {
      "ObjectId" : "47e20955463f74f673477ad3a4087305ff93877c",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains CMake macros used in the root CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set CMake variables to enable rpath\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Use full RPATH, with this setting Pism libraries cannot be moved after installation\n\n## but the correct libraries will always be found regardless of LD_LIBRARY_PATH\n\n## in use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# the RPATH to be used when installing\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Mac OS X install_name fix:\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Set CMake variables to disable rpath\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set CMake variables to ensure that everything is static\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# get rid of -rdynamic\n",
        "Line" : 41,
        "CharPositionInLine" : 45
      },
      "10" : {
        "Text" : "# ditto\n",
        "Line" : 42,
        "CharPositionInLine" : 47
      },
      "11" : {
        "Text" : "# remove -Wl,-Bdynamic\n",
        "Line" : 45,
        "CharPositionInLine" : 44
      },
      "12" : {
        "Text" : "# Set the revision tag if PISM was checked out using Git.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set the PISM revision tag\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Git\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Otherwise...\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Allow setting a custom install prefix using the PISM_INSRALL_PREFIX environment variable.\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Define the directory structure.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Set pedantic compiler flags\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Make sure that we don't create .petscrc in $HOME, because this would affect\n\n# all PISM runs by the current user.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Don't assume that HOME env var is set.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# PETSc\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# FindPETSc.cmake does not put PETSC_VERSION into the CMake cache,\n\n# so we save it here.\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Force PISM to look for PETSc again if the version we just found\n\n# is too old:\n",
        "Line" : 141,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Stop with an error message.\n",
        "Line" : 144,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Force PISM to look for PETSc again if the version we just found\n\n# is not supported\n",
        "Line" : 149,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Stop with an error message.\n",
        "Line" : 152,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# MPI\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Other required libraries\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Optional libraries\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Try to find netcdf_par.h. We assume that NetCDF was compiled with\n\n# parallel I/O if this header is present.\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Set default values for build options\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# install with PISM\n",
        "Line" : 199,
        "CharPositionInLine" : 34
      },
      "33" : {
        "Text" : "# Set include and library directories for *required* libraries.\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Use option values to set compiler and linker flags\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# required libraries\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# optional libraries\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Hide distracting CMake variables\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Make sure that PetscScalar is double and not complex.\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Set version information that will be embedded in output files.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "CMake/ResolveCompilerPaths.cmake" : {
      "ObjectId" : "54787fa38ffa50136414e6c788c50fb3c63746b8",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ResolveCompilerPaths - this module defines two macros\n\n#\n\n# RESOLVE_LIBRARIES (XXX_LIBRARIES LINK_LINE)\n\n#  This macro is intended to be used by FindXXX.cmake modules.\n\n#  It parses a compiler link line and resolves all libraries\n\n#  (-lfoo) using the library path contexts (-L/path) in scope.\n\n#  The result in XXX_LIBRARIES is the list of fully resolved libs.\n\n#  Example:\n\n#\n\n#    RESOLVE_LIBRARIES (FOO_LIBRARIES \"-L/A -la -L/B -lb -lc -ld\")\n\n#\n\n#  will be resolved to\n\n#\n\n#    FOO_LIBRARIES:STRING=\"/A/liba.so;/B/libb.so;/A/libc.so;/usr/lib/libd.so\"\n\n#\n\n#  if the filesystem looks like\n\n#\n\n#    /A:       liba.so         libc.so\n\n#    /B:       liba.so libb.so\n\n#    /usr/lib: liba.so libb.so libc.so libd.so\n\n#\n\n#  and /usr/lib is a system directory.\n\n#\n\n#  Note: If RESOLVE_LIBRARIES() resolves a link line differently from\n\n#  the native linker, there is a bug in this macro (please report it).\n\n#\n\n# RESOLVE_INCLUDES (XXX_INCLUDES INCLUDE_LINE)\n\n#  This macro is intended to be used by FindXXX.cmake modules.\n\n#  It parses a compile line and resolves all includes\n\n#  (-I/path/to/include) to a list of directories.  Other flags are ignored.\n\n#  Example:\n\n#\n\n#    RESOLVE_INCLUDES (FOO_INCLUDES \"-I/A -DBAR='\\\"irrelevant -I/string here\\\"' -I/B\")\n\n#\n\n#  will be resolved to\n\n#\n\n#    FOO_INCLUDES:STRING=\"/A;/B\"\n\n#\n\n#  assuming both directories exist.\n\n#  Note: as currently implemented, the -I/string will be picked up mistakenly (cry, cry)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's a library path, add it to the list\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# It's a library, resolve the path by looking in the list and then (by default) in system directories\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#windows expects \"libfoo\", linux expects \"foo\"\n",
        "Line" : 56,
        "CharPositionInLine" : 17
      },
      "4" : {
        "Text" : "# We have an absolute path\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "5" : {
        "Text" : "#separate into a path and a library name:\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# only the LAST occurence of each library is required since there should be no circular dependencies\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "CMakeLists.txt" : {
      "ObjectId" : "8b66c7e00e5c7037e165a6a09d6a5c04ee509bd7",
      "LastModified" : "2019-01-17T20:08:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Policy CMP0078 was introduced in 3.13. See \"cmake --help-policies\" for details.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#controls names of SWIG targets\n",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : "# Require C++11 compiler support.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Looks like CMAKE_CXX_STANDARD does not support Intel C++ compilers\n\n# yet...\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set Pism_REVISION_TAG\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Put executables in the build directory:\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the install prefix\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set Pism_DEFAULT_CONFIG_FILE (*after* we set the CMAKE_INSTALL_PREFIX above).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The default options cache\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# PISM will eventually use Jansson to read configuration files.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# option (Pism_USE_JANSSON \"Use Jansson to read configuration files.\" OFF)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Use rpath by default; this has to go first, because rpath settings may be overridden later.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Deal with build types\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Enable extra checks in the code:\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add -fPIC to C and CXX flags.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# remove coverage data from src/pythonbindings\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Look for libraries using find_package(...), etc. Run CMake with -DPism_LOOK_FOR_LIBRARIES=OFF\n\n# to build on systems that rely on the module system to set all compiler and linker flags.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set Pism_EXTERNAL_LIBS and include directories.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Make sure that PetscScalar is double (not complex<double>.)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# FindPETSc4Py.cmake does not put PETSC4PY_VERSION into the CMake cache,\n\n# so we save it here.\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Use PROJ.4 to compute latitudes and longitudes of grid points (if available).\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# re-run tests that failed\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# run Python tests\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Install helper scripts residing in util/\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# PISM regression testing\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "1c03c0fd1080808906cc1fc850bbade2e35d12fb",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find latex and create doc targets:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This assumes that the current directory (\"doc\") is right in the\n\n# PISM source code directory, i.e. pism/doc.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# User's Manual, Climate Forcing, Installation:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Source code browser:\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# if PDFLATEX_COMPILER\n",
        "Line" : 25,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 5
    },
    "doc/Makefile" : {
      "ObjectId" : "22a37c15b647018a9e162b7e57ab9f1e9b950971",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "doc/browser/CMakeLists.txt" : {
      "ObjectId" : "016a5595d00a6775f4f05b7904c639008d1ca0fc",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find latex and create doc targets:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PISM Source Code Browsers\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# copy all the files needed to generate browser sources\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# copy doxyfile, changing some things along the way:\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Generate the list of references\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Generate the browser\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Create the compressed browser\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "doc/sphinx/CMakeLists.txt" : {
      "ObjectId" : "868661ef6804df1210856c375503fb1e92dc13b1",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HTML documentation requires Sphinx\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if Pism_DOC_DIR\n",
        "Line" : 20,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# PDF documentation requires Sphinx and pdflatex (and latexmk)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if Pism_DOC_DIR\n",
        "Line" : 40,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 4
    },
    "doc/sphinx/Makefile" : {
      "ObjectId" : "b463030238e19a71e36e2df8f48afd6f509394db",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Run \"make all\" to update lists of diagnostics and configuration parameters.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use a thermal bedrock layer model and run for 1 year to complete the\n\n# bootstrapping\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# rename climatic_mass_balance: we need precipitation for an atmosphere model\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# create dummy firn and snow depth fields\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# create a dummy (zero) basal water thickness field\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "examples/ch-warming/Makefile" : {
      "ObjectId" : "0e4f0e505fac6dfa77be599fe29ab88a61aa43ed",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/marine/flood/Makefile" : {
      "ObjectId" : "b57287af25319746d7ded1eb49c9ce5990b86ec8",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# this works for the wrong reason\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this fails (but should fail more gracefully)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this works the way it should\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/marine/melange/Makefile" : {
      "ObjectId" : "81cd5be8b6b17f240e75233a45445552aee551be",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/marine/terminus_advance/Makefile" : {
      "ObjectId" : "27b3f23c8e42dc9c657cbdb1849ef97e47ef80bb",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/marine/tongues/Makefile" : {
      "ObjectId" : "60420ac5e9f881867ae43c1bf4e5f2255ec9ca2d",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "site-packages/CMakeLists.txt" : {
      "ObjectId" : "9c71f48fac73b2732a8ce895773618c8536b80e1",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install some Python-based pieces of PISM\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "077f111b0a662cb56474f29afa63be3ee1e18354",
      "LastModified" : "2019-02-26T23:22:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a link from build/pism to src so that PISM can use #include \"pism/...\" in its\n\n# source files. This way other code using PISM needs to add only *one* directory to the\n\n# compiler search path. See #166.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Alternatively: copy headers to the build directory\n\n# file(COPY .\n\n#   DESTINATION ${CMAKE_BINARY_DIR}/pism/\n\n#   FILES_MATCHING\n\n#   PATTERN \"*.hh\"\n\n#   PATTERN \"*.h\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This library contains PISM code implementing the ice-sheet model itself\n\n# (using other PISM libraries and a good deal of non-trivial code).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Main executables:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Simplified geometry\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Verification mode \"driver\".\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install the library\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Install executables.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## executables\n",
        "Line" : 131,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# miscellaneous executables needed by software tests\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ------------ Header Files\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/coupler/CMakeLists.txt" : {
      "ObjectId" : "44ee64d05e34fc3e8e52b6d310655d48480cfc65",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Boundary models (surface, atmosphere, ocean).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/coupler/ocean/holland_jenkins/Makefile" : {
      "ObjectId" : "627833772cf5c3b67ef5fabcaaff7b6b42b1afbe",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/earth/CMakeLists.txt" : {
      "ObjectId" : "d65991ce081c784d8202b2c6ebace8a0ce0502b2",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bed deformation models.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/energy/doc/Makefile" : {
      "ObjectId" : "f2eb1dde566ebb7a69046b661b1c99fb7f417754",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/external/CMakeLists.txt" : {
      "ObjectId" : "986fe1c5bb7bf8350f404be2050fd6d4dbbe6daf",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/external/calcalcs/CMakeLists.txt" : {
      "ObjectId" : "d2ebc49ade073dfed8775fbc593bacae0bfc9375",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/external/cubature/CMakeLists.txt" : {
      "ObjectId" : "30ad74ac7ec2a658799c8c41c7dd1a2ccabaab4a",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/hydrology/CMakeLists.txt" : {
      "ObjectId" : "fbe35397e725b7124a2b4c7ca3959ef17b145796",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/icebin/CMakeLists.txt" : {
      "ObjectId" : "5b71f9c0b8fe98375d7623240f07bcdeb8bb6532",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PISM-side code used by IceBin (https://github.com/citibeth/icebin).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/inverse/CMakeLists.txt" : {
      "ObjectId" : "b002d385944f83c82635a407785da488511315f2",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/pythonbindings/CMakeLists.txt" : {
      "ObjectId" : "40c90ecbcc84a1a4121ad8fee56cc086bd8717ff",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# has to be set *before* calling SWIG_ADD_MODULE\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Disable compiler warnings:\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Disable compiler warnings:\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Install Python .py files\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# The Python code snippet below returns 1 if Python can import a PISM\n\n# and if the directory of said PISM matches the place we are about to\n\n# install PISM's Python wrappers. If the return value is not 1, we\n\n# print a message stating how to set your PYTHONPATH.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/regional/CMakeLists.txt" : {
      "ObjectId" : "0434ccc2e685cf1476ab4a4f8553f70b8f5cd5de",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Subclasses for regional problems.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/rheology/CMakeLists.txt" : {
      "ObjectId" : "699387a5442162c6a1ce606ce88d6933164e0c31",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Flow laws.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/stressbalance/CMakeLists.txt" : {
      "ObjectId" : "c2f686895bc985d1054a1c49220b3da705812e82",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/stressbalance/ssa/doc/Makefile" : {
      "ObjectId" : "ad0e6dcc41babf9b4e807d869d3dfa437a012834",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/stressbalance/ssa/doc/discretization/Makefile" : {
      "ObjectId" : "2775522a8323b6839fbb53b9963b85b754151028",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/stressbalance/ssa/tests/CMakeLists.txt" : {
      "ObjectId" : "d0800da216fc611079c5d5574b70d4cacd97a0fc",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "876635d879ac830dd7358a497170dd757fd14507",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a list of files making up libpismutil so that we can add to it later:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if NetCDF-4 parallel I/O is enabled. If so, set compiler flags and add a source code file.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check if PnetCDF parallel I/O is enabled. If so, set compiler flags and add a source code file.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/verification/CMakeLists.txt" : {
      "ObjectId" : "c906559106fdde071390d99332ba4c059e3b3074",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verification tests.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "2b89d9dfda3da500a4be2c4459593dc02a73a65e",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/cases/haseloff/Makefile" : {
      "ObjectId" : "eaee3e6c4ae4b10acc72216df3c10f613c9a22cf",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/regression/CMakeLists.txt" : {
      "ObjectId" : "6b7adcae115c808ba85736b0993ca055c3602af2",
      "LastModified" : "2018-12-07T23:35:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the -config to all PISM test runs (necessary because we want to use the\n\n# config file from *this* build, not the one that might be present in the\n\n# install location).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copy nccmp.py into the build directory:\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the location of PISM regression test scripts\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# A macro simplifying test creation:\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tests themselves:\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These tests require special executables. They are disabled unless\n\n# these executables are built. This way we don't need to explain why\n\n# \"make && make test\" shows some test failures when PISM is built\n\n# with default settings.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Inversion regression tests.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Copy over commonly used files\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# siple is installed\n",
        "Line" : 158,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "CMAKE" : 39,
    "MAKEFILE" : 12
  },
  "ElapsedTime" : 3917
}