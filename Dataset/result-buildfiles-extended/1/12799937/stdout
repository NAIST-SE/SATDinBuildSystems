{
  "Repository" : "12799937",
  "Revision" : "HEAD",
  "ObjectId" : "a94339c0f3aa8a258e11be648785c64033948574",
  "CommitTime" : "2019-02-23T19:46:09Z",
  "Files" : {
    "kernel/Documentation/Makefile" : {
      "ObjectId" : "c4eaa05c9c8774f13d7fe1cc03796cb2fa485ad0",
      "LastModified" : "2016-09-17T10:55:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# HAVE_SPHINX\n",
        "Line" : 56,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# HAVE_SPHINX\n",
        "Line" : 238,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 7
    },
    "kernel/Makefile" : {
      "ObjectId" : "2c73b90f385c74cff05f374da696560384e2075b",
      "LastModified" : "2017-02-10T15:32:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -*- Makefile -*-\n\n#\n\n# Author: Jesper Dangaard Brouer <netoptimizer@brouer.com>\n\n#\n\n# Notice:\n\n#  Kernel module targets are defined inside Kbuild files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Kernel builddir detection\n\n#  can be overwritten by setting it on make cmdline like:\n\n# make kbuilddir=~/git/kernel/net-next/\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Trick to modify kernels CFLAGS\n\n#KBUILD_CFLAGS+=-g -O0\n\n#KBUILD_CFLAGS+=-g -O3\n\n#KBUILD_CFLAGS+=-g -O2 -fno-inline\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Example usage:\n\n#  make push_remote kbuilddir=~/git/kernel/net-next/ HOST=192.168.122.49\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "kernel/samples/bpf/Makefile" : {
      "ObjectId" : "a05a62315e23f741839875f232675c27a1175b5b",
      "LastModified" : "2018-09-21T18:07:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for out-of-tree building eBPF programs\n\n#  similar to kernel/samples/bpf/\n\n#\n\n# Still depend on a kernel source tree.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Linking with libbpf and libpcap\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TC bpf targets uses bpf-elf-loader included in tc/iproute2.  Thus,\n\n# it is unnecessary to link \"user\" binary with bpf_load.c.  TODO, if\n\n# somone cares, makefile should have separate target for TC.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Experimental targets\n\n###TARGETS += xdp_rxhash\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets that use the library bpf/libbpf\n\n### TARGETS_USING_LIBBPF += xdp_monitor_user\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Files under kernel/samples/bpf/ have a name-scheme:\n\n# ---------------------------------------------------\n\n# The eBPF program is called xxx_kern.c. This is the restricted-C\n\n# code, that need to be compiled with LLVM/clang, to generate an ELF\n\n# binary containing the eBPF instructions.\n\n#\n\n# The userspace program called xxx_user.c, is a regular C-code\n\n# program.  It need two external components from kernel tree, from\n\n# samples/bpf/ and tools/lib/bpf/.\n\n#\n\n# 1) When loading the ELF eBPF binary is uses the API load_bpf_file()\n\n#    via \"bpf_load.h\" (compiles against a modified local copy of\n\n#    kernels samples/bpf/bpf_load.c).\n\n#    (TODO: This can soon be changed, and use loader from tools instead)\n\n#\n\n# 2) The API for interacting with eBPF comes from tools/lib/bpf/bpf.h.\n\n#    A library file under tools is compiled and static linked.\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate file name-scheme based on TARGETS\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Notice: the kbuilddir can be redefined on make cmdline\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Local copy of include/linux/bpf.h kept under ./kernel-usr-include\n\n#\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##CFLAGS += -I$(KERNEL)/usr/include\n\n#\n\n# Interacting with libbpf\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Objects that xxx_user program is linked with:\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# The static libbpf library\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Allows pointing LLC/CLANG to another LLVM backend, redefine on cmdline:\n\n#  make LLC=~/git/llvm/build/bin/llc CLANG=~/git/llvm/build/bin/clang\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TODO: can we remove(?) copy of uapi/linux/bpf.h stored here: ./tools/include/\n\n# LINUXINCLUDE := -I./tools/include/\n\n#\n\n# bpf_helper.h need newer version of uapi/linux/bpf.h\n\n# (as this git-repo use new devel kernel features)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#LINUXINCLUDE += -I$(KERNEL)/tools/lib\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Manually define dependencies to e.g. include files\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Most xxx_user program still depend on old bpf_load.c\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# New ELF-loaded avail in libbpf (in bpf/libbpf.c)\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Compiling of eBPF restricted-C code with LLVM\n\n#  clang option -S generated output file with suffix .ll\n\n#   which is the non-binary LLVM assembly language format\n\n#   (normally LLVM bitcode format .bc is generated)\n\n#\n\n# Use -Wno-address-of-packed-member as eBPF verifier enforces\n\n# unaligned access checks where necessary\n\n#\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Targets that links with libpcap\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "kernel/samples/bpf/tools/lib/bpf/Makefile" : {
      "ObjectId" : "279f813b4f5110d96a9ffab2331afb71bea47426",
      "LastModified" : "2018-09-15T19:41:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for out-of-kernel-tree building libbpf.a\n\n#  similar to kernel/tools/lib/bpf\n\n#\n\n# This is a temporary workaround, as we really want libbpf.so\n\n# to be install and supported by distros.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Should we depend on distro installing: kernel-headers\n\n# (Fedora package called: kernel-headers)\n\n# - E.g. depend on /usr/include/linux/perf_event.h\n\n#\n\n# Or do we depend on kernel source code:\n\n# KERNEL ?= /lib/modules/$(shell uname -r)/build/\n\n#\n\n# Are we independend of kernel source now?\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We maintain some of the kernel include files to build easier\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# for <perf-sys.h>\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Files based on kernel 'make headers_install'\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The kernels directories, where include files are located:\n\n#CFLAGS_LIBBPF += -I$(KERNEL)/tools/include\n\n#CFLAGS_LIBBPF += -I$(KERNEL)/tools/perf\n\n#CFLAGS_LIBBPF += -I$(KERNEL)/usr/include\n\n#CFLAGS_LIBBPF += -I$(KERNEL)/arch/x86/include\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LIBBPF OBJECTS\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "minimalist/Makefile" : {
      "ObjectId" : "514066fcf834b3b4c0756d74c9e9f44c7112381a",
      "LastModified" : "2014-10-22T09:02:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal Makefile for compiling external kernel modules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 775
}