{
  "Repository" : "78459129",
  "Revision" : "HEAD",
  "ObjectId" : "825acd54f0d8d551f8a29451b5de87b0f6a57207",
  "CommitTime" : "2019-04-16T14:50:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "2b6c92644c8f3e6ff837218721d1f240373b9f77",
      "LastModified" : "2019-03-27T18:35:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CppCheck\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Resource VersionInfo\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# ToDo: Figure out a better way to tell the test setup where to find our binaries.\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "############################\n\n# Setup global dependencies\n\n############################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Override a test flag\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# StackWalker (Callstack rewind\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Nlohmann JSON (modern JSON for C++)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/DownloadProject.cmake" : {
      "ObjectId" : "e300f42658a532b948852e6d92e43f1fd7c2374e",
      "LastModified" : "2018-01-29T23:39:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved MIT License.  See accompanying\n\n# file LICENSE or https://github.com/Crascit/DownloadProject for details.\n\n#\n\n# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(DownloadProject)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be.\n\n# The prefix must always be an absolute path.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The way that CLion manages multiple configurations, it causes a copy of\n\n# the CMakeCache.txt to be copied across due to it not expecting there to\n\n# be a project within a project.  This causes the hard-coded paths in the\n\n# cache to be copied and builds to fail.  To mitigate this, we simply\n\n# remove the cache if it exists before we configure the new project.  It\n\n# is safe to do so because it will be re-generated.  Since this is only\n\n# executed at the configure step, it should not cause additional builds or\n\n# downloads.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n\n# Make sure to pass through CMAKE_MAKE_PROGRAM in case the main project\n\n# has this set to something not findable on the PATH.\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/NodeJS.cmake" : {
      "ObjectId" : "676e4e0e110d5f696c0f129994f9009877cb14c2",
      "LastModified" : "2018-11-13T23:30:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defaults for standard Node.js builds\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find a path by walking upward from a base directory until the path is\n\n# found. Sets the variable ${PATH} to False if the path can't\n\n# be determined\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shortcut for finding standard node module locations\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Download with a bit of nice output (without spewing progress)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Embedded win_delay_load_hook file so that this file can be copied\n\n# into projects directly (recommended practice)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sets up a project to build Node.js native modules\n\n# - Downloads required dependencies and unpacks them to the build directory.\n\n#   Internet access is required the first invocation but not after (\n\n#   provided the download is successful)\n\n# - Sets up several variables for building against the downloaded\n\n#   dependencies\n\n# - Guarded to prevent multiple executions, so a single project hierarchy\n\n#   will only call this once\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Prevents this function from executing more than once\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Regex patterns used by the init function for component extraction\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Parse function arguments\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Allow the download URL to be overridden by command line argument\n\n# NODEJS_URL\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Allow name to be overridden by command line argument NODEJS_NAME\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Allow the checksum file to be overridden by command line argument\n\n# NODEJS_CHECKSUM\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Allow the checksum type to be overriden by the command line argument\n\n# NODEJS_CHECKTYPE\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 186,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Allow the version to be overridden by the command line argument\n\n# NODEJS_VERSION\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 198,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# \"installed\" is a special version that tries to use the currently\n\n# installed version (determined by running node)\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Fall back to the \"latest\" version if node isn't installed\n",
        "Line" : 215,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# This has all of the implications of why the binary is called nodejs in the first place\n\n# https://lists.debian.org/debian-devel-announce/2012/07/msg00002.html\n\n# However, with nvm/n, its nearly standard to have a proper 'node' binary now (since the\n\n# apt-based one is so out of date), so for now just assume that this rare binary conflict\n\n# case is the degenerate case. May need a more complicated solution later.\n",
        "Line" : 217,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Create a temporary download directory\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Unless the target is special version \"latest\", the parameters\n\n# necessary to construct the root path are known\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Extract checksums from the existing checksum file\n",
        "Line" : 250,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# If we're trying to determine the version or we haven't saved the\n\n# checksum file for this version, download it from the specified server\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Clear away the old checksum in case the new one is different\n\n# and/or it fails to download\n",
        "Line" : 259,
        "CharPositionInLine" : 12
      },
      "27" : {
        "Text" : "# Extract checksums from the temporary file\n",
        "Line" : 277,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Extract the version, name, header archive and archive checksum\n\n# from the file. This first extract is what defines / specifies the\n\n# actual version number and name.\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Make sure that the root directory exists, and that the checksum\n\n# file has been moved over from temp\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Now that its fully resolved, report the name and version of Node.js being\n\n# used\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Download the headers for the version being used\n\n# Theoretically, these could be found by searching the installed\n\n# system, but in practice, this can be error prone. They're provided\n\n# on the download servers, so just use the ones there.\n",
        "Line" : 328,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# This adapts the header extraction to support a number of different\n\n# header archive contents in addition to the one used by the\n\n# default Node.js library\n",
        "Line" : 351,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Move the headers into a standard location with a standard layout\n",
        "Line" : 370,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Only download the libraries on windows, since its the only place\n\n# its necessary. Note, this requires rerunning CMake if moving\n\n# a module from one platform to another (should happen automatically\n\n# with most generators)\n",
        "Line" : 410,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Download the win32 library for linking\n",
        "Line" : 415,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# Download the win64 library for linking\n",
        "Line" : 453,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# The downloaded headers should always be set for inclusion\n",
        "Line" : 492,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Look for the NAN module, and add it to the includes\n",
        "Line" : 495,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Under windows, we need a bunch of libraries (due to the way\n\n# dynamic linking works)\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Generate and use a delay load hook to allow the node binary\n\n# name to be changed while still loading native modules\n",
        "Line" : 508,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Necessary flags to get delayload working correctly\n",
        "Line" : 514,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# Core system libraries used by node\n",
        "Line" : 522,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Also link to the node stub itself (downloaded above)\n",
        "Line" : 529,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# Non-windows platforms should use these flags\n",
        "Line" : 536,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# Special handling for OSX / clang to allow undefined symbols\n\n# Define is required by node on OSX\n",
        "Line" : 540,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Export all settings for use as arguments in the rest of the build\n",
        "Line" : 547,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Prevents this function from executing more than once\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Helper function for defining a node module\n\n# After nodejs_init, all of the settings and dependencies necessary to do\n\n# this yourself are defined, but this helps make sure everything is configured\n\n# correctly. Feel free to use it as a model to do this by hand (or to\n\n# tweak this configuration if you need something custom).\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Validate name parameter (must be a valid C identifier)\n",
        "Line" : 565,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Make sure node is initialized (variables set) before defining the module\n",
        "Line" : 573,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# In order to match node-gyp, we need to build into type specific folders\n\n# ncmake takes care of this, but be sure to set CMAKE_BUILD_TYPE yourself\n\n# if invoking CMake directly\n",
        "Line" : 580,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# A node module is a shared library\n",
        "Line" : 590,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Add compiler defines for the module\n\n# Two helpful ones:\n\n# MODULE_NAME must match the name of the build library, define that here\n\n# ${NAME}_BUILD is for symbol visibility under windows\n",
        "Line" : 592,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# This properly defines includes for the module\n",
        "Line" : 602,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Add link flags to the module\n",
        "Line" : 605,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Set required properties for the module to build properly\n\n# Correct naming, symbol visiblity and C++ standard\n",
        "Line" : 608,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Handle link flag cases properly\n\n# When there are link flags, they should be appended to LINK_FLAGS with space separation\n\n# If the list is emtpy (true for most *NIX platforms), this is a no-op\n",
        "Line" : 622,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Make sure we're buiilding in a build specific output directory\n\n# Only necessary on single-target generators (Make, Ninja)\n\n# Multi-target generators do this automatically\n\n# This (luckily) mirrors node-gyp conventions\n",
        "Line" : 629,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 59
    },
    "cmake/cppcheck.cmake" : {
      "ObjectId" : "5a7b1d91f6060e24994a03f0759d6f732b11bc1b",
      "LastModified" : "2019-01-24T19:32:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Parse arguments\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Detect Architecture (Bitness)\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Detect Platform\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Arguments\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Compiler\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#set(CPPCHECK_TEMPLATE_FORMAT \"\\{id\\}:\\{file\\}:\\{line\\}\")  #format for suppressions list file generation \n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#visual studio output format usefull to run from IDE\n",
        "Line" : 90,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : "# Flags\n",
        "Line" : 94,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Libraries\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Exclusion\n",
        "Line" : 124,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Checks\n",
        "Line" : 144,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Std\n",
        "Line" : 164,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Force Language\n",
        "Line" : 187,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Propagate to parent scope\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Include Directories\n",
        "Line" : 211,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Non-MSVC and Unix (Linux, FreeBSD, APPLE) need to have -I, -i, -D and -U specified manually.\n\n# Each file can be added to --file-list= as a comma separated list.\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Defines\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Source Files\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "obs-studio-client/CMakeLists.txt" : {
      "ObjectId" : "797689849ca4aae30f586695ee5c5fd104be2d90",
      "LastModified" : "2019-03-27T18:35:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Resource VersionInfo\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "###### callback-manager ######\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "obs-studio-server/CMakeLists.txt" : {
      "ObjectId" : "b71dc4327cafe877e341de811c2f5a87edfd5bca",
      "LastModified" : "2019-04-08T22:01:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detect Architecture (Bitness)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################\n\n# Setup crashpad binaries\n\n############################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Our crashpad artifacts assume a particular format\n\n# <dir>\\bin contains external processes\n\n# <dir>\\lib contains static libraries we need to link against\n\n# <dir>\\include contains the primary include path\n\n# <dir>\\include\\third_party\\mini_chromium contains chromium include files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# From this, we get three total targets:\n\n#   crashpad_base\n\n#   crashpad_util\n\n#   crashpad_client\n\n# It's recommended to use util but not required as far as I know.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###### obs-studio-node ######\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "###### utlity graphics ######\n",
        "Line" : 199,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "###### node-obs ######\n",
        "Line" : 206,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "###### crash-manager ######\n",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "###### callback-manager ######\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Include/link crash manager dependencies\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 1899
}