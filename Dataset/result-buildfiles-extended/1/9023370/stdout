{
  "Repository" : "9023370",
  "Revision" : "HEAD",
  "ObjectId" : "737f999d741b22515aabe9b1dcd57daa9251a79b",
  "CommitTime" : "2019-04-11T22:17:27Z",
  "Files" : {
    "src/Algorithms/CMakeLists.txt" : {
      "ObjectId" : "e7ff9b755c6a79bdcffd76d4e1ba30aa0c30fa02",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Need XML from Qt\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Create the helper library\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/Annotations/CMakeLists.txt" : {
      "ObjectId" : "7ff91220d283b9f7669d51f94ba4061db4f24616",
      "LastModified" : "2018-07-23T14:22:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Use XML from Qt but not GUI.\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# QT include files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include_directories(${Qt5Network_INCLUDE_DIRS})\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "###INCLUDE(${QT_USE_FILE})\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Create a Library\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/Brain/CMakeLists.txt" : {
      "ObjectId" : "7f0615464fcfebd1af1482a3b0f2c3e0d2ff1d2d",
      "LastModified" : "2018-11-06T21:31:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Need XML from Qt\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Create the brain library\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "78674261529332b04d3273000e61a1237e0b3b40",
      "LastModified" : "2018-07-23T14:22:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Minimum required version of CMAKE\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Set to true for verbose output when debugging this file\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################################\n\n#\n\n# A function to get all user defined variables with a specified prefix\n\n# From https://cmake.org/Wiki/CMake/Tutorials/SettingVariableGroups\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########################################################################################\n\n#\n\n# Workbench CACHE variables\n\n# TSC: use \"CACHE <type> <docstring>\" syntax in SET commands so they can be overridden by cmake options\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########################################################################################\n\n#\n\n# Setting the compiler MUST be done before the PROJECT\n\n# statement or else an infinite loop will occur indicating\n\n# that the compiler has been redefined.\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Policy CMP0020 is related to Qt\n\n# https://cmake.org/cmake/help/v3.5/policy/CMP0020.html\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\n\n# Intel compiler\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Clang compiler on Mac\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# IF GNU compiler, functions without a return type or switch\n\n# statements that do not handle all of the enumerated types\n\n# are treated as an error.  Also, all warnings.\n\n#\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# there is no greater than or equal in CMake\n",
        "Line" : 111,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "##########################################################################################\n\n#\n\n# If GNU compiler, use SIMD-based dot computation, if possible\n\n#\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Define flag to avoid trying to compile SIMD stuff (coded for x86_64 only)\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#\n\n# If we should try to use SIMD, check whether cpuinfo compiles\n\n#\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#\n\n# Add the necessary definition and include directory to enable the \n\n# SIMD-based dot product implementations\n\n#\n",
        "Line" : 135,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#TSC: we require c++11, so it needs to be in the compile flags - in older cmake, this needs to be done manually\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##########################################################################################\n\n#\n\n# OpenSSL\n\n#\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##########################################################################################\n\n#\n\n# Must have QT 4.8 or QT 5, recommended 5.6 or later\n\n# https://cmake.org/cmake/help/v3.5/manual/cmake-packages.7.html#manual:cmake-packages(7)\n\n# Modules List: http://doc.qt.io/qt-5/qtmodules.html\n\n#\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# The OpenGL module is deprecated in Qt5 and \n\n# is needed only if QGLWidget is used for\n\n# the OpenGL graphics.\n\n#\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#\n\n# QGLWidget is deprecated in Qt 5 and is replaced with QOpenGLWidget\n\n#\n\n# If WORKBENCH_USE_QT5_QOPENGL_WIDGET is defined, QOpenGLWidget is used\n\n# for OpenGL.  Otherwise, QGLWidget is used.\n\n#\n",
        "Line" : 202,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Causes Qt to remove declarations for deprecated functionality\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Enable usage of replacements for Qt deprecated functionality in Workbench source code\n",
        "Line" : 216,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "#small hack to get the qt5 compile flag requirements into libraries\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "##########################################################################################\n\n#\n\n# Try to find Qwt, otherwise use bundle\n\n#\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##########################################################################################\n\n#\n\n# Need OpenGL\n\n#\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# Need help finding includes on Apple\n\n#\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# When searching for the include directory, find the location\n\n# for the OpenGL framework rather than an individual header file.\n",
        "Line" : 259,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#\n\n# OpenGL Include Directory\n\n#\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "##########################################################################################\n\n#\n\n# Look for GLEW but only on Windows\n\n#\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "##########################################################################################\n\n#\n\n# The Find OpenMP package may not work on all systems and the user may\n\n# furnish the paths to the OpenMP files by using environment variables.\n\n#\n\n# The environment variables are:\n\n#    OPENMP_COMPILE_OPTION=-fopenmp\n\n#    OPENMP_HEADER_DIR=/usr/local/clang-openmp-opt/llvm/build/Release/include\n\n#    OPENMP_LIB_DIR=/usr/local/clang-openmp-opt/llvm/build/Release/lib\n\n#\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#\n\n# IF OpenMP not found through environment variables,\n\n# Use CMAKE's Find OpenMP module\n\n#\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\n\n# If OpenMP is found, may need to set compiler and linker flags\n\n#\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# add definitions will add the flag to the linker and resource compilers, which don't understand the openmp option\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#\n\n# Try to link static with Intel Compiler\n\n#\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "#\n\n# The clang compiler does not support OpenMP so it produces many warnings\n\n# with \"Unknown pragma ignored\".  So, tell clang to ignore unknown pragmas\n\n# so the message is not printed.\n\n#\n",
        "Line" : 363,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "##########################################################################################\n\n#\n\n# MUST have ZLIB\n\n#\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "##########################################################################################\n\n#\n\n# Try to find QuaZip, otherwise use bundled\n\n#\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\n\n# Quazip needs this defined here for static linking on windows\n\n#\n",
        "Line" : 399,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "##########################################################################################\n\n#\n\n# Find FreeType\n\n#\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# FindFreeType looks for environment variable FREETYPE_DIR as a hint\n",
        "Line" : 418,
        "CharPositionInLine" : 3
      },
      "39" : {
        "Text" : "##########################################################################################\n\n#\n\n# Fixes issue with XCode and newer version of CMake.\n\n# It prevents the ZERO_CHECK dependency from running\n\n# (which is very slow) every time a build is performed\n\n# in XCode.\n\n#\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "##########################################################################################\n\n#\n\n# Test for offscreen MESA (optional library)\n\n# Mesa is used by wb_command's -show-scene.\n\n# If Mesa is not found, the \"-show-scene\" command will not be available.\n\n#\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "##########################################################################################\n\n#\n\n# All subdirectories that will be configured for building\n\n#\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "##########################################################################################\n\n#\n\n# CTest tests\n\n#\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "##########################################################################################\n\n#\n\n# DEBUGGING ONLY\n\n#\n\n# Some find modules do not always document all of their variables.\n\n# If you know the prefix for the find module's variables,\n\n# this code can be used to print the variables by setting\n\n# DEBUG_VARIABLE_PREFIX to the prefix.\n\n# For example, set to \"Q\" to find all variables beginning from Qt\n\n# or to \"OSMESA\" to print all OSMESA variables.\n\n#\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "##########################################################################################\n\n#\n\n# Print Summary\n\n#\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#Optional \n",
        "Line" : 564,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 46
    },
    "src/Charting/CMakeLists.txt" : {
      "ObjectId" : "590b4d2b2af6d6a6884cd7f9693c343a59170cf6",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Qt include files\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create a library\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Include directories\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/Cifti/CMakeLists.txt" : {
      "ObjectId" : "add65dfe6f79ea3aaf5726b709e88569d5eaa946",
      "LastModified" : "2016-11-01T22:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create GIFTI Library\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/CommandLine/CMakeLists.txt" : {
      "ObjectId" : "dfd865211f838f848c7a8572dbdde2a5d6382736",
      "LastModified" : "2018-07-23T14:22:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cmake_policy(SET CMP0015 OLD) \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#    include_directories(${Qt5Network_INCLUDE_DIRS})\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Name of executable\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Resources\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Create the executable\n\n# Apple creates a bundle\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#        Qt5::OpenGL\n\n#        Qt5::PrintSupport\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#        Qt5::Widgets\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Libraries that are linked\n\n# Note: GLEW_LIBRARIES and OSMESA library variables will be empty and\n\n# have no effect if not available\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/Commands/CMakeLists.txt" : {
      "ObjectId" : "bee897a8d74ed8146206b02b5698a1e251e3c3c4",
      "LastModified" : "2016-11-01T22:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Need XML from Qt\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Create the brain library\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/Common/CMakeLists.txt" : {
      "ObjectId" : "b175aa8ce5a1a73437f23561428efd9aa55e3d6d",
      "LastModified" : "2018-12-19T15:33:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# QT include files\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"QT VERSION: \" ${QT_VERSION_MAJOR} ${QT_VERSION_MINOR} ${QT_VERSION_PATCH})\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# With AUTOMOC, do not need to specify files\n\n# that contain Q_OBJECT macro for Qt to process with 'moc'\n\n# (meta-object compiler).\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Create a library\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Include directories\n\n#\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Conditionally link the dot library to use the SIMD-based dot product implementation\n\n#\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/Desktop/CMakeLists.txt" : {
      "ObjectId" : "233e5cedff925646d18590937d959ef453c30fa2",
      "LastModified" : "2018-08-27T13:57:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Name of executable\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# QT Include directories\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Added by JWH to eliminate OpenGL linking errors in Ubuntu Linux\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Resources\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Create the executable\n\n# Apple creates a bundle\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# This is a customized Info.Plist for Mac so that a spec\n\n# file can be opened using Finder\n\n#\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#   SET_TARGET_PROPERTIES(\n\n#       ${EXE_NAME}\n\n#       PROPERTIES\n\n#       RESOURCE\n\n#       ${QT_BINARY_DIR}/../src/gui/mac/qt_menu.nib\n\n#   )\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Libraries that are linked\n\n#\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#${LIBS}\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#   EXECUTE_PROCESS(COMMAND uname -n OUTPUT_VARIABLE MACHINE_NAME)\n\n#   MESSAGE(\"MACHINE_NAME: ${MACHINE_NAME}\")\n\n#   IF (${MACHINE_NAME} MATCHES \"linuxbuild\")\n\n#       MESSAGE(\"is linuxbuild\")\n\n#       SET_TARGET_PROPERTIES(${EXE_NAME}\n\n#                          PROPERTIES\n\n#                          LINK_FLAGS \"-Wl,-E\"\n\n#                          LINK_FLAGS_DEBUG \"-Wl,-E\"\n\n#                          LINK_FLAGS_RELEASE \"-Wl,-E\")\n\n#   ENDIF()\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# At this time, Cocoa needs to be explicitly added for Apple Mac\n\n#\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#SET (QT_MAC_USE_COCOA TRUE)\n",
        "Line" : 186,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# Apple needs qt_menu.nib directory copied\n\n# into application's Resources directory \n\n#\n\n# Apple needs framework\n\n#\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###COMMAND ${CMAKE_SOURCE_DIR}/CMakeScripts/copy_mac_frameworks.sh ${EXE_NAME}\n",
        "Line" : 226,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "##SET (MACOSX_BUNDLE_GUI_IDENTIFIER wb_view )\n\n## Underscore is not valid in MACOSX_BUNDLE_GUI_IDENTIFIER\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "src/Files/CMakeLists.txt" : {
      "ObjectId" : "9305f06e802bc42e2d2ff397ad21668a96555c52",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Files Library\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/FilesBase/CMakeLists.txt" : {
      "ObjectId" : "d23a04fa1d95833b37547e3eeb14ab4085e73113",
      "LastModified" : "2016-11-01T22:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The FilesBase Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Need XML from Qt\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Create the NIFTI library\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/FtglFont/CMakeLists.txt" : {
      "ObjectId" : "27afc4937a224ebc1e06c7339bfcafd62c2e967b",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create the brain library\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/FtglFont/Makefile.am" : {
      "ObjectId" : "b0c0430d19dd20f2dccc33b8076bf7062ebcbb12",
      "LastModified" : "2014-07-21T14:58:44Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/Gifti/CMakeLists.txt" : {
      "ObjectId" : "04a024b61ce71f07972b558807ca30d9dcce6e1a",
      "LastModified" : "2016-11-01T22:10:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create GIFTI Library\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/Graphics/CMakeLists.txt" : {
      "ObjectId" : "53cac7b7a50f2a7cb4a4d983989f90b997676136",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Create a Library\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/GuiQt/CMakeLists.txt" : {
      "ObjectId" : "1378a1ae9dc7eb9a91aafd1282242f188b96cb5a",
      "LastModified" : "2018-12-19T15:33:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# QT include files\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Let CMake find files for moc and uic.\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# With AUTOMOC, do not need to specify files\n\n# that contain Q_OBJECT macro for Qt to process with 'moc'\n\n# (meta-object compiler).\n\n#\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#WuQWebView.h\n",
        "Line" : 227,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#\n\n# Header files\n\n#\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#WuQWebView.h\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#WuQWebView.cxx\n",
        "Line" : 726,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Process the header files with moc producing moc_*.cpp files\n\n#\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Create the GUI library\n\n#\n",
        "Line" : 740,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/Nifti/CMakeLists.txt" : {
      "ObjectId" : "3001f57abfe8e277d688fd36355563c04dba91a1",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The NIFTI Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Need XML from Qt\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Create the NIFTI library\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/OSMesaDummy/CMakeLists.txt" : {
      "ObjectId" : "96ec583913b2338f4ce4f37f7df73ec60bb5ffd0",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Need Qt for reading from resource file.\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create a library\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Include directories\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/Operations/CMakeLists.txt" : {
      "ObjectId" : "c3f1648ada535acfd237734690a8afcad1b38f9d",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create the helper library\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Mesa Library used by show scene command\n\n#\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/OperationsBase/CMakeLists.txt" : {
      "ObjectId" : "98b57cd042c188db88d4613b66aa4533dfe4d49e",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include_directories(${Qt5Network_INCLUDE_DIRS})\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# Create the helper library\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/Palette/CMakeLists.txt" : {
      "ObjectId" : "3fe11d04773a399b47b870fe2a869609bac775ec",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The NIFTI Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create the NIFTI library\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/Quazip/CMakeLists.txt" : {
      "ObjectId" : "e457f71eb8179cdd913500c4036f75f4bb7b325e",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Name of project\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# With AUTOMOC, do not need to specify files\r\n\n# that contain Q_OBJECT macro for Qt to process with 'moc'\r\n\n# (meta-object compiler).\r\n\n#\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# Prevents dll linkage errors on windows\r\n\n#\r\n\n#IF(WIN32)\r\n\n#   ADD_DEFINITIONS(-DQUAZIP_STATIC)\r\n\n#   IF(MSVC)\r\n\n#      ADD_DEFINITIONS(-DQUAZIP_STATIC)\r\n\n#      #ADD_DEFINITIONS(-DQUAZIP_BUILD)\r\n\n#   ENDIF(MSVC)\r\n\n#ELSE(WIN32)\r\n\n#    ADD_DEFINITIONS(-DQUAZIP_STATIC)\r\n\n#ENDIF(WIN32)\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# Create a library\r\n\n#\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/Qwt/CMakeLists.txt" : {
      "ObjectId" : "2d0ec18c28ce23fbe102f05d7f996527d2075eb3",
      "LastModified" : "2018-03-21T23:50:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################\r\n\n# Qwt Widget Library\r\n\n# Copyright (C) 1997   Josef Wilgen\r\n\n# Copyright (C) 2002   Uwe Rathmann\r\n\n#\r\n\n# This library is free software; you can redistribute it and/or\r\n\n# modify it under the terms of the Qwt License, Version 1.0\r\n\n################################################################\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# Name of project\r\n\n#\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# QT include files\r\n\n#\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# With AUTOMOC, do not need to specify files\r\n\n# that contain Q_OBJECT macro for Qt to process with 'moc'\r\n\n# (meta-object compiler).\r\n\n#\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\r\n\n# Header files\r\n\n#\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\r\n\n# Process the header files with moc producing moc_*.cpp files\r\n\n#\r\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\r\n\n# Create the GUI library\r\n\n#\r\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/QxtCore/CMakeLists.txt" : {
      "ObjectId" : "83b85de300caa97c6c5775787ec4e980d318e360",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################\r\n\n# QxtCore\r\n\n################################################################\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# Name of project\r\n\n#\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# QT include files\r\n\n#\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# With AUTOMOC, do not need to specify files\r\n\n# that contain Q_OBJECT macro for Qt to process with 'moc'\r\n\n# (meta-object compiler).\r\n\n#\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\r\n\n# Header files\r\n\n#\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\r\n\n# Process the header files with moc producing moc_*.cpp files\r\n\n#\r\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\r\n\n# Create the GUI library\r\n\n#\r\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/Scenes/CMakeLists.txt" : {
      "ObjectId" : "ae9c8040434ffd7131e632301c8431491183db5a",
      "LastModified" : "2018-10-31T15:43:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# SceneObject is derived from CaretObject.  When a scene is created many \n\n# instances of SceneObject may be created via its subclasses. \n\n# When compiled with debugging on, CaretObject maintains a call stack\n\n# and new/delete is tracked for all CaretObjects.  As a result, the many \n\n# instances of SceneObject will cause reading of scenes to be slow and\n\n# memory usage to become excessive.  So, do not derive SceneObject from\n\n# CaretObject unless CARET_SCENE_DEBUG is defined.\n\n#\n\n#ADD_DEFINITIONS(-DCARET_SCENE_DEBUG)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# QT include files\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include_directories(${Qt5Network_INCLUDE_DIRS})\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# Create a Library\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/Tests/CMakeLists.txt" : {
      "ObjectId" : "f451e1d148c2ca6bbab4401fa777f9e1ba8111ba",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add QT for includes\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#The individual tests\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Create the test1 executable\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#        Qt5::OpenGL\n\n#        Qt5::PrintSupport\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#        Qt5::Widgets\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Libraries that are linked\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#${LIBS}\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# At this time, Cocoa needs to be explicitly added for Apple Mac\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#SET (QT_MAC_USE_COCOA TRUE)\n",
        "Line" : 149,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "#\n\n# Find Headers\n\n#\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#debian build machines don't have internet access\n\n#ADD_TEST(http test_driver http)\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/Xml/CMakeLists.txt" : {
      "ObjectId" : "3b5f09631055c2078e61dae2d02bdeefb700f302",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Name of Project\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# QT include files\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Create a Library\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/kloewe/cpuinfo/CMakeLists.txt" : {
      "ObjectId" : "96e8df669f8aad13a687d4f0d40c9b57079323b6",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/kloewe/dot/CMakeLists.txt" : {
      "ObjectId" : "2e4a4089262daab1c030f2aaf5f2d9577f6d647a",
      "LastModified" : "2018-09-20T19:14:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 29,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 4164
}