{
  "Repository" : "11117",
  "Revision" : "HEAD",
  "ObjectId" : "afac518904ad85c00a679e243f047d4427564cf7",
  "CommitTime" : "2019-04-16T06:44:06Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a62dec34191a2eedbce7c3aa35af9f81c6c7878c",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Instructions:\n\n# $ mkdir build\n\n# $ cd build\n\n# $ cmake ..\n\n# $ make\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### Policies need to be set *BEFORE* calling 'project()' !!!\n\n# Needed for hardening-flags in Fedora.  This policy will pass\n\n# all compiler-flags to stuff like 'FIND_PACKAGE()'.  Introduced\n\n# with CMake 3.2.0.  See documentation:\n\n# http://www.cmake.org/cmake/help/v3.3/policy/CMP0056.html\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### set required C++ standard level of the compiler\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "############# minimum library versions ###################\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Store system's or distribution's C[XX]FLAGS.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compilation cache\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################# VARIABLES #####################\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# SWIG 3.0.12 is the minimum requirement because of c++11 and extending\n\n# a class with template function\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# SWIG >= 3.0.0 has some new handling with C# (Mono) and breaks\n\n# typemapping created for earlier versions of SWIG.\n\n# see: http://www.swig.org/Doc3.0/CSharp.html#CSharp_introduction_swig2_compatibility\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# use our own UseSWIG.cmake in order to be able to enable ccache-swig\n",
        "Line" : 142,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Detect OS\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Get processor type, sets MACHINE macro\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################ COMPILER #######################\n\n# g++ version needs to be => 4.3\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#Build type\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# set the flags for the build types\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Fix build on Mac OSX 10.10 Yosemite when using mp-gcc-4X.\n\n# See: https://github.com/shogun-toolbox/shogun/issues/2635\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "############### VERSION #####################\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################# EXAMPLES ##################\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# note the examples dir is added below after tests have been defined\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "################# DATATYPES #################\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# detect word size\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#interfaces\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# coreml is an interface but not swig-based thus not listed in ${AVAILABLE_INTERFACE}\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Debugging Python-interface with CTest\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "######################### LIBRARIES #########################\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# detect PYTHON\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# save configuration options\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#SWIG Interfaces\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Respect system's or distribution's C[XX]FLAGS.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# coreml\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# python\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# lua\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# scala\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Java needed because Scala extends Java Classes and uses the executable generated from Java example for Integration testing\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# java\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ruby\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# octave\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# csharp\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# R\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# perl\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#add_subdirectory(${CMAKE_SOURCE_DIR}/src/interfaces/perl)\n",
        "Line" : 460,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "################# TESTING ###################\n\n#TODO: finish!!!\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# set CTAGS_FILE when tests/unit or examples/meta are added to the project\n\n# according to the logic below\n",
        "Line" : 485,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# allow meta examples without adding examples dir itself\n",
        "Line" : 503,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 44
    },
    "applications/msplicer/Makefile" : {
      "ObjectId" : "91104e2868cdcf92ee7371ba1cb1355ee4cadf05",
      "LastModified" : "2010-09-03T14:59:10Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "cmake/FindARPACK.cmake" : {
      "ObjectId" : "9b004700595e2fd5d426789e7800e14983b0cfee",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindARPREC.cmake" : {
      "ObjectId" : "ce373bafc991d9ce3049474689c5a52ae0e40710",
      "LastModified" : "2013-10-28T22:41:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle REQUIRED and QUIET options\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindAtlas.cmake" : {
      "ObjectId" : "d5cc159244d005ac3fd198b69789e2d30fa8bf25",
      "LastModified" : "2017-10-30T13:37:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Atlas (and Lapack) libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Atlas_ROOT_DIR:            Base directory where all Atlas components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  Atlas_FOUND\n\n#  Atlas_INCLUDE_DIRS\n\n#  Atlas_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# atlas 3.10+ contains all the function in one shared lib so dont try to find other parts of atlas\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindCCache.cmake" : {
      "ObjectId" : "2fad2ba8005f5c63a327bd3909bac2e65a84beea",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle REQUIRED and QUIET options\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set env CCACHE_CPP2=yes\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindCPLEX.cmake" : {
      "ObjectId" : "5cc254f97d74c9f87a23768835192f6d1faf7851",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindCSharp.cmake" : {
      "ObjectId" : "10b7fd55bc341e0a69c3758f91acb5807a1ee316",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding and using C# (.NET and Mono).\n\n#\n\n# The following variables are set:\n\n# CSHARP_FOUND - set to ON if C# is found\n\n# CSHARP_USE_FILE - the path to the C# use file\n\n# CSHARP_TYPE - the type of the C# compiler (eg. \".NET\" or \"Mono\")\n\n# CSHARP_VERSION - the version of the C# compiler (eg. \"v4.0\" or \"2.10.2\")\n\n# CSHARP_COMPILER - the path to the C# compiler executable (eg. \"C:/Windows/Microsoft.NET/Framework/v4.0.30319/csc.exe\" or \"/usr/bin/gmcs\")\n\n# CSHARP_INTERPRETER - the path to interpreter needed to run CSharp executables\n\n# CSHARP_PLATFORM - the C# target platform\n\n# CSHARP_SDK - the SDK commandline switch (empty for .NET, for Mono eg. \"/sdk:2\" or \"/sdk:4\")\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindCSharp.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: ADD ABILITY TO SELECT WHICH C# COMPILER eg. .NET or Mono (if both exist). For the moment, .NET is selected above Mono.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure find package macros are included\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# By default use anycpu platform, allow the user to override\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle WIN32 specific issues\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the USE_FILE path\n\n# http://public.kitware.com/Bug/view.php?id=7757\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindColPack.cmake" : {
      "ObjectId" : "fb71ebdda015686aa551a0750cc526562d1cc796",
      "LastModified" : "2013-10-28T22:41:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ColPack\n\n# Find the native ColPack headers and libraries.\n\n#\n\n#  COLPACK_INCLUDE_DIR  - Where to find <ColPack/ColPackHeaders.h>, etc.\n\n#  COLPACK_FOUND        - True if ColPack found.\n\n#  COLPACK_LIBRARY_DIR  - Where to find the library files\n\n#  COLPACK_LIBRARIES    - Which libraries are available\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header files\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the libraries\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle REQUIRED and QUIET options\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindCtags.cmake" : {
      "ObjectId" : "b6e27415cfed798656ae9a46681a3384d5f0f65b",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The module defines the following variables:\n\n#   CTAGS_EXECUTABLE - path to ctags command line client\n\n#   CTAGS_FOUND - true if the command line client was found\n\n#   CTAGS_VERSION_STRING - the version of ctags found (since CMake 2.8.8)\n\n# Example usage:\n\n#   find_package( Ctags )\n\n#   if( CTAGS_FOUND )\n\n#     message(\"ctags found: ${CTAGS_EXECUTABLE}\")\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set CTAGS_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindCxaDemangle.cmake" : {
      "ObjectId" : "e08aba9e002343869664b0e681e72f7349731e09",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module that checks whether the compiler supports the\n\n# abi::__cxa_demangle function required to\n\n# make the type names returned by typeid() human-readable\n\n#\n\n# Sets the following variable:\n\n# HAVE_CXA_DEMANGLE\n\n#\n\n# perform tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prevent useless message from being displayed\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindDotNetFrameworkSdk.cmake" : {
      "ObjectId" : "0b321b411f813331b03e17959536b973c3174d84",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# A CMake Module for finding C# .NET.\n\n#\n\n# The following variables are set:\n\n# CSHARP_DOTNET_FOUND\n\n# CSHARP_DOTNET_COMPILER_${version} eg. \"CSHARP_DOTNET_COMPILER_v4.0.30319\"\n\n# CSHARP_DOTNET_VERSION eg. \"v4.0.30319\"\n\n# CSHARP_DOTNET_VERSIONS eg. \"v2.0.50727, v3.5, v4.0.30319\"\n\n# DotNetFrameworkSdk_USE_FILE\n\n#\n\n# Additional references can be found here:\n\n# .NET SDK 1.1: http://www.microsoft.com/downloads/details.aspx?FamilyID=9b3a2ca6-3647-4070-9f41-a333c6b9181d&displaylang=en\n\n# .NET SDK 2.0: http://www.microsoft.com/downloads/details.aspx?FamilyID=fe6f2099-b7b4-4f47-a244-c96d69c35dec&displaylang=en\n\n# .NET SDK 3.5: http://www.microsoft.com/downloads/details.aspx?familyid=333325fd-ae52-4e35-b531-508d977d32a6&displaylang=en\n\n# C# Compiler options: http://msdn.microsoft.com/en-us/library/2fdbz5xd(v=VS.71).aspx\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindDotNETFrameworkSDK.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The .NET compiler has already been found\n\n# It may have been reset by the user, verify it is correct\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear versions\n",
        "Line" : 34,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# Get the framework directory based on platform\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search for .NET versions\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Extract version number (eg. v4.0.30319)\n\n# TODO: Consider using REGEX\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add variable holding executable\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Create a list of supported compiler versions\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We found at least one .NET compiler version\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Report the found versions\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set the compiler version\n\n# Do not force, so that the user can manually select their own version if they wish\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# If available, select .NET v2.0.50727 (this is the minimal version as it supports generics, and allows use of VS2008)\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Select the highest version (first in reverse sorted list)\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Set USE_FILE\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/FindGDB.cmake" : {
      "ObjectId" : "a5f743da608044adcb2f3fa2ff935fd86e90f606",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GDB\n\n#\n\n# Once done, this will define:\n\n#  GDB_FOUND - system has GDB\n\n#  GDB_COMMAND - the command to run\n\n#  GDB_VERSION - version\n\n#  GDB_HAS_RETURN_CHILD_RESULT - if the --return-child-result flag is supported\n\n#\n\n# Useful configuration variables you might want to add to your cache:\n\n#  GDB_ROOT_DIR - A directory prefix to search\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set xxx_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindGLPK.cmake" : {
      "ObjectId" : "bc0908bb2eeea600c5443b647ce0b00bec6cc78b",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindHoard.cmake" : {
      "ObjectId" : "a27434909a1eb8e035da28cfa8f2381ca1ee2f1e",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2007-2012 Hypertable, Inc.\n\n#\n\n# This file is part of Hypertable.\n\n#\n\n# Hypertable is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License\n\n# as published by the Free Software Foundation; either version 3\n\n# of the License, or any later version.\n\n#\n\n# Hypertable is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with Hypertable. If not, see <http://www.gnu.org/licenses/>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find Hoard\n\n# Find the native Hoard includes and library\n\n#\n\n# Hoard_LIBRARIES - List of libraries when using Hoard.\n\n# Hoard_FOUND - True if Hoard found.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindJSON.cmake" : {
      "ObjectId" : "30235872dfe9133935f0499ec8e764c35f035763",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindJinja2.cmake" : {
      "ObjectId" : "f214ae63e3b6ca17c72c10131812a5ff1716ed10",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finding Jinja2 involves calling the Python interpreter\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindLZO.cmake" : {
      "ObjectId" : "267bebad2d11c6e7960ffc5f22735dab84d6ee2d",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LZO (lzo.h, liblzo2.a)\n\n# This module defines\n\n# LZO_INCLUDE_DIR, directory containing headers\n\n# LZO_STATIC_LIB, path to libslzo2.a\n\n# LZO_FOUND, whether lzo has been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindLpSolve.cmake" : {
      "ObjectId" : "213916d2470ccf9eab3e72b3567f64cd64afc6b5",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindMetaExamples.cmake" : {
      "ObjectId" : "2d6fb0231e452a29013cb81de2606c8c16a68cba",
      "LastModified" : "2018-07-08T09:41:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# remove double entries to avoid errors due to \"double\" removing\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Remove meta example that cannot be built because of missing dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get the cookbook pages we want to exclude from build\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is made since some meta example does not have\n\n# a cookbook page.\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Check to ensure we have cookbook pages to exclude\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Generate a string with all the meta examples separated by commas.\n\n# This is made since Sphinx's exclude_patterns option wants\n\n# the list's items separated by commas, but cmake's lists use\n\n# semicolons instead.\n\n# See: https://cmake.org/cmake/help/v3.3/command/list.html\n\n# See: http://www.sphinx-doc.org/en/stable/invocation.html#id2\n",
        "Line" : 100,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "cmake/FindMono.cmake" : {
      "ObjectId" : "f11ceee776eeff62ed689911779d27f1499e691d",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding Mono.\n\n#\n\n# The following variables are set:\n\n# CSHARP_MONO_FOUND\n\n# CSHARP_MONO_COMPILER_${version} eg. \"CSHARP_MONO_COMPILER_2.10.2\"\n\n# CSHARP_MONO_INTERPRETOR_${version} eg. \"CSHARP_MONO_INTERPRETOR_2.10.2\"\n\n# CSHARP_MONO_VERSION eg. \"2.10.2\"\n\n# CSHARP_MONO_VERSIONS eg. \"2.10.2, 2.6.7\"\n\n#\n\n# Additional references can be found here:\n\n# http://www.mono-project.com/Main_Page\n\n# http://www.mono-project.com/CSharp_Compiler\n\n# http://mono-project.com/FAQ:_Technical (How can I tell where the Mono runtime is installed)\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindMono.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Mono compiler has already been found\n\n# It may have been reset by the user, verify it is correct\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear versions\n",
        "Line" : 34,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# Search for Mono on Win32 systems\n\n# See http://mono-project.com/OldReleases and http://www.go-mono.com/mono-downloads/download.html\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO: Use HKLM_LOCAL_MACHINE\\Software\\Novell\\Mono\\DefaultCLR to specify default version\n\n# get_filename_component( test \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Novell\\\\Mono;DefaultCLR]\" NAME )\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Extract version number (eg. 2.10.2)\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Add variable holding executable\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Set interpreter\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Create a list of supported compiler versions\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# We found at least one Mono compiler version\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Search for Mono on non-Win32 systems\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# variable is added to the cache, we removed it below\n",
        "Line" : 117,
        "CharPositionInLine" : 25
      },
      "12" : {
        "Text" : "# Determine version\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# variable is added to the cache, we removed it below\n",
        "Line" : 125,
        "CharPositionInLine" : 30
      },
      "14" : {
        "Text" : "# We found Mono compiler\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Remove temp variable from cache\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Report the found versions\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Set USE_FILE\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/FindMosek.cmake" : {
      "ObjectId" : "7abbc253754d590209f171129f83a2ccbcde6ce9",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# @file  FindMOSEK.cmake\n\n# @brief Find MOSEK (http://www.mosek.com) package.\n\n#\n\n# @par Input variables:\n\n# <table border=\"0\">\n\n#   <tr>\n\n#     @tp @b MOSEK_DIR @endtp\n\n#     <td>The MOSEK package files are searched under the specified root\n\n#         directory. If they are not found there, the default search paths\n\n#         are considered. This variable can also be set as environment variable.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_NO_OMP @endtp\n\n#     <td>Whether to use the link libraries build without OpenMP, i.e.,\n\n#         multi-threading, enabled. By default, the multi-threaded libraries\n\n#         are used.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_FIND_COMPONENTS @endtp\n\n#     <td>The @c COMPONENTS argument(s) of the find_package() command can\n\n#         be used to also look for optional MOSEK components.\n\n#         Valid component values are \"mex\", \"jar\", and \"pypkg\".</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_TOOLS_SUFFIX @endtp\n\n#     <td>Platform specific path suffix for tools, i.e., \"tools/platform/linux64x86\"\n\n#         on 64-bit Linux systems. If not specified, this module determines the\n\n#         right suffix depending on the CMake system variables.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MATLAB_RELEASE @endtp\n\n#     <td>Release of MATLAB installation. Set to the 'Release' return value of\n\n#         the \"ver ('MATLAB')\" command of MATLAB without brackets. If this\n\n#         variable is not set and the basis_get_matlab_release() command is\n\n#         available, it is invoked to determine the release version automatically.\n\n#         Otherwise, an error is raised if the \"mex\" component is searched.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MEX_EXT @endtp\n\n#     <td>The extension of MEX-files. If this variable is not set and the\n\n#         basis_mexext() command is available, it is invoked to determine the\n\n#         extension automatically. Otherwise, the MEX extension defaults to \"mexa64\".</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b PYTHON_VERSION_MAJOR @endtp\n\n#     <td>Major version of Python installation as determined by FindPythonInterp.cmake module.</td>\n\n#   </tr>\n\n# </table>\n\n#\n\n# @par Output variables:\n\n# <table border=\"0\">\n\n#   <tr>\n\n#     @tp @b MOSEK_FOUND @endtp\n\n#     <td>Whether the package was found and the following CMake variables are valid.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_<component>_FOUND @endtp\n\n#     <td>Whether the component requested by @c MOSEK_FIND_COMPONENTS was found.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_INCLUDE_DIR @endtp\n\n#     <td>Package include directories.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_INCLUDES @endtp\n\n#     <td>Include directories including prerequisite libraries (non-cached).</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_LIBRARY @endtp\n\n#     <td>Package libraries.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_LIBRARIES @endtp\n\n#     <td>Package libraries and prerequisite libraries (non-cached).</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_mosekopt_MEX @endtp\n\n#     <td>Package mosekopt MEX-file.</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_MEX_FILES @endtp\n\n#     <td>List of MEX-files (non-cached).</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_mosek_JAR @endtp\n\n#     <td>Package mosek Java library (.jar file).</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_CLASSPATH @endtp\n\n#     <td>List of Java package libraries and prerequisite libraries (non-cached).</td>\n\n#   </tr>\n\n#   <tr>\n\n#     @tp @b MOSEK_PYTHONPATH @endtp\n\n#     <td>Path to Python modules of this package.</td>\n\n#   </tr>\n\n# </table>\n\n#\n\n# Copyright (c) 2011, 2012 University of Pennsylvania. All rights reserved.<br />\n\n# See http://www.rad.upenn.edu/sbia/software/license.html or COPYING file.\n\n#\n\n# Contact: SBIA Group <sbia-software at uphs.upenn.edu>\n\n#\n\n# @ingroup CMakeFindModules\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# optional components to look for\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# remember CMAKE_FIND_LIBRARY_SUFFIXES to be able to restore it\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# versions - library suffixes\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# known MOSEK versions, all entries have to be specified in descending order!\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get a full list of particular versions (<major>.<minor>) to look for\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# initialize search\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MATLAB components\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MATLAB version\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# search path for MOSEK MATLAB toolbox\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# extension of MEX-files\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Python components\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# library name\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# append/set library version suffixes\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# search path for MOSEK tools\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#-------------------------------------------------------------\n\n# find include files and library\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# try twice in case MOSEK_DIR\n\n# was not set, but known in\n\n# second iteration\n",
        "Line" : 306,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# find files\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# derive MOSEK_DIR\n",
        "Line" : 349,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# skip second iteration if both found already\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MATLAB components\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Java components\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Python components\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# prerequisite libraries\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# aliases / backwards compatibility\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# debugging\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# handle the QUIETLY and REQUIRED arguments and set *_FOUND to TRUE\n\n# if all listed variables are found or TRUE\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# MESSAGE\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# VARIABLES\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "cmake/FindNLopt.cmake" : {
      "ObjectId" : "1b6928d869c80795f5dd6dbc1d501e4645dad6df",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find NLopt\n\n# Find the native NLopt includes and library\n\n#\n\n#  NLOPT_INCLUDE_DIR - where to find nlopt.h, etc.\n\n#  NLOPT_LIBRARIES   - List of libraries when using nlopt.\n\n#  NLOPT_FOUND       - True if nlopt found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NLOPT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindNumPy.cmake" : {
      "ObjectId" : "a9e236df75d1b58e6f8b3ee6bf549c237d0f9daf",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\n\n# This module finds if NumPy is installed, and sets the following variables\n\n# indicating where it is.\n\n#\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\n\n#\n\n# NUMPY_FOUND - was NumPy found\n\n# NUMPY_VERSION - the version of NumPy found as a string\n\n# NUMPY_VERSION_MAJOR - the major version number of NumPy\n\n# NUMPY_VERSION_MINOR - the minor version number of NumPy\n\n# NUMPY_VERSION_PATCH - the patch version number of NumPy\n\n# NUMPY_VERSION_DECIMAL - e.g. version 1.6.1 is 10601\n\n# NUMPY_INCLUDE_DIRS - path to the NumPy include files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#============================================================================\n\n# Copyright 2012 Continuum Analytics, Inc.\n\n#\n\n# MIT License\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining\n\n# a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction, including\n\n# without limitation the rights to use, copy, modify, merge, publish,\n\n# distribute, sublicense, and/or sell copies of the Software, and to permit\n\n# persons to whom the Software is furnished to do so, subject to\n\n# the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\n# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#\n\n#============================================================================\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finding NumPy involves calling the Python interpreter\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert the process output into a list\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The output from Python was unexpected. Raise an error always\n\n# here, because we found NumPy, but it appears to be corrupted somehow.\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Make sure all directory separators are '/'\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get the major and minor version numbers\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindOctave.cmake" : {
      "ObjectId" : "ee580559145ba0c2294f0255423bae8a31ea00ab",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Octave\n\n# GNU Octave is a high-level interpreted language, primarily intended for numerical computations.\n\n# available at http://www.gnu.org/software/octave/\n\n#\n\n# This module defines:\n\n#  OCTAVE_EXECUTABLE           - octave interpreter\n\n#  OCTAVE_INCLUDE_DIRS         - include path for mex.h, mexproto.h\n\n#  OCTAVE_LIBRARIES            - required libraries: octinterp, octave, cruft\n\n#  OCTAVE_OCTINTERP_LIBRARY    - path to the library octinterp\n\n#  OCTAVE_OCTAVE_LIBRARY       - path to the library octave\n\n#  OCTAVE_CRUFT_LIBRARY        - path to the library cruft\n\n#  OCTAVE_VERSION_STRING       - octave version string\n\n#  OCTAVE_MAJOR_VERSION        - major version\n\n#  OCTAVE_MINOR_VERSION        - minor version\n\n#  OCTAVE_PATCH_VERSION        - patch version\n\n#  OCTAVE_OCT_FILE_DIR         - object files that will be dynamically loaded\n\n#  OCTAVE_OCT_LIB_DIR          - oct libraries\n\n#  OCTAVE_M_SITE_DIR           - .m files site dir\n\n#  OCTAVE_OCT_SITE_DIR         - .oct files site dir\n\n#\n\n# The macro octave_add_oct allows to create compiled modules.\n\n# octave_add_oct (target_name\n\n#         [SOURCES] source1 [source2 ...]\n\n#         [LINK_LIBRARIES  lib1 [lib2 ...]]\n\n#         [EXTENSION ext]\n\n#)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2013, Julien Schueller\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# The views and conclusions contained in the software and documentation are those\n\n# of the authors and should not be interpreted as representing official policies,\n\n# either expressed or implied, of the FreeBSD Project.\n\n#=============================================================================\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle REQUIRED and QUIET options\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindOpenCL.cmake" : {
      "ObjectId" : "d32d562c90704e1964545d22b481eae2b9d52f28",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the OpenCL headers and library\n\n#\n\n# Defines the following if found:\n\n#  OPENCL_FOUND        : TRUE if found, FALSE otherwise\n\n#  OPENCL_INCLUDE_DIRS : Include directories for OpenCL\n\n#  OPENCL_LIBRARIES    : The libraries to link against\n\n#\n\n# The user can set the OPENCLROOT environment variable to help finding OpenCL\n\n# if it is installed in a non-standard place.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#NO_DEFAULT_PATH  #uncomment this is you wish to surpress the use of default paths for OpenCL\n",
        "Line" : 35,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#NO_DEFAULT_PATH  #uncomment this is you wish to surpress the use of default paths for OpenCL\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#use the CL/ include folder provided with ViennaCL\n",
        "Line" : 54,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 4
    },
    "cmake/FindPLY.cmake" : {
      "ObjectId" : "7433f540f2a583e339876c78ae34558d32169b80",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# loosely based on FindNumPy.cmake, modifications by Heiko Strathmann\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Finding PLY involves calling the Python interpreter\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindPandoc.cmake" : {
      "ObjectId" : "63fd7c2e6f879b06a9f6f870eeba45425f7854e6",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Midified from https://llvm.org/svn/llvm-project/llvm/trunk/cmake/modules/FindSphinx.cmake\n\n# under \"UIUC\" BSD-Style license.\n\n# CMake find_package() Module for pandoc markdown converter, http://pandoc.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Pandoc)\n\n#\n\n# If successful the following variables will be defined\n\n# PANDOC_FOUND\n\n# PANDOC_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set PANDOC_FOUND to true if PANDOC_EXECUTABLE exists\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindR.cmake" : {
      "ObjectId" : "2799ddf8b85b28297b9cc7c64b6e02119097a2e7",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- cmake -*-\n\n#\n\n# FindR.cmake: Try to find R\n\n#\n\n# (C) Copyright 2005-2012 EDF-EADS-Phimeca\n\n#\n\n# This library is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU Lesser General Public\n\n# License as published by the Free Software Foundation; either\n\n# version 2.1 of the License.\n\n#\n\n# This library is distributed in the hope that it will be useful\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\n# Lesser General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU Lesser General Public\n\n# License along with this library; if not, write to the Free Software\n\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n\n#\n\n# @author dutka\n\n# @date 2010-02-04 16:44:49 +0100 (Thu, 04 Feb 2010)\n\n# Id Makefile.am 1473 2010-02-04 15:44:49Z dutka\n\n#\n\n#\n\n# - Try to find R\n\n# Once done this will define\n\n#\n\n# R_FOUND - System has R\n\n# R_LIBRARIES - The libraries needed to use R\n\n# R_DEFINITIONS - Compiler switches required for using R\n\n# R_EXECUTABLE - The R interpreter\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 36,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#IF (NOT WIN32)\n\n# # use pkg-config to get the directories and then use these values\n\n# # in the FIND_PATH() and FIND_LIBRARY() calls\n\n# FIND_PACKAGE(PkgConfig)\n\n# PKG_CHECK_MODULES(PC_R R)\n\n# SET(R_DEFINITIONS ${PC_R_CFLAGS_OTHER})\n\n#ENDIF (NOT WIN32)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set R_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindRubyNArray.cmake" : {
      "ObjectId" : "b2c5c51870a739cbd91fe3899dd3b541f64cb8aa",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find vendor arch dir\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find vendor arch dir\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindSNAPPY.cmake" : {
      "ObjectId" : "c1568c086a6ce1d01fb4109a7c1832469eee97ce",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find SNAPPY - A fast compressor/decompressor\n\n#\n\n# This module defines\n\n#  SNAPPY_FOUND - whether the qsjon library was found\n\n#  SNAPPY_LIBRARIES - the snappy library\n\n#  SNAPPY_INCLUDE_DIR - the include path of the snappy library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindScala.cmake" : {
      "ObjectId" : "b56b493b3eabe803b4e7bfc3b95841f1c32aa06f",
      "LastModified" : "2017-06-30T13:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Inspired from https://github.com/frs69wq/simgrid/blob/master/buildtools/Cmake/Modules/FindScala.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindSphinx.cmake" : {
      "ObjectId" : "670a2a4db7c3699e2e7c3ff5d3eb115efac949c8",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Taken from https://llvm.org/svn/llvm-project/llvm/trunk/cmake/modules/FindSphinx.cmake\n\n# under \"UIUC\" BSD-Style license.\n\n# CMake find_package() Module for Sphinx documentation generator\n\n# http://sphinx-doc.org/\n\n#\n\n# Example usage:\n\n#\n\n# find_package(Sphinx)\n\n#\n\n# If successful the following variables will be defined\n\n# SPHINX_FOUND\n\n# SPHINX_EXECUTABLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set SPHINX_FOUND to true if SPHINX_EXECUTABLE exists\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindViennaCL.cmake" : {
      "ObjectId" : "8dc7acb1d7541eec1ba43722cb00eebc8c5ef722",
      "LastModified" : "2017-02-12T14:38:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find ViennaCL library and include path.\n\n# Once done this will define\n\n#\n\n# VIENNACL_FOUND\n\n# VIENNACL_INCLUDE_DIRS\n\n# VIENNACL_LIBRARIES\n\n# VIENNACL_WITH_OPENCL\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Linux\n",
        "Line" : 31,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# try to read version.hpp\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Findrxcpp.cmake" : {
      "ObjectId" : "87a09dc87a575fcdd072cdd118926d905e44c8e2",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Gonzalo Brito Gadeschi 2015\n\n# Copyright Kirk Shoop 2016\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n# Find the rxcpp include directory\n\n# The following variables are set if rxcpp is found.\n\n#  rxcpp_FOUND        - True when the rxcpp include directory is found.\n\n#  rxcpp_INCLUDE_DIR  - The path to where the meta include files are.\n\n# If rxcpp is not found, rxcpp_FOUND is set to false.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# https://github.com/gnzlbg/ndtree/blob/master/cmake/Findrange-v3.cmake\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/LDGOLD.cmake" : {
      "ObjectId" : "45245512ad0980185e32af691a5cdaa78f683157",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# only ccache 3.2.3 and later supports DEBUGFISSION\n\n# i.e. -gsplit-dwarf flag. see\n\n# https://bugzilla.samba.org/show_bug.cgi?id=10005\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "cmake/LTO.cmake" : {
      "ObjectId" : "47dc8345d580d9b824527afa004de06b7a9db347",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ThinLTO's incremental linking\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# FIXME: find out the linker type \n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/PythonEnvironment.cmake" : {
      "ObjectId" : "62dc636a85da1674b919a619323bb01c619ee3c0",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ShogunFindLAPACK.cmake" : {
      "ObjectId" : "5f2a4202f794ac351e8e974d659121ae35e03e2d",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable Eigen to use Lapack backend\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find out the type of Lapack/BLAS implementation we are dealing with\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Accelerate.framework we found for LaPack/BLAS\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# no comes some magic as on osx el capitalismo and sierra leone\n\n# versions things are working in some magic way (vecLib that is)\n\n# see #4136\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# in case MKL is available enable Eigen to use it.\n\n# for more fine grained control and details see:\n\n# https://eigen.tuxfamily.org/dox/TopicUsingIntelMKL.html\n\n# this is supported since Eigen version 3.1 and later\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# trying to use the new Single Dynamic Library of MKL\n\n# https://software.intel.com/en-us/articles/a-new-linking-model-single-dynamic-library-mkl_rt-since-intel-mkl-103\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# just use the mkl_rt and let the user specify/decide all the MKL specific\n\n# optimisation runtime\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# test whether we have cblas.h in the header paths and the detected\n\n# LAPACK_LIBRARIES contains all the libraries to compile even with cblas_* functions\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# detect if the detected Lapack is atlas\n\n# clapack_* functions are implemented in atlas\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# this usually happens on RHEL/CentOS; usually having Atlas is good\n",
        "Line" : 99,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "#check is detected BLAS/LAPACK is OpenBLAS by looking for an OpenBLAS specific function\n",
        "Line" : 110,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#check if cblas.h exists\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# if LaPack is detected use the lapack/blas backend in Eigen\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "cmake/ShogunInterfaces.cmake" : {
      "ObjectId" : "96bf1f5618b050ef252270c786424ac7d77bba17",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# unset any release or distribution flags\n\n# we don't want them when compiling SWIG generated source\n\n#SET(CMAKE_CXX_FLAGS_RELEASE \"\")\n\n#SET(CMAKE_CXX_FLAGS_DISTRIBUTION \"\")\n\n#SET(CMAKE_CXX_FLAGS_DEBUG \"\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#get_cmake_property(_variableNames VARIABLES)\n\n#foreach (_variableName ${_variableNames})\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t    message(STATUS \"${_variableName}=${${_variableName}}\")\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#\tendforeach()\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#ADD_CUSTOM_COMMAND(TARGETS ${PREPEND_TARGET}interface_${INTERFACE_NAME}\n\n#\t\t\t\t   POST_BUILD\n\n#\t\t\t\t   COMMAND ${PYTHON_EXECUTABLE}\n\n#\t\t\t\t   ARGS ${CMAKE_SOURCE_DIR}/src/.scrub_docstrings.py )\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#TODO add scrubing\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Make sure all interfaces are build single-threaded to reduce\n\n# excessive memory consumption during build.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/ShogunPackaging.cmake" : {
      "ObjectId" : "e138145d4a8afa3251540a17617f6db8a8d006bd",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# general cpack settings\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/src/README\")\n\n#set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/src/COPYRIGHT\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Heuristics to figure out cpack generator\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# debian package settings\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# rpm package settings\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/ShogunUtils.cmake" : {
      "ObjectId" : "4fcfb533c536f2ef760d3c0dc37199dcdfc02b79",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# based on compiz_discover_tests\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add examples to the dependencies of modular interfaces to make sure\n\n# nothing will infer with them being build single-threaded.\n",
        "Line" : 118,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# FIXME: add support for modern target based dependency\n\n#FIND_PACKAGE(target [REQUIRED] [VERSION])\n\n#if (<target>_FOUND)\n\n#  set(target_flag 1)\n\n#  target_link_libraries(shogun SCOPE <target>)\n\n#endif()\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set the extension\n",
        "Line" : 272,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# inspired by arrow's benchmarking:\n\n# https://github.com/apache/arrow/blob/apache-arrow-0.9.0/cpp/cmake_modules/BuildUtils.cmake#L223\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This benchmark has a corresponding .cc file, set it up as an executable.\n",
        "Line" : 303,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "cmake/UseCSharp.cmake" : {
      "ObjectId" : "ae01a5be076efe2aaeac56180965d4f82bc2526a",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for finding and using C# (.NET and Mono).\n\n#\n\n# The following global variables are assumed to exist:\n\n# CSHARP_SOURCE_DIRECTORY - path to C# sources\n\n# CSHARP_BINARY_DIRECTORY - path to place resultant C# binary files\n\n#\n\n# The following variables are set:\n\n# CSHARP_TYPE - the type of the C# compiler (eg. \".NET\" or \"Mono\")\n\n# CSHARP_COMPILER - the path to the C# compiler executable (eg. \"C:/Windows/Microsoft.NET/Framework/v4.0.30319/csc.exe\")\n\n# CSHARP_VERSION - the version number of the C# compiler (eg. \"v4.0.30319\")\n\n#\n\n# The following macros are defined:\n\n# CSHARP_ADD_EXECUTABLE( name references [files] [output_dir] ) - Define C# executable with the given name\n\n# CSHARP_ADD_LIBRARY( name references [files] [output_dir] ) - Define C# library with the given name\n\n#\n\n# Examples:\n\n# CSHARP_ADD_EXECUTABLE( MyExecutable \"\" \"Program.cs\" )\n\n# CSHARP_ADD_EXECUTABLE( MyExecutable \"ref1.dll ref2.dll\" \"Program.cs File1.cs\" )\n\n# CSHARP_ADD_EXECUTABLE( MyExecutable \"ref1.dll;ref2.dll\" \"Program.cs;File1.cs\" )\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/UseCSharp.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: ADD SUPPORT FOR LINK LIBRARIES\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check something was found\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include type-based USE_FILE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Private macro\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Step through each argument\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Argument is a dll, add reference\n",
        "Line" : 64,
        "CharPositionInLine" : 7
      },
      "7" : {
        "Text" : "# Argument is a source file\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# For dependencies, we need to expand wildcards\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Check we have at least one source\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Perform platform specific actions\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Add custom target and command\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "cmake/UseDotNetFrameworkSdk.cmake" : {
      "ObjectId" : "52c1f00181d7dcb1448b7bc3cd55a07fe6bc97ab",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for using C# .NET.\n\n#\n\n# The following variables are set:\n\n# (none)\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/UseDotNETFrameworkSDK.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/UseMono.cmake" : {
      "ObjectId" : "e1daa3c5c1ad50715daf97f902a2193e7232eeb4",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# A CMake Module for using Mono.\n\n#\n\n# The following variables are set:\n\n# (none)\n\n#\n\n# Additional references can be found here:\n\n# http://www.mono-project.com/Main_Page\n\n# http://www.mono-project.com/CSharp_Compiler\n\n#\n\n# This file is based on the work of GDCM:\n\n# http://gdcm.svn.sf.net/viewvc/gdcm/trunk/CMake/FindMono.cmake\n\n# Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/UseSWIG.cmake" : {
      "ObjectId" : "3e6056e2f08fa6ba6d06cad9bcbc2dfd2edf9ea7",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - SWIG module for CMake\n\n# Defines the following macros:\n\n#   SWIG_ADD_MODULE(name language [ files ])\n\n#     - Define swig module with given name and specified language\n\n#   SWIG_LINK_LIBRARIES(name [ libraries ])\n\n#     - Link libraries to swig module\n\n# All other macros are for internal use only.\n\n# To get the actual name of the swig module,\n\n# use: ${SWIG_MODULE_${name}_REAL_NAME}.\n\n# Set Source files properties such as CPLUSPLUS and SWIG_FLAGS to specify\n\n# special behavior of SWIG. Also global CMAKE_SWIG_FLAGS can be used to add\n\n# special flags to all swig calls.\n\n# Another special variable is CMAKE_SWIG_OUTDIR, it allows one to specify\n\n# where to write all the swig generated module (swig -outdir option)\n\n# The name-specific variable SWIG_MODULE_<name>_EXTRA_DEPS may be used\n\n# to specify extra dependencies for the generated modules.\n\n# If the source file generated by swig need some special flag you can use\n\n# set_source_files_properties( ${swig_generated_file_fullname}\n\n#        PROPERTIES COMPILE_FLAGS \"-bla\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# small change for enabling ccache-swig\n\n# set CCACHE_SWIG_EXECUTABLE to the path of ccache-swig in order to enable\n\n# ccache-swig when compiling swig files\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n# Copyright 2009 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# For given swig module initialize variables associated with it\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# when swig is used without the -interface it will produce in the module.py\n\n# a 'import _modulename' statement, which implies having a corresponding\n\n# _modulename.so (*NIX), _modulename.pyd (Win32).\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n# For a given language, input file, and output file, determine extra files that\n\n# will be generated. This is internal swig macro.\n\n#\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Take swig (*.i) file and add proper custom commands for it\n\n#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If CMAKE_SWIG_OUTDIR was specified then pass it to -outdir\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# add the language into the name of the file (i.e. TCL_wrap)\n\n# this allows for the same .i file to be wrapped into different languages\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#message(\"Full path to source file: ${swig_source_file_fullname}\")\n\n#message(\"Full path to the output file: ${swig_generated_file_fullname}\")\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# default is c, so add c++ flag if it is c++\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Let's create the ${swig_outdir} at execution time, in case dir contains $(OutDir)\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#\n\n# Create Swig module\n\n#\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# In java you want:\n\n#      System.loadLibrary(\"LIBRARY\");\n\n# then JNI will look for a library whose name is platform dependent, namely\n\n#   MacOS  : libLIBRARY.jnilib\n\n#   Windows: LIBRARY.dll\n\n#   Linux  : libLIBRARY.so\n",
        "Line" : 228,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# this is only needed for the python case where a _modulename.so is generated\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Python extension modules on Windows must have the extension \".pyd\"\n\n# instead of \".dll\" as of Python 2.5.  Older python versions do support\n\n# this suffix.\n\n# http://docs.python.org/whatsnew/ports.html#SECTION0001510000000000000000\n\n# <quote>\n\n# Windows: .dll is no longer supported as a filename extension for extension modules.\n\n# .pyd is now the only filename extension that will be searched for.\n\n# </quote>\n",
        "Line" : 240,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#\n\n# Like TARGET_LINK_LIBRARIES but for swig modules\n\n#\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/checkgdb.cmake" : {
      "ObjectId" : "f91306df34c8abd37872e1b696c151be863d8cec",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/discover_unit_tests.cmake" : {
      "ObjectId" : "b5ddad9085eae9950a878a99d018c03d4dd4011d",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/ARPREC.cmake" : {
      "ObjectId" : "a68425d2c544ae3b99681c08050b81749e2e0f29",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/ColPack.cmake" : {
      "ObjectId" : "b451fe582b6a9f78676157b865c8f8085a27c2de",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/GoogleTestNMock.cmake" : {
      "ObjectId" : "8bec01282f12ac69ff5ab9839829f81ea16a9300",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/JSON.cmake" : {
      "ObjectId" : "3609dac41786ba24466e263b0fc4bcb84f4cace4",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/Jemalloc.cmake" : {
      "ObjectId" : "e16e9c8d0eb62135622931d1ba120ce84ad31332",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/MSDirent.cmake" : {
      "ObjectId" : "7c98b5f252256eace6c039885f3e439eba37d8b6",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/MSIntTypes.cmake" : {
      "ObjectId" : "7966474193976e53e1704f105b931be886b02984",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/NLopt.cmake" : {
      "ObjectId" : "81064faabcd6561af2ab584cfc4e6461c51f9866",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/StanMath.cmake" : {
      "ObjectId" : "ca76c5fe1c0931b1eb34f2fc806d4b57cfd90eb0",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/TCMalloc.cmake" : {
      "ObjectId" : "35ab2b467028989f4a5d4cff9fc76993390314ff",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/TFLogger.cmake" : {
      "ObjectId" : "17c5a04e47fb45afb322141c1551c4dd2a72758a",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/rxcpp.cmake" : {
      "ObjectId" : "720abcdbd4cb11e51861dfc0f6f013c34ffb2fbc",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/external/variant.cmake" : {
      "ObjectId" : "5c2a50156a50cd08dd926375fc248a15ea3772d2",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/version.cmake" : {
      "ObjectId" : "f588caef39162bb2866d9152a1a26f20f5b4f2ab",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "ffbd65f3db99c511f9bb9f9af0a5fa496eb0eadb",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cookbook and dependencies (note there are in fact more, see its requirements.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/cookbook/CMakeLists.txt" : {
      "ObjectId" : "dcd2d0507483b3e2005473decb2d6a35aec5ece1",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#PROJECT(sphinxdoc)\n\n#cmake_minimum_required(VERSION 2.8.8)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configured documentation tools and intermediate build results\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sphinx cache with pickled ReST documents\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# HTML output directory\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "doc/doxygen/CMakeLists.txt" : {
      "ObjectId" : "cbaf04e4525e061f73fa135cc8e02f3832fc165f",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "eefdab9cbe3c717f4f9ce77de66e0fed1cc83de1",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# meta dir was added in root CMakeLists\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "examples/meta/CMakeLists.txt" : {
      "ObjectId" : "56cc8b6b188ecf4608431d884c042cda9e2a941c",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Meta dependencies\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: the arg for -R should rather be the where libshogun's headers are residing\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# classes, enums, functions\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# get list of meta examples that can be built\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# get parser and target languages needed to build the meta examples\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# parser generation\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list of interfaces for which we dont generate meta examples\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# FIXME\n\n# Hack to avoid generation of scala meta examples dependencies that will\n\n# not be generated by generate.py script (since there is no scala.json)\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Set generate.py flags\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Enable variable storing only if we have enabled testing\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Run example generation script\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# copy data symlink to cmake binary dir so that we can execute meta examples in there\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# c++\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########### test all the enabled interfaces & install their files to examples\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# FIXME: these are the interfaces which has various problems\n\n# hence need to disable their testing\n\n# temporarily disabled as R and static calls has to be fixed\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# temporarily removed since lua modular currently\n\n# does not support overloaded c++ methods\n\n# see https://github.com/shogun-toolbox/shogun/issues/3018\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# temporarily disabled. While the interface fully works, the new API does not\n\n# there is a potential bug in swig that needs fixing first\n\n# see https://github.com/shogun-toolbox/shogun/issues/4177\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "examples/meta/cpp/CMakeLists.txt" : {
      "ObjectId" : "1d3322411f8c4cbe3250bc85d793c58e9831ca7b",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# meta examples have to be generated before executable and test is added\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# generate binary in relative directory\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Suppress unused variable warnings\n\n# if we are not testing the meta_examples\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Add examples to the dependencies of modular interfaces to make sure\n\n# nothing will infer with them being build single-threaded.\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "examples/meta/csharp/CMakeLists.txt" : {
      "ObjectId" : "cfe7f9b69af2bb28d58343c8102e64d271ce00ff",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "examples/meta/java/CMakeLists.txt" : {
      "ObjectId" : "244d7f051d4a33e063f1bed2abbd73bcbd640375",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "examples/meta/lua/CMakeLists.txt" : {
      "ObjectId" : "fa79808184f12c3d0cc73cdbdd513e0d5c6d85e4",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "examples/meta/octave/CMakeLists.txt" : {
      "ObjectId" : "355ae6b5a7249d978e9bf63ec22c10b88e79e23b",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "examples/meta/python/CMakeLists.txt" : {
      "ObjectId" : "4762cba62bca85360293268f10b11adee3ab2f0e",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "examples/meta/r/CMakeLists.txt" : {
      "ObjectId" : "e665f7b4f0eea113f45e5067a5b8576e7ea8f05c",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# For now, the generated examples are not installed in the R library\n\n# When the switch to the example generation is complete, the following lines may be uncommented\n\n#install(FILES ${R_EXAMPLES}\n\n#\tDESTINATION ${R_COMPONENT_LIB_PATH}/shogun/demo\n\n#\tCOMPONENT r)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/meta/ruby/CMakeLists.txt" : {
      "ObjectId" : "962a02b3318028e3496780f1a748fb7f59b9823e",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# accound for blacklist\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "examples/meta/scala/CMakeLists.txt" : {
      "ObjectId" : "f3907d75f7f71949794c68dec3debcdd5dc2e69a",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add test case for each generated example\n\n# (not generated yet so have to fake filenames from META_EXAMPLES list)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume a structure <target_language>/<category>/listing.sg\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set up this target to be consistent\n\n# with all the other meta example targets.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/undocumented/libshogun/CMakeLists.txt" : {
      "ObjectId" : "3ea7d3fbd5b6c4e25dc68cc44c475cdacd4c1d18",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/undocumented/python/CMakeLists.txt" : {
      "ObjectId" : "432dc68cf5d2ee892e9235caad3aa9965155bc52",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/interfaces/coreml/CMakeLists.txt" : {
      "ObjectId" : "3d0c0acc03db1bce0b082a582dbd6d6237e0ad75",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/interfaces/csharp/CMakeLists.txt" : {
      "ObjectId" : "2384ed5a5d4aa16d7b9e801f51e2cc484438f6ab",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/interfaces/java/CMakeLists.txt" : {
      "ObjectId" : "6cd4538123204c9ca34d7d2f1ca78aaf4adc93e0",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find jblas\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_JAR(shogun_jar \"${CMAKE_CURRENT_BINARY_DIR}/*.java\")\n\n#add_dependencies(shogun_jar interface_java)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/interfaces/java/build.xml" : {
      "ObjectId" : "d915ae62221cc3e392d92e93f76fcf69d2456ec4",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " set global properties for this build ",
        "Line" : 5,
        "CharPositionInLine" : 48
      },
      "1" : {
        "Text" : " Compile the java code ",
        "Line" : 16,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : " Put everything into shogun.jar file ",
        "Line" : 23,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " test examples ",
        "Line" : 30,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : " Delete ${classes} directory trees ",
        "Line" : 45,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 5
    },
    "src/interfaces/lua/CMakeLists.txt" : {
      "ObjectId" : "cdad9e1e927597adccd0270b6d056e53bf4591a0",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/interfaces/octave/CMakeLists.txt" : {
      "ObjectId" : "4c9d707dc95e0d2681f1845c1345db027cb58ee6",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/interfaces/python/CMakeLists.txt" : {
      "ObjectId" : "e58c2df24bda50af5312b236062063d63d59119e",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find python library for the found python interpreter\n\n# i.e. versions should match!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#custom swig flags for python interface\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SWIG-generated Python-wrappers fail to build\n\n# for Python >=3.5 with SWIG < 3.0.8.  Make CMake\n\n# emit an error and fail to configure.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# pacakges directory\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#debian based assumed, install to the dist-packages.\n",
        "Line" : 63,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 5
    },
    "src/interfaces/r/CMakeLists.txt" : {
      "ObjectId" : "7b596acb2b14d8cccab14543d281f9fcb34294d2",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/interfaces/ruby/CMakeLists.txt" : {
      "ObjectId" : "e806eab59958f5e41691b2d7112125436d9394f5",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/shogun/CMakeLists.txt" : {
      "ObjectId" : "1698bc05e9fea0f9ab2c2476af7b2027ee474f7e",
      "LastModified" : "2019-03-15T10:34:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow to hide non-bsd compatible codes\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add target to compile the libshogun sources\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generate versionstring.h\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# generate source files from templates\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# create shogun_deps meta target to store all the\n\n# dependencies of shogun itself, this is used in unit test\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add bundled libraries to dependency\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add target for static library if enabled\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# bundle dirent\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "########################### compiler capabilities\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# check SSE and SSE2 intrinsics header\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "############################ std lib functions\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# check for math functions\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###### MALLOC LIBRARY ###########\n\n#Trace memory allocs\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# FIXME: add support for aligned new\n\n# this is c++17\n\n#CHECK_CXX_COMPILER_FLAG(\"-faligned-new\" HAVE_ALIGNED_NEW)\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "############################ external dependencies\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#Stan math\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "####### LINALG\n\n# ViennaCL detection\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "####### /LINALG\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# TFLogger package\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#### LAPACK\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# variant\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# JSON\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# FIXME: BUNDLING IS NOT PROPER!\n\n# see how eigen is being done\n",
        "Line" : 402,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# FIXME: HDF5 linking on WIN32 is broken.\n\n# at least with the hdf5 supplied in anaconda\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#integration\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# find OpenCV library if intended by the user.\n",
        "Line" : 463,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# FIXME: BUNDLING IS NOT PROPER!\n\n# see how eigen is being done\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "###### checks for random\n\n# PRNG settings\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# assume that /dev/random is non-blocking if /dev/urandom does not exist\n",
        "Line" : 514,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "############################ HMM\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Viterbi path debug\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# big states\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#kernelcache to use 4-byte-floating-point values instead of 8-byte-doubles\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "################## linker optimisations\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# FIXME: remove all the INCLUDES/SYSTEM_INCLUDES/POSTLINKFLAGS\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "################# benchmarking\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#############################################\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# set the desidered targets to be installed\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "tests/meta/CMakeLists.txt" : {
      "ObjectId" : "29b5e22b8a4e49a89f97a0b5b9521084fab5217f",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# working directory of tester should be binary dir so link data folders\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MESSAGE(FATAL_ERROR \"Meta examples directory does not exist!\")\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# compile tester c++ binary\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add tester to the dependencies of modular interfaces to make sure\n\n# nothing will infer with them being build single-threaded.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# get list of meta examples that can be built and skip test if if cannot\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# assume a structure <target_language>/<category>/result.dat\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# only supported from >2.8.11\n",
        "Line" : 44,
        "CharPositionInLine" : 5
      },
      "7" : {
        "Text" : "# continue keyword is not available in older cmake versions (not documented!!!)\n\n# so use if-then-else\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#AddMetaIntegrationTest(r INTERFACE_R) # currently we have the r meta examples disabled, so no generated results that can be tested\n",
        "Line" : 62,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#AddMetaIntegrationTest(ruby INTERFACE_RUBY) # disabled due to potential swig bug, see https://github.com/shogun-toolbox/shogun/issues/4177\n",
        "Line" : 65,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "#AddMetaIntegrationTest(lua INTERFACE_LUA) # currently doesn't have meta examples\n",
        "Line" : 67,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 11
    },
    "tests/unit/CMakeLists.txt" : {
      "ObjectId" : "b1506dd461d13a448af87bcac6551fbf544712aa",
      "LastModified" : "2019-03-12T14:54:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find GTEST and GMOCK frameworks\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In some cases gTest segfaults with GCC >= 6.0.0.  This is a dirty fix.\n\n# TODO: Update to gTest-release with proper support for GCC >= 6.0.0.\n\n# See:  https://github.com/google/googletest/issues/705\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Generate automatic unittest from jinja2 templates\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# collect the unittests\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add unittests to the dependencies of modular interfaces to make sure nothing\n\n# will infer with them being build single-threaded.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 88,
    "MAKEFILE" : 1,
    "ANT" : 1
  },
  "ElapsedTime" : 7283
}