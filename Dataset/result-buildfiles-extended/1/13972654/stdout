{
  "Repository" : "13972654",
  "Revision" : "HEAD",
  "ObjectId" : "c3749d3905f85c7955a8da8cb3194f7fbe0ba64b",
  "CommitTime" : "2017-12-19T11:00:10Z",
  "Files" : {
    "ar_track_alvar/CMakeLists.txt" : {
      "ObjectId" : "7963010fd2b11168ac659237d7b6257913fa43c9",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# dynamic reconfigure support\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Kinect filtering code\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ar_track_alvar/src/Alvar.h.cmake" : {
      "ObjectId" : "7c0c03985b2ee02dd11fecbe0e53f1ae9a49d45b",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n * This file is part of ALVAR, A Library for Virtual and Augmented Reality.\n *\n * Copyright 2007-2012 VTT Technical Research Centre of Finland\n *\n * Contact: VTT Augmented Reality Team <alvar.info@vtt.fi>\n *          <http://www.vtt.fi/multimedia/alvar.html>\n *\n * ALVAR is free software; you can redistribute it and/or modify it under the\n * terms of the GNU Lesser General Public License as published by the Free\n * Software Foundation; either version 2.1 of the License, or (at your option)\n * any later version.\n *\n * This library is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with ALVAR; if not, see\n * <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>.\n */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n * \\mainpage ALVAR ${ALVAR_VERSION}\n *\n * \\section Introduction\n *\n * ALVAR is a software library for creating virtual and augmented reality (AR) applications. ALVAR has\n * been developed by the VTT Technical Research Centre of Finland. ALVAR is released under the terms of\n * the GNU Lesser General Public License, version 2.1, or (at your option) any later version.\n *\n * ALVAR is designed to be as flexible as possible. It offers high-level tools and methods for creating\n * augmented reality applications with just a few lines of code. The library also includes interfaces\n * for all of the low-level tools and methods, which makes it possible for the user to develop their\n * own solutions using alternative approaches or completely new algorithms.\n *\n * ALVAR is currently provided on Windows and Linux operating systems and only depends on one third\n * party library (OpenCV). ALVAR is independent of any graphical libraries and can be easily integrated\n * into existing applications. The sample applications use GLUT and the demo applications use OpenSceneGraph.\n *\n * \\section Features\n *\n * - Detecting and tracking 2D markers (\\e MarkerDetector). Currently two types of square matrix markers\n *   are supported (\\e MarkerData and \\e MarkerArtoolkit). Future marker types can easily be added. ALVAR\n *   keeps the \\e Marker \\e Pose estimation as accurate as possible. Furthermore, ALVAR uses some tracking\n *   heuristics to identify markers that are \"too far\" and to recover from occlusions in the multimarker\n *   case for example.\n * - Using a setup of multiple markers for pose detection (\\e MultiMarker). The marker setup coordinates\n *   can be set manually or they can be automatically deduced using various methods (\\e MultiMarkerFiltered\n *   and \\e MultiMarkerBundle).\n * - Tools for calibrating \\e Camera. Distorting and undistorting points, projecting points and finding\n *   exterior orientation using point-sets.\n * - Hiding markers from the view (\\e BuildHideTexture and \\e DrawTexture).\n * - Several basic filters: \\e FilterAverage, \\e FilterMedian, \\e FilterRunningAverage,\n *   \\e FilterDoubleExponentialSmoothing.\n * - \\e Kalman filters for sensor fusion: \\e Kalman Filter, \\e Extended Kalman Filter and Unscented Kalman\n *   Filter (\\e KalmanSensor, \\e KalmanSensorEkf, \\e KalmanEkf, \\e UnscentedKalman).\n * - Several methods for tracking using optical flow: \\e TrackerPsa , \\e TrackerPsaRot , \\e TrackerFeatures\n *   and \\e TrackerStat.\n * - etc...\n *\n * \\section Platforms\n *\n * ALVAR is officially supported and tested on the following platforms.\n *  - Windows XP 32-bit, Microsoft Visual Studio 2005 (8.0), 2008 (9.0) and 2010 (10.0)\n *  - Linux 32-bit, GCC 4.3 and 4.4\n *  - Linux 64-bit, GCC 4.3 and 4.4\n *\n * \\section Dependencies\n *\n * The ALVAR library depends on the following libraries.\n *  - OpenCV 2.4.0\n *\n * The ALVAR samples depend on the following libraries and tools.\n *  - GLUT 3.7.6\n *  - CMake 2.8.3\n *\n * The ALVAR demos depend on the following libraries and tools.\n *  - OpenSceneGraph 2.8.4\n *  - CMake 2.8.3\n *\n * \\section Usage\n *\n * Please see the instructions in doc/Compiling.txt for more information.\n *\n * \\section Links\n *\n * - ALVAR Development Team at VTT (http://www.vtt.fi/multimedia)\n * - CMake (http://www.cmake.org)\n * - OpenCV -- Open Computer Vision Library (http://code.opencv.org)\n * - GLUT Library (http://www.opengl.org/resources/libraries/glut)\n * - OpenSceneGraph (http://www.openscenegraph.org)\n *\n * \\example SampleCamCalib.cpp\n * This is an example of how to use \\e ProjPoints and \\e Camera classes to perform camera calibration\n * using a chessboard pattern.\n *\n * \\example SampleCvTestbed.cpp\n * This is an example of how to use the \\e CvTestbed and \\e Capture classes in order to make quick OpenCV\n * prototype applications.\n *\n * \\example SampleFilter.cpp\n * This is an example of how to use various filters: \\e FilterAverage, \\e FilterMedian,\n * \\e FilterRunningAverage, \\e FilterDoubleExponentialSmoothing and \\e Kalman.\n *\n * \\example SampleIntegralImage.cpp\n * This is an example of how to use the \\e IntegralImage and \\e IntegralGradient classes for image\n * gradient analysis.\n *\n * \\example SampleLabeling.cpp\n * This is an example of how to label images using \\e LabelImage and \\e MarchEdge.\n *\n * \\example SampleMarkerCreator.cpp\n * This is an example that demonstrates the generation of \\e MarkerData markers and saving the image\n * using \\e SaveMarkerImage.\n *\n * \\example SampleMarkerDetector.cpp\n * This is an example that shows how to detect \\e MarkerData markers and visualize them using\\e GlutViewer.\n *\n * \\example SampleMarkerHide.cpp\n * This is an example that shows how to detect \\e MarkerData markers, visualize them using \\e GlutViewer\n * and hide them with \\e BuildHideTexture and \\e DrawTexture.\n *\n * \\example SampleMarkerlessCreator.cpp\n * This is an example that demonstrates the use of FernImageDetector to train a Fern classifier.\n *\n * \\example SampleMarkerlessDetector.cpp\n * This is an example that demonstrates the use of FernImageDetector to detect an image as a marker.\n *\n * \\example SampleMultiMarker.cpp\n * This is an example that demonstrates the use of a preconfigured \\e MultiMarker setup.\n *\n * \\example SampleMultiMarkerBundle.cpp\n * This is an example that automatically recognising \\e MultiMarker setups using \\e MultiMarkerFiltered and\n * optimizes it with \\e MultiMarkerBundle.\n *\n * \\example SampleOptimization.cpp\n * This is an example of how to use the \\e Optimization class by fitting curves of increasing degree to\n * random data.\n *\n * \\example SamplePointcloud.cpp\n * This is an example showing how to use \\e SimpleSfM for tracking the environment using features in\n * addition to \\e MultiMarker.\n *\n * \\example SampleTrack.cpp\n * This is an example that shows how to perform tracking of the optical flow using \\e TrackerPsa,\n * \\e TrackerPsaRot, \\e TrackerFeatures or \\e TrackerStat.\n */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/**\n * \\file Alvar.h\n *\n * \\brief This file defines library export definitions, version numbers and\n * build information.\n */",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/**\n * \\brief Main ALVAR namespace.\n */",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/**\n * \\brief Major version number.\n */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/**\n * \\brief Minor version number.\n */",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/**\n * \\brief Patch version number.\n */",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/**\n * \\brief Tag version string.\n *\n * The tag contains alpha, beta and release candidate versions.\n */",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/**\n * \\brief Revision version string.\n *\n * The revision contains an identifier from the source control system.\n */",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/**\n * \\brief Entire version string.\n */",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/**\n * \\brief Entire version string without dots.\n */",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/**\n * \\brief Date the library was built.\n */",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/**\n * \\brief System the library was built on.\n */",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "ar_track_alvar/src/CMakeLists.txt" : {
      "ObjectId" : "6e7ad4f1a1e9519049415856636fcbd850e6d254",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include opencv library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include opengl and glut library if found\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include alvar library\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define samples in alphabetical order\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define samples that require GlutViewer in alphabetical order\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add shared samples library\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add GlutViewer library and samples if glut library is found\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add each sample as a seperate executable\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# determine if glut common sources need to be included\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# add source files to executable and set name and properties\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# link executable target to required libraries\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# install executable\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# install files for exported build environment\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "ar_track_alvar/src/platform/CMakeLists.txt" : {
      "ObjectId" : "62072caff1c298c6a66d4bbb2e6ff14623d65f46",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include opencv library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include alvar library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define alvarplatform library source files to compile\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add source files to alvarplatform library and set name and properties\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# link alvarplatform library target to required libraries\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install headers\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install target\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set include directories and libraries variables for alvar\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# hack to setup environment runtime path\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# process sub directories\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack to setup environment runtime path\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "ar_track_alvar/src/platform/capture_plugin_cmu/CMakeLists.txt" : {
      "ObjectId" : "53380cf08718e10f68219edc812c24ae9991c3e7",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include opencv library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include alvar library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include CMU library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ensure plugin api is exported when building library\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define plugin library source files to compile\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add source files to plugin library and set name and properties\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# link plugin library target to required libraries\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install headers\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install target\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# hack to setup environment runtime path\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "ar_track_alvar/src/platform/capture_plugin_dscapture/CMakeLists.txt" : {
      "ObjectId" : "cf7f4004523e1a1e158f262a91dc2c188414802a",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include opencv library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include alvar library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include DSCapture library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ensure plugin api is exported when building library\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define plugin library source files to compile\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add source files to plugin library and set name and properties\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# link plugin library target to required libraries\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install headers\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install target\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# hack to setup environment runtime path\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "ar_track_alvar/src/platform/capture_plugin_file/CMakeLists.txt" : {
      "ObjectId" : "6fc7958268dc6b02c175560895e77170788c13cb",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include opencv library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include alvar library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ensure plugin api is exported when building library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define plugin library source files to compile\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add source files to plugin library and set name and properties\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# link plugin library target to required libraries\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install headers\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install target\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# hack to setup environment runtime path\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ar_track_alvar/src/platform/capture_plugin_highgui/CMakeLists.txt" : {
      "ObjectId" : "fd774ca5fc3d67076f1ea79c694e71d70f88c41e",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include opencv library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include alvar library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ensure plugin api is exported when building library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define plugin library source files to compile\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add source files to plugin library and set name and properties\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# link plugin library target to required libraries\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install headers\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install target\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# hack to setup environment runtime path\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ar_track_alvar/src/platform/capture_plugin_ptgrey/CMakeLists.txt" : {
      "ObjectId" : "1f9faa234aebf8881af4d6f0bf5aab37e9bdb5f9",
      "LastModified" : "2016-01-11T12:47:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include opencv library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include alvar library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include PTGrey FlyCapture2 library\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ensure plugin api is exported when building library\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define plugin library source files to compile\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add source files to plugin library and set name and properties\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# link plugin library target to required libraries\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install headers\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install target\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# hack to setup environment runtime path\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "configuration/init/Makefile" : {
      "ObjectId" : "34022fb3e8add8871cdb2d40e5e2853bb86b907b",
      "LastModified" : "2016-10-19T09:02:03Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "msl_actuator_msgs/CMakeLists.txt" : {
      "ObjectId" : "f7d0a7f8bfd6458113017530b3f60ba07000f33c",
      "LastModified" : "2017-10-23T09:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# INCLUDE_DIRS include\n\n#  LIBRARIES msl_actuator_msgs\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp library\n\n# add_library(msl_actuator_msgs\n\n#   src/${PROJECT_NAME}/msl_actuator_msgs.cpp\n\n# )\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(msl_actuator_msgs_node src/msl_actuator_msgs_node.cpp)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(msl_actuator_msgs_node msl_actuator_msgs_generate_messages_cpp)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(msl_actuator_msgs_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS msl_actuator_msgs msl_actuator_msgs_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_msl_actuator_msgs.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "msl_msgs/CMakeLists.txt" : {
      "ObjectId" : "6025f137b1e98092f862a9d290370a2111c23950",
      "LastModified" : "2017-10-23T09:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# INCLUDE_DIRS include\n\n#  LIBRARIES msl_cnc_msgs\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp library\n\n# add_library(msl_cnc_msgs\n\n#   src/${PROJECT_NAME}/msl_cnc_msgs.cpp\n\n# )\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(msl_cnc_msgs_node src/msl_cnc_msgs_node.cpp)\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(msl_cnc_msgs_node msl_cnc_msgs_generate_messages_cpp)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(msl_cnc_msgs_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS msl_cnc_msgs msl_cnc_msgs_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_msl_cnc_msgs.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "msl_sensor_msgs/CMakeLists.txt" : {
      "ObjectId" : "47526c0ce9a608225dcfb1f64db0eacd5d64a025",
      "LastModified" : "2017-10-23T09:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# INCLUDE_DIRS include\n\n#  LIBRARIES msl_actuator_msgs\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp library\n\n# add_library(msl_actuator_msgs\n\n#   src/${PROJECT_NAME}/msl_actuator_msgs.cpp\n\n# )\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(msl_actuator_msgs_node src/msl_actuator_msgs_node.cpp)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(msl_actuator_msgs_node msl_actuator_msgs_generate_messages_cpp)\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(msl_actuator_msgs_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS msl_actuator_msgs msl_actuator_msgs_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_msl_actuator_msgs.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "ninja_recovery/CMakeLists.txt" : {
      "ObjectId" : "c209ae3148f40d64d8bbf7bc5b7ee9b47f6d7c3f",
      "LastModified" : "2017-10-23T09:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "random_drive/CMakeLists.txt" : {
      "ObjectId" : "1adb66da611a70433be91b66a54418c57bfd1f56",
      "LastModified" : "2017-10-23T09:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend tag for \"message_generation\"\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in\n\n##     but can be declared for certainty nonetheless:\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate messages in the 'msg' folder\n\n# add_message_files(\n\n#   FILES\n\n#   Message1.msg\n\n#   Message2.msg\n\n# )\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n\n# generate_messages(\n\n#   DEPENDENCIES\n\n#   std_msgs\n\n# )\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################################################\n\n## Declare ROS dynamic reconfigure parameters ##\n\n################################################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## To declare and build dynamic reconfigure parameters within this\n\n## package, follow these steps:\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for \"dynamic_reconfigure\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"dynamic_reconfigure\" to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * uncomment the \"generate_dynamic_reconfigure_options\" section below\n\n##     and list every .cfg file to be processed\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Generate dynamic reconfigure parameters in the 'cfg' folder\n\n# generate_dynamic_reconfigure_options(\n\n#   cfg/DynReconf1.cfg\n\n#   cfg/DynReconf2.cfg\n\n# )\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES random_drive\n\n#  CATKIN_DEPENDS roscpp std_msgs\n\n#  DEPENDS system_lib\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Declare a C++ library\n\n# add_library(random_drive\n\n#   src/${PROJECT_NAME}/random_drive.cpp\n\n# )\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Add cmake target dependencies of the library\n\n## as an example, code may need to be generated before libraries\n\n## either from message generation or dynamic reconfigure\n\n# add_dependencies(random_drive ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(random_drive_node src/random_drive_node.cpp)\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Add cmake target dependencies of the executable\n\n## same as for the library above\n\n# add_dependencies(random_drive_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(random_drive_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS random_drive random_drive_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_random_drive.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "range_scan/CMakeLists.txt" : {
      "ObjectId" : "0f2021bd84c7c6bc4d57ab9a825793934fa3df6b",
      "LastModified" : "2017-10-23T09:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES range_scan\n\n#  CATKIN_DEPENDS roscpp std_msgs urg_node\n\n#  DEPENDS system_lib\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Declare a C++ executable\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "ttb_apps/CMakeLists.txt" : {
      "ObjectId" : "487930b0f81d45de7a00572ac8d233f1da45ede7",
      "LastModified" : "2017-10-23T09:22:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# CMake\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Catkin\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the gradle targets you want catkin's make to run by default\n\n# e.g. usually catkin_android_setup(assembleRelease uploadArchives)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# Installation\n\n##############################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Deploy android libraries (.aar's) and applications (.apk's)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ttb_base/CMakeLists.txt" : {
      "ObjectId" : "e6c186534f918a694fbd38f32a659f7be4964712",
      "LastModified" : "2017-11-29T18:22:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Enable exception handling for segfaults\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  DEPENDS tinyxml\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Declare a cpp executable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ttb_expressions/CMakeLists.txt" : {
      "ObjectId" : "4ab574c38c8c743ef6952f626c6ff62bc77a816e",
      "LastModified" : "2017-11-29T18:22:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Enable exception handling for segfaults\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  DEPENDS tinyxml\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ttb_msgs/CMakeLists.txt" : {
      "ObjectId" : "6de8f8faacdd0ac24d7cab4e88feabff76c469ad",
      "LastModified" : "2017-12-19T10:56:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES ttb_msgs\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ttb_udp_proxy/CMakeLists.txt" : {
      "ObjectId" : "eced3391681fa4e1d19aa20c1eae8a1750ccc851",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INCLUDE_DIRS include\n\n#LIBRARIES ttb_udp_proxy\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#DEPENDS\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Please note, that the following command does not work, if you compile your workspace the first time, because rosrun does not know anything about udp_proxy_generator in that case.\n\n# We could exchange the command with something more ROS-Independent, like calling the binary without rosrun.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#COMMAND rosrun udp_proxy_generator udp_proxy_generator ${PROJECT_NAME}\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "ttb_worldmodel/CMakeLists.txt" : {
      "ObjectId" : "baea7cefd7e797c70ca86a1b9a63ebf84f522f18",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Enable exception handling for segfaults using SigFault.h\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n#catkin_add_gtest(${PROJECT_NAME}-test src/pathplanner/test/test_path_planner.cpp)\n\n#if(TARGET ${PROJECT_NAME}-test)\n\n#  target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME} ${catkin_LIBRARIES})\n\n#endif()\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "wumpus_simulator/CMakeLists.txt" : {
      "ObjectId" : "d785ee4f90baa08ac5e5f594943354fdcbd6dee1",
      "LastModified" : "2017-11-29T18:22:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Use c++ 11x std\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "wumpus_simulator/cmake-build-debug/catkin/catkin_generated/version/package.cmake" : {
      "ObjectId" : "9bb359ee39974b5d01695aa9d60a18e34747e5ea",
      "LastModified" : "2017-11-29T18:22:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 22,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1345
}