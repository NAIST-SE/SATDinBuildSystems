{
  "Repository" : "11619995",
  "Revision" : "HEAD",
  "ObjectId" : "46f2401614983716677eaad9376af4878ee08d65",
  "CommitTime" : "2019-04-15T23:07:27Z",
  "Files" : {
    "BUILD" : {
      "ObjectId" : "1961cc4e753224749d3d29e7efcae0b2fa68da68",
      "LastModified" : "2019-04-15T20:43:05Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel (https://bazel.build/) BUILD file for Protobuf.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n# Java 9 configuration\n################################################################################",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n# ZLIB configuration\n################################################################################",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n# Protobuf Runtime Library\n################################################################################",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# -Wno-sign-compare\n# switch statement contains 'default' but no 'case' labels\n# unary minus operator applied to unsigned type, result still unsigned\n# 'conversion' conversion from 'type1' to 'type2', possible loss of data\n# 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n# 'var' : conversion from 'size_t' to 'type', possible loss of data\n# 'identifier' : truncation from 'type1' to 'type2'\n# 'operator' : integral constant overflow\n# 'conversion' : truncation of constant value\n# 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)\n# 'this' : used in base member initializer list\n# no definition for inline function 'function'\n# -Wno-unused-function\n# 'type' : forcing value to bool 'true' or 'false' (performance warning)\n# The compiler encountered a deprecated declaration.",
        "Line" : 30,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "# Prevents ISO C++ const string assignment warnings for pyext sources.",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Android and MSVC builds do not need to link in a separate pthread library.",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Suppress linker warnings about files with no symbols defined.",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# AUTOGEN(protobuf_lite_srcs)",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# AUTOGEN(protobuf_srcs)",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# This provides just the header files for use in projects that need to build\n# shared libraries for dynamic loading. This target is available until Bazel\n# adds native support for such use cases.\n# TODO(keveman): Remove this target once the support gets added to Bazel.",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Map of all well known protos.\n# name => (include path, imports)",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################################\n# Well Known Types Proto Library Rules\n#\n# These proto_library rules can be used with one of the language specific proto\n# library rules i.e. java_proto_library:\n#\n# java_proto_library(\n#   name = \"any_java_proto\",\n#   deps = [\"@com_google_protobuf//:any_proto],\n# )\n################################################################################",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################################\n# Protocol Buffers Compiler\n################################################################################",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# AUTOGEN(protoc_lib_srcs)",
        "Line" : 298,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Linking to setargv.obj makes the default command line argument\n# parser expand wildcards, so the main method's argv will contain the\n# expanded list instead of the wildcards.\n#\n# Adding dummy \"-DEFAULTLIB:kernel32.lib\", because:\n# - Microsoft ships this object file next to default libraries\n# - but this file is not a library, just a precompiled object\n# - \"-WHOLEARCHIVE\" and \"-DEFAULTLIB\" only accept library,\n#   not precompiled object.\n# - Bazel would assume linkopt that does not start with \"-\" or \"$\"\n#   as a label to a target, so we add a harmless \"-DEFAULTLIB:kernel32.lib\"\n#   before \"setargv.obj\".\n# See https://msdn.microsoft.com/en-us/library/8bch7bkk.aspx",
        "Line" : 385,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "################################################################################\n# Tests\n################################################################################",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# AUTOGEN(lite_test_protos)",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# AUTOGEN(test_protos)",
        "Line" : 430,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# AUTOGEN(common_test_srcs)",
        "Line" : 491,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# AUTOGEN(test_plugin_srcs)",
        "Line" : 503,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# AUTOGEN(test_srcs)",
        "Line" : 528,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Doesn't pass on Windows with MSVC",
        "Line" : 603,
        "CharPositionInLine" : 12
      },
      "23" : {
        "Text" : "# Files for csharp_bootstrap_unittest.cc.",
        "Line" : 613,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "################################################################################\n# Java support\n################################################################################",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "################################################################################\n# Python support\n################################################################################",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Copy the builtin proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly since they are all part of the same Python\n# package.",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python in srcs.",
        "Line" : 755,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Copy the test proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly by the tests since they are all part of the\n# same Python package.",
        "Line" : 781,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python_test in srcs.",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Package private headers, but exposed because the generated sources\n# need to use them.",
        "Line" : 926,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "################################################################################\n# Test generated proto support\n################################################################################",
        "Line" : 974,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "Makefile.am" : {
      "ObjectId" : "903eca7c016357f4b75e3f766a37d45f731af533",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always include third_party directories in distributions.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build gmock before we build protobuf tests.  We don't add gmock to SUBDIRS\n\n# because then \"make check\" would also build and run all of gmock's own tests,\n\n# which takes a lot of time and is generally not useful to us.  Also, we don't\n\n# want \"make install\" to recurse into gmock since we don't want to overwrite\n\n# the installed version of gmock if there is one.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We would like to clean gmock when \"make clean\" is invoked.  But we have to\n\n# be careful because clean-local is also invoked during \"make distclean\", but\n\n# \"make distclean\" already recurses into gmock because it's listed among the\n\n# DIST_SUBDIRS.  distclean will delete gmock/Makefile, so if we then try to\n\n# cd to the directory again and \"make clean\" it will fail.  So, check that the\n\n# Makefile exists before recursing.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Deletes all the files generated by autogen.sh.\n",
        "Line" : 1229,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "benchmarks/Makefile.am" : {
      "ObjectId" : "423349720ae9f71d1218739ff1e4eaf455ee790f",
      "LastModified" : "2019-02-27T06:11:08Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############# CPP RULES ##############\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Explicit deps because BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n\n# See: https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "############ CPP RULES END ############\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "############# JAVA RULES ##############\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############# JAVA RULES END ##############\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "############# PYTHON RULES ##############\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############# PYTHON RULES END ##############\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "############# GO RULES BEGIN ##############\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "############# GO RULES END ##############\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "############# GOGO RULES BEGIN ############\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Explicit deps because BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n\n# See: https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12,
      "Errorlog" : "line 416:18 token recognition error at: '\"s/b\\.Run(\\\"\\(.*\\)\\\"/b.Run(\\\"\\1'\nline 593:67 token recognition error at: '\" node --max-old-space-size=4096 js_benchmark.js $$@' >> js-benchmark\\n\\t@chmod +x js-benchmark\\n\\njs: js-benchmark\\n\\t./js-benchmark $(all_data)\\n\\n############ JS RULE END #############\\n\\nMAINTAINERCLEANFILES =                                                     \\\\n\\tMakefile.in\\n\\nCLEANFILES =                                                               \\\\n\\t$(benchmarks_protoc_outputs)                                             \\\\n\\t$(benchmarks_protoc_outputs_header)                                      \\\\n\\t$(benchmarks_protoc_outputs_proto2)                                      \\\\n\\t$(benchmarks_protoc_outputs_proto2_header)                               \\\\n\\tinitialize_submodule                                                     \\\\n\\tmake_tmp_dir                                                             \\\\n\\tprotoc_middleman                                                         \\\\n\\tprotoc_middleman2                                                        \\\\n\\tjavac_middleman                                                          \\\\n\\tjava-benchmark                                                           \\\\n\\tpython_cpp_proto_library                                                 \\\\n\\tpython-pure-python-benchmark                                             \\\\n\\tpython-cpp-reflection-benchmark                                          \\\\n\\tpython-cpp-generated-code-benchmark                                      \\\\n\\tgo-benchmark                                                             \\\\n\\tgo_protoc_middleman                                                      \\\\n\\tmake_tmp_dir_gogo                                                        \\\\n\\tgogo_proto_middleman                                                     \\\\n\\tgenerate_gogo_data                                                       \\\\n\\tgo_no_group_protoc_middleman                                             \\\\n\\tgo_no_group                                                              \\\\n\\tgo-no-group-benchmark                                                    \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs_header)                         \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs)                                \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs_proto2_header)                  \\\\n\\t$(cpp_no_group_benchmarks_protoc_outputs_proto2)                         \\\\n\\tgenerate_all_gogo_benchmark_code                                         \\\\n\\tgenerate-gogo-benchmark-code                                             \\\\n\\tcpp_no_group_protoc_middleman                                            \\\\n\\tgenerate_cpp_no_group_benchmark_code                                     \\\\n\\tgenerate_gogo_benchmark_code                                             \\\\n\\tgogofast_protoc_middleman                                                \\\\n\\tgogofast                                                                 \\\\n\\tgogofaster_protoc_middleman                                              \\\\n\\tgogofaster                                                               \\\\n\\tgogoslick_protoc_middleman                                               \\\\n\\tgogoslick                                                                \\\\n\\tgogo-benchmark                                                           \\\\n\\tgogo/cpp_no_group/cpp_benchmark.*                                        \\\\n\\tproto3_proto_middleman                                                   \\\\n\\tgenerate_proto3_data                                                     \\\\n\\tphp-benchmark                                                            \\\\n\\tphp-c-benchmark                                                          \\\\n\\tproto3_middleman_php                                                     \\\\n\\tpbjs_preparation                                                         \\\\n\\tpbjs_middleman                                                           \\\\n\\tpbjs-benchmark                                                           \\\\n\\tjs_preparation                                                           \\\\n\\tjs_middleman                                                             \\\\n\\tjs-benchmark\\n\\nclean-local:\\n\\t-rm -rf tmp/*\\n\\n\u0000'\n"
    },
    "benchmarks/java/pom.xml" : {
      "ObjectId" : "570bd6644fd7c3735f720720b2ad8f49da541da9",
      "LastModified" : "2018-06-25T06:17:39Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " get all project dependencies ",
        "Line" : 37,
        "CharPositionInLine" : 50
      },
      "1" : {
        "Text" : " MainClass in mainfest make a executable jar ",
        "Line" : 41,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : " bind to the packaging phase ",
        "Line" : 51,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 3
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "71a0f37aaf107722b7c15083f38cb780d3979854",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake policies\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On MacOS use @rpath/ for target's install name prefix path\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Clear VERSION variables when no VERSION is given to project()\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Project\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add c++11 flags\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Options\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# User options\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Path to main configure script\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Parse configure script\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Description\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Version\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Contact\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Parse version tweaks\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Package version\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# FindZLIB module define ZLIB_INCLUDE_DIRS variable\n\n# Set ZLIB_INCLUDE_DIRECTORIES for compatible\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Using imported target if exists\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Explicitly set these to empty (override NOT_FOUND) so cmake doesn't\n\n# complain when we use them later.\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# In case we are building static libraries, link also the runtime library statically\n\n# so that MSVCR*.DLL is not required at runtime.\n\n# https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx\n\n# This is achieved by replacing msvc option /MD with /MT and /MDd with /MTd\n\n# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Build with multiple processes\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC warning suppressions\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 'expression' : signed/unsigned mismatch\n\n# switch statement contains 'default' but no 'case' labels\n\n# unary minus operator applied to unsigned type, result still unsigned\n\n# 'conversion' conversion from 'type1' to 'type2', possible loss of data\n\n# 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# 'var' : conversion from 'size_t' to 'type', possible loss of data\n\n# 'identifier' : truncation from 'type1' to 'type2'\n\n# 'operator' : integral constant overflow\n\n# 'conversion' : truncation of constant value\n\n# 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)\n\n# 'this' : used in base member initializer list\n\n# no definition for inline function 'function'\n\n# 'type' : forcing value to bool 'true' or 'false' (performance warning)\n\n# The compiler encountered a deprecated declaration.\n",
        "Line" : 160,
        "CharPositionInLine" : 12
      },
      "22" : {
        "Text" : "# Allow big object\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Suppress linker warnings about files with no symbols defined.\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Configure Resource Compiler\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# use English language (0x409) in resource compiler\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# fix rc.exe invocations because of usage of add_definitions()\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Add the \"lib\" prefix for generated .lib outputs.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# When building with \"make\", \"lib\" prefix will be added automatically by\n\n# the build tool.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "cmake/conformance.cmake" : {
      "ObjectId" : "82b4cf580a7dc1694068a1e149f773f4370777cb",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/examples.cmake" : {
      "ObjectId" : "e5cad63f67650db353a1f3a0e8b349e8cf0db32f",
      "LastModified" : "2016-07-13T20:48:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal utility function: Create a custom target representing a build of examples with custom options.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Skip\n",
        "Line" : 20,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Add examples as an external project.\n\n# sub_directory cannot be used because the find_package(protobuf) call would cause failures with redefined targets.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Build using the legacy compatibility module.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#Build using the installed library.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Build using the installed library in legacy compatibility mode.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/install.cmake" : {
      "ObjectId" : "9b2ae93cf62c29d87038489b8849b9bd9e5fb1c6",
      "LastModified" : "2018-06-25T06:17:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal function for parsing auto tools scripts\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install well-known type proto files\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install configuration\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allows the build directory to be used as a find directory.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/libprotobuf-lite.cmake" : {
      "ObjectId" : "652eb91cf8a47bf77c339fce62e734392c31c41e",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/libprotobuf.cmake" : {
      "ObjectId" : "9a434a7db69b46de7cbab356e49136c80570a537",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/libprotoc.cmake" : {
      "ObjectId" : "b71f2f1ba9a698f610f2c89d0972ce5dd917c965",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/protobuf-lite.pc.cmake" : {
      "ObjectId" : "cbe5426afa43872424fdb140c0f34f4268b55b13",
      "LastModified" : "2017-07-24T15:11:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/protobuf-options.cmake" : {
      "ObjectId" : "47fb15825752e544fda411db01c8a4391ed4dd38",
      "LastModified" : "2017-07-24T15:11:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verbose output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindProtobuf module compatibel\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/protobuf.pc.cmake" : {
      "ObjectId" : "d33e98cca8f05e95343576d01ee959c22f1b7d78",
      "LastModified" : "2017-07-24T15:11:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/protoc.cmake" : {
      "ObjectId" : "f90e525e8003740b6250acae52ef22d17cb423e0",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/tests.cmake" : {
      "ObjectId" : "72269617efbd791d201dc2317351c98d88919796",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# required for tests on MinGW Win64\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "compiler_config_setting.bzl" : {
      "ObjectId" : "5e52a6524ffe5f8522a815cff6921c663e48078d",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "\"\"\"Creates config_setting that allows selecting based on 'compiler' value.\"\"\"",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The \"do_not_use_tools_cpp_compiler_present\" attribute exists to\n# distinguish between older versions of Bazel that do not support\n# \"@bazel_tools//tools/cpp:compiler\" flag_value, and newer ones that do.\n# In the future, the only way to select on the compiler will be through\n# flag_values{\"@bazel_tools//tools/cpp:compiler\"} and the else branch can\n# be removed.",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "conformance/Makefile.am" : {
      "ObjectId" : "e47fd1081d1c63079bf3fa21676aafeefea8c873",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# proto2 input files, should be separated with proto3, as we\n\n# can't generate proto2 files for ruby, php and objc\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# lite/com/google/protobuf/Any.java                            \\\n  # lite/com/google/protobuf/AnyOrBuilder.java                   \\\n  # lite/com/google/protobuf/AnyProto.java                       \\\n  # lite/com/google/protobuf/BoolValue.java                      \\\n  # lite/com/google/protobuf/BoolValueOrBuilder.java             \\\n  # lite/com/google/protobuf/BytesValue.java                     \\\n  # lite/com/google/protobuf/BytesValueOrBuilder.java            \\\n  # lite/com/google/protobuf/conformance/Conformance.java        \\\n  # lite/com/google/protobuf/DoubleValue.java                    \\\n  # lite/com/google/protobuf/DoubleValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Duration.java                       \\\n  # lite/com/google/protobuf/DurationOrBuilder.java              \\\n  # lite/com/google/protobuf/DurationProto.java                  \\\n  # lite/com/google/protobuf/FieldMask.java                      \\\n  # lite/com/google/protobuf/FieldMaskOrBuilder.java             \\\n  # lite/com/google/protobuf/FieldMaskProto.java                 \\\n  # lite/com/google/protobuf/FloatValue.java                     \\\n  # lite/com/google/protobuf/FloatValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int32Value.java                     \\\n  # lite/com/google/protobuf/Int32ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int64Value.java                     \\\n  # lite/com/google/protobuf/Int64ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/ListValue.java                      \\\n  # lite/com/google/protobuf/ListValueOrBuilder.java             \\\n  # lite/com/google/protobuf/NullValue.java                      \\\n  # lite/com/google/protobuf/StringValue.java                    \\\n  # lite/com/google/protobuf/StringValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Struct.java                         \\\n  # lite/com/google/protobuf/StructOrBuilder.java                \\\n  # lite/com/google/protobuf/StructProto.java                    \\\n  # lite/com/google/protobuf/Timestamp.java                      \\\n  # lite/com/google/protobuf/TimestampOrBuilder.java             \\\n  # lite/com/google/protobuf/TimestampProto.java                 \\\n  # lite/com/google/protobuf/UInt32Value.java                    \\\n  # lite/com/google/protobuf/UInt32ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/UInt64Value.java                    \\\n  # lite/com/google/protobuf/UInt64ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Value.java                          \\\n  # lite/com/google/protobuf/ValueOrBuilder.java                 \\\n  # lite/com/google/protobuf/WrappersProto.java\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# All source files excepet C++/Objective-C ones should be explicitly listed\n\n# here because the autoconf tools don't include files of other languages\n\n# automatically.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Explicit deps beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On travis, the build fails without the isysroot because whatever system\n\n# headers are being found don't include generics support for\n\n# NSArray/NSDictionary, the only guess is their image at one time had an odd\n\n# setup for Xcode and old frameworks are being found.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_objc\" could fail if parallel enough.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# JavaScript well-known types are expected to be in a directory called\n\n# google-protobuf, because they are usually in the google-protobuf npm\n\n# package.  But we want to use the sources from our tree, so we recreate\n\n# that directory structure here.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Some implementations include pre-generated versions of well-known types.\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## $(PROTOC) -I$(srcdir) -I$(top_srcdir) --java_out=lite:lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs)\n",
        "Line" : 266,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## @mkdir -p lite\n\n## oldpwd=`pwd` && ( cd $(srcdir) && $$oldpwd/../src/protoc$(EXEEXT) -I. -I$(top_srcdir)/src --java_out=lite:$$oldpwd/lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs) )\n",
        "Line" : 278,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Currently the conformance code is alongside the rest of the C#\n\n# source, as it's easier to maintain there. We assume we've already\n\n# built that, so we just need a script to run it.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Targets for actually running tests.\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# These depend on library paths being properly set up.  The easiest way to\n\n# run them is to just use \"tox\" from the python dir.\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "examples/BUILD" : {
      "ObjectId" : "d5d5d9a56b25b3460164be63c99b6b9e352374fc",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This BUILD file shows how to use protobuf with bazel. Before you can use\n# proto_library/<lang>_proto_library rules in a BUILD file, you need to\n# include protobuf repo as remote repositories in your WORKSPACE file. See\n# the WORKSPACE file in the same directory with this BUILD file for an\n# example.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For each .proto file, a proto_library target should be defined. This target\n# is not bound to any particular language. Instead, it defines the dependency\n# graph of the .proto files (i.e., proto imports) and serves as the provider\n# of .proto source files to the protocol compiler.\n#\n# Remote repository \"com_google_protobuf\" must be defined to use this rule.",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The cc_proto_library rule generates C++ code for a proto_library rule. It\n# must have exactly one proto_library dependency. If you want to use multiple\n# proto_library targets, create a separate cc_proto_library target for each\n# of them.\n#\n# Remote repository \"com_google_protobuf_cc\" must be defined to use this rule.",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cc_library/cc_binary targets can depend on cc_proto_library targets.",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Similar to cc_proto_library but for Java.\n#\n# Remote repository \"com_google_protobuf_java\" must be defined to use this rule.",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Java lite.\n#\n# Remote repository \"com_google_protobuf_javalite\" must be defined to use this\n# rule.",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Java lite API is a subset of the regular Java API so if you only uses this\n# subset in your code, you can actually compile your code against both (i.e.,\n# share code between server build and Android build).\n#\n# The lite version has a smaller code size, and you can see that by comparing\n# the resulted .jar file:\n#\n#   $ bazel build :add_person_java_deploy.jar :add_person_java_lite_deploy.jar\n#   $ ls -l bazel-bin/*_deploy.jar\n#   -r-xr-xr-x 1 xiaofeng eng 1230797 Sep  8 12:24 bazel-bin/add_person_java_deploy.jar\n#   -r-xr-xr-x 1 xiaofeng eng  236166 Sep  8 12:24 bazel-bin/add_person_java_lite_deploy.jar\n#\n# In the above example, the lite .jar file is 6 times smaller. With proper\n# proguard inlining/stripping, the difference can be much more larger than\n# that.",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "3e8e65414e1d55fb67dbeec784bd50ce765c03b7",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find required protobuf package\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://www.cmake.org/Wiki/CMake_FAQ#How_can_I_build_my_MSVC_application_with_a_static_runtime.3F\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Code Generation\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Legacy Support\n",
        "Line" : 32,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "#Executable setup\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#Legacy mode\n",
        "Line" : 40,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 8
    },
    "examples/Makefile" : {
      "ObjectId" : "4ad605641da9b3091dbfce2c43fe81e7f9fe2a0e",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# See README.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make directory for go package\n",
        "Line" : 32,
        "CharPositionInLine" : 19
      },
      "2" : {
        "Text" : "# make directory for the dart package\n",
        "Line" : 37,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 43,
        "CharPositionInLine" : 31
      },
      "4" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 47,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 5
    },
    "java/bom/pom.xml" : {
      "ObjectId" : "90fc53366ef88da6604872ddb6e59e215a2b0733",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " If you see the error message\n           gpg: signing failed: Inappropriate ioctl for device\n           when signing run the command\n           export GPG_TTY=$(tty)\n           and try again. ",
        "Line" : 78,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 1
    },
    "java/compatibility_tests/v2.5.0/deps/pom.xml" : {
      "ObjectId" : "7ceb96049d72b06a79b0756da0d22769068adf17",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/compatibility_tests/v2.5.0/more_protos/pom.xml" : {
      "ObjectId" : "ff0c4133f0d89cf066f9ccfbdc44a3ece26cad51",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/compatibility_tests/v2.5.0/pom.xml" : {
      "ObjectId" : "83a7563afd9f147ec67a38c1a5561d58a402292e",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/compatibility_tests/v2.5.0/protos/pom.xml" : {
      "ObjectId" : "a22e91ed1d61386ed98a978ca3afd4535df2fe0d",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/compatibility_tests/v2.5.0/tests/pom.xml" : {
      "ObjectId" : "f1ce46e7ab2d4e1a81fbbf00f6d87034558453d0",
      "LastModified" : "2019-03-04T21:24:43Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/core/pom.xml" : {
      "ObjectId" : "c9161b69ac3d25f631a0db739f4264c6994648d5",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Include core protos in the bundle as resources ",
        "Line" : 43,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " Use Antrun plugin to generate sources with protoc ",
        "Line" : 74,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : " Generate core protos ",
        "Line" : 78,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : " Generate the test protos ",
        "Line" : 92,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : " Add the generated sources to the build ",
        "Line" : 108,
        "CharPositionInLine" : 54
      },
      "5" : {
        "Text" : " OSGI bundle configuration ",
        "Line" : 140,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 6
    },
    "java/lite/pom.xml" : {
      "ObjectId" : "f63e275d9187404a2db0a5a19936efc4c5f9fcd6",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Include core protos in the bundle as resources ",
        "Line" : 45,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : " For sources, we want to be explicit about what we add so we don't accidentally\n                  increase the size of the lite runtime library. For tests, we want to be defensive\n                  and exclude only the full runtime exclusive tests so we don't accidentally miss\n                  any test. ",
        "Line" : 201,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : " Use Antrun plugin to generate sources with protoc ",
        "Line" : 248,
        "CharPositionInLine" : 65
      },
      "3" : {
        "Text" : " Generate core protos ",
        "Line" : 252,
        "CharPositionInLine" : 40
      },
      "4" : {
        "Text" : " Generate the test protos ",
        "Line" : 266,
        "CharPositionInLine" : 44
      },
      "5" : {
        "Text" : " OSGI bundle configuration ",
        "Line" : 327,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 6
    },
    "java/pom.xml" : {
      "ObjectId" : "5291f9c11356f0dfabd657bf0d4573b66c0467cc",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " These are relative to the submodules ",
        "Line" : 33,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 1
    },
    "java/util/pom.xml" : {
      "ObjectId" : "010e522000663309d3316cb261b8cf03cce0fbdd",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Use the core proto dir so that we can call the core generation script ",
        "Line" : 55,
        "CharPositionInLine" : 83
      },
      "1" : {
        "Text" : " Generate the test protos ",
        "Line" : 64,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : " Generate all of the test protos from the core module ",
        "Line" : 70,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " Generate additional test protos for this module ",
        "Line" : 73,
        "CharPositionInLine" : 73
      },
      "4" : {
        "Text" : " Add the generated test sources to the build ",
        "Line" : 89,
        "CharPositionInLine" : 59
      },
      "5" : {
        "Text" : " Configure the OSGI bundle ",
        "Line" : 109,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : " Configure the fat jar to include all dependencies ",
        "Line" : 123,
        "CharPositionInLine" : 65
      },
      "CommentCount" : 7
    },
    "protobuf.bzl" : {
      "ObjectId" : "e764859b4a4455a41ff4dca8ddf11020fed6b3ef",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel 0.4.4 and older have genfiles paths that look like:\n#   bazel-out/local-fastbuild/genfiles/external/repo/foo\n# After the exec root rearrangement, they look like:\n#   ../repo/bazel-out/local-fastbuild/genfiles/foo",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# We are using the fact that Bazel 0.4.4+ provides repository-relative paths\n# for ctx.genfiles_dir.",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# This means that we're either in the old version OR the new version in the local repo.\n# Either way, appending the source path to the genfiles dir works.",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "\"\"\"General implementation for generating protos\"\"\"",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "\"\"\"Generates codes from Protocol Buffers definitions.\n\nThis rule helps you to implement Skylark macros specific to the target\nlanguage. You should prefer more specific `cc_proto_library `,\n`py_proto_library` and others unless you are adding such wrapper macros.\n\nArgs:\n  srcs: Protocol Buffers definition files (.proto) to run the protocol compiler\n    against.\n  deps: a list of dependency labels; must be other proto libraries.\n  includes: a list of include paths to .proto files.\n  protoc: the label of the protocol compiler to generate the sources.\n  plugin: the label of the protocol compiler plugin to be passed to the protocol\n    compiler.\n  plugin_language: the language of the generated sources\n  plugin_options: a list of options to be passed to the plugin\n  gen_cc: generates C++ sources in addition to the ones from the plugin.\n  gen_py: generates Python sources in addition to the ones from the plugin.\n  outs: a list of labels of the expected outputs from the protocol compiler.\n\"\"\"",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "\"\"\"Bazel rule to create a C++ protobuf library from proto source files\n\n    NOTE: the rule is only an internal workaround to generate protos. The\n    interface may change and the rule may be removed when bazel has introduced\n    the native rule.\n\n    Args:\n      name: the name of the cc_proto_library.\n      srcs: the .proto files of the cc_proto_library.\n      deps: a list of dependency labels; must be cc_proto_library.\n      cc_libs: a list of other cc_library targets depended by the generated\n          cc_library.\n      include: a string indicating the include path of the .proto files.\n      protoc: the label of the protocol compiler to generate the sources.\n      internal_bootstrap_hack: a flag indicate the cc_proto_library is used only\n          for bootstraping. When it is set to True, no files will be generated.\n          The rule will simply be a provider for .proto files, so that other\n          cc_proto_library can depend on it.\n      use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin\n          when processing the proto files.\n      default_runtime: the implicitly default runtime which will be depended on by\n          the generated cc_library target.\n      **kargs: other keyword arguments that are passed to cc_library.\n\n    \"\"\"",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# For pre-checked-in generated files, we add the internal_bootstrap_hack\n# which will skip the codegen action.",
        "Line" : 264,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# An empty cc_library to make rule dependency consistent.",
        "Line" : 275,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "\"\"\"Bazel rule to generate the gen_well_known_protos_java genrule\n\n    Args:\n      srcs: the well known protos\n    \"\"\"",
        "Line" : 318,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "\"\"\"Macro to copy files to a different directory and then create a filegroup.\n\n    This is used by the //:protobuf_python py_proto_library target to work around\n    an issue caused by Python source files that are part of the same Python\n    package being in separate directories.\n\n    Args:\n      srcs: The source files to copy and add to the filegroup.\n      strip_prefix: Path to the root of the files to copy.\n      dest: The directory to copy the source files into.\n      **kwargs: extra arguments that will be passesd to the filegroup.\n    \"\"\"",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "\"\"\"Bazel rule to create a Python protobuf library from proto source files\n\n    NOTE: the rule is only an internal workaround to generate protos. The\n    interface may change and the rule may be removed when bazel has introduced\n    the native rule.\n\n    Args:\n      name: the name of the py_proto_library.\n      srcs: the .proto files of the py_proto_library.\n      deps: a list of dependency labels; must be py_proto_library.\n      py_libs: a list of other py_library targets depended by the generated\n          py_library.\n      py_extra_srcs: extra source files that will be added to the output\n          py_library. This attribute is used for internal bootstrapping.\n      include: a string indicating the include path of the .proto files.\n      default_runtime: the implicitly default runtime which will be depended on by\n          the generated py_library target.\n      protoc: the label of the protocol compiler to generate the sources.\n      use_grpc_plugin: a flag to indicate whether to call the Python C++ plugin\n          when processing the proto files.\n      **kargs: other keyword arguments that are passed to cc_library.\n\n    \"\"\"",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Note: Generated grpc code depends on Python grpc module. This dependency\n# is not explicitly listed in py_libs. Instead, host system is assumed to\n# have grpc installed.",
        "Line" : 415,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "\"\"\"Bazel rules to create batch tests for protobuf internal.\n\n    Args:\n      name: the name of the rule.\n      modules: a list of modules for tests. The macro will create a py_test for\n          each of the parameter with the source \"google/protobuf/%s.py\"\n      kargs: extra parameters that will be passed into the py_test.\n\n    \"\"\"",
        "Line" : 447,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "\"\"\"For WORKSPACE files, to check the installed version of bazel.\n\n    This ensures bazel supports our approach to proto_library() depending on a\n    copied filegroup. (Fixed in bazel 0.5.4)\n    \"\"\"",
        "Line" : 466,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "protobuf_deps.bzl" : {
      "ObjectId" : "25fad72537b18cd57202e5f7905b7faf6e79f0a3",
      "LastModified" : "2019-04-15T20:43:05Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "\"\"\"Load dependencies needed to compile the protobuf library as a 3rd-party consumer.\"\"\"",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"Loads common dependencies needed to compile the protobuf library.\"\"\"",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "protoc-artifacts/pom.xml" : {
      "ObjectId" : "a3f610b2b0967db2e8ac0d1275fa52a053cfff71",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Specify the staging repository to deploy to. This can be left\n             empty for the first deployment, and Sonatype will create one. For\n             subsequent deployments it should be set to what Sonatype has\n             created, so that all deployments will go to the same repository.\n             ",
        "Line" : 103,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 1
    },
    "ruby/pom.xml" : {
      "ObjectId" : "acd2453ba3f1ee543a64059424732f95f6673651",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "src/Makefile.am" : {
      "ObjectId" : "41bf7b413987bd3de5f8d6805742711dc2d54e89",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Turn on all warnings except for sign comparison (we ignore sign comparison\n\n# in Google so our code base have tons of such warnings).\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If I say \"dist_include_DATA\", automake complains that $(includedir) is not\n\n# a \"legitimate\" directory for DATA.  Screw you, automake.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you are adding new files here, also remember to change the build files for\n\n# all other languages, //protoc-artifacts/build-zip.sh and run\n\n# //update_file_list.sh for bazel.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Not sure why these don't get cleaned automatically.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Disable optimization for tests unless the user explicitly asked for it,\n\n# since test_util.cc takes forever to compile with optimization (with GCC).\n\n# See configure.ac for more info.\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Run cpp_unittest again with PROTOBUF_TEST_NO_DESCRIPTORS defined.\n",
        "Line" : 810,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build lite_unittest separately, since it doesn't use gtest. It can't\n\n# depend on gtest because our internal version of gtest depend on proto\n\n# full runtime and we want to make sure this test builds without full\n\n# runtime.\n",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# lite_arena_unittest depends on gtest because teboring@ found that without\n\n# gtest when building the test internally our memory sanitizer doesn't detect\n\n# memory leaks (don't know why).\n",
        "Line" : 851,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Test plugin binary.\n",
        "Line" : 867,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This test target is to ensure all our public header files and generated\n\n# code is free from warnings. We have to be more pedantic about these\n\n# files because they are compiled by users with different compiler flags.\n",
        "Line" : 885,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "util/python/BUILD" : {
      "ObjectId" : "3ac03856690e43bba992ea8e5a1047e6435eed61",
      "LastModified" : "2019-04-09T13:48:01Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This is a placeholder for python headers. Projects needing to use\n# fast cpp protos in protobuf's python interface should build with\n# --define=use_fast_cpp_protos=true, and in addition, provide\n# //external:python_headers dependency that in turn provides Python.h.\n#\n# Projects that include protobuf using a Bazel external repository will need to\n# add a workspace rule to their WORKSPACE files to add an external workspace\n# that includes the Python headers. For example, the protobuf WORKSPACE file\n# includes the following local_repository rule that points to this directory:\n#\n# new_local_repository(\n#   name = \"python\",\n#   path = __workspace_dir__ + \"/util/python\",\n# )",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 4,
    "BAZEL" : 6,
    "MAVEN" : 13
  },
  "ElapsedTime" : 5639
}