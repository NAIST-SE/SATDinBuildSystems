{
  "Repository" : "20245177",
  "Revision" : "HEAD",
  "ObjectId" : "fc1c0fcdaa596a3d2ecfa4fd8c945f99d09cd05d",
  "CommitTime" : "2018-03-12T14:26:52Z",
  "Files" : {
    "Aplicacion/haiam-lib/build.xml" : {
      "ObjectId" : "506932d0d06c8a6c261c39ae9ad522ebb192d6e7",
      "LastModified" : "2016-11-22T03:13:24Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"haiam-lib-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiam-war/build.xml" : {
      "ObjectId" : "285cc1cb6da87cd31440a4036aaca9de55b50869",
      "LastModified" : "2016-11-22T03:13:24Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamAdmin-ejb/build.xml" : {
      "ObjectId" : "db4bdaf09b3ecde10aaa7d3921ae51a868a2ea12",
      "LastModified" : "2016-11-22T03:13:24Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-dist:                 called before archive building\n      -post-dist:                called after archive building\n      -post-clean:               called after cleaning build products\n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamAdmin-war/build.xml" : {
      "ObjectId" : "324b7ab1eca979fe3ba94739bb20c2d849708451",
      "LastModified" : "2016-11-22T03:13:24Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamApi-lib/build.xml" : {
      "ObjectId" : "5334fee2498be86fd22415c00c05514afd16a429",
      "LastModified" : "2016-11-22T03:13:24Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"haiamApi-lib-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamBodega-ejb/build.xml" : {
      "ObjectId" : "8eb81f710a33e7f48502b809484f72f583c39784",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-dist:                 called before archive building\n      -post-dist:                called after archive building\n      -post-clean:               called after cleaning build products\n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamBodega-war/build.xml" : {
      "ObjectId" : "9edbb5e553857538e251fe81bc289392601d858b",
      "LastModified" : "2017-07-28T15:46:27Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamConsultaExterna-ejb/build.xml" : {
      "ObjectId" : "adf4f50f7241442f73c6aa3bfd21bbbf8cfe4ee9",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-dist:                 called before archive building\n      -post-dist:                called after archive building\n      -post-clean:               called after cleaning build products\n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamConsultaExterna-war/build.xml" : {
      "ObjectId" : "56daee581838ea0f6548a9b2f7a798a28dbd595f",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamEA/build.xml" : {
      "ObjectId" : "60bc6341afdda148e028599e39f6b182bb334e23",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      pre-init:                 called before initialization of project properties \n      post-init:                called after initialization of project properties \n      pre-compile:              called before javac compilation \n      post-compile:             called after javac compilation \n      pre-dist:                 called before archive building \n      post-dist:                called after archive building \n      post-clean:               called after cleaning build products \n      pre-run-deploy:           called before deploying\n      post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      do-dist:                archive building\n      run:                    execution of project \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamEmergencia-ejb/build.xml" : {
      "ObjectId" : "8c0da33ccaf7b9e869df8afcf567c8eac84a7bc6",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-dist:                 called before archive building\n      -post-dist:                called after archive building\n      -post-clean:               called after cleaning build products\n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamEmergencia-war/build.xml" : {
      "ObjectId" : "84c3bd56a229b858f49ccc9bb7ff86046f89d155",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamHospitalizacion-ejb/build.xml" : {
      "ObjectId" : "3a87d0a3594f48827e8ba03bd880a5478f5de7f7",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-dist:                 called before archive building\n      -post-dist:                called after archive building\n      -post-clean:               called after cleaning build products\n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamHospitalizacion-war/build.xml" : {
      "ObjectId" : "aa6bbc34c8bd8631ebffbfc36d44bee62a29f704",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties \n      -post-init:                called after initialization of project properties \n      -pre-compile:              called before javac compilation \n      -post-compile:             called after javac compilation \n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-dist:                 called before archive building \n      -post-dist:                called after archive building \n      -post-clean:               called after cleaning build products \n      -pre-run-deploy:           called before deploying\n      -post-run-deploy:          called after deploying\n\n    Example of pluging an obfuscator after the compilation could look like \n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Other way how to customize the build is by overriding existing main targets.\n    The target of interest are: \n\n      init-macrodef-javac:    defines macro for javac compilation\n      init-macrodef-junit:   defines macro for junit execution\n      init-macrodef-debug:    defines macro for class debugging\n      do-dist:                archive building\n      run:                    execution of project \n      javadoc-build:          javadoc generation \n\n    Example of overriding the target for project execution could look like \n\n        <target name=\"run\" depends=\"<PROJNAME>-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that overridden target depends on jar target and not only on \n    compile target as regular run target does. Again, for list of available \n    properties which you can use check the target you are overriding in \n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "Aplicacion/haiamJsfComun/build.xml" : {
      "ObjectId" : "884751b78b9c5aa0902b8ddd7f553e8302f0e250",
      "LastModified" : "2017-07-25T16:48:22Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"haiamJsfComun-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "ANT" : 15
  },
  "ElapsedTime" : 2641
}