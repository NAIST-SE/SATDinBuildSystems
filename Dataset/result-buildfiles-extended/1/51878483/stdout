{
  "Repository" : "51878483",
  "Revision" : "HEAD",
  "ObjectId" : "d1469d770e5cfef28de68bcf88d928ba7c35f23e",
  "CommitTime" : "2019-04-18T13:06:05Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "450ddf88cae79dbac08b01c42c2d7057248fa7fa",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is not the nicest way of activating C++11, but it is guaranteed to\n\n# work with older versions\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "########################################################################\n\n# Versioning\n\n########################################################################\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################\n\n# Macros and additional flags\n\n########################################################################\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n# Compile options\n\n########################################################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n# Additional packages\n\n########################################################################\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check whether the compiler is sufficiently new for C++11 support to\n\n# exist. If that is *still* not the case, some functionality is going\n\n# to be used from Boost. This requires linking Boost against each and\n\n# every target.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Pre-condition: this variable is supposed to be empty at the\n\n# beginning and so far, this is the only place we we use it.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# This is somewhat brute-force: I am adding OpenMP flags regardless of\n\n# the target. However, this makes it easier to use code for which this\n\n# framework may or may not be used.\n\n#\n\n# I do not want to have too many of these declarations for different\n\n# targets flying around.\n\n#\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Workaround: OpenMP with Clang breaks the build for Travis CI. Hence,\n\n# disabling this feature for now, at least on older versions of Clang.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# More recent version of FLANN require this. Maybe this should rather\n\n# be handled in the `FindFLANN.cmake` file.\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Workaround for older versions of the FindHDF5.cmake module. In some\n\n# versions, this module is broken and does not return the proper libs\n\n# when being prompted to do so.\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# RapidJSON is now available in the normal include path, under the\n\n# prefix of RapidJSON.\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Not used here, but in subordinate directories, so it is nicer to\n\n# look for the package in a *single* location.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n# Configuration files\n\n########################################################################\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n# Include directories\n\n########################################################################\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Ensure that Boost installations do not emit any warnings.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n# Tests\n\n########################################################################\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Enable testing globally. Individual tests may be found in the `tests`\n\n# subdirectory of the repository.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "########################################################################\n\n# Place compile commands in the source directory\n\n########################################################################\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "########################################################################\n\n# Add static analysis targets: `cppcheck`\n\n########################################################################\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "########################################################################\n\n# Package setup\n\n########################################################################\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "bindings/CMakeLists.txt" : {
      "ObjectId" : "bb1200740a55d208ac8813b0fb1093956b271cf6",
      "LastModified" : "2017-08-29T08:12:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/python/CMakeLists.txt" : {
      "ObjectId" : "5e039f50ba7ccdbb039f592e7295b9c17b25460e",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Strips away the \"lib\" component of the directory and goes *one*\n\n# directory up so that we can compare paths.\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# We may only run this check for rather recent versions of CMake.\n\n# Else, the filename components cannot be parsed correctly.\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Ditto for the include directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Suppress warnings caused by either the Python libraries or the\n\n# `pybind11` headers.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "####################################################################\n\n# The library must not have any prefix and should be located in\n\n# a subfolder that includes the package name. The setup will be\n\n# more complicated otherwise.\n\n####################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If a specific output directory has been set, for example if this\n\n# module is built using `setuptools`, use it. Else, default to the\n\n# binary directory.\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# We *cannot* rely on HDF5_FOUND here because the module might be\n\n# mis-configured for some reason (older version, etc.).\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Place the initialization file in the output directory for the Python\n\n# bindings. This will simplify the installation.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Ditto for the setup file.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/Macros/add_flags.cmake" : {
      "ObjectId" : "e980d6655a05f3a556052feebedae914693dd226",
      "LastModified" : "2016-09-12T15:17:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro : add_flags.cmake\n\n# Author: Matthias Maier <matthias.maier@iwr.uni-heidelberg.de>\n\n#         Bastian Rieck <bastian.rieck@iwr.uni-heidelberg.de>\n\n#\n\n# Provides macro ADD_FLAGS, which appends a string \"${flags}\" to a given\n\n# variable \"${variable}\".\n\n#\n\n# Usage:\n\n#   ADD_FLAGS( variable flags )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Macros/enable_if_supported.cmake" : {
      "ObjectId" : "33e4bbf2832ac3a7eff0ba60ca5e92bc73d46682",
      "LastModified" : "2016-09-12T15:17:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro : enable_if_supported\n\n# Author: Matthias Maier <matthias.maier@iwr.uni-heidelberg.de>\n\n#         Bastian Rieck <bastian.rieck@iwr.uni-heidelberg.de>\n\n#\n\n# Provides macro ENABLE_IF_SUPPORTED, which checks whether the CXX compiler\n\n# understands a given compiler flag. If so, it is added to the given variable.\n\n#\n\n# Usage:\n\n#   ENABLE_IF_SUPPORTED( variable flag )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Macros/set_if_empty.cmake" : {
      "ObjectId" : "13eda7d9f2c0a6f888866ba4587a660e13d7edac",
      "LastModified" : "2016-12-22T09:55:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module: set_if_empty\n\n# Author: Matthias Maier <matthias.maier@iwr.uni-heidelberg.de>\n\n#         Bastian Rieck <bastian.rieck@iwr.uni-heidelberg.de>\n\n#\n\n# Provides macro SET_IF_EMPTY. Given a variable and a value, the variable is\n\n# set to the value if it is still empty.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindFLANN.cmake" : {
      "ObjectId" : "bce9d3884fb13efea41c1a9c93ef0e66c2af9b69",
      "LastModified" : "2018-02-28T07:47:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module: FindFLANN.cmake\n\n# Author: Bastian Rieck <bastian.rieck@iwr.uni-heidelberg.de>\n\n#\n\n# CMake find module for FLANN (Fast Library for Approximate Nearest Neighbors).\n\n# If not present in the local packaging system, the libraries may be obtained\n\n# from:\n\n#\n\n#   http://www.cs.ubc.ca/~mariusm/index.php/FLANN/FLANN\n\n#\n\n# Some package names for FLANN:\n\n#\n\n# * libflann-dev\n\n# * aur/lib/flann\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We have a match, i.e. there is some sort of FLANN version\n\n# identification available.\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/Modules/Findlz4.cmake" : {
      "ObjectId" : "30ee1185e0d6e4b3f61e9bb5d156d6c1a858a1b0",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module: Findlz4.cmake\n\n# Author: Bastian Rieck <bastian.rieck@bsse.ethz.ch>\n\n#\n\n# CMake find module for `lz4` (a package for compressing data). If not\n\n# present in your local systems, the libraries may be installed as one\n\n# of the following names:\n\n#\n\n# - lz4 (Homebrew, Ubuntu, ...)\n\n# - aur/lz4-git\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/Findpybind11.cmake" : {
      "ObjectId" : "5e32ce45cce3dad71fcc3d5083415c2c3464bb86",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module: Findpybind11.cmake\n\n# Author: Bastian Rieck <bastian.rieck@iwr.uni-heidelberg.de>\n\n#\n\n# CMake find module for pybind11.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/check_compiler_features.cmake" : {
      "ObjectId" : "2b988f9bb4151d31dd8ebbf2678b791055285cbb",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module: check_compiler_features\n\n# Author: Bastian Rieck <bastian.rieck@bsse.ethz.ch>\n\n#\n\n# Checks for some compiler features and sets variables accordingly. This\n\n# is useful when building with:\n\n#\n\n# - different compilers (`gcc`, `clang`)\n\n# - older versions of some compilers in an OS (looking at you, Ubuntu)\n\n#\n\n# Parts of these checks have been inspired by the great deal.II library\n\n# that you can check out on GitHub (https://github.com/dealii/dealii).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Checks whether we have access to the _Pragma directive and push/pop\n\n# operations. If this is the case, we are able to disable some\n\n# diagnostics for some external headers which decreases the amount of\n\n# warnings.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Checks whether the regex token iterator is available. This is\n\n# a feature of C++11 but not all compilers have implemented it.\n\n# Some older versions of `gcc` only support parts of the C++11\n\n# standard.\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Checks whether the compiler permits us to deprecate a function. If so,\n\n# we can set up a macro that does this job for us. If not, this macro\n\n# will be left empty.\n\n#\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This needs to contain at least a single space. Else, CMake will not let us\n\n# define this as a macro.\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/setup_external_macros.cmake" : {
      "ObjectId" : "a01c9601020f76478ff8a5dc96da07b20b444e4d",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \n\n# Includes all external CMake macros that we are going to use for\n\n# building Aleph\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "af1411de0c6f16f722e9b052145731950631ab01",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "546e7d91976062df3b8941b32cc646a534156f5a",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install rule for all headers shipped by Aleph. This does not yet\n\n# include the generated ones, though.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "bfb65a9988c0e5a38e87943f2547fba669917717",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "38ba71720aff14e5a89601d58b33bf6df8375748",
      "LastModified" : "2019-03-21T08:58:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the output directory to 'tools' instead of 'src/tools' in order\n\n# to flatten the output folder hierarchy somewhat.\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "######################################################################\n\n# Check compiler flags\n\n######################################################################\n\n#\n\n# A few targets require a modern compiler, so we need to make sure\n\n# that they are *not* built when an old compiler has been detected\n\n# or the flag for C++14 is not supported.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# The confidence set calculation requires the availability of generic\n\n# lambdas. Ditto for persistent intersection homology and smoothing.\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Old or unsupported compiler; let's exclude the targets from the\n\n# build process.\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "321238bc97977e73879eb030b98186273f8dbb76",
      "LastModified" : "2019-03-21T09:09:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable this warning for older versions of GCC because it will\n\n# be triggered by some of the test cases.\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Disable warnings for unknown pragmas in case OpenMP cannot be\n\n# found in the specified configuration. This will only make the\n\n# test take longer.\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Ignore warnings related to the GNU statement expressions if we\n\n# compile with clang.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Optimizes for a useful debugging experience. While the test cases\n\n# might run slightly faster if \"real\" optimizations were enabled, I\n\n# like this flag for debugging.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# The tests should always have these nasty flags enabled. What's the\n\n# use of the test without them?\n\n#\n\n# Coincidentally, isn't it nice how \"-Wall\" will not enable any of\n\n# the flags described afterwards?\n\n#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# There are some issues with user-installed libraries in Mac OS X that\n\n# cause warnings to appear in code that does *not* belong to Aleph, so\n\n# I rather want this switch to be disabled.\n\n#\n\n# The automated tests under Linux will still have this setting though,\n\n# so I should not miss too many issues.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This test cannot be built if C+++14 extensions (generic lambdas) are\n\n# not available.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The test will build nonetheless, but the results will of course be\n\n# incorrect if the library is not available.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The test will build nonetheless, but the results will of course be\n\n# incorrect if the library is not available.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# These test are a little bit special because they depend on another\n\n# shared library so we need to adjust the interface if we are unable\n\n# to build them.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# FIXME: inclusion does not work anymore; test case will not compile\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n# Python integration\n\n########################################################################\n\n#\n\n# Special handling for the Python integration test. This program needs\n\n# to be run but with an updated `PYTHONPATH`.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TODO: handle this dependency better by restructuring the way\n\n# bindings are being generated\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    }
  },
  "FileTypes" : {
    "CMAKE" : 16
  },
  "ElapsedTime" : 840
}