{
  "Repository" : "17569549",
  "Revision" : "HEAD",
  "ObjectId" : "03ef915bfb8cc882ce27088a6cf797764854edce",
  "CommitTime" : "2019-04-12T20:45:51Z",
  "Files" : {
    "Qt_meats/imageviewer/imageviewer.pro" : {
      "ObjectId" : "7b28c8ed7380a6d5fb6b4adb42424e035a3b8b4a",
      "LastModified" : "2017-10-15T18:46:06Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# install\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "defunct/CellDiag/build.xml" : {
      "ObjectId" : "1b1ca25f307afad00496d9017954c823140b4a46",
      "LastModified" : "2015-11-19T12:40:46Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n            There exist several targets which are by default empty and which can be\n            used for execution of your tasks. These targets are usually executed\n            before and after some main targets. They are:\n\n            pre-init:                 called before initialization of project properties\n            post-init:                called after initialization of project properties\n            pre-preprocess:           called before text preprocessing of sources\n            post-preprocess:          called after text preprocessing of sources\n            pre-compile:              called before source compilation\n            post-compile:             called after source compilation\n            pre-obfuscate:            called before obfuscation \n            post-obfuscate:           called after obfuscation\n            pre-preverify:            called before preverification\n            post-preverify:           called after preverification\n            pre-jar:                  called before jar building\n            post-jar:                 called after jar building\n            pre-build:                called before final distribution building\n            post-build:               called after final distribution building\n            pre-clean:                called before cleaning build products\n            post-clean:               called after cleaning build products\n\n            Example of pluging a my-special-task after the compilation could look like\n\n            <target name=\"post-compile\">\n            <my-special-task>\n            <fileset dir=\"${build.classes.dir}\"/>\n            </my-special-task>\n            </target>\n\n            For list of available properties check the imported\n            nbproject/build-impl.xml file.\n\n            Other way how to customize the build is by overriding existing main targets.\n            The target of interest are:\n\n            preprocess:               preprocessing\n            extract-libs:             extraction of libraries and resources\n            compile:                  compilation\n            create-jad:               construction of jad and jar manifest source\n            obfuscate:                obfuscation\n            preverify:                preverification\n            jar:                      jar archive building\n            run:                      execution\n            debug:                    execution in debug mode\n            build:                    building of the final distribution\n            javadoc:                  javadoc generation\n\n            Example of overriding the target for project execution could look like\n\n            <target name=\"run\" depends=\"init,jar\">\n            <my-special-exec jadfile=\"${dist.dir}/${dist.jad}\"/>\n            </target>\n\n            Be careful about correct dependencies when overriding original target. \n            Again, for list of available properties which you can use check the target \n            you are overriding in nbproject/build-impl.xml file.\n\n            A special target for-all-configs can be used to run some specific targets for\n            all project configurations in a sequence. File nbproject/build-impl.xml \n            already contains some \"for-all\" targets:\n    \n            jar-all\n            javadoc-all\n            clean-all\n      \n            Example of definition of target iterating over all project configurations:\n    \n            <target name=\"jar-all\">\n            <property name=\"target.to.call\" value=\"jar\"/>\n            <antcall target=\"for-all-configs\"/>\n            </target>\n\n            ",
        "Line" : 82,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 4
    },
    "defunct/VCardImport/build.xml" : {
      "ObjectId" : "9b41b8ecd246398d00855a55a012210c44ec3be5",
      "LastModified" : "2015-11-19T12:40:46Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n            There exist several targets which are by default empty and which can be\n            used for execution of your tasks. These targets are usually executed\n            before and after some main targets. They are:\n\n            pre-init:                 called before initialization of project properties\n            post-init:                called after initialization of project properties\n            pre-preprocess:           called before text preprocessing of sources\n            post-preprocess:          called after text preprocessing of sources\n            pre-compile:              called before source compilation\n            post-compile:             called after source compilation\n            pre-obfuscate:            called before obfuscation \n            post-obfuscate:           called after obfuscation\n            pre-preverify:            called before preverification\n            post-preverify:           called after preverification\n            pre-jar:                  called before jar building\n            post-jar:                 called after jar building\n            pre-build:                called before final distribution building\n            post-build:               called after final distribution building\n            pre-clean:                called before cleaning build products\n            post-clean:               called after cleaning build products\n\n            Example of pluging a my-special-task after the compilation could look like\n\n            <target name=\"post-compile\">\n            <my-special-task>\n            <fileset dir=\"${build.classes.dir}\"/>\n            </my-special-task>\n            </target>\n\n            For list of available properties check the imported\n            nbproject/build-impl.xml file.\n\n            Other way how to customize the build is by overriding existing main targets.\n            The target of interest are:\n\n            preprocess:               preprocessing\n            extract-libs:             extraction of libraries and resources\n            compile:                  compilation\n            create-jad:               construction of jad and jar manifest source\n            obfuscate:                obfuscation\n            preverify:                preverification\n            jar:                      jar archive building\n            run:                      execution\n            debug:                    execution in debug mode\n            build:                    building of the final distribution\n            javadoc:                  javadoc generation\n\n            Example of overriding the target for project execution could look like\n\n            <target name=\"run\" depends=\"init,jar\">\n            <my-special-exec jadfile=\"${dist.dir}/${dist.jad}\"/>\n            </target>\n\n            Be careful about correct dependencies when overriding original target. \n            Again, for list of available properties which you can use check the target \n            you are overriding in nbproject/build-impl.xml file.\n\n            A special target for-all-configs can be used to run some specific targets for\n            all project configurations in a sequence. File nbproject/build-impl.xml \n            already contains some \"for-all\" targets:\n    \n            jar-all\n            javadoc-all\n            clean-all\n      \n            Example of definition of target iterating over all project configurations:\n    \n            <target name=\"jar-all\">\n            <property name=\"target.to.call\" value=\"jar\"/>\n            <antcall target=\"for-all-configs\"/>\n            </target>\n\n            ",
        "Line" : 82,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 4
    },
    "defunct/pax/Makefile" : {
      "ObjectId" : "2187f6b7a4ee0464e459363297b7e3489acaa86f",
      "LastModified" : "2015-11-19T12:40:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "htmltest/Makefile" : {
      "ObjectId" : "d2b913391864786e936b38fb0774c3dde47e91d7",
      "LastModified" : "2015-11-19T12:40:46Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "lang_lawyer/cmake/find_png_jpg/CMakeLists.txt" : {
      "ObjectId" : "7587175bd442c824b7bfea5fa1a49e9b61da0b0c",
      "LastModified" : "2016-09-20T08:43:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# I use a minimum of 3.0 flat for features anyway, though nothing here\n\n# should require anything this high\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# courtesy of: http://stackoverflow.com/questions/9298278/cmake-print-out-all-accessible-variables-in-a-script#9328525\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "pvicig/Makefile.am" : {
      "ObjectId" : "3c4679e802e23d7dcc403c24bec270dae73cebcc",
      "LastModified" : "2019-02-04T10:13:12Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# A parser and lexer of BANAL programming language\n\n# Analizatory j�zyka BANAL (mojego autorstwa)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ISO C scanner & parser, and some auxiliary functions\n\n# Analizatory j�zyka C oraz kilka narz�dzi pomocniczych\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pascal scanner & parser\n\n# Analizatory j�zyka Pascal\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pvicig/locale/pl/LC_MESSAGES/Makefile" : {
      "ObjectId" : "e4262dda86f4a83795cec2eba7aede5b541d528a",
      "LastModified" : "2016-09-20T08:43:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 1,
    "QMAKE" : 1,
    "MAKEFILE" : 3,
    "AUTOMAKE" : 1,
    "ANT" : 2
  },
  "ElapsedTime" : 868
}