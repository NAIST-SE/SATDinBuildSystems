{
  "Repository" : "76385985",
  "Revision" : "HEAD",
  "ObjectId" : "9b027912e408ef4c80313e79874baeb1b55ce388",
  "CommitTime" : "2017-08-26T01:47:31Z",
  "Files" : {
    "APMrover2/Makefile" : {
      "ObjectId" : "2e0171e706845afc381f064bdcb44c2249c6987b",
      "LastModified" : "2013-01-09T21:15:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "AntennaTracker/Makefile" : {
      "ObjectId" : "2e0171e706845afc381f064bdcb44c2249c6987b",
      "LastModified" : "2014-08-14T10:56:05Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ArduCopter/Makefile" : {
      "ObjectId" : "725e5d2810b10ef09add6ba69a03b8a23a4e73b9",
      "LastModified" : "2013-01-09T21:15:53Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ArduPlane/Makefile" : {
      "ObjectId" : "725e5d2810b10ef09add6ba69a03b8a23a4e73b9",
      "LastModified" : "2013-10-13T10:41:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ArduSub/Makefile" : {
      "ObjectId" : "725e5d2810b10ef09add6ba69a03b8a23a4e73b9",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Makefile" : {
      "ObjectId" : "5bdcdd2d2c801968f895732f28f0aaa79f228cd4",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# top level makefile to build SITL for primary vehicle targets. \n\n# Useful for static analysis tools\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Tools/APM2_2560_bootloader/Makefile" : {
      "ObjectId" : "d524428ec0350e777c0464c56c21f1bdc50f65e0",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Makefile to compile and link stk500boot bootloader\n\n# Author: Peter Fleury\n\n# File:   $Id: Makefile,v 1.3 2006/03/04 19:26:17 peter Exp $\n\n# based on WinAVR Makefile Template written by Eric B. Weddington, Jï¿½rg Wunsch, et al.\n\n#\n\n# Adjust F_CPU below to the clock frequency in Mhz of your AVR target\n\n# Adjust BOOTLOADER_ADDRESS to your AVR target\n\n#\n\n#----------------------------------------------------------------------------\n\n# On command line:\n\n#\n\n# make all = Make software.\n\n#\n\n# make clean = Clean out built project files.\n\n#\n\n# make coff = Convert ELF to AVR COFF.\n\n#\n\n# make extcoff = Convert ELF to AVR Extended COFF.\n\n#\n\n# make program = Download the hex file to the device, using avrdude.\n\n#                Please customize the avrdude settings below first!\n\n#\n\n# make debug = Start either simulavr or avarice as specified for debugging, \n\n#              with avr-gdb or avr-insight as the front end for debugging.\n\n#\n\n# make filename.s = Just compile filename.c into the assembler code only.\n\n#\n\n# make filename.i = Create a preprocessed source file for use in submitting\n\n#                   bug reports to the GCC project.\n\n#\n\n# To rebuild project do \"make clean\" then \"make all\".\n\n#----------------------------------------------------------------------------\n\n#\t<MLS> = Mark Sproul msproul-at-skychariot.com\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MCU name\n\n#MCU = atmega128\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Processor frequency.\n\n#     This will define a symbol, F_CPU, in all source code files equal to the \n\n#     processor frequency. You can then use this symbol in your source code to \n\n#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done\n\n#     automatically to create a 32-bit value in your source code.\n\n#F_CPU = 16000000\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Bootloader\n\n# Please adjust if using a different AVR\n\n# 0x0e00*2=0x1C00 for ATmega8  512 words Boot Size\n\n# 0xFC00*2=0x1F800 for ATmega128  1024 words Boot Size\n\n# 0xF800*2=0x1F000 for ATmega1280\n\n# 0xF000*2=0x1E000 for ATmega1280\n\n#BOOTLOADER_ADDRESS = 1E000\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Target file name (without extension).\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List Assembler source files here.\n\n#     Make them always end in a capital .S.  Files ending in a lowercase .s\n\n#     will not be considered source files but generated files (assembler\n\n#     output from the compiler), and will be deleted upon \"make clean\"!\n\n#     Even though the DOS/Win* filesystem matches both .s and .S the same,\n\n#     it will preserve the spelling of the filenames, and gcc itself does\n\n#     care about how the name is spelled on its command-line.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s]. \n\n#     0 = turn off optimization. s = optimize for size.\n\n#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Debugging format.\n\n#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.\n\n#     AVR Studio 4.10 requires dwarf-2.\n\n#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# List any extra directories to look for include files here.\n\n#     Each directory must be separated by a space.\n\n#     Use forward slashes for directory separators.\n\n#     For a directory that has spaces, enclose it in quotes.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n#     c89   = \"ANSI\" C\n\n#     gnu89 = c89 plus GCC extensions\n\n#     c99   = ISO C99 standard (not yet fully implemented)\n\n#     gnu99 = c99 plus GCC extensions\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Place -D or -U options here\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Place -I options here\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---------------- Compiler Options ----------------\n\n#  -g*:          generate debugging information\n\n#  -O*:          optimization level\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\n\n#  -Wall...:     warning level\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\n\n#    -adhlns...: create assembler listing\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---------------- Assembler Options ----------------\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\n\n#  -ahlms:    create listing\n\n#  -gstabs:   have the assembler create line number information; note that\n\n#             for use in COFF files, additional information about filenames\n\n#             and function names needs to be present in the assembler source\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---------------- Library Options ----------------\n\n# Minimalistic printf version\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If this is left blank, then it will use the Standard printf version.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#PRINTF_LIB = $(PRINTF_LIB_MIN)\n\n#PRINTF_LIB = $(PRINTF_LIB_FLOAT)\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Minimalistic scanf version\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# If this is left blank, then it will use the Standard scanf version.\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#SCANF_LIB = $(SCANF_LIB_MIN)\n\n#SCANF_LIB = $(SCANF_LIB_FLOAT)\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#---------------- External Memory Options ----------------\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# used for variables (.data/.bss) and heap (malloc()).\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\n\n# only used for heap (malloc()).\n\n#EXTMEMOPTS = -Wl,--defsym=__heap_start=0x801100,--defsym=__heap_end=0x80ffff\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#---------------- Linker Options ----------------\n\n#  -Wl,...:     tell GCC to pass this to linker.\n\n#    -Map:      create map file\n\n#    --cref:    add cross reference to  map file\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#--------------- bootloader linker Options -------\n\n# BOOTLOADER_ADDRESS (=Start of Boot Loader section\n\n# in bytes - not words) is defined above.\n\n#LDFLAGS += -Wl,--section-start=.text=$(BOOTLOADER_ADDRESS) -nostartfiles -nodefaultlibs\n\n#LDFLAGS += -Wl,--section-start=.text=$(BOOTLOADER_ADDRESS) -nostartfiles\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#---------------- Programming Options (avrdude) ----------------\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Programming hardware: alf avr910 avrisp bascom bsd \n\n# dt006 pavr picoweb pony-stk200 sp12 stk200 stk500\n\n#\n\n# Type: avrdude -c ?\n\n# to get a full listing.\n\n#\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# com1 = serial port. Use lpt1 to connect to parallel port.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# programmer connected to serial device\n",
        "Line" : 215,
        "CharPositionInLine" : 23
      },
      "33" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Uncomment the following if you want avrdude's erase cycle counter.\n\n# Note that this counter needs to be initialized first using -Yn,\n\n# see avrdude manual.\n\n#AVRDUDE_ERASE_COUNTER = -y\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\n\n# performed after programming the device.\n\n#AVRDUDE_NO_VERIFY = -V\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Increase verbosity level.  Please use this when submitting bug\n\n# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude> \n\n# to submit bug reports.\n\n#AVRDUDE_VERBOSE = -v -v\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#---------------- Debugging Options ----------------\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# For simulavr only - target MCU frequency.\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Set the DEBUG_UI to either gdb or insight.\n\n# DEBUG_UI = gdb\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Set the debugging back-end to either avarice, simulavr.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#DEBUG_BACKEND = simulavr\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# GDB Init Filename.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# When using avarice settings for the JTAG\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Debugging port used to communicate between GDB / avarice / simulavr.\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Debugging host used to communicate between GDB / avarice / simulavr, normally\n\n#     just set to localhost unless doing some sort of crazy debugging when \n\n#     avarice is running on a different computer.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#============================================================================\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Define programs and commands.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Define Messages\n\n# English\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Define all object files.\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compiler flags to generate dependency files.\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "############################################################\n\n#\tMay 25,\t2010\t<MLS> Adding 1280 support\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "############################################################\n\n#\tJul 6,\t2010\t<MLS> Adding 2560 support\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "############################################################\n\n#Initial config on Amber128 board\n\n#\tavrdude: Device signature = 0x1e9702\n\n#\tavrdude: safemode: lfuse reads as 8F\n\n#\tavrdude: safemode: hfuse reads as CB\n\n#\tavrdude: safemode: efuse reads as FF\n\n#\tJul 17,\t2010\t<MLS> Adding 128 support\n\n############################################################\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#amber128: F_CPU = 16000000\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "############################################################\n\n#\tAug 23, 2010 \t<MLS> Adding atmega2561 support\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "############################################################\n\n#\tAug 23, 2010 \t<MLS> Adding atmega2561 support\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "############################################################\n\n#\tavrdude: Device signature = 0x1e9801\n\n#\tavrdude: safemode: lfuse reads as EC\n\n#\tavrdude: safemode: hfuse reads as 18\n\n#\tavrdude: safemode: efuse reads as FD\n\n#\tAug 23,\t2010\t<MLS> Adding cerebot 2560 @ 8mhz\n\n#avrdude -P usb -c usbtiny -p m2560 -v -U flash:w:/Arduino/WiringBootV2_upd1/stk500boot_v2_cerebotplus.hex \n\n############################################################\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "############################################################\n\n#\tAug 23, 2010 \t<MLS> Adding atmega32 support\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "############################################################\n\n#\tSep 8, 2010 \t<MLS> Adding atmega16 support\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "############################################################\n\n#\tSep 17, 2010 \t<MLS> Adding BahBots 1284p\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "############################################################\n\n#\tSep 24, 2010 \t<MLS> custom bootloader for ro-bot-x\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Default target.\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#build:  hex eep lss sym\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Eye candy.\n\n# AVR Studio 3.x does not check make's exit code but relies on\n\n# the following magic strings to be generated by the compile job.\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Display size of file.\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Display compiler version information.\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Program the device.  \n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Generate avr-gdb config/init file which does the following:\n\n#     define the reset signal, load the target file, connect to target, and set \n\n#     a breakpoint at main().\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Link: create ELF output file from object files.\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Compile: create object files from C source files.\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Compile: create assembler files from C source files.\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Assemble: create object files from assembler source files.\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Create preprocessed source for use in sending a bug report.\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Include the dependency files.\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Listing of phony targets.\n",
        "Line" : 623,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 83
    },
    "Tools/APM_radio_test/Makefile" : {
      "ObjectId" : "3959a1654b27326f7b36801a896b290a0182ed0b",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Tools/ArduPPM/ATMega328p/Makefile" : {
      "ObjectId" : "59ae094a4091849803b6b664374ff8359da4fff0",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###############################################################################\n\n# Makefile for the project Encoder-PPM\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## General Flags\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Options common to compile, link and assembly rules\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Compile options common for all C compilation units.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Assembly specific flags\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Linker flags\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Intel Hex file production flags\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Objects that must be built in order to link\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Objects explicitly added by the user\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Build\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compile\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##Link\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Clean target\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Other dependencies\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "Tools/CPUInfo/Makefile" : {
      "ObjectId" : "0ac058446d43ed549a2fa01d93d592b1d1a1b68b",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# this is meant to make existing build instructions work with waf\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Tools/Failsafe/Makefile" : {
      "ObjectId" : "f313a86e3d78d3802b37db5c8a8b8573f8534d8a",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Trivial makefile for building APM\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Tools/Hello/Makefile" : {
      "ObjectId" : "eb4da6c4e60d86da2aceb1b0605f097c4fcc788f",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Trivial makefile for building APM\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Tools/Linux_HAL_Essentials/devicetree/pxf/Makefile" : {
      "ObjectId" : "c4d0169b826e349d41d255ec5ae191ef4d12627d",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Tools/Linux_HAL_Essentials/pru/aiopru/Makefile" : {
      "ObjectId" : "593f1ab28c92d3a46fa2ab264edb668ff2cd6afa",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Tools/Linux_HAL_Essentials/pru/pwmpru/Makefile" : {
      "ObjectId" : "34eb10a74eabb952362a2f995aedced4d8f46dc6",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for PWM PRU program\n\n# It is assumed that the PRU compiler environment has been set\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -v3\t\t\t\tPRU version 3\n\n# --c99 \t\t\tC99 support\n\n# --gcc \t\t\tEnable GCC extensions\n\n# -O3\t\t\t\tOptimization level maximum\n\n# --printf_support=minimal \tMinimal printf\n\n# -ppd\t\t\t\tGenerate dependencies *.pp\n\n# -ppa\t\t\t\tContinue after generating deps\n\n# -DDEBUG\t\t\tEnable debug\n\n# CFLAGS= -v3 --c99 --gcc -O3 --printf_support=minimal -ppd -ppa -DDEBUG \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -cr \t\t\t\tLink using RAM auto init model (loader assisted)\n\n# -x\t\t\t\tReread libs until no unresolved symbols found\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include any generated deps\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Tools/Linux_HAL_Essentials/pru/rangefinderpru/Makefile" : {
      "ObjectId" : "847520204c3787740bc2e5f83697fbae930c4002",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Tools/Linux_HAL_Essentials/pru/rcinpru/Makefile" : {
      "ObjectId" : "d38c1ef2cad1a11ee7ec05e176ce9b469049fbf6",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for PWM PRU program\n\n# It is assumed that the PRU compiler environment has been set\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -v3\t\t\t\tPRU version 3\n\n# --c99 \t\t\tC99 support\n\n# --gcc \t\t\tEnable GCC extensions\n\n# -O3\t\t\t\tOptimization level maximum\n\n# --printf_support=minimal \tMinimal printf\n\n# -ppd\t\t\t\tGenerate dependencies *.pp\n\n# -ppa\t\t\t\tContinue after generating deps\n\n# -DDEBUG\t\t\tEnable debug\n\n# CFLAGS= -v3 --c99 --gcc -O3 --printf_support=minimal -ppd -ppa -DDEBUG \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -cr \t\t\t\tLink using RAM auto init model (loader assisted)\n\n# -x\t\t\t\tReread libs until no unresolved symbols found\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include any generated deps\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Tools/Replay/Makefile" : {
      "ObjectId" : "7207d6f796ae8e5bb9f225fd7c63da81f02fdd1d",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# this is meant to make existing build instructions work with waf\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Tools/ardupilotwaf/px4/cmake/configs/nuttx_aerofc-v1_apm.cmake" : {
      "ObjectId" : "0979505744b6b9925a3e255bdf3948713639efce",
      "LastModified" : "2017-03-24T01:06:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# replace stm32 tone_alarm with a dummy one\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Tools/ardupilotwaf/px4/cmake/configs/nuttx_px4fmu-common_apm.cmake" : {
      "ObjectId" : "a353ace7b87fdf4575815225fcceab798156d1d9",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Board support modules\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# System commands\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Library modules\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Tools/ardupilotwaf/px4/cmake/configs/nuttx_px4fmu-v1_apm.cmake" : {
      "ObjectId" : "df1cb61806b1c3f01d5d0dcbb02fcd453260e272",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tools/ardupilotwaf/px4/cmake/configs/nuttx_px4fmu-v2_apm.cmake" : {
      "ObjectId" : "b808fa70984abe300417ab68517c01e9dbff6c7c",
      "LastModified" : "2017-04-10T21:38:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tools/ardupilotwaf/px4/cmake/configs/nuttx_px4fmu-v3_apm.cmake" : {
      "ObjectId" : "57ecb0df6e2be70c9ad49cbd9dfe99b663792732",
      "LastModified" : "2017-04-10T21:38:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tools/ardupilotwaf/px4/cmake/configs/nuttx_px4fmu-v4_apm.cmake" : {
      "ObjectId" : "d52aed4be3ab9e32a206397a82af2944955275b3",
      "LastModified" : "2017-04-10T21:38:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/AP_AdvancedFailsafe/Failsafe_Board/Makefile" : {
      "ObjectId" : "8bf31e7de3cc928ddd6db2bb1e227398284b7dd5",
      "LastModified" : "2017-02-21T00:26:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Trivial makefile for building APM\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libraries/AP_HAL_Linux/examples/BusTest/Makefile" : {
      "ObjectId" : "f5daf25151f2b24dbf37777ad4d8ad3f4611980c",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "mk/PX4/Tools/gencpp/CMakeLists.txt" : {
      "ObjectId" : "a4964d1553a3ac6736375f55556b53232ea57590",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mk/PX4/Tools/gencpp/scripts/CMakeLists.txt" : {
      "ObjectId" : "004bb72a7a58285e35321cff600155f79ab0fdba",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mk/PX4/Tools/genmsg/CMakeLists.txt" : {
      "ObjectId" : "a259a059f5d20c091c40da9e03465b98799e97d4",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mk/PX4/Tools/genmsg/doc/Makefile" : {
      "ObjectId" : "9b27f15634fd3a453d03ecd6635e3a79d36885ea",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "mk/VRBRAIN/Tools/gencpp/CMakeLists.txt" : {
      "ObjectId" : "e6ff0cae1fd9e69a5772d98895e635214fd29f6e",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mk/VRBRAIN/Tools/gencpp/scripts/CMakeLists.txt" : {
      "ObjectId" : "90bfc6cb3442246599805c83f7ebf6cb179a8740",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mk/VRBRAIN/Tools/genmsg/CMakeLists.txt" : {
      "ObjectId" : "2b7b1bf88aa14b084cbe1192ecc68abb5bf2bc93",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mk/VRBRAIN/Tools/genmsg/doc/Makefile" : {
      "ObjectId" : "bd09ca577694407d2e49357fc3bb0559922937d7",
      "LastModified" : "2017-04-27T12:32:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 12,
    "MAKEFILE" : 22
  },
  "ElapsedTime" : 7583
}