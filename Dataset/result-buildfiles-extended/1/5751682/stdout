{
  "Repository" : "5751682",
  "Revision" : "HEAD",
  "ObjectId" : "cb4d1402559e645fb843affd221079f979c807d6",
  "CommitTime" : "2014-09-05T08:44:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b6711da67498c172b7d1a120d9437282ddcf9934",
      "LastModified" : "2014-08-27T08:17:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required packages for building on Debian Jessie:\n\n# libboost-all-dev\n\n# libssl-dev\n\n# libgtk2.0-dev\n\n# libfreetype6-dev\n\n# libreadline-dev\n\n# libdb++-dev\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set just these 2 configs to always produce release build with debug info enabled\n\n# Warning: it must appear before starting project definition\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build all windows projects with /EHsc, which will prevent the compiler from \n\n# translating structured exceptions into C++ exceptions (which would make\n\n# our crash reporter less useful)\n",
        "Line" : 17,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#Set to allow xp compatibility\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#looks like this flag can have different default on some machines.\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# remove ugliness\n",
        "Line" : 48,
        "CharPositionInLine" : 64
      },
      "6" : {
        "Text" : "# Let's configure binaries output directory (by default invictus-root/bin)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# right now we have to put it in a weird location for osx because that's \n\n# where jenkins wants it to be for packaging.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Warning this lib doesn't have an associated .cmake :-(\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Warning this lib doesn't have an associated .cmake :-(\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# put here all system libraries which have to be linked \n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#message(CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH})\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#This variable will be filled just for Win32 platform\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# On windows platform release & debug libraries have different names\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Warning this lib doesn't have an associated .cmake :-(\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Use dedicated prefix to find static versions of libraries \n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#Note: bitshares repo should be checked out under keyhotee dir or path here should be changed\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Construct an appropriate resource file\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Append files generated from git revision to the sources list\n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# add an icon to the win32 executable\n",
        "Line" : 473,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Some unknown diff between windows and unix, this is quick fix, leave for DanL to clean-up\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#apparently this is needed for Ubuntu (see commit from jefferylee), but it causes problems for windows (lib is brought in via upnpc-static on windows at least)\n",
        "Line" : 479,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Configure dependencies of keyhotee main application module\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Looks like multiple post build commands doesn't work correctly (last one overwrites previous defs)\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#Pass define to disable some GUI functionality (being in dev) only in release\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Let's configure different target names for release and debug builds.\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Use the Widgets module from Qt 5.\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#fc  miniupnpc\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Warning this is old Bitshares module\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Warning this is a bitshare_toolkit module\n\n#bts_blockchain\n\n#bts_wallet\n",
        "Line" : 557,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Since we would like to build KH against static versions of ICU, it is needed to specify them in\n\n# valid order (DT must be at the end)\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# without call FillQtDependentLibraries micro\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Warning this is old Bitshares module\n",
        "Line" : 570,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Warning this is a bitshare_toolkit module\n\n#bts_blockchain\n\n#bts_wallet\n",
        "Line" : 572,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Probably cmake has a bug and vcxproj generated for executable in Debug conf. has disabled debug info\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#Warning Looks like windows NSIS has some problem related to proper detecting target binary while installing it\n\n#and it is missing in the target package location, what leads bundle verification to fail.\n",
        "Line" : 593,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#  message(STATUS \"Preparing a copy for plugin ${plugin} (${plugin_name}) at location ${_loc}\")\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# copy the msvcrt files to the top-level directory instead of bin\n",
        "Line" : 637,
        "CharPositionInLine" : 48
      },
      "38" : {
        "Text" : "#message(\"Plugin ${plugin} is an ${plugin_classification} at location ${_loc}\")\n",
        "Line" : 645,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Create an empty qt.conf (similary to installation process) to avoid startup problems and looking for plugins dir.\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# override above\n",
        "Line" : 719,
        "CharPositionInLine" : 35
      },
      "41" : {
        "Text" : "# it seems like windows zip files usually don't have a single directory inside them, unix tgz frequently do\n",
        "Line" : 730,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Linux gets a .tgz\n",
        "Line" : 741,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 43
    },
    "CmakeModules/FindX11_XCB.cmake" : {
      "ObjectId" : "7611b088820475156284556be9d0ae77e4d39e73",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libX11-xcb\n\n# Once done this will define\n\n#\n\n# X11_XCB_FOUND - system has libX11-xcb\n\n# X11_XCB_LIBRARIES - Link these to use libX11-xcb\n\n# X11_XCB_INCLUDE_DIR - the libX11-xcb include dir\n\n# X11_XCB_DEFINITIONS - compiler switches required for using libX11-xcb\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2011 Fredrik HÃ¶glund <fredrik@kde.org>\n\n# Copyright (c) 2008 Helio Chissini de Castro, <helio@kde.org>\n\n# Copyright (c) 2007 Matthias Kretz, <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CmakeModules/FindXCB.cmake" : {
      "ObjectId" : "823d1678fa049c607586e0c43835c9e6d36ea982",
      "LastModified" : "2014-01-15T22:23:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find XCB on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   XCB_FOUND        - True if xcb is available\n\n#   XCB_LIBRARIES    - Link these to use xcb\n\n#   XCB_INCLUDE_DIRS - Include directory for xcb\n\n#   XCB_DEFINITIONS  - Compiler flags for using xcb\n\n#\n\n# In addition the following more fine grained variables will be defined:\n\n#\n\n#   XCB_XCB_FOUND        XCB_XCB_INCLUDE_DIR        XCB_XCB_LIBRARY\n\n#   XCB_UTIL_FOUND       XCB_UTIL_INCLUDE_DIR       XCB_UTIL_LIBRARY\n\n#   XCB_COMPOSITE_FOUND  XCB_COMPOSITE_INCLUDE_DIR  XCB_COMPOSITE_LIBRARY\n\n#   XCB_DAMAGE_FOUND     XCB_DAMAGE_INCLUDE_DIR     XCB_DAMAGE_LIBRARY\n\n#   XCB_XFIXES_FOUND     XCB_XFIXES_INCLUDE_DIR     XCB_XFIXES_LIBRARY\n\n#   XCB_RENDER_FOUND     XCB_RENDER_INCLUDE_DIR     XCB_RENDER_LIBRARY\n\n#   XCB_RANDR_FOUND      XCB_RANDR_INCLUDE_DIR      XCB_RANDR_LIBRARY\n\n#   XCB_SHAPE_FOUND      XCB_SHAPE_INCLUDE_DIR      XCB_SHAPE_LIBRARY\n\n#   XCB_DRI2_FOUND       XCB_DRI2_INCLUDE_DIR       XCB_DRI2_LIBRARY\n\n#   XCB_GLX_FOUND        XCB_GLX_INCLUDE_DIR        XCB_GLX_LIBRARY\n\n#   XCB_SHM_FOUND        XCB_SHM_INCLUDE_DIR        XCB_SHM_LIBRARY\n\n#   XCB_XV_FOUND         XCB_XV_INCLUDE_DIR         XCB_XV_LIBRARY\n\n#   XCB_SYNC_FOUND       XCB_SYNC_INCLUDE_DIR       XCB_SYNC_LIBRARY\n\n#   XCB_XTEST_FOUND      XCB_XTEST_INCLUDE_DIR      XCB_XTEST_LIBRARY\n\n#   XCB_ICCCM_FOUND      XCB_ICCCM_INCLUDE_DIR      XCB_ICCCM_LIBRARY\n\n#   XCB_EWMH_FOUND       XCB_EWMH_INCLUDE_DIR       XCB_EWMH_LIBRARY\n\n#   XCB_IMAGE_FOUND      XCB_IMAGE_INCLUDE_DIR      XCB_IMAGE_LIBRARY\n\n#   XCB_RENDERUTIL_FOUND XCB_RENDERUTIL_INCLUDE_DIR XCB_RENDERUTIL_LIBRARY\n\n#   XCB_KEYSYMS_FOUND    XCB_KEYSYMS_INCLUDE_DIR    XCB_KEYSYMS_LIBRARY\n\n#\n\n# Copyright (c) 2011 Fredrik HÃ¶glund <fredrik@kde.org>\n\n# Copyright (c) 2013 Martin GrÃ¤Ãlin <mgraesslin@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# iterate through the list of requested components, and check that we know them all.\n\n# If not, fail.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compatibility for old variable naming\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# compatibility for old variable naming\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "bitshares_toolkit/CMakeLists.txt" : {
      "ObjectId" : "21424b72f95d1bb3cc558e9b96411ebe8eef5806",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines BitShares library target.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set (ENABLE_INSTALLER 1)\n\n#set (USE_PCH 1)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#looks like this flag can have different default on some machines.\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Probably cmake has a bug and vcxproj generated for executable in Debug conf. has disabled debug info\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Apple AND Linux Options Here\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Apple Specific Options Here\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Linux Specific Options Here\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# force dynamic linking for all libraries\n",
        "Line" : 83,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# For Boost 1.53 on windows, coroutine was not in BOOST_LIBRARYDIR and do not need it to build,  but if boost versin >= 1.54, find coroutine otherwise will cause link errors\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DEPENDS ${WEB_WALLET_SOURCES}\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# override above\n",
        "Line" : 152,
        "CharPositionInLine" : 37
      },
      "11" : {
        "Text" : "# it seems like windows zip files usually don't have a single directory inside them, unix tgz frequently do\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Linux gets a .tgz\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "bitshares_toolkit/CMakeModules/FindBerkeleyDB.cmake" : {
      "ObjectId" : "6dcb3e9bc0c813ec2934a87ddec154089af23182",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the BerkeleyDB includes and library\r\n\n# Customizable variables:\r\n\n#   BDB_ROOT_DIR\r\n\n#     This variable points to the BerkeleyDB root directory. On Windows the\r\n\n#     library location typically will have to be provided explicitly using the\r\n\n#     -D command-line option. Alternatively, the DBROOTDIR environment variable\r\n\n#     can be set.\r\n\n#\r\n\n#   BDB_STATIC_LIBS\r\n\n#     Should be set to 1 if static version of libraries should be found. Defaults to 0 (shared libs).\r\n\n#\r\n\n# This module defines\r\n\n# BDB_INCLUDE_DIR, where to find db.h, etc.\r\n\n# BDB_LIBRARIES, the libraries needed to use BerkeleyDB.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On unix library in all versions have the same names.\r\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "bitshares_toolkit/CMakeModules/FindLineman.cmake" : {
      "ObjectId" : "f6f480daf5501de6cbc5ee77a96f09bf2f4cb9d5",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/CMakeModules/FindNodeJs.cmake" : {
      "ObjectId" : "3d6987010180414c7cd44111c32cca9a74ba5c49",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/CMakeModules/cotire.cmake" : {
      "ObjectId" : "ddfe4bfdbdfd8d274f4b62c3e4128ae9d40df6e6",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2014 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we need the CMake variables CMAKE_SCRIPT_MODE_FILE and CMAKE_ARGV available since 2.8.5\n\n# we need APPEND_STRING option for set_property available since 2.8.6\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# use CMake's predefined compiler version variable (available since CMake 2.8.8)\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 59,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# assume GCC like command line interface\n",
        "Line" : 66,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 155,
        "CharPositionInLine" : 7
      },
      "8" : {
        "Text" : "# option with separate argument\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# remember option\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# option with joined argument\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# flush remembered option\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 286,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 309,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# add option from CMake target type variable\n",
        "Line" : 318,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# handle POSITION_INDEPENDENT_CODE property introduced with CMake 2.8.9 if policy CMP0018 is turned on\n",
        "Line" : 321,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# default to old behavior\n",
        "Line" : 324,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# NEW behavior: honor the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 331,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# OLD behavior or policy not set: use the value of CMAKE_SHARED_LIBRARY_<Lang>_FLAGS\n",
        "Line" : 341,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# flags variable for module library uses different name SHARED_MODULE\n\n# (e.g., CMAKE_SHARED_MODULE_C_FLAGS)\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# add_definitions may have been used to add flags to the compiler command\n",
        "Line" : 353,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# add target compile options\n",
        "Line" : 360,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# platform specific flags\n",
        "Line" : 377,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# default include dirs\n",
        "Line" : 409,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 414,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# target include directories\n",
        "Line" : 421,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# mimic CMake SystemTools::MakeCindentifier behavior\n",
        "Line" : 461,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 489,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# target export define symbol\n",
        "Line" : 493,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 498,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# target compile definitions\n",
        "Line" : 507,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 516,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 532,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 757,
        "CharPositionInLine" : 3
      },
      "34" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 765,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 768,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# header is outside\n",
        "Line" : 782,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 793,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# check header file extension\n",
        "Line" : 803,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 816,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 821,
        "CharPositionInLine" : 3
      },
      "41" : {
        "Text" : "# GCC like output\n",
        "Line" : 830,
        "CharPositionInLine" : 3
      },
      "42" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 846,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# canonize slashes\n",
        "Line" : 849,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 851,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# then separate lines\n",
        "Line" : 853,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 856,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 874,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# update stack\n",
        "Line" : 884,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 900,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 902,
        "CharPositionInLine" : 5
      },
      "51" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 909,
        "CharPositionInLine" : 5
      },
      "52" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 918,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 930,
        "CharPositionInLine" : 5
      },
      "54" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 965,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 984,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1159,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1192,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# append to list\n",
        "Line" : 1201,
        "CharPositionInLine" : 3
      },
      "59" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1204,
        "CharPositionInLine" : 3
      },
      "60" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1208,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# append to list\n",
        "Line" : 1213,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1219,
        "CharPositionInLine" : 3
      },
      "63" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n",
        "Line" : 1226,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# append to list\n",
        "Line" : 1230,
        "CharPositionInLine" : 3
      },
      "65" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1233,
        "CharPositionInLine" : 3
      },
      "66" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1238,
        "CharPositionInLine" : 3
      },
      "67" : {
        "Text" : "# append to list\n",
        "Line" : 1247,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1250,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1254,
        "CharPositionInLine" : 3
      },
      "70" : {
        "Text" : "# append to list\n",
        "Line" : 1259,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1265,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n",
        "Line" : 1284,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# append to list\n",
        "Line" : 1294,
        "CharPositionInLine" : 3
      },
      "74" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1298,
        "CharPositionInLine" : 3
      },
      "75" : {
        "Text" : "# GCC / Clang options used\n\n# -w disable all warnings\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n",
        "Line" : 1302,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# append to list\n",
        "Line" : 1310,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1313,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1321,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# append to list\n",
        "Line" : 1333,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1340,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1347,
        "CharPositionInLine" : 3
      },
      "82" : {
        "Text" : "# append to list\n",
        "Line" : 1358,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1367,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n",
        "Line" : 1384,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# append to list\n",
        "Line" : 1391,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1394,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1398,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# append to list\n",
        "Line" : 1400,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1403,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n",
        "Line" : 1408,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# append to list\n",
        "Line" : 1412,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1415,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n",
        "Line" : 1419,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# append to list\n",
        "Line" : 1425,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1428,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n\n# ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1432,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# append to list\n",
        "Line" : 1435,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1438,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1445,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# append to list\n",
        "Line" : 1453,
        "CharPositionInLine" : 5
      },
      "101" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1459,
        "CharPositionInLine" : 5
      },
      "102" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1466,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# append to list\n",
        "Line" : 1468,
        "CharPositionInLine" : 5
      },
      "104" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1471,
        "CharPositionInLine" : 5
      },
      "105" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1476,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# append to list\n",
        "Line" : 1485,
        "CharPositionInLine" : 5
      },
      "107" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1491,
        "CharPositionInLine" : 5
      },
      "108" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1498,
        "CharPositionInLine" : 4
      },
      "109" : {
        "Text" : "# append to list\n",
        "Line" : 1500,
        "CharPositionInLine" : 5
      },
      "110" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1503,
        "CharPositionInLine" : 5
      },
      "111" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1540,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1553,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1557,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1566,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1569,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1588,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1656,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1667,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1670,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1731,
        "CharPositionInLine" : 4
      },
      "121" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1736,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 1739,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1742,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 1745,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 1777,
        "CharPositionInLine" : 1
      },
      "126" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 1780,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 1785,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 1801,
        "CharPositionInLine" : 1
      },
      "129" : {
        "Text" : "# Clang raises a fatal error if a file is not found during preprocessing\n\n# thus we depend on target's generated source files for prefix header generation\n",
        "Line" : 1805,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 1824,
        "CharPositionInLine" : 1
      },
      "131" : {
        "Text" : "# remove COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 1850,
        "CharPositionInLine" : 1
      },
      "132" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the first source file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 1869,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# make first source file depend on prefix header\n",
        "Line" : 1882,
        "CharPositionInLine" : 3
      },
      "134" : {
        "Text" : "# mark first source file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 1884,
        "CharPositionInLine" : 3
      },
      "135" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 1888,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the first source file\n\n# the first source file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 1911,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 1915,
        "CharPositionInLine" : 3
      },
      "138" : {
        "Text" : "# make source files depend on precompiled header\n",
        "Line" : 1924,
        "CharPositionInLine" : 3
      },
      "139" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 1929,
        "CharPositionInLine" : 3
      },
      "140" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 1937,
        "CharPositionInLine" : 3
      },
      "141" : {
        "Text" : "# make source files depend on precompiled header\n",
        "Line" : 1940,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 1947,
        "CharPositionInLine" : 1
      },
      "143" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 1954,
        "CharPositionInLine" : 1
      },
      "144" : {
        "Text" : "# make source files depend on prefix header\n",
        "Line" : 1956,
        "CharPositionInLine" : 1
      },
      "145" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n\n# if necessary, we also generate a single prefix header which includes all language specific prefix headers\n",
        "Line" : 2019,
        "CharPositionInLine" : 2
      },
      "146" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2043,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2047,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2051,
        "CharPositionInLine" : 3
      },
      "149" : {
        "Text" : "# set up compiled unity source dependencies\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2073,
        "CharPositionInLine" : 2
      },
      "150" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2082,
        "CharPositionInLine" : 3
      },
      "151" : {
        "Text" : "# create a joint unity file from all unity file segments\n",
        "Line" : 2100,
        "CharPositionInLine" : 2
      },
      "152" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2303,
        "CharPositionInLine" : 3
      },
      "153" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2307,
        "CharPositionInLine" : 3
      },
      "154" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2321,
        "CharPositionInLine" : 3
      },
      "155" : {
        "Text" : "# use all available cores\n",
        "Line" : 2335,
        "CharPositionInLine" : 3
      },
      "156" : {
        "Text" : "# a unity source segment must not contain less than COTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES files\n",
        "Line" : 2340,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2365,
        "CharPositionInLine" : 1
      },
      "158" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2381,
        "CharPositionInLine" : 2
      },
      "159" : {
        "Text" : "# user provided prefix header must be included\n",
        "Line" : 2402,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2407,
        "CharPositionInLine" : 1
      },
      "161" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2433,
        "CharPositionInLine" : 2
      },
      "162" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2438,
        "CharPositionInLine" : 4
      },
      "163" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2453,
        "CharPositionInLine" : 2
      },
      "164" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2463,
        "CharPositionInLine" : 1
      },
      "165" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2473,
        "CharPositionInLine" : 1
      },
      "166" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2479,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# if cotire is applied to a target which has not been added in the current source dir,\n\n# non-existing files cannot be referenced from the unity build target (this is a CMake restriction)\n",
        "Line" : 2487,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2503,
        "CharPositionInLine" : 3
      },
      "169" : {
        "Text" : "# generate unity target\n",
        "Line" : 2510,
        "CharPositionInLine" : 1
      },
      "170" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2520,
        "CharPositionInLine" : 1
      },
      "171" : {
        "Text" : "# copy output name\n",
        "Line" : 2549,
        "CharPositionInLine" : 1
      },
      "172" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2556,
        "CharPositionInLine" : 1
      },
      "173" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2565,
        "CharPositionInLine" : 1
      },
      "174" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2570,
        "CharPositionInLine" : 1
      },
      "175" : {
        "Text" : "# copy Qt stuff\n",
        "Line" : 2580,
        "CharPositionInLine" : 1
      },
      "176" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2583,
        "CharPositionInLine" : 1
      },
      "177" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 2586,
        "CharPositionInLine" : 1
      },
      "178" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 2590,
        "CharPositionInLine" : 1
      },
      "179" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2597,
        "CharPositionInLine" : 1
      },
      "180" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2602,
        "CharPositionInLine" : 1
      },
      "181" : {
        "Text" : "# trivial checks\n",
        "Line" : 2638,
        "CharPositionInLine" : 1
      },
      "182" : {
        "Text" : "# resolve alias\n",
        "Line" : 2644,
        "CharPositionInLine" : 1
      },
      "183" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 2652,
        "CharPositionInLine" : 1
      },
      "184" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 2668,
        "CharPositionInLine" : 1
      },
      "185" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 2747,
        "CharPositionInLine" : 1
      },
      "186" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 2833,
        "CharPositionInLine" : 1
      },
      "187" : {
        "Text" : "# include target script if available\n",
        "Line" : 2845,
        "CharPositionInLine" : 1
      },
      "188" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 2847,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# for MSVC, compiler IDs may not always be set correctly\n",
        "Line" : 2856,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 2870,
        "CharPositionInLine" : 1
      },
      "191" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 2973,
        "CharPositionInLine" : 1
      },
      "192" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3013,
        "CharPositionInLine" : 3
      },
      "193" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3054,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3061,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3114,
        "CharPositionInLine" : 1
      },
      "196" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3179,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3333,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 198
    },
    "bitshares_toolkit/libraries/CMakeLists.txt" : {
      "ObjectId" : "25c58c3efde87ae14a3123b734ff022be90c699d",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory( kid )\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory( btsx )\n\n#add_subdirectory( dns )\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bitshares_toolkit/libraries/api/CMakeLists.txt" : {
      "ObjectId" : "8c00eb5470bdd3951730c5cb5823310fba380b96",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/bitcoin/CMakeLists.txt" : {
      "ObjectId" : "6cbc6de87991cc34df91926fedec4a040c773b41",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This library depends upon BDB, if BDB is not found then it compiles out support for BDB \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bitshares_toolkit/libraries/blockchain/CMakeLists.txt" : {
      "ObjectId" : "056abbe5b6da10e6e246d75bec11cc560d056506",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################################\n\n# Magic to get the genesis.json converted to a .cpp file and compiled into the bts_client library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################################################\n\n# Regular stuff for the bts_client library\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bitshares_toolkit/libraries/btsx/CMakeLists.txt" : {
      "ObjectId" : "fd6a7f18ac811b3442e03e5e26041075d1641ee3",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/cli/CMakeLists.txt" : {
      "ObjectId" : "fe05db6f585f53b5038e110a9701265d0ca73b32",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/cli/CMakeModules/FindReadline.cmake" : {
      "ObjectId" : "745cfe583ad729b30e096da44566685602c708bc",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find readline include dirs and libraries \n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Readline)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Readline_ROOT_DIR         Set this variable to the root installation of\n\n#                            readline if the module has problems finding the\n\n#                            proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  READLINE_FOUND            System has readline, include and lib dirs found\n\n#  Readline_INCLUDE_DIR      The readline include directories. \n\n#  Readline_LIBRARY          The readline library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bitshares_toolkit/libraries/client/CMakeLists.txt" : {
      "ObjectId" : "55e79a4b7765467b5fd098bb3b319109cba9e090",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/db/CMakeLists.txt" : {
      "ObjectId" : "10c3c2451e8fca87ee4086a339062eb760391389",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/dns/CMakeLists.txt" : {
      "ObjectId" : "2459f87e80c226f087155494044bb5603659d514",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/dns/p2p/CMakeLists.txt" : {
      "ObjectId" : "bc02e44a3fc743d71ab27341df1a27cf457882d8",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/keyhotee/CMakeLists.txt" : {
      "ObjectId" : "fc0f4d06fbe072df166f5a75ceefbe82ce174ac0",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/kid/CMakeLists.txt" : {
      "ObjectId" : "5757e2dca98c823993ec685de1de5782f142633c",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/net/CMakeLists.txt" : {
      "ObjectId" : "388e87e870353b4ef16827b5c211e4c66fd5e1f2",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# currently depends on client for definitions, remove this\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Looks like bts_net and bts_rpc also have cycle deps\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# later, move upnp include into target_include_directories for upnp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "bitshares_toolkit/libraries/rpc/CMakeLists.txt" : {
      "ObjectId" : "95078fc1c36cc9a9c3f6b77bb19c99f05edad135",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/utilities/CMakeLists.txt" : {
      "ObjectId" : "42ecdf3453b82295c5e7c35af8363a13e16c211d",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/libraries/wallet/CMakeLists.txt" : {
      "ObjectId" : "7f9d7963afc64362af1bcb55708eb23ea9317211",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/programs/CMakeLists.txt" : {
      "ObjectId" : "d8baa6522d940f5f36153612093c21354f0a88de",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory( dns )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory( kids )\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the following includes QT Wallet into the build (optional)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "bitshares_toolkit/programs/client/CMakeLists.txt" : {
      "ObjectId" : "f2c7f904ce77aa77750af1c7a7cdefb04092a523",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/programs/dns/CMakeLists.txt" : {
      "ObjectId" : "9be7b0060aac3e9023594516c0a4a3e285a55243",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/programs/kids/CMakeLists.txt" : {
      "ObjectId" : "9e9b0f4097753081fd37b9bce0db4cd3ce6331b6",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/programs/utils/CMakeLists.txt" : {
      "ObjectId" : "17d41037da16a2bbef92964250019f5d2030e000",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/tests/CMakeLists.txt" : {
      "ObjectId" : "c9a2b2d6232852121102d995f1ad196e68df4c2b",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable( wallet_tests wallet_tests.cpp )\n\n#target_link_libraries( wallet_tests bts_client bts_cli bts_wallet bts_blockchain bts_net bitcoin fc ${BOOST_LIBRARIES} ${OPENSSL_LIBRARIES} ${PLATFORM_SPECIFIC_LIBS} ${crypto_library}  ${rt_library} )\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# dev tests disabled because uncommitted dev_fixture.hpp causing build errors\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# force dynamic linking for all libraries\n",
        "Line" : 28,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "#if( false )\n\n#   add_executable( simple_net_test_client simple_net_test_client.cpp )\n\n#   if( WIN32 )\n\n#       target_compile_definitions(simple_net_test_client PUBLIC BOOST_ALL_NO_LIB BOOST_ALL_DYN_LINK)\n\n#   endif (WIN32)\n\n#   target_link_libraries( simple_net_test_client bts_client bts_net bts_blockchain fc ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES} ${crypto_library})\n\n#endif (false )\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#   target_compile_definitions(bitshares_client_tests PUBLIC BOOST_ALL_NO_LIB BOOST_ALL_DYN_LINK)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "bitshares_toolkit/tests/bitcoin/CMakeLists.txt" : {
      "ObjectId" : "3a801d4d396764731dc02e102f0ad87646e616c8",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/tests/client_rpc_tests/CMakeLists.txt" : {
      "ObjectId" : "27d0d5f7b7898ac7cb02b29531a2cccb520a4441",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bitshares_toolkit/tests/dns/CMakeLists.txt" : {
      "ObjectId" : "a99af89a03eafd01d34dd58bcdd3e8b4d183540e",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "miner/CMakeLists.txt" : {
      "ObjectId" : "f33d4929a8a1a88fa03e9dc63124137c5c2e74df",
      "LastModified" : "2014-08-25T08:51:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 35
  },
  "ElapsedTime" : 1372
}