{
  "Repository" : "31515051",
  "Revision" : "HEAD",
  "ObjectId" : "8857ca9502cd481ed53355b1daed65995603b151",
  "CommitTime" : "2019-04-17T18:04:43Z",
  "Files" : {
    "atlas/ihmc_gazebo_catkin_ws/src/ihmc_gazebo/CMakeLists.txt" : {
      "ObjectId" : "f2246f256940b4a9a5c39cbc18bdf3b2c0bd71e1",
      "LastModified" : "2017-09-07T21:06:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Load catkin and all dependencies required for this package\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Depend on system install of Gazebo\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"Gazebo includes: ${GAZEBO_INCLUDE_DIRS}\")\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_library(${PROJECT_NAME} src/.cpp)\n\n#target_link_libraries(${PROJECT_NAME} ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "atlas/ihmc_gazebo_catkin_ws/src/ihmc_gazebo/cmake/Modules/Finddrcsim.cmake" : {
      "ObjectId" : "0fb1237a86f50b2c0f7b3220f0d11d25bb8b7606",
      "LastModified" : "2017-09-07T21:06:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/ihmc_gazebo_catkin_ws/src/ihmc_gazebo/cmake/rospack.cmake" : {
      "ObjectId" : "78727e3cacde967979b1f30b2448d542b788945f",
      "LastModified" : "2017-09-07T21:06:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check that our cached location of rospack is valid.  It can be invalid\n\n# if rospack has moved since last time we ran, #1154.  If it's invalid,\n\n# search again.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Only look in PATH for rospack, #3831\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#set(_rospack_${_varname} \"\")\n\n#set(${_prefix}_${_varname} \"\" CACHE INTERNAL \"\")\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# We don't cache results that contain newlines, because\n\n# they make CMake's cache unhappy. This check should only affect calls\n\n# to `rospack plugins`, which we don't need to cache.\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get the include dirs\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#message(\"${pkgname} include dirs: ${${_prefix}_INCLUDE_DIRS}\")\n\n#set(${_prefix}_INCLUDE_DIRS ${${_prefix}_INCLUDE_DIRS} CACHE INTERNAL \"\")\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Get the other cflags\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#message(\"${pkgname} other cflags: ${${_prefix}_CFLAGS_OTHER}\")\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Get the lib dirs\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#message(\"${pkgname} library dirs: ${${_prefix}_LIBRARY_DIRS}\")\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Get the libs\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#\n\n# The following code removes duplicate libraries from the link line,\n\n# saving only the last one.\n\n#\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Get the other lflags\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#message(\"${pkgname} other ldflags: ${${_prefix}_LDFLAGS_OTHER}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "atlas/ihmc_gazebo_catkin_ws/src/ihmc_gazebo/gazebo_plugin/CMakeLists.txt" : {
      "ObjectId" : "9c43bb84ff67e82591020b9faa0589008ae675fa",
      "LastModified" : "2017-09-07T21:06:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/atlas_description/CMakeLists.txt" : {
      "ObjectId" : "bee4b7db986f2b4c92d752e069fbcf6e1801734f",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install below for gazebo to find this model through GAZEBO_MODEL_PATH.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In addition to the usual installation, which happens above, we'll\n\n# also do some special processing and installation to provide standalone\n\n# versions of the models that can be used without ROS (or even Gazebo).\n\n# \"special processing\" means:\n\n#   - strip out ros plugins\n\n#   - ???\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy all the meshes and materials into drcsim_standalone_models/atlas_description\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "atlas/src/main/resources/models/GFE/atlas_description/materials/CMakeLists.txt" : {
      "ObjectId" : "240c30121b437834759fe97d85f2e6bf276519de",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/atlas_description/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "474286af372890b080ea6651df8f8b4b7e9a577a",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/atlas_description/meshes_unplugged/CMakeLists.txt" : {
      "ObjectId" : "474286af372890b080ea6651df8f8b4b7e9a577a",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/multisense_sl_description/CMakeLists.txt" : {
      "ObjectId" : "866e6e37e14ffec19690fc88aca3599cfa2cde38",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install below for gazebo to find this model through GAZEBO_MODEL_PATH.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In addition to the usual installation, which happens above, we'll\n\n# now do some special processing and installation to provide standalone\n\n# versions of the models that can be used without ROS (or even Gazebo).\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy all the meshes and materials into standalone_models/atlas\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "atlas/src/main/resources/models/GFE/multisense_sl_description/materials/CMakeLists.txt" : {
      "ObjectId" : "240c30121b437834759fe97d85f2e6bf276519de",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/multisense_sl_description/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "63c116c5cdb697b21961e1f3f494a034e5ab94e7",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/multisense_sl_description/meshes/CMakeLists.txt" : {
      "ObjectId" : "fe1a2e729a62cb942cffd747bc72ad2f4f4b5092",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/robotiq_hand_description/CMakeLists.txt" : {
      "ObjectId" : "bd8db3d11a37d6ee82a494495bebfd56deedfe28",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Used by launch\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install below for gazebo to find this model through GAZEBO_MODEL_PATH.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In addition to the usual installation, which happens above, we'll\n\n# now do some special processing and installation to provide standalone\n\n# versions of the models that can be used without ROS (or even Gazebo).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy all the meshes and materials into standalone_models/robotiq_hand_description\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "atlas/src/main/resources/models/GFE/robotiq_hand_description/launch/CMakeLists.txt" : {
      "ObjectId" : "62be6e8bda31340f34633d1e07f94f4980a4e1f7",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas/src/main/resources/models/GFE/robotiq_hand_description/meshes/CMakeLists.txt" : {
      "ObjectId" : "66e93ace498da096a0b8f120e28e1903a61cbcc5",
      "LastModified" : "2017-09-08T20:53:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example-simulations/src/main/resources/models/rhino_beetle_description/CMakeLists.txt" : {
      "ObjectId" : "0a392285c2a81143dd3e46715de5b5cf29580b46",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-avatar-interfaces/ModelGenerator/atlas_description/CMakeLists.txt" : {
      "ObjectId" : "bee4b7db986f2b4c92d752e069fbcf6e1801734f",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install below for gazebo to find this model through GAZEBO_MODEL_PATH.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In addition to the usual installation, which happens above, we'll\n\n# also do some special processing and installation to provide standalone\n\n# versions of the models that can be used without ROS (or even Gazebo).\n\n# \"special processing\" means:\n\n#   - strip out ros plugins\n\n#   - ???\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy all the meshes and materials into drcsim_standalone_models/atlas_description\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-avatar-interfaces/ModelGenerator/atlas_description/materials/CMakeLists.txt" : {
      "ObjectId" : "240c30121b437834759fe97d85f2e6bf276519de",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/atlas_description/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "4309842248da0e17c5f13df9ea20923ae53de54e",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/atlas_description/meshes/CMakeLists.txt" : {
      "ObjectId" : "71268ecb86c7749974f5b7d36b9986dae07e30d8",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/ihmc_robotics/CMakeLists.txt" : {
      "ObjectId" : "f8f1c9ccad793e5385c2eb83ffd7ed7b15c5b343",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n\n#set(ROS_BUILD_TYPE RelWithDebInfo)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set the default path for built executables to the \"bin\" directory\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set the default path for built libraries to the \"lib\" directory\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#uncomment if you have defined messages\n\n#rosbuild_genmsg()\n\n#uncomment if you have defined services\n\n#rosbuild_gensrv()\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#common commands for building c++ executables and libraries\n\n#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)\n\n#target_link_libraries(${PROJECT_NAME} another_library)\n\n#rosbuild_add_boost_directories()\n\n#rosbuild_link_boost(${PROJECT_NAME} thread)\n\n#rosbuild_add_executable(example examples/example.cpp)\n\n#target_link_libraries(example ${PROJECT_NAME})\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ihmc-avatar-interfaces/ModelGenerator/ihmc_robotiq/CMakeLists.txt" : {
      "ObjectId" : "c5938a3b4fff8bea835458cf5cfe6ad1a797610a",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# http://ros.org/doc/groovy/api/catkin/html/user_guide/supposed.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-avatar-interfaces/ModelGenerator/irobot_hand_description/CMakeLists.txt" : {
      "ObjectId" : "f0cd1e67d082446606178e10534fac2a6321751e",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Used by launch\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install below for gazebo to find this model through GAZEBO_MODEL_PATH.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In addition to the usual installation, which happens above, we'll\n\n# now do some special processing and installation to provide standalone\n\n# versions of the models that can be used without ROS (or even Gazebo).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy all the meshes and materials into standalone_models/atlas\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ihmc-avatar-interfaces/ModelGenerator/irobot_hand_description/launch/CMakeLists.txt" : {
      "ObjectId" : "62be6e8bda31340f34633d1e07f94f4980a4e1f7",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/irobot_hand_description/meshes/CMakeLists.txt" : {
      "ObjectId" : "a471e77b56dc3f53347711abc4eddb1e42ea3ab5",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/multisense_sl_description/CMakeLists.txt" : {
      "ObjectId" : "866e6e37e14ffec19690fc88aca3599cfa2cde38",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install below for gazebo to find this model through GAZEBO_MODEL_PATH.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In addition to the usual installation, which happens above, we'll\n\n# now do some special processing and installation to provide standalone\n\n# versions of the models that can be used without ROS (or even Gazebo).\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copy all the meshes and materials into standalone_models/atlas\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-avatar-interfaces/ModelGenerator/multisense_sl_description/materials/CMakeLists.txt" : {
      "ObjectId" : "240c30121b437834759fe97d85f2e6bf276519de",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/multisense_sl_description/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "63c116c5cdb697b21961e1f3f494a034e5ab94e7",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/multisense_sl_description/meshes/CMakeLists.txt" : {
      "ObjectId" : "fe1a2e729a62cb942cffd747bc72ad2f4f4b5092",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/robotiq_hand_description/CMakeLists.txt" : {
      "ObjectId" : "bd8db3d11a37d6ee82a494495bebfd56deedfe28",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Used by launch\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install below for gazebo to find this model through GAZEBO_MODEL_PATH.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In addition to the usual installation, which happens above, we'll\n\n# now do some special processing and installation to provide standalone\n\n# versions of the models that can be used without ROS (or even Gazebo).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy all the meshes and materials into standalone_models/robotiq_hand_description\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ihmc-avatar-interfaces/ModelGenerator/robotiq_hand_description/launch/CMakeLists.txt" : {
      "ObjectId" : "62be6e8bda31340f34633d1e07f94f4980a4e1f7",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-avatar-interfaces/ModelGenerator/robotiq_hand_description/meshes/CMakeLists.txt" : {
      "ObjectId" : "66e93ace498da096a0b8f120e28e1903a61cbcc5",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-common-walking-control-modules/CMakeLists.txt" : {
      "ObjectId" : "cc7242386142d3a015f44fdf00d9f79bc4e35f7c",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Compiles with -Os when using gcc, as recommended by http://cvxgen.com/speed.html\n\n#set(CMAKE_BUILD_TYPE MinSizeRel)\n\n#set(CMAKE_BUILD_TYPE Release)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-common-walking-control-modules/csrc/ActiveSetQP/CMakeLists.txt" : {
      "ObjectId" : "4def16ae6873cf5cc76996ad2cddf45cf2bb4a32",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# how http://www.bogotobogo.com/cplusplus/eclipse_CDT_JNI_MinGW_64bit.php\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(POD_NAME ActiveSetQP)\n\n#include(pods.cmake)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#pods_find_pkg_config(eigen3)\n\n#if (eigen3_FOUND)\n\n#\tmessage(\"found eigen 3\")\n\n#\tpods_use_pkg_config_includes( eigen3 )\n\n#endif()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#pods_use_pkg_config_packages(fastQPmex eigen3)\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "ihmc-common-walking-control-modules/csrc/ActiveSetQP/JavaEigenTest/Makefile" : {
      "ObjectId" : "31d86d1705f63debe8d2cdd21bcfb697254fcb04",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#javah -cp ${CP} Test\n\n#icpc -no-use-clang-env -cxxlib=/usr/local -gxx-name=g++-4.9  -O3 -fPIC -I /System/Library/Frameworks/JavaVM.framework/Versions/A/Headers `pkg-config --cflags eigen3`  -dynamiclib  Test.cpp -o libTest.jnilib\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "ihmc-common-walking-control-modules/csrc/ActiveSetQP/mex.cmake" : {
      "ObjectId" : "bf92150d0eb3b9b29a89af74e3efb2f38dce0be0",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is borrowed from https://github.com/RobotLocomotion/drake-distro.git\n\n# Macros to handle compilation of MATLAB mex files.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cmake_minimum_required(VERSION 2.8 FATAL_ERROR)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# usage: get_mex_option(option [, option_name])\n\n# writes MEX_${option_name} \n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# first line containing ${option}\n",
        "Line" : 16,
        "CharPositionInLine" : 69
      },
      "4" : {
        "Text" : "# replace entire string with capturing group (after = )\n",
        "Line" : 18,
        "CharPositionInLine" : 67
      },
      "5" : {
        "Text" : "# message(STATUS \"MEX_${option_name} = ${svalue}\")\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# writes MEX_${afterstring}_ARGUMENTS \n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# everything starting with afterstring\n",
        "Line" : 32,
        "CharPositionInLine" : 82
      },
      "8" : {
        "Text" : "# first line containing arguments\n",
        "Line" : 34,
        "CharPositionInLine" : 88
      },
      "9" : {
        "Text" : "# replace entire string with capturing group (after =)\n",
        "Line" : 36,
        "CharPositionInLine" : 71
      },
      "10" : {
        "Text" : "# message(STATUS \"${arguments_name} = ${svalue}\")\n",
        "Line" : 39,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# sets the variables: MATLAB_ROOT, MEX, MEX_EXT\n\n#    as well as all of the mexopts\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# matlab -n is not supported on windows (asked matlab for a work-around)\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#  not supporting fortran yet below, so might as well comment these out\n\n#  get_mex_option(FC)\n\n#  get_mex_option(FFLAGS)\n\n#  get_mex_option(FDEBUGFLAGS)\n\n#  get_mex_option(FOPTIMFLAGS)\n\n#  get_mex_option(FLIBS)\n\n#  get_mex_arguments(FC)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  note: skipping LDCXX (and just always use LD)\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# useage:  add_mex(target source1 source2 [SHARED,EXECUTABLE]) \n\n# note: builds the mex file inplace (not into some build directory)\n\n# if SHARED is passed in, then it doesn't expect a mexFunction symbol to be defined, and compiles it to e.g., libtarget.so, for eventual linking against another mex file\n\n# if EXECUTABLE is passed in, then it adds an executable target, which is linked against the appropriate matlab libraries.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# todo error if CMAKE_BUILD_TYPE is not Debug or Release\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# set up compiler/linker options\n\n# NOTE: due to a CMAKE quirk, the compiler flags for each build type\n\n# need to be set via the global variables, while the linker flags\n\n# need to be set using set_target_properties\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# backup global props\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# set global props\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#  find_program (CMAKE_CXX_COMPILER ${MEX_CXX})\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# restore global props\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# see note below\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# note: the -ldl here might be overkill?  so far only needed it for drake_debug_mex.  (but it has to come later in the compiler arguments, too, in order to work.\n",
        "Line" : 209,
        "CharPositionInLine" : 56
      },
      "24" : {
        "Text" : "#      LINK_FLAGS \"${MEX_LDFLAGS} ${MEX_LD_ARGUMENTS}\" # -Wl,-rpath ${CMAKE_INSTALL_PREFIX}/lib\"  \n\n#      LINK_FLAGS_DEBUG\t\"${MEX_LDDEBUGFLAGS}\"\n\n#      LINK_FLAGS_RELEASE\t\"${MEX_LDOPTIMFLAGS}\"\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# note: on ubuntu, gcc did not like the MEX_CLIBS coming along with LINK_FLAGS (it only works if they appear after the input files).  this is a nasty trick that I found online\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# -Wl,-rpath ${CMAKE_INSTALL_PREFIX}/lib\"  \n",
        "Line" : 233,
        "CharPositionInLine" : 54
      },
      "27" : {
        "Text" : "# todo: add CLIBS or CXXLIBS to LINK_FLAGS selectively based in if it's a c or cxx target (always added CXX above)\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "## calls compilers with --version option and checks the output \n\n# calls compilers with -dumpversion and checks the output\n\n# (because it appears that ccache messes with the --version output)\n\n# returns TRUE if the strings match or FALSE if they don't.  \n\n#   (note: you can use  if (outvar) to test )\n\n# this seems to be a more robust and less complex method than trying to call xcrun -find, readlink to follow symlinks, etc.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# NOTE:  would like to check LD also, but it appears to be difficult with cmake  (there is not explicit linker executable variable, only the make rule), and  even my mex code assumes that LD==LDCXX for simplicity.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "ihmc-common-walking-control-modules/csrc/ActiveSetQP/pods.cmake" : {
      "ObjectId" : "b13c3f158e5aaae47514dc7a3235fc515955982c",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macros to simplify compliance with the pods build policies.\n\n#\n\n# To enable the macros, add the following lines to CMakeLists.txt:\n\n#   set(POD_NAME <pod-name>)\n\n#   include(cmake/pods.cmake)\n\n#\n\n# If POD_NAME is not set, then the CMake source directory is used as POD_NAME\n\n#\n\n# Next, any of the following macros can be used.  See the individual macro\n\n# definitions in this file for individual documentation.\n\n#\n\n# General\n\n#   pods_find_pkg_config(...)\n\n#   pods_install_pkg_config_file(...)\n\n#   pods_install_bash_setup(...)\n\n#   get_relative_path(from to)\n\n#\n\n# C/C++\n\n#   pods_install_headers(...)\n\n#   pods_install_libraries(...)\n\n#   pods_install_executables(...)\n\n#\n\n#   pods_use_pkg_config_packages(...)\n\n#\n\n# Python\n\n#   pods_install_python_packages(...)\n\n#   pods_install_python_script(...)\n\n#\n\n# Java\n\n#   pods_use_pkg_config_classpath(...)\n\n#\n\n# ----\n\n# File: pods.cmake\n\n# Distributed with pods version: 12.11.14\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  find_package(PythonInterp)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PythonInterp finds a symlink on cygwin, which then fails in the execute process below\n",
        "Line" : 39,
        "CharPositionInLine" : 47
      },
      "3" : {
        "Text" : "#  message(from=${from})\n\n#  message(to=${to})\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# pods_install_headers(<header1.h> ... DESTINATION <subdir_name>)\n\n# \n\n# Install a (list) of header files.\n\n#\n\n# Header files will all be installed to include/<subdir_name>\n\n#\n\n# example:\n\n#   add_library(perception detector.h sensor.h)\n\n#   pods_install_headers(detector.h sensor.h DESTINATION perception)\n\n#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#copy the headers to the INCLUDE_OUTPUT_PATH (${CMAKE_BINARY_DIR}/include)\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#mark them to be installed\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# pods_install_executables(<executable1> ...)\n\n#\n\n# Install a (list) of executables to bin/\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# pods_install_libraries(<library1> ...)\n\n#\n\n# Install a (list) of libraries to lib/\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# pods_install_pkg_config_file(<package-name> \n\n#                              [VERSION <version>]\n\n#                              [DESCRIPTION <description>]\n\n#                              [CFLAGS <cflag> ...]\n\n#                              [LIBS <lflag> ...]\n\n#                              [CLASSPATH <target-jar1> <target-jar2> ...]\n\n#                              [REQUIRES <required-package-name> ...])\n\n# \n\n# Create and install a pkg-config .pc file.\n\n#\n\n# example:\n\n#    add_library(mylib mylib.c)\n\n#    pods_install_pkg_config_file(mylib LIBS -lmylib REQUIRES glib-2.0)\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO error check\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# parse function arguments and populate pkg-config parameters\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# write the .pc file out\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# mark the .pc file for installation to the lib/pkgconfig directory\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# pods_install_bash_setup(<package-name> <line1> <line2> ...) \n\n# \n\n# Create and install the lines into config/${package}_setup.sh\n\n#\n\n# example:\n\n#    pods_install_bash_setup(mypod \"export LD_LIBRARY_PATH=${CMAKE_INSTALL_PREFIX}/lib\")\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# todo: add a \\n at the end of every element of ARGV?\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#  execute_process(COMMAND chmod +x ${CMAKE_INSTALL_PREFIX}/config/${package}_setup.sh)\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#  execute_process(COMMAND chmod +x ${CMAKE_INSTALL_PREFIX}/config/pods_setup_all.sh)\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# pods_install_python_script(<script_name> <python_module_or_file>)\n\n#\n\n# Create and install a script that invokes the python interpreter with a\n\n# specified python module or script.\n\n#\n\n# A launcher script will be installed to bin/<script_name>. The script simply\n\n# adds <install-prefix>/lib/pythonX.Y/dist-packages\n\n# and  <install-prefix>/lib/pythonX.Y/site-packages \n\n# to the PYTHONPATH, and then \n\n# invokes `python -m <python_module>` or `python python_file` \n\n# depending on whether the function was passed a module name or script file.\n\n#\n\n# example:\n\n#    pods_install_python_script(run-py-module py_pkg.py_module)\n\n#    pods_install_python_script(run-py-script py_script.py)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# which python version?\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# where do we install .py files to?\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#todo: when do we get rid of this? \n",
        "Line" : 231,
        "CharPositionInLine" : 31
      },
      "22" : {
        "Text" : "#ends with a .py\n",
        "Line" : 234,
        "CharPositionInLine" : 49
      },
      "23" : {
        "Text" : "#get the directory where we'll install the script ${sanitized_POD_NAME}_scripts\n",
        "Line" : 241,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# install the python script file\n",
        "Line" : 245,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# write the bash script file\n",
        "Line" : 249,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#todo: check whether module exists?\n",
        "Line" : 255,
        "CharPositionInLine" : 72
      },
      "27" : {
        "Text" : "# write the bash script file\n",
        "Line" : 256,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# install it...\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# _pods_install_python_package(<py_src_dir> <py_module_name>)\n\n#\n\n# Internal helper function\n\n# Install python module in <py_src_dir> to lib/pythonX.Y/dist-packages/<py_module_name>,\n\n# where X.Y refers to the current python version (e.g., 2.6)\n\n#\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# which python version?\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# where do we install .py files to?\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#install the single module\n",
        "Line" : 284,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# pods_install_python_packages(<src_dir1> ...)\n\n#\n\n# Install python packages to lib/pythonX.Y/dist-packages, where X.Y refers to\n\n# the current python version (e.g., 2.6)\n\n#\n\n# For each <src_dir> pass in, it will do the following:\n\n# If <src_dir> is a python package (it has a __init__.py file) it will be installed \n\n# along with any .py files in subdirectories\n\n#\n\n# Otherwise the script searches for and installs any python packages in <src_dir>\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#install each module seperately \n",
        "Line" : 313,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "#install the single module by name\n",
        "Line" : 318,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# install any packages within the passed in py_src_dir \n",
        "Line" : 322,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# pods_find_pkg_config(<package-name>)\n\n#\n\n# Invokes `pkg-config --exists <package-name>` and, per the cmake standard, \n\n# sets the variable <package-name>_FOUND if it succeeds\n\n#\n\n# example usage:\n\n#   pods_find_pkg_config(eigen3)\n\n#   if (eigen3_FOUND)\n\n#      ... do something ... \n\n#   endif()\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# pods_use_pkg_config_packages(<target> <package-name> ...)\n\n#\n\n# Convenience macro to get compiler and linker flags from pkg-config and apply them\n\n# to the specified target.\n\n#\n\n# Invokes `pkg-config --cflags-only-I <package-name> ...` and adds the result to the\n\n# include directories.\n\n#\n\n# Additionally, invokes `pkg-config --libs <package-name> ...` and adds the result to\n\n# the target's link flags (via target_link_libraries)\n\n#\n\n# example:\n\n#   add_executable(myprogram main.c)\n\n#   pods_use_pkg_config_packages(myprogram glib-2.0 opencv)\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#    message(\"include: ${_pods_pkg_include_flags}\")\n",
        "Line" : 396,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# make the target depend on libraries that are cmake targets\n",
        "Line" : 403,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#message(\"---- ${target} depends on  ${libname}\")\n",
        "Line" : 412,
        "CharPositionInLine" : 20
      },
      "42" : {
        "Text" : "# pods_use_pkg_config_includes(<package-name> ...)\n\n#\n\n# Invokes `pkg-config --cflags-only-I <package-name> ...` and adds the result to the\n\n# include directories.\n\n#\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# pods_use_pkg_config_classpath(<package-name> ...)\n\n#\n\n# Convenience macro to get classpath flags from pkg-config and add them to CMAKE_JAVA_INCLUDE_PATH\n\n#\n\n# Invokes `pkg-config --variable=classpath <package-name> ...`, adds the result to the\n\n# include path, and then calls pods_use_pkg_config_classpath on the required packages (to recursively add the path)\n\n#\n\n# also sets the variable <package-name>\n\n# example:\n\n#   pods_use_pkg_config_classpath(lcm-java)\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# pods_config_search_paths()\n\n#\n\n# Setup include, linker, and pkg-config paths according to the pods core\n\n# policy.  This macro is automatically invoked, there is no need to do so\n\n# manually.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#set where files should be output locally\n",
        "Line" : 499,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "#set where files should be installed to\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# add build/lib/pkgconfig to the pkg-config search path\n",
        "Line" : 512,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# add build/include to the compiler include path\n",
        "Line" : 516,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# add build/lib to the link path\n",
        "Line" : 520,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# abuse RPATH\n",
        "Line" : 525,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# for osx, which uses \"install name\" path rather than rpath\n\n#set(CMAKE_INSTALL_NAME_DIR ${LIBRARY_OUTPUT_PATH})\n",
        "Line" : 532,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# hack to force cmake always create install and clean targets \n",
        "Line" : 536,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "#set the variable POD_NAME to the directory path, and set the cmake PROJECT_NAME\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# convert to windows paths\n",
        "Line" : 568,
        "CharPositionInLine" : 13
      },
      "55" : {
        "Text" : "#make sure we're running an out-of-source build\n",
        "Line" : 578,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#call the function to setup paths\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 57
    },
    "ihmc-common-walking-control-modules/csrc/CMakeLists.txt" : {
      "ObjectId" : "856afafd27d1f27d48144805d685e76e8c8348d3",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-common-walking-control-modules/csrc/CVXMomentumOptimizerWithGRFPenalizedSmoother/Makefile" : {
      "ObjectId" : "e49bb155630cbf6fdfb387ebcac83610964f7667",
      "LastModified" : "2017-09-08T21:53:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Produced by CVXGEN, 2014-02-11 21:41:08 -0500.\n\n# CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.\n\n# The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.\n\n# CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial\n\n# applications without prior written permission from Jacob Mattingley.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Filename: Makefile.\n\n# Description: Basic Makefile.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for valgrind.\n\n#OPT=-g -O0\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libmath is needed for sqrt. can remove in final product.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include util.o for random functions and easy matrix printing.\n\n#testsolver: solver.o matrix_support.o ldl.o util.o testsolver.o\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ihmc-interfaces/src/main/messages/ihmc_interfaces/controller_msgs/CMakeLists.txt" : {
      "ObjectId" : "7e276d11cec3cd7a7a99e69430ec89bd48366e27",
      "LastModified" : "2018-12-05T00:04:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-interfaces/src/main/messages/ros1/controller_msgs/CMakeLists.txt" : {
      "ObjectId" : "23d220cba95bd3cd195a73af4979058ab89397d9",
      "LastModified" : "2019-01-02T23:05:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES ihmc_msgs\n\n#  CATKIN_DEPENDS std_msgs\n\n#  DEPENDS system_lib\n",
        "Line" : 203,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "ihmc-interfaces/src/test/builds/message-test-project/src/main/messages/ihmc_interfaces/generator_test_msgs/CMakeLists.txt" : {
      "ObjectId" : "efef81b46bc953d3383e1b9c75bf78b5478c8fa2",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/CMakeLists.txt" : {
      "ObjectId" : "3703df4eb44d42a204494d52ac343d0342b2ae64",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/CMakeLists.txt" : {
      "ObjectId" : "b6eb027990589467a59f9a5d03245531ddc110af",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/cmake/FindEigen.cmake" : {
      "ObjectId" : "e785d28d560168193bab2fc5bbeec54ebc0f353f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN_FOUND - system has eigen lib with correct version\n\n#  EIGEN_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/cmake/FindMatlab.cmake" : {
      "ObjectId" : "9d91354d28dc043b2a794a1494506a7595fc4198",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - this module looks for Matlab\n\n# Defines:\n\n#  MATLAB_INCLUDE_DIR: include path for mex.h, engine.h\n\n#  MATLAB_LIBRARIES:   required libraries: libmex, etc\n\n#  MATLAB_MEX_LIBRARY: path to libmex.lib\n\n#  MATLAB_MX_LIBRARY:  path to libmx.lib\n\n#  MATLAB_ENG_LIBRARY: path to libeng.lib\n\n#  MATLAB_ROOT: path to Matlab's root directory\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is part of Gerardus\n\n#\n\n# This is a derivative work of file FindMatlab.cmake released with\n\n# CMake v2.8, because the original seems to be a bit outdated and\n\n# doesn't work with my Windows XP and Visual Studio 10 install\n\n#\n\n# (Note that the original file does work for Ubuntu Natty)\n\n#\n\n# Author: Ramon Casero <rcasero@gmail.com>, Tom Doel\n\n# Version: 0.2.3\n\n# $Rev$\n\n# $Date$\n\n#\n\n# The original file was copied from an Ubuntu Linux install\n\n# /usr/share/cmake-2.8/Modules/FindMatlab.cmake\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Search for a version of Matlab available, starting from the most modern one to older versions\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Directory name depending on whether the Windows architecture is 32\n\n# bit or 64 bit\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Folder where the MEX libraries are, depending of the Windows compiler\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Assume people are generally using Visual Studio 7.1,\n\n# if using 7.0 need to link to: ../extern/lib/${WINDIR}/microsoft/msvc70\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# SET(MATLAB_LIBRARIES_DIR \"${MATLAB_ROOT}/extern/lib/${WINDIR}/microsoft/msvc70\")\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Assume people are generally using Borland 5.4,\n\n# if using 7.0 need to link to: ../extern/lib/${WINDIR}/microsoft/msvc70\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# SET(MATLAB_LIBRARIES_DIR \"${MATLAB_ROOT}/extern/lib/${WINDIR}/microsoft/bcc50\")\n\n# SET(MATLAB_LIBRARIES_DIR \"${MATLAB_ROOT}/extern/lib/${WINDIR}/microsoft/bcc51\")\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# If the compiler is Visual Studio, but not any of the specific\n\n# versions above, we try our luck with the microsoft directory\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Get paths to the Matlab MEX libraries\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Get path to the include directory\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# get path to the Matlab root directory\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Check if this is a Mac\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# If this is a Mac and the attempts to find MATLAB_ROOT have so far failed, \n\n# we look in the applications folder\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Search for a version of Matlab available, starting from the most modern one to older versions\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Get path to the MEX libraries\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Get path to the include directory\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# This is common to UNIX and Win32:\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/python_module/CMakeLists.txt" : {
      "ObjectId" : "e1258cadfed7907d4af7afeec18c4b333c1b9596",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/python_module/cmake/add_python_export_library.cmake" : {
      "ObjectId" : "c50816b377c5d3eef66b3487fbbeabfcda22c90d",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helpful function for adding python export libraries in ROS.\n\n# Usage:\n\n# \n\n# rosbuild_find_ros_package(numpy_eigen)\n\n# include(${numpy_eigen_PACKAGE_PATH}/cmake/add_python_export_library.cmake)\n\n# add_python_export_library(${PROJECT_NAME}_python ${PROJECT_SOURCE_DIR}/src/${PROJECT_NAME}\n\n#                           src/file1.cpp\n\n#                           src/file2.cpp\n\n#                          )\n\n#\n\n#\n\n# Set the path for the output python files. This should be the path\n\n# with the __init__.py file. The standard for ROS (where python message\n\n# definitions live) is ${PROJECT_SOURCE_DIR}/src/${PROJECT_NAME}\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cmake is a very bad scripting language. Very bad indeed.\n\n# Get the leaf of the python module directory. This is the python package name\n\n# This first command makes sure to strip off the trailing /\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This grabs the leaf of the path\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# This grabs the parent of the leaf\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Force the user to have a setup.py file\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find Python\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# The apple framework headers don't include the numpy headers for some reason.\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# message(\"Target files: ${ARGN}\")\n\n# Create the target and assign source files\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Link your python project to the main library and to Python\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Link against boost::python\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# On OSX and Linux, the python library must end in the extension .so. Build this\n\n# filename here.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Cause the library to be output in the correct directory.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_boost/CMakeLists.txt" : {
      "ObjectId" : "beb56dd4652cc6af50dcd7d9e098973cf7c4dc72",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############\n\n## Building ##\n\n##############\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n\n# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_common/CMakeLists.txt" : {
      "ObjectId" : "2e19b5a5f8b2012b03081fe8d538033bb93a9cbd",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n\n# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_common/cmake/export_flags.cmake" : {
      "ObjectId" : "d0af91d3d11ba694d4739f94d845ade3cd522f04",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_database/CMakeLists.txt" : {
      "ObjectId" : "591add354cea271fa7d1552f2207b11879b05e03",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_database/cmake/FindSqlite3.cmake" : {
      "ObjectId" : "63edeae51cd628b17cfbd4b3159153e1f0107d32",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - find Sqlite 3\n\n# SQLITE3_INCLUDE_DIR - Where to find Sqlite 3 header files (directory)\n\n# SQLITE3_LIBRARIES - Sqlite 3 libraries\n\n# SQLITE3_LIBRARY_RELEASE - Where the release library is\n\n# SQLITE3_LIBRARY_DEBUG - Where the debug library is\n\n# SQLITE3_FOUND - Set to TRUE if we found everything (library, includes and executable)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2010 Pau Garcia i Quiles, <pgquiles@elpauer.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_eigen/CMakeLists.txt" : {
      "ObjectId" : "e65d51b0e542642aa705c3ea5f327967a675949f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############\n\n## Building ##\n\n##############\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n\n# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_kinematics/CMakeLists.txt" : {
      "ObjectId" : "019743f884285a8e3a754df3bd64ef2768547efa",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############\n\n## Building ##\n\n##############\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n\n# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_logging/CMakeLists.txt" : {
      "ObjectId" : "662b3e79d2950b69fef69eef3f3bf7434ebdbed0",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_matlab/CMakeLists.txt" : {
      "ObjectId" : "080c12a4a838e963723a8e99de8cabbe9568ddf4",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't search with required, so we can continue.\n",
        "Line" : 14,
        "CharPositionInLine" : 22
      },
      "1" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_matrix_archive/CMakeLists.txt" : {
      "ObjectId" : "84fc3f171a0449a538c08d431273922bf588f2c3",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_opencv/CMakeLists.txt" : {
      "ObjectId" : "478fefc0f29ed72d829ef89da7d5518724c54ebd",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_property_tree/CMakeLists.txt" : {
      "ObjectId" : "5f46bbfcf6f771e6d91133117e3083796f653cc4",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############\n\n## Building ##\n\n##############\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n\n# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_random/CMakeLists.txt" : {
      "ObjectId" : "3886997a7fa5a63223d45e25c2cd4ae9a0d3d650",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/Schweizer-Messer/sm_timing/CMakeLists.txt" : {
      "ObjectId" : "87cd6f602aff1eb233b844fa00178e1db7859acd",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############\n\n## Building ##\n\n##############\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n\n# Avoid clash with tr1::tuple: https://code.google.com/p/googletest/source/browse/trunk/README?r=589#257\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/atlas_hardware_interface/CMakeLists.txt" : {
      "ObjectId" : "1b8c41726c80c4b85753e0e551d7757d7f060b65",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES beginner_tutorials\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp library\n\n# add_library(beginner_tutorials\n\n#   src/${PROJECT_NAME}/beginner_tutorials.cpp\n\n# )\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(beginner_tutorials_node src/beginner_tutorials_node.cpp)\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(beginner_tutorials_node beginner_tutorials_generate_messages_cpp)\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(beginner_tutorials_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS beginner_tutorials beginner_tutorials_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_beginner_tutorials.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "ihmc-perception/catkin_ws/src/atlas_msgs/CMakeLists.txt" : {
      "ObjectId" : "a0654ea8b675ba326d30698e14e0ca2dbe565807",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VERY IMPORTANT: For Fuerte, tell CMake not to strip off the RPATH from libs and executables during installation.\n\n# This is needed to resolve dependencies on ROS libraries that live in various places deep in /opt/ros/fuerte/stacks.\n\n# Starting with Groovy, we can allow CMake to strip RPATH (its default behavior) because we use only catkinized\n\n# packages from ROS.  Those packages' libraries are installed to /opt/ros/<distro>/lib, which we can assume will\n\n# be in LD_LIBRARY_PATH at run-time.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#  sandia_hand_msgs\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_action_files(DIRECTORY action FILES\n\n#  WalkDemo.action\n\n# )\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  sandia_hand_msgs\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  sandia_hand_msgs\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ihmc-perception/catkin_ws/src/catkin_simple/CMakeLists.txt" : {
      "ObjectId" : "2bb0702122e813d14f91db8e7bbecc9f84124da1",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/catkin_simple/test/scenarios/hello_world/bar/CMakeLists.txt" : {
      "ObjectId" : "43eeebbd203101583adde741700d02a51a61e5a7",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/catkin_simple/test/scenarios/hello_world/baz/CMakeLists.txt" : {
      "ObjectId" : "0bfd777dbdf075fbd5fff5ceac75016ae5dc20ac",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/catkin_simple/test/scenarios/hello_world/foo/CMakeLists.txt" : {
      "ObjectId" : "85014a0e9f1a404ea67b2c039c975721210294f7",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/eigen_catkin/CMakeLists.txt" : {
      "ObjectId" : "9c042c9a64cec913f3ef45edc57ab081bb8016df",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/elevation_mapping/elevation_mapping/CMakeLists.txt" : {
      "ObjectId" : "b2c63c4e5d335b56ebd2502c2a573ddc78caa16f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## System dependencies are found with CMake's conventions\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  LIBRARIES elevation_mapping\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Declare a cpp library\n\n# add_library(elevation_mapping\n\n#   src/${PROJECT_NAME}/elevation_mapping.cpp\n\n# )\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Declare a cpp executable\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapper_humanoid/CMakeLists.txt" : {
      "ObjectId" : "1bc4532e68fdfb4ab03748e728e2d6fead87fb57",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# c++ 0x\n\n#if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\") \n\n#\tset(CMAKE_COMPILER_IS_CLANGXX)\n\n#endif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\")\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# well, this breaks libpointmatcher on non-unix platform,\n\n# please contribute the define for your favorite compiler\n\n# It must support (compiler support in parenthesis):\n\n# - N2351: shared pointers in standard\n\n# - N2672: Initializer lists (gcc)\n\n# - N1984: auto-typed variables (gcc, clang)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_extrinsic_calibration/CMakeLists.txt" : {
      "ObjectId" : "f8dbc524b597fa9797225a81ba0b727773e6cc7d",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set the default path for built executables to the \"bin\" directory\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set the default path for built libraries to the \"lib\" directory\n\n#set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#uncomment if you have defined messages\n\n#rosbuild_genmsg()\n\n#uncomment if you have defined services\n\n#rosbuild_gensrv()\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_extrinsic_calibration/Makefile" : {
      "ObjectId" : "b75b928f20ef9ea4f509a17db62e4e31b422c27f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_gridmap_2d/CMakeLists.txt" : {
      "ObjectId" : "2e056de00f760b862c613535e6469b089f742a12",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# required in Indigo\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_gridmap_2d/Makefile" : {
      "ObjectId" : "b75b928f20ef9ea4f509a17db62e4e31b422c27f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_icp_mapper/CMakeLists.txt" : {
      "ObjectId" : "089deae339ffac40ac7ac6697633f6a9e380d581",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# c++ 0x\n\n#if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\") \n\n#\tset(CMAKE_COMPILER_IS_CLANGXX)\n\n#endif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\")\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# well, this breaks libpointmatcher on non-unix platform,\n\n# please contribute the define for your favorite compiler\n\n# It must support (compiler support in parenthesis):\n\n# - N2351: shared pointers in standard\n\n# - N2672: Initializer lists (gcc)\n\n# - N1984: auto-typed variables (gcc, clang)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_icp_mapper/src/noROSbuilt/CMakeLists.txt" : {
      "ObjectId" : "faf807f65c02f79013ad84f6c0676ccf71a6aa25",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include(UseDoxygen)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# boost\n\n#find_package(Boost REQUIRED)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# eigen 3\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libpointmatcher\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# nabo\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# look for OpenCL library\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if found, add\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# include all libs so far\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test programs\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_icp_mapper_experiments/CMakeLists.txt" : {
      "ObjectId" : "81de4599662fec82bfa483eca0133d90e529be2d",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libnabo\n\n# libargtable2-dev\n\n# yaml-cpp\n\n# eigen\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#generate_messages()\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# c++ 0x\n\n#if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\") \n\n#\tset(CMAKE_COMPILER_IS_CLANGXX)\n\n#endif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\")\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# well, this breaks libpointmatcher on non-unix platform,\n\n# please contribute the define for your favorite compiler\n\n# It must support (compiler support in parenthesis):\n\n# - N2351: shared pointers in standard\n\n# - N2672: Initializer lists (gcc)\n\n# - N1984: auto-typed variables (gcc, clang)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Note: disabled until tf2 supports C++0x\n\n# add_executable(matcher_bag src/matcher_bag.cpp)\n\n# target_link_libraries(matcher_bag  ${catkin_LIBRARIES} ${POINTMATCHER_LIBRARIES})\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_icp_mapper_experiments/Makefile" : {
      "ObjectId" : "bbd3fc6049918dcaabb6316186863007edbde771",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_icp_mapping/CMakeLists.txt" : {
      "ObjectId" : "325ba770f78e416c8cec9f2b5db710e8c798f100",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_point_cloud_vtk_tools/CMakeLists.txt" : {
      "ObjectId" : "06a520a383a9cb2b0c341a32368534f403257cb9",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# c++ 0x\n\n#if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\") \n\n#\tset(CMAKE_COMPILER_IS_CLANGXX)\n\n#endif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\")\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# well, this breaks libpointmatcher on non-unix platform,\n\n# please contribute the define for your favorite compiler\n\n# It must support (compiler support in parenthesis):\n\n# - N2351: shared pointers in standard\n\n# - N2672: Initializer lists (gcc)\n\n# - N1984: auto-typed variables (gcc, clang)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/ethzasl_point_cloud_vtk_tools/Makefile" : {
      "ObjectId" : "bbd3fc6049918dcaabb6316186863007edbde771",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/libpointmatcher_ros/CMakeLists.txt" : {
      "ObjectId" : "c06f4c646c9b816c6ba79c1ce4e47732feb8c7fb",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# c++ 0x\n\n#if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\") \n\n#\tset(CMAKE_COMPILER_IS_CLANGXX)\n\n#endif (\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"clang\")\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# well, this breaks libpointmatcher on non-unix platform,\n\n# please contribute the define for your favorite compiler\n\n# It must support (compiler support in parenthesis):\n\n# - N1984: auto-typed variables (gcc, clang)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ihmc-perception/catkin_ws/src/ethzasl_icp_mapping/libpointmatcher_ros/Makefile" : {
      "ObjectId" : "bbd3fc6049918dcaabb6316186863007edbde771",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/foothold_finding/foothold_finder/CMakeLists.txt" : {
      "ObjectId" : "b23108c9e7025c1a27a65a2b7156e0eb907b51af",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## System dependencies are found with CMake's conventions\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\tLIBRARIES ${PROJECT_NAME}\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tDEPENDS Eigen\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Specify additional locations of header files\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Declare a cpp library\n\n# add_library(foothold_finder\n\n#   src/${PROJECT_NAME}/foothold_finder.cpp\n\n# )\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Declare a cpp executable\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n#add_dependencies(foothold_finder_node foothold_finder_generate_messages_cpp)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS foothold_finder foothold_finder_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_foothold_finder.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "ihmc-perception/catkin_ws/src/foothold_finding/foothold_finding_msg/CMakeLists.txt" : {
      "ObjectId" : "e11dd723e302ecd0078e6fe74e04637d33bccd19",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Generate services in the 'srv' folder\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES foothold_finding_msg\n\n#  CATKIN_DEPENDS other_catkin_pkg\n\n#  DEPENDS system_lib\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Declare a cpp library\n\n# add_library(foothold_finding_msg\n\n#   src/${PROJECT_NAME}/foothold_finding_msg.cpp\n\n# )\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(foothold_finding_msg_node src/foothold_finding_msg_node.cpp)\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(foothold_finding_msg_node foothold_finding_msg_generate_messages_cpp)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(foothold_finding_msg_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS foothold_finding_msg foothold_finding_msg_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_foothold_finding_msg.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "ihmc-perception/catkin_ws/src/grid_map/grid_map/CMakeLists.txt" : {
      "ObjectId" : "a54f21eb08a5c19ae357c37804bed51726688bdf",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## System dependencies are found with CMake's conventions\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify additional locations of header files\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Declare a cpp library\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "ihmc-perception/catkin_ws/src/grid_map/grid_map_lib/CMakeLists.txt" : {
      "ObjectId" : "0b48346d2ad41c90296f123bc05022c26c57919b",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## System dependencies are found with CMake's conventions\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#   CATKIN_DEPENDS\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Specify additional locations of header files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Declare a cpp library\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "ihmc-perception/catkin_ws/src/grid_map/grid_map_msg/CMakeLists.txt" : {
      "ObjectId" : "a399b41d318fc721172994623e814759135d0e5c",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################\n\n## Declare ROS messages and services ##\n\n#######################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Generate services in the 'srv' folder\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#INCLUDE_DIRS include\n\n#LIBRARIES\n\n#CATKIN_DEPENDS std_msgs message_runtime\n\n#DEPENDS\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "ihmc-perception/catkin_ws/src/grid_map/grid_map_visualization/CMakeLists.txt" : {
      "ObjectId" : "1546a502ca78d8c4da1c10047d262bc84113d769",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## System dependencies are found with CMake's conventions\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  LIBRARIES ${PROJECT_NAME}\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Declare a cpp library\n\n# add_library(${PROJECT_NAME}\n\n#   src/${PROJECT_NAME}/grid_map_visualization_node.cpp\n\n# )\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Declare a cpp executable\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(grid_map_visualization_node grid_map_visualization_generate_messages_cpp)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "ihmc-perception/catkin_ws/src/ihmc_vision/CMakeLists.txt" : {
      "ObjectId" : "de2e66e19a893cd677258dc41a5d004c350a1fca",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n\n# add_message_files(\n\n#   FILES\n\n#   Message1.msg\n\n#   Message2.msg\n\n# )\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n\n# generate_messages(\n\n#   DEPENDENCIES\n\n#   std_msgs  # Or other packages containing msgs\n\n# )\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES ihmc_vision\n\n#  CATKIN_DEPENDS other_catkin_pkg\n\n#  DEPENDS system_lib\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Declare a cpp library\n\n# add_library(ihmc_vision\n\n#   src/${PROJECT_NAME}/ihmc_vision.cpp\n\n# )\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(ihmc_vision_node src/ihmc_vision_node.cpp)\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(ihmc_vision_node ihmc_vision_generate_messages_cpp)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(ihmc_vision_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS ihmc_vision ihmc_vision_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_ihmc_vision.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "ihmc-perception/catkin_ws/src/image_encoding_converter/CMakeLists.txt" : {
      "ObjectId" : "488b2743eee4d806d9646b44892296010ad55f39",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/catkin_ws/src/lidar_to_point_cloud_transformer/CMakeLists.txt" : {
      "ObjectId" : "15a4004b05df217ca56a0bba95e4ea1f34455ebe",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  LIBRARIES elevation_mapping\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Declare a cpp executable\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add gtest based cpp test target and link libraries\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "ihmc-perception/catkin_ws/src/osrf_msgs/CMakeLists.txt" : {
      "ObjectId" : "ac1e7c2055655eb8955270f034347b8ae34f35a3",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-perception/catkin_ws/src/pose_covariance_approximator/CMakeLists.txt" : {
      "ObjectId" : "c9b0afc6f53dcb20aadb128d29ddd17172449481",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n\n# add_message_files(\n\n#   FILES\n\n#   Message1.msg\n\n#   Message2.msg\n\n# )\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n\n# generate_messages(\n\n#   DEPENDENCIES\n\n#   std_msgs  # Or other packages containing msgs\n\n# )\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES pose_covariance_approximator\n\n#  CATKIN_DEPENDS other_catkin_pkg\n\n#  DEPENDS system_lib\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Declare a cpp library\n\n# add_library(pose_covariance_approximator\n\n#   src/${PROJECT_NAME}/pose_covariance_approximator.cpp\n\n# )\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(pose_covariance_approximator_node src/pose_covariance_approximator_node.cpp)\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(pose_covariance_approximator_node pose_covariance_approximator_generate_messages_cpp)\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(pose_covariance_approximator_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS pose_covariance_approximator pose_covariance_approximator_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_pose_covariance_approximator.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "ihmc-perception/catkin_ws/src/scan_to_cloud/CMakeLists.txt" : {
      "ObjectId" : "3679ce60c2247ef831e07445931a9be3836adc80",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n\n# add_message_files(\n\n#   FILES\n\n#   Message1.msg\n\n#   Message2.msg\n\n# )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n\n# generate_messages(\n\n#   DEPENDENCIES\n\n#   sensor_msgs#   std_msgs\n\n# )\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES scan_to_cloud\n\n#  CATKIN_DEPENDS ethzasl_icp_mapper_humanoid laser_assembler laser_filters roscpp sensor_msgs std_msgs\n\n#  DEPENDS system_lib\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Declare a cpp library\n\n# add_library(scan_to_cloud\n\n#   src/${PROJECT_NAME}/scan_to_cloud.cpp\n\n# )\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp executable\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(scan_to_cloud_node scan_to_cloud_generate_messages_cpp)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS scan_to_cloud scan_to_cloud_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_scan_to_cloud.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "ihmc-perception/catkin_ws/src/transform_provider/CMakeLists.txt" : {
      "ObjectId" : "c3c62bb313f80b70da3e0d0c64513e23514d97f4",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n\n# add_message_files(\n\n#   FILES\n\n#   Message1.msg\n\n#   Message2.msg\n\n# )\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Or other packages containing msgs\n",
        "Line" : 68,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES transform_provider\n\n#  CATKIN_DEPENDS tf2\n\n#  DEPENDS system_lib\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp library\n\n# add_library(transform_provider\n\n#   src/${PROJECT_NAME}/transform_provider.cpp\n\n# )\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Declare a cpp executable\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Specify libraries to link a library or executable target against\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS transform_provider transform_provider_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_transform_provider.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "ihmc-perception/catkin_ws/src/trooper_mlc_msgs/CMakeLists.txt" : {
      "ObjectId" : "39c25a444b718b0c2d3dfb2ba8258c471642a399",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependencies might have been\n\n##     pulled in transitively but can be declared for certainty nonetheless:\n\n##     * add a build_depend tag for \"message_generation\"\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#  INCLUDE_DIRS include\n\n#  LIBRARIES beginner_tutorials\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  DEPENDS system_lib\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Declare a cpp library\n\n# add_library(beginner_tutorials\n\n#   src/${PROJECT_NAME}/beginner_tutorials.cpp\n\n# )\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Declare a cpp executable\n\n# add_executable(beginner_tutorials_node src/beginner_tutorials_node.cpp)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Add cmake target dependencies of the executable/library\n\n## as an example, message headers may need to be generated before nodes\n\n# add_dependencies(beginner_tutorials_node beginner_tutorials_generate_messages_cpp)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(beginner_tutorials_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS beginner_tutorials beginner_tutorials_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_beginner_tutorials.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "ihmc-perception/csrc/linemod/CMakeLists.txt" : {
      "ObjectId" : "0fc416971eeecd97daec5636b4ca6111832ac552",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Eigen\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Boost\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#minipcl headers\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#main target\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#unit-test\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ihmc-perception/csrc/linemod/minipcl/CMakeLists.txt" : {
      "ObjectId" : "a2f34889ef231f5836cb0996a998410c1f0ae1af",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# io/pcd_io is moved to here\n",
        "Line" : 10,
        "CharPositionInLine" : 25
      },
      "1" : {
        "Text" : "#add_subdirectory(filters)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ihmc-perception/csrc/linemod/minipcl/cmake/FindEigen.cmake" : {
      "ObjectId" : "5819a5c7168b0c049d664812033ba00a969593d5",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Find Eigen3\n\n#\n\n# This sets the following variables:\n\n# EIGEN_FOUND - True if Eigen was found.\n\n# EIGEN_INCLUDE_DIRS - Directories containing the Eigen include files.\n\n# EIGEN_DEFINITIONS - Compiler flags for Eigen.\n\n# EIGEN_VERSION - Package version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ihmc-perception/csrc/linemod/minipcl/common/CMakeLists.txt" : {
      "ObjectId" : "d990db2f2f65e8e8ffa2ef4087a5af11a076db90",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#PCL_SUBSYS_OPTION(build \"${SUBSYS_NAME}\" \"${SUBSYS_DESC}\" ON)\n\n#PCL_SUBSYS_DEPEND(build \"${SUBSYS_NAME}\" DEPS ${SUBSYS_DEPS} EXT_DEPS eigen boost)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#PCL_ADD_DOC(\"${SUBSYS_NAME}\")\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ihmc-perception/csrc/linemod/minipcl/features/CMakeLists.txt" : {
      "ObjectId" : "5e6663451ed2577fb1f22bd1432d97eff7a4c643",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Workaround to aviod hitting the MSVC 4GB linker memory limit when building pcl_features.\n\n# Disable whole program optimization (/GL) and link-time code generation (/LTCG).\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# Install headers\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "ihmc-perception/csrc/linemod/minipcl/filters/CMakeLists.txt" : {
      "ObjectId" : "aac345a9117c9bfa42e77bebc4f72533a6822197",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#PCL_SUBSYS_OPTION(build \"${SUBSYS_NAME}\" \"${SUBSYS_DESC}\" ON)\n\n#PCL_SUBSYS_DEPEND(build \"${SUBSYS_NAME}\" DEPS ${SUBSYS_DEPS})\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#PCL_ADD_DOC(\"${SUBSYS_NAME}\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#src/project_inliers.cpp\n\n#src/radius_outlier_removal.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#src/statistical_outlier_removal.cpp\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#src/bilateral.cpp\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#src/voxel_grid_covariance.cpp\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#src/morphological_filter.cpp\n\n#src/local_maximum.cpp\n\n#src/model_outlier_removal.cpp\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\"include/pcl/${SUBSYS_NAME}/impl/statistical_outlier_removal.hpp\"\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "ihmc-perception/csrc/linemod/minipcl/kdtree/CMakeLists.txt" : {
      "ObjectId" : "311dffc13316d8c8475b15a971a79da620c6a776",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install include files\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "ihmc-perception/csrc/linemod/minipcl/octree/CMakeLists.txt" : {
      "ObjectId" : "1b0a9bd3724596038cbe7f3286e18c0809628486",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install include files\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "ihmc-perception/csrc/linemod/minipcl/recognition/CMakeLists.txt" : {
      "ObjectId" : "b1ff0b3532a26b56376a813afb719e0c65fccb67",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(SUBSYS_DEPS common io search kdtree octree features filters registration sample_consensus ml)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#PCL_SUBSYS_OPTION(build \"${SUBSYS_NAME}\" \"${SUBSYS_DESC}\" ON)\n\n#PCL_SUBSYS_DEPEND(build \"${SUBSYS_NAME}\" DEPS ${SUBSYS_DEPS})\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#PCL_ADD_DOC(\"${SUBSYS_NAME}\")\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#src/hv/occlusion_reasoning.cpp\n\n#src/hv/hv_papazov.cpp\n\n#src/hv/hv_go.cpp\n\n#src/hv/greedy_verification.cpp\n\n#src/cg/hough_3d.cpp\n\n#src/cg/geometric_consistency.cpp\n\n#src/ransac_based/obj_rec_ransac.cpp\n\n#src/ransac_based/model_library.cpp\n\n#src/ransac_based/orr_octree.cpp\n\n#src/ransac_based/orr_octree_zprojection.cpp\n\n#src/face_detection/face_detector_data_provider.cpp\n\n#src/face_detection/rf_face_detector_trainer.cpp\n\n#src/implicit_shape_model.cpp\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#target_link_libraries(\"${LIB_NAME}\" pcl_common pcl_kdtree pcl_octree pcl_search pcl_features pcl_registration pcl_sample_consensus pcl_filters pcl_ml pcl_io)\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "ihmc-perception/csrc/linemod/minipcl/search/CMakeLists.txt" : {
      "ObjectId" : "cd82a0ef592a2a5befc41321fe03147795e600b4",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/matlab/drillTask/lib/kdtree/Makefile" : {
      "ObjectId" : "4ec430bb08f6d630de6b826fcb2160b68f0950ae",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------#\n\n#                                                                              #\n\n#                              COMPILER FLAGS                                  #\n\n#                                                                              #\n\n# CPPONLY flag removes mex-portions (includes and MEX iterface function) to    #\n\n# allow C++ independent testing                                                #\n\n#------------------------------------------------------------------------------#\n\n# --- RELEASE --- #\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --- DEBUG   --- #\n\n# CXXFLAGS = -j2 -O2 -Wall -fmessage-length=0 -D CPPONLY -D DEBUG\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------#\n\n#                                                                              #\n\n#                            ARCHITECTURE VARIABLES                            #\n\n#                                                                              #\n\n# add these to your user profile in order to specify your own.                 #\n\n#------------------------------------------------------------------------------#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------#\n\n#                                                                              #\n\n#                              OTHER VARIABLES                                 #\n\n#                                                                              #\n\n#------------------------------------------------------------------------------#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------#\n\n#                                                                              #\n\n#                              DEPENDENCY RULES                                # \n\n#                                                                              #\n\n# USAGE OF RELEASE AND DEBUG MODE                                              #\n\n# to compile a release file (without debug hooks and more efficient) just type #\n\n# make. On the other hand, to enable debugging portions of the code (output)   #\n\n# and add debugging links to the binary (needed for line by line execution)    #\n\n# use :make debug\"                                                             #\n\n#                                                                              #\n\n# EXPLANATION OF A RULE                                                        #\n\n# anything (%) that terminates in .bin for which an explicit rule is not       #  \n\n# available is made dependable on the file which has same name but .cpp        #\n\n# extension. The compiler (CXX) with options (CXXFLAGS) is called on each of   #\n\n# the elements that trigger the rule ($@, which is left side of \":\") and       #\n\n# produces an output with filename expressed by the \"first\" of elements from   #\n\n# which it depends ($< or right side of \":\")                                   #\n\n#------------------------------------------------------------------------------#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### MANUALLY REDUCED TARGETS\n\n# TARGET = kdtree_build\n\n# MEXTARGET = kdtree_build.$(MEXEXT)\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------#\n\n#                                                                              #\n\n#                   CREATE A DISTRIBUTION IN A ZIP FILE                        #\n\n#                                                                              #\n\n# move resources to a kdtree folder, tar them, then remove the temp directory  # \n\n# and its content completely                                                   #\n\n#------------------------------------------------------------------------------#\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#follow symlinks\n",
        "Line" : 97,
        "CharPositionInLine" : 26
      },
      "8" : {
        "Text" : "#tar -cvf $(ARCHIVENAME).tar.gz $(ARCHIVENAME)\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "ihmc-perception/third-party/kindr/CMakeLists.txt" : {
      "ObjectId" : "23500de062168a436b692a7c571047fdd0a17957",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013, Christian Gehring, Hannes Sommer, Paul Furgale, Remo Diethelm\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#     * Redistributions of source code must retain the above copyright\n\n#       notice, this list of conditions and the following disclaimer.\n\n#     * Redistributions in binary form must reproduce the above copyright\n\n#       notice, this list of conditions and the following disclaimer in the\n\n#       documentation and/or other materials provided with the distribution.\n\n#     * Neither the name of the Autonomous Systems Lab, ETH Zurich nor the\n\n#       names of its contributors may be used to endorse or promote products\n\n#       derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL Christian Gehring, Hannes Sommer, Paul Furgale,\n\n# Remo Diethelm BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n\n# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n\n# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project configuration\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)\n\n#set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Noisily default to Release build\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Don't build tests if not specified.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add CMake module path\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add common\n\n#add_subdirectory(common)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add linear algebra \n\n#add_subdirectory(linear_algebra)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add quaternions\n\n#add_subdirectory(quaternions)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add rotations\n\n#add_subdirectory(rotations)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add positions\n\n#add_subdirectory(positions)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add poses\n\n#add_subdirectory(poses)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add test\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add Doxygen documentation\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Generate FindKindr.cmake file\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Setting for make install\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "ihmc-perception/third-party/kindr/Makefile" : {
      "ObjectId" : "31e26919bd4036a96a62164aacf3ae40f73286d8",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ihmc-perception/third-party/kindr/cmake/FindEigen.cmake" : {
      "ObjectId" : "e785d28d560168193bab2fc5bbeec54ebc0f353f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN_FOUND - system has eigen lib with correct version\n\n#  EIGEN_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "ihmc-perception/third-party/kindr/cmake/FindGTest.cmake" : {
      "ObjectId" : "6cffb5c598f9c08faa91904185938239113ce48c",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the Google C++ Testing Framework.\n\n#\n\n# Defines the following variables:\n\n#\n\n#   GTEST_FOUND - Found the Google Testing framework\n\n#   GTEST_INCLUDE_DIRS - Include directories\n\n#\n\n# Also defines the library variables below as normal\n\n# variables.  These contain debug/optimized keywords when\n\n# a debugging library is found.\n\n#\n\n#   GTEST_BOTH_LIBRARIES - Both libgtest & libgtest-main\n\n#   GTEST_LIBRARIES - libgtest\n\n#   GTEST_MAIN_LIBRARIES - libgtest-main\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   GTEST_ROOT - (as a CMake or environment variable)\n\n#                The root directory of the gtest install prefix\n\n#\n\n#   GTEST_MSVC_SEARCH - If compiling with MSVC, this variable can be set to\n\n#                       \"MD\" or \"MT\" to enable searching a GTest build tree\n\n#                       (defaults: \"MD\")\n\n#\n\n#-----------------------\n\n# Example Usage:\n\n#\n\n#    enable_testing()\n\n#    find_package(GTest REQUIRED)\n\n#    include_directories(${GTEST_INCLUDE_DIRS})\n\n#\n\n#    add_executable(foo foo.cc)\n\n#    target_link_libraries(foo ${GTEST_BOTH_LIBRARIES})\n\n#\n\n#    add_test(AllTestsInFoo foo)\n\n#\n\n#-----------------------\n\n#\n\n# If you would like each Google test to show up in CTest as\n\n# a test you may use the following macro.\n\n# NOTE: It will slow down your tests by running an executable\n\n# for each test and test fixture.  You will also have to rerun\n\n# CMake after adding or removing tests or test fixtures.\n\n#\n\n# GTEST_ADD_TESTS(executable extra_args ARGN)\n\n#    executable = The path to the test executable\n\n#    extra_args = Pass a list of extra arguments to be passed to\n\n#                 executable enclosed in quotes (or \"\" for none)\n\n#    ARGN =       A list of source files to search for tests & test\n\n#                 fixtures.\n\n#\n\n#  Example:\n\n#     set(FooTestArgs --foo 1 --bar 2)\n\n#     add_executable(FooTest FooUnitTest.cc)\n\n#     GTEST_ADD_TESTS(FooTest \"${FooTestArgs}\" FooUnitTest.cc)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009 Philip Lowman <philip@yhbt.com>\n\n# Copyright 2009 Daniel Blezek <blezek@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# Thanks to Daniel Blezek <blezek@gmail.com> for the GTEST_ADD_TESTS code\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The provided /MD project files for Google Test add -md suffixes to the\n\n# library names.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "ihmc-perception/third-party/kindr/cmake/FindKindr.cmake" : {
      "ObjectId" : "78b3ecee3f704d297cd08a354bd324db8f32feb7",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file was automatically generated during the installation of the Kindr library\n\n# and can be used through cmake to find the corresponding header files. A copy of this\n\n# file was created in /usr/share/cmake-2.8/Modules (depending on the CMAKE_ROOT variable).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(\"-- Kindr found (include: /usr/local/include/Kindr/include)\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ihmc-perception/third-party/kindr/cmake/FindROS.cmake" : {
      "ObjectId" : "89b5ffab0d61716db39b7d25997c526a1f5f2ee7",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ROS\n\n# This module finds an installed ROS package.\n\n#\n\n# It sets the following variables:\n\n#  ROS_FOUND       - Set to false, or undefined, if ROS isn't found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which ROS was found only if not quiet\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# warning if ROS is required but not found\n",
        "Line" : 20,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Set node dependencies\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Get ROS includes\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Get library folders\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Get libraries\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Include directories\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Linking directories\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "ihmc-perception/third-party/kindr/doc/doxygen/CMakeLists.txt" : {
      "ObjectId" : "b6b82966cc4db514d754f4991438e9bdfca0a7f6",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013, Christian Gehring, Hannes Sommer, Paul Furgale, Remo Diethelm\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#     * Redistributions of source code must retain the above copyright\n\n#       notice, this list of conditions and the following disclaimer.\n\n#     * Redistributions in binary form must reproduce the above copyright\n\n#       notice, this list of conditions and the following disclaimer in the\n\n#       documentation and/or other materials provided with the distribution.\n\n#     * Neither the name of the Autonomous Systems Lab, ETH Zurich nor the\n\n#       names of its contributors may be used to endorse or promote products\n\n#       derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL Christian Gehring, Hannes Sommer, Paul Furgale,\n\n# Remo Diethelm BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n\n# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n\n# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------#\n\n# Documentation\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------#",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/third-party/kindr/test/CMakeLists.txt" : {
      "ObjectId" : "d3920a8c21cbc409de51719e96addb142c2aa24f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013, Christian Gehring, Hannes Sommer, Paul Furgale, Remo Diethelm\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#     * Redistributions of source code must retain the above copyright\n\n#       notice, this list of conditions and the following disclaimer.\n\n#     * Redistributions in binary form must reproduce the above copyright\n\n#       notice, this list of conditions and the following disclaimer in the\n\n#       documentation and/or other materials provided with the distribution.\n\n#     * Neither the name of the Autonomous Systems Lab, ETH Zurich nor the\n\n#       names of its contributors may be used to endorse or promote products\n\n#       derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL Christian Gehring, Hannes Sommer, Paul Furgale,\n\n# Remo Diethelm BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n\n# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n\n# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project configuration\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the build type.  Options are:\n\n#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage\n\n#  Debug          : w/ debug symbols, w/o optimization\n\n#  Release        : w/o debug symbols, w/ optimization\n\n#  RelWithDebInfo : w/ debug symbols, w/ optimization\n\n#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries\n\n#set(ROS_BUILD_TYPE Debug)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################\n\n# Unit Tests\n\n################################\n\n################################\n\n# GTest\n\n################################\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro globs all tests to a list so we can run them post-build.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Run all unit tests post-build.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "ihmc-perception/third-party/libpointmatcher/CMakeLists.txt" : {
      "ObjectId" : "5b882b4eb98d56e8c89fb6d8d92c9c8f5bfe154d",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Extract version from header\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if 32 bit platform\n\n# By default, libpointmatcher is not compatible with and will not build on a \n\n# 32 bit system\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## WARNING: unsupported\n\n## To force install as a 32 bit library, set BUILD_32 to true\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#======================= installation =====================================\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Offer the user the choice of overriding the installation directories\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make relative paths absolute (needed later on)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install package.xml for catkin\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#===========================================================================\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Documentation\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# initially\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# gtest and yaml-cpp\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# boost\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# eigen 3\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# nabo\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# optionally, look for OpenCL library\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if found, add\n",
        "Line" : 107,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# yaml-cpp\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# link rt support if POSIX timers are used\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# include all libs so far\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Pointmatcher lib and install\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# create doc before installing\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Gather all libraries under one variable\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Example programs\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Evaluation programs\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Unit testing\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#=============================================\n\n# to allow find_package() on pointmatcher\n\n#=============================================\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Create the libpointmatcherConfig.cmake and libpointmatcherConfigVersion files\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# ... for the build tree\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#configure_file(libpointmatcherConfig.cmake.in\n\n#  \"${PROJECT_BINARY_DIR}/libpointmatcherConfig.cmake\" @ONLY)\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Change variables for the install tree\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#${CONF_INCLUDE_DIRS} )\n",
        "Line" : 243,
        "CharPositionInLine" : 47
      },
      "31" : {
        "Text" : "# gather all the includes but remove ones in the source tree\n\n# because we added an include for the local yaml-cpp-pm we should also remove it\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Generate cmake for versionning\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Install the libpointmatcherConfig.cmake and libpointmatcherConfigVersion.cmake\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# For Windows\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# VS2012 does not support tuples correctly yet\n",
        "Line" : 267,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 36
    },
    "ihmc-perception/third-party/libpointmatcher/Makefile" : {
      "ObjectId" : "8f3cdd21848fa69a4ffa084935ce144451ef5714",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ihmc-perception/third-party/libpointmatcher/UseDoxygen.cmake" : {
      "ObjectId" : "2dbfec0628b9cb1ec855bbeccacfaeffc30cdca0",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Run Doxygen\n\n#\n\n# Adds a doxygen target that runs doxygen to generate the html\n\n# and optionally the LaTeX API documentation.\n\n# The doxygen target is added to the doc target as a dependency.\n\n# i.e.: the API documentation is built with:\n\n#  make doc\n\n#\n\n# USAGE: GLOBAL INSTALL\n\n#\n\n# Install it with:\n\n#  cmake ./ && sudo make install\n\n# Add the following to the CMakeLists.txt of your project:\n\n#  include(UseDoxygen OPTIONAL)\n\n# Optionally copy Doxyfile.in in the directory of CMakeLists.txt and edit it.\n\n#\n\n# USAGE: INCLUDE IN PROJECT\n\n#\n\n#  set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})\n\n#  include(UseDoxygen)\n\n# Add the Doxyfile.in and UseDoxygen.cmake files to the projects source directory.\n\n#\n\n#\n\n# Variables you may define are:\n\n#  DOXYFILE_SOURCE_DIR - Path where the Doxygen input files are.\n\n#  \tDefaults to the current source and binary directory.\n\n#  DOXYFILE_OUTPUT_DIR - Path where the Doxygen output is stored. Defaults to \"doc\".\n\n#\n\n#  DOXYFILE_LATEX - Set to \"NO\" if you do not want the LaTeX documentation\n\n#  \tto be built.\n\n#  DOXYFILE_LATEX_DIR - Directory relative to DOXYFILE_OUTPUT_DIR where\n\n#  \tthe Doxygen LaTeX output is stored. Defaults to \"latex\".\n\n#\n\n#  DOXYFILE_HTML_DIR - Directory relative to DOXYFILE_OUTPUT_DIR where\n\n#  \tthe Doxygen html output is stored. Defaults to \"html\".\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#  Copyright (c) 2009, 2010 Tobias Rautenkranz <tobias@rautenkranz.ch>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## LaTeX\n",
        "Line" : 78,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "ihmc-perception/third-party/libpointmatcher/contrib/CMakeLists.txt" : {
      "ObjectId" : "cc8b13684e37cbcd7905327b459d76f261c3c44c",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# External libraries packed with libpointmatcher\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GTest\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Wrapped yaml-cpp\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ihmc-perception/third-party/libpointmatcher/contrib/yaml-cpp-pm/CMakeLists.txt" : {
      "ObjectId" : "c823e38f249cb2f0390124546aa54153a037fddb",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n### Project options\n\n###\n\n## Project stuff\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build options\n\n# --> General\n\n# see http://www.cmake.org/cmake/help/cmake2.6docs.html#variable:BUILD_SHARED_LIBS\n\n#     http://www.cmake.org/cmake/help/cmake2.6docs.html#command:add_library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --> Apple\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --> Microsoft Visual C++\n\n# see http://msdn.microsoft.com/en-us/library/aa278396(v=VS.60).aspx\n\n#     http://msdn.microsoft.com/en-us/library/2kzt1wy3(v=VS.71).aspx\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n### Sources, headers, directories and libs\n\n###\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n### General compilation settings\n\n###\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use or build Windows DLL\n",
        "Line" : 63,
        "CharPositionInLine" : 41
      },
      "7" : {
        "Text" : "# GCC specialities\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "### General stuff\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# DLLs do not have a \"lib\" prefix\n\n# same for DLL import libs\n",
        "Line" : 74,
        "CharPositionInLine" : 38
      },
      "10" : {
        "Text" : "# CMake workaround (2.8.3)\n",
        "Line" : 76,
        "CharPositionInLine" : 35
      },
      "11" : {
        "Text" : "### Project stuff\n",
        "Line" : 79,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#\n",
        "Line" : 88,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "#\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Microsoft VisualC++ specialities\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "### General stuff\n\n# a) Change MSVC runtime library settings (/MD[d], /MT[d], /ML[d] (single-threaded until VS 2003))\n\n#    plus set lib suffix for later use and project label accordingly\n\n# see http://msdn.microsoft.com/en-us/library/aa278396(v=VS.60).aspx\n\n#     http://msdn.microsoft.com/en-us/library/2kzt1wy3(v=VS.71).aspx\n",
        "Line" : 111,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# CMake defaults to /MD for MSVC\n",
        "Line" : 116,
        "CharPositionInLine" : 25
      },
      "20" : {
        "Text" : "#\n",
        "Line" : 118,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# User wants to have static runtime libraries (/MT, /ML)\n\n# User wants to have old single-threaded static runtime libraries\n",
        "Line" : 119,
        "CharPositionInLine" : 24
      },
      "22" : {
        "Text" : "# correct linker options\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#\n",
        "Line" : 142,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# b) Change prefix for static libraries\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# to distinguish static libraries from DLL import libs\n",
        "Line" : 146,
        "CharPositionInLine" : 40
      },
      "26" : {
        "Text" : "# c) Correct suffixes for static libraries\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "### General stuff\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "### Project stuff\n\n# /W3 = set warning level; see http://msdn.microsoft.com/en-us/library/thxezb7y.aspx\n\n# /wd4127 = disable warning C4127 \"conditional expression is constant\"; see http://msdn.microsoft.com/en-us/library/6t66728h.aspx\n\n# /wd4355 = disable warning C4355 \"'this' : used in base member initializer list\"; http://msdn.microsoft.com/en-us/library/3c594ae3.aspx\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "###\n\n### Library\n\n###\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# correct library names\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 31
    },
    "ihmc-perception/third-party/libpointmatcher/contrib/yaml-cpp-pm/util/CMakeLists.txt" : {
      "ObjectId" : "22339f0258b3a4ec3456e78f135a3bdbceb93f08",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/third-party/libpointmatcher/evaluations/CMakeLists.txt" : {
      "ObjectId" : "e80a8daf02b2e56abfed83f2fc573af6ec820c0e",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/third-party/libpointmatcher/examples/CMakeLists.txt" : {
      "ObjectId" : "061f99b0537e288f6879a8ef21f123d963707f22",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/third-party/libpointmatcher/utest/CMakeLists.txt" : {
      "ObjectId" : "a26e5ff4db2584cabf91773a16329cc3ae340422",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-perception/third-party/libpointmatcher/utest/CTestCustom.cmake" : {
      "ObjectId" : "f716429895e085edaa9d1b12a273c7761c658f14",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-robotics-toolkit/NativeCommonOps/CMakeLists.txt" : {
      "ObjectId" : "ed594516ff7254f2bd52f6defe5c3e39ac803e71",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ihmc-ros-tools/ROSMessagesAndServices/grid_map_msg/CMakeLists.txt" : {
      "ObjectId" : "a399b41d318fc721172994623e814759135d0e5c",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################\n\n## Declare ROS messages and services ##\n\n#######################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Generate services in the 'srv' folder\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#INCLUDE_DIRS include\n\n#LIBRARIES\n\n#CATKIN_DEPENDS std_msgs message_runtime\n\n#DEPENDS\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "ihmc-sensor-processing/csrc/ransac_schnabel/CMakeLists.txt" : {
      "ObjectId" : "4745fe93c83646e48ed4d96daaebd8e46a99320d",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "valkyrie/src/main/resources/models/val_description/CMakeLists.txt" : {
      "ObjectId" : "358e2d9c16c9edba63afee43936fec01bf686fbf",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Xacro files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Robot files\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create output directories\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate urdf's and put them in the /model/urdf directory\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install urdf and xacro files\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "valkyrie/src/main/resources/models/val_description/model/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "63c116c5cdb697b21961e1f3f494a034e5ab94e7",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/bin-version-check/node_modules/semver/Makefile" : {
      "ObjectId" : "71af0e9750cd0aba158bd9dfd77fbdb6c8d765f3",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/body/node_modules/bytes/Makefile" : {
      "ObjectId" : "8e8640f2e6d3679fc85a93826525da218733026f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/debug/Makefile" : {
      "ObjectId" : "584da8bf938e639ece3ba2bd4105c215c2b1ff51",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Path\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# applications\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "websitedocs/website/node_modules/delayed-stream/Makefile" : {
      "ObjectId" : "b4ff85a33b6eb482476385b7c3e6661ec9c9eb0c",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/es-abstract/Makefile" : {
      "ObjectId" : "959bbd49c1def0b484e00ec993e35158f4e1c71f",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "websitedocs/website/node_modules/es-to-primitive/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "websitedocs/website/node_modules/extsprintf/Makefile" : {
      "ObjectId" : "db845189ad1ba05a37c881e06b8c6e082420148d",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2012, Joyent, Inc. All rights reserved.\n\n#\n\n# Makefile: top-level Makefile\n\n#\n\n# This Makefile contains only repo-specific logic and uses included makefiles\n\n# to supply common targets (javascriptlint, jsstyle, restdown, etc.), which are\n\n# used by other repos as well.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Files\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default target is \"check\"\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "websitedocs/website/node_modules/foreach/Makefile" : {
      "ObjectId" : "eae41178666a0e7f624dd07f1e9fc8d8e38e038b",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/imagemin-svgo/node_modules/svgo/Makefile" : {
      "ObjectId" : "a757add0003b303f6cf60fd11838509d377a5aee",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/is-callable/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "websitedocs/website/node_modules/is-date-object/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "websitedocs/website/node_modules/is-regex/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "websitedocs/website/node_modules/is-symbol/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "websitedocs/website/node_modules/isarray/Makefile" : {
      "ObjectId" : "787d56e1e982e48588bc199f36f0d50cb4724066",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/json-stringify-safe/Makefile" : {
      "ObjectId" : "36088c723a3b3f96e449136639da88e43cd716dd",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/multipipe/Makefile" : {
      "ObjectId" : "d1df0ab3d95ac0841d24683cf836a9c1ac290bd0",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/object.getownpropertydescriptors/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "websitedocs/website/node_modules/remarkable/Makefile" : {
      "ObjectId" : "6af72754c1f8143951bd501cacbbcb0624f67b61",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Browserify\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Minify\n",
        "Line" : 66,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "websitedocs/website/node_modules/svgo/Makefile" : {
      "ObjectId" : "c11daab930f8fa30cfcfbf543575c73ea03be65b",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "websitedocs/website/node_modules/tiny-lr/node_modules/debug/Makefile" : {
      "ObjectId" : "3ddd1360e6a95e6d7161f2d4d4f8cb9a0816f577",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Path\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# applications\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "websitedocs/website/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2019-01-03T20:59:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 122,
    "MAKEFILE" : 31
  },
  "ElapsedTime" : 24396
}