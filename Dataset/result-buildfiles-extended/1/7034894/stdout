{
  "Repository" : "7034894",
  "Revision" : "HEAD",
  "ObjectId" : "1d41de84633bf40ddf0ad50165d77200e3d8b5fd",
  "CommitTime" : "2019-04-17T16:08:52Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e51cb385333e6127c2bc370345114bff8193358c",
      "LastModified" : "2019-04-05T10:43:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OK to clear PROJECT_VERSION on project()\n\n# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n\n# Support no if() IN_LIST operator\n\n# Honor visibility properties for all targets\n",
        "Line" : 4,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Allow unmet dependencies to be met using CMake's ExternalProject mechanics, which\n\n# may require downloading the source code.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This option can be used to disable building and running unit tests which depend on gtest\n\n# in cases where it is not possible to build or find a valid version of gtest.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME: The --coverage flag needs to be removed when building assembly\n\n# tests for this to work.\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 54,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# This option disables the building and running of the assembly verification tests\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Disable warnings regarding deprecated parts of the library while building\n\n# and testing those parts of the library.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Intel silently ignores '-Wno-deprecated-declarations',\n\n# warning no. 1786 must be explicitly disabled.\n\n# See #631 for rationale.\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Disable deprecation warnings for release builds (when -Werror is enabled).\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 167,
        "CharPositionInLine" : 52
      },
      "20" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Coverage build type\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Set up directories\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Build the targets\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "d0d2099814402a3fc54ed2be2b61cd4f31d5c5f7",
      "LastModified" : "2018-02-14T20:44:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add -Werror to ensure the compiler generates an error if the warning flag\n\n# doesn't exist.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "99b56dd6239048285d13bad13ed2dcde0d7ae5c2",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/GetGitVersion.cmake" : {
      "ObjectId" : "4f10f226d7a78fbb1e9fc5cb58adfa13b82ec71c",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "cmake/HandleGTest.cmake" : {
      "ObjectId" : "b9c14436dbfa4c67ab1e406d2659591812b95457",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Since 10/Feb/2017 the googletest trunk has had a bug where\n\n# -Werror=unused-function fires during the build on OS X. This is a temporary\n\n# workaround to keep our travis bots from failing. It should be removed\n\n# once gtest is fixed.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Use gmock_main instead of gtest_main because it initializes gtest as well.\n\n# Note: The libraries are listed in reverse order of their dependancies.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 2.8 and older don't respect INTERFACE_INCLUDE_DIRECTORIES, so we\n\n# have to add the paths ourselves.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# FIXME: We don't currently require the gmock library to build the tests,\n\n# and it's likely we won't find it, so we don't try. As long as we've\n\n# found the gmock/gmock.h header and gtest_main that should be good enough.\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindLLVMAr.cmake" : {
      "ObjectId" : "23469813cfab5946c86002cef85caa10e7165380",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindLLVMNm.cmake" : {
      "ObjectId" : "e56430a04f6e84629bb3e06ae511e6f14829319a",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindLLVMRanLib.cmake" : {
      "ObjectId" : "7b53e1a790590bdfc07adf41f0ae74b4a9b61ff0",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/llvm-toolchain.cmake" : {
      "ObjectId" : "fc119e52fd26a59786b3480f3e6c64c72b78ad8d",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/split_list.cmake" : {
      "ObjectId" : "67aed3fdc8579b7d9a6f06a73fa9b6844976e691",
      "LastModified" : "2018-11-13T09:56:22Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "conan/CMakeLists.txt" : {
      "ObjectId" : "15b92ca91aab9c7a49430f23699160db0c8c4ffd",
      "LastModified" : "2019-01-03T13:42:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "conan/test_package/CMakeLists.txt" : {
      "ObjectId" : "089a6c729d255c520018ef52c825c6d1b981aa1f",
      "LastModified" : "2019-01-03T13:42:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "977474f43f2abadc92f83fb069c535c077863efc",
      "LastModified" : "2019-01-03T13:42:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need extra libraries on Solaris\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Benchmark main library\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "test/AssemblyTests.cmake" : {
      "ObjectId" : "3d078586f1de1494650b73447bedd711b1c1c651",
      "LastModified" : "2019-01-03T13:42:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/BUILD" : {
      "ObjectId" : "3f174c486f25a23983e5bf9417c8b456a989050e",
      "LastModified" : "2019-01-03T13:42:07Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "#    \"-Wshorten-64-to-32\",",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some of the issues with DoNotOptimize only occur when optimization is enabled",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# FIXME: Add support for assembly tests to bazel.\n# See Issue #556\n# https://github.com/google/benchmark/issues/556",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "d3a07639bf6d6b8d00c30ed479ec42884d03968f",
      "LastModified" : "2019-04-17T16:08:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable the tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Some tests use `<cassert>` to perform the test. Therefore we must\n\n# strip -DNDEBUG from the default CMake flags in DEBUG mode.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: These flags must be added after find_package(Threads REQUIRED) otherwise\n\n# they will break the configuration check.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Demonstration executable\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Some of the issues with DoNotOptimize only occur when optimization is enabled\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# libstdc++ provides different definitions within <map> between dialects. When\n\n# LTO is enabled and -Werror is specified GCC diagnoses this ODR violation\n\n# causing the test to fail to compile. To prevent this we explicitly disable\n\n# the warning.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Attempt to work around flaky test failures when running on Appveyor servers.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################\n\n# GoogleTest Unit Tests\n\n###############################################################################\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################\n\n# Assembly Unit Tests\n\n###############################################################################\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################\n\n# Code Coverage Configuration\n\n###############################################################################\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the coverage command(s)\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    }
  },
  "FileTypes" : {
    "CMAKE" : 15,
    "BAZEL" : 1
  },
  "ElapsedTime" : 1355
}