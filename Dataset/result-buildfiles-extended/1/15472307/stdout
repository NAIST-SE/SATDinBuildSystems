{
  "Repository" : "15472307",
  "Revision" : "HEAD",
  "ObjectId" : "3236827781f303700009010718804bd03a2dc4c3",
  "CommitTime" : "2019-04-17T01:04:04Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "3dfaaaded6cec828a07ebfc4ca74ba967e905ae7",
      "LastModified" : "2018-12-14T06:29:41Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# not supported\n",
        "Line" : 50,
        "CharPositionInLine" : 5
      },
      "1" : {
        "Text" : "## NOTE: The NEEDED_CXXFLAGS are here so that CXXFLAGS can be specified at build time\n\n## **without** overwriting the CXXFLAGS which we need in order to build.\n\n## For example, when adding 'hardening flags' to the build\n\n## (e.g. -fstack-protector-strong -Wformat -Werror=format-security), we do not want to remove\n\n## -std=c++11. If you want to remove this variable please do so in a way that allows setting\n\n## custom FLAGS to work at build-time.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# '-' is 'ignore if missing' on first run\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "android/build.xml" : {
      "ObjectId" : "ed8196c3d9f12183bcd9dabaa3ad86d1401f9f0f",
      "LastModified" : "2017-04-21T10:33:45Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 93,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 94,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "build/CMakeLists.txt" : {
      "ObjectId" : "fa92da05a3fd1776e4ec53e9812048e3bf63124a",
      "LastModified" : "2019-01-04T20:48:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this addresses CMP0059 with CMake > 3.3 for PCH flags\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for debugging\n\n#set(CMAKE_VERBOSE_MAKEFILE on)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# configurale options\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# paths\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# architecture\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO Make libi2pd available to 3rd party projects via CMake as imported target\n\n# FIXME This pulls stdafx\n\n# install(EXPORT libi2pd DESTINATION ${CMAKE_INSTALL_LIBDIR})\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# compiler flags customization (by vendor)\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO Check & report to Boost dev, there should be no need for these two\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# TODO: The following is incompatible with static build and enabled hardening for OpenWRT.\n\n# Multiple definitions of __stack_chk_fail (libssp & libc)\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# -flto is added from above\n",
        "Line" : 181,
        "CharPositionInLine" : 63
      },
      "10" : {
        "Text" : "# check for c++11 support\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# gcc 4.6\n",
        "Line" : 190,
        "CharPositionInLine" : 25
      },
      "12" : {
        "Text" : "# more tweaks\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# required for <atomic>\n",
        "Line" : 206,
        "CharPositionInLine" : 76
      },
      "14" : {
        "Text" : "# required to link with -stdlib=libstdc++\n",
        "Line" : 207,
        "CharPositionInLine" : 51
      },
      "15" : {
        "Text" : "# Most security options like dynamic base, buffer & stack checks are ON by default\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# compiler flags customization (by system)\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# \"'sleep_for' is not a member of 'std::this_thread'\" in gcc 4.7/4.8\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# libraries\n\n# TODO: once CMake 3.1+ becomes mainstream, see e.g. http://stackoverflow.com/a/29871891/673826\n\n# use imported Threads::Threads instead\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# compile time flag\n",
        "Line" : 278,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace\n",
        "Line" : 286,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# set( CMAKE_THREAD_LIBS_INIT \"gcc_eh -Wl,--whole-archive -lpthread -Wl,--no-whole-archive\" )\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# TODO: Consider separate compilation for LIBI2PD_SRC for library.\n\n# No need in -fPIC overhead for binary if not interested in library\n\n# HINT: revert c266cff CMakeLists.txt: compilation speed up\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# We are probably on Windows\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# ExternalProject_Get_Property(zlib-project install_dir)\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# load includes\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# warn if for meshnet\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# show summary\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#Handle paths nicely\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# FindBoost pulls pthread for thread which is broken for static linking at least on Ubuntu 15.04\n",
        "Line" : 460,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# TODO Somehow this picks lots of unrelevant stuff with MSYS. OS X testing needed.\n",
        "Line" : 479,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Take a copy on Appveyor\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# for local builds only!\n",
        "Line" : 496,
        "CharPositionInLine" : 32
      },
      "33" : {
        "Text" : "# install(DIRECTORY ../ DESTINATION src/\n\n#   # OPTIONAL\n\n#   COMPONENT Source FILES_MATCHING\n\n#   PATTERN .git EXCLUDE\n\n#   PATTERN \"*.cpp\"\n\n#   )\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# install(DIRECTORY ../ DESTINATION src/\n\n#   # OPTIONAL\n\n#   COMPONENT Headers FILES_MATCHING\n\n#   PATTERN .git EXCLUDE\n\n#   PATTERN \"*.h\"\n\n#   )\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}\")\n",
        "Line" : 526,
        "CharPositionInLine" : 49
      },
      "36" : {
        "Text" : "# DOWNLOADED\n\n# ARCHIVE_FILE miniupnpc-win32.zip\n",
        "Line" : 563,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# There is a bug in NSI that does not handle full unix paths properly. Make\n\n# sure there is at least one set of four (4) backlasshes.\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 38
    },
    "build/cmake_modules/CheckAtomic.cmake" : {
      "ObjectId" : "b8296a1c5325c5d63416736deea2b598a9fa8ed7",
      "LastModified" : "2018-01-26T12:33:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# atomic builtins are required for threading support.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sometimes linking against libatomic is required for atomic ops, if\n\n# the platform doesn't support lock-free atomics.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This isn't necessary on MSVC, so avoid command-line switch annoyance\n\n# by only running on GCC-like hosts.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First check if atomics work without the library.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check for 64 bit atomic operations.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If not, check if the library exists, and atomics work with it.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## TODO: This define is only used for the legacy atomic operations in\n\n## llvm's Atomic.h, which should be replaced.  Other code simply\n\n## assumes C++11 <atomic> works.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "build/cmake_modules/FindMiniUPnPc.cmake" : {
      "ObjectId" : "177319122f3fa499857c50da10d3c68aba777820",
      "LastModified" : "2018-01-26T12:33:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MINIUPNPC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build/cmake_modules/TargetArch.cmake" : {
      "ObjectId" : "3761e4df8a3ef05c2db48ce07eb4cbbfa585419e",
      "LastModified" : "2018-01-26T12:33:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "qt/i2pd_qt/i2pd_qt.pro" : {
      "ObjectId" : "e24a3963954413dba42185906bbf03ec23b056ed",
      "LastModified" : "2019-01-06T16:46:17Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#qt creator does not handle this well\n\n#SOURCES += $$files(../../libi2pd/*.cpp)\n\n#SOURCES += $$files(../../libi2pd_client/*.cpp)\n\n#SOURCES += $$files(../../daemon/*.cpp)\n\n#SOURCES += $$files(./*.cpp)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#linker's -s means \"strip\"\n",
        "Line" : 218,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# see also http://doc.qt.io/qt-4.8/qt-desktop-systray-systray-pro.html for example on wince*\n\n#sources.files = $$SOURCES $$HEADERS $$RESOURCES $$FORMS i2pd_qt.pro resources images\n",
        "Line" : 239,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#INSTALLS += sources\n",
        "Line" : 243,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "tests/Makefile" : {
      "ObjectId" : "498cff170c6ea5118f1e56294bb67ee689b063f9",
      "LastModified" : "2018-06-13T16:25:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 4,
    "QMAKE" : 1,
    "MAKEFILE" : 2,
    "ANT" : 1
  },
  "ElapsedTime" : 1753
}