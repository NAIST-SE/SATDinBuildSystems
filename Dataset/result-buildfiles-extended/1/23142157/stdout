{
  "Repository" : "23142157",
  "Revision" : "HEAD",
  "ObjectId" : "8b8cdcb7384cb34efd1bba5a79ee9b45b452376e",
  "CommitTime" : "2017-12-15T13:20:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "9114304e4e945a60d2a282eebba9e81f1bc20d88",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We need a very recent cmake on windows. The reason is that test property\n\n#and install generator expressions are only supported in cmake 3.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set up the Safir SDK Core version by parsing version.txt\n\n#IMPORTANT: THE version.txt FILE NEEDS TO BE UPDATED FOR EVERY RELEASE\n\n#Remember: any updates that change APIs should update MAJOR, since\n\n#that is used for SOVERSION.\n\n#Set the SUFFIX to empty string for stable releases\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#skip comments and empty lines\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#make the version available to code as well.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# This function will install a python script into the bin directory.\n\n# If it is a *nix system the script will have \".py\" stripped from its name.\n\n#\n\n# Usage: SAFIR_INSTALL_PYTHON(SCRIPT <script>\n\n#                             [RENAME <new name>]\n\n#                             [COMPONENT <component>])\n\n#\n\n# RENAME can be used to rename a python script during installation. Please\n\n#        include the .py extension in the argument, it will still be stripped\n\n#        during installation.\n\n# COMPONENT can be used to specify which component the script belongs to.\n\n#\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set up install directories\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#This makes the include files show up in various IDEs\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Note: do not try to use this file from within the Safir SDK Core build tree!\n\n#use the version defined using ADD_DEFINITIONS above instead.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CTestCustom.cmake" : {
      "ObjectId" : "7caa0dd5a19e0efa4ad28b66e16e31e25b92bc66",
      "LastModified" : "2017-06-07T22:10:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "53515fe463d2706a0ebc0adfff05a5dfa4637e06",
      "LastModified" : "2014-10-10T12:20:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/doxygen/CMakeLists.txt" : {
      "ObjectId" : "7bda96e3c0ac6d9fba213e134dfcdc9e9fe69097",
      "LastModified" : "2014-11-14T14:15:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/examples/CMakeLists.txt" : {
      "ObjectId" : "132112c13791836a9caae2d0eac86b4945102e85",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this cmake file just installs the example code into the doc directory of the install\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/manpages/CMakeLists.txt" : {
      "ObjectId" : "0e24a52202395153fc66053ec401b3b334a62a01",
      "LastModified" : "2017-06-07T22:10:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#no support for man pages on windows...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/requirements/Makefile" : {
      "ObjectId" : "f67b89e156de25b1c1ccccce32142dee4b94175b",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "docs/users_guide/Makefile" : {
      "ObjectId" : "3c0c36d0feab4075ba4cc4d1dc02e129d34e0754",
      "LastModified" : "2017-06-07T22:10:05Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "5173d4e6f320167c87a9de6cf0466d5d996b93f3",
      "LastModified" : "2017-06-07T22:10:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#the code below needs to be able to include the Safir SDK Core headers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#we also need boost\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#use dynamic linking with boost\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set up use of threads and turn on more warnings\n",
        "Line" : 27,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#load macros for building dotnet stuff with cmake\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/dou_files/CMakeLists.txt" : {
      "ObjectId" : "6910be55cc71398e292058b685624c70468dac13",
      "LastModified" : "2017-09-19T19:49:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#The paths here are relative, so they will be put in the corresponding folders under\n\n#CMAKE_INSTALL_PREFIX\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#files will be installed to dou/Example\n",
        "Line" : 37,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 2
    },
    "examples/vehicleapp/src/CMakeLists.txt" : {
      "ObjectId" : "802ec233023323f98720ce1de10a400d90fe36fd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/vehicleapp/src/cpp/CMakeLists.txt" : {
      "ObjectId" : "2de28a3b0adfb5fd449a0e955da7538074cede9a",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/vehicleapp/src/dotnet/CMakeLists.txt" : {
      "ObjectId" : "6fb486e700e3c71dde106c7d3ab5a6378ec7d963",
      "LastModified" : "2017-09-19T19:49:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/vehicleapp/src/java/CMakeLists.txt" : {
      "ObjectId" : "6f80ba866539ce1a6fac4d9a2b42ccf321820153",
      "LastModified" : "2017-09-19T19:49:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/vehicledb/src/CMakeLists.txt" : {
      "ObjectId" : "6df164093ced3e04876fe3f886ba274ae80ea4cd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/vehicledb/src/cpp/CMakeLists.txt" : {
      "ObjectId" : "a7805782912a51896bb9726eb7f61bc513a93dcd",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# NOTE: Olib is deprecated, but we still provide this example program.\n\n#       Please don't start using Olib now!\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#no installation, since it is deprecated!\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/vehiclemmi/src/CMakeLists.txt" : {
      "ObjectId" : "2edbf6a88b5372750527a770fced0a68a681bc1a",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/vehiclemmi/src/cpp/CMakeLists.txt" : {
      "ObjectId" : "221e060f7535e99263976abfece9ae8f9e47abc3",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This is here to allow the jenkins build scripts to exclude this from\n\n#32on64 builds on 64 bit machines that do not have a 32bit Qt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find and setup Qt5 for this project\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/vehiclemmi/src/dotnet/CMakeLists.txt" : {
      "ObjectId" : "22e3627cc199cb93f10f956293f1a29e198a6fad",
      "LastModified" : "2017-09-19T19:49:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "8e8982f14bca31a09a3c5f80b992c63c08efb82b",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find an ODBC installation, of either iODBC or UnixODBC\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###########\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Load Qt5\n\n#\n\n# As moc files are generated in the binary dir, tell CMake\n\n# to always look for includes there:\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Install a target to the proper place. This function tries to put all parts\n\n# of the targets into the correct places.\n\n#\n\n# Usage: SAFIR_INSTALL(TARGETS <target1> .. <targetN>\n\n#                      [JNI]\n\n#                      [COMPONENT <component>])\n\n#\n\n# JNI: Use flag to specify that this is a Java Native Interface library.\n\n#      This will cause namelink installation to be handled slightly differently.\n\n# COMPONENT: Specify which component the target belongs to. Can be Runtime,\n\n#            Tools, Development or TestSuite. Is set to Runtime if not specified.\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#check component and use Runtime if it was not specified explicitly\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#UTILITY means that it is a dotnet or java target, probably\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "################ Dotnet ####################\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#by default assemblies get installed here\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#except exes on windows\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#and on unix systems we want a little shell script in bin to launch exes with\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "#we need the assembly file name, so we get the full path first\n",
        "Line" : 100,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "#and strip the path off\n",
        "Line" : 102,
        "CharPositionInLine" : 70
      },
      "12" : {
        "Text" : "#and install it to bin directory\n",
        "Line" : 107,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "#################### Java ########################\n",
        "Line" : 114,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#Not a dotnet or java thing\n",
        "Line" : 129,
        "CharPositionInLine" : 11
      },
      "15" : {
        "Text" : "############### C/C++ ####################\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#Runtime and Tools components need special treatment.\n",
        "Line" : 148,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "#JNI libraries need to have their namelink installed as part of runtime instead of development.\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Install pdb files on windows\n",
        "Line" : 172,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "###########\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#We need to collect all library paths so that tests on windows (where there is no rpath equivalent)\n\n#and java and dotnet tests on both platforms can find libraries.\n\n#we also collect paths to make header check test linking work\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# This is an \"overload\" of the builtin ADD_LIBRARY function. The\n\n# purpose is threefold:\n\n#\n\n# 1. Set the version properties (VERSION and SOVERSION) on the targets, to make *nix\n\n#    builds get correct library naming.\n\n# 2. Collect the paths of all libraries so that it will be possible to link\n\n#    the header_check target.\n\n# 3. Collect the paths of all libraries so that SET_SAFIR_TEST_PROPERTIES can add them\n\n#    to PATH/LD_LIBRARY_PATH. Without this lots of tests can't execute.\n\n#\n\n# It calls the builtin ADD_LIBRARY routine when the other tasks have been performed.\n\n#\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#call the real add_library function\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#and get out of here, the rest of this function is only for our own targets\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#This will not work for studio builds, so header_check for studio generator should be skipped.\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#call the real add_library function\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#Set library versions\n",
        "Line" : 264,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#\n\n# Set up common properties on tests\n\n#\n\n# Note that it is most likely not possible to combine this function with any of the\n\n# other CMake ways of setting properties on tests. It appears that they override each other.\n\n#\n\n# Usage: SET_SAFIR_TEST_PROPERTIES(TEST <test_target>\n\n#                                  [TIMEOUT <timeout>]\n\n#                                  [CONFIG_OVERRIDE <config_dir>]\n\n#                                  [ENVIRONMENT ...])\n\n#\n\n# TIMEOUT: Time in seconds after which the test is interrupted.\n\n#          If this option is not specified the timeout will be set to 120s by default.\n\n# CONFIG_OVERRIDE: Absolute path to directory containing safir configuration. If not specified\n\n#                  it will be set to a default configuration.\n\n# ENVIRONMENT: Specify more environment variables to be passed to the test.\n\n#\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# remove any leading path separators\n",
        "Line" : 309,
        "CharPositionInLine" : 66
      },
      "29" : {
        "Text" : "#Add the library path to the environment\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "################\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\n\n# This is an \"overload\" of the builtin TARGET_LINK_LIBRARIES function.\n\n#\n\n# The purpose is to check that the keyword PRIVATE has not been left out.\n\n# This check is slightly overzealous, since not all TARGET_LINK_LIBRARIES\n\n# calls actually need to use the PRIVATE keyword, but those few exceptions\n\n# can just add it anyway.\n\n#\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "##############\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#\n\n# Set up .NET compilation\n\n#\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\n\n# Set up Java compilation\n\n#\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\n\n# Set up Python\n\n#\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\n\n# Set up Protobuf\n\n#\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#Try to make Safir able to find Protobuf on windows\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#\n\n# At last, we're ready to add our subdirectories.\n\n#\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#non-msvc systems need the cmake export file.\n\n#msvc uses autolinking, so we don't need this file there.\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "src/cmake/BuildSafirGenerated.cmake" : {
      "ObjectId" : "7184a152c87b34e169df0d8580f30bfbac1a89dd",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#******************************************************************************\n\n#\n\n# Copyright Saab AB, 2014-2015 (http://safirsdkcore.com)\n\n#\n\n# Created by: Lars Hagström <lars.hagstrom@consoden.se>\n\n#\n\n#******************************************************************************\n\n#\n\n# This file is part of Safir SDK Core.\n\n#\n\n# Safir SDK Core is free software: you can redistribute it and/or modify\n\n# it under the terms of version 3 of the GNU General Public License as\n\n# published by the Free Software Foundation.\n\n#\n\n# Safir SDK Core is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with Safir SDK Core.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n#******************************************************************************\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Documentation for this function can be found in SafirSDKCoreConfig.cmake\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Work out if we're building the Safir SDK Core source tree or not\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#load compiler settings, csharp and java!\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#We need boost headers.\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#use dynamic linking with boost\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#Debug dlls on windows need d suffix\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#\n\n# Dependency resolution\n\n#\n\n# Create custom targets dummy that we just use to have somewhere to put the dependencies.\n\n# Then, when we need to resolve a targets dependencies, we recursively look at the dummy\n\n# targets to find all of the dependencies of our dependencies.\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#recursively get all dependendencies\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "################\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#\n\n# Set up variables containing all dou files and all expected source code files\n\n#\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#put the files in a target property so the INSTALL_SAFIR_GENERATED_LIBRARY\n\n#function can know what files it needs to install\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#set up java namespace prefixing rules\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#read the line we want from the file\n",
        "Line" : 147,
        "CharPositionInLine" : 59
      },
      "14" : {
        "Text" : "#get them in reverse order so that 'a.b' will be replaced before 'a'\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#loop over all dou files\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#perform prefix insertion\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "##############\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#\n\n# Generate code\n\n#\n\n# We set up some variables to point to dots_v and dod-files and directories,\n\n# and then we define the custom command that generates the code\n\n#\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#on linux we install the dots_v script without the extension, so we have to mess about a bit here\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#write the command to a response file, since there may be maaaannnyyy dou\n\n#files and windows has problems with long command lines\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#make clean target remove the gen directory\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#We need a custom target that the library (java,cpp,dotnet) targets can depend on, since\n\n#having them all just depend on the output files will wreak havoc with cmake in parallel builds.\n\n#See http://public.kitware.com/Bug/view.php?id=12311\n",
        "Line" : 247,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#############\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#\n\n# Build CPP\n\n#\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "#start by setting up some precompiled header stuff\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#MSVC needs an extra source file, so we generate one\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#add safir link dirs.\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "#add safir include dirs.\n",
        "Line" : 286,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#include path for precompiled_header_for_cpp.h\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "#On Windows external builds autolinking for dots_cpp is used.\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#On Windows external builds autolinking is used except for other targets in the\n\n#current build tree.\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#put the include files in a target property\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "############\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#\n\n# Build Java\n\n#\n",
        "Line" : 329,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#This gets put into the manifest file by configure_file below\n",
        "Line" : 355,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "#remember that we built java\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "############\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#\n\n# Build Dotnet\n\n#\n",
        "Line" : 382,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#remember that we built dotnet\n",
        "Line" : 407,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "############\n",
        "Line" : 413,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#\n\n# Remember paths to all generated libraries, for use by tests\n\n# use get_property to get hold of the value (like below)\n\n#\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "##############\n",
        "Line" : 423,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Documentation for this function can be found in SafirSDKCoreConfig.cmake\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Work out if we're building the Safir SDK Core source tree or not\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "#For installs that happen from within the Safir SDK Core build tree we use\n\n#a lot of component stuff etc.\n",
        "Line" : 489,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "#\n\n# Work out if we're building the Safir SDK Core source tree or if\n\n# we're building a user library (i.e. external to Core).\n\n#\n\n# Will set SAFIR_EXTERNAL_BUILD to True or False.\n\n#\n\n# This is really an internal function, and should not be used by anyone\n\n# outside of BuildSafirGenerated.cmake.\n\n#\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "src/cmake/CSharpMacros.cmake" : {
      "ObjectId" : "6b2485303e89554b090582396af367fed073e3c3",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#we always generated debug info and enable optimizations, regardless of build type\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#On Windows we want to ensure that we target a specific version of the .NET framework, so we\n\n#point it out specifically. On Linux it doesnt matter so much, since we target whatever\n\n#is in the distro repos.\n\n#This protects us from Windows Update sabotaging our build machines by installing\n\n#a new .Net Framework version overnight...\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#This has to appear on the command line, not in the response file, hence we keep\n\n#it separate\n",
        "Line" : 24,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#on msvc the debug files will be named MyAssembly.pdb, but with mono they will be\n\n#named MyAssembly.dll.mdb\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#if we're not verbose we redirect output to null.\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#This disables a warning about getting properties for targets that dont exist\n\n#which is exactly what we do below.\n",
        "Line" : 106,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#set(ref_depends ${ref_depends} ${_cs_ref_file})\n",
        "Line" : 118,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#add version.cs to the list of sources, but remove it again if it was already there...\n",
        "Line" : 138,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#Log contents if needed\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#we need to write a dll map file for linux distros that split stuff into a -dev package\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#add dependencies to dll-imported stuff\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#Set some properties on the target\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#check component and use Runtime if it was not specified explicitly\n",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#This disables a warning about getting properties for targets that dont exist\n\n#which is exactly what we do below.\n",
        "Line" : 236,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#runtime and tools targets still want some stuff put in the development component.\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "src/cmake/FindACE.cmake" : {
      "ObjectId" : "b0b5ec08dda3fbf5c9196a7dd51648b87cda0155",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find the ACE client includes and library\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\n\n# ACE_INCLUDE_DIRECTORIES, where to find ace.h\n\n# ACE_LIBRARY, the libraries to link against\n\n# ACE_FOUND, if false, you cannot build anything that requires ACE\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# also defined, but not for general use are\n\n# ACE_LIBRARY, where to find the ACE library.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cmake/FindAsciidoc.cmake" : {
      "ObjectId" : "9fc2c286d6f7a2887c2736d8bcbabeab693b8956",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find asciidoc\n\n# Once done, this will define\n\n#\n\n# Asciidoc_FOUND        - system has asciidoc\n\n# A2X_EXECUTABLE        - the a2x executable\n\n# GZIP_EXECUTABLE       - the gzip executable\n\n#\n\n# ADD_ASCIIDOC_MANPAGE(...) which is described below.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Add a manpage to build from asciidoc source. This command will\n\n# also add instructions for installing the manpage.\n\n#\n\n# Usage: ADD_ASCIIDOC_MANPAGE(TARGET <target>\n\n#                             COMPONENT <component>)\n\n#\n\n# Exepects to find a source file named TARGET.asciidoc.\n\n# Call like this: add_asciidoc_manpage(sate.1).\n\n# Will generate a manpage \"sate.1\" from \"sate.1.asciidoc\", and will also generate\n\n# installation code.\n\n# Will currently only install to man1, so if you use other section this has to be updated.\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/cmake/FindCSharp.cmake" : {
      "ObjectId" : "d7c3127887f9bf770b4dc9074311433b6b7461a2",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the a csharp compiler and associated tools\n\n#\n\n# defines\n\n#\n\n# CSHARP_FOUND - system has a csharp compiler and associated tools\n\n# CSHARP_COMPILER - where to find 'gmcs' or 'csc.exe'\n\n# GACUTIL_EXECUTABLE - where to find 'gacutil'\n\n# RESGEN_EXECUTABLE - where to find 'resgen' or 'resgen2'\n\n#\n\n# On Win32 we also define\n\n#   DOTNET_FRAMEWORK_LIBPATH - directory where used .NET Framework assemblies can be found.\n\n#   CSHARP_COMPILER_FRAMEWORK_ARGUMENTS - compiler arguments needed to use the\n\n#          assemblies found in DOTNET_FRAMEWORK_LIBPATH. These can go in a response file,\n\n#          but you will need to specify -noconfig directly on the csc commandline.\n\n#\n\n# copyright (c) 2007 Arno Rehn arno@arnorehn.de\n\n# copyright (c) 2008,2014-2016 Lars Hagstrom lars.hagstrom@consoden.se\n\n#\n\n# Redistribution and use is allowed according to the terms of the GPL license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#in vs2013 express x64 we need to look one step up!\n",
        "Line" : 25,
        "CharPositionInLine" : 82
      },
      "2" : {
        "Text" : "#Check if we're using MONO.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#On Windows we want to ensure that we target version 4.0 of the .NET framework, so we\n\n#point it out specifically. On Linux it doesnt matter so much, since we target whatever\n\n#is in the distro repos.\n\n#This code below could in the future be improved to be more general, but this works for now.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake/FindIODBC.cmake" : {
      "ObjectId" : "5dbbcbd65204b1201f6dd90cdea43fb4ef365545",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the IODBC library\n\n# Once done, this will define\n\n#\n\n# IODBC_FOUND        - system has IODBC\n\n# IODBC_INCLUDE_DIRS - the IODBC include directories\n\n# IODBC_LIBRARIES    - link these to use IODBC\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include dir\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set the include dir variables and the libraries and let LIBFIND_PROCESS do the rest.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake/FindUnixODBC.cmake" : {
      "ObjectId" : "f028bc4f9f31fbbc81c05b9e67fb306aa58ad0dd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2008, OpenCog.org (http://opencog.org)\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# The license was originally included in a separate file, COPYING-CMAKE-SCRIPTS,\n\n# but since this file has been taken out of that context the contents of that file\n\n# are here:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# 1. Redistributions of source code must retain the copyright\n\n#    notice, this list of conditions and the following disclaimer.\n\n# 2. Redistributions in binary form must reproduce the copyright\n\n#    notice, this list of conditions and the following disclaimer in the\n\n#    documentation and/or other materials provided with the distribution.\n\n# 3. The name of the author may not be used to endorse or promote products\n\n#    derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n\n# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n\n# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# - Try to find the UnixODBC library; Once done this will define\n\n#\n\n# UnixODBC_FOUND - system has the UnixODBC library\n\n# UnixODBC_INCLUDE_DIRS - the UnixODBC include directory\n\n# UnixODBC_LIBRARIES - The libraries needed to use UnixODBC\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the header file\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Look for the library\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the results to the output variables.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Report the results.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/cmake/LibFindMacros.cmake" : {
      "ObjectId" : "e9e717ddc588c22873d4d141873b3ae1ff560ecb",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Damn CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/cmake/PrecompiledHeader.cmake" : {
      "ObjectId" : "bfe3ee4a861552261f63a11b362c58a88d9c0f53",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Macro for setting up precompiled headers. Usage:\n\n#\n\n#   add_precompiled_header(target header.h)\n\n#\n\n# MSVC: A source file with the same name as the header must exist and\n\n# be included in the target (E.g. header.cpp).\n\n#\n\n# Copyright (C) 2009-2013 Lars Christensen <larsch@belunktum.dk>\n\n# Copyright (C) 2013-2016 Lars Hagström <lars@foldspace.nu>\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the ‘Software’), to deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MESSAGE(STATUS \"PCH command line: ${CMAKE_CXX_COMPILER} ${_compiler_FLAGS} ${_source} -o ${_output}\")\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/cmake/SafirCompilerSettings.cmake" : {
      "ObjectId" : "31974776bf6afd98578e0f6851aa6fc4acf5a997",
      "LastModified" : "2017-09-19T19:49:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This file sets up some of the compiler flags we want for GCC and MSVC.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#turn on more warnings, set up use of threads, and set symbol visibility to hide as much as possible\n",
        "Line" : 13,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#make sure we get the correct posix version\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#this is defined by -pthread (above) in most cases, but at least when creating precompiled headers\n\n#it is not, so we define it here as well.\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#decorated name length exceeded\n\n#assignment operator could not be generated\n",
        "Line" : 37,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "#nonstandard extension used, removed due to vs2010 not having full c++11 support\n",
        "Line" : 41,
        "CharPositionInLine" : 30
      },
      "6" : {
        "Text" : "# increase warning level\n\n# Use the highest warning level for visual studio.\n",
        "Line" : 44,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "#generated libraries sometimes get very large, so we need to use bigobj compiler flag\n",
        "Line" : 53,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#enable auto-inlining for RelWithDebInfo builds\n",
        "Line" : 56,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#Set linker flag /OPT:REF (eliminates functions and/or data that are never referenced)\n\n#reduces size of executable to approx the same size as in Release mode.\n\n#Also disable incremental linking to avoid warning.\n",
        "Line" : 59,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 10
    },
    "src/cmake/SafirLoadBoost.cmake" : {
      "ObjectId" : "4010ddbf8d1242623cf89c50bdcd9bf7aebd9083",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Date_time and random is required on windows, even though we build header-only...\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Date_time is needed by boost thread on windows, so we monkey-patch that in, rather than adding link dependencies everywhere.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#make sure all linking is explicit as to what parts of boost it needs, so we clear the variable\n\n#that \"contains all\".\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Boost Asio strands can share the same implementation instance which means that hanging or long running operations can potentially block\n\n#other strands. This symbol will make the first 193 strands unique and therefor in practice avoid any shared instances. \n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#use dynamic linking with boost\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#dont use autolinking with boost\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#disable deprecated functionality that we don't want\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#we want to use boost::chrono instead of std::chrono and date_time for threads and asio\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Make Boost.Chrono header-only\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#use Boost.Chrono v2\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Make sure we only use the header-only part of Boost.DateTime\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#The xml parsing uses Boost.Spirit, which we may be using from\n\n#multiple threads at the same time\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#Set up boost for any test code (i.e. CheckCXXSourceCompiles stuff)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#We have a weird issue which causes a buffer overrun error when using Visual Studio 2013\n\n#and Boost 1.55 in 64 bit and release builds.\n\n#Don't know if this is a bug in our code or in the compiler or in boost.\n\n#The workaround below disables some optimizations and all inlining in release builds\n\n#which appears to resolve the problem.\n",
        "Line" : 81,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "#Set up our patched include files\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/cmake/SafirLoadCSharp.cmake" : {
      "ObjectId" : "bd159dcb72528336a42d619b0e9d78e0f2be94b8",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check for existence of CSharp compiler and set up compilation flags for Safir build tree.\n\n#\n\n# Defines CSHARP_FOUND if a csharp compiler could be found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if we're in an IDE we get the platform from the generator\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#Get platform and convert it to lowercase (vs2010 has it as X64 and vs2013 express as x64!)\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#make sure we set the arch of dotnet assemblies to be the same as the native code we build.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#If we're compiling with Mono on ARM we need a newish version, since\n\n#older versions of mono do not work well on ARM. Here we test for 4.0\n\n#or later, but it is quite likely we would work with 3.4 or later.\n\n#We know we don't work with 3.2.8 and earlier.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/cmake/SafirLoadJava.cmake" : {
      "ObjectId" : "bf2067b78fcbb03a6335ec15f8f7edeb278e43e8",
      "LastModified" : "2017-09-19T19:49:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check for existence of Java compiler and set up compilation flags for Safir build tree.\n\n#\n\n# Defines Java_FOUND if a Java compiler and JNI stuff is found.\n\n#\n\n# Also defines a function SAFIR_JAVAH which is described below.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Found everything!\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#old cmake versions have a UseJava file that does not support manifest files\n\n#so we instead use one that is a copy of the version from cmake 3...\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# Generate a C/C++ header file for a Java Native Interface (JNI) class.\n\n#\n\n# Usage: SAFIR_JAVAH(JAR <jar name>\n\n#                    CLASS <jni class>\n\n#                    OUTPUT_FILES <expected output files>\n\n#                    OUTPUT_DIR <directory where output should be put>)\n\n#\n\n# A target <jar name>_javah will be defined, which will generate the needed files.\n\n# Set up a dependency from your shared library to this target to ensure the\n\n# files get generated correctly.\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/cmake/UseJavaWithManifest/CMakeParseArguments.cmake" : {
      "ObjectId" : "4248176ad66488c41a2c1a6104c3bbb53765747a",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CMakeParseArguments\n\n# -------------------\n\n#\n\n#\n\n#\n\n# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords>\n\n# <multi_value_keywords> args...)\n\n#\n\n# CMAKE_PARSE_ARGUMENTS() is intended to be used in macros or functions\n\n# for parsing the arguments given to that macro or function.  It\n\n# processes the arguments and defines a set of variables which hold the\n\n# values of the respective options.\n\n#\n\n# The <options> argument contains all options for the respective macro,\n\n# i.e.  keywords which can be used when calling the macro without any\n\n# value following, like e.g.  the OPTIONAL keyword of the install()\n\n# command.\n\n#\n\n# The <one_value_keywords> argument contains all keywords for this macro\n\n# which are followed by one value, like e.g.  DESTINATION keyword of the\n\n# install() command.\n\n#\n\n# The <multi_value_keywords> argument contains all keywords for this\n\n# macro which can be followed by more than one value, like e.g.  the\n\n# TARGETS or FILES keywords of the install() command.\n\n#\n\n# When done, CMAKE_PARSE_ARGUMENTS() will have defined for each of the\n\n# keywords listed in <options>, <one_value_keywords> and\n\n# <multi_value_keywords> a variable composed of the given <prefix>\n\n# followed by \"_\" and the name of the respective keyword.  These\n\n# variables will then hold the respective value from the argument list.\n\n# For the <options> keywords this will be TRUE or FALSE.\n\n#\n\n# All remaining arguments are collected in a variable\n\n# <prefix>_UNPARSED_ARGUMENTS, this can be checked afterwards to see\n\n# whether your macro was called with unrecognized parameters.\n\n#\n\n# As an example here a my_install() macro, which takes similar arguments\n\n# as the real install() command:\n\n#\n\n# ::\n\n#\n\n#    function(MY_INSTALL)\n\n#      set(options OPTIONAL FAST)\n\n#      set(oneValueArgs DESTINATION RENAME)\n\n#      set(multiValueArgs TARGETS CONFIGURATIONS)\n\n#      cmake_parse_arguments(MY_INSTALL \"${options}\" \"${oneValueArgs}\" \"${multiValueArgs}\" ${ARGN} )\n\n#      ...\n\n#\n\n#\n\n#\n\n# Assume my_install() has been called like this:\n\n#\n\n# ::\n\n#\n\n#    my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\n\n#\n\n#\n\n#\n\n# After the cmake_parse_arguments() call the macro will have set the\n\n# following variables:\n\n#\n\n# ::\n\n#\n\n#    MY_INSTALL_OPTIONAL = TRUE\n\n#    MY_INSTALL_FAST = FALSE (this option was not used when calling my_install()\n\n#    MY_INSTALL_DESTINATION = \"bin\"\n\n#    MY_INSTALL_RENAME = \"\" (was not used)\n\n#    MY_INSTALL_TARGETS = \"foo;bar\"\n\n#    MY_INSTALL_CONFIGURATIONS = \"\" (was not used)\n\n#    MY_INSTALL_UNPARSED_ARGUMENTS = \"blub\" (no value expected after \"OPTIONAL\"\n\n#\n\n#\n\n#\n\n# You can then continue and process these variables.\n\n#\n\n# Keywords terminate lists of values, e.g.  if directly after a\n\n# one_value_keyword another recognized keyword follows, this is\n\n# interpreted as the beginning of the new option.  E.g.\n\n# my_install(TARGETS foo DESTINATION OPTIONAL) would result in\n\n# MY_INSTALL_DESTINATION set to \"OPTIONAL\", but MY_INSTALL_DESTINATION\n\n# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Alexander Neundorf <neundorf@kde.org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first set all result variables to empty/FALSE\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# now iterate over all arguments and fill the result variables\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 122,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 123,
        "CharPositionInLine" : 63
      },
      "6" : {
        "Text" : "# ... then this marks the end of the arguments belonging to this keyword\n",
        "Line" : 124,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# propagate the result variables to the caller:\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "src/cmake/UseJavaWithManifest/UseJava.cmake" : {
      "ObjectId" : "127012fda36436c368a1e456b82022899267c76b",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# UseJava\n\n# -------\n\n#\n\n# Use Module for Java\n\n#\n\n# This file provides functions for Java.  It is assumed that\n\n# FindJava.cmake has already been loaded.  See FindJava.cmake for\n\n# information on how to load Java into your CMake project.\n\n#\n\n# ::\n\n#\n\n#  add_jar(target_name\n\n#          [SOURCES] source1 [source2 ...] [resource1 ...]\n\n#          [INCLUDE_JARS jar1 [jar2 ...]]\n\n#          [ENTRY_POINT entry]\n\n#          [VERSION version]\n\n#          [OUTPUT_NAME name]\n\n#          [OUTPUT_DIR dir]\n\n#          )\n\n#\n\n# This command creates a <target_name>.jar.  It compiles the given\n\n# source files (source) and adds the given resource files (resource) to\n\n# the jar file.  If only resource files are given then just a jar file\n\n# is created.  The list of include jars are added to the classpath when\n\n# compiling the java sources and also to the dependencies of the target.\n\n# INCLUDE_JARS also accepts other target names created by add_jar.  For\n\n# backwards compatibility, jar files listed as sources are ignored (as\n\n# they have been since the first version of this module).\n\n#\n\n# The default OUTPUT_DIR can also be changed by setting the variable\n\n# CMAKE_JAVA_TARGET_OUTPUT_DIR.\n\n#\n\n# Additional instructions:\n\n#\n\n# ::\n\n#\n\n#    To add compile flags to the target you can set these flags with\n\n#    the following variable:\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        set(CMAKE_JAVA_COMPILE_FLAGS -nowarn)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    To add a path or a jar file to the class path you can do this\n\n#    with the CMAKE_JAVA_INCLUDE_PATH variable.\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        set(CMAKE_JAVA_INCLUDE_PATH /usr/share/java/shibboleet.jar)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    To use a different output name for the target you can set it with:\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        add_jar(foobar foobar.java OUTPUT_NAME shibboleet.jar)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    To use a different output directory than CMAKE_CURRENT_BINARY_DIR\n\n#    you can set it with:\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        add_jar(foobar foobar.java OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    To define an entry point in your jar you can set it with the ENTRY_POINT\n\n#    named argument:\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        add_jar(example ENTRY_POINT com/examples/MyProject/Main)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    To define a custom manifest for the jar, you can set it with the manifest\n\n#    named argument:\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        add_jar(example MANIFEST /path/to/manifest)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    To add a VERSION to the target output name you can set it using\n\n#    the VERSION named argument to add_jar. This will create a jar file with the\n\n#    name shibboleet-1.0.0.jar and will create a symlink shibboleet.jar\n\n#    pointing to the jar with the version information.\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#     If the target is a JNI library, utilize the following commands to\n\n#     create a JNI symbolic link:\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        set(CMAKE_JNI_TARGET TRUE)\n\n#        add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\n\n#        install_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)\n\n#        install_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#     If a single target needs to produce more than one jar from its\n\n#     java source code, to prevent the accumulation of duplicate class\n\n#     files in subsequent jars, set/reset CMAKE_JAR_CLASSES_PREFIX prior\n\n#     to calling the add_jar() function:\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)\n\n#        add_jar(foo foo.java)\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#        set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)\n\n#        add_jar(bar bar.java)\n\n#\n\n#\n\n#\n\n# Target Properties:\n\n#\n\n# ::\n\n#\n\n#    The add_jar() functions sets some target properties. You can get these\n\n#    properties with the\n\n#       get_property(TARGET <target_name> PROPERTY <propery_name>)\n\n#    command.\n\n#\n\n#\n\n#\n\n# ::\n\n#\n\n#    INSTALL_FILES      The files which should be installed. This is used by\n\n#                       install_jar().\n\n#    JNI_SYMLINK        The JNI symlink which should be installed.\n\n#                       This is used by install_jni_symlink().\n\n#    JAR_FILE           The location of the jar file so that you can include\n\n#                       it.\n\n#    CLASS_DIR          The directory where the class files can be found. For\n\n#                       example to use them with javah.\n\n#\n\n# ::\n\n#\n\n#  find_jar(<VAR>\n\n#           name | NAMES name1 [name2 ...]\n\n#           [PATHS path1 [path2 ... ENV var]]\n\n#           [VERSIONS version1 [version2]]\n\n#           [DOC \"cache documentation string\"]\n\n#           )\n\n#\n\n# This command is used to find a full path to the named jar.  A cache\n\n# entry named by <VAR> is created to stor the result of this command.\n\n# If the full path to a jar is found the result is stored in the\n\n# variable and the search will not repeated unless the variable is\n\n# cleared.  If nothing is found, the result will be <VAR>-NOTFOUND, and\n\n# the search will be attempted again next time find_jar is invoked with\n\n# the same variable.  The name of the full path to a file that is\n\n# searched for is specified by the names listed after NAMES argument.\n\n# Additional search locations can be specified after the PATHS argument.\n\n# If you require special a version of a jar file you can specify it with\n\n# the VERSIONS argument.  The argument after DOC will be used for the\n\n# documentation string in the cache.\n\n#\n\n# ::\n\n#\n\n#  install_jar(TARGET_NAME DESTINATION)\n\n#\n\n# This command installs the TARGET_NAME files to the given DESTINATION.\n\n# It should be called in the same scope as add_jar() or it will fail.\n\n#\n\n# ::\n\n#\n\n#  install_jni_symlink(TARGET_NAME DESTINATION)\n\n#\n\n# This command installs the TARGET_NAME JNI symlinks to the given\n\n# DESTINATION.  It should be called in the same scope as add_jar() or it\n\n# will fail.\n\n#\n\n# ::\n\n#\n\n#  create_javadoc(<VAR>\n\n#                 PACKAGES pkg1 [pkg2 ...]\n\n#                 [SOURCEPATH <sourcepath>]\n\n#                 [CLASSPATH <classpath>]\n\n#                 [INSTALLPATH <install path>]\n\n#                 [DOCTITLE \"the documentation title\"]\n\n#                 [WINDOWTITLE \"the title of the document\"]\n\n#                 [AUTHOR TRUE|FALSE]\n\n#                 [USE TRUE|FALSE]\n\n#                 [VERSION TRUE|FALSE]\n\n#                 )\n\n#\n\n# Create java documentation based on files or packages.  For more\n\n# details please read the javadoc manpage.\n\n#\n\n# There are two main signatures for create_javadoc.  The first signature\n\n# works with package names on a path with source files:\n\n#\n\n# ::\n\n#\n\n#    Example:\n\n#    create_javadoc(my_example_doc\n\n#      PACKAGES com.exmaple.foo com.example.bar\n\n#      SOURCEPATH \"${CMAKE_CURRENT_SOURCE_DIR}\"\n\n#      CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n\n#      WINDOWTITLE \"My example\"\n\n#      DOCTITLE \"<h1>My example</h1>\"\n\n#      AUTHOR TRUE\n\n#      USE TRUE\n\n#      VERSION TRUE\n\n#    )\n\n#\n\n#\n\n#\n\n# The second signature for create_javadoc works on a given list of\n\n# files.\n\n#\n\n# ::\n\n#\n\n#    create_javadoc(<VAR>\n\n#                   FILES file1 [file2 ...]\n\n#                   [CLASSPATH <classpath>]\n\n#                   [INSTALLPATH <install path>]\n\n#                   [DOCTITLE \"the documentation title\"]\n\n#                   [WINDOWTITLE \"the title of the document\"]\n\n#                   [AUTHOR TRUE|FALSE]\n\n#                   [USE TRUE|FALSE]\n\n#                   [VERSION TRUE|FALSE]\n\n#                  )\n\n#\n\n#\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#    create_javadoc(my_example_doc\n\n#      FILES ${example_SRCS}\n\n#      CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\n\n#      WINDOWTITLE \"My example\"\n\n#      DOCTITLE \"<h1>My example</h1>\"\n\n#      AUTHOR TRUE\n\n#      USE TRUE\n\n#      VERSION TRUE\n\n#    )\n\n#\n\n#\n\n#\n\n# Both signatures share most of the options.  These options are the same\n\n# as what you can find in the javadoc manpage.  Please look at the\n\n# manpage for CLASSPATH, DOCTITLE, WINDOWTITLE, AUTHOR, USE and VERSION.\n\n#\n\n# The documentation will be by default installed to\n\n#\n\n# ::\n\n#\n\n#    ${CMAKE_INSTALL_PREFIX}/share/javadoc/<VAR>\n\n#\n\n#\n\n#\n\n# if you don't set the INSTALLPATH.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2013 OpenGamma Ltd. <graham@opengamma.com>\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n# Copyright 2010-2013 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define helper scripts\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# In CMake < 2.8.12, add_jar used variables which were set prior to calling\n\n# add_jar for customizing the behavior of add_jar. In order to be backwards\n\n# compatible, check if any of those variables are set, and use them to\n\n# initialize values of the named arguments. (Giving the corresponding named\n\n# argument will override the value set here.)\n\n#\n\n# New features should use named arguments only.\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# reset\n",
        "Line" : 358,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Ignored for backward compatibility\n",
        "Line" : 456,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# create an empty java_class_filelist\n",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Create the list of files to compile.\n",
        "Line" : 496,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Compile the java files and create a list of class files\n",
        "Line" : 501,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# NOTE: this command generates an artificial dependency file\n",
        "Line" : 503,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# create the jar file\n",
        "Line" : 526,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Add the target and make sure we have the latest resource files.\n",
        "Line" : 566,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "src/cmake/UseJavaWithManifest/UseJavaClassFilelist.cmake" : {
      "ObjectId" : "e8e6f014cf724832faa135048fe3ec1b0aae9ec8",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# UseJavaClassFilelist\n\n# --------------------\n\n#\n\n#\n\n#\n\n#\n\n#\n\n# This script create a list of compiled Java class files to be added to\n\n# a jar file.  This avoids including cmake files which get created in\n\n# the binary directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# file(GLOB_RECURSE foo RELATIVE) is broken so we need this.\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# write to file\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "src/cmake/UseJavaWithManifest/UseJavaSymlinks.cmake" : {
      "ObjectId" : "90ffdd53575dfa8fd1742defc0b73917750f3907",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# UseJavaSymlinks\n\n# ---------------\n\n#\n\n#\n\n#\n\n#\n\n#\n\n# Helper script for UseJava.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010-2011 Andreas schneider <asn@redhat.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/config/CMakeLists.txt" : {
      "ObjectId" : "36f4f8c45944a4706ed4e6b58889bd723c0a332d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Work out our default install directory.  There are two reasons for all this stuff:\n\n# 1. The default CMAKE_INSTALL_PREFIX contains \"safir-sdk-core\" instead of\n\n#    \"Safir SDK Core\", which is where our installer installs the files.\n\n# 2. When installing a 32bit SDK on a 64bit OS the installer will put our files\n\n#    in c:\\Program Files (x86), and we have to compensate for that. To do that\n\n#    we try to detect if CMAKE_INSTALL_PREFIX is the default, and then use\n\n#    special CSIDL variables in the ini files.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#unset the path, so noone else tries to use it!\n",
        "Line" : 42,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 2
    },
    "src/control/CMakeLists.txt" : {
      "ObjectId" : "72d7531fe53c4321ba6ba416a9eca7bc799fa563",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control.ss/src/CMakeLists.txt" : {
      "ObjectId" : "b02f08993bdcd8bcde3944d9365bb502d3301db1",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#first we try to see if boost.process is already installed on the computer\n\n#if it is not we will have to download our own copy of it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/control/control.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "c2c32870f848a4eea7058103037fb7e61f44cc18",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control.ss/tests/dose_main_stub/CMakeLists.txt" : {
      "ObjectId" : "4447bd77c132ad5412f4d06b78f629596734bd2a",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control.ss/tests/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "037d5ab40b946d257140983c0e9d2de10db34632",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control_cli.ss/CMakeLists.txt" : {
      "ObjectId" : "febd4f0ab6f826fc669a9047b2c86fd7dc8c351d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control_cli.ss/src/CMakeLists.txt" : {
      "ObjectId" : "235471674dff11a7088d64ace67d805365890a67",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control_utils.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control_utils.ss/src/CMakeLists.txt" : {
      "ObjectId" : "329c4f89192d4bf163e84ea9f0e488af4fa60da9",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This makes the proto files show up in various IDEs\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make the generated protobuf headers available for us to include inside control_utils\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/control/control_utils.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "bed23cefc5a105b36a3775c8fbea756bb9f44c6d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/control/control_utils.ss/tests/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "97adf99966e8a751e3073a71cc3676de05b542ee",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#The tests in here need the generated protobuf headers\n\n#all the control_utils headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Need to define this to not get inconsistent dll linkage on windows.\n\n#no test is meant to actually link the control_utils library, so we can do this.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/control/control_utils.ss/tests/unit_tests/Config_test/CMakeLists.txt" : {
      "ObjectId" : "e65e0c799f3fc86db941bf4c1beb9c0d088951f3",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/CMakeLists.txt" : {
      "ObjectId" : "c6215ac65333b1d8afc50525658a0d722bf0c3e7",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/communication.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/communication.ss/src/CMakeLists.txt" : {
      "ObjectId" : "ae82a2501a91603c7bd62df8a9c522b0f63ae527",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Make the generated protobuf headers available for us to include inside communication\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/distribution/communication.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "b39fba5d2332a4d69d35568d0a4cd5d0cbdc2ebc",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/communication.ss/tests/communication_resolver/CMakeLists.txt" : {
      "ObjectId" : "4cb5014c986c20782c6c9db041fed7f12cad9506",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/communication.ss/tests/communication_test/CMakeLists.txt" : {
      "ObjectId" : "3619818b518d1822c1017e00e499fe983fac4113",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/communication.ss/tests/regression_test/CMakeLists.txt" : {
      "ObjectId" : "b6ea4f264d595a00e1968a8c31a3b304f26eff7c",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/communication.ss/tests/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "2562f63df19189960e630ed1bee15d6ad209c1fd",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/system_picture.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/system_picture.ss/src/CMakeLists.txt" : {
      "ObjectId" : "66e98d9f8bd77dd837c2c61479087dc300e44a0d",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Make the generated protobuf headers available for us to include inside system_picture\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/distribution/system_picture.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "a5f2f04d0b64e8a108af9993ba9468f453bbadfe",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/system_picture.ss/tests/component_tests/CMakeLists.txt" : {
      "ObjectId" : "6edc65727e96df7eecf7bc337ef512fd54e5259f",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/distribution/system_picture.ss/tests/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "5253a3508ef57b84c35af6ef1d49b6661cc4a924",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Most of the tests in here need the generated protobuf headers\n\n#and all need the SystemPicture headers\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Need to define this to not get inconsistent dll linkage on windows.\n\n#no test is meant to actually link the system_picture library, so we can do this.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/dope/CMakeLists.txt" : {
      "ObjectId" : "6598b5b430f09605db56182dca3a025d02f89fdc",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dope/dope_main.ss/CMakeLists.txt" : {
      "ObjectId" : "0bae0605f55ca3115acee305aaf4d73876059ab4",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dope/dope_main.ss/src/CMakeLists.txt" : {
      "ObjectId" : "a01a18975fdaf173bc127df4bf4219cd79f60961",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dope/dope_test.ss/src/CMakeLists.txt" : {
      "ObjectId" : "f3eb2d7ebda3155a8aaa414f41bbc978a21d5511",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dope/dope_test.ss/src/file_backend/CMakeLists.txt" : {
      "ObjectId" : "f7f5591d462e283b39559650e383ea1092c3cab8",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Long timeouts are needed on slow machines.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dope/dope_test.ss/src/none_backend/CMakeLists.txt" : {
      "ObjectId" : "775d8ad8a9e6ced0631b563a692071aeb3da0920",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Long timeouts are needed on slow machines.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dope/dope_test.ss/src/odbc_backend/CMakeLists.txt" : {
      "ObjectId" : "9b56569c8765e4b77d5498b2fcc5531037e904df",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dope/dope_test_dou.ss/CMakeLists.txt" : {
      "ObjectId" : "702a7a2d1070e4c2865b1a818ef254f8062c41e7",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/CMakeLists.txt" : {
      "ObjectId" : "e1cb6705d216bdcd8d337a4a6fc4252d4e461463",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_cpp.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_cpp.ss/src/CMakeLists.txt" : {
      "ObjectId" : "6f1c28d3048dff076195994de4d8264708566fee",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Boost.Atomic is added here for users of one of the Dispatcher classes on those platforms that require the library.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dose/dose_cpp.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "a82137ab01efe7fa7272ba677938a934b089770f",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_dll.ss/src/CMakeLists.txt" : {
      "ObjectId" : "9624068b84b823d4a38b1746adc639885e35bf17",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/dose/dose_dobexplorer.ss/src/CMakeLists.txt" : {
      "ObjectId" : "119c12294d71f51bf48495102639b3faf3687ea9",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_dotnet.ss/src/CMakeLists.txt" : {
      "ObjectId" : "42dbf066bc1c3aa8d07fceef265388949b82fcb7",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_internal.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_internal.ss/src/CMakeLists.txt" : {
      "ObjectId" : "bbfe51b2b5588bb05cdecb8a9ad9add98fc350b7",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#These libraries are used in our internal headers, not in the public headers so we\n\n#only make them public for the Core tree build, not for the exported cmake\n\n#configuration. This allows for other parts of core to include dose_internal things\n\n#without having to add thread and system to their link dependencies.\n\n#The reason for having different code on windows and Linux is a bug in cmake, which\n\n#makes the correct code (which is in the Linux branch) not work on Windows.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/dose/dose_internal.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "74e4a2dea09bcf50b79b374f45939d0de4810436",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_internal.ss/tests/lamport_clock_test/CMakeLists.txt" : {
      "ObjectId" : "b23136c242849562d01fbcbe641c91ee4b822a30",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TARGET_INCLUDE_DIRECTORIES(lamport_clock_test PRIVATE ../../src/include)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dose/dose_internal.ss/tests/signals_test/CMakeLists.txt" : {
      "ObjectId" : "a732edff37a17ac498a0fbed9ffd4adff624924a",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#disable lock checks\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dose/dose_java.ss/src/CMakeLists.txt" : {
      "ObjectId" : "6ae420cd49118638ae611dfdc9140b16c12f7d30",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_java.ss/src/com.saabgroup.safir.dob/CMakeLists.txt" : {
      "ObjectId" : "c0ede4185cf05c26de045caaae3337e4da57e857",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_java.ss/src/dose_java_jni/CMakeLists.txt" : {
      "ObjectId" : "b5980086d13587621db10c9da7d8e21131c582b0",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this project contains a library that has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#we need to disable some warnings, since we do some wierd things with pointers\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#depend on the javah target to ensure we get our header files.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/dose/dose_main.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_main.ss/src/CMakeLists.txt" : {
      "ObjectId" : "0ef7fdf0f785937e6d5205d927b93d40924a65e1",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_main.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "b9d25c3ce976e326abec8e8ea5eb219973b3f5be",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this executable is useful for signalling that persistence is ready in\n\n#tests where dope is not built yet.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dose/dose_main.ss/tests/component_tests/CMakeLists.txt" : {
      "ObjectId" : "e585ec3d5432a0813e0591d1c6c276c986d0c3fe",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_main.ss/tests/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "6b8e38393736945e3525a169d143d29c6bdcb21e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dose/dose_sate.ss/src/CMakeLists.txt" : {
      "ObjectId" : "06a13830b5fb1e902b1ad9cef333d87a62ae66de",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/CMakeLists.txt" : {
      "ObjectId" : "36323c74b8e1067de87a04ae8118fc744e73326e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_configuration_check.ss/src/CMakeLists.txt" : {
      "ObjectId" : "13124576a94c4ec5acbd3fb85259c331c5678c1e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_cpp.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_cpp.ss/src/CMakeLists.txt" : {
      "ObjectId" : "5ab15306a443af1815fd3eec593e15e771dd5f7e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dots/dots_cpp.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "14a04dc390973f0fb9465d1a8fe611f36883c42c",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_cpp.ss/tests/constants_test/CMakeLists.txt" : {
      "ObjectId" : "4dce8d724bc3ea643bd13595fb94a8f84d48a8fd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_dobmake.ss/src/CMakeLists.txt" : {
      "ObjectId" : "0a39ec4550108e0504bd90b5f165297ef3528c72",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_dobmake.ss/tests/many_dous/CMakeLists.txt" : {
      "ObjectId" : "d798a2cf3f21ddbc799aef7262b17ccb869b2ee5",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This is a testcase that generates lots of dou files to check\n\n#that long command lines etc work.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dots/dots_dobmake.ss/tests/separate_dirs/dous_1/CMakeLists.txt" : {
      "ObjectId" : "dd7435cdeddace0ea242abf3216363f94eff90dc",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Can be absolute paths or relative paths. If relative, they will be prefixed with CMAKE_INSTALL_PREFIX\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#files will be installed to dou/Test1\n",
        "Line" : 19,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "#Note: installation into GAC is up to user.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/dots/dots_dobmake.ss/tests/separate_dirs/dous_2/CMakeLists.txt" : {
      "ObjectId" : "23de00551a7f28801d946b4b6ebf0aa318f53d74",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(ADD_SAFIR_GENERATED_LIBRARY_NO_JAVA True)\n\n#SET(ADD_SAFIR_GENERATED_LIBRARY_NO_DOTNET True)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Can be absolute paths or relative paths. If relative, they will be prefixed with CMAKE_INSTALL_PREFIX\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#files will be installed to dou/Test1\n",
        "Line" : 27,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "#GAC is up to user, nothing we do for them...\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/dots/dots_dobmake.ss/tests/separate_dirs/dous_3/CMakeLists.txt" : {
      "ObjectId" : "5c726361a1e0c99979f2cb223ae8b66da3574342",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(ADD_SAFIR_GENERATED_LIBRARY_NO_JAVA True)\n\n#SET(ADD_SAFIR_GENERATED_LIBRARY_NO_DOTNET True)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Can be absolute paths or relative paths. If relative, they will be prefixed with CMAKE_INSTALL_PREFIX\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#files will be installed to dou/Test1\n",
        "Line" : 29,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 3
    },
    "src/dots/dots_dobmake.ss/tests/tree/CMakeLists.txt" : {
      "ObjectId" : "a434d089536a00e1d31af75fcf5ccbcedd46f7dd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_dobmake.ss/tests/tree/dous_1/CMakeLists.txt" : {
      "ObjectId" : "9193b15cd2c839e664566aeb5737f1bc34f3fb53",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Can be absolute paths or relative paths. If relative, they will be prefixed with CMAKE_INSTALL_PREFIX\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#files will be installed to dou/Test1\n",
        "Line" : 15,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "#Note: installation into GAC is up to user.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/dots/dots_dobmake.ss/tests/tree/dous_2/CMakeLists.txt" : {
      "ObjectId" : "31427f873f4c34be3764c9e9d8e2be76e9bfc00f",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Can be absolute paths or relative paths. If relative, they will be prefixed with CMAKE_INSTALL_PREFIX\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#files will be installed to dou/Test1\n",
        "Line" : 15,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "#GAC is up to user, nothing we do for them...\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/dots/dots_dobmake.ss/tests/tree/dous_3/CMakeLists.txt" : {
      "ObjectId" : "8bf288597a9c1f0a4c4b377a43c638b17f394e6e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Can be absolute paths or relative paths. If relative, they will be prefixed with CMAKE_INSTALL_PREFIX\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#files will be installed to dou/Test1\n",
        "Line" : 15,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 2
    },
    "src/dots/dots_dotnet.ss/src/CMakeLists.txt" : {
      "ObjectId" : "31c4f9aba92a33c82e7481b85bf272112930a83c",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_internal.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_internal.ss/src/CMakeLists.txt" : {
      "ObjectId" : "d0eb9507347a9f7542b3dbddc478edde8cc10a92",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Make the generated protobuf headers available for us to include inside control_utils\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dots/dots_internal.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "0806e9f9471651c1a93e457eb910e2663a2a77ec",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_internal.ss/tests/dots_xml_converter/CMakeLists.txt" : {
      "ObjectId" : "3e06bd9ea1555e7345bfb07e0e2a24b5e9261309",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_internal.ss/tests/override_test/CMakeLists.txt" : {
      "ObjectId" : "fbd583fea2a3f8c466158ee22a27836d161b194e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_internal.ss/tests/parser_test/CMakeLists.txt" : {
      "ObjectId" : "72f7d13d6ed839e2bd7f2920b051785869af424f",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_internal.ss/tests/serialization_test/CMakeLists.txt" : {
      "ObjectId" : "532fd805b8f6c5193f34fd95a88297b35f203c88",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_java.ss/src/CMakeLists.txt" : {
      "ObjectId" : "2bf18d47c731c7fd828d16d09134c3704ceabe38",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_java.ss/src/com.saabgroup.safir.dob.typesystem/CMakeLists.txt" : {
      "ObjectId" : "618c8df16afd8251bf408ce4755eea72ac066f66",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_java.ss/src/dots_java_jni/CMakeLists.txt" : {
      "ObjectId" : "9bc40c7d3f1e42d5b14bf6345b6b86872a011bef",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this project contains a library that has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#we need to disable some warnings, since we do some wierd things with pointers\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#depend on the javah target to ensure we get our header files.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/dots/dots_kernel.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_kernel.ss/src/CMakeLists.txt" : {
      "ObjectId" : "9786c9d700813ab986f4094efe76890bcdf3391d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/dots/dots_kernel.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "a8b5cd5b3516ca451876ad7a43b0a217bc18c2d2",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_test.ss/CMakeLists.txt" : {
      "ObjectId" : "ce6b2103227299345f65add92c256f46de52f22d",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_test.ss/cpp/CMakeLists.txt" : {
      "ObjectId" : "d8a3382c6ba97509eae5c6bbb7d1bbfc4890a106",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Container tests have a lot of unused values...\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/dots/dots_test.ss/dotnet/CMakeLists.txt" : {
      "ObjectId" : "2082f6a5dedd2742a7ee14a0d6fe3f67390c8922",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_test.ss/java/CMakeLists.txt" : {
      "ObjectId" : "1d00d1121156323872ed6394a1a7c35ee5c63943",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_test_dou.ss/CMakeLists.txt" : {
      "ObjectId" : "cd9b3bde6078f092e73203f92ba07d4a693c8e0d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_test_extra_dou.ss/CMakeLists.txt" : {
      "ObjectId" : "dc841b135363d9ef2d1188ab2cff34c851b8aae4",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/dots/dots_v.ss/CMakeLists.txt" : {
      "ObjectId" : "c552c23e10cae6532721b4519b29754ee52a511b",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/CMakeLists.txt" : {
      "ObjectId" : "798711f1134cd2441f2e6aa29da30f632726f0d5",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_cpp.ss/src/CMakeLists.txt" : {
      "ObjectId" : "250f8eacf47da8b17e0459bdd08947d3d63d709e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Needed on windows\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/douf/douf_dotnet.ss/src/CMakeLists.txt" : {
      "ObjectId" : "9b3e35ee5d815004f4c4ece4bf6c59242b633c19",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_java.ss/src/CMakeLists.txt" : {
      "ObjectId" : "b07a462887eeddac2e92c7f5529e81cfaa0963c5",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_java.ss/src/com.saabgroup.safir.time/CMakeLists.txt" : {
      "ObjectId" : "5bdcc96f83cd008bf2c5ae64bacf97a580997252",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_java.ss/src/douf_java_jni/CMakeLists.txt" : {
      "ObjectId" : "1b268b159e4c16910c1994f61839c6ebb8f947c4",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this project contains a library that has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#depend on the javah target to ensure we get our header files.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/douf/douf_test.ss/AceTimeConverter_test/CMakeLists.txt" : {
      "ObjectId" : "cfe8fa099976563eb964300972f98f096f63f14b",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_test.ss/CMakeLists.txt" : {
      "ObjectId" : "a9ef29856124aa87e8b4f740cce3616364ba5685",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_test.ss/ExternalTimeProvider_test/CMakeLists.txt" : {
      "ObjectId" : "194fc04a84655c7590497d9589ce9e3cc2e4cdf6",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/douf/douf_test.ss/TimeProvider_cpp_test/CMakeLists.txt" : {
      "ObjectId" : "f34c25af95fa833d598d6f811e508208dbfbd2ed",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Needed on windows\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/douf/douf_test.ss/TimeProvider_dotnet_test/CMakeLists.txt" : {
      "ObjectId" : "902bb4c1f63e0386f1e898d0b9847e15af08919d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_test.ss/TimeProvider_java_test/CMakeLists.txt" : {
      "ObjectId" : "cff570dd9cfd10fb34d9d00f943973ca0271f75b",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/douf/douf_time_library.ss/src/CMakeLists.txt" : {
      "ObjectId" : "da655e2a5b9808cf5e0be00c60928c687dec31f5",
      "LastModified" : "2017-06-08T20:52:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#we need to disable some warnings, since we do some wierd things with pointers\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/foreach/CMakeLists.txt" : {
      "ObjectId" : "f2542043c973a902b13744e440a4b82b4afa1e65",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/foreach/foreach.ss/src/CMakeLists.txt" : {
      "ObjectId" : "ee6e9bf4482e26c6be9bde9b057952a69de2d14e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/CMakeLists.txt" : {
      "ObjectId" : "a48a9b2cd3382c77febf0a5327d0a941c879672d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_config.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_config.ss/src/CMakeLists.txt" : {
      "ObjectId" : "45de13ae42fd79fed2abbf785aae5b7ec0bd1caa",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_config.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "cccce66a4348e6630570a652f5f6f0a51db36746",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_config_dump.ss/src/CMakeLists.txt" : {
      "ObjectId" : "6b687f2a098c18fe8cb96e13dea777a0bc1c9e8d",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_dump_monitor.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_dump_monitor.ss/src/CMakeLists.txt" : {
      "ObjectId" : "0a9ec53a19aced29aed0e0641a1bf98ef3eafe51",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_dump_monitor.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "ba6cf195efa0ce9917e0c5a492c1f658bb42ad40",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_reporter.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_reporter.ss/src/CMakeLists.txt" : {
      "ObjectId" : "c80266a27f2ded3745b32b082357693a8a966b45",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has an interface which is okay to call between debug/release runtimes,\n\n#and we only want one version of it, so we never want the \"d\" suffix on debug builds,\n\n#which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#breakpad needs the GNU extensions to build, so we append a new -std= here\n\n#also disable some warnings\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#we add our own breakpad build, which which should already be downloaded (it's a git submodule)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/lluf/lluf_crash_reporter.ss/src/google-breakpad/CMakeLists.txt" : {
      "ObjectId" : "a554bf3447de05276b55ae0b0e4144ab3edfeeff",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We use the cmake ExternalProject functionality to fetch and build google breakpad.\n\n#It fetches the desired revision from the breakpad svn repository.\n\n#Just change MY_SVN_REPOSITORY below to change the fetched revision.\n\n#ExternalProject also supports fetching a zip from an url, if that becomes preferable\n\n#at some stage. See http://www.kitware.com/media/html/BuildingExternalProjectsWithCMake2.8.html\n\n#\n\n#We have different build code for windows and linux:\n\n#Linux: build using configure & make, but do not install, instead the lluf_crash_reporter\n\n#library includes and links directly into the source/build directories in here.\n\n#Windows: Breakpad uses gyp to generate its project files. Unfortunately gyp is python2 only,\n\n#and we support python3-only environments. So instead we patch a cmake file on to the breakpad\n\n#source and use that to build on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/lluf/lluf_crash_reporter.ss/src/google-breakpad/build-breakpad-windows.cmake" : {
      "ObjectId" : "0c0caa8550f140ce36d707cf9c223ba1838f93e8",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_reporter.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "c5ddf3af393fd1365e96590cc9f0ab65fece052a",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_reporter.ss/tests/external_signals_test/CMakeLists.txt" : {
      "ObjectId" : "beb742931b95597f6b26c57cc81d59e132c4ac5e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_reporter.ss/tests/immediate_dump_test/CMakeLists.txt" : {
      "ObjectId" : "d8f56e5ae7eb871f5ca337e09d935e58cb0429a0",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_crash_reporter.ss/tests/simple_crash_test/CMakeLists.txt" : {
      "ObjectId" : "4eb205f53969ba98a24ce81c7ddeafdd57ef579d",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#we need to disable some warnings, since the crasher does some wierd things.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/lluf/lluf_id.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_id.ss/src/CMakeLists.txt" : {
      "ObjectId" : "64b5ecce4256eed0993cd6a307312f88c1ba0d13",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/lluf/lluf_id.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "5b2ccf8527b6113936bd2861fe2fb9f5df99b227",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_startup_synchronizer.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_startup_synchronizer.ss/src/CMakeLists.txt" : {
      "ObjectId" : "68a879208aae7993272e1358f8d6b55336a2fcf2",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has an interface which is okay to call between debug/release runtimes,\n\n#and we only want one version of it, so we never want the \"d\" suffix on debug builds,\n\n#which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/lluf/lluf_startup_synchronizer.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "2b14c12b3bed3828ed6fb959ec40a77e6143f39e",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_startup_synchronizer.ss/tests/processes/CMakeLists.txt" : {
      "ObjectId" : "3830539f099f31e555232b9d974905043c99d178",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_startup_synchronizer.ss/tests/processes_and_threads/CMakeLists.txt" : {
      "ObjectId" : "a0a216735ce3d7a5480efb7e11bc614f650073e4",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_startup_synchronizer.ss/tests/threads/CMakeLists.txt" : {
      "ObjectId" : "dee17c180480416634b3874774d4b8c86f1765ff",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/CMakeLists.txt" : {
      "ObjectId" : "fdfb8f47e4e30ced37c57ce3d008d5fc88b76ddd",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/src/CMakeLists.txt" : {
      "ObjectId" : "27ac729421b7dc211707dfd54bca31762066682f",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Some libraries are used in our internal headers, not in the public headers so we\n\n#only make them public for the Core tree build, not for the exported cmake\n\n#configuration. This allows for other parts of core to include e.g. LowLevelLogger\n\n#without having to add thread and system to their link dependencies.\n\n#The reason for having different code on windows and Linux is a bug in cmake, which\n\n#makes the correct code (which is in the Linux branch) not work on Windows.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/lluf/lluf_utils.ss/tests/AsioPeriodicTimer_test/CMakeLists.txt" : {
      "ObjectId" : "36157366604325525a9204ef5118efb38baa64cc",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/tests/Atomic_test/CMakeLists.txt" : {
      "ObjectId" : "9117099f53d5d129058b3787b1a8528f53c048e5",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(Atomic_test PRIVATE ${safir-sdk-core_SOURCE_DIR}/src/include)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/lluf/lluf_utils.ss/tests/BoostSleep_test/CMakeLists.txt" : {
      "ObjectId" : "7feaf774153e9a41756da3ce31e108fb2672c4ee",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/tests/CMakeLists.txt" : {
      "ObjectId" : "8e63dcc4bc06cf1d0197f29d467117183218df3b",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/tests/DynamicLibraryLoader_test/CMakeLists.txt" : {
      "ObjectId" : "301977f755006aec2d8614a0e6719ba50aa4fe63",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#we need to disable some warnings, since these things contain wierdness\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/lluf/lluf_utils.ss/tests/Ipc_test/CMakeLists.txt" : {
      "ObjectId" : "55fd05b99154e70ea8da937098d331357102abee",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/tests/LowLevelLogger_test/CMakeLists.txt" : {
      "ObjectId" : "91debd1f2f7437def10f0a67f950f84d6f385822",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/tests/ProcessInfo_test/CMakeLists.txt" : {
      "ObjectId" : "cf3fad566dab43cc60f1fcc7992cf477d1263c6f",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/tests/ProcessMonitor_test/CMakeLists.txt" : {
      "ObjectId" : "a900b83be13ebc32fd0404caf80f289d9cabe735",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lluf/lluf_utils.ss/tests/SystemLog_test/CMakeLists.txt" : {
      "ObjectId" : "a3209b7ee9d9136b0e8b80dda548913690143109",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logging/CMakeLists.txt" : {
      "ObjectId" : "0245d7eb651cf4f91d27538357aaf23e89ac09e7",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#LOGGING unit tests\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/logging/logging_cpp.ss/src/CMakeLists.txt" : {
      "ObjectId" : "786dc44dfe8ce42bf9963af6caf5943754485c8d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logging/logging_dotnet.ss/src/CMakeLists.txt" : {
      "ObjectId" : "e37954338249fc8934bbfd68e3c92ee426f7b724",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logging/logging_java.ss/src/CMakeLists.txt" : {
      "ObjectId" : "b6cb4c374a50fd47f1154043b15d7eb3a0500c0d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logging/logging_java.ss/src/com.saabgroup.safir/CMakeLists.txt" : {
      "ObjectId" : "59d76e6015e5e80858c679aa0963fa160262afa6",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logging/logging_java.ss/src/logging_java_jni/CMakeLists.txt" : {
      "ObjectId" : "353baac06a1663478bb52582c531e1e72e752ccf",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this project contains a library that has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#depend on the javah target to ensure we get our header files.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/logging/logging_library.ss/src/CMakeLists.txt" : {
      "ObjectId" : "f9575930aa0a1c65ce8c45cb98cefc585f48aa30",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/logging/logging_test.ss/CMakeLists.txt" : {
      "ObjectId" : "4b31d2da7beb9e7db1aa7c2abdf416748d19af54",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logging/logging_test.ss/logging_cpp/CMakeLists.txt" : {
      "ObjectId" : "8209c02941a19d503932f8f5a9b6cf9cd457b2dd",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#test needs safir_show_config\n",
        "Line" : 5,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 1
    },
    "src/logging/logging_test.ss/logging_dotnet/CMakeLists.txt" : {
      "ObjectId" : "29d626d954af8c3d540d37184d9218f7ffb11a65",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/logging/logging_test.ss/logging_java/CMakeLists.txt" : {
      "ObjectId" : "a8bfdfc651e69b355d70795cd86a8db01a25b546",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/olib/CMakeLists.txt" : {
      "ObjectId" : "a07818909cf72f49e079d1dab4b945d085522eb0",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/olib/olib_code.ss/src/CMakeLists.txt" : {
      "ObjectId" : "b90575120d3e8633147754101a0aede51ea7bec9",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#the deprecated feature still needs to build without warnings...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/olib/olib_test.ss/src/CMakeLists.txt" : {
      "ObjectId" : "059b823f02890c65864d7dd3c748c8384e9f0ef9",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#The test suite for a deprecated feature obviously doesn't want deprecation warnings...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Olib tests are not installed since the run_olib_tests.py is not updated.\n\n#since Olib is deprecated this is low priority work.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#SAFIR_INSTALL(TARGETS olib_test TEST_SUITE)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SAFIR_INSTALL_PYTHON(SCRIPT run_olib_tests.py\n\n#  COMPONENT TestSuite)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/olib/olib_test_dou.ss/CMakeLists.txt" : {
      "ObjectId" : "77daa351eca6aff5af325c168809cb7cb780a95d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/patch_check/CMakeLists.txt" : {
      "ObjectId" : "58dafd800b405c96342c3a8e0f6abe1df924b659",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/patch_check/container_destroyers/CMakeLists.txt" : {
      "ObjectId" : "5256f008e320fda3d0444a307bb69b52ec606729",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/patch_check/has_member_function_callable_with/CMakeLists.txt" : {
      "ObjectId" : "eeba15d57d614e48d6580e8e66919cda190b9a6d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/patch_check/interprocess_atomics/CMakeLists.txt" : {
      "ObjectId" : "ee1123c505a0f3609b73e9b073d5bfc7f348e84c",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This bug is fixed in 1.57\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#1.57\n",
        "Line" : 2,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 2
    },
    "src/patch_check/tmp_dir_helpers/CMakeLists.txt" : {
      "ObjectId" : "0b3906d79ce1fb7761f50e3832be5467916f2815",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#it seems very difficult to test the change made in 1_56 in a proper way.\n\n#we would need to actually check the type of a private member :(\n\n#so we just check boost version...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#1.56\n",
        "Line" : 4,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 2
    },
    "src/safir_dou/CMakeLists.txt" : {
      "ObjectId" : "84708474d3234f2cb2c14ce00ad368178896ad9e",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We configure the file into the source dir, which may seem a bit strange\n\n#for out-of-source builds, but we need all the dou files in one directory\n\n#since our tests point there for dou file loading.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/status/CMakeLists.txt" : {
      "ObjectId" : "f3b0336a64512c7f8bba2f49909ae9321c164d02",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/status/control_gui.ss/CMakeLists.txt" : {
      "ObjectId" : "039caa6e0bc6e3ca38f46d638cef28f24c30aaaf",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/status/control_gui.ss/src/CMakeLists.txt" : {
      "ObjectId" : "0e9ebb4e72ac8ada1e6fb83157758ed7cb53141b",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/status/status.ss/CMakeLists.txt" : {
      "ObjectId" : "517d0cea45d1c90b73c96a444cb8e75104beaa31",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(tests)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/status/status.ss/src/CMakeLists.txt" : {
      "ObjectId" : "bc24a2379c1494b2eead9d1da751c883a5370473",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/CMakeLists.txt" : {
      "ObjectId" : "6b25b7d5672a7747d7133681c562db345b14b319",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_backdoor.ss/src/CMakeLists.txt" : {
      "ObjectId" : "ee1b49e8e1e72c2df08efaa79752387f08cc52a6",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_cpp.ss/src/CMakeLists.txt" : {
      "ObjectId" : "d3bef34db4eb827e3cbfa2b1711b4fe84e2db49c",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_dotnet.ss/src/CMakeLists.txt" : {
      "ObjectId" : "03de6375abd79c94bd64fb36c117aed0ea2cd1cf",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_java.ss/src/CMakeLists.txt" : {
      "ObjectId" : "16fd08e8e02583aade918dbda167250eecc30e7f",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_java.ss/src/com.saabgroup.safir.application/CMakeLists.txt" : {
      "ObjectId" : "f69b23d3cdb57e484027eb6d882bb5ca451bf4f2",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_java.ss/src/com.saabgroup.safir.swreports/CMakeLists.txt" : {
      "ObjectId" : "550fcfd919af6ded996bd9cdeba9bd50416c3c41",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_java.ss/src/swre_java_jni/CMakeLists.txt" : {
      "ObjectId" : "0040e88d556cf19fd8af60e1708ef06ffa5721c6",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this project contains a library that has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#depend on the javah targets to ensure we get our header files.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/swre/swre_library.ss/src/CMakeLists.txt" : {
      "ObjectId" : "428ef9c9b87a11811ecb1f66f14754f0941d8150",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this library has a C interface and we only want one version of it,\n\n#so we never want the \"d\" suffix on debug builds, which is default on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Make our INTERNAL headers available to other parts of Core.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/swre/swre_test.ss/CMakeLists.txt" : {
      "ObjectId" : "9ce5caa7f7f3c6c8f267705d3fb22cbc601f0320",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_test.ss/swreport_cpp/CMakeLists.txt" : {
      "ObjectId" : "c7cd5a5f7f71a7afe917ef105f2900d9b8ed7952",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_test.ss/swreport_dotnet/CMakeLists.txt" : {
      "ObjectId" : "f095b0aae27c5d4821c1dd32fc2b2bf152eef169",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_test.ss/swreport_java/CMakeLists.txt" : {
      "ObjectId" : "c4200c5c63b10e31c2b1e0f3d0122457e0e6337c",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_test.ss/tracer_backdoor/CMakeLists.txt" : {
      "ObjectId" : "b51d7ca17c51e0cbe751f1babf7ceff15be579c5",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_test.ss/tracer_cpp/CMakeLists.txt" : {
      "ObjectId" : "07bf6c7d9fa498cece8e9cce256a4a73661033f9",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_test.ss/tracer_dotnet/CMakeLists.txt" : {
      "ObjectId" : "2e86444b27bc28d6c0d9cbaccb677242ed96686e",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/swre/swre_test.ss/tracer_java/CMakeLists.txt" : {
      "ObjectId" : "14a8bb5c92b90cf1a154455d9e39bf6c7ac902c7",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/CMakeLists.txt" : {
      "ObjectId" : "bd0bb3793c7acb1c01b5cc3ccd6f30aa468577d4",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/CMakeLists.txt" : {
      "ObjectId" : "bc4bc8d3644366bd336fe903e4bae4bdd4d858d4",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/Sequencer/CMakeLists.txt" : {
      "ObjectId" : "efa6f4e69368d83890b0ad489dcd70729fc263b5",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/CMakeLists.txt" : {
      "ObjectId" : "7db0bf8cf2e646558ad334fae8897723499aa0b6",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/ConnectStresser/CMakeLists.txt" : {
      "ObjectId" : "86e0b0dba68007c17eab0684c2861834552351db",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/EntityReceptionVerifier/CMakeLists.txt" : {
      "ObjectId" : "f1d9fd40b8f6698fca68b1e646689e24be32fd9c",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/EntityStresser/CMakeLists.txt" : {
      "ObjectId" : "b7e4176d3f76614639cebd9ed2fb93e34c780f74",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/LargeMessageSender/CMakeLists.txt" : {
      "ObjectId" : "47e5d416c506a10421b0ba7e3c12a4c6bdc65d8b",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/MessageLatencies/CMakeLists.txt" : {
      "ObjectId" : "e43cfd639dbf4e5f899d64f7209b1b4c5286f75d",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/MessageStresser/CMakeLists.txt" : {
      "ObjectId" : "d13955cdd2d27bb828ec13bea86ae26a16651fd1",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/MultiPingPong/CMakeLists.txt" : {
      "ObjectId" : "cea150b01e2ee152b0082bf8a90eecd1691222f8",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/RequestLatencies/CMakeLists.txt" : {
      "ObjectId" : "37a797f7092c2791c2724b4a5b0419ad64577b3f",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/RequestPingPong/CMakeLists.txt" : {
      "ObjectId" : "4f654bb41e1f09eb584285044bce2d0a15b4d463",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/StressTests/RequestStresser/CMakeLists.txt" : {
      "ObjectId" : "86cf001f852859b6b1fc88859e1ed45e70a75a5b",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/cpp/CMakeLists.txt" : {
      "ObjectId" : "0cf93798aa4a5b8fd35c1681d3ce7090a3e71b1d",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/dotnet/CMakeLists.txt" : {
      "ObjectId" : "9d076cccdaf38fa44fbf330ad54a3ca2e466ebb7",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/java/CMakeLists.txt" : {
      "ObjectId" : "19ef489e709e19c776424d60a1033882a72ab3b3",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/util/CMakeLists.txt" : {
      "ObjectId" : "643b94314d6968be4f10596e733aa549c9bb6021",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test.ss/util/dose_memory_stats/CMakeLists.txt" : {
      "ObjectId" : "9cab2eb1cb65e175a990b7b46fa0fc4eb0dca953",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/dose_test_dou.ss/CMakeLists.txt" : {
      "ObjectId" : "742a631d3d5e3595be8cdcce1a584b54220b1464",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#These files exceed the size of gccs variable tracking, so we disable it.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/header_check/CMakeLists.txt" : {
      "ObjectId" : "b431a7573d78e046940a820de44270ca7df22c8d",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Special file, but manually checked to not include windows.h\n",
        "Line" : 13,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : "#these are kind of meant to\n\n# include ace, which includes windows.h...\n\n#includes asio.hpp, which appears to include windows.h\n",
        "Line" : 14,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "#property_tree appears to have some windows.h stuff in it\n",
        "Line" : 18,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : "#here are the headers that include windows.h and should not!\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#/DoseComAux/\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/tests/header_check/configure_file.cmake" : {
      "ObjectId" : "8b28b5563fdd7629ba2989733846d4fbbd58a3e0",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/incarnation_and_control_tests/CMakeLists.txt" : {
      "ObjectId" : "e5505fceaae2403289cf97e7cdde608d36cdd718",
      "LastModified" : "2015-10-08T10:40:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/restart_nodes/CMakeLists.txt" : {
      "ObjectId" : "c44972e51024653b28aeea452c57329acf0abbe5",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/stop_orders_at_exit/CMakeLists.txt" : {
      "ObjectId" : "712f02bf9b1f4fcc129f6820161d7676bd06c0e8",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/test_support/CMakeLists.txt" : {
      "ObjectId" : "121dc9fac604dac10f0a81d13983d6513bdd5b0d",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We allow the installation of the python test support stuff since the dose and dope tests\n\n#need them to be installed (they are run without access to source code).\n\n#All other uses of these classes should access them from the source tree, using\n\n#SET_SAFIR_TEST_PROPERTIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/tests/timestamp_operations_test/CMakeLists.txt" : {
      "ObjectId" : "9f5dad2c795c886aec383963ff2bcf4578c170f6",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "513fa016783b08f7e6f21e601310908ccf909532",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/gactool/CMakeLists.txt" : {
      "ObjectId" : "e5769db596afeecda3b34d57d24566d596bd1e32",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This tool is only useful on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/util/pathed/CMakeLists.txt" : {
      "ObjectId" : "9c0e623d8474700f70f98d362480ad5e5737fe23",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This tool is only useful on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/websocket/CMakeLists.txt" : {
      "ObjectId" : "8aed403c58766a80157465f52ecc0ab3f360c1a0",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/websocket/websocket.ss/CMakeLists.txt" : {
      "ObjectId" : "f5e0f3cf4a3291d61d0171f8fa8a2f50811bfbc7",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#for old visual studio versions we can't use some C++11 features of websocketpp\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/websocket/websocket.ss/src/CMakeLists.txt" : {
      "ObjectId" : "d08010b350f1eea9cffe20c686c871b5ec7465fd",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/websocket/websocket.ss/test/CMakeLists.txt" : {
      "ObjectId" : "8e7d44b49a3032eed73d93a508e4661e67be8851",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/websocket/websocket.ss/test/stress_test/CMakeLists.txt" : {
      "ObjectId" : "6d33e61c17582139d0da1729e82ee3f1482fc876",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#uses the same config files as component tests\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/websocket/websocket.ss/test/test_client/CMakeLists.txt" : {
      "ObjectId" : "6b29b0c3bfabb7a0e299002e39d9d3a1f1945d6c",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/websocket/websocket.ss/test/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "7f13de3e540479015171dc6e96e5476ce4803185",
      "LastModified" : "2017-10-10T12:45:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 259,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 5324
}