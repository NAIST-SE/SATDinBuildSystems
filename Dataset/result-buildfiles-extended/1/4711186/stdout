{
  "Repository" : "4711186",
  "Revision" : "HEAD",
  "ObjectId" : "7684a756de9024da9451ac819900f0716f495f45",
  "CommitTime" : "2019-02-08T23:04:48Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e309eb9fcae70c8475911e3e53c75a694639beee",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the main-project name\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the minimum cmake version (as required by cmake)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set the build options\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if(ENABLE_QT5)\n\n# TODO vs ENABLE_QT4?\n\n#endif(ENABLE_QT5)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Createt the configuration file\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add project specific cmake modules (find, etc)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# configure a header file to pass some of the CMake settings\n\n# to the source code\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#ADD_DEFINITIONS ( -DENABLE_QT5 )\n\n#find_package(Qt5Widgets)\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#else()\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add specific cmake modules to find qt4 (default version finds first available QT which might not be qt4)\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Define the global output path of binaries\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the project include directory as additional include path\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Prefer static linking over dynamic\n\n#set(CMAKE_FIND_LIBRARY_SUFFIXES \".a;.so\")\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# enable C++11\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++ -std=c++11 -Wall\")\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#find_package(Qt5Core REQUIRED)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\tset(CMAKE_CXX_FLAGS \"-fPIC\")\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Configure the use of QT4\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "#add libusb and pthreads\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#include(${QT_USE_FILE})\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# TODO[TvdZ]: This linking directory should only be added if we are cross compiling\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add the source/lib directories\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Add the doxygen generation directory\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# uninstall target\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# enable make package - no code after this line !\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cmake/FindBCM.cmake" : {
      "ObjectId" : "f64c540e91972173b978646ac77205b84cd065d9",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the native BCM includes and library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\n\n#  BCM_INCLUDE_DIR, where to find png.h, etc.\n\n#  BCM_LIBRARIES, the libraries to link against to use PNG.\n\n#  BCM_FOUND, If false, do not try to use PNG.\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindCoreFoundation.cmake" : {
      "ObjectId" : "195fe55130345ea7ee6dabf70f9dff2cd27c99a8",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Find IOKit framework (Mac OS X).\n\n#\n\n# Define:\n\n# CoreFoundation_FOUND\n\n# CoreFoundation_INCLUDE_DIR\n\n# CoreFoundation_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The only platform it makes sense to check for CoreFoundation\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindGitVersion.cmake" : {
      "ObjectId" : "3ce5fe93a0cd011bfc78dd1389bb949707c2fc80",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindIOKit.cmake" : {
      "ObjectId" : "7c17be9e5fc74c518f35f38a22f02e1878e75b72",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -----------------------------------------------------------------------------\n\n# Find IOKit framework (Mac OS X).\n\n#\n\n# Define:\n\n# IOKit_FOUND\n\n# IOKit_INCLUDE_DIR\n\n# IOKit_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The only platform it makes sense to check for IOKit\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindPNG.cmake" : {
      "ObjectId" : "dd00fa5e0f4762de8797b70398fbfc8f5b738ec5",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the native PNG includes and library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\n\n#  PNG_INCLUDE_DIR, where to find png.h, etc.\n\n#  PNG_LIBRARIES, the libraries to link against to use PNG.\n\n#  PNG_DEFINITIONS - You should ADD_DEFINITONS(${PNG_DEFINITIONS}) before compiling code that includes png library files.\n\n#  PNG_FOUND, If false, do not try to use PNG.\n\n# also defined, but not for general use are\n\n#  PNG_LIBRARY, where to find the PNG library.\n\n# None of the above will be defined unles zlib can be found.\n\n# PNG depends on Zlib\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenBSD\n",
        "Line" : 23,
        "CharPositionInLine" : 41
      },
      "3" : {
        "Text" : "# png.h includes zlib.h. Sigh.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# No need to define PNG_USE_DLL here, because it's default for Cygwin.\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/FindUDev.cmake" : {
      "ObjectId" : "12a429d9f7ca5d02e6f46b69b58454006494c387",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# razor-de: Configure libudev environment\n\n#\n\n# UDEV_FOUND - system has a libudev\n\n# UDEV_INCLUDE_DIR - where to find header files\n\n# UDEV_LIBRARIES - the libraries to link against udev\n\n# UDEV_STABLE - it's true when is the version greater or equals to 143 - version when the libudev was stabilized in its API\n\n#\n\n# copyright (c) 2011 Petr Vanek <petr@scribus.info>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# retvale is 0 of the condition is \"true\" so we need to negate the value...\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/Findlibusb-1.0.cmake" : {
      "ObjectId" : "79269e88de8bfeae9a8814b9a938414446526c67",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libusb-1.0\n\n# Once done this will define\n\n#\n\n#  LIBUSB_1_FOUND - system has libusb\n\n#  LIBUSB_1_INCLUDE_DIRS - the libusb include directory\n\n#  LIBUSB_1_LIBRARIES - Link these to use libusb\n\n#  LIBUSB_1_DEFINITIONS - Compiler switches required for using libusb\n\n#\n\n#  Adapted from cmake-modules Google Code project\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  (Changes for libusb) Copyright (c) 2008 Kyle Machulis <kyle@nonpolynomial.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n#\n\n# CMake-Modules Project New BSD License\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the name of the CMake-Modules Project nor the names of its\n\n#   contributors may be used to endorse or promote products derived from this\n\n#   software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# show the LIBUSB_1_INCLUDE_DIRS and LIBUSB_1_LIBRARIES variables only in the advanced view\n",
        "Line" : 92,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/Toolchain-imx6.cmake" : {
      "ObjectId" : "3afbeaedb7d419a7645df4bfe483d97f82881a82",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# specify the cross compiler \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# where is the target environment \n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search for programs in the build host directories \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for libraries and headers in the target directories \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Toolchain-rpi.cmake" : {
      "ObjectId" : "1be297d4cf880a58ec599bcaa5968de534a964fb",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# specify the cross compiler \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# where is the target environment \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search for programs in the build host directories \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for libraries and headers in the target directories \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Toolchain-x32.cmake" : {
      "ObjectId" : "2304edc61903c8d4ab77d59f11a04c9386cfaae5",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# toolchain file for building a 32bit version on a 64bit host\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use it like this:\n\n# cmake -DCMAKE_TOOLCHAIN_FILE=Toolchain-x32.cmake <sourcedir>\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/packages.cmake" : {
      "ObjectId" : "ca821a5c8916444834359a695845711d0d372369",
      "LastModified" : "2016-06-02T17:54:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake file for generating distribution packages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"RPM\" \n",
        "Line" : 3,
        "CharPositionInLine" : 43
      },
      "2" : {
        "Text" : "# no code after following line!\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/qt4/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "25d8df39fe98e553ca2659e038d0f06281f5c9c2",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to find_package().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>]\n\n#                                           [HANDLE_COMPONENTS]\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# If the package supports components, use the HANDLE_COMPONENTS option to enable\n\n# handling them. In this case, find_package_handle_standard_args() will report\n\n# which components have been found and which are missing, and the <NAME>_FOUND\n\n# variable will be set to FALSE if any of the required components (i.e. not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call.  In this case VERSION_VAR will be set\n\n# to <NAME>_VERSION and the macro will automatically check whether the\n\n# Config module was found.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# exact version required\n",
        "Line" : 240,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 248,
        "CharPositionInLine" : 17
      },
      "16" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 259,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# print the result:\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "cmake/qt4/FindQt4.cmake" : {
      "ObjectId" : "871909f5accca74ae9725adfefcba3553b966724",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Qt 4\n\n# This module can be used to find Qt4.\n\n# The most important issue is that the Qt4 qmake is available via the system path.\n\n# This qmake is then used to detect basically everything else.\n\n# This module defines a number of key variables and macros.\n\n# The variable QT_USE_FILE is set which is the path to a CMake file that can be included\n\n# to compile Qt 4 applications and libraries.  It sets up the compilation\n\n# environment for include directories, preprocessor defines and populates a\n\n# QT_LIBRARIES variable.\n\n#\n\n# Typical usage could be something like:\n\n#   find_package(Qt4 4.4.3 REQUIRED QtCore QtGui QtXml)\n\n#   include(${QT_USE_FILE})\n\n#   add_executable(myexe main.cpp)\n\n#   target_link_libraries(myexe ${QT_LIBRARIES})\n\n#\n\n# The minimum required version can be specified using the standard find_package()-syntax\n\n# (see example above).\n\n# For compatibility with older versions of FindQt4.cmake it is also possible to\n\n# set the variable QT_MIN_VERSION to the minimum required version of Qt4 before the\n\n# find_package(Qt4) command.\n\n# If both are used, the version used in the find_package() command overrides the\n\n# one from QT_MIN_VERSION.\n\n#\n\n# When using the components argument, QT_USE_QT* variables are automatically set\n\n# for the QT_USE_FILE to pick up.  If one wishes to manually set them, the\n\n# available ones to set include:\n\n#                    QT_DONT_USE_QTCORE\n\n#                    QT_DONT_USE_QTGUI\n\n#                    QT_USE_QT3SUPPORT\n\n#                    QT_USE_QTASSISTANT\n\n#                    QT_USE_QAXCONTAINER\n\n#                    QT_USE_QAXSERVER\n\n#                    QT_USE_QTDESIGNER\n\n#                    QT_USE_QTMOTIF\n\n#                    QT_USE_QTMAIN\n\n#                    QT_USE_QTMULTIMEDIA\n\n#                    QT_USE_QTNETWORK\n\n#                    QT_USE_QTNSPLUGIN\n\n#                    QT_USE_QTOPENGL\n\n#                    QT_USE_QTSQL\n\n#                    QT_USE_QTXML\n\n#                    QT_USE_QTSVG\n\n#                    QT_USE_QTTEST\n\n#                    QT_USE_QTUITOOLS\n\n#                    QT_USE_QTDBUS\n\n#                    QT_USE_QTSCRIPT\n\n#                    QT_USE_QTASSISTANTCLIENT\n\n#                    QT_USE_QTHELP\n\n#                    QT_USE_QTWEBKIT\n\n#                    QT_USE_QTXMLPATTERNS\n\n#                    QT_USE_PHONON\n\n#                    QT_USE_QTSCRIPTTOOLS\n\n#                    QT_USE_QTDECLARATIVE\n\n#\n\n#  QT_USE_IMPORTED_TARGETS\n\n#        If this variable is set to TRUE, FindQt4.cmake will create imported\n\n#        library targets for the various Qt libraries and set the\n\n#        library variables like QT_QTCORE_LIBRARY to point at these imported\n\n#        targets instead of the library file on disk. This provides much better\n\n#        handling of the release and debug versions of the Qt libraries and is\n\n#       also always backwards compatible, except for the case that dependencies\n\n#       of libraries are exported, these will then also list the names of the\n\n#       imported targets as dependency and not the file location on disk. This\n\n#       is much more flexible, but requires that FindQt4.cmake is executed before\n\n#       such an exported dependency file is processed.\n\n#\n\n# There are also some files that need processing by some Qt tools such as moc\n\n# and uic.  Listed below are macros that may be used to process those files.\n\n#\n\n#  macro QT4_WRAP_CPP(outfiles inputfile ... OPTIONS ...)\n\n#        create moc code from a list of files containing Qt class with\n\n#        the Q_OBJECT declaration.  Per-directory preprocessor definitions\n\n#        are also added.  Options may be given to moc, such as those found\n\n#        when executing \"moc -help\".\n\n#\n\n#  macro QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)\n\n#        create code from a list of Qt designer ui files.\n\n#        Options may be given to uic, such as those found\n\n#        when executing \"uic -help\"\n\n#\n\n#  macro QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)\n\n#        create code from a list of Qt resource files.\n\n#        Options may be given to rcc, such as those found\n\n#        when executing \"rcc -help\"\n\n#\n\n#  macro QT4_GENERATE_MOC(inputfile outputfile )\n\n#        creates a rule to run moc on infile and create outfile.\n\n#        Use this if for some reason QT4_WRAP_CPP() isn't appropriate, e.g.\n\n#        because you need a custom filename for the moc file or something similar.\n\n#\n\n#  macro QT4_AUTOMOC(sourcefile1 sourcefile2 ... )\n\n#        This macro is still experimental.\n\n#        It can be used to have moc automatically handled.\n\n#        So if you have the files foo.h and foo.cpp, and in foo.h a\n\n#        a class uses the Q_OBJECT macro, moc has to run on it. If you don't\n\n#        want to use QT4_WRAP_CPP() (which is reliable and mature), you can insert\n\n#        #include \"foo.moc\"\n\n#        in foo.cpp and then give foo.cpp as argument to QT4_AUTOMOC(). This will the\n\n#        scan all listed files at cmake-time for such included moc files and if it finds\n\n#        them cause a rule to be generated to run moc at build time on the\n\n#        accompanying header file foo.h.\n\n#        If a source file has the SKIP_AUTOMOC property set it will be ignored by this macro.\n\n#\n\n#        You should have a look on the AUTOMOC property for targets to achieve the same results.\n\n#\n\n#  macro QT4_ADD_DBUS_INTERFACE(outfiles interface basename)\n\n#        Create a the interface header and implementation files with the\n\n#        given basename from the given interface xml file and add it to\n\n#        the list of sources.\n\n#\n\n#        You can pass additional parameters to the qdbusxml2cpp call by setting\n\n#        properties on the input file:\n\n#\n\n#        INCLUDE the given file will be included in the generate interface header\n\n#\n\n#        CLASSNAME the generated class is named accordingly\n\n#\n\n#        NO_NAMESPACE the generated class is not wrapped in a namespace\n\n#\n\n#  macro QT4_ADD_DBUS_INTERFACES(outfiles inputfile ... )\n\n#        Create the interface header and implementation files\n\n#        for all listed interface xml files.\n\n#        The basename will be automatically determined from the name of the xml file.\n\n#\n\n#        The source file properties described for QT4_ADD_DBUS_INTERFACE also apply here.\n\n#\n\n#  macro QT4_ADD_DBUS_ADAPTOR(outfiles xmlfile parentheader parentclassname [basename] [classname])\n\n#        create a dbus adaptor (header and implementation file) from the xml file\n\n#        describing the interface, and add it to the list of sources. The adaptor\n\n#        forwards the calls to a parent class, defined in parentheader and named\n\n#        parentclassname. The name of the generated files will be\n\n#        <basename>adaptor.{cpp,h} where basename defaults to the basename of the xml file.\n\n#        If <classname> is provided, then it will be used as the classname of the\n\n#        adaptor itself.\n\n#\n\n#  macro QT4_GENERATE_DBUS_INTERFACE( header [interfacename] OPTIONS ...)\n\n#        generate the xml interface file from the given header.\n\n#        If the optional argument interfacename is omitted, the name of the\n\n#        interface file is constructed from the basename of the header with\n\n#        the suffix .xml appended.\n\n#        Options may be given to qdbuscpp2xml, such as those found when executing \"qdbuscpp2xml --help\"\n\n#\n\n#  macro QT4_CREATE_TRANSLATION( qm_files directories ... sources ...\n\n#                                ts_files ... OPTIONS ...)\n\n#        out: qm_files\n\n#        in:  directories sources ts_files\n\n#        options: flags to pass to lupdate, such as -extensions to specify\n\n#        extensions for a directory scan.\n\n#        generates commands to create .ts (vie lupdate) and .qm\n\n#        (via lrelease) - files from directories and/or sources. The ts files are\n\n#        created and/or updated in the source tree (unless given with full paths).\n\n#        The qm files are generated in the build tree.\n\n#        Updating the translations can be done by adding the qm_files\n\n#        to the source list of your library/executable, so they are\n\n#        always updated, or by adding a custom target to control when\n\n#        they get updated/generated.\n\n#\n\n#  macro QT4_ADD_TRANSLATION( qm_files ts_files ... )\n\n#        out: qm_files\n\n#        in:  ts_files\n\n#        generates commands to create .qm from .ts - files. The generated\n\n#        filenames can be found in qm_files. The ts_files\n\n#        must exists and are not updated in any way.\n\n#\n\n# function QT4_USE_MODULES( target [link_type] modules...)\n\n#        Make <target> use the <modules> from Qt. Using a Qt module means\n\n#        to link to the library, add the relevant include directories for the module,\n\n#        and add the relevant compiler defines for using the module.\n\n#        Modules are roughly equivalent to components of Qt4, so usage would be\n\n#        something like:\n\n#         qt4_use_modules(myexe Core Gui Declarative)\n\n#        to use QtCore, QtGui and QtDeclarative. The optional <link_type> argument can\n\n#        be specified as either LINK_PUBLIC or LINK_PRIVATE to specify the same argument\n\n#        to the target_link_libraries call.\n\n#\n\n#\n\n#  Below is a detailed list of variables that FindQt4.cmake sets.\n\n#  QT_FOUND         If false, don't try to use Qt.\n\n#  QT4_FOUND        If false, don't try to use Qt 4.\n\n#\n\n#  QT_VERSION_MAJOR The major version of Qt found.\n\n#  QT_VERSION_MINOR The minor version of Qt found.\n\n#  QT_VERSION_PATCH The patch version of Qt found.\n\n#\n\n#  QT_EDITION               Set to the edition of Qt (i.e. DesktopLight)\n\n#  QT_EDITION_DESKTOPLIGHT  True if QT_EDITION == DesktopLight\n\n#  QT_QTCORE_FOUND          True if QtCore was found.\n\n#  QT_QTGUI_FOUND           True if QtGui was found.\n\n#  QT_QT3SUPPORT_FOUND      True if Qt3Support was found.\n\n#  QT_QTASSISTANT_FOUND     True if QtAssistant was found.\n\n#  QT_QTASSISTANTCLIENT_FOUND  True if QtAssistantClient was found.\n\n#  QT_QAXCONTAINER_FOUND    True if QAxContainer was found (Windows only).\n\n#  QT_QAXSERVER_FOUND       True if QAxServer was found (Windows only).\n\n#  QT_QTDBUS_FOUND          True if QtDBus was found.\n\n#  QT_QTDESIGNER_FOUND      True if QtDesigner was found.\n\n#  QT_QTDESIGNERCOMPONENTS  True if QtDesignerComponents was found.\n\n#  QT_QTHELP_FOUND          True if QtHelp was found.\n\n#  QT_QTMOTIF_FOUND         True if QtMotif was found.\n\n#  QT_QTMULTIMEDIA_FOUND    True if QtMultimedia was found (since Qt 4.6.0).\n\n#  QT_QTNETWORK_FOUND       True if QtNetwork was found.\n\n#  QT_QTNSPLUGIN_FOUND      True if QtNsPlugin was found.\n\n#  QT_QTOPENGL_FOUND        True if QtOpenGL was found.\n\n#  QT_QTSQL_FOUND           True if QtSql was found.\n\n#  QT_QTSVG_FOUND           True if QtSvg was found.\n\n#  QT_QTSCRIPT_FOUND        True if QtScript was found.\n\n#  QT_QTSCRIPTTOOLS_FOUND   True if QtScriptTools was found.\n\n#  QT_QTTEST_FOUND          True if QtTest was found.\n\n#  QT_QTUITOOLS_FOUND       True if QtUiTools was found.\n\n#  QT_QTWEBKIT_FOUND        True if QtWebKit was found.\n\n#  QT_QTXML_FOUND           True if QtXml was found.\n\n#  QT_QTXMLPATTERNS_FOUND   True if QtXmlPatterns was found.\n\n#  QT_PHONON_FOUND          True if phonon was found.\n\n#  QT_QTDECLARATIVE_FOUND   True if QtDeclarative was found.\n\n#\n\n#  QT_MAC_USE_COCOA    For Mac OS X, its whether Cocoa or Carbon is used.\n\n#                      In general, this should not be used, but its useful\n\n#                      when having platform specific code.\n\n#\n\n#  QT_DEFINITIONS   Definitions to use when compiling code that uses Qt.\n\n#                   You do not need to use this if you include QT_USE_FILE.\n\n#                   The QT_USE_FILE will also define QT_DEBUG and QT_NO_DEBUG\n\n#                   to fit your current build type.  Those are not contained\n\n#                   in QT_DEFINITIONS.\n\n#\n\n#  QT_INCLUDES      List of paths to all include directories of\n\n#                   Qt4 QT_INCLUDE_DIR and QT_QTCORE_INCLUDE_DIR are\n\n#                   always in this variable even if NOTFOUND,\n\n#                   all other INCLUDE_DIRS are\n\n#                   only added if they are found.\n\n#                   You do not need to use this if you include QT_USE_FILE.\n\n#\n\n#\n\n#  Include directories for the Qt modules are listed here.\n\n#  You do not need to use these variables if you include QT_USE_FILE.\n\n#\n\n#  QT_INCLUDE_DIR              Path to \"include\" of Qt4\n\n#  QT_QT3SUPPORT_INCLUDE_DIR   Path to \"include/Qt3Support\"\n\n#  QT_QTASSISTANT_INCLUDE_DIR  Path to \"include/QtAssistant\"\n\n#  QT_QTASSISTANTCLIENT_INCLUDE_DIR       Path to \"include/QtAssistant\"\n\n#  QT_QAXCONTAINER_INCLUDE_DIR Path to \"include/ActiveQt\" (Windows only)\n\n#  QT_QAXSERVER_INCLUDE_DIR    Path to \"include/ActiveQt\" (Windows only)\n\n#  QT_QTCORE_INCLUDE_DIR       Path to \"include/QtCore\"\n\n#  QT_QTDBUS_INCLUDE_DIR       Path to \"include/QtDBus\"\n\n#  QT_QTDESIGNER_INCLUDE_DIR   Path to \"include/QtDesigner\"\n\n#  QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR   Path to \"include/QtDesigner\"\n\n#  QT_QTGUI_INCLUDE_DIR        Path to \"include/QtGui\"\n\n#  QT_QTHELP_INCLUDE_DIR       Path to \"include/QtHelp\"\n\n#  QT_QTMOTIF_INCLUDE_DIR      Path to \"include/QtMotif\"\n\n#  QT_QTMULTIMEDIA_INCLUDE_DIR Path to \"include/QtMultimedia\"\n\n#  QT_QTNETWORK_INCLUDE_DIR    Path to \"include/QtNetwork\"\n\n#  QT_QTNSPLUGIN_INCLUDE_DIR   Path to \"include/QtNsPlugin\"\n\n#  QT_QTOPENGL_INCLUDE_DIR     Path to \"include/QtOpenGL\"\n\n#  QT_QTSCRIPT_INCLUDE_DIR     Path to \"include/QtScript\"\n\n#  QT_QTSQL_INCLUDE_DIR        Path to \"include/QtSql\"\n\n#  QT_QTSVG_INCLUDE_DIR        Path to \"include/QtSvg\"\n\n#  QT_QTTEST_INCLUDE_DIR       Path to \"include/QtTest\"\n\n#  QT_QTWEBKIT_INCLUDE_DIR     Path to \"include/QtWebKit\"\n\n#  QT_QTXML_INCLUDE_DIR        Path to \"include/QtXml\"\n\n#  QT_QTXMLPATTERNS_INCLUDE_DIR  Path to \"include/QtXmlPatterns\"\n\n#  QT_PHONON_INCLUDE_DIR       Path to \"include/phonon\"\n\n#  QT_QTSCRIPTTOOLS_INCLUDE_DIR       Path to \"include/QtScriptTools\"\n\n#  QT_QTDECLARATIVE_INCLUDE_DIR       Path to \"include/QtDeclarative\"\n\n#\n\n#  QT_BINARY_DIR               Path to \"bin\" of Qt4\n\n#  QT_LIBRARY_DIR              Path to \"lib\" of Qt4\n\n#  QT_PLUGINS_DIR              Path to \"plugins\" for Qt4\n\n#  QT_TRANSLATIONS_DIR         Path to \"translations\" of Qt4\n\n#  QT_IMPORTS_DIR              Path to \"imports\" of Qt4\n\n#  QT_DOC_DIR                  Path to \"doc\" of Qt4\n\n#  QT_MKSPECS_DIR              Path to \"mkspecs\" of Qt4\n\n#\n\n#\n\n# The Qt toolkit may contain both debug and release libraries.\n\n# In that case, the following library variables will contain both.\n\n# You do not need to use these variables if you include QT_USE_FILE,\n\n# and use QT_LIBRARIES.\n\n#\n\n#  QT_QT3SUPPORT_LIBRARY            The Qt3Support library\n\n#  QT_QTASSISTANT_LIBRARY           The QtAssistant library\n\n#  QT_QTASSISTANTCLIENT_LIBRARY     The QtAssistantClient library\n\n#  QT_QAXCONTAINER_LIBRARY           The QAxContainer library (Windows only)\n\n#  QT_QAXSERVER_LIBRARY                The QAxServer library (Windows only)\n\n#  QT_QTCORE_LIBRARY                The QtCore library\n\n#  QT_QTDBUS_LIBRARY                The QtDBus library\n\n#  QT_QTDESIGNER_LIBRARY            The QtDesigner library\n\n#  QT_QTDESIGNERCOMPONENTS_LIBRARY  The QtDesignerComponents library\n\n#  QT_QTGUI_LIBRARY                 The QtGui library\n\n#  QT_QTHELP_LIBRARY                The QtHelp library\n\n#  QT_QTMOTIF_LIBRARY               The QtMotif library\n\n#  QT_QTMULTIMEDIA_LIBRARY          The QtMultimedia library\n\n#  QT_QTNETWORK_LIBRARY             The QtNetwork library\n\n#  QT_QTNSPLUGIN_LIBRARY            The QtNsPLugin library\n\n#  QT_QTOPENGL_LIBRARY              The QtOpenGL library\n\n#  QT_QTSCRIPT_LIBRARY              The QtScript library\n\n#  QT_QTSQL_LIBRARY                 The QtSql library\n\n#  QT_QTSVG_LIBRARY                 The QtSvg library\n\n#  QT_QTTEST_LIBRARY                The QtTest library\n\n#  QT_QTUITOOLS_LIBRARY             The QtUiTools library\n\n#  QT_QTWEBKIT_LIBRARY              The QtWebKit library\n\n#  QT_QTXML_LIBRARY                 The QtXml library\n\n#  QT_QTXMLPATTERNS_LIBRARY         The QtXmlPatterns library\n\n#  QT_QTMAIN_LIBRARY                The qtmain library for Windows\n\n#  QT_PHONON_LIBRARY                The phonon library\n\n#  QT_QTSCRIPTTOOLS_LIBRARY         The QtScriptTools library\n\n#\n\n# The QtDeclarative library:             QT_QTDECLARATIVE_LIBRARY\n\n#\n\n# also defined, but NOT for general use are\n\n#  QT_MOC_EXECUTABLE                   Where to find the moc tool.\n\n#  QT_UIC_EXECUTABLE                   Where to find the uic tool.\n\n#  QT_UIC3_EXECUTABLE                  Where to find the uic3 tool.\n\n#  QT_RCC_EXECUTABLE                   Where to find the rcc tool\n\n#  QT_DBUSCPP2XML_EXECUTABLE           Where to find the qdbuscpp2xml tool.\n\n#  QT_DBUSXML2CPP_EXECUTABLE           Where to find the qdbusxml2cpp tool.\n\n#  QT_LUPDATE_EXECUTABLE               Where to find the lupdate tool.\n\n#  QT_LRELEASE_EXECUTABLE              Where to find the lrelease tool.\n\n#  QT_QCOLLECTIONGENERATOR_EXECUTABLE  Where to find the qcollectiongenerator tool.\n\n#  QT_DESIGNER_EXECUTABLE              Where to find the Qt designer tool.\n\n#  QT_LINGUIST_EXECUTABLE              Where to find the Qt linguist tool.\n\n#\n\n#\n\n# These are around for backwards compatibility\n\n# they will be set\n\n#  QT_WRAP_CPP  Set true if QT_MOC_EXECUTABLE is found\n\n#  QT_WRAP_UI   Set true if QT_UIC_EXECUTABLE is found\n\n#\n\n# These variables do _NOT_ have any effect anymore (compared to FindQt.cmake)\n\n#  QT_MT_REQUIRED         Qt4 is now always multithreaded\n\n#\n\n# These variables are set to \"\" Because Qt structure changed\n\n# (They make no sense in Qt4)\n\n#  QT_QT_LIBRARY        Qt-Library is now split\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use find_package( Qt4 COMPONENTS ... ) to enable modules\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To make sure we don't use QtCore or QtGui when not in COMPONENTS\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If Qt3 has already been found, fail.\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# convenience macro for dealing with debug/release library names\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The name of the imported targets, i.e. the prefix \"Qt4::\" must not change,\n\n# since it is stored in EXPORT-files as name of a required library. If the name would change\n\n# here, this would lead to the imported Qt4-library targets not being resolved by cmake anymore.\n",
        "Line" : 392,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If QT_USE_IMPORTED_TARGETS is enabled, the QT_QTFOO_LIBRARY variables are set to point at these\n\n# imported targets. This works better in general, and is also in almost all cases fully\n\n# backward compatible. The only issue is when a project A which had this enabled then exports its\n\n# libraries via export or export_library_dependencies(). In this case the libraries from project\n\n# A will depend on the imported Qt targets, and the names of these imported targets will be stored\n\n# in the dependency files on disk. This means when a project B then uses project A, these imported\n\n# targets must be created again, otherwise e.g. \"Qt4__QtCore\" will be interpreted as name of a\n\n# library file on disk, and not as a target, and linking will fail:\n",
        "Line" : 419,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# if the release- as well as the debug-version of the library have been found:\n",
        "Line" : 432,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 446,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 453,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# put the value in the cache:\n",
        "Line" : 460,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "#add the include directory to QT_INCLUDES\n",
        "Line" : 474,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# check for qmake\n\n# Debian uses qmake-qt4\n\n# macports' Qt uses qmake-mac\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# double check that it was a Qt4 qmake, if not, re-find with different names\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# check for qt3 qmake and then try and find qmake4 or qmake-qt4 in the path\n",
        "Line" : 519,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# ask qmake for the mkspecs directory\n\n# we do this first because QT_LIBINFIX might be set\n",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# do not replace : on windows as it might be a drive letter\n\n# and windows should already use ; as a separator\n",
        "Line" : 541,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# ask qmake for the library dir as a hint, then search for QtCore library and use that as a reference for finding the\n\n# others and for setting QT_LIBRARY_DIR\n",
        "Line" : 568,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# try dropping a hint if trying to use Visual Studio with Qt built by mingw\n",
        "Line" : 596,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# set QT_LIBRARY_DIR based on location of QtCore found.\n",
        "Line" : 605,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# ask qmake for the binary dir\n",
        "Line" : 623,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# ask qmake for the include dir\n",
        "Line" : 640,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Set QT_HEADERS_DIR based on finding QtCore header\n",
        "Line" : 649,
        "CharPositionInLine" : 3
      },
      "27" : {
        "Text" : "# Set QT_INCLUDE_DIR based on QT_HEADERS_DIR\n",
        "Line" : 667,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Qt/Mac frameworks has two include dirs.\n\n# One is the framework include for which CMake will add a -F flag\n\n# and the other is an include dir for non-framework Qt modules\n",
        "Line" : 670,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# Set QT_INCLUDES\n",
        "Line" : 679,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ask qmake for the documentation directory\n",
        "Line" : 683,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# ask qmake for the plugins directory\n",
        "Line" : 690,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# ask qmake for the translations directory\n",
        "Line" : 702,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# ask qmake for the imports directory\n",
        "Line" : 708,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 725,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#############################################\n\n#\n\n# Find out what window system we're using\n\n#\n\n#############################################\n\n# Save required variable\n",
        "Line" : 732,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Add QT_INCLUDE_DIR to CMAKE_REQUIRED_INCLUDES\n",
        "Line" : 740,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Check for Window system symbols (note: only one should end up being set)\n",
        "Line" : 742,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Restore CMAKE_REQUIRED_INCLUDES and CMAKE_REQUIRED_FLAGS variables\n",
        "Line" : 761,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#\n\n#############################################\n",
        "Line" : 764,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "########################################\n\n#\n\n#       Setting the INCLUDE-Variables\n\n#\n\n########################################\n",
        "Line" : 769,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# phonon doesn't seem consistent, let's try phonondefs.h for some\n\n# installations\n",
        "Line" : 822,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Set QT_AXCONTAINER_INCLUDE_DIR and QT_AXSERVER_INCLUDE_DIR\n",
        "Line" : 836,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR\n",
        "Line" : 847,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Set QT_QTASSISTANT_INCLUDE_DIR\n",
        "Line" : 855,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Set QT_QTASSISTANTCLIENT_INCLUDE_DIR\n",
        "Line" : 863,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "########################################\n\n#\n\n#       Setting the LIBRARY-Variables\n\n#\n\n########################################\n",
        "Line" : 871,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# find the libraries\n",
        "Line" : 877,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Release framework library file does not exist... Force to NOTFOUND:\n",
        "Line" : 890,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Debug framework library file does not exist... Force to NOTFOUND:\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# QtUiTools is sometimes not in the same directory as the other found libraries\n\n# e.g. on Mac, its never a framework like the others are\n",
        "Line" : 902,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_LIBRARY\n",
        "Line" : 908,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Set QT_QTMAIN_LIBRARY\n",
        "Line" : 912,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Set QT_QTASSISTANTCLIENT_LIBRARY\n",
        "Line" : 918,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Set QT_QTASSISTANT_LIBRARY\n",
        "Line" : 922,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Set QT_QTHELP_LIBRARY\n",
        "Line" : 926,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n",
        "Line" : 934,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Set QT_xyz_LIBRARY variable and add\n\n# library include path to QT_INCLUDES\n",
        "Line" : 941,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# platform dependent libraries\n",
        "Line" : 954,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "#######################################\n\n#\n\n#       Check the executables of Qt\n\n#          ( moc, uic, rcc )\n\n#\n\n#######################################\n",
        "Line" : 962,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# get the directory of the current file, used later on in the file\n",
        "Line" : 1066,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "###############################################\n\n#\n\n#       configuration/system dependent settings\n\n#\n\n###############################################\n",
        "Line" : 1070,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "#######################################\n\n#\n\n#       Check the plugins of Qt\n\n#\n\n#######################################\n",
        "Line" : 1079,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# find_library works better than find_file but we need to set prefixes to only match plugins\n",
        "Line" : 1130,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# find_library works easier/better than find_file but we need to set suffixes to only match plugins\n",
        "Line" : 1147,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "######################################\n\n#\n\n#       Macros for building Qt files\n\n#\n\n######################################\n",
        "Line" : 1165,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# set version variables\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "#support old QT_MIN_VERSION if set, but not if version is supplied by find_package()\n",
        "Line" : 1180,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# if components specified in find_package(), make sure each of those pieces were found\n",
        "Line" : 1187,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# if no components specified, we'll make a default set of required variables to say Qt is found\n",
        "Line" : 1206,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "#######################################\n\n#\n\n#       compatibility settings\n\n#\n\n#######################################\n\n# Backwards compatibility for CMake1.4 and 1.2\n",
        "Line" : 1229,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 71
    },
    "cmake/qt4/Qt4ConfigDependentSettings.cmake" : {
      "ObjectId" : "6df28f47f2c68faa2fff5766f56755bddbe4e36e",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included by FindQt4.cmake, don't include it directly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################\n\n#\n\n#       configuration/system dependent settings\n\n#\n\n###############################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find dependencies for some Qt modules\n\n# when doing builds against a static Qt, they are required\n\n# when doing builds against a shared Qt, they are not required\n\n# if a user needs the dependencies, and they couldn't be found, they can set\n\n# the variables themselves.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On Windows, qconfig.pri has \"shared\" for shared library builds\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# On other platforms, check file extension to know if its static\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# build using shared Qt needs -DQT_DLL on Windows\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QtOpenGL dependencies\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## system png\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## system jpeg\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## system tiff\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## system mng\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# for X11, get X11 library directory\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## X11 SM\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Xi\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Xrender\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Xrandr\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Xcursor\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Xinerama\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Xfixes\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## fontconfig\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## system-freetype\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## system-zlib\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## openssl\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## dbus\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## glib\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Qt 4.2.0+ uses glib-2.0\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Qt 4.5+ also links to gobject-2.0\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "## clock-monotonic, just see if we need to link with rt\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# X11 libraries Qt always depends on\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Qt 4.0, 4.1, 4.2 use QuickTime\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Qt 4.2+ use AppKit\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 32
    },
    "cmake/qt4/Qt4Macros.cmake" : {
      "ObjectId" : "f2669ffb2d556cd8f525508c9b6f14f999a614be",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included by FindQt4.cmake, don't include it directly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################\n\n#\n\n#       Macros for building Qt files\n\n#\n\n######################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# macro used to create the names of output files preserving relative dirs\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# absolute path\n",
        "Line" : 57,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : "# helper macro to set up a moc rule\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For Windows, create a parameters file to work around command line length limit\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Pass the parameters in a file.  Set the working directory to\n\n# be that containing the parameters file and reference it by\n\n# just the file name.  This is necessary because the moc tool on\n\n# MinGW builds does not seem to handle spaces in the path to the\n\n# file given with the @ syntax.\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# get include dirs and flags\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# dont run automoc on this file\n",
        "Line" : 135,
        "CharPositionInLine" : 73
      },
      "10" : {
        "Text" : "# QT4_WRAP_CPP(outfiles inputfile ... )\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# get include dirs\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# QT4_WRAP_UI(outfiles inputfile ... )\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# QT4_ADD_RESOURCES(outfiles inputfile ... )\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  parse file for dependencies\n\n#  all files are absolute paths or relative to the location of the qrc file\n",
        "Line" : 188,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Since this cmake macro is doing the dependency scanning for these files,\n\n# let's make a configured file and add it as a dependency so cmake is run\n\n# again when dependencies need to be recomputed.\n",
        "Line" : 201,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# The .qrc file does not exist (yet). Let's add a dependency and hope\n\n# that it will be generated later\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# get the part before the \".xml\" suffix\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# _customName OPTIONS -some -options )\n",
        "Line" : 272,
        "CharPositionInLine" : 43
      },
      "19" : {
        "Text" : "# _optionalBasename _optionalClassName)\n",
        "Line" : 299,
        "CharPositionInLine" : 69
      },
      "20" : {
        "Text" : "# if \"SKIP_AUTOMOC\" is set to true, we will not handle this file here.\n\n# This is required to make uic work correctly:\n\n# we need to add generated .cpp files to the sources (to compile them),\n\n# but we cannot let automoc handle them, as the .cpp files don't exist yet when\n\n# cmake is run for the very first time on them -> however the .cpp files might\n\n# exist at a later run. at that time we need to skip them, so that we don't add two\n\n# different rules for the same moc file\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# make a .pro file to call lupdate on, so we don't make our commands too\n\n# long for some systems\n",
        "Line" : 399,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 22
    },
    "dependencies/CMakeLists.txt" : {
      "ObjectId" : "fe3d463eda9f8bc061327d17b928605bab04f0e3",
      "LastModified" : "2017-05-27T10:19:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# when crosscompiling import the protoc executable targets from a file generated by a native build\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# export the protoc compiler so it can be used when cross compiling\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# define the include for the protobuf library at the parent scope\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# define the protoc executable at the parent scope\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "dependencies/build/getoptPlusPlus/CMakeLists.txt" : {
      "ObjectId" : "e19880dad52ff1ec92fe45c23272e2262fa2a394",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dependencies/build/getoptPlusPlus/Makefile" : {
      "ObjectId" : "d6be12e2e7a8db6b62b3db6574a65d80c1b7e3b2",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "dependencies/build/hidapi/CMakeLists.txt" : {
      "ObjectId" : "a1a37082ac10774ceeceec9ebc2ee1a1224612c8",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the 'generic' hidapi include directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TODO[TvdZ]: Rename hidapi-??? to hidapi\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HIDAPI library specific for MacOS\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# HIDAPI library based on lib-usb\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#add libusb and pthreads\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#apt-get install libusb-1.0-0-dev\n",
        "Line" : 33,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 6
    },
    "dependencies/build/jsoncpp/CMakeLists.txt" : {
      "ObjectId" : "8ebd71b7021f5331edeae0c20021f41d20d065e8",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define the current source/header path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dependencies/build/serial/CMakeLists.txt" : {
      "ObjectId" : "b41ad700508d5a5919b3a8aa45337c6cd8786ddb",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Add serial library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dependencies/build/tinkerforge/CMakeLists.txt" : {
      "ObjectId" : "f1f82f5e1a4264302b9b80de7bee45cf98c53bb0",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define the current source/header path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "dc5e88fd8d6b165a89144bf02b8c5dbab3d0c804",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find doxygen\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This processes our hyperion-cmake.doxyfile and subsitutes variables to generate a final hyperion.doxyfile\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This processes the shell script that is used to build the documentation and check the result\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define all static (i.e. not generated) documentation files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Loop over all static documentation files\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the file to the bindary documentation directory\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#Create a custom target to build documentation. It runs doxygen aginast the generated hyperion.doxyfile and checks its return value\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "libsrc/CMakeLists.txt" : {
      "ObjectId" : "cf9a3833a40722e18edd9a8d720527f0b27ddd93",
      "LastModified" : "2016-06-12T20:27:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libsrc/blackborder/CMakeLists.txt" : {
      "ObjectId" : "97d627394df627135352d5a3f2ad359cef568a0e",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libsrc/boblightserver/CMakeLists.txt" : {
      "ObjectId" : "c7a0e12df5a7f3b78350736ee7985b932b0130dd",
      "LastModified" : "2016-05-26T21:44:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/bonjour/CMakeLists.txt" : {
      "ObjectId" : "89457adde9f9cba946ee6344b3d2a1e24f8efd30",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t\tavahi-qt4\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t\tlibavahi-qt4.a\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "libsrc/bonjour/fortuneserver.pro" : {
      "ObjectId" : "421b14c1f0e30e11a47b9ad9b70368059a5daa33",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add your path to bonjour here.\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "libsrc/effectengine/CMakeLists.txt" : {
      "ObjectId" : "e3133213eea97898f1ac82249c0f1106c9f7d433",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#OpenElec uses 2.7, if you want to compile for OpenElec require 2.7\n\n#find_package(PythonLibs 2.7 REQUIRED)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include the python directory. Also include the parent (which is for example /usr/include)\n\n# which may be required when it is not includes by the (cross-) compiler by default.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "libsrc/grabber/CMakeLists.txt" : {
      "ObjectId" : "a075e79d3faa255100ed554f94021cc974313f39",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libsrc/grabber/amlogic/CMakeLists.txt" : {
      "ObjectId" : "cf8844b909177e769a8878aafd342605771b1b1d",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/grabber/dispmanx/CMakeLists.txt" : {
      "ObjectId" : "b453e3ab56c042c42c8a5696d0e848d43b87c120",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the BCM-package (VC control)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libsrc/grabber/framebuffer/CMakeLists.txt" : {
      "ObjectId" : "c001155cd1f8bbd9585c79355b6428264f30aa86",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the BCM-package (VC control)\n\n# find_package(BCM REQUIRED)\n\n# include_directories(${BCM_INCLUDE_DIRS})\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libsrc/grabber/osx/CMakeLists.txt" : {
      "ObjectId" : "63bdfaa488bc622fc1039b7404269b18d3f5541e",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/grabber/v4l2/CMakeLists.txt" : {
      "ObjectId" : "56f8181486775b24c3e164c78c2d261d04b95546",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libsrc/grabber/x11/CMakeLists.txt" : {
      "ObjectId" : "cd1bb0f04149f6cc3a5ad0037ee5551eb3953c60",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find X11\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/hyperion/CMakeLists.txt" : {
      "ObjectId" : "021b4e2dfa63c3988dcb133cb3e9e0ef9f74df36",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/jsonserver/CMakeLists.txt" : {
      "ObjectId" : "9569f076299dc303e383b3574d0a8d530378327a",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/leddevice/CMakeLists.txt" : {
      "ObjectId" : "7d3ea06e9cf4d8c2668050a21700b27f15b2f9e5",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add libusb and pthreads (required for the Lighpack usb device)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for Lightpack device\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#apt-get install libusb-1.0-0-dev\n",
        "Line" : 153,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 5
    },
    "libsrc/protoserver/CMakeLists.txt" : {
      "ObjectId" : "5d8737d76c6e090fe722df82ad412bf1865c2136",
      "LastModified" : "2016-06-04T17:26:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/utils/CMakeLists.txt" : {
      "ObjectId" : "8bfd237ddb57e603d336177f2d778a82a02ccb24",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libsrc/webconfig/CMakeLists.txt" : {
      "ObjectId" : "bcf68833e3835c419af5596425996560b9e1d1fe",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libsrc/xbmcvideochecker/CMakeLists.txt" : {
      "ObjectId" : "bb13fb2141b6f552d2ea3bf6be9e3cc4ac2b2ae8",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the current source locations\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Group the headers that go through the MOC compiler\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "89a9180239c8e5d7e39efaca43701b9dc4054c14",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following clients depend on the protobuf library\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/hyperion-aml/CMakeLists.txt" : {
      "ObjectId" : "492c1aca139013bfe10ab81d84bd2d92e924f9a9",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure minimum CMAKE version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the project name\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find QT\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/hyperion-dispmanx/CMakeLists.txt" : {
      "ObjectId" : "987c37d9cb06b6a383ccefa76055db23ca3bf476",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure minimum CMAKE version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the project name\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find QT\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the BCM-package (VC control)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/hyperion-framebuffer/CMakeLists.txt" : {
      "ObjectId" : "e9056b541358a6149c0ac8c963b3cf1559337c52",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure minimum CMAKE version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the project name\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find QT\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/hyperion-osx/CMakeLists.txt" : {
      "ObjectId" : "c492de6b4e890ba1ade0b84a5be1b9939d8c4d9e",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure minimum CMAKE version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the project name\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find QT\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/hyperion-remote/CMakeLists.txt" : {
      "ObjectId" : "6af8fd0338ef738d820b5f6ddef82ed8ecf15b64",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find Qt\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}    ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS}\")\n\n#\tset(CMAKE_CXX_FLAGS \"-fPIC\")\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following I do not undrstand completely...\n\n# libQtCore.so uses some hardcoded library path inside which are incorrect after copying the file RPi file system\n\n# Therefor, an extra path is needed on which to find the required libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/hyperion-v4l2/CMakeLists.txt" : {
      "ObjectId" : "1c09746dd5ee88da8d6fb82dfa9c4845ccf142ac",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find Qt\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tset(CMAKE_CXX_FLAGS \"-fPIC\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/hyperion-x11/CMakeLists.txt" : {
      "ObjectId" : "6ddbe5daefe5d91a6e13dcfa6a934154d3aae58c",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure minimum CMAKE version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the project name\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find QT\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find X11\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/hyperiond/CMakeLists.txt" : {
      "ObjectId" : "3f0829e48a218e46bd2e67a2e7c2e554ea433af1",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "76cbb5dc805c1268af7f33552122f237e2d61d87",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Needed for testing non-public components\n",
        "Line" : 1,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add the simple test executable 'TestSpi'\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Find X11\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "test/dispmanx2png/CMakeLists.txt" : {
      "ObjectId" : "b5c3c5d0606fb0a31fffdbd3b278edf0b7acf512",
      "LastModified" : "2016-07-13T06:31:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the BCM-package (VC control)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the use of QT4\n\n#find_package(Qt4 COMPONENTS QtTest REQUIRED QUIET)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 53,
    "QMAKE" : 1,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1185
}