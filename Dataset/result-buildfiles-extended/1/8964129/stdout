{
  "Repository" : "8964129",
  "Revision" : "HEAD",
  "ObjectId" : "f7e8fcf7d57c624da5ac8a8be7d0d55c260ff32e",
  "CommitTime" : "2017-01-31T12:25:16Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "921939935ba1c008062032d7996fefdcb727781b",
      "LastModified" : "2017-01-31T12:25:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set build type to release by default\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# automatically use ccache if found\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# automatically use the gold linker if found\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# let pgo determine the ordering\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# pyston self host mode\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# initial clang flags (set here so they're used when building llvm)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# used in src/runtime/inline/CMakeLists.txt to remove the flags we added above\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# llvm disable debug info unless ENABLE_LLVM_DEBUG is ON\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# jemalloc\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# CMake (<3.3) does not support BUILD_BYPRODUCTS.\n\n# This is a problem for ninja, which will not know how to build the generated file.\n\n# Here are a couple hacks to get around it:\n\n#\n\n# Add a copy step.  This just hides the dependency but it seems to work.\n\n# add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}/jemalloc/lib/libjemalloc_copied.a DEPENDS libjemalloc COMMAND cp \"${CMAKE_BINARY_DIR}/jemalloc/lib/libjemalloc.a\" ${CMAKE_BINARY_DIR}/jemalloc/lib/libjemalloc_copied.a)\n\n# add_custom_target(libjemalloc_copied DEPENDS ${CMAKE_BINARY_DIR}/jemalloc/lib/libjemalloc_copied.a)\n\n#\n\n# Hack option #2: the existence of the custom target tells ninja that libjemalloc.a will get built somehow.\n\n# The name of the target doesn't matter.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Hack option #3: delete the .so's and use `-ljemalloc` on the link line so that ninja doesn't know about the dependency.\n\n# ExternalProject_Add_Step(libjemalloc disable_shared\n\n# DEPENDEES install\n\n# COMMAND sh -c \"rm -v ${CMAKE_BINARY_DIR}/jemalloc/lib/*.so*\"\n\n# )\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# llvm, clang, and libunwind patches\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# llvm\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#set(LLVM_EXTERNAL_CLANG_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/clang\" CACHE String \"Clang directory\")\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# libunwind\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Tell CMake that patching libunwind means that we need to rebuild it:\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Tell CMake that rebuilding libunwind will touch the build files (why doesn't it know this??)\n\n# Otherwise, if you do something that triggers a rebuild (not a fresh build) of libunwind,\n\n# it will take another build to realize that any source files that #include libunwind.h\n\n# need to get rebuilt.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# lz4\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# valgrind\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# without this, we don't seem to get jemalloc on gcc builds\n",
        "Line" : 285,
        "CharPositionInLine" : 73
      },
      "20" : {
        "Text" : "# Python 2.7.6\n",
        "Line" : 289,
        "CharPositionInLine" : 116
      },
      "21" : {
        "Text" : "# There are supposed to be better ways [1] to add link dependencies, but none of them worked for me.\n\n# [1] http://www.cmake.org/pipermail/cmake/2010-May/037206.html\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Wrap the stdlib in --whole-archive to force all the symbols to be included and eventually exported\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# test\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# tests         testname directory arguments\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# format\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# lint\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# check\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# {run,dbg,perf,memcheck,memleaks,cachegrind}_TESTNAME\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# doxygen\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# CPack config.  I think this needs to come after any other code, since it will\n\n# look at whatever install targets have already been set up.\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Otherwise cmake thinks this is a cross-compile\n",
        "Line" : 391,
        "CharPositionInLine" : 35
      },
      "32" : {
        "Text" : "# last file added (need to change this if we add a file that is added via a glob):\n\n# from_cpython/Include/genobject.h\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "Makefile" : {
      "ObjectId" : "6289663f479e01c132f48444f4f116abb77ae9e2",
      "LastModified" : "2016-09-12T08:42:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# prints variables for debugging\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable builtin rules:\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If you followed the old install instructions:\n\n# GCC_DIR := $(DEPS_DIR)/gcc-4.8.2-install\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Relative path from $(CAMKE_DIR_DBG) to $(SRC_DIR).  Not sure how to calculate this automatically.\n",
        "Line" : 54,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "# Put any overrides in here:\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Global include files can screw up the build, since if llvm moves a header file,\n\n# the compiler will silently fall back to the global one that still exists.\n\n# These include files are persistent because llvm's \"make uninstall\" does *not*\n\n# delete them if the uninstall command is run on a revision that didn't include\n\n# those files.\n\n# This could probably be handled (somehow blacklist this particular folder?),\n\n# but for now just error out:\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# should use the \"unused\" attribute\n",
        "Line" : 126,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "# allow the use of \"offsetof\", and we'll just have to make sure to only use it legally.\n",
        "Line" : 131,
        "CharPositionInLine" : 41
      },
      "8" : {
        "Text" : "# Use our \"custom linker\" that calls gold if available\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Conditionally add libtinfo if available - otherwise nothing will be added\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make sure that we put all symbols in the dynamic symbol table so that MCJIT can load them;\n\n# TODO should probably do the linking before MCJIT\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We get multiple shared libraries (libstdc++, libgcc_s) from the gcc installation:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# libunwind's include files warn on -Wextern-c-compat, so turn that off;\n\n# ideally would just turn it off for header files in libunwind, maybe by\n\n# having an internal libunwind.h that pushed/popped the diagnostic state,\n\n# but it doesn't seem like that important a warning so just turn it off.\n",
        "Line" : 166,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Can't add this, because there are functions in the compiler that look unused but are hooked back from the runtime:\n\n# LDFLAGS_RELEASE += -Wl,--gc-sections\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# settings to make clang and ccache play nicely:\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Extra flags to enable soon:\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Want this one but there's a lot of places that I haven't followed it:\n\n# CLANGFLAGS += -Wold-style-cast\n\n# llvm headers fail on this one:\n\n# CLANGFLAGS += -Wswitch-enum\n\n# Not sure about these:\n\n# CLANGFLAGS += -Wbad-function-cast -Wcast-qual -Wcast-align -Wmissing-prototypes -Wunreachable-code -Wfloat-equal -Wunused -Wunused-variable\n\n# Or everything:\n\n# CLANGFLAGS += -Weverything -Wno-c++98-compat-pedantic -Wno-shadow -Wno-padded -Wno-zero-length-array\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The stdlib objects have slightly longer dependency chains,\n\n# so put them first in the list:\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The set of dependencies (beyond the executable) required to do `make run_foo`.\n\n# ext_pyston (building test/test_extension) is required even in cmake mode since\n\n# we manually add test/test_extension to the path\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# The set of dependencies (beyond the executable) required to do `make check` / `make check_foo`.\n\n# The tester bases all paths based on the executable, so in cmake mode we need to have cmake\n\n# build all of the shared modules.\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# all: llvm\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# @# have to do this in a recursive make so that dependency is enforced:\n\n# $(MAKE) pyston_all\n",
        "Line" : 391,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# all: pyston_dbg pyston_release pyston_oprof pyston_prof $(OPTIONAL_SRCS:.cpp=.o) ext_python ext_pyston\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# These are ordered roughly in decreasing order of (chance will expose issue) / (time to run test)\n",
        "Line" : 451,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# A stripped down set of tests, meant as a quick smoke test to run before submitting a PR and having\n\n# Travis-CI do the full test.\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## TOOLS:\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Build a version of mcjitcache off the llvm_release repo mostly to avoid a dependence of the opt builds\n\n# on the llvm_quick build.\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## END OF TOOLS\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# args: suffix (ex: \".release\"), CXXFLAGS\n",
        "Line" : 507,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Need to set CXXFLAGS so that this rule doesn't inherit the '-include' rule from the\n\n## thing that's calling it.  At the same time, also filter out \"-DGITREV=foo\".\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# For STDLIB sources, first compile to bitcode:\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Then, publicize symbols:\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Then, compile the publicized bitcode into normal .o files\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Optimize and/or strip it:\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Then do \"ld -b binary\" to create a .o file for embedding into the executable\n\n# $(STDLIB_OBJS) $(STDLIB_RELEASE_OBJS): %.o: % $(BUILD_SYSTEM_DEPS)\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Optionally, disassemble the bitcode files:\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Not used currently, but here's how to pre-jit the stdlib bitcode:\n",
        "Line" : 597,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# args: output suffx (ex: _release), objects to link, LDFLAGS, other deps\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Finally, link it all together:\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Shared modules (ie extension modules that get built using pyston on setup.py) that we will ask CMake\n\n# to build.  You can flip this off to allow builds to continue even if self-hosting the sharedmods would fail.\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# A helper function that lets me run subdirectory rules from the top level;\n\n# ex instead of saying \"make tests/run_1\", I can just write \"make run_1\"\n\n#\n\n# The target to ultimately be called must be prefixed with nosearch_, for example:\n\n#     nosearch_example_%: %.py\n\n#         echo $^\n\n#     $(call make_search,example_%)\n\n# This prevents us from searching recursively, which can result in a combinatorial explosion.\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# we pass -I to cpython tests and skip failing ones because they are sloooow otherwise\n",
        "Line" : 763,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# $(call make_target,_grwl)\n\n# $(call make_target,_grwl_dbg)\n\n# $(call make_target,_nosync)\n",
        "Line" : 825,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# \"kill valgrind\":\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# gprof-based profiling:\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# pprof-based profiling:\n",
        "Line" : 866,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# rm -f pprof.out pprof.raw pprof.jit\n",
        "Line" : 872,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# oprofile-based profiling:\n",
        "Line" : 875,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# sudo opcontrol --event CPU_CLK_UNHALTED:28000\n\n# sudo opcontrol --cpu-buffer-size=128000 --buffer-size=1048576 --buffer-watershed=1048000\n",
        "Line" : 879,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# opreport lib-image:pyston_oprof -l -t 0.2 -a | head -n 25\n",
        "Line" : 895,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# Makefile $$(find \\( -name '*.cpp' -o -name '*.h' -o -name '*.py' \\) -o -type d ); do clear; $(MAKE) $(patsubst watch_%,%,$@); done )\n\n# -r . ; do clear; $(MAKE) $(patsubst watch_%,%,$@); done\n",
        "Line" : 915,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# $(GPP) tests/test.cpp -o test_asm -c -O3\n",
        "Line" : 941,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# $(GPP) tests/test.cpp -o test_asm -c -O3\n",
        "Line" : 946,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# Makefile hackery: we can build test extensions with any build configuration of pyston,\n\n# so try to guess one that will end up being built anyway, and use that as the dependency.\n",
        "Line" : 985,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Hax: we want to generate multiple targets from a single rule, and run the rule only if the\n\n# dependencies have been updated, and only run it once for all the targets.\n\n# So just tell make to generate the first extension module, and that the non-first ones just\n\n# depend on the first one.\n",
        "Line" : 993,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# TESTING:\n",
        "Line" : 1039,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# $(CXX) $< -o $@ -lclangASTMatchers -lclangRewrite -lclangFrontend -lclangDriver -lclangTooling -lclangParse -lclangSema -lclangAnalysis -lclangAST -lclangEdit -lclangLex -lclangBasic -lclangSerialization $(shell $(LLVM_BIN_DBG)/llvm-config --ldflags --system-libs --libs all)\n",
        "Line" : 1048,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# 'make package' will build a package using the pgo build, since that's the\n\n# configuration with the best performance.  Testing that is a pain since it\n\n# requires rerunning the pgo build, so there's also 'make package_nonpgo' mostly\n\n# for testing.\n",
        "Line" : 1086,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 58
    },
    "cmake/CheckTypeSizeof.cmake" : {
      "ObjectId" : "b44f2ce8925d00916e56bb49408adab380b93ac8",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# CheckTypeSizeof\n\n# -------------\n\n#\n\n# Pyston: This file is included from cmake 3 for compatibility\n\n# downloaded 2015-04-03\n\n# https://github.com/Kitware/CMake/blob/master/Modules/CheckTypeSize.cmake\n\n#\n\n#\n\n# Check sizeof a type\n\n#\n\n# ::\n\n#\n\n#   CHECK_TYPE_SIZEOF(TYPE VARIABLE [BUILTIN_TYPES_ONLY]\n\n#                                 [LANGUAGE <language>])\n\n#\n\n# Check if the type exists and determine its size.  On return,\n\n# \"HAVE_${VARIABLE}\" holds the existence of the type, and \"${VARIABLE}\"\n\n# holds one of the following:\n\n#\n\n# ::\n\n#\n\n#    <size> = type has non-zero size <size>\n\n#    \"0\"    = type has arch-dependent size (see below)\n\n#    \"\"     = type does not exist\n\n#\n\n# Both ``HAVE_${VARIABLE}`` and ``${VARIABLE}`` will be created as internal\n\n# cache variables.\n\n#\n\n# Furthermore, the variable \"${VARIABLE}_CODE\" holds C preprocessor code\n\n# to define the macro \"${VARIABLE}\" to the size of the type, or leave\n\n# the macro undefined if the type does not exist.\n\n#\n\n# The variable \"${VARIABLE}\" may be \"0\" when CMAKE_OSX_ARCHITECTURES has\n\n# multiple architectures for building OS X universal binaries.  This\n\n# indicates that the type size varies across architectures.  In this\n\n# case \"${VARIABLE}_CODE\" contains C preprocessor tests mapping from\n\n# each architecture macro to the corresponding type size.  The list of\n\n# architecture macros is stored in \"${VARIABLE}_KEYS\", and the value for\n\n# each key is stored in \"${VARIABLE}-${KEY}\".\n\n#\n\n# If the BUILTIN_TYPES_ONLY option is not given, the macro checks for\n\n# headers <sys/types.h>, <stdint.h>, and <stddef.h>, and saves results\n\n# in HAVE_SYS_TYPES_H, HAVE_STDINT_H, and HAVE_STDDEF_H.  The type size\n\n# check automatically includes the available headers, thus supporting\n\n# checks of types defined in the headers.\n\n#\n\n# If LANGUAGE is set, the specified compiler will be used to perform the\n\n# check. Acceptable values are C and CXX\n\n#\n\n# Despite the name of the macro you may use it to check the size of more\n\n# complex expressions, too.  To check e.g.  for the size of a struct\n\n# member you can do something like this:\n\n#\n\n# ::\n\n#\n\n#   check_type_sizeof(\"((struct something*)0)->member\" SIZEOF_MEMBER)\n\n#\n\n#\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ::\n\n#\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\n\n#   CMAKE_EXTRA_INCLUDE_FILES = list of extra headers to include\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Helper function.  DO NOT CALL DIRECTLY.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include header files.\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Perform the check.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The check compiled.  Load information from the binary.\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Parse the information strings.\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Get the type size.\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Get the architecture map key.\n",
        "Line" : 161,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Update the architecture-to-size map.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# The check failed to compile.\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# parse arguments\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# change to MATCHES for more keys\n",
        "Line" : 210,
        "CharPositionInLine" : 43
      },
      "14" : {
        "Text" : "# Optionally check for standard headers.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Compute or load the size or size map.\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Create preprocessor code.\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cmake/FindValgrind.cmake" : {
      "ObjectId" : "d24b22f0eed6578aaa790d8fd430a58db988943b",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find valgrind header and binary\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/pyconfig.cmake" : {
      "ObjectId" : "6a58410bc15696c479feb330c1ecaa707b30efcb",
      "LastModified" : "2016-11-21T23:48:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate pyconfig.h\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake sucks: it has no idea that pyconfig.h is something that can be installed.\n\n# Just tell it to install whatever file is at that particular location, and rely on\n\n# the rest of the build rules to ensure that it's made in time.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/sysconfigdata.cmake" : {
      "ObjectId" : "3afa4f89b2412ad39dda20541dd754bfe3fdfaa2",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake sucks: it has no idea that configure-generated files can be installed.\n\n# Just tell it to install whatever file is at that particular location, and rely on\n\n# the rest of the build rules to ensure that it's made in time.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "from_cpython/CMakeLists.txt" : {
      "ObjectId" : "ac3713de0e3c530ce8d3582013f3c20cce13cd29",
      "LastModified" : "2016-11-29T04:56:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy any changed stdlib files to the destination:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# compile specified files in from_cpython/Modules\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compile specified files in from_cpython/Objects\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# compile specified files in from_cpython/Python\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# compile specified files in from_cpython/Parser\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "from_cpython/Modules/_ctypes/libffi/Makefile.am" : {
      "ObjectId" : "bf0156fc170ac770c9621fa42fa48a10d1464f4a",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## ################################################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## This section is for make and multilib madness.\n\n##\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Work around what appears to be a GNU make bug handling MAKEFLAGS\n\n# values defined in terms of make variables, as is the case for CC and\n\n# friends when we are called from the top level Makefile.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Subdir rules rely on $(FLAGS_TO_PASS)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "from_cpython/Modules/_ctypes/libffi/include/Makefile.am" : {
      "ObjectId" : "fd28024973191098d27dd6afdf566d38ada7e525",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "from_cpython/Modules/_ctypes/libffi/man/Makefile.am" : {
      "ObjectId" : "afcbfb69f1d3de0cce6c171f357c5927972db76b",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this with automake to create Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "from_cpython/Modules/_ctypes/libffi/testsuite/Makefile.am" : {
      "ObjectId" : "edc6e61ae4db3bee3d90bbbf85b3c61631b5e84b",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup the testing framework, if you have one\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "from_cpython/Modules/zlib/Makefile" : {
      "ObjectId" : "2fd6e45c48d4105045ec618ecf42e2a6fa2f3f18",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for zlib\n\n# Copyright (C) 1995-2005 Jean-loup Gailly.\n\n# For conditions of distribution and use, see copyright notice in zlib.h\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To compile and test, type:\n\n#    ./configure; make test\n\n# The call of configure is optional if you don't have special requirements\n\n# If you wish to build zlib as a shared library, use: ./configure -s\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To use the asm code, type:\n\n#    cp contrib/asm?86/match.S ./match.S\n\n#    make LOC=-DASMV OBJA=match.o\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To install /usr/local/lib/libz.* and /usr/local/include/zlib.h, type:\n\n#    make install\n\n# To install in $HOME instead of /usr/local, use:\n\n#    make install prefix=$HOME\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#CFLAGS=-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7\n\n#CFLAGS=-g -DDEBUG\n\n#CFLAGS=-O3 -Wall -Wwrite-strings -Wpointer-arith -Wconversion \\\n#           -Wstrict-prototypes -Wmissing-prototypes\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# to use the asm code: make OBJA=match.o\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The ranlib in install is needed on NeXTSTEP which checks file times\n\n# ldconfig is for Linux\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE THIS LINE -- make depend depends on it.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "plugins/refcount_checker/CMakeLists.txt" : {
      "ObjectId" : "dabd67b0c0330c5efc525fca60a8111270dac708",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# from llvm-trunk/tools/clang/CMakeLists.txt:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Pyston addition:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# From llvm-trunk/tools/clang/tools/clang-check/CMakeLists.txt\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "7e10bc2afed5601400b0bcf1aff9c130e4a7803d",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build stdlib\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/runtime/inline/CMakeLists.txt" : {
      "ObjectId" : "f6533c3e78b7d377cc8e3e87e089f3fa9e2a7225",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Rob Jansen\n\n# \n\n# To the extent that a federal employee is an author of a portion of\n\n# this software or a derivative work thereof, no copyright is claimed by\n\n# the United States Government, as represented by the Secretary of the\n\n# Navy (\"GOVERNMENT\") under Title 17, U.S. Code. All Other Rights \n\n# Reserved.\n\n# \n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#     * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#     * Redistributions in binary form must reproduce the above\n\n# copyright notice, this list of conditions and the following disclaimer\n\n# in the documentation and/or other materials provided with the\n\n# distribution.\n\n#     * Neither the names of the copyright owners nor the names of its\n\n# contributors may be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# GOVERNMENT ALLOWS FREE USE OF THIS SOFTWARE IN ITS \"AS IS\" CONDITION\n\n# AND DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER\n\n# RESULTING FROM THE USE OF THIS SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adapted from https://github.com/shadow/shadow/blob/master/cmake/LLVMTools.cmake\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't do pgo here, as our gcc command line flags are incompatible with clang, and we\n\n# don't want to bake the instrumentation into the resulting bitcode anyway.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set compiler\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set CXX flags\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set defines\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set includes\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# generate the bitcode for this file\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# publicize the bitcode file\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# compile into a regular object file\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# keep track of every bitcode and object file we created\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# link all the bitcode files together\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# optimize stdlib\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "test/test_extension/CMakeLists.txt" : {
      "ObjectId" : "4302bef493621051a3c553ed7ca886ca16ac024f",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/unittests/CMakeLists.txt" : {
      "ObjectId" : "0336c786c580f59eb7f134e8ab7704104160b218",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "a8adb177772fd08ee0a98e6bf91a3c410e7e4628",
      "LastModified" : "2016-11-08T21:34:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 12,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 4
  },
  "ElapsedTime" : 2762
}