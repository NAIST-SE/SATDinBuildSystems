{
  "Repository" : "19133130",
  "Revision" : "HEAD",
  "ObjectId" : "115426c1bc632293a9b68a25956131dbb4a71aec",
  "CommitTime" : "2019-04-13T18:31:40Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a9804bb54f6de1ba21c3b63dad7aeb51d2ef8cb2",
      "LastModified" : "2019-02-27T20:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add project files\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# required to include CMake modules from own project directory\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# meta data\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find required 3rd party libraries\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# configure use of native file buffer and its backend implementation if enabled\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# check whether __gnu_cxx::stdio_filebuf is available\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# use __gnu_cxx::stdio_filebuf if available or fallback to boost::iostreams::stream_buffer\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# configure forcing UTF-8 code page under Windows\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# configure whether escape codes should be enabled by default\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# configure use of thread_local\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# include modules to apply configuration\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/modules/3rdParty.cmake" : {
      "ObjectId" : "d1e089929ee6905a88cc32acbd9afe4c6b9b6082",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prevent multiple inclusion\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# allows to look for static libraries in particular\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# allows to look for dynamic libraries in particular\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# determine whether the library is required or optional FIXME: improve passing required argument\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# add library to list of libraries to link against when building dynamic libraries or applications - prefer dynamic lib\n\n# if linkage not explicitely specified\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# add Qt resources of static library to be enabled\n",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# add library to list of libraries to be provided as transitive dependencies when building static libraries - prefer\n\n# static lib if linkage not explicitely specified\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# add Qt resources of static library for exporting it\n",
        "Line" : 178,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# internally used by find_external_library_from_package to find dynamic libraries\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# internally used by find_external_library_from_package to find static libraries\n",
        "Line" : 292,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# handle specified VERSION\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# use the find_library approach first because it is less buggy when trying to detect static libraries caveat: this way\n\n# include dirs are not detected - however those are mostly the default anyways and can also be set manually by the user\n\n# in case the auto-detection is not sufficient\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# fall back to actual use of find_package use separate functions to get a new scope\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# check whether iconv exists in standard lib\n",
        "Line" : 346,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# find external iconv library\n",
        "Line" : 353,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 15
    },
    "cmake/modules/AppTarget.cmake" : {
      "ObjectId" : "da3f25c47f364d4aacf0c12afdd59d39dc2c546c",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check whether project type is set correctly\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the windows extension to \"exe\", this is required by the Windows specific WindowsResources module\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set compile definitions\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set linker flags\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define relevant files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add target for building the application\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# create a library which can be loaded from the Java-side\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# add install target for binary\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# add mingw-w64 specific install target\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# add install target for desktop entries and icons\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# add install target for stripped binaries\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# add mingw-w64 specific install targets\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# add target for launching application with wine ensuring the WINEPATH is set correctly so wine is able to find all required\n\n# *.dll files requires script from c++utilities, hence the sources of c++utilities must be present\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# find template for *.desktop files\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# function to add *.desktop files with additional entries FIXME v5: use \"include(CMakeParseArguments)\" like in\n\n# ReflectionGenerator.cmake\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# create desktop file from template\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# add install for the desktop file\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# function to add *.desktop files\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# convenience function to add *.desktop file and meta info from project meta data\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# compose actions\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# create desktop file\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# read body for appstream desktop file from resources\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# add indentation of two additional spaces\n",
        "Line" : 249,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# create appstream desktop file from template\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# add install for the appstream file\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "cmake/modules/BasicConfig.cmake" : {
      "ObjectId" : "cd38df3687d37bae523dd5bf710836b6dcf9c6c3",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# before including this module, the project meta-data must be set\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set project name (displayed in Qt Creator)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set META_PROJECT_VARNAME and META_PROJECT_VARNAME_UPPER if not specified explicitely\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set META_GENERIC_NAME to META_APP_NAME if not specified explicitely\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set default CXX_STANDARD for all library, application and test targets\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set version to 0.0.0 if not specified explicitely\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set META_ID to META_PROJECT_NAME if not specified\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set bugtracker URL\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# determine license automatically from LICENSE file\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# provide variables for other projects built as part of the same subdirs project to access files from this project\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# determine version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# set TARGET_EXECUTABLE which is used to refer to the target executable at its installation location\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# create header for feature detection\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# disable new ABI (can't catch ios_base::failure with new ABI)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# enable debug-only code when doing a debug build\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# enable logging when option is set\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# options for deciding whether to build static and/or shared libraries\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# options for forcing static linkage when building applications or dynamic libraries\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# additional linker flags used when static linkage is enabled\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# determine whether the project is a header-only library\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# options for enabling/disabling Qt GUI (if available)\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# find coding style (use style from c++utilities if none included in own project dir)\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# enable testing\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# make finding testfiles in out-of-source-tree build more convenient by adding a reference to the source directory (not only\n\n# useful if there's a test target; this is for instance also used in mocked configuration of syncthingtray) -> add a file\n\n# called \"srcdirref\" to the build directory; this file contains the path of the sources so tests can easily find test files\n\n# contained in the source directory\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# -> ensure the directory \"testfiles\" exists in the build directory; tests of my projects use it by default to create working\n\n# copies of testfiles\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# determine source files which might be passed to clang-format or clang-tidy\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# only format C/C++ files (and not eg. QML files)\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# determine source files which might be passed to cmake-format\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# add command for symlinking clang-{format,tidy} rules so the tools can find it\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# allow user to configure creation of tidy targets unless the project disables this via META_NO_TIDY\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add target for tidying with clang-format\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# also add a test to verify whether sources are tidy\n",
        "Line" : 313,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# add target for tidying with cmake-format\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# add target for static code analysis using clang-tidy\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# compose options for clang-tidy\n",
        "Line" : 359,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# compose CXX flags for clang-tidy\n",
        "Line" : 366,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# deduce flags from target\n",
        "Line" : 369,
        "CharPositionInLine" : 12
      },
      "37" : {
        "Text" : "# set c++ standard\n",
        "Line" : 374,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# add compile flags\n",
        "Line" : 376,
        "CharPositionInLine" : 12
      },
      "39" : {
        "Text" : "# add compile definitions\n",
        "Line" : 379,
        "CharPositionInLine" : 12
      },
      "40" : {
        "Text" : "# add include directories\n",
        "Line" : 382,
        "CharPositionInLine" : 12
      },
      "41" : {
        "Text" : "# set at least c++ standard for header-only libs\n",
        "Line" : 386,
        "CharPositionInLine" : 12
      },
      "42" : {
        "Text" : "# add a custom command for each source file\n",
        "Line" : 390,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# skip header files\n",
        "Line" : 393,
        "CharPositionInLine" : 12
      },
      "44" : {
        "Text" : "# use symbolic output file since there's no actual output file (we're just interested in the log)\n",
        "Line" : 398,
        "CharPositionInLine" : 12
      },
      "45" : {
        "Text" : "# mark all symbolic output files actually as symbolic\n",
        "Line" : 410,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# add targets\n",
        "Line" : 413,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# add autotools-style check target\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# enable source code based coverage analysis using clang\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# configure creation of install targets\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# install targets have not been disabled on project level check whether install targets are disabled by the user this\n\n# might be useful since install targets seem to cause problems under MacOS\n",
        "Line" : 456,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# add install target for extra files\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# determine library directory suffix note: Applications might be built as libraries under some platforms (eg. Android). Hence\n\n# this is part of BasicConfig and not LibraryConfig.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "cmake/modules/ConfigHeader.cmake" : {
      "ObjectId" : "3a4f0806913c81d2a833254dd86f0bce2a6bde2d",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# before including this module, all relevant variables must be set just include this module as last one since nothing should\n\n# depend on it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find config.h template\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create list of dependency versions present at link time (one list for shared library and another for the static library\n\n# since the lists might differ)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# iterate through public and private libraries of shared/static library\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# find version and display name for target\n",
        "Line" : 24,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# read meta-data of Qt module\n",
        "Line" : 26,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# read meta-data of one of my own libraries\n",
        "Line" : 31,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# FIXME: provide meta-data for other libs, too\n",
        "Line" : 39,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# add configuration header\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ensure generated include files can be included via #include \"resources/config.h\"\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/modules/Doxygen.cmake" : {
      "ObjectId" : "a681fd242ca79781cb770205d67fd784dc1493ec",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find doxygen.h template\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find executables\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# load cached configuration and other variables\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# convert DOXY_INPUT_FILES to whitespace-separated list\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# generate Doxygen configuration\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add target for generating API documentation\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add install target for API documentation\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/LibraryTarget.cmake" : {
      "ObjectId" : "e3a0ada8e2df914b5733ebcd20969e0b854dc09f",
      "LastModified" : "2019-02-27T20:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check whether project type is set correctly\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# includes for configure_package_config_file, write_basic_package_version_file and find_template_file\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set install destination for the CMake modules, config files and header files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# remove library prefix when building with mingw-w64 (just for consistency with qmake)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set the windows extension to \"dll\", this is required by the mingw-w64 specific WindowsResources module\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set compile definitions\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add global library-specific header\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# simply add this to source to ease inclusion\n",
        "Line" : 71,
        "CharPositionInLine" : 54
      },
      "8" : {
        "Text" : "# since this goes to sources ensure consistency\n",
        "Line" : 72,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : "# determine SOVERSION\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# define relevant files\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# determine include path used when building the project itself\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# use special include directory if available\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# use the project folder itself\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# add target for building the library\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# add library to be created, set libs to link against, set version and C++ standard\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# add target for building a static version of the library\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add library to be created, set required libs, set version and C++ standard\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Qt Creator does not show INTERFACE_SOURCES in project tree, so create a custom target as workaround\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# create the CMake package config file from template\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# write the CMake version config file\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# create pkg-config file from template\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# add install target for the CMake config files\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# add install target for pkg-config file\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# add install target for libs\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# add install target for stripped libs\n",
        "Line" : 367,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# determine install dir for Qt plugins\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add install targets and export targets\n",
        "Line" : 396,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# export shared lib\n",
        "Line" : 405,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# export static target\n",
        "Line" : 419,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# add install target for header files\n",
        "Line" : 426,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# add install target for CMake modules\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# add install target for CMake templates\n",
        "Line" : 452,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# add install target for all the cmake stuff\n",
        "Line" : 465,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# add mingw-w64 specific install targets\n",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 35
    },
    "cmake/modules/ListToString.cmake" : {
      "ObjectId" : "fe5b0e7c8008e2a086d70fb46a0c709ca8d37ea9",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prevent multiple inclusion\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get list length\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# if the list has 0 or 1 element, there is no need to loop over\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# get current item_value\n",
        "Line" : 17,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# .. and append non-empty value to output string\n",
        "Line" : 20,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# append separator if current element is NOT the last one.\n",
        "Line" : 22,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 6
    },
    "cmake/modules/ShellCompletion.cmake" : {
      "ObjectId" : "dfee79617514919c3a15f6369f4b9acd754d73a7",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add bash completion (currently the only supported shell completion)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find bash-completion.sh template\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# generate wrapper script for bash completion\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add install target bash completion\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/TemplateFinder.cmake" : {
      "ObjectId" : "f3f67879aa29c9d239ec64cdf18fc0d25c5c1c81",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prevent multiple inclusion\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check own source directory\n",
        "Line" : 9,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# check sources of project\n",
        "Line" : 13,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# check installed version of project\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cmake/modules/TestTarget.cmake" : {
      "ObjectId" : "5b3cb860d965ea66abfecceac2eb20f4300cb4a1",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find and link against cppunit if required (used by all my projects, so it is required by default)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make cppunit library/include dir configurable\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# set default for minimum version (only checked when using pkg-config)\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# auto-detection: try to find via pkg-config first\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# fall back to find_library\n",
        "Line" : 35,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# add default cppunit test application if requested\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# always link test applications against c++utilities\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set compile definitions\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add target for test executable, but exclude it from the \"all\" target when EXCLUDE_TESTS_FROM_ALL is set\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add top-level target to build all test targets conveniently, also when excluded from \"all\" target\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# handle testing a library (which is default project type)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# when testing a library, the test application always needs to link against it\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# handle testing an application\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# using functions directly from the tests might be required -> also create a 'testlib' and link tests against it\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# create target for the 'testlib'\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# link tests against it\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# ensure all symbols are visible (man gcc: \"Despite the nomenclature, default always means public\")\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# actually apply configuration for test target\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# make the test recognized by ctest\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# enable source code based coverage analysis using clang\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# define path of raw profile data\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# define path of list with additional raw profile data from fork processes spawned during tests\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# define path of merged profile data generated from raw profiling data\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# define paths of output files\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# specify where to store raw clang profiling data via environment variable\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# merge profiling data\n",
        "Line" : 240,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# determine llvm-cov version\n",
        "Line" : 246,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# determine the target file for llvm-cov\n",
        "Line" : 259,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# generate coverage report with statistics per function\n",
        "Line" : 266,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# LLVM 5 introduced -show-functions; this is required to get the same behavior as previously (statistics on\n\n# function-level)\n",
        "Line" : 269,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "# generate coverage report with statistics per file (only possible with LLVM 5 if source files are specified)\n",
        "Line" : 281,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# add target for the coverage reports\n",
        "Line" : 293,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# generate coverage overall report (total region/line coverage) NOTE: added before release of LLVM 5 where coverage\n\n# report with statistics per file could not be generated\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# generate HTML document showing covered/uncovered code\n",
        "Line" : 312,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# create target for all coverage docs\n",
        "Line" : 322,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# add targets to global coverage target\n",
        "Line" : 327,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# add the test executable to the dependencies of the check target\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "cmake/modules/WindowsResources.cmake" : {
      "ObjectId" : "52db2fd4bdedabd05012f1060452688fd89bbe5f",
      "LastModified" : "2019-02-06T16:30:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generates and adds a Windows rc file for the application/library also attaches the application icon if ffmpeg is available\n\n# does nothing if not building with mingw-w64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find rc template, define path of output rc file\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create Windows icon from png with ffmpeg if available\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# default cropping\n",
        "Line" : 35,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# create Windows rc file from template\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set windres as resource compiler\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 12
  },
  "ElapsedTime" : 611
}