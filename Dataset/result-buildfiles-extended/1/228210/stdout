{
  "Repository" : "228210",
  "Revision" : "HEAD",
  "ObjectId" : "25712016bc9e3d445f87d9099d7781aeb51d7308",
  "CommitTime" : "2014-02-28T17:08:23Z",
  "Files" : {
    "android/ActionBarSherlockLib/pom.xml" : {
      "ObjectId" : "3b6ce40ce1d0d7144fbe059ad6ff7730e3fab6ee",
      "LastModified" : "2013-02-28T00:02:31Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.",
        "Line" : 120,
        "CharPositionInLine" : 130
      },
      "CommentCount" : 1
    },
    "android/IOIOLib/build.xml" : {
      "ObjectId" : "41f94c047433e674b87f49b7d2e09ae186cb511d",
      "LastModified" : "2013-02-28T00:02:31Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 39,
        "CharPositionInLine" : 77
      },
      "3" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 42,
        "CharPositionInLine" : 36
      },
      "4" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " version-tag: 1 ",
        "Line" : 80,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 7
    },
    "android/IOIOLibAccessory/build.xml" : {
      "ObjectId" : "0a74bbccb0c70fcf92e5aa28a44bcffec81ea247",
      "LastModified" : "2013-08-30T13:13:43Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "android/IOIOLibBT/build.xml" : {
      "ObjectId" : "c3a81d1cbc70ace047c280a718985448390a097c",
      "LastModified" : "2013-08-30T13:13:43Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "bin/mac/build.xml" : {
      "ObjectId" : "5656ebea2bbbd896c6d3bbd5d64b9c43b64f2e10",
      "LastModified" : "2013-08-30T13:13:43Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "build.xml" : {
      "ObjectId" : "5b9b988b0688996e4d0d3096b1ce2371afa95c82",
      "LastModified" : "2013-09-06T21:38:02Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"RemoteControlCar-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "cpp/RCServer/Makefile" : {
      "ObjectId" : "05de621e858db82f833158636204309122e2dfa5",
      "LastModified" : "2013-09-06T21:38:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  There exist several targets which are by default empty and which can be \n\n#  used for execution of your targets. These targets are usually executed \n\n#  before and after some main targets. They are: \n\n#\n\n#     .build-pre:              called before 'build' target\n\n#     .build-post:             called after 'build' target\n\n#     .clean-pre:              called before 'clean' target\n\n#     .clean-post:             called after 'clean' target\n\n#     .clobber-pre:            called before 'clobber' target\n\n#     .clobber-post:           called after 'clobber' target\n\n#     .all-pre:                called before 'all' target\n\n#     .all-post:               called after 'all' target\n\n#     .help-pre:               called before 'help' target\n\n#     .help-post:              called after 'help' target\n\n#\n\n#  Targets beginning with '.' are not intended to be called on their own.\n\n#\n\n#  Main targets can be executed directly, and they are:\n\n#  \n\n#     build                    build a specific configuration\n\n#     clean                    remove built files from a configuration\n\n#     clobber                  remove all built files\n\n#     all                      build all configurations\n\n#     help                     print help mesage\n\n#  \n\n#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and\n\n#  .help-impl are implemented in nbproject/makefile-impl.mk.\n\n#\n\n#  Available make variables:\n\n#\n\n#     CND_BASEDIR                base directory for relative paths\n\n#     CND_DISTDIR                default top distribution directory (build artifacts)\n\n#     CND_BUILDDIR               default top build directory (object files, ...)\n\n#     CONF                       name of current configuration\n\n#     CND_PLATFORM_${CONF}       platform name (current configuration)\n\n#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)\n\n#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)\n\n#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)\n\n#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)\n\n#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)\n\n#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)\n\n#\n\n# NOCDDL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Environment \n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add your pre 'build' code here...\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add your post 'build' code here...\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# clean\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add your pre 'clean' code here...\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add your post 'clean' code here...\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clobber\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add your pre 'clobber' code here...\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add your post 'clobber' code here...\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# all\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add your pre 'all' code here...\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add your post 'all' code here...\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# build tests\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add your pre 'build-tests' code here...\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add your post 'build-tests' code here...\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# run tests\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add your pre 'test' code here...\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add your post 'test' code here...\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# help\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add your pre 'help' code here...\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Add your post 'help' code here...\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# include project implementation makefile\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# include project make variables\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "desktop/BrowserTest/build.xml" : {
      "ObjectId" : "77c14c02cc584907fbe7fcb4c9810e96518c7b89",
      "LastModified" : "2013-09-06T21:38:02Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"BrowserTest-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "desktop/BrowserTest/lib/jna-src/build.xml" : {
      "ObjectId" : "095da4bab5789aeb9c171b7bfaf2b20c169a39e6",
      "LastModified" : "2013-09-06T21:38:02Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Default build compiles all platform-independent stuff as well\n       as the JNI bits for the current platform, using the arch model\n       of the current Java VM to determine whether 32- or 64-bit\n       binaries are built (ANT_OPTS=-d32/-d64 to switch on platforms that\n       support it).\n\n       Cross-compile by specifying -Dos.prefix={name-arch} to ant\n       (cross-compile currently only configured/tested on w32ce-arm)\n\n       Use -Dskip-native to skip building native parts.\n       Use -Dheadless to run tests headless\n    ",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "\n  Conventions (since ant can't easily specify arbitrary file dependencies):\n  The uptodate property for a given target TARGET is \"-TARGET\"; the actual\n  target to generate the uptodate property is named \":TARGET\".\n\n  Properties (except for uptodate properties) separate words by dots, targets\n  by dashes.\n  ",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : " global properties ",
        "Line" : 27,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : " (all build-related props should go in -dynamic-properties) ",
        "Line" : 28,
        "CharPositionInLine" : 70
      },
      "4" : {
        "Text" : " JNA library release version ",
        "Line" : 50,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : " jnidispatch library release version ",
        "Line" : 56,
        "CharPositionInLine" : 47
      },
      "6" : {
        "Text" : " Set up restrictions for w32ce, based on JavaME/CDC ",
        "Line" : 70,
        "CharPositionInLine" : 62
      },
      "7" : {
        "Text" : " Maven ",
        "Line" : 82,
        "CharPositionInLine" : 17
      },
      "8" : {
        "Text" : " define Maven coordinates ",
        "Line" : 83,
        "CharPositionInLine" : 36
      },
      "9" : {
        "Text" : " defined maven snapshots and staging repository id and url ",
        "Line" : 96,
        "CharPositionInLine" : 69
      },
      "10" : {
        "Text" : " Miscellaneous ",
        "Line" : 102,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : " Add other supported platforms here ",
        "Line" : 149,
        "CharPositionInLine" : 48
      },
      "12" : {
        "Text" : " Darwin builds are universal, no arch required ",
        "Line" : 166,
        "CharPositionInLine" : 59
      },
      "13" : {
        "Text" : " Sources package as required by maven ",
        "Line" : 288,
        "CharPositionInLine" : 50
      },
      "14" : {
        "Text" : " args are based on GNU grep, other versions may differ ",
        "Line" : 319,
        "CharPositionInLine" : 67
      },
      "15" : {
        "Text" : " Clean up gcj javah output to match that of Sun's javah ",
        "Line" : 327,
        "CharPositionInLine" : 68
      },
      "16" : {
        "Text" : " Invalidate native libraries when native API changes ",
        "Line" : 350,
        "CharPositionInLine" : 63
      },
      "17" : {
        "Text" : " Handle cross-compilation ",
        "Line" : 414,
        "CharPositionInLine" : 38
      },
      "18" : {
        "Text" : " ensure ARCH is set properly for 64-bit capable platforms ",
        "Line" : 427,
        "CharPositionInLine" : 70
      },
      "19" : {
        "Text" : " use ANT_OPTS=-d64 to build 64-bit if not the platform default ",
        "Line" : 428,
        "CharPositionInLine" : 75
      },
      "20" : {
        "Text" : " Windows' drive letters and spaces in absolute paths wreak havoc on\n         make ",
        "Line" : 452,
        "CharPositionInLine" : 18
      },
      "21" : {
        "Text" : " Default make program ",
        "Line" : 474,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : " For web start, native libraries may be provided in the root of ",
        "Line" : 503,
        "CharPositionInLine" : 76
      },
      "23" : {
        "Text" : " an included jar file ",
        "Line" : 504,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : " Create a jar for easy movement of tests ",
        "Line" : 529,
        "CharPositionInLine" : 53
      },
      "25" : {
        "Text" : " 'shared' should be the path to a folder mounted as the mobile\n         device/simulator storage card. ",
        "Line" : 551,
        "CharPositionInLine" : 44
      },
      "26" : {
        "Text" : " w32ce arm testing ",
        "Line" : 553,
        "CharPositionInLine" : 31
      },
      "27" : {
        "Text" : " When running tests from an IDE, be sure to set jna.library.path ",
        "Line" : 566,
        "CharPositionInLine" : 75
      },
      "28" : {
        "Text" : " to where the test library (testlib) is found.                   ",
        "Line" : 567,
        "CharPositionInLine" : 75
      },
      "29" : {
        "Text" : " Sun 64-bit VM for windows doesn't support the -d64 switch ",
        "Line" : 590,
        "CharPositionInLine" : 75
      },
      "30" : {
        "Text" : " optionally run headless ",
        "Line" : 600,
        "CharPositionInLine" : 39
      },
      "31" : {
        "Text" : " avoid VM conflicts with JNA protected mode ",
        "Line" : 602,
        "CharPositionInLine" : 58
      },
      "32" : {
        "Text" : " Ignore any system install of JNA ",
        "Line" : 605,
        "CharPositionInLine" : 48
      },
      "33" : {
        "Text" : " Avoid VM crashes, if possible ",
        "Line" : 607,
        "CharPositionInLine" : 45
      },
      "34" : {
        "Text" : " stylesheetfile=\"${stylesheet}\" ",
        "Line" : 687,
        "CharPositionInLine" : 46
      },
      "35" : {
        "Text" : "\n            OSGi Bundle attributes\n            See http://www.osgi.org/Specifications/Reference\n          ",
        "Line" : 735,
        "CharPositionInLine" : 14
      },
      "36" : {
        "Text" : " Note that no terminal \"*\" is included in this list,\n             which will force failure on unsupported platforms.\n          ",
        "Line" : 748,
        "CharPositionInLine" : 14
      },
      "37" : {
        "Text" : " Javadoc ",
        "Line" : 872,
        "CharPositionInLine" : 21
      },
      "38" : {
        "Text" : " JNA sources only, for use in Linux build from source/shared libffi ",
        "Line" : 873,
        "CharPositionInLine" : 80
      },
      "39" : {
        "Text" : " Full sources required to build and test everything ",
        "Line" : 881,
        "CharPositionInLine" : 64
      },
      "40" : {
        "Text" : " Sources package as required by maven ",
        "Line" : 888,
        "CharPositionInLine" : 50
      },
      "41" : {
        "Text" : " before this, update project version (both build.xml and ${pom}) from SNAPSHOT to RELEASE ",
        "Line" : 919,
        "CharPositionInLine" : 100
      },
      "42" : {
        "Text" : " sign and deploy the main artifact ",
        "Line" : 921,
        "CharPositionInLine" : 47
      },
      "43" : {
        "Text" : " sign and deploy the sources artifact ",
        "Line" : 931,
        "CharPositionInLine" : 50
      },
      "44" : {
        "Text" : " sign and deploy the javadoc artifact ",
        "Line" : 942,
        "CharPositionInLine" : 50
      },
      "45" : {
        "Text" : " sign and deploy the sources artifact ",
        "Line" : 962,
        "CharPositionInLine" : 50
      },
      "46" : {
        "Text" : " sign and deploy the javadoc artifact ",
        "Line" : 973,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 47
    },
    "desktop/BrowserTest/lib/jna-src/native/Makefile" : {
      "ObjectId" : "72dfe8a650883e86d7e360d3f8c8ab7f27267894",
      "LastModified" : "2013-09-06T21:38:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for JNA native bits\n\n# Copyright (c) 2007-2012 Timothy Wall All Rights Reserved\n\n#\n\n# You may need to run 'ant javah' at the root before performing a build from\n\n# this directory.\n\n#\n\n# To build with debug information, use 'make DEBUG=true'\n\n#\n\n# Supported platforms (built and tested):\n\n#\n\n#   Windows 2000/XP/2003/Vista (x86/amd64)\n\n#   Windows CE/Mobile (arm)\n\n#   Darwin/OS X (i386/x86_64/ppc)\n\n#   Linux (i386/amd64/ppc/arm)\n\n#   Solaris (i386/amd64/sparc/sparcv9)\n\n#   AIX (ppc/ppc64)\n\n#   FreeBSD/OpenBSD/NetBSD (i386/amd64)\n\n#\n\n# Built, but with outstanding bugs (not necessarily within JNA):\n\n#\n\n#   Linux (ppc64/ia64)\n\n#\n\n# The w32ce build requires cegcc and phoneME for cross-compilation; if these\n\n# tools are available on the path than \"ant -Dos.prefix=w32ce-arm\" should\n\n# result in a proper build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Systems which support POSIX signals may be able to support VM crash\n\n# protection simply by defining HAVE_PROTECTION.  This option has been only\n\n# been enabled for those platforms on which it has been tested successfully.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# auto-generated by ant\n",
        "Line" : 42,
        "CharPositionInLine" : 22
      },
      "3" : {
        "Text" : "# auto-generated by ant\n",
        "Line" : 43,
        "CharPositionInLine" : 42
      },
      "4" : {
        "Text" : "# Reasonable defaults based on GCC\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Default to Sun recommendations for JNI compilation\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# -mno-cygwin is only available on GCC 3; GCC 4 requires an explicit mingw\n\n# installation\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Uncomment to enable MINGW64 cross compiler; ensure mingw32-gcc is in PATH\n\n# Should build properly as of 111121, but lacks SEH, so MSVC build is preferred\n\n#MINGW=x86_64-w64-mingw32-gcc \n\n# Still need windres from mingw distribution\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MSVC (wrapper scripts)\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# alter CC instead of PCFLAGS, since we need to pass it down to libffi\n\n# configure and some of the other settings in PCFLAGS might make the build\n\n# choke\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Enable 64-bit builds if the arch demands it\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#ARCHFLAGS=-arch i386 -arch x86_64\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# JAWT linkage handled by -framework JavaVM\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Unfortunately, we have to use different libffi include files depending on\n\n# the target, so we can't do a simple universal build on darwin.  Do\n\n# separate builds, then merge the results.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#EOF\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15,
      "Errorlog" : "line 135:68 token recognition error at: '\\1'\nline 275:83 token recognition error at: '\\1'\n"
    },
    "desktop/BrowserTest/swtbuild/build.xml" : {
      "ObjectId" : "79fe153e220b45c3ea61885f6f25d5f7bb706426",
      "LastModified" : "2013-09-06T21:38:02Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Application Classes ",
        "Line" : 8,
        "CharPositionInLine" : 37
      },
      "1" : {
        "Text" : " Library Classes ",
        "Line" : 10,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : " SWT Jars ",
        "Line" : 15,
        "CharPositionInLine" : 26
      },
      "CommentCount" : 3
    },
    "desktop/MacApplication/build.xml" : {
      "ObjectId" : "60168f1b4cb70f6e7233653c83b7eaa4bbcfbaf1",
      "LastModified" : "2013-09-06T21:38:02Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"MacApplication-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "swtbuild/build.xml" : {
      "ObjectId" : "bf2a77ec14caa03017b51caa27d8f2515d9c7fde",
      "LastModified" : "2013-09-10T12:46:23Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Application Classes ",
        "Line" : 8,
        "CharPositionInLine" : 37
      },
      "1" : {
        "Text" : " Library Classes ",
        "Line" : 10,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : " SWT Jars ",
        "Line" : 20,
        "CharPositionInLine" : 26
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2,
    "ANT" : 10,
    "MAVEN" : 1
  },
  "ElapsedTime" : 11457
}