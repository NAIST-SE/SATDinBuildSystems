{
  "Repository" : "7669814",
  "Revision" : "HEAD",
  "ObjectId" : "69f2f3674d6f8e512e0bf55264bb75b972fd82de",
  "CommitTime" : "2017-05-04T20:37:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6dcc6c95b8746c6ae566b7bf2613a9e0c27f3de2",
      "LastModified" : "2015-12-29T22:13:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# (2.8 has ExternalProject support; we've had problems with package detection for versions < 2.8.12)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if( NOT DEFINED ENV{CXX} )\n\n#   message(FATAL_ERROR \"you must set CC & CXX environment variables!\")\n\n# endif()\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION \"com.apple.compilers.clang.3_4\")\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set(CMAKE_BUILD_TYPE RelWithDebInfo)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check GCC version\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########################\n\n# Use RUNPATH if available\n\n# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use final INSTALL_RPATH even in build tree (this lets us manually add things to CMAKE_INSTALL_RPATH)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n\n# set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# not a system directory\n",
        "Line" : 61,
        "CharPositionInLine" : 35
      },
      "10" : {
        "Text" : "## Not setting runpath because having MPI libs in LD_LIBRARY_PATH was messing up VampirTrace's ability to find its own libs. Maybe there's another way to fix this, but it just seems more robust (for now) to not allow LD_LIBRARY_PATH to affect our libs (after configure uses it to find them).\n\n# set runpath, too\n\n# if(NOT APPLE)\n\n#   set(CMAKE_EXE_LINKER_FLAGS \"-Wl,--enable-new-dtags\")\n\n# endif()\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##### </RUNPATH> ########\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#############################################################################\n\n# configure profiling and tracing\n\n#############################################################################\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TODO:Fix VampirTrace support\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "### TODO: one of these is correct\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -finstrument-functions\")\n\n# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -finstrument-functions\")\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# list(APPEND GRAPPA_DYNAMIC_LIBS vt otf z papi dl m)\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# set(CMAKE_C_FLAGS \"-vt:cc  ${CMAKE_C_FLAGS} -pthread\")\n\n# set(CMAKE_CXX_FLAGS \"-vt:cxx ${GCC_BASE}/bin/g++ ${CMAKE_CXX_FLAGS}\")\n\n# set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} --as-needed --whole-archive -lvt --no-whole-archive --no-as-needed -lopen-trace-format -lz -lpapi -ldl -lm\")\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# global C++ flags\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# TODO: use -stdlib=libc++ too?\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#########################################\n\n# Determine third party tools to build\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# External libraries and third-party tools\n\n#\n\n# GRAPPA_STATIC_LIBS is a list of full paths to .a files\n\n# GRAPPA_DYNAMIC_LIBS is a list of full paths to .so files\n\n# Include directories should be set explicitly here\n\n# Link directories should not; they will be extracted from the full lib paths\n\n#\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "######################################################################\n\n# MPI\n\n######################################################################\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "######################################################################\n\n# PMI: helpful for job launch on some systems with Slurm.\n\n# MPI may already include it, but we ignore that here.\n\n######################################################################\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "######################################################################\n\n# Pthreads\n\n######################################################################\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "######################################################################\n\n# POSIX realtime extensions\n\n######################################################################\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "######################################################################\n\n# Google logging (Grappa-customized)\n\n######################################################################\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# assume it will be built in third-party\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "######################################################################\n\n# Google flags\n\n# in theory, it may come from third-party or from system directories,\n\n# but for simplicity now just use the one in third-party.\n\n######################################################################\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# assume it will be built in third-party\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "######################################################################\n\n# Graph500 Kronecker generator (Grappa-customized)\n\n######################################################################\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# assume it will be built in third-party\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "######################################################################\n\n# Google profiler\n\n######################################################################\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "######################################################################\n\n# Boost (everything but unit tests)\n\n######################################################################\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# try single-threaded first\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# CMake 2.8 doesn't list most recent Boost versions, so add them ourselves\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# first, search for things that we'd prefer to be static\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# if that didn't work, re-search for dynamic versions\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# we turned off Boost_USE_STATIC_LIBS above\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# if we did find a pre-installed version, add its paths to our build environment\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# we will deal with the rest of the not found case after searching\n\n# for the unit test libraries, since setting some boost variables\n\n# screws up the search.\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "######################################################################\n\n# Boost (unit tests only)\n\n######################################################################\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# pick up from third-party\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# if we did find a pre-installed version, add its paths to our build environment\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# build is specified in third-party/CMakeLists.txt\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# now we need to set flags appropriately.\n\n# include path is fine since we already include THIRD_PARTY_ROOT\n\n# link path is fine since we already include THIRD_PARTY_ROOT\n\n# RPATH is fine since we already include THIRD_PARTY_ROOT\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "####################################\n\n# Load all third party libraries\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# RPATH\n\n# not sure if this is useful any more, but what the heck.\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# clang doesn't have this flag it seems, needed for Relation_io_tests.cpp in Travis\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# For organization in Xcode project\n",
        "Line" : 383,
        "CharPositionInLine" : 62
      },
      "50" : {
        "Text" : "# name without extension\n",
        "Line" : 389,
        "CharPositionInLine" : 47
      },
      "51" : {
        "Text" : "# For organization in Xcode project\n",
        "Line" : 392,
        "CharPositionInLine" : 55
      },
      "52" : {
        "Text" : "# TODO: use \"ctest\" to make whole regression test suite\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Add test target with dependent build command\n",
        "Line" : 410,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "####################\n\n# find igor scripts\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# filter out build directory\n",
        "Line" : 428,
        "CharPositionInLine" : 72
      },
      "56" : {
        "Text" : "# message(\"igor scripts: ${igor_scripts}\")\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# put Grappa system directory on include path for everything following this\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "####################################\n\n# Grappa subdirectories\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#############################################################################\n\n# Generate GNU Make include file with appropriate definitions for\n\n# standalone builds.\n\n#############################################################################\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Figure out what type of build we're installing\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# combine generic CXX flags with flags for current build type\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Get definitions and convert from CMake-formatted list to Gnu compiler argument list\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# get include dirs and convert from CMake-formatted list to compiler argument list\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# -1 if not found, 0 if found\n\n# -1 if not found, 0 if found\n",
        "Line" : 473,
        "CharPositionInLine" : 70
      },
      "65" : {
        "Text" : "# -1 if not found, 0 if found\n",
        "Line" : 475,
        "CharPositionInLine" : 68
      },
      "66" : {
        "Text" : "# Get link dirs and convert from CMake-formatted list to compiler argument list (including system for libGrappa.a)\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "####################################\n\n# Build lists of library names and paths\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# static libs\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# add directory to search paths\n",
        "Line" : 497,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# get directory for libs\n",
        "Line" : 498,
        "CharPositionInLine" : 47
      },
      "71" : {
        "Text" : "# -1 if not found, 0 if found\n\n# -1 if not found, 0 if found\n",
        "Line" : 500,
        "CharPositionInLine" : 67
      },
      "72" : {
        "Text" : "# add library to link list\n",
        "Line" : 506,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# remove any extension\n\n# chop off \"lib\"\n",
        "Line" : 507,
        "CharPositionInLine" : 47
      },
      "74" : {
        "Text" : "# check for reasonable extension\n",
        "Line" : 511,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# dynamic libs\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# add directory to search paths\n",
        "Line" : 521,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# -1 if not found, 0 if found\n\n# -1 if not found, 0 if found\n",
        "Line" : 524,
        "CharPositionInLine" : 68
      },
      "78" : {
        "Text" : "# add library to link list\n",
        "Line" : 530,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# check for reasonable extension\n",
        "Line" : 535,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# remove duplicates\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# fill in prototype file and place in build directory\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#\n\n# Installation\n\n#\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 83
    },
    "applications/CMakeLists.txt" : {
      "ObjectId" : "ddcf18d403aac8439eb51952954108297d989f9c",
      "LastModified" : "2014-05-27T02:55:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/NPB/GRAPPA/IS/CMakeLists.txt" : {
      "ObjectId" : "f3b7db6ed145b366f57f6cac40660fddb93c8c43",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/NPB/GRAPPA/sys/Makefile" : {
      "ObjectId" : "56d1c444bd865369cd51b9d50a512dcda363ab8d",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Note that COMPILE is also defined in make.common and should\n\n# be the same. We can't include make.common because it has a lot\n\n# of other garbage. LINK is not defined in make.common because\n\n# ${MPI_LIB} needs to go at the end of the line. \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setparams creates an npbparam.h file for each benchmark \n\n# configuration. npbparams.h also contains info about how a benchmark\n\n# was compiled and linked\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/MPI/BT/Makefile" : {
      "ObjectId" : "dd27503221c9a0c4fea0e356b8f9a586d6782f7a",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/MPI/CG/Makefile" : {
      "ObjectId" : "02387d476095a32ea900885d15a365779c603616",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/MPI/DT/Makefile" : {
      "ObjectId" : "687ac33241d5378007f05e65570f9138048cf3c8",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Override PROGRAM\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/NPB/MPI/EP/Makefile" : {
      "ObjectId" : "5fa8cc346026de43959ed5f8c519f2e434bc958e",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/MPI/FT/Makefile" : {
      "ObjectId" : "1cc6e1416b148d8ba9eea7a0fb49755b261abfb7",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/MPI/IS/Makefile" : {
      "ObjectId" : "0ac4ae959ecb4b41168e62234b6b4c41e7b6888c",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/MPI/LU/Makefile" : {
      "ObjectId" : "62891f8bbad467b1fcdb651399c4fe41144092a0",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by applu.incl\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# applu.incl: npbparams.h\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/MPI/MG/Makefile" : {
      "ObjectId" : "1554bedeeaed2d3965176e441de18a2ac1daedaa",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/MPI/MPI_dummy/Makefile" : {
      "ObjectId" : "86288d7a1d8441b1d9d601ca75e7786d4d291da7",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for MPI dummy library. \n\n# Must be edited for a specific machine. Does NOT read in \n\n# the make.def file of NPB 2.3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable if either Cray or IBM: (no such flag for most machines: see wtime.h)\n\n# MACHINE\t=\t-DCRAY\n\n# MACHINE\t=\t-DIBM\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For a Cray C90, try:\n\n#\tcf77 -dp -c mpi_dummy.f\n\n# For an IBM 590, try:\n\n#\txlf -c mpi_dummy.f\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For most machines or CRAY or IBM\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For a precise timer on an SGI Power Challenge, try:\n\n#\t$(CC) -o wtime.o -c wtime_sgi64.c\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "applications/NPB/MPI/Makefile" : {
      "ObjectId" : "8f356aa71da31738377180a0471fb8a29bbbd062",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Awk script courtesy cmg@cray.com, modified by Haoqiang Jin\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# It would be nice to make clean in each subdirectory (the targets\n\n# are defined) but on a really clean system this will won't work\n\n# because those makefiles need config/make.def\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/MPI/SP/Makefile" : {
      "ObjectId" : "01508aa9351902941095a8cfad02f09ff2ca1e61",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/MPI/sys/Makefile" : {
      "ObjectId" : "56d1c444bd865369cd51b9d50a512dcda363ab8d",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Note that COMPILE is also defined in make.common and should\n\n# be the same. We can't include make.common because it has a lot\n\n# of other garbage. LINK is not defined in make.common because\n\n# ${MPI_LIB} needs to go at the end of the line. \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setparams creates an npbparam.h file for each benchmark \n\n# configuration. npbparams.h also contains info about how a benchmark\n\n# was compiled and linked\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/OMP/BT/Makefile" : {
      "ObjectId" : "e064dd653de1675003aecccf3891de8981c090f8",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/OMP/CG/Makefile" : {
      "ObjectId" : "1ee7dd5180cda26bbb15e6ef2d9dfc30ec9e2f3d",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/OMP/DC/Makefile" : {
      "ObjectId" : "34ee1d3517482033288295d2ce81e540570c14e3",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is provided for backward compatibility with NPB compilation\n\n# header.h: npbparams.h\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/NPB/OMP/EP/Makefile" : {
      "ObjectId" : "d798a401a01d144d3e045372d1ac054d55a3a7bc",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/OMP/FT/Makefile" : {
      "ObjectId" : "c302701410101c57add2e2c7659aa57bc25bf35c",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/OMP/IS/Makefile" : {
      "ObjectId" : "fc0feb8ce1968e80734d570f6ee8d594249dcb4a",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/OMP/LU/Makefile" : {
      "ObjectId" : "3be886ae76a6a8b48480748903b5f64c50978b6a",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by applu.incl\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# applu.incl: npbparams.h\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/OMP/MG/Makefile" : {
      "ObjectId" : "29fc085ebbde11ac43967224aaaa3249f74a49b4",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/OMP/Makefile" : {
      "ObjectId" : "b78cc10067197047a45b309adace3f91026993cf",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Awk script courtesy cmg@cray.com, modified by Haoqiang Jin\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# It would be nice to make clean in each subdirectory (the targets\n\n# are defined) but on a really clean system this will won't work\n\n# because those makefiles need config/make.def\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/OMP/SP/Makefile" : {
      "ObjectId" : "9feecddff645d8cc33c926e323322f088df1e8d4",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#lhsx.o:           lhsx.f  header.h npbparams.h\n\n#lhsy.o:           lhsy.f  header.h npbparams.h\n\n#lhsz.o:           lhsz.f  header.h npbparams.h\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/NPB/OMP/UA/Makefile" : {
      "ObjectId" : "159cb896a568160783e8aefa9810f7af1ec0e238",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/OMP/sys/Makefile" : {
      "ObjectId" : "b0bf4e9812a099add740e00e300c8fe85f9ff8ba",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Note that COMPILE is also defined in make.common and should\n\n# be the same. We can't include make.common because it has a lot\n\n# of other garbage. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setparams creates an npbparam.h file for each benchmark \n\n# configuration. npbparams.h also contains info about how a benchmark\n\n# was compiled and linked\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/SERIAL/BT/Makefile" : {
      "ObjectId" : "24f6feabcc4792f0755afdbffc34b7659512d4a9",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/SERIAL/CG/Makefile" : {
      "ObjectId" : "61c9ac80aff1263d14f1386a7db7cf531442cd4e",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/SERIAL/DC/Makefile" : {
      "ObjectId" : "2db7a8cccf5634cdbc412b08569c3f24ed4ba854",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is provided for backward compatibility with NPB compilation\n\n# header.h: npbparams.h\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/NPB/SERIAL/EP/Makefile" : {
      "ObjectId" : "e763d62e2b9497b969137d4fc89ea2596a9d287f",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/SERIAL/FT/Makefile" : {
      "ObjectId" : "116d55dd54ea5884f96e3bcbbfac0608f6484a47",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/SERIAL/IS/Makefile" : {
      "ObjectId" : "30e474dcaea5e8e8e94ee4c43887086de052a5e6",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/SERIAL/LU/Makefile" : {
      "ObjectId" : "5fa7a3c5cbdf46261bbb2299571654f13546f127",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by applu.incl\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# applu.incl: npbparams.h\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/SERIAL/MG/Makefile" : {
      "ObjectId" : "6a3013f67cbdda93f4339f459f91a31b16b430e1",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "applications/NPB/SERIAL/Makefile" : {
      "ObjectId" : "820fb437bf15489f29be159620ca22dfe68fa7d0",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Awk script courtesy cmg@cray.com, modified by Haoqiang Jin\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# It would be nice to make clean in each subdirectory (the targets\n\n# are defined) but on a really clean system this won't work\n\n# because those makefiles need config/make.def\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/SERIAL/SP/Makefile" : {
      "ObjectId" : "9ecbf08445ac924426a9a9d24a19ad320c0c7eb0",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#lhsx.o:           lhsx.f  header.h npbparams.h\n\n#lhsy.o:           lhsy.f  header.h npbparams.h\n\n#lhsz.o:           lhsz.f  header.h npbparams.h\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "applications/NPB/SERIAL/UA/Makefile" : {
      "ObjectId" : "54d4096010e76e63cc4e2929e0dc927607a9e9ca",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# npbparams.h is included by header.h\n\n# The following rule should do the trick but many make programs (not gmake)\n\n# will do the wrong thing and rebuild the world every time (because the\n\n# mod time on header.h is not changed. One solution would be to \n\n# touch header.h but this might cause confusion if someone has\n\n# accidentally deleted it. Instead, make the dependency on npbparams.h\n\n# explicit in all the lines below (even though dependence is indirect). \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# header.h: npbparams.h\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/NPB/SERIAL/sys/Makefile" : {
      "ObjectId" : "b0bf4e9812a099add740e00e300c8fe85f9ff8ba",
      "LastModified" : "2013-11-23T09:21:45Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Note that COMPILE is also defined in make.common and should\n\n# be the same. We can't include make.common because it has a lot\n\n# of other garbage. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# setparams creates an npbparam.h file for each benchmark \n\n# configuration. npbparams.h also contains info about how a benchmark\n\n# was compiled and linked\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/demos/CMakeLists.txt" : {
      "ObjectId" : "74596342b22de651f1c4a4751c1f0c733fe5b44f",
      "LastModified" : "2014-01-28T19:12:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make separate build targets for each BFS variant\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/demos/standalone/Makefile" : {
      "ObjectId" : "4406968d05af665fb01add4b727b44585bad6b78",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Example standalone Grappa app using Grappa's GNU Make include file\n\n#\n\n# To use, build and install Grappa. Then source <Grappa installation\n\n# path>/bin/settings.sh. After that you should be able to just say\n\n# \"make\" in this directory, and run the generated binary like you do\n\n# any other MPI program.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "applications/graph500/CMakeLists.txt" : {
      "ObjectId" : "efafb82aaa5f0cb0c960eb8db0201991d4153b9c",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/graph500/Makefile" : {
      "ObjectId" : "6072a60b9322cc379c155fd63999115c50771da1",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -*- Makefile -*-\n\n# Copyright 2010,  Georgia Institute of Technology, USA.\n\n# See COPYING for license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#BIN=seq-list/seq-list seq-csr/seq-csr make-edgelist\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/graph500/generator/CMakeLists.txt" : {
      "ObjectId" : "6a06d61975f49a78749c4542480dc07275edcd3d",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/graph500/mpi/Makefile" : {
      "ObjectId" : "fe8e13586eecc3fa905380fc9ab014a873b68f0d",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -g -pg\n",
        "Line" : 1,
        "CharPositionInLine" : 98
      },
      "1" : {
        "Text" : "# CFLAGS = -g -Wall -Drestrict= -DGRAPH_GENERATOR_MPI\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -g -pg\n",
        "Line" : 3,
        "CharPositionInLine" : 22
      },
      "CommentCount" : 3
    },
    "applications/graphlab/CMakeLists.txt" : {
      "ObjectId" : "bf6a66e8543f10d0a50b4583b5c9002f71555b98",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/isopath/CMakeLists.txt" : {
      "ObjectId" : "767b9441b3e6584fae380a9736d35164fa17412f",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/isopath/Makefile" : {
      "ObjectId" : "6072a60b9322cc379c155fd63999115c50771da1",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -*- Makefile -*-\n\n# Copyright 2010,  Georgia Institute of Technology, USA.\n\n# See COPYING for license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#BIN=seq-list/seq-list seq-csr/seq-csr make-edgelist\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "applications/isopath/grappa/CMakeLists.txt" : {
      "ObjectId" : "be9b923dd8a924347be754333687237ae25f6b16",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/isopath/grappa/Makefile" : {
      "ObjectId" : "1ee0ff79719e80c09ccb577c0ad79efefe361af2",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# check if autodetect GRAPPA_HOME is consistent\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include common Grappa definitions\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#default target: graph500 executable\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#default rule: just build TARGET\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# can be set to one of:\n\n# * bfs (public tasks, barriers rather than full join)\n\n# * bfs_steal_phases (public tasks, but full joins for each BFS level)\n\n# * bfs_nosteal (private tasks, no stealing, full joins)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "applications/join/CMakeLists.txt" : {
      "ObjectId" : "9667443c35bfaffa99b0e72fdc26b35e8847588a",
      "LastModified" : "2015-09-01T00:12:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO: encapsulate graph500/grappa sources\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# query code dependences\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# exe targets for standalone query codes\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exe targets for generated query codes\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Raco C++ environment\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# TODO: replace this with something nicer like find()\n",
        "Line" : 107,
        "CharPositionInLine" : 57
      },
      "6" : {
        "Text" : "# should only trigger if there exist any generated queries (i.e. applications/join/grappa_*.cpp files)\n",
        "Line" : 109,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# add aggregate target to build the executables for \n\n# all of the generated queries\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# only add dependencies if the list isn't empty\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# exe target for top level query runner\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# name without extension\n",
        "Line" : 134,
        "CharPositionInLine" : 56
      },
      "11" : {
        "Text" : "# create a test, which will be run with the given number of nodes (nnode),\n\n# and processors per node (ppn), and added to the aggregate targets for \n\n# passing or failing tests\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# name without extension\n",
        "Line" : 144,
        "CharPositionInLine" : 56
      },
      "13" : {
        "Text" : "### TODO: add separate check-all-join-* targets to include these application files\n\n###add_dependencies( check-all-${target} check-${test_name} )\n\n###add_dependencies( check-all-${target}-compile-only ${test})\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "applications/nativegraph/CMakeLists.txt" : {
      "ObjectId" : "6f684290619ac4771d0376ad8c03c55a15d301c3",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/nativegraph/bfs/CMakeLists.txt" : {
      "ObjectId" : "d8cb3f81aebadc0d374394972a57eb030c2632f5",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/nativegraph/cc/CMakeLists.txt" : {
      "ObjectId" : "1bd74f10074e80e3ad930f30edbd505b0e89c1a9",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/nativegraph/sssp/CMakeLists.txt" : {
      "ObjectId" : "99adf663c657fe3d68e2a4d979a9849fa9dc019f",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/pagerank/CMakeLists.txt" : {
      "ObjectId" : "b0521320ff9088077b6e423631484a2444631e33",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/sort/CMakeLists.txt" : {
      "ObjectId" : "767b9441b3e6584fae380a9736d35164fa17412f",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/sort/grappa/CMakeLists.txt" : {
      "ObjectId" : "b4219f5fae4f1ae91291a44e8de619370ec49f40",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/util/CMakeLists.txt" : {
      "ObjectId" : "8db0fcdcf576bbd278b52547cd0cd6bb7f6eaea3",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make separate build targets for each utility\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: this should really just enabled with tracing\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For organization in Xcode project\n",
        "Line" : 29,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 3
    },
    "bin/CMakeLists.txt" : {
      "ObjectId" : "ffbcad00ae3429bda26873f1e186bb9c998c80a1",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# file(COPY . DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "a29068b35d607d3e8722b98089c800a3a39c8be9",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/tutorial/CMakeLists.txt" : {
      "ObjectId" : "6105ac0b259d2445b16dd979270a663df605c30e",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scratch/CMakeLists.txt" : {
      "ObjectId" : "954be61d437dd61cc36b48129a9da25f12c12085",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make separate build targets for each cpp file in scratch/ (must reconfigure after adding file)\n\n# ex:\n\n# > touch scratch/test.cpp\n\n# > make rebuild_cache\n\n# > make scratch-test\n\n# > grappa_srun -- scratch/test.exe\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "system/CMakeLists.txt" : {
      "ObjectId" : "79fd6d9807039927e7453e868b752befa930cfde",
      "LastModified" : "2015-09-01T00:12:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# file(GLOB SYSTEM_SOURCES\n\n#   \"*(!_tests).cpp\"\n\n#   \"tasks/*.cpp\"\n\n# )\n\n# file(GLOB SYSTEM_HEADERS\n\n#   \"*(_tests)!.hpp\"\n\n#   \"tasks/*.hpp\"\n\n# )\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tasks/GlobalQueue.hpp\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# tasks/GlobalQueue.cpp\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "################\n\n# Graph sources\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# installation\n\n#\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# tests\n\n#\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# create a test, which will be run with the given number of nodes (nnode),\n\n# and processors per node (ppn), and added to the aggregate targets for \n\n# passing or failing tests\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# name without extension\n",
        "Line" : 192,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "# create separate targets for compiling/runnning all passing/failing tests\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# deprecated?\n",
        "Line" : 238,
        "CharPositionInLine" : 57
      },
      "10" : {
        "Text" : "#\n\n# begin hack for dealing with communicator test\n\n#\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# name without extension\n",
        "Line" : 272,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : "# For organization in Xcode project\n",
        "Line" : 275,
        "CharPositionInLine" : 55
      },
      "13" : {
        "Text" : "# TODO: use \"ctest\" to make whole regression test suite\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# name without extension\n",
        "Line" : 294,
        "CharPositionInLine" : 56
      },
      "15" : {
        "Text" : "#\n\n# end hack for dealing with communicator test\n\n#\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "third-party/CMakeLists.txt" : {
      "ObjectId" : "357e2ac0f2a1e69773385e1b3576a20583cb200c",
      "LastModified" : "2017-05-04T20:37:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# don't clean custom targets in this directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###########################################\n\n# External projects\n\n###########################################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################################################\n\n# Graph500 source for Kronecker generator\n\n######################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if we found a pre-installed version, add its paths to our build environment\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Download & build Boost\n\n# TODO: detect which stdlib is being used and configure Boost to use it (i.e. on Mac, need to compile Boost with: toolset=clang cxxflags=\"-stdlib=libc++\" linkflags=\"-stdlib=libc++\" if using a version of Clang built with 'libc++')\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "##URL_HASH           SHA1=230782c7219882d0fab5f1effbe86edb85238bf4  # ignored to support older cmake\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# set(APPLE_CXXFLAGS CXXFLAGS=-stdlib=libstdc++)\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "##URL_HASH           SHA1=bfa0b399e03147b20cafcae62b59ee9163309821  # ignored to support older cmake\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# (can't use release version because we customized it)\n\n# TODO: find out if latest version supports what we customized it for so we don't have to distribute it\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# TODO: Add find_package() call so we don't build this if we don't have to!  \n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "##URL_HASH           SHA1=b799b99d9f021988bbc931db1c21b2f94826d4f0   # ignored to support older cmake\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# set(third-party-targets  third-party-gasnet third-party-gflags third-party-glog third-party-gperftools )\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# installation\n\n#\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "third-party/google-glog/Makefile.am" : {
      "ObjectId" : "e32bc6a0c3029933c69f98185a18de8f93a32b2a",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure that when we re-make ./configure, we get the macros we need\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is so we can #include <glog/foo>\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is mostly based on configure options\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These are good warnings to turn on by default\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These are x86-specific, having to do with frame-pointers\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO(csilvers): check if -fomit-frame-pointer might be in $(CXXFLAGS),\n\n#                 before setting this.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "## The .h files you want to install (that is, .h files that people\n\n## who install this package can include in their own applications.)\n\n## We have to include both the .h and .h.in forms.  The latter we\n\n## put in noinst_HEADERS.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## This is for HTML and other documentation you want to install.\n\n## Add your documentation files (in doc/) in addition to these\n\n## top-level boilerplate files.  Also add a TODO file if you have one.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## The libraries (.so's) you want to install\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The libraries libglog depends on.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Compile switches for our unittest.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Libraries for our unittest.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## unittests you want to run when people type 'make check'.\n\n## TESTS is for binary unittests, check_SCRIPTS for script-based unittests.\n\n## TESTS_ENVIRONMENT sets environment variables for when you run unittest,\n\n## but it only seems to take effect for *binary* unittests (argh!)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Every time you add a unittest to check_SCRIPTS, add it here too\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Binaries used for script-based unittests.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# force to create lt-demangle_unittest\n",
        "Line" : 88,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# force to create lt-signalhandler_unittest\n",
        "Line" : 94,
        "CharPositionInLine" : 37
      },
      "18" : {
        "Text" : "## vvvv RULES TO MAKE THE LIBRARIES, BINARIES, AND UNITTESTS\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## The location of the windows project file for each binary we make\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## ^^^^ END OF RULES TO MAKE THE LIBRARIES, BINARIES, AND UNITTESTS\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## This should always include $(TESTS), but may also include other\n\n## binaries that you compile but don't want automatically installed.\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Windows wants write permission to .vcproj files and maybe even sln files.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Add pkgconfig file\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "third-party/graph500-generator/CMakeLists.txt" : {
      "ObjectId" : "be2e3cdc42a2117261dff0abeda454a91a4f94ae",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "util/CMakeLists.txt" : {
      "ObjectId" : "d946c9ac8431a3e8ecb6294811b6f8b8c5c96530",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# copy everything into build dir\n\n# file(COPY . DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# installation\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "util/grappa.cmake" : {
      "ObjectId" : "730f49c95bdc3c0f675f672a4a03f64ebcf03b6c",
      "LastModified" : "2015-06-09T00:11:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# first, see if we already built a copy of boost in third-party; prefer that over any other boost\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# save user-specified pointers to boost\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# now look in third-party\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#\n\n# if boost was not found in third-party, restore any user-specified pointers and search there and in standard paths\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# restore any user-specified pointers\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# search for single-threaded version\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if no single-threaded, try multi-threaded next\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    }
  },
  "FileTypes" : {
    "CMAKE" : 27,
    "MAKEFILE" : 42,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2336
}