{
  "Repository" : "4324718",
  "Revision" : "HEAD",
  "ObjectId" : "e2010fa208505a472554602b4191791bbf6c0129",
  "CommitTime" : "2019-04-18T17:42:52Z",
  "Files" : {
    "java-manta-benchmark/pom.xml" : {
      "ObjectId" : "238821fd705e2a1d9714ddcc048ef7e81fdb1c22",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n Copyright (c) 2015-2017, Joyent, Inc. All rights reserved.\n\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "\n                                        Shading signed JARs will fail without this.\n                                        http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar\n                                    ",
        "Line" : 153,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 2
    },
    "java-manta-cli/pom.xml" : {
      "ObjectId" : "73a5a2bdda4da1a62920bd7a42b8bcdbb9a993e5",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n Copyright (c) 2015-2017, Joyent, Inc. All rights reserved.\n\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " This dependency *should* be added via the dependency tree of\n             java-manta-client, but in practice when making an uber jar,\n             it isn't brought in. ",
        "Line" : 44,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 2
    },
    "java-manta-client-kryo-serialization/pom.xml" : {
      "ObjectId" : "cbcc9dcdab468696a9573d83321a5ffd52fdf9d5",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Apache Commons Lang for helpful utility functions ",
        "Line" : 71,
        "CharPositionInLine" : 67
      },
      "1" : {
        "Text" : " Kryo serialization library for use with testing serialization\n             of multipart objects ",
        "Line" : 94,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : " These dependencies are declared at the module level because we can not\n     inherit exclusions from the parent. ",
        "Line" : 130,
        "CharPositionInLine" : 45
      },
      "CommentCount" : 3
    },
    "java-manta-client-unshaded/pom.xml" : {
      "ObjectId" : "788f850cba69b53b2beab270a3a98acd8c1443cb",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n Copyright (c) 2012-2017, Joyent, Inc. All rights reserved.\n\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " Library for authenticating requests against Manta ",
        "Line" : 26,
        "CharPositionInLine" : 67
      },
      "2" : {
        "Text" : " Library for making HTTP connections ",
        "Line" : 43,
        "CharPositionInLine" : 53
      },
      "3" : {
        "Text" : " Apache Commons Lang for helpful utility functions ",
        "Line" : 56,
        "CharPositionInLine" : 67
      },
      "4" : {
        "Text" : " Library for enhanced collection types ",
        "Line" : 63,
        "CharPositionInLine" : 55
      },
      "5" : {
        "Text" : " Apache Commons IO for helpful IO functions ",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "6" : {
        "Text" : " Library for generating more robust UUIDs ",
        "Line" : 83,
        "CharPositionInLine" : 58
      },
      "7" : {
        "Text" : " JSON processing libraries ",
        "Line" : 96,
        "CharPositionInLine" : 43
      },
      "8" : {
        "Text" : " Cryptography libraries ",
        "Line" : 113,
        "CharPositionInLine" : 40
      },
      "9" : {
        "Text" : " High speed MD5 implementation ",
        "Line" : 140,
        "CharPositionInLine" : 47
      },
      "10" : {
        "Text" : " url encoding utility ",
        "Line" : 147,
        "CharPositionInLine" : 38
      },
      "11" : {
        "Text" : " object cloning library for memoization of encryption state ",
        "Line" : 154,
        "CharPositionInLine" : 76
      },
      "12" : {
        "Text" : " object instantiation library, needed by uk.com.robust-it:cloning\n             and the kryo module  ",
        "Line" : 162,
        "CharPositionInLine" : 38
      },
      "13" : {
        "Text" : " These dependencies are declared at the module level because we can not\n             inherit exclusions from the parent. ",
        "Line" : 201,
        "CharPositionInLine" : 53
      },
      "14" : {
        "Text" : " Library that creates a properties file containing version info ",
        "Line" : 241,
        "CharPositionInLine" : 84
      },
      "15" : {
        "Text" : " We inject the version number and date before compile ",
        "Line" : 246,
        "CharPositionInLine" : 78
      },
      "16" : {
        "Text" : " We revert the date before package so that we aren't constantly\n                         checking in different versions of this file. ",
        "Line" : 273,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 17
    },
    "java-manta-client/pom.xml" : {
      "ObjectId" : "bebf6afda03575cde79792375277305834cfad82",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n Copyright (c) 2012-2017, Joyent, Inc. All rights reserved.\n\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " Logging bridge that will be shaded to bridge between the Apache\n             Commons Logging framework and SLF4J ",
        "Line" : 63,
        "CharPositionInLine" : 53
      },
      "2" : {
        "Text" : " force creation of the empty JAR so that the shade plugin doesn't work on an already shaded JAR ",
        "Line" : 80,
        "CharPositionInLine" : 116
      },
      "3" : {
        "Text" : " minimizeJar would cause an empty JAR since there is no code in this module ",
        "Line" : 93,
        "CharPositionInLine" : 104
      },
      "4" : {
        "Text" : " explicitly remove class that causes security concerns ",
        "Line" : 156,
        "CharPositionInLine" : 87
      },
      "5" : {
        "Text" : "\n                    We need to add the default clean phase since we're specifying executions.\n                    ",
        "Line" : 179,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "\n                    Ensure that src is *always*\n                    removed before a compile phase runs. This is\n                    for correctness.\n                    ",
        "Line" : 200,
        "CharPositionInLine" : 24
      },
      "7" : {
        "Text" : "\n            For SOME reason Maven can build a sources JAR for this module based on the above workaround\n            *and still* deleting the source files during process-resources in order to avoid the shade plugin\n            detecting overlapping classes.\n\n            Maintainer beware! You might be tempted to add an invocation of the maven-source-plugin directly here\n            and bind it to a phase after the above two but before packaging (in order to avoid the overlapping\n            classes error) but this does not work. Relying on the parent-pom definition of maven-source-plugin is\n            unexpected but functional so that behavior is documented here.\n            ",
        "Line" : 267,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 8
    },
    "java-manta-examples/pom.xml" : {
      "ObjectId" : "a7bfcd5e776ea84313b2b83465bcc29cd6c0a023",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n Copyright (c) 2016-2017, Joyent, Inc. All rights reserved.\n\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " Examples are free-form and we don't check their style ",
        "Line" : 36,
        "CharPositionInLine" : 75
      },
      "2" : {
        "Text" : " We don't deploy this module to Maven Central ",
        "Line" : 44,
        "CharPositionInLine" : 66
      },
      "CommentCount" : 3
    },
    "java-manta-it/pom.xml" : {
      "ObjectId" : "5c5a632d3104becb2d6db1440966394895db1839",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n Copyright (c) 2015-2017, Joyent, Inc. All rights reserved.\n\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " Library for generating more robust UUIDs ",
        "Line" : 87,
        "CharPositionInLine" : 58
      },
      "2" : {
        "Text" : " These dependencies are declared at the module level because we can not\n             inherit exclusions from the parent. ",
        "Line" : 100,
        "CharPositionInLine" : 53
      },
      "3" : {
        "Text" : " To generate code coverage reports (of either unit or\n             integration tests) jacoco needs access to both the\n             original (pre-instrumentation) class files, and the\n             source code.\n             <http://www.jacoco.org/jacoco/trunk/doc/classids.html>\n             describes how jacoco keeps track of classes in further\n             detail.  There exist goals that can traverse a\n             multi-module project and aggregate this information from\n             the standard maven locations, but they are confounded by\n             the shading+relocation step.  The final classes shipped\n             in the client jar are *only* in the shaded client jar,\n             and not in target/classes.\n\n             To work around this and provide the necessary information\n             requires jumping through several hoops to act as if the\n             java-manta-client source files were part of the\n             integration test module:\n\n              * Add a new source location to java-manta-it to hold the\n              \"upstream\" .java files from java-manta-client\n              * Copy the source files there\n              * Make sure the source are removed when not needed so\n              they are never actually compiled.\n              * Unpack the final relocated class files so they are\n              available outside of just a jar.\n\n             This scheme depends on there being no \"src/main\" classes\n             in this integration test module.\n        ",
        "Line" : 198,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : " Remove src/shade-workaround after use.  This\n                         is for tidyness but not correctness.  Note\n                         that since this is bound to\n                         post-integration-test it will run when\n                         invoking verify, but not intgration-test ",
        "Line" : 207,
        "CharPositionInLine" : 70
      },
      "5" : {
        "Text" : " Ensure that src/shade-workaround is *always*\n                         removed before a compile phase runs.  This is\n                         for correctness. ",
        "Line" : 225,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : " unpack the modified-by-relocation classes from\n                     the client jar ",
        "Line" : 285,
        "CharPositionInLine" : 40
      },
      "7" : {
        "Text" : " Need to exclude the unshaded module from the test runner's classpath ",
        "Line" : 337,
        "CharPositionInLine" : 106
      },
      "8" : {
        "Text" : " uncomment to enable proxies with integration tests ",
        "Line" : 341,
        "CharPositionInLine" : 88
      },
      "9" : {
        "Text" : "<systemPropertyVariables>",
        "Line" : 342,
        "CharPositionInLine" : 61
      },
      "10" : {
        "Text" : "<https.proxyHost>localhost</https.proxyHost>",
        "Line" : 343,
        "CharPositionInLine" : 84
      },
      "11" : {
        "Text" : "<https.proxyPort>8888</https.proxyPort>",
        "Line" : 344,
        "CharPositionInLine" : 79
      },
      "12" : {
        "Text" : "</systemPropertyVariables>",
        "Line" : 345,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 13
    },
    "pom.xml" : {
      "ObjectId" : "0e24195e57aa27fec45b36a9de6c5bc1485222b0",
      "LastModified" : "2019-03-22T22:53:24Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n Copyright (c) 2012-2017, Joyent, Inc. All rights reserved.\n\n This Source Code Form is subject to the terms of the Mozilla Public\n License, v. 2.0. If a copy of the MPL was not distributed with this\n file, You can obtain one at http://mozilla.org/MPL/2.0/.\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " Plugin versions ",
        "Line" : 124,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : " Maven plugin dependency versions ",
        "Line" : 155,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : " Dependency versions ",
        "Line" : 159,
        "CharPositionInLine" : 37
      },
      "4" : {
        "Text" : " This property is generated so we can refer to\n                     another module in a multi-module project without\n                     brittle relative paths. ",
        "Line" : 225,
        "CharPositionInLine" : 49
      },
      "5" : {
        "Text" : " maven-compiler-plugin defaults to targeting Java 5, but our javac\n                         only supports >=6 ",
        "Line" : 289,
        "CharPositionInLine" : 47
      },
      "6" : {
        "Text" : " override plexus-compiler-javac-errorprone's dependency on\n                         Error Prone with the latest version ",
        "Line" : 306,
        "CharPositionInLine" : 65
      },
      "7" : {
        "Text" : " unit test coverage",
        "Line" : 484,
        "CharPositionInLine" : 47
      },
      "8" : {
        "Text" : " integration test coverage",
        "Line" : 498,
        "CharPositionInLine" : 54
      },
      "9" : {
        "Text" : "\n        The release profile only needs activated when cutting a release for maven central.\n        It will generate additional artifacts for javadoc and source as well as GPG signatures for each artifact.\n        This profile also assumes that the properties for the gpg plugin (such as gpg.keyname and gpg.passphrase\n        are either defined in a settings.xml file or similar facility.\n        ",
        "Line" : 566,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 10
    }
  },
  "FileTypes" : {
    "MAVEN" : 8
  },
  "ElapsedTime" : 1064
}