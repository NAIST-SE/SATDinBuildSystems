{
  "Repository" : "24737120",
  "Revision" : "HEAD",
  "ObjectId" : "684b86c5b152c2b256ebacdfd802d1203cd5ee89",
  "CommitTime" : "2018-11-15T21:10:01Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "873d56be88abc347a7dfda7293113b25dab2309b",
      "LastModified" : "2017-09-02T17:47:50Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "lib/Makefile.am" : {
      "ObjectId" : "a589769c0f6c551d8c7fe130a9174cc6a170a37e",
      "LastModified" : "2017-09-02T17:47:50Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Build pugixml as a library, allowing to pass another set of flags\n\n# than the one used for the rest of the project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Makefile.am" : {
      "ObjectId" : "151d6e2fc52094d0c96a0ed7befd01a44299babb",
      "LastModified" : "2018-11-04T06:00:42Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Link against pugixml\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# filesystem\n",
        "Line" : 5,
        "CharPositionInLine" : 37
      },
      "2" : {
        "Text" : "# Source files\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generated sources files\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------ Compiler configuration ------------------------------------ #\n\n# setting the __top_srcdir__we_CXXFLAGS variable\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Release flags:\n\n# -s -O3 -DNDEBUG # -Ofast\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Debug flags (no optimization, debug symbols, defines):\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -Og: not clang compliant\n",
        "Line" : 96,
        "CharPositionInLine" : 66
      },
      "8" : {
        "Text" : "# export GLIBCXX_FORCE_NEW\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Append Warning flags\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Enable most warning messages\n\n# Print extra (possibly unwanted) warnings\n\n# Issue all the warnings demanded by strict ISO C and ISO C++\n\n# Warn if a loop with constant number of iterations triggers undefined behavior\n\n# Warn about printf/scanf/strftime/strfmon format string anomalies\n\n# Warn about format strings that contain NUL bytes\n\n# Warn if passing too many arguments to a function for its format string\n\n# Warn about sign differences with format functions\n\n# Warn about zero-length formats\n\n# Warn if an array is accessed out of bounds # level 1 activated by -Wall (only with -O2); level2: also in structures\n\n# Warn about inappropriate attribute usage\n\n# Warn about boolean expression compared with an integer value different from true/false\n\n# Warn when a built-in preprocessor macro is undefined or redefined\n\n# Warn about pointer casts which increase alignment\n\n# Warn about casts which discard qualifiers\n\n# Warn about memory access errors found by Pointer Bounds Checker\n\n# Warn for conditionally-supported constructs\n\n# Warn for implicit type conversions that may change a value\n\n# Warn for converting NULL from/to a non-pointer type\n\n# Warn when all constructors and destructors are private\n\n# Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage\n\n# Warn when deleting a pointer to incomplete type\n\n# Warn if a deprecated compiler feature, class, method, or field is used\n\n# Warn about uses of __attribute__((deprecated)) declarations\n\n# Warn when an optimization pass is disabled\n\n# Warn about compile-time integer division by zero\n\n# Warn about implicit conversions from \"float\" to \"double\"\n\n# Warn about stray tokens after # elif and # endif\n\n# Warn if testing floating point numbers for equality\n\n# Warn when attempting to free a non-heap object\n\n# Warn about C++11 inheriting constructors when the base has a variadic constructor\n\n# Warn about variables which are initialized to themselves\n\n# Warn when an inlined function cannot be inlined\n\n# Warn when there is a cast to a pointer from an integer of a different size\n\n# Warn when an atomic memory model parameter is known to be outside the valid range.\n\n# Warn about invalid uses of the \"offsetof\" macro\n\n# Warn about PCH files that are found but not used\n\n# Warn if an object is larger than <number> bytes\n\n# Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.\n\n# Warn when logical not is used on the left hand side operand of a comparison\n\n# Warn when a logical operator is suspiciously always evaluating to true or false\n\n# Do not warn about using \"long long\" when -pedantic\n\n# Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not\n\n# Warn about global functions without previous declarations\n\n# Warn about user-specified include directories that do not exist\n\n# Warn when a noexcept expression evaluates to false even though the expression can't actually throw\n\n# Warn when non-templatized friend functions are declared within a template\n\n# Warn about non-virtual destructors\n\n# Warn about non-normalised Unicode strings\n\n# Warn about some C++ One Definition Rule violations during link time optimization\n\n# Warn if a C-style cast is used in a program\n\n# Warn about overflow in arithmetic expressions\n\n# Warn about overloaded virtual function names\n\n# Warn when the packed attribute has no effect on struct layout\n\n# Warn about packed bit-fields whose offset changed in GCC 4.4\n\n# Warn when converting the type of pointers to member functions\n\n# Warn about misuses of pragmas\n\n# Warn about multiple declarations of the same object\n\n# Warn about returning a pointer/reference to a local or temporary variable.\n\n# Warn when one local variable shadows another\n\n# Warn if shift count is negative\n\n# Warn if shift count >= width of type\n\n# Warn when overload promotes from unsigned to signed\n\n# Warn about missing sized deallocation functions\n\n# Warn when sizeof is applied on a parameter declared as an array\n\n# Warn about suspicious length parameters to certain string functions if the argument uses sizeof\n\n# Warn when not issuing stack smashing protection for some reason\n\n# Warn about uncasted NULL used as sentinel\n\n# Warn about optimizations that assume that signed overflow is undefined # (5: overkill ?)\n\n# Warn about functions which might be candidates for __attribute__((const))\n\n# Warn about functions which might be candidates for format attributes\n\n# Warn about functions which might be candidates for __attribute__((noreturn))\n\n# Warn about functions which might be candidates for __attribute__((pure))\n\n# Warn about C++ virtual methods where adding final keyword would improve code quality\n\n# Warn about C++ polymorphic types where adding final keyword would improve code quality\n\n# Suggest that the override keyword be used when the declaration of a virtual function overrides another.\n\n# Warn about switches with boolean controlling expression\n\n# Warn about enumerated switches missing a \"default:\" statement\n\n# Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used\n\n# Warn whenever a trampoline is generated\n\n# Warn if the loop cannot be optimized due to nontrivial assumptions.\n\n# Warn about macros defined in the main file that are not used\n\n# Warn about useless casts\n\n# Warn about questionable usage of the macros used to retrieve variable arguments\n\n# Warn when a vector operation is compiled outside the SIMD\n\n# Warn if a virtual base has a non-trivial move assignment operator\n\n# In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.\n\n# Warn when a literal '0' is used as null pointer\n",
        "Line" : 103,
        "CharPositionInLine" : 64
      },
      "11" : {
        "Text" : "# Advance Debug\n\n# __top_srcdir__we_CXXFLAGS += -DDEBUG_XML\n\n# __top_srcdir__we_CXXFLAGS += -DDEBUG_XML_FULL\n\n# __top_srcdir__we_CXXFLAGS += -DDEBUG_PERFS\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Append user-defined flags (for instance -Wno-unknown-warning-option compiling with clang)\n",
        "Line" : 199,
        "CharPositionInLine" : 64
      },
      "13" : {
        "Text" : "#  --all-warnings             This switch lacks documentation\n\n#  --extra-warnings           This switch lacks documentation\n\n#\n\n# Activated by -Wall (C++ relevant):\n\n# ----------------------------------\n\n# -Waddress                   Warn about suspicious uses of memory addresses\n\n# -Wchar-subscripts           Warn about subscripts whose type is \"char\"\n\n# -Wenum-compare              Warn about comparison of different enum types (default in C++)\n\n# -Wcomment                   Warn about possibly nested block comments, and C++ comments spanning more than one physical line\n\n# -Wformat                    Warn about printf/scanf/strftime/strfmon format string anomalies\n\n# -Wmaybe-uninitialized       Warn about maybe uninitialized automatic variables\n\n# -Wmissing-braces            Warn about possibly missing braces around initializers\n\n# -Wnonnull                   Warn about NULL being passed to argument slots marked as requiring non-NULL\n\n# -Wopenmp-simd               Warn if a simd directive is overridden by the vectorizer cost model\n\n# -Wparentheses               Warn about possibly missing parentheses\n\n# -Wpointer-sign              Warn when a pointer differs in signedness in an assignment\n\n# -Wreorder                   Warn when the compiler reorders code\n\n# -Wreturn-type               Warn whenever a function's return type defaults to \"int\" (C), or about inconsistent return types (C++)\n\n# -Wsequence-point            Warn about possible violations of sequence point rules\n\n# -Wsign-compare              Warn about signed-unsigned comparisons\n\n# -Wunused                    Enable all -Wunused- warnings\n\n# -Wunused-variable           Warn when a variable is unused\n\n# -Wunused-function           Warn when a function is unused\n\n# -Wunused-value              Warn when an expression value is unused\n\n# -Wunused-label              Warn when a label is unused\n\n# -Wunused-local-typedefs     Warn when typedefs locally defined in a function are not used\n\n# -Wunused-but-set-variable   Warn when a variable is only set, otherwise unused\n\n# -Wswitch                    Warn about enumerated switches, with no default, missing a case\n\n# -Wtrigraphs                 Warn if trigraphs are encountered that might affect the meaning of the program\n\n# -Wuninitialized             Warn about uninitialized automatic variables\n\n# -Wunknown-pragmas           Warn about unrecognized pragmas\n\n# -Wvolatile-register-var     Warn when a register variable is declared volatile\n\n# -Wstrict-aliasing           Warn about code which might break strict aliasing rules\n\n# -Wstrict-overflow           Warn about optimizations that assume that signed overflow is undefined\n\n# -Wmultichar                 Warn about use of multi-character character constants\n\n# -Wmisleading-indentation    Warn about miss-leading identation (with blocks without braces)\n\n#\n\n#\n\n#  Activated by -Wextra (C++ relevant):\n\n#  ------------------------------------\n\n# -Wignored-qualifiers        Warn whenever type qualifiers are ignored.\n\n# -Wclobbered                 Warn about variables that might be changed by \"longjmp\" or \"vfork\"\n\n# -Wempty-body                Warn about an empty body in an if or else statement\n\n# -Wmissing-field-initializers Warn about missing fields in struct initializers\n\n# -Woverride-init             Warn about overriding initializers without side effects\n\n# -Wtype-limits               Warn if a comparison is always true or always false due to the limited range of the data type\n\n# -Wunused-parameter          Warn when a function parameter is unused\n\n# -Wunused-but-set-parameter  Warn when a function parameter is only set, otherwise unused\n\n#\n\n#\n\n#  Activated by -Wpedantic (C++ relevant):\n\n#  ---------------------------------------\n\n# -Wvla                       Warn if a variable length array is used\n\n# -Wpointer-arith             Warn about function pointer arithmetic\n\n# -Woverlength-strings        Warn if a string is longer than the maximum portable length specified by the standard\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Note:\n\n# -W is deprecated: use -Wextra\n\n# -Wunreachable-code seems to have been removed\n\n# Clang has a -Weverything not g++\n\n# -Wnon-virtual-dtor is activated by -Weffc++ (unfortunately the latest gives too many false-positives so far)\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Deactivated warnings\n\n# -Wundef                     Warn if an undefined macro is used in an # if directive\n\n# -Wsystem-headers            Do not suppress warnings from system headers\n\n# -Waggregate-return          Warn about returning structures, unions or arrays\n\n# -Wswitch-enum               Warn about all enumerated switches missing a specific case (even if a 'default' is present)\n\n# -Weffc++                    Warn about violations of Effective C++ style rules (05/2017: too many false positives [std::string default constructor])\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Deactivated warnings (unsure about the relevance in this context)\n\n# -Wpadded                    Warn when padding is required to align structure members\n\n# -Wcpp                       Warn when a # warning directive is encountered (seems active by default)\n\n# -Wstack-usage=4096          Warn if stack usage might be larger than specified amount\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    }
  },
  "FileTypes" : {
    "AUTOMAKE" : 3
  },
  "ElapsedTime" : 936
}