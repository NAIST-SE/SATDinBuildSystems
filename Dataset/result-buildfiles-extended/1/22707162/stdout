{
  "Repository" : "22707162",
  "Revision" : "HEAD",
  "ObjectId" : "d5e3eb0b75e6b88770276f681bc043be7932ed1a",
  "CommitTime" : "2018-11-18T03:00:10Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b9a19794f6f0049d09fa207cfed4cc0285d2622b",
      "LastModified" : "2018-09-15T15:05:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For Emscripten, invoke something like:\n\n# source ~/emsdk_portable/emsdk_env.sh;\n\n# mkdir BUILD; cd BUILD;\n\n# cmake -DCMAKE_TOOLCHAIN_FILE=$EMSCRIPTEN/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Release ..\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For Mac, you must use the Xcode generator. Makefile is currently broken.\n\n# mkdir BUILD; cd BUILD;\n\n# cmake -GXcode ..\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For iOS, you must use the Xcode generator and the bundled toolchain\n\n# mkdir BUILD; cd BUILD;\n\n# cmake -DCMAKE_TOOLCHAIN_FILE=../CMakeModules/iOS.toolchain.cmake -GXcode ..\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We're using the new Mac RPATH policy.\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Ubuntu 12.04 LTS ships 2.8.7\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#SET(CPACK_SET_DESTDIR TRUE)\n\n#INCLUDE(CPack)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# By default, we'll exclude the tests from the ALL target. But for convenience, we also will provide a testsiup aggregate target.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Emscripten documentation says .so is better than .a, but also implies .bc may be best.\n\n# TODO: Figure out how .bc fits into all of this.\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# FIXME: Expand to support GNUStep\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# I'm keeping this off by default for now, because of a cross-dependency problem of other iuplua* modules depending on symbols in iuplua.\n\n# http://lua-users.org/lists/lua-l/2015-05/msg00263.html\n\n# It's giving me a lot of pain on Mac, and I worry about iOS, Android, and Emscripten, and how it affects portability of your code.\n\n# I worry some platforms may not be able to support modules at all.\n\n# And unfortunately, it seems that your setup code will need to differ depending on which you use,\n\n# which will make writing your cross-platform code more painful.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# WARNING: I know GTK can be used on Windows and Mac, \n\n# but this file currently does not support that configuration.\n\n# To make that work, the FIND stuff needs to be re-run \n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Not sure the best way of doing this.\n\n# Find both GTK2 and GTK3 in case the user wants to change the config.\n\n# Otherwise I might accidentally prevent detection.\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# I originally tried find_package() for 2.0 but linking failed on Ubuntu 16.10 (but worked on 12.04)\n\n# pkg_check_modules with 2.0 fixed the problem.\n\n#find_package(GTK2 2.0 QUIET COMPONENTS gtk)\n",
        "Line" : 144,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Use the package PkgConfig to detect GTK+ headers/library files\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# NOTE: This has limited effect since I already ran these for the Option selections on Unix.\n\n# This is here only for people who select this on the platforms where GTK is non-native (Mac, Windows)\n",
        "Line" : 189,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# NOTE: This has limited effect since I already ran these for the Option selections on Unix.\n\n# This is here only for people who select this on the platforms where GTK is non-native (Mac, Windows)\n\n# Use the package PkgConfig to detect GTK+ headers/library files\n",
        "Line" : 209,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# NOTE: This has limited effect since I already ran these for the Option selections on Unix.\n\n# This is here only for people who select this on the platforms where GTK is non-native (Mac, Windows)\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Needed for UTF8MODE on Windows\n",
        "Line" : 240,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Not sure what the default should be for this, and if it should be backend dependent\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# RPATH stuff. This MUST be set before any targets that use it are declared.\n\n# Only affects shared libraries.\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Do we need CXX flags for web because of Windows?\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# TODO: We must add visibility annotations to IUP to support Emscripten.\n\n# We can then reuse them for other platforms too.\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# we always need to set this when building a libray with Emscripten\n",
        "Line" : 306,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# we always need to set this when using an Emscripten built library, otherwise symbols get stripped.\n",
        "Line" : 308,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Without this, all executables only generate .js files without the html wrapper.\n",
        "Line" : 311,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# IUP executables will always need this switch because IUP is event driven and doesn't quit when Emscripten tries to run/quit main().\n\n# SET(CMAKE_EXE_LINKER_FLAGS  \"${CMAKE_EXE_LINKER_FLAGS} -s NO_EXIT_RUNTIME=1\")\n",
        "Line" : 314,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Yes, IUP_BUILD_LIBRARY and not IUPIMG_BUILD_LIBRARY because the header is in iup.h\n",
        "Line" : 343,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Kind of a hack. Need to get Windows exe's to link and not show a console window. Not sure why it is defaulting to /SUBSYSTEM:CONSOLE even though WIN32 is specified in the ADD_EXECUTABLE\n",
        "Line" : 355,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# ${CMAKE_SOURCE_DIR}/src/iup.def\n",
        "Line" : 397,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "#\t${CMAKE_SOURCE_DIR}/src/iup_datepick.c\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# TODO: Get clarification on iup_datepick.c\n",
        "Line" : 632,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/emscripten/iupemscripten_colordlg.c # Needs to be deleted\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/emscripten/iupemscripten_datepick.c\n",
        "Line" : 641,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# TODO:\n",
        "Line" : 687,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# TODO:\n",
        "Line" : 703,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# TODO: Get clarification on iup_datepick.c\n",
        "Line" : 721,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/android/source/iupandroid_colordlg.c # Needs to be deleted\n",
        "Line" : 728,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#${CMAKE_SOURCE_DIR}/src/android/source/iupandroid_key.c\n",
        "Line" : 750,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# TODO:\n",
        "Line" : 781,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Annoying hack to get around Android Studio always rebuilding everything for every target.\n\n# arguments \"-DIUP_ANDROID_BUILD_IUPWEB=1\"\n",
        "Line" : 798,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# TODO: Get clarification on iup_datepick.c\n",
        "Line" : 809,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/cocoatouch/iupcocoatouch_colordlg.m # Needs to be deleted\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/cocoatouch/iupcocoatouch_datepick.m\n",
        "Line" : 821,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/cocoatouch/iupmac_info.m\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# TODO:\n",
        "Line" : 872,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# TODO: Get clarification on iup_datepick.c\n",
        "Line" : 897,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/cocoa/iupcocoa_colordlg.m # Needs to be deleted\n",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/cocoa/iupcocoa_datepick.m\n",
        "Line" : 912,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# This file was replaced with iupcocoa_info.m\n",
        "Line" : 940,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/cocoa/iupmac_info.m\n",
        "Line" : 941,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Stop gap\n",
        "Line" : 945,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/src/gtk/iupmac_help.c\n",
        "Line" : 946,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Not sure how to handle GNUStep\n",
        "Line" : 965,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# TODO:\n",
        "Line" : 976,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Only works if in the VS command prompt environment\n",
        "Line" : 1052,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "#\tFIND_LIBRARY(WINDOWS_OLE32_LIBRARY ole32)\n\n#\tFIND_LIBRARY(WINDOWS_COMDLG32_LIBRARY comdlg32)\n\n#\tFIND_LIBRARY(WINDOWS_COMCTL32_LIBRARY comctl32)\n\n#\tFIND_LIBRARY(WINDOWS_GDI32_LIBRARY gdi32)\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#\tLIST(APPEND IUP_LINK_LIBRARIES \n\n#\t\t${WINDOWS_OLE32_LIBRARY}\n\n#\t\t${WINDOWS_COMDLG32_LIBRARY}\n\n#\t\t${WINDOWS_COMCTL32_LIBRARY}\n\n#\t\t${WINDOWS_GDI32_LIBRARY}\n\n#\t)\n",
        "Line" : 1058,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Use explicit names instead\n",
        "Line" : 1065,
        "CharPositionInLine" : 1
      },
      "58" : {
        "Text" : "# FIXME: The other build systems pass -DNOTREEVIEW, but searching the codebase, it seems to only exist in one place and it is to #undef NOTREEVIEW. Maybe this flag can be removed.\n",
        "Line" : 1070,
        "CharPositionInLine" : 1
      },
      "59" : {
        "Text" : "# FIXME: Should check if other libraries use the UNICODE flag\n",
        "Line" : 1075,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Use explicit names instead\n",
        "Line" : 1135,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# TODO: Get clarification on iup_datepick.c\n",
        "Line" : 1144,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# These files are platform specific for the GTK backend\n",
        "Line" : 1238,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# TODO: Get clarification on iup_datepick.c\n",
        "Line" : 1289,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Would prefer TARGET_INCLUDE_DIRECTORIES or something, but supporting CMake 2.8.7\n",
        "Line" : 1360,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Reuse the Info.plist from the Xcode project\n",
        "Line" : 1367,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# set_target_properties doesn't work correctly in CMake because it loses the localization directories\n\n# set_target_properties(iup PROPERTIES RESOURCE \"${IUP_COCOA_XIB_FILES}\") \n",
        "Line" : 1369,
        "CharPositionInLine" : 1
      },
      "67" : {
        "Text" : "# Having problem with include paths on Android, partly because everything is spread out\n",
        "Line" : 1400,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# TARGET_INCLUDE_DIRECTORIES is guaranteed to be available on Android\n",
        "Line" : 1402,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# TARGET_INCLUDE_DIRECTORIES is guaranteed to be available on Android\n",
        "Line" : 1410,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Reuse the Info.plist from the Xcode project\n",
        "Line" : 1420,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Decided to put everything in this CMakeLists.txt to make keeping in sync easier since this isn't official.\n\n#ADD_SUBDIRECTORY(test)\n",
        "Line" : 1429,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# This adds the current test to the aggregate target for tests\n",
        "Line" : 1450,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# This adds the current test to the aggregate target for tests\n",
        "Line" : 1473,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# This adds the current test to the aggregate target for tests\n",
        "Line" : 1497,
        "CharPositionInLine" : 3
      },
      "75" : {
        "Text" : "# This adds the current test to the aggregate target for tests\n",
        "Line" : 1522,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# This adds the current test to the aggregate target for tests\n",
        "Line" : 1555,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Things with dependencies on iupimglib\n\n#BUILD_IUPIMGLIB_TEST(bigtest \"${CMAKE_SOURCE_DIR}/html/examples/tests/bigtest.c\" \"\")\n",
        "Line" : 1567,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# depends on cdlib\n\n#BUILD_IUPIMGLIB_TEST(matrix_cbs \"${CMAKE_SOURCE_DIR}/html/examples/tests/matrix_cbs.c\")\n",
        "Line" : 1578,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# 7GUI: TODO: Need to handle bundling images.\n\n#BUILD_IUP_TEST(7gui_cells \"${CMAKE_SOURCE_DIR}/html/en/7gui/cells.c\" \"\") # needs IupControlsOpen, IupMatrix\n",
        "Line" : 1583,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "#BUILD_IUP_TEST(7gui_crud \"${CMAKE_SOURCE_DIR}/html/en/7gui/crud.c\" \"\") # compiler errors\n",
        "Line" : 1587,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# exclude from all\n",
        "Line" : 1602,
        "CharPositionInLine" : 5
      },
      "82" : {
        "Text" : "# resource list\n",
        "Line" : 1603,
        "CharPositionInLine" : 23
      },
      "83" : {
        "Text" : "#\t   SET(CMAKE_MODULE_LINKER_FLAGS\n\n#   \"${CMAKE_MODULE_LINKER_FLAGS} -flat_namespace -undefined suppress\")\n",
        "Line" : 1612,
        "CharPositionInLine" : 1
      },
      "84" : {
        "Text" : "#\t\t${CMAKE_SOURCE_DIR}/srclua5/il.h\n",
        "Line" : 1616,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#ADD_DEFINITIONS(\"-DIUPLUA_USELH\")\n\n#SET(IUPLUA_C_FLAGS \"-DIUPLUA_USELOH\")\n",
        "Line" : 1635,
        "CharPositionInLine" : 1
      },
      "86" : {
        "Text" : "#\tMESSAGE(\"IUP_LUA_VERSION_SUFFIX ${IUP_LUA_VERSION_SUFFIX}\")\n\n#SET(IUPLUA_LIBRARY_NAME \"iuplua${IUPLUA_VERSION_SUFFIX}\")\t\n",
        "Line" : 1640,
        "CharPositionInLine" : 1
      },
      "87" : {
        "Text" : "# If building as a module, we must link to Lua on Windows, but not on ELF, Darwin.\n",
        "Line" : 1644,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# If building as a dynamic library, we can link directly for all platforms.\n",
        "Line" : 1653,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# FIXME: We must add a IUPLUAWEB_EXPORT for the lua/web open functions, but there is no obvious place to add it\n",
        "Line" : 1663,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "#ADD_DEFINITIONS(\"-DIUPLUA_USELH\")\n\n#SET(IUPLUA_C_FLAGS \"-DIUPLUA_USELOH\")\n",
        "Line" : 1674,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Modules cannot link to other modules, i.e. we don't link to iuplua\n",
        "Line" : 1679,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# If building as a module, we must link to Lua on Windows, but not on ELF, Darwin.\n",
        "Line" : 1684,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# IupLua depends on IupWeb\n",
        "Line" : 1702,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Android Studio/Gradle lacks a mechanism to copy pre-built libraries to be bundled in the .apk,\n\n# so we need to manally copy the library into a staging area that Gradle will intercept.\n",
        "Line" : 1706,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# Hack: Used to build simple test programs as we bootstrap each new implementation\n",
        "Line" : 1719,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# This is a hack to get around Android Studio/Gradle deficiencies.\n\n# Being able to build an AAR, and then using it in the same project is horribly broken.\n\n# After some hackery, I got the testapp target to refer to the AAR, but it only looks at the Java side.\n\n# The CMake/NDK side can't find the libraries.\n\n# So the hack is to force the NDK side to rebuild all the libraries, plus the libMyIupProgram.so library.\n\n# But we don't want the libMyIupProgram.so built when just building the AAR, otherwise it goes into the AAR.\n\n# So the build.gradle is required to set -DIUP_ANDROID_BUILD_TEST_LIBRARY=1 when building the testapp.\n",
        "Line" : 1728,
        "CharPositionInLine" : 1
      },
      "97" : {
        "Text" : "#\t\tadd_library(iuptestapp SHARED EXCLUDE_FROM_ALL\n\n#\t\t\t${CMAKE_SOURCE_DIR}/src/android/source/main_c.c\n\n#\t\t)\n\n#\t\ttarget_link_libraries(iuptestapp iupimglib iup)\n",
        "Line" : 1736,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# if we need to bundle resources in the assets directory, list them here.\n",
        "Line" : 1741,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# This function knows to build libraries for Android. It also is aware of how to bundle our assets.\n",
        "Line" : 1747,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# \"${_should_exclude_from_all}\"\n",
        "Line" : 1755,
        "CharPositionInLine" : 5
      },
      "101" : {
        "Text" : "#\t\tadd_library(iuptestappwebbrowser SHARED EXCLUDE_FROM_ALL\n\n#\t\t\t${CMAKE_SOURCE_DIR}/html/examples/tests/webbrowser.c\n\n#\t\t)\n\n#\t\ttarget_link_libraries(iuptestappwebbrowser iupweb iup)\n",
        "Line" : 1763,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# if we need to bundle resources in the assets directory, list them here.\n",
        "Line" : 1768,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "#\t\t\t\"${CMAKE_SOURCE_DIR}/html/examples/tests/tecgraf.bmp\"\n",
        "Line" : 1770,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# This function knows to build libraries for Android. It also is aware of how to bundle our assets.\n",
        "Line" : 1772,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# \"${_should_exclude_from_all}\"\n",
        "Line" : 1780,
        "CharPositionInLine" : 5
      },
      "106" : {
        "Text" : "# TODO: Need a new main.c launcher app to drive Lua programs. Also need to bundle Lua scripts.\n",
        "Line" : 1786,
        "CharPositionInLine" : 1
      },
      "107" : {
        "Text" : "#\t\tadd_library(iuptestapplua SHARED EXCLUDE_FROM_ALL\n\n#\t\t\t${CMAKE_SOURCE_DIR}/html/examples/lua_c_app/lua_app_main.c\n\n#\t\t)\n\n#\t\tIF(IUP_OPTION_LUA_BUILD_AS_MODULES)\n\n#\t\t\ttarget_link_libraries(iuptestapplua iupweb iup)\n\n#\t\tELSE()\n\n#\t\t\ttarget_link_libraries(iuptestapplua ${IUPLUAWEB_LIBRARY_NAME} ${IUPLUA_LIBRARY_NAME} iupweb iup)\n\n#\t\tENDIF()\n",
        "Line" : 1789,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# if we need to bundle resources in the assets directory, list them here.\n",
        "Line" : 1799,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "#\t\t\t\"${CMAKE_SOURCE_DIR}/html/examples/tests/tecgraf.bmp\"\n",
        "Line" : 1801,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# This function knows to build libraries for Android. It also is aware of how to bundle our assets.\n",
        "Line" : 1809,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# \"${_should_exclude_from_all}\"\n",
        "Line" : 1817,
        "CharPositionInLine" : 5
      },
      "112" : {
        "Text" : "# For uninstall\n",
        "Line" : 1827,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 113
    },
    "CMakeModules/FindCD.cmake" : {
      "ObjectId" : "4c3c172f215d2daebcf526d1c10eedb67ecc4ad1",
      "LastModified" : "2018-08-12T14:09:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/FindLua.cmake" : {
      "ObjectId" : "6b0fa886f8271d5c54f9bd20dda0ca9f54da2d96",
      "LastModified" : "2017-09-01T01:40:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindLua\n\n# -------\n\n#\n\n#\n\n#\n\n# Locate Lua library This module defines\n\n#\n\n# ::\n\n#\n\n#   LUA_FOUND          - if false, do not try to link to Lua\n\n#   LUA_LIBRARIES      - both lua and lualib\n\n#   LUA_INCLUDE_DIR    - where to find lua.h\n\n#   LUA_VERSION_STRING - the version of Lua found\n\n#   LUA_VERSION_MAJOR  - the major version of Lua\n\n#   LUA_VERSION_MINOR  - the minor version of Lua\n\n#   LUA_VERSION_PATCH  - the patch version of Lua\n\n#\n\n#\n\n#\n\n# Note that the expected include convention is\n\n#\n\n# ::\n\n#\n\n#   #include \"lua.h\"\n\n#\n\n# and not\n\n#\n\n# ::\n\n#\n\n#   #include <lua/lua.h>\n\n#\n\n# This is because, the lua location is not standardized and may exist in\n\n# locations other than lua/\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a function only to have all the variables inside go away automatically\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# once there is a different major version supported this should become a loop\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# At least 5.[012] have different ways to express the version\n\n# so all of them need to be tested. Lua 5.2 defines LUA_VERSION\n\n# and LUA_RELEASE as joined by the C preprocessor, so avoid those.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Fink\n",
        "Line" : 132,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 133,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "# Blastwave\n",
        "Line" : 134,
        "CharPositionInLine" : 19
      },
      "9" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# include dl library for statically-linked Lua library\n",
        "Line" : 179,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "CMakeModules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "1acb021e80bc2d47ce0de0ad99871fd2b4aa7984",
      "LastModified" : "2017-09-02T01:07:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to FIND_PACKAGE().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call, in this case all the information\n\n# provided by the config-mode of find_package() will be evaluated\n\n# automatically.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    FIND_PACKAGE(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to FIND_PACKAGE(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# version handling:\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# exact version required\n",
        "Line" : 201,
        "CharPositionInLine" : 44
      },
      "14" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 209,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# print the result:\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "CMakeModules/FindPackageMessage.cmake" : {
      "ObjectId" : "48d3472b5da9b25a907f7353b74cb3eb7602a498",
      "LastModified" : "2017-09-02T01:07:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.\n\n# It will print a message once for each unique find result.\n\n# This is useful for telling the user where a package was found.\n\n# The first argument specifies the name (XXX) of the package.\n\n# The second argument specifies the message to display.\n\n# The third argument lists details about the find result so that\n\n# if they change the message will be displayed again.\n\n# The macro also obeys the QUIET argument to the find_package command.\n\n#\n\n# Example:\n\n#\n\n#  IF(X11_FOUND)\n\n#    FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#      \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#  ELSE(X11_FOUND)\n\n#   ...\n\n#  ENDIF(X11_FOUND)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 40,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 43,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "CMakeModules/FindWebKit.cmake" : {
      "ObjectId" : "2244a73339cc2d81898085844a6c8c2af39456c5",
      "LastModified" : "2017-09-01T01:40:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# pkg-config is currently used for Linux. But this is still useful for Mac & iOS.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\t\twebkitgtk-3.0\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t\twebkitgtk-3.0\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/HelperApple.cmake" : {
      "ObjectId" : "91c5055604d488b68b69c76160398cb56fbe41f8",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to compile the interface builder *.xib files to *.nib and then add them to the correct location in the bundle.\n\n# Doing:\n\n#  set_target_properties(iup PROPERTIES RESOURCE \"${IUP_COCOA_XIB_FILES}\") \n\n# does not work correctly with CMake because CMake doesn't preserve the localized directory structure.\n\n# So we must do it manually. Sadly, this will not show correctly in Xcode.\n\n# CMake really should be changed to handle this natively. \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Expand to support GNUStep. Apple check ensures this won't break other platforms.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure we can find the 'ibtool' program.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# xib_files is expected to be a list of full path and file names to each xib.\n\n# e.g. /Users/ewing/IupCocoa/src/cocoa/xib/Base.lproj/CanonicalServiceMenu.xib\n\n# target_name is the CMake target_name\n\n# framework_base_name is expected to be just the base library name, \n\n# e.g. \"iup\", not \"iup.framework\"\n\n# This is typically the same as the target_name unless you manually changed the framework name.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: Expand to support GNUStep. Apple check ensures this won't break other platforms.\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO: What is this dir for iOS?\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\t\t\tset(intermediate_resource_dir \"Versions/Current/Resources/\")\t\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Compile the .xib files using the 'ibtool' program with the destination being the app package\n",
        "Line" : 39,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# xib_path_and_file has something like:\n\n# /Users/ewing/IupCocoa/src/cocoa/xib/Base.lproj/CanonicalServiceMenu.xib\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# This will extract Users/ewing/IupCocoa/src/cocoa/xib/Base.lproj to xib_path\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This will extract Base.lproj to localized_path_component\t\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# This will extract the CanonicalServiceMenu to base_file_name\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# /foo/build/Debug/iup.framework/Versions/Current/Resources/Base.lproj/CanonicalServiceMenu.nib\n",
        "Line" : 57,
        "CharPositionInLine" : 5
      },
      "13" : {
        "Text" : "# Allows us to use an existing Info.plist\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "CMakeModules/HelperFunctions.cmake" : {
      "ObjectId" : "af8950215cf5718a327596d3d8c78c8f1896d032",
      "LastModified" : "2018-08-19T02:34:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# RPATH stuff. This MUST be set before any targets that use it are declared.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# RPATH $ORIGIN is only for Linux and Solaris\n\n# FIXME: match for Solaris too\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n\n#\tSET(CMAKE_SKIP_BUILD_RPATH  FALSE)\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#SET(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n\n#\tSET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n\n#\tLIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES \"${CMAKE_INSTALL_PREFIX}/lib\" isSystemDir)\n\n#\tIF(\"${isSystemDir}\" STREQUAL \"-1\")\n\n#   SET(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#    SET(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_RPATH}:\\\\$$ORIGIN\")\n\n#\tENDIF(\"${isSystemDir}\" STREQUAL \"-1\")\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#    SET(CMAKE_INSTALL_RPATH \"/usr/lib${CMAKE_INSTALL_RPATH}:\\\\\\$ORIGIN\")\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n\n#\tSET(CMAKE_SKIP_BUILD_RPATH  FALSE)\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#SET(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# This is an uber-ADD_LIBRARY wrapper function\n\n# which supports Apple style frameworks and regular libraries.\n\n# It also deals with TARGET_LINK_LIBRARIES.\n\n# It takes a uri_name which can also be useful for other platforms that need it.\n\n# This also takes a list of foriegn source files which is useful for Emscripten (.js) and potentially other systems (Java/Android).\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set Dynamic Library and Framework properties\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#\t\tFRAMEWORK_VERSION \"${LUA_FRAMEWORK_VERSION_NUMBER}\"\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#  PRIVATE_HEADER \"fooPrivate.h;fooBoth.h\"\n",
        "Line" : 88,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "#\t\tRESOURCE \"${RESOURCE_FILES}\"\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# INSTALL_NAME_DIR ${CMAKE_FRAMEWORK_INSTALL_NAME_DIR}\n\n# BUILD_WITH_INSTALL_RPATH ${CMAKE_BUILD_WITH_INSTALL_RPATH} \n",
        "Line" : 91,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "#\t\tVERSION ${LUA_VERSION}\n\n#\t\tSOVERSION ${LUA_COMPATIBILITY_VERSION}\n",
        "Line" : 93,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# I moved the INSTALL_NAME_DIR to use SET_PROPERTY instead because\n\n# SET_TARGET_PROPERTIES will fail if the variable is empty.\n\n#\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY INSTALL_NAME_DIR ${CMAKE_FRAMEWORK_INSTALL_NAME_DIR})\n\n#\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY BUILD_WITH_INSTALL_RPATH NO)\n\n# If the user deletes the install_name path, use the gcc default\n\n# and disable the option completely. But CMake by default places\n\n# the name of the library in the install_name if \n\n# BUILD_WITH_INSTALL_RPATH is ON. So to avoid this, I need to \n\n# disable the switch.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#\tIF(CMAKE_FRAMEWORK_INSTALL_NAME_DIR)\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "#\t\tMESSAGE(\"got dir ${CMAKE_FRAMEWORK_INSTALL_NAME_DIR}\")\n",
        "Line" : 109,
        "CharPositionInLine" : 3
      },
      "23" : {
        "Text" : "#\t\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY BUILD_WITH_INSTALL_RPATH ${CMAKE_BUILD_WITH_INSTALL_RPATH})\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "#\tELSE(CMAKE_FRAMEWORK_INSTALL_NAME_DIR)\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "#\t\tMESSAGE(\"no dir ${CMAKE_FRAMEWORK_INSTALL_NAME_DIR}\")\n",
        "Line" : 113,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "#\t\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY BUILD_WITH_INSTALL_RPATH NO)\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "#\tENDIF(CMAKE_FRAMEWORK_INSTALL_NAME_DIR)\n",
        "Line" : 116,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Short Version is the \"marketing version\". It is the version\n\n# the user sees in an information panel.\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#\tSET(MACOSX_FRAMEWORK_SHORT_VERSION_STRING \"${LUA_MAJOR_VERSION}.${LUA_MINOR_VERSION}.${LUA_PATCH_VERSION}\")\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# Bundle version is the version the OS looks at.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#\tSET(MACOSX_FRAMEWORK_BUNDLE_VERSION \"${LUA_MAJOR_VERSION}.${LUA_MINOR_VERSION}.${LUA_PATCH_VERSION}\")\n\n#\tSET(MACOSX_FRAMEWORK_IDENTIFIER ${uri_name})\n",
        "Line" : 124,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "#\tSET(MACOSX_BUNDLE_BUNDLE_NAME \"lua\" )\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# INSTALL_NAME_DIR ${CMAKE_DYLIB_INSTALL_NAME_DIR}\n\n# BUILD_WITH_INSTALL_RPATH ${CMAKE_BUILD_WITH_INSTALL_RPATH} \n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "#\t\t\tVERSION ${LUA_VERSION}\n\n#\t\t\tSOVERSION ${LUA_COMPATIBILITY_VERSION}\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# I moved the INSTALL_NAME_DIR to use SET_PROPERTY instead because\n\n# SET_TARGET_PROPERTIES will fail if the variable is empty.\n",
        "Line" : 138,
        "CharPositionInLine" : 3
      },
      "36" : {
        "Text" : "#\t\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY INSTALL_NAME_DIR ${CMAKE_DYLIB_INSTALL_NAME_DIR})\n\n#\t\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY BUILD_WITH_INSTALL_RPATH NO)\n",
        "Line" : 140,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# If the user deletes the install_name path, use the gcc default\n\n# and disable the option completely. But CMake by default places\n\n# the name of the library in the install_name if \n\n# BUILD_WITH_INSTALL_RPATH is ON. So to avoid this, I need to \n\n# disable the switch.\n",
        "Line" : 142,
        "CharPositionInLine" : 3
      },
      "38" : {
        "Text" : "#\t\tIF(CMAKE_DYLIB_INSTALL_NAME_DIR)\n\n#\t\t\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY BUILD_WITH_INSTALL_RPATH ${CMAKE_BUILD_WITH_INSTALL_RPATH})\n\n#\t\tELSE(CMAKE_DYLIB_INSTALL_NAME_DIR)\n\n#\t\t\tSET_PROPERTY(TARGET lua_library_dynamic PROPERTY BUILD_WITH_INSTALL_RPATH OFF)\n\n#\t\tENDIF(CMAKE_DYLIB_INSTALL_NAME_DIR)\n",
        "Line" : 147,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "#\t\t\t\tVERSION ${LUA_VERSION}\n\n#\t\t\t\tSOVERSION ${LUA_SOVERSION}\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "#\t\t\tVERSION ${LUA_VERSION}\n\n#\t\t\tSOVERSION ${LUA_COMPATIBILITY_VERSION}\n",
        "Line" : 172,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "#\t\t\tVERSION ${LUA_VERSION}\n\n#\t\t\tSOVERSION ${LUA_COMPATIBILITY_VERSION}\n",
        "Line" : 179,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Install location stuff. Maybe this should be broken into a separate function.\n",
        "Line" : 196,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# Hmmm...install TARGETS is not installing headers\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# indirect_link_libs is for static libraries, where all dependencies must be explicitly linked \n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Android must build libraries that get loaded from the main Java app\n",
        "Line" : 247,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Copy resources\n\n# Warning: This does not handle/preserve resources in subdirectories.\n",
        "Line" : 275,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# WARNING: This only works if we've made an explicit target in the Gradle project for this.\n\n# The Gradle target and directory must be named the same as exe_name\n",
        "Line" : 280,
        "CharPositionInLine" : 3
      },
      "48" : {
        "Text" : "# build/tmp/assets is defined in our build.gradle SourceSets\n",
        "Line" : 283,
        "CharPositionInLine" : 3
      },
      "49" : {
        "Text" : "# TODO: Support GNUStep\n",
        "Line" : 287,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# Handled below\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Emscripten needs a completely different solution than the other platforms\n",
        "Line" : 299,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# https://groups.google.com/forum/#!topic/emscripten-discuss/GZXkjXrq49U\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Generate the command line that must be passed to emcc linker to produce the given asset list.\n",
        "Line" : 303,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# This will extract the base_file_name including the extension\n",
        "Line" : 306,
        "CharPositionInLine" : 3
      },
      "55" : {
        "Text" : "# Use a response file to store all the --preload-file directives so that windows max cmdline length limit won't be hit (there can be a lot of them!)\n",
        "Line" : 312,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# This will extract the base_file_name including the extension\n",
        "Line" : 319,
        "CharPositionInLine" : 3
      },
      "57" : {
        "Text" : "#\t\tadd_custom_command(\n\n#\t\t\t\tOUTPUT \"${target_resource_dir}/${base_file_name}\"\n\n#\t\t\t\tCOMMAND ${CMAKE_COMMAND} -E copy_if_different\n\n#\t\t\t\t\t\"${resource_file}\"\n\n#\t\t\t\t\t\"${target_resource_dir}/\"\n\n#\t\t\t\tDEPENDS \"${resource_file}\"\n\n#\t\t\t\tCOMMENT \"Copying ${resource_file} to ${target_resource_dir}\"\n\n#\t\t)\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# files are only copied if a target depends on them\n\n# I don't understand why it depends on the target directory file instead of the source directory file\n\n# https://cmake.org/pipermail/cmake/2014-June/057989.html\t\n",
        "Line" : 340,
        "CharPositionInLine" : 3
      },
      "59" : {
        "Text" : "#\t\tadd_custom_target(\"${exe_name}_resources\" ALL \n\n#\t\t\tDEPENDS \"${resource_file}\"\n\n#\t\t\tDEPENDS \"${target_resource_dir}/${base_file_name}\"\n\n#\t\t\tCOMMENT \"${exe_name}_resources custom target for ${resource_file}\"\n\n#\t\t)\n\n#\t\tADD_DEPENDENCIES(${exe_name} \"${exe_name}_resources\")\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Android must keep the lib prefix\n",
        "Line" : 383,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "#LINK_FLAGS \"-flat_namespace -undefined suppress\"\n\n#LINK_FLAGS \"-flat_namespace -undefined dynamic_lookup\"\n\n# Problem: On Mac, we are supposed to use -undefined dynamic_lookup because we cannot link directly to Lua or we get mutliple VMs detected.\n\n# On Mac, you cannot link modules against other modules. (Modules are distinct entities from dynamic libraries on Darwin.)\n\n# The problem is that iupweb needs to invoke iuplua_call which is across module boundaries.\n\n# -undefined dynamic_lookup can get the modules built, but at runtime\n",
        "Line" : 395,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# when I try this, iuplua loads, but iupluaweb fails not finding the _iuplua_call symbol, with an additional statement \"Expected in: flat namespace\".\n",
        "Line" : 401,
        "CharPositionInLine" : 7
      },
      "63" : {
        "Text" : "# I thought maybe using -flat_namespace might possibly workaround this problem, but it had no effect.\n\n# I'm running out of ideas. Always using RTLD_GLOBAL in Mac's Lua implementation for dlopen is my last idea.\n",
        "Line" : 402,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# Seems like Lua 5.2 added something kind of related for this problem.\n",
        "Line" : 404,
        "CharPositionInLine" : 7
      },
      "65" : {
        "Text" : "# http://lua-users.org/lists/lua-l/2015-05/msg00263.html\t\n",
        "Line" : 405,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# I think I need the rpath for modules to find its linked dependencies...possibly because as a module, it cannot reference the @executable_path.\n",
        "Line" : 407,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 67
    },
    "CMakeModules/InitialCacheAndroid.cmake" : {
      "ObjectId" : "5d8f9e166e21d80bd55b403ec8c8dfbfba287dbf",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/XcodeDefaults.cmake" : {
      "ObjectId" : "7c6a2bea68cb0a02cba2a4e984b0b86017d7758f",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is here to initial Xcode to better default settings.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This iOS toolchain provides this convenience marco, but this is not in the mainline Mac, so let's define it.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need to make sure dead code stripping is off for \"plugins\" since we must statically link.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Over 50% of iOS users update within the first month and in less than a year, 90% are on the latest.\n\n# The old Apple dev rule of thumb is to support current OS and the previous version, though supporting just the latest probably is acceptable.\n\n# Theoretically, the components of Blurrr could go back further, but this is unsupported as the support costs will make things more expensive,\n\n# and future components don't promise to support back that far.\n\n# Also understand that Apple changes/breaks/fixes things in every release. Particularly with OpenGL drivers, you must get the latest OS.\n\n# iOS 8 introduced dynamic library support to 3rd parties.\n\n# This will have an impact on many things including Swift which the standard libraries must be embedded with the app as dynamic libraries.\n\n# This makes iOS 8 a new baseline.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Note: The CMAKE_OSX_SYSROOT is set to iphoneos in the toolchain file so we don't need to override it here.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Evidence suggests that on modern devices, using Apple's pngcrush is counterproductive.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Disable LLVM IR bitcode (for now)\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# EVIL HACK: CMake sets the FRAMEWORK_SEARCH_PATHS *sometimes*.\n\n# I'm seeing it with the JavaScriptCore builds.\n\n# The problem is that it sets it to the iPhone9.3 SDK or whatever,\n\n# and when switching to the simulator, it breaks.\n\n# I read that frameworks may cause CMake to set the FRAMEWORK_SEARCH_PATHS.\n\n# What I don't understand is why I don't see this with Lua or C, but JSCore template.\n\n# I use other system frameworks in all of them, so there is very little difference.\n\n# I'm speculating maybe because I am asking for the include directory inside the framework,\n\n# it might have something to do with it, but OpenAL does the same thing.\n\n# Anyway, the hack is to override what CMake writes in the framework search paths with a blank value.\n\n# This will prevent it from injecting the iPhone framework path.\n\n# This could break 3rd party framework paths, but Blurrr still seems to work so I don't know what's going on.\n\n# I consider this really evil and dangerous though.\n\n# I think the correct fix is to overhaul the CMake internals to properly deal with iOS including the simulator.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# OSX\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# The generic \"macosx\" is used to trigger the \"Latest\" setting. The full SDK path which CMake has been trying to do actually breaks functionality in subtle ways.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# For active paying users on the Mac App Store, it seems that 50% of Mac users update within the first month now that the OS is free.\n\n# The old Apple dev rule of thumb is to support current OS and the previous version.\n\n# Theoretically, the components of Blurrr could go back further (10.6), but this is unsupported as the support costs will make things more expensive,\n\n# and future components don't promise to support back that far.\n\n# Also understand that Apple changes/breaks/fixes things in every release. Particularly with OpenGL drivers, you must get the latest OS.\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# This will let you override some of the entitlement defaults in Blurrr-OSX-Template.entitlements.in\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Because codesigning is kind of slow, you can disable this to skip resigning already signed components.\n\n# However, this may break if you change the CODESIGN_IDENTITY without cleaning.\n\n# Currently incomplete/broken due to rsync being re-run every build.\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For JavaScript debugging with Safari, you need to codesign to use the com.apple.security.get-task-allow entitlement.\t\t\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Common to both\n\n# Use Apple's recommended standard architectures\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Xcode likes to name these after the project. \n\n# But I don't want to have to dynamically manage names since it will \n\n# slow down the build process and just make everything harder to deal with.\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Again, Xcode likes to name these after the project,\n\n# but it's not worth dealing with.\n\n# Right now only iOS needs this, but Mac potentially could need this.\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# set_xcode_property(${_EXE_NAME} ONLY_ACTIVE_ARCH NO)\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# These two lines are needed to make the Archive option work (mostly).\n\n# (You need to build as Release first. Then Archive, otherwise the build fails.)\n\n# http://public.kitware.com/pipermail/cmake/2012-December/053017.html\n\n# UPDATE: This breaks building frameworks as it changes the INSTALL_NAME from @rpath\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "#\tset_xcode_property(${_EXE_NAME} INSTALL_PATH \"$(LOCAL_APPS_DIR)\")\n\n#\tset_xcode_property(${_EXE_NAME} SKIP_INSTALL NO)\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "CMakeModules/iOS.toolchain.cmake" : {
      "ObjectId" : "55cb3ad158648918f920be2d44f451f82344b6ec",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Standard settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Required as of cmake 2.8.10\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force the compilers to gcc for iOS\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 103,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Setup iOS developer location unless specified manually with CMAKE_IOS_DEVELOPER_ROOT\n\n# Note Xcode 4.3 changed the installation location, choose the most recent one available\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with CMAKE_IOS_SDK_ROOT\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n\n# The generic \"iphoneos\" is used to trigger the \"Latest\" setting. The full SDK path which CMake has been trying to do actually breaks functionality in subtle ways.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#set (CMAKE_OSX_SYSROOT ${CMAKE_IOS_SDK_ROOT} CACHE PATH \"Sysroot used for iOS support\")\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set the architecture for iOS \n\n# NOTE: Currently both ARCHS_STANDARD_32_BIT and ARCHS_UNIVERSAL_IPHONE_OS set armv7 only, so set both manually\n\n# NOTE: EW: I'm disabling this because it breaks arm64. Apple has dropped armv6. Time to move on.\n\n#if (${IOS_PLATFORM} STREQUAL \"OS\")\n\n#\tset (IOS_ARCH armv6 armv7)\n\n#else (${IOS_PLATFORM} STREQUAL \"OS\")\n\n#\tset (IOS_ARCH i386)\n\n#endif (${IOS_PLATFORM} STREQUAL \"OS\")\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This little macro lets you set any XCode specific property\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# We need to make sure dead code stripping is off for \"plugins\" since we must statically link.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Not working correctly\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS[variant=Debug] YES)\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS[variant=MinSizeRel] NO)\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS[variant=RelWithDebInfo] YES)\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_GENERATE_DEBUGGING_SYMBOLS[variant=Release] NO)\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Not working correctly\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL[variant=Debug] \"0\")\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL[variant=MinSizeRel] \"s\")\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL[variant=RelWithDebInfo] \"fast\")\n\n#set(CMAKE_XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL[variant=Release] \"fast\")\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Common to both\n\n# Use Apple's recommended standard architectures\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "Makefile" : {
      "ObjectId" : "d4dd7aabe452ae77408fde835b677c3dbe15dba4",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "html/en/7gui/Makefile" : {
      "ObjectId" : "374b4a555f1e4977251ff87dd7c4fbb0ed3e4f4f",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "html/examples/C/Makefile" : {
      "ObjectId" : "374b4a555f1e4977251ff87dd7c4fbb0ed3e4f4f",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "html/examples/tutorial/Makefile" : {
      "ObjectId" : "17a46979d738d3dd685874c845af79e2d40bc11c",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Makefile" : {
      "ObjectId" : "595aec0b5d5364d340001a99d572e76ac30eff11",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srccd/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srccontrols/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcgl/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcglcontrols/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcim/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcimglib/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcledc/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srclua5/Makefile" : {
      "ObjectId" : "22d7523f6d3c58556f36aad68b3dc7a617f04bc8",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcluaconsole/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcluascripter/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcmglplot/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcole/Makefile" : {
      "ObjectId" : "142bcbeac97d41db0fc43800e8815e143e60ce35",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcplot/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcscintilla/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srctuio/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcview/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "srcweb/Makefile" : {
      "ObjectId" : "abc46d0dc5df5874bfd7028f0e0f4daaaf5870f9",
      "LastModified" : "2018-08-17T04:53:58Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 11,
    "MAKEFILE" : 22
  },
  "ElapsedTime" : 2331
}