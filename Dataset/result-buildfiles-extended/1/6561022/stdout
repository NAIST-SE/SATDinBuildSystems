{
  "Repository" : "6561022",
  "Revision" : "HEAD",
  "ObjectId" : "7cbc4218d99dd1c842e6109fab5fbaee9a5bfce2",
  "CommitTime" : "2019-04-09T08:21:43Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "906b9f61979befcf04b219835fe9520b0f3a5a3f",
      "LastModified" : "2017-03-05T20:57:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Extracts new translation from JS files and creates PO template\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Updates translations with new unstraslated strings from template\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Updates js files from new translations in po files\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Creates new translation with LAN culture info\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#$(PYBABEL) init --domain \"$(LAN)\" --locale \"$(LAN)\" --input-file $(TEMPLATE_FILE) --output-file $(LOCALE_FOLDER)/\"$(LAN).po\";\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "pom.xml" : {
      "ObjectId" : "840e9cc90ba2534baaf3f84b0d82feafa08ea455",
      "LastModified" : "2019-02-11T08:49:03Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Developer entries are provided only for Steering Committee members.\n       For other contributors, see https://github.com/opentripplanner/OpenTripPlanner/graphs/contributors ",
        "Line" : 22,
        "CharPositionInLine" : 110
      },
      "1" : {
        "Text" : " We are using Sonatype Nexus Staging instead of Maven Release plugin.\n             Only a snapshot repo should be configured. Releases are done from that snapshot staging repo. ",
        "Line" : 90,
        "CharPositionInLine" : 111
      },
      "2" : {
        "Text" : " Filtering will perform substitution on maven-version.properties, see git commit id plugin below. ",
        "Line" : 98,
        "CharPositionInLine" : 114
      },
      "3" : {
        "Text" : " Shell scripts to start up OTP, need to be filtered to insert the JAR file name. ",
        "Line" : 115,
        "CharPositionInLine" : 105
      },
      "4" : {
        "Text" : " These are treated as testResources rather than resources to keep them out of the JAR. ",
        "Line" : 116,
        "CharPositionInLine" : 111
      },
      "5" : {
        "Text" : " The staging repo will reject a JAR containing them as they use traversal paths (../..). ",
        "Line" : 117,
        "CharPositionInLine" : 113
      },
      "6" : {
        "Text" : " Copy the scripts up into the root of the repo, not /target/classes ",
        "Line" : 120,
        "CharPositionInLine" : 92
      },
      "7" : {
        "Text" : " m2eclipse lifecycle mapping configuration. This controls which Maven build goals should\n                be performed during incremental builds within the Eclipse IDE. There are sensible defaults\n                for most plugins, but some others require manual configuration with <action><ignore /> or\n                <action><execute /> filters. This section only affects incremental builds within Eclipse,\n                not command-line Maven builds. That's why it's a pluginManagement without an accompanying plugin. ",
        "Line" : 130,
        "CharPositionInLine" : 118
      },
      "8" : {
        "Text" : " Target Java versions ",
        "Line" : 177,
        "CharPositionInLine" : 50
      },
      "9" : {
        "Text" : " Recommended way to deploy to OSSRH , which allows deferred manual release to Central. ",
        "Line" : 183,
        "CharPositionInLine" : 111
      },
      "10" : {
        "Text" : " override default binding to process-sources phase (enunciate generates web services). ",
        "Line" : 200,
        "CharPositionInLine" : 119
      },
      "11" : {
        "Text" : " This plugin must be configured both here (for attach-javadoc during release)\n                and in \"reports\" (for site generation), preferably with identical version numbers. ",
        "Line" : 213,
        "CharPositionInLine" : 103
      },
      "12" : {
        "Text" : " Turn off Java 8 strict Javadoc checking ",
        "Line" : 218,
        "CharPositionInLine" : 69
      },
      "13" : {
        "Text" : " Compress Javadoc into JAR and include that JAR when deploying. ",
        "Line" : 222,
        "CharPositionInLine" : 92
      },
      "14" : {
        "Text" : " We sign in the verify phase, which means it will happen for install and deploy but not package. ",
        "Line" : 251,
        "CharPositionInLine" : 129
      },
      "15" : {
        "Text" : " Jenkins needs XML test reports to determine whether the build is stable. ",
        "Line" : 265,
        "CharPositionInLine" : 102
      },
      "16" : {
        "Text" : " Get current Git commit information for use in MavenVersion class.\n                  Commit information is stored in Maven variables, which are then substituted\n                  into the properties file. The plugin has a mode to generate a git.properties file,\n                  but we need the Maven project version as well, so we perform substitution. ",
        "Line" : 273,
        "CharPositionInLine" : 97
      },
      "17" : {
        "Text" : " There used to be a dependency-plugin:copy-dependencies plugin entry\n              here, but the shade-plugin will explode the dependencies even if they aren't\n              manually copied in. ",
        "Line" : 294,
        "CharPositionInLine" : 38
      },
      "18" : {
        "Text" : " We want to create a standalone jar that can be run on the command\n                  line. Java does not really allow this - you cannot place jars inside of jars.\n                  You must either provide all the dependency jars to the user (usually lib/\n                  under the directory containing the runnable jar) or explode all the jars\n                  and repackage them into a single jar. The problem is that while class files\n                  are nicely organized into the package namespace and should not collide, the\n                  META-INF directories of the jars will collide. Maven's standard assembly\n                  plugin does not account for this and will just clobber metadata. This then\n                  causes runtime errors, particularly with Spring. Instead, we use the shade\n                  plugin which has transformers that will for example append files of the same\n                  name rather than overwrite them in the combined JAR. NB: Don't use a version\n                  of the shade plugin older than 1.3.2, as it fixed MSHADE-76 (files not merged\n                  properly if some input files are missing a terminating newline) ",
        "Line" : 309,
        "CharPositionInLine" : 86
      },
      "19" : {
        "Text" : " exclude signatures from merged JAR to avoid invalid signature messages ",
        "Line" : 322,
        "CharPositionInLine" : 116
      },
      "20" : {
        "Text" : " The shaded JAR will not be the main artifact for the project, it will be attached\n                              for deployment in the way source and docs are. ",
        "Line" : 332,
        "CharPositionInLine" : 81
      },
      "21" : {
        "Text" : " MinimizeJar removes unused classes, (classes not imported explicitly by name).\n                              We have eliminated most Jersey auto-scanning, but there is still some need for include\n                              filters to force-include classes that are dynamically loaded by name/auto-scanned. ",
        "Line" : 337,
        "CharPositionInLine" : 117
      },
      "22" : {
        "Text" : " This roughly halves the size of the OTP JAR, bringing it down to around 20 MB.\n                              <minimizeJar>true</minimizeJar>\n                              <filters> <filter> <artifact>com.sun.jersey:*</artifact> <includes> <include>**</include>\n                              </includes> </filter> <filter> <artifact>org.opentripplanner:*</artifact>\n                              <includes> <include>**</include> </includes> </filter> </filters> ",
        "Line" : 342,
        "CharPositionInLine" : 100
      },
      "23" : {
        "Text" : " The ImageIO lines allow some image reader plugins to work\n                                             https://stackoverflow.com/questions/7051603/jai-vendorname-null#18495658 ",
        "Line" : 349,
        "CharPositionInLine" : 122
      },
      "24" : {
        "Text" : "\n        Reporting plugin versions cannot be managed with entries in <build><plugins><pluginmanagement>\n        but would need a separate <reporting><plugins><pluginmanagement> section.\n        ",
        "Line" : 373,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : " empty: disable project-info reports ",
        "Line" : 382,
        "CharPositionInLine" : 73
      },
      "26" : {
        "Text" : " This plugin must be configured both here (for site generation) and in \"build\"\n                (for attach-javadoc during release), preferably with identical version numbers. ",
        "Line" : 389,
        "CharPositionInLine" : 100
      },
      "27" : {
        "Text" : " Turn off Java 8 strict Javadoc checking ",
        "Line" : 394,
        "CharPositionInLine" : 69
      },
      "28" : {
        "Text" : " enable only aggregate-level javadoc generation ",
        "Line" : 400,
        "CharPositionInLine" : 84
      },
      "29" : {
        "Text" : " Hack to force maven to check central first. Maven central is inherited from the superpom,\n          but ends up at the end of the list. Though most of the time the artifact is in central,\n          Maven tries to download from every other repository and fails before checking central.\n          Do not change the id from central2 to central, otherwise the entry will be ignored. ",
        "Line" : 413,
        "CharPositionInLine" : 98
      },
      "30" : {
        "Text" : " Logging library, implements slf4j logging API ",
        "Line" : 452,
        "CharPositionInLine" : 63
      },
      "31" : {
        "Text" : " Jersey uses java.util logging, redirect it to slf4j API (we use the Logback implementation) ",
        "Line" : 458,
        "CharPositionInLine" : 109
      },
      "32" : {
        "Text" : " GEOTOOLS AND JTS TOPOLOGY: geometry, rasters and projections. ",
        "Line" : 464,
        "CharPositionInLine" : 79
      },
      "33" : {
        "Text" : " GEOTOOLS includes JTS as a transitive dependency. ",
        "Line" : 465,
        "CharPositionInLine" : 67
      },
      "34" : {
        "Text" : " provides EPSG database for projections (shapefile loading) ",
        "Line" : 511,
        "CharPositionInLine" : 76
      },
      "35" : {
        "Text" : " TODO: this should be replaced by Jackson serialization ",
        "Line" : 518,
        "CharPositionInLine" : 72
      },
      "36" : {
        "Text" : " We explicitly exclude jackson-core/databind as we use a more recent\n                 version than the one geojson-jackson depends on, and the two seems to\n                 be somehow incompatible. ",
        "Line" : 525,
        "CharPositionInLine" : 46
      },
      "37" : {
        "Text" : " TESTING ",
        "Line" : 538,
        "CharPositionInLine" : 25
      },
      "38" : {
        "Text" : " Provides some shared serializers for Kryo. Introduces transitive dependencies on Guava, Trove, and Kryo. ",
        "Line" : 551,
        "CharPositionInLine" : 122
      },
      "39" : {
        "Text" : " Also provides classes for testing that a round trip through serialization reproduces the same network. ",
        "Line" : 552,
        "CharPositionInLine" : 120
      },
      "40" : {
        "Text" : " Jersey annontation-driven REST web services (JAX-RS implementation) ",
        "Line" : 558,
        "CharPositionInLine" : 85
      },
      "41" : {
        "Text" : " Deploy Jersey apps in stand-alone Grizzly server instead of a servlet container. ",
        "Line" : 569,
        "CharPositionInLine" : 98
      },
      "42" : {
        "Text" : " Jackson modules. ",
        "Line" : 576,
        "CharPositionInLine" : 34
      },
      "43" : {
        "Text" : " Jackson modules to serialize Jersey response objects to JSON. ",
        "Line" : 587,
        "CharPositionInLine" : 79
      },
      "44" : {
        "Text" : " Jackson modules to serialize Jersey response objects to XML. ",
        "Line" : 593,
        "CharPositionInLine" : 78
      },
      "45" : {
        "Text" : " Asynchronous Websocket-capable client, for message-driven incremental GTFS-RT ",
        "Line" : 600,
        "CharPositionInLine" : 95
      },
      "46" : {
        "Text" : " AsyncHttpClient Websockets need a newer version of Grizzly than Jersey does. ",
        "Line" : 601,
        "CharPositionInLine" : 94
      },
      "47" : {
        "Text" : " OTHER DEPENDENCIES ",
        "Line" : 608,
        "CharPositionInLine" : 36
      },
      "48" : {
        "Text" : " this dependency is provided by the servlet container ",
        "Line" : 613,
        "CharPositionInLine" : 98
      },
      "49" : {
        "Text" : " OBA GTFS loader ",
        "Line" : 625,
        "CharPositionInLine" : 33
      },
      "50" : {
        "Text" : " Processing is used for the debug GUI (though we could probably use just Java2D) ",
        "Line" : 631,
        "CharPositionInLine" : 97
      },
      "51" : {
        "Text" : " Google Protocol Buffers compact binary serialization format ",
        "Line" : 637,
        "CharPositionInLine" : 77
      },
      "52" : {
        "Text" : " Joda Time is a widely used replacement for flaky Java time classes. ",
        "Line" : 645,
        "CharPositionInLine" : 85
      },
      "53" : {
        "Text" : " PNGJ is used for making Analyst TimeGrids",
        "Line" : 651,
        "CharPositionInLine" : 58
      },
      "54" : {
        "Text" : " FlexJSON deserializes JSON in Nominatim/Yahoo/Google geocoder modules. ",
        "Line" : 657,
        "CharPositionInLine" : 88
      },
      "55" : {
        "Text" : " Could be done with Jackson JSON trees. ",
        "Line" : 658,
        "CharPositionInLine" : 56
      },
      "56" : {
        "Text" : " Apache Axis: Used in NEDDownloader to fetch elevation tiles. ",
        "Line" : 664,
        "CharPositionInLine" : 78
      },
      "57" : {
        "Text" : " Apache Axis: Used in NEDDownloader to fetch elevation tiles. ",
        "Line" : 670,
        "CharPositionInLine" : 78
      },
      "58" : {
        "Text" : " Used in DegreeGridNEDTileSource to fetch tiles from Amazon S3 ",
        "Line" : 686,
        "CharPositionInLine" : 79
      },
      "59" : {
        "Text" : " OpenStreetMap protobuf (PBF) definitions ",
        "Line" : 692,
        "CharPositionInLine" : 58
      },
      "60" : {
        "Text" : " Command line parameter parsing ",
        "Line" : 698,
        "CharPositionInLine" : 48
      },
      "61" : {
        "Text" : " CSV parser ",
        "Line" : 704,
        "CharPositionInLine" : 28
      },
      "62" : {
        "Text" : " Lucene for sophisticated text search ",
        "Line" : 726,
        "CharPositionInLine" : 54
      },
      "63" : {
        "Text" : " Provides annotations like XmlElement indicating how classes should be serialized ",
        "Line" : 752,
        "CharPositionInLine" : 98
      },
      "64" : {
        "Text" : " Support for OTP scripting ",
        "Line" : 758,
        "CharPositionInLine" : 43
      },
      "CommentCount" : 65
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1,
    "MAVEN" : 1
  },
  "ElapsedTime" : 3645
}