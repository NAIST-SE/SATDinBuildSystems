{
  "Repository" : "14817466",
  "Revision" : "HEAD",
  "ObjectId" : "ec6e5f2a84e1b29b041310b35681583e44286393",
  "CommitTime" : "2018-07-27T14:39:52Z",
  "Files" : {
    "controlbox/CMakeLists.txt" : {
      "ObjectId" : "fc1051a7f694d9cb73e19b377645d912f84fea5e",
      "LastModified" : "2017-01-11T04:40:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "controlbox/examples/CMakeLists.txt" : {
      "ObjectId" : "cf15bd27ac83bb3553067c999413024ac9a04dbc",
      "LastModified" : "2016-04-08T14:30:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "controlbox/examples/non-static/CMakeLists.txt" : {
      "ObjectId" : "a087819a24cb09892fde829d24eb5cb15274812d",
      "LastModified" : "2016-04-08T14:30:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# retrieve the source and include paths for the library\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# convert from a single string to a list\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "controlbox/examples/static/CMakeLists.txt" : {
      "ObjectId" : "763b10297bbc6aa0ea37d5bd3b1e4b57ce809489",
      "LastModified" : "2016-04-08T14:30:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# retrieve the source and include paths for the library\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# convert from a single string to a list\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "controlbox/src/CMakeLists.txt" : {
      "ObjectId" : "eeb607d3d4591effc504dbe3dd1f79971bafd377",
      "LastModified" : "2016-04-08T14:30:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "controlbox/src/lib/CMakeLists.txt" : {
      "ObjectId" : "0017b2afda7614cdc329d69f40ee22b8252c85ed",
      "LastModified" : "2017-01-11T04:40:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "controlbox/test/CMakeLists.txt" : {
      "ObjectId" : "d6c503fa2c31dc8828a16203bb831cca55a01654",
      "LastModified" : "2016-04-08T14:30:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# retrieve the source and include paths for the library\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# convert from a single string to a list\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "docs/Makefile" : {
      "ObjectId" : "a1c85de71d4b58ba16d3e84f9ab561f382e8e1b5",
      "LastModified" : "2016-04-08T14:30:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "platform/spark/firmware/communication/tests/UnitTest++/Makefile" : {
      "ObjectId" : "1082fedf18e4b238bac00c849f9b5642b56d285b",
      "LastModified" : "2016-04-08T14:30:57Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0,
      "Errorlog" : "line 41:44 token recognition error at: '\\1'\n"
    },
    "platform/spark/firmware/crypto/mbedtls/CMakeLists.txt" : {
      "ObjectId" : "3e47224ea1035dfabfc90e9787f954e08e38c3b3",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the test suites currently have compile errors with MSVC\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Warning string - created as a list for compatibility with CMake 2.8\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If NULL Entropy is configured, display an appropriate warning\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# some warnings we want are not available with old GCC versions\n\n# note: starting with CMake 2.8 we could use CMAKE_C_COMPILER_VERSION\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Strictest warnings, and treat as errors\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# additional convenience targets for Unix only\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "platform/spark/firmware/crypto/mbedtls/Makefile" : {
      "ObjectId" : "d475868a710e705b284f9e0cd6ea0eb46d2a4ba6",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Post build steps\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If NULL Entropy is configured, display an appropriate warning\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# note: for coverage testing, build with:\n\n# make CFLAGS='--coverage -g3 -O0'\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "platform/spark/firmware/crypto/mbedtls/include/CMakeLists.txt" : {
      "ObjectId" : "985a3530b9799529e05c046068d1fe3d892a01ee",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/library/CMakeLists.txt" : {
      "ObjectId" : "f2c1e5ceb32c591fd684b9d5ff4b12ce8f2724b3",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/library/Makefile" : {
      "ObjectId" : "28f92315a0f9540281407cdaf53f9e04e291ffce",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Also see \"include/mbedtls/config.h\"\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MicroBlaze specific options:\n\n# CFLAGS += -mno-xl-soft-mul -mxl-barrel-shift\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To compile on Plan9:\n\n# CFLAGS += -D_BSD_EXTENSION\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if were running on Windows build for Windows\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# To compile as a shared library:\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# all code is position-indep with mingw, avoid warning about useless flag\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# OSX shared library extension:\n\n# DLEXT=dylib\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Windows shared library extension:\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# tls\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# x509\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# crypto\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "platform/spark/firmware/crypto/mbedtls/programs/CMakeLists.txt" : {
      "ObjectId" : "4cdae7821b7bf8d5c9dac051b65e768f4b5d7e64",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/Makefile" : {
      "ObjectId" : "443689b1bc5938de3a73ae7cf05eba1b8dfc83d6",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# To compile on SunOS: add \"-lsocket -lnsl\" to LDFLAGS\n\n# To compile with PKCS11: add \"-lpkcs11-helper\" to LDFLAGS\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if we're running on Windows, build for Windows\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Zlib shared library extensions:\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "platform/spark/firmware/crypto/mbedtls/programs/aes/CMakeLists.txt" : {
      "ObjectId" : "f5a0caabbbc98ed7442521e0bfcf854da2e8b759",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/hash/CMakeLists.txt" : {
      "ObjectId" : "eda975bb068dbc5228e0c9828ee59acfabeb4a50",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/pkey/CMakeLists.txt" : {
      "ObjectId" : "5a37a42129ee3e6f8e73513f6f6e9bb942e5ece1",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/random/CMakeLists.txt" : {
      "ObjectId" : "30933d88dd8d740b25c52d11a4603a74f98c951d",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/ssl/CMakeLists.txt" : {
      "ObjectId" : "1e6563341273839d4b8b1f5f090f7d06389f160e",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/test/CMakeLists.txt" : {
      "ObjectId" : "0ed7145466d9a877dd39d14369518910f9e746fe",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/util/CMakeLists.txt" : {
      "ObjectId" : "f9b6604538136aa02a29ae48c1475df76313f7a8",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/programs/x509/CMakeLists.txt" : {
      "ObjectId" : "39b8b5bab39b9f7ecdf0572b21186252f666a6fb",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/crypto/mbedtls/tests/CMakeLists.txt" : {
      "ObjectId" : "dc27979681d620688013db0592c92fce0d354928",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If a warning level has been defined, suppress all warnings for test code\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Make data_files available in an out-of-source build\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get OS dependent path to use in `execute_process`\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "platform/spark/firmware/crypto/mbedtls/tests/Makefile" : {
      "ObjectId" : "4787f25085ecfb95468690feff6bc5c3517ac78b",
      "LastModified" : "2018-01-08T19:16:57Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# To compile on SunOS: add \"-lsocket -lnsl\" to LDFLAGS\n\n# To compile with PKCS11: add \"-lpkcs11-helper\" to LDFLAGS\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if we're running on Windows, build for Windows\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Zlib shared library extensions:\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# invoke perl explicitly for the sake of mingw32-make\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "platform/spark/firmware/nanopb/nanopb/BUILD" : {
      "ObjectId" : "f9fc57f50aa00d98557f9f667e3870be8ba10916",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "BAZEL",
      "CommentCount" : 0
    },
    "platform/spark/firmware/nanopb/nanopb/CMakeLists.txt" : {
      "ObjectId" : "c013d377f93057b7da57e84cd507e28de06b1586",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/nanopb/nanopb/docs/Makefile" : {
      "ObjectId" : "0dbd97cfec34274421a07705ae6143eabde56115",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/nanopb/nanopb/examples/cmake_relpath/CMakeLists.txt" : {
      "ObjectId" : "e7727d8546599117afdbe5efcd26064b37f9bbfc",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_custom_target(generate_proto_sources DEPENDS ${PROTO_SRCS} ${PROTO_HDRS})\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "platform/spark/firmware/nanopb/nanopb/examples/cmake_simple/CMakeLists.txt" : {
      "ObjectId" : "e5f33a028eb0f3cd4b50b46c71a653353fa0a269",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_custom_target(generate_proto_sources DEPENDS ${PROTO_SRCS} ${PROTO_HDRS})\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "platform/spark/firmware/nanopb/nanopb/examples/network_server/Makefile" : {
      "ObjectId" : "2c7639a15dbf418c49d24cc8d2d07b691ac29fc0",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Include the nanopb provided Makefile rules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags to enable all warnings & debug info\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "platform/spark/firmware/nanopb/nanopb/examples/simple/Makefile" : {
      "ObjectId" : "970a865009a0d48f4c39fa92faae5e7defe95ac6",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Include the nanopb provided Makefile rules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags to enable all warnings & debug info\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# C source code files that are required\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The main program\n\n# The compiled protocol definition\n\n# The nanopb encoder\n\n# The nanopb decoder\n\n# The nanopb common parts\n",
        "Line" : 9,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "# Build rule for the main program\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build rule for the protocol\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "platform/spark/firmware/nanopb/nanopb/examples/using_double_on_avr/Makefile" : {
      "ObjectId" : "874a64bdc981c09bd53459ca8d89eb8171f6b212",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Include the nanopb provided Makefile rules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags to enable all warnings & debug info\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "platform/spark/firmware/nanopb/nanopb/examples/using_union_messages/Makefile" : {
      "ObjectId" : "66396a02eeacad33108e33934c9ae1288a51dad1",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Include the nanopb provided Makefile rules\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compiler flags to enable all warnings & debug info\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "platform/spark/firmware/nanopb/nanopb/extra/FindNanopb.cmake" : {
      "ObjectId" : "dda63f63441f1fd66e3236a0a7ac0d66fb19ccae",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is an example script for use with CMake projects for locating and configuring\n\n# the nanopb library.\n\n#\n\n# The following variables can be set and are optional:\n\n#\n\n#\n\n#   PROTOBUF_SRC_ROOT_FOLDER - When compiling with MSVC, if this cache variable is set\n\n#                              the protobuf-default VS project build locations\n\n#                              (vsprojects/Debug & vsprojects/Release) will be searched\n\n#                              for libraries and binaries.\n\n#\n\n#   NANOPB_IMPORT_DIRS       - List of additional directories to be searched for\n\n#                              imported .proto files.\n\n#\n\n#   NANOPB_GENERATE_CPP_APPEND_PATH - By default -I will be passed to protoc\n\n#                                     for each directory where a proto file is referenced.\n\n#                                     Set to FALSE if you want to disable this behaviour.\n\n#\n\n# Defines the following variables:\n\n#\n\n#   NANOPB_FOUND - Found the nanopb library (source&header files, generator tool, protoc compiler tool)\n\n#   NANOPB_INCLUDE_DIRS - Include directories for Google Protocol Buffers\n\n#\n\n# The following cache variables are also available to set or use:\n\n#   PROTOBUF_PROTOC_EXECUTABLE - The protoc compiler\n\n#   NANOPB_GENERATOR_SOURCE_DIR - The nanopb generator source\n\n#\n\n#  ====================================================================\n\n#\n\n# NANOPB_GENERATE_CPP (public function)\n\n# NANOPB_GENERTAE_CPP(SRCS HDRS [RELPATH <root-path-of-proto-files>] \n\n#                     <proto-files>...)\n\n#   SRCS = Variable to define with autogenerated source files\n\n#   HDRS = Variable to define with autogenerated header files\n\n#   If you want to use relative paths in your import statements use the RELPATH\n\n#   option. The argument to RELPATH should be the directory that all the\n\n#   imports will be relative to.\n\n#   When RELPATH is not specified then all proto files can be imported without\n\n#   a path. \n\n#\n\n#\n\n#  ====================================================================\n\n#  Example:\n\n#\n\n#   set(NANOPB_SRC_ROOT_FOLDER \"/path/to/nanopb\")\n\n#   set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${NANOPB_SRC_ROOT_FOLDER}/extra)\n\n#   find_package( Nanopb REQUIRED )\n\n#   include_directories(${NANOPB_INCLUDE_DIRS})\n\n#\n\n#   NANOPB_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)\n\n#\n\n#   include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})\n\n#\n\n#  Example with RELPATH:\n\n#   Assume we have a layout like:\n\n#    .../CMakeLists.txt\n\n#    .../bar.cc\n\n#    .../proto/\n\n#    .../proto/foo.proto  (Which contains: import \"sub/bar.proto\"; )\n\n#    .../proto/sub/bar.proto\n\n#   Everything would be the same as the previous example, but the call to\n\n#   NANOPB_GENERATE_CPP would change to:\n\n# \n\n#   NANOPB_GENERATE_CPP(PROTO_SRCS PROTO_HDRS RELPATH proto\n\n#                       proto/foo.proto proto/sub/bar.proto)\n\n# \n\n#  ====================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n#   notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n#   notice, this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n#   nor the names of their contributors may be used to endorse or promote\n\n#   products derived from this software without specific prior written\n\n#   permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#=============================================================================\n\n#\n\n# Changes\n\n# 2013.01.31 - Pavlo Ilin - used Modules/FindProtobuf.cmake from cmake 2.8.10 to\n\n#                           write FindNanopb.cmake\n\n#\n\n#=============================================================================\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Treat the source diretory as immutable.\n\n#\n\n# Copy the generator directory to the build directory before\n\n# compiling python and proto files.  Fixes issues when using the\n\n# same build directory with different python/protobuf versions\n\n# as the binary build directory is discarded across builds.\n\n#\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Check that the file is under the given \"RELPATH\"\n",
        "Line" : 192,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#\n\n# Main.\n\n#\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# By default have NANOPB_GENERATE_CPP macro pass -I to protoc\n\n# for each directory where a proto file is referenced.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make a really good guess regarding location of NANOPB_SRC_ROOT_FOLDER\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Find the include directory\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Find nanopb source files\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Find the protoc Executable\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find nanopb generator source dir\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "platform/spark/firmware/nanopb/nanopb/extra/nanopb-config.cmake" : {
      "ObjectId" : "4f726a681ddbf16611c8e2f1b358c27e0f87a6d4",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/nanopb/nanopb/generator/proto/Makefile" : {
      "ObjectId" : "89bfe52864ecfe9a00e94d8be2c6090528a8d0d7",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "platform/spark/firmware/nanopb/nanopb/tests/Makefile" : {
      "ObjectId" : "cee6bf67eb681075903746e5c64723e73072db42",
      "LastModified" : "2018-05-02T15:09:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# LCOV does not like the newer gcov format\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Collect the data\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Remove the test code from results\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Generate HTML\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "MAKEFILE" : 13,
    "BAZEL" : 1
  },
  "ElapsedTime" : 4082
}