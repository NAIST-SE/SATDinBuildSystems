{
  "Repository" : "3981395",
  "Revision" : "HEAD",
  "ObjectId" : "ed6dd9b6aac5ac39834834a9b37265dd645c58b9",
  "CommitTime" : "2019-04-11T17:56:59Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "64ca10d0d0c453b5fb63d1780545020fd5ae28e0",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# version (e.g. for packaging)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COMPILER SETTINGS (default: Release) and flags\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set output directories for libraries and executables\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# KrisLibrary source subdirectories\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get all compilation files in subdirectories\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#output lib/Release/KrisLibrary.lib and lib/Debug/KrisLibraryd.lib\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#add all compilation files to the library\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Configure isinf / isnan etc using the CheckInfNan script\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Configure external libraries using the KrisLibraryDependencies script #\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#windows has some weird stuff with link libraries\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Documentation \n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# uninstall target\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#install targets\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Needs to be last statement:\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Finished:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "CMakeModules/CPackSettings.cmake" : {
      "ObjectId" : "58c2cacd4973ac1681c4c93077c32a1bbf166505",
      "LastModified" : "2014-05-13T13:24:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package building stuff - Set CPACK_GENERATOR to whatever package type\n\n# you wish to build...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(CPACK_PACKAGE_INSTALL_DIRECTORY \"KrisLibrary ${V_MAJOR}.${V_MINOR}\")\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This must always be last statement!\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "CMakeModules/CheckIncludeFileCXX.cmake" : {
      "ObjectId" : "ae86bac9b257d152e7468c20d90aab6da50bbd23",
      "LastModified" : "2017-08-18T19:20:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# CheckIncludeFileCXX\n\n# -------------------\n\n#\n\n# Provides a macro to check if a header file can be included in ``CXX``.\n\n#\n\n# .. command:: CHECK_INCLUDE_FILE_CXX\n\n#\n\n#   ::\n\n#\n\n#     CHECK_INCLUDE_FILE_CXX(<include> <variable> [<flags>])\n\n#\n\n#   Check if the given ``<include>`` file may be included in a ``CXX``\n\n#   source file and store the result in an internal cache entry named\n\n#   ``<variable>``.  The optional third argument may be used to add\n\n#   compilation flags to the check (or use ``CMAKE_REQUIRED_FLAGS`` below).\n\n#\n\n# The following variables may be set before calling this macro to modify\n\n# the way the check is run:\n\n#\n\n# ``CMAKE_REQUIRED_FLAGS``\n\n#   string of compile command line flags\n\n# ``CMAKE_REQUIRED_DEFINITIONS``\n\n#   list of macros to define (-DFOO=bar)\n\n# ``CMAKE_REQUIRED_INCLUDES``\n\n#   list of include directories\n\n# ``CMAKE_REQUIRED_QUIET``\n\n#   execute quietly without messages\n\n#\n\n# See modules :module:`CheckIncludeFile` and :module:`CheckIncludeFiles`\n\n# to check for one or more ``C`` headers.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MESSAGE(\"COMPILING WITH FLAGS \" ${CMAKE_CXX_FLAGS})\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CMakeModules/CheckInfNan.cmake" : {
      "ObjectId" : "d4f5d2306682a1d2aa648a6e6b03b775981ff623",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: determine dynamically whether <cmath> is defined\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: determine dynamically whether IEEE finite/nan comparisons are supported\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/CompilerSettings.cmake" : {
      "ObjectId" : "06132bb0fda7511144b09ef10e6c96b480f0750a",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# COMPILER SETTINGS (default: Release)\n\n# use \"-DCMAKE_BUILD_TYPE=Debug\" in cmake for a Debug-build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COMPILER FLAGS\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shared object compilation under 64bit (vtable)\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#These are used to be compatible with Klampt\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Set full rpath http://www.paraview.org/Wiki/CMake_RPATH_handling\n\n# (good to have and required with ROS)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# no prefix needed for python modules\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CMakeModules/FindAssimp.cmake" : {
      "ObjectId" : "422ef789a1221e9f72ec299963682a004575541e",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ASSIMP\n\n#\n\n# May wish to define ASSIMP_ROOT\n\n#\n\n# Once done this will define\n\n#  \n\n#  ASSIMP_FOUND        - system has ASSIMP\n\n#  ASSIMP_INCLUDE_DIR  - the ASSIMP include directory\n\n#  ASSIMP_LIBRARY      - Link these to use ASSIMP\n\n#  ASSIMP_DEFINITIONS  - Will define the Assimp version\n\n#   \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find the headers\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#this is for version 2.x of assimp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#this is for version 3.x of assimp\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "CMakeModules/FindFreeImage.cmake" : {
      "ObjectId" : "f184fd424b37f4c9cd4cff07a0aa10507cc9c317",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n#\n\n# Looks for CMake variable FREE_IMAGE_ROOT\n\n#\n\n# this files defines\n\n# - FREE_IMAGE_INCLUDE_DIR\n\n# - FREE_IMAGE_LIBRARY\n\n# - FREE_IMAGE_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#not available on windows\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the FREE_IMAGE_INCLUDE_DIR and FREE_IMAGE_LIBRARY variables only in the advanced view\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/FindGLPK.cmake" : {
      "ObjectId" : "19afab54749b62c4551615deefa3ed8b43a99446",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n\n#\n\n# Looks for environment variable GLPK_DIR or CMake variable GLPK_ROOT\n\n# In windows, may need to set GLPK_MAJOR_VERSION / GLPK_MINOR_VERSION\n\n#\n\n# this files defines\n\n# - GLPK_INCLUDE_DIR\n\n# - GLPK_LIBRARY\n\n# - GLPK_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show the BERKELEY_DB_INCLUDE_DIR and BERKELEY_DB_LIBRARIES variables only in the advanced view\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindGLUI.cmake" : {
      "ObjectId" : "1292aca86d176379dee2179f49b799a9677bbd1f",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GLUI (GL User Interface)\n\n# Requires OpenGL and GLUT - searches for them using find_package\n\n# Once done, this will define\n\n#\n\n#\tGLUI_INCLUDE_DIR, where to find GL/glui.h \n\n#\tGLUI_LIBRARY, the libraries to link against\n\n#\tGLUI_FOUND, If false, do not try to use GLUI.\n\n#\n\n# Plural versions refer to this library and its dependencies, and\n\n# are recommended to be used instead, unless you have a good reason.\n\n#\n\n# Useful configuration variables you might want to add to your cache:\n\n#   GLUI_ROOT_DIR - A directory prefix to search\n\n#                  (usually a path that contains include/ as a subdirectory)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#this is used to pick between RELEASE and DEBUG library\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set xxx_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/FindGSL.cmake" : {
      "ObjectId" : "48fd0077f1a2085e5859d6095aec5573a236d657",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find gnu scientific library GSL\n\n# See\n\n# http://www.gnu.org/software/gsl/  and\n\n# http://gnuwin32.sourceforge.net/packages/gsl.htm\n\n#\n\n# Based on a script of Felix Woelk and Jan Woetzel\n\n# (www.mip.informatik.uni-kiel.de)\n\n#\n\n# It defines the following variables:\n\n#  GSL_FOUND - system has GSL lib\n\n#  GSL_INCLUDE_DIRS - where to find headers\n\n#  GSL_LIBRARIES - full path to the libraries\n\n#  GSL_LIBRARY_DIRS, the directory where the PLplot library is found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially \"`gsl-config --cxxflags`\"\n\n#  GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix\n\n#  GSL_EXE_LINKER_FLAGS = rpath on Unix\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Windows, but not for Cygwin and MSys where gsl-config is available\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# look for headers\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# look for gsl library\n",
        "Line" : 33,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# look for gsl cblas library\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#mark_as_advanced(\n\n#  GSL_INCLUDE_DIR\n\n#  GSL_LIBRARY\n\n#  GSL_CBLAS_LIBRARY\n\n#)\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# run the gsl-config program to get cxxflags\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# parse definitions from cflags; drop -D* from CFLAGS\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# parse include dirs from cflags; drop -I prefix\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# run the gsl-config program to get the libs\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "CMakeModules/FindKrisLibrary.cmake" : {
      "ObjectId" : "258bc7bafeb40079be0b2e1db91861e991f2d9ac",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Finds KrisLibrary package.\n\n#If KRISLIBRARY_ROOT is set, searches for a KrisLibrary install there\n\n#defines \n\n# - KRISLIBRARY_LIBRARY\n\n# - KRISLIBRARY_LIBRARIES\n\n# - KRISLIBRARY_INCLUDE_DIRS\n\n# - KRISLIBRARY_DEFINITIONS\n\n#\n\n# On Windows this will also define\n\n# - KRISLIBRARY_LIBRARY_DEBUG / RELEASE\n\n#\n\n# This will properly configure a build to include all external libraries:\n\n# KrisLibrary and its dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#this will get everything but KrisLibrary\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find KrisLibrary\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Note: do not use SelectLibraryConfigurations, this clobbers KRISLIBRARY_LIBRARIES\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#do the find_package call...\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "CMakeModules/FindLOG4CXX.cmake" : {
      "ObjectId" : "cc3c0909ec71ce54cca92b04e79d4a0ee8e07d06",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LOG4CXX\n\n#\n\n# May wish to define LOG4CXX_ROOT\n\n#\n\n# Once done this will define\n\n#  \n\n#  LOG4CXX_FOUND        - system has LOG4CXX\n\n#  LOG4CXX_INCLUDE_DIR  - the LOG4CXX include directory\n\n#  LOG4CXX_LIBRARIES      - Link these to use LOG4CXX\n\n#  LOG4CXX_DEFINITIONS  - Will define the LOG4CXX version\n\n#   \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find the headers\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#this is for version 2.x of LOG4CXX\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#other things log4cxx depends on\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CMakeModules/FindOMPL.cmake" : {
      "ObjectId" : "831af3f231571b363130bd46d485b7520c9bcbb5",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Open Motion Planning Library\n\n# Find the native OMPL includes and library\n\n#\n\n# OMPL_FOUND - True if OMPL found.\n\n# OMPL_INCLUDE_DIR - where to find OMPL.h, etc.\n\n# OMPL_LIBRARIES - List of libraries when using OMPL.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OMPL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/FindTinyXML.cmake" : {
      "ObjectId" : "8b574f57ec8f19847d2618cc983079eaaec78636",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find TinyXML\n\n# Find the native TinyXML includes and library\n\n#\n\n# TINYXML_FOUND - True if TinyXML found.\n\n# TINYXML_INCLUDE_DIR - where to find tinyxml.h, etc.\n\n# TINYXML_LIBRARY - List of libraries when using TinyXML.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#this is used to pick between RELEASE and DEBUG library\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TINYXML_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMakeModules/InstallPkgConfigFile.cmake" : {
      "ObjectId" : "7c4e5859b70f715a91644e9fbbf6fb48e23ee85b",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# A Macro to simplify creating a pkg-config file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install_pkg_config_file(<package-name> \n\n#                              [VERSION <version>]\n\n#                              [DESCRIPTION <description>]\n\n#                              [CFLAGS <cflag> ...]\n\n#                              [LIBS <lflag> ...]\n\n#                              [REQUIRES <required-package-name> ...])\n\n# \n\n# Create and install a pkg-config .pc file to CMAKE_INSTALL_PREFIX/lib/pkgconfig\n\n#\tassuming the following install layout:\n\n#\t       libraries:   CMAKE_INSTALL_PREFIX/lib\n\n#\t       headers  :   CMAKE_INSTALL_PREFIX/include\n\n#\n\n# example:\n\n#    add_library(mylib mylib.c)\n\n#    install_pkg_config_file(mylib \n\n#\t\t\t     \tDESCRIPTION My Library\n\n#\t\t\t     \tCFLAGS\n\n#\t\t\t     \tLIBS -lmylib \n\n#\t\t\t     \tREQUIRES glib-2.0 lcm\n\n# \t\t\t     \tVERSION 0.0.1)\n\n#\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO error check\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# parse function arguments and populate pkg-config parameters\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# write the .pc file out\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# mark the .pc file for installation to the lib/pkgconfig directory\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "CMakeModules/KrisLibraryDependencies.cmake" : {
      "ObjectId" : "d6ec7a328e17257ac6bc796cacbebde4aba04e46",
      "LastModified" : "2019-04-06T02:04:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds dependencies of KrisLibrary\n\n# defines the following symbols:\n\n# - KRISLIBRARY_DEP_INCLUDE_DIRS\n\n# - KRISLIBRARY_DEP_LIBRARIES\n\n# - KRISLIBRARY_DEP_DEFINITIONS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#initialize to empty string\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#First check CMAKE_COMPILER - \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET(CMAKE_CXX_STANDARD_REQUIRED ON)\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Boost threads vs pthreads\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Boost settings\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Don't use 'pragma lib' on Windows\n",
        "Line" : 50,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : "# Fix for CMake problem in FindBoost\n",
        "Line" : 51,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "# generates main() for unit tests\n",
        "Line" : 53,
        "CharPositionInLine" : 41
      },
      "9" : {
        "Text" : "# GLUI\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# GLUI\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# GLUT\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# OpenGL\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# GL Extension Wrangler (GLEW)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# GLPK\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# TinyXML\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Assimp\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Open Motion Planning Library\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# FreeImage\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#USE_LOGGING\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "CMakeModules/LibFindMacros.cmake" : {
      "ObjectId" : "aa2143c82d2f7b0ab5b1eacb2e9c239f8e3f4178",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Version 1.0 (2013-04-12)\n\n# Public Domain, originally written by Lasse Kärkkäinen <tronic@zi.fi>\n\n# Published at http://www.cmake.org/Wiki/CMake:How_To_Find_Libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If you improve the script, please modify the forementioned wiki page because\n\n# I no longer maintain my scripts (hosted as static files at zi.fi). Feel free\n\n# to remove this entire header if you use real version control instead.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Changelog:\n\n# 2013-04-12  Added version number (1.0) and this header, no other changes\n\n# 2009-10-08  Originally published\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "geometry/PQP/Makefile" : {
      "ObjectId" : "9d73f5284bb24931020d0395e85e6f5d29c0ed21",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "geometry/PQP/demos/Makefile" : {
      "ObjectId" : "15bdeebbc92b1e3973e4fdf946d059d195befdaa",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "geometry/PQP/demos/falling/Makefile" : {
      "ObjectId" : "89b45db8bb5354413b38ac4e5572525223e67533",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Must set these gl and glut locations to build 'falling'\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "geometry/PQP/demos/sample/Makefile" : {
      "ObjectId" : "fff3b2a8dc75e179090064722331c0b3c302137c",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "geometry/PQP/demos/spinning/Makefile" : {
      "ObjectId" : "9289a9b19b4222c6d3eafc0ce607a1718a5cafef",
      "LastModified" : "2019-03-20T04:12:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Must set these gl and glut locations to build 'spinning'\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 17,
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 864
}