{
  "Repository" : "21329",
  "Revision" : "HEAD",
  "ObjectId" : "03b4c47ba7ddc9da4e8e2052339df54ce4ff0614",
  "CommitTime" : "2019-03-16T14:58:09Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "684e34f4dcfe80b8c70c8e81eae6e6a4f3e4451e",
      "LastModified" : "2015-08-26T19:32:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow disabling game building\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Allow disabling editor building\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow disabling master server building\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid source tree pollution\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add a sensible build type default and warning because empty means no optimization and no debug info.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set default compile flags for GCC\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set default compile flags for VS\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Include path for additional CMake library finding scripts\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We want the binaries to be easily accessible\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Data installation path\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#TODO: This would be more elegant and compiler independent to do through configure_file(),\n\n#      but that would break other build systems for good.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We can significantly reduce deps if only building master server\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Overlay moved to separate component in 1.9\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Overlay moved to separate component in 1.9\n",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#TODO: MyGUI.OgrePlatform is not added by the find script\n",
        "Line" : 118,
        "CharPositionInLine" : 58
      },
      "15" : {
        "Text" : "# Simple libraries added in a loop\n",
        "Line" : 121,
        "CharPositionInLine" : 33
      },
      "16" : {
        "Text" : "# For clock_gettime()\n",
        "Line" : 128,
        "CharPositionInLine" : 27
      },
      "17" : {
        "Text" : "# only game has sound\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Editor doesn't need networking\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Server dependencies\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Subdirectories\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/FindBullet.cmake" : {
      "ObjectId" : "8c9ae3c0dd8333b101ce41facbeb321c4b1169d8",
      "LastModified" : "2015-08-21T07:42:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Bullet physics engine\n\n#\n\n#  This module defines the following variables\n\n#\n\n#  BULLET_FOUND - Was bullet found\n\n#  BULLET_INCLUDE_DIRS - the Bullet include directories\n\n#  BULLET_LIBRARIES - Link to this, by default it includes bullet components\n\n#\n\n#  This module accepts the following variables\n\n#\n\n#  BULLET_ROOT - Can be set to bullet install path or Windows build path\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the libraries\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set BULLET_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we only need dynamics, collision, math and worldimporter\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindENet.cmake" : {
      "ObjectId" : "b6c146c3cd5c836bb8e2013b9a90ee29724f3990",
      "LastModified" : "2011-04-12T16:27:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find enet\n\n# Once done this will define\n\n#\n\n#  ENET_FOUND - system has enet\n\n#  ENet_INCLUDE_DIRS - the enet include directory\n\n#  ENet_LIBRARIES - the libraries needed to use enet\n\n#\n\n# $ENETDIR is an environment variable used for finding enet.\n\n#\n\n#  Borrowed from The Mana World\n\n#  http://themanaworld.org/\n\n#\n\n# Several changes and additions by Fabian 'x3n' Landau\n\n# Lots of simplifications by Adrian Friedli\n\n#                 > www.orxonox.net <\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ENET_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindMyGUI.cmake" : {
      "ObjectId" : "339f494ddb1e30c5bbe43876c23efe436b8d64ca",
      "LastModified" : "2011-06-17T20:01:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MyGUI includes and library\n\n#\n\n# This module defines\n\n# MYGUI_INCLUDE_DIRS\n\n# MYGUI_LIBRARIES, the libraries to link against to use MYGUI.\n\n# MYGUI_LIB_DIR, the location of the libraries\n\n# MYGUI_FOUND, If false, do not try to use MYGUI\n\n#\n\n# Copyright Â© 2007, Matt Williams\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# IF (MYGUI_LIBRARIES AND MYGUI_INCLUDE_DIRS)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(MYGUI_FIND_QUIETLY TRUE)\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# ENDIF (MYGUI_LIBRARIES AND MYGUI_INCLUDE_DIRS)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Windows\n",
        "Line" : 20,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#Unix\n",
        "Line" : 82,
        "CharPositionInLine" : 13
      },
      "6" : {
        "Text" : "#Do some preparation\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindOGG.cmake" : {
      "ObjectId" : "b13275795744d27110f31c66cfa1d79e027efd99",
      "LastModified" : "2011-03-23T10:00:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate OGG\r\n\n# This module defines\r\n\n# OGG_LIBRARIES\r\n\n# OGG_FOUND, if false, do not try to link to OGG \r\n\n# OGG_INCLUDE_DIRS, where to find the headers\r\n\n#\r\n\n# $OGGDIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$OGGDIR\r\n\n# used in building OGG.\r\n\n#\r\n\n# Created by Sukender (Benoit Neil). Based on FindOGG.cmake module.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\r\n",
        "Line" : 25,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 26,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 27,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 4
    },
    "cmake/FindOGRE.cmake" : {
      "ObjectId" : "3e73ea5c1b41860f92b6c5af1768ca37a2995dc3",
      "LastModified" : "2014-05-05T18:26:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find OGRE\n\n# If you have multiple versions of Ogre installed, use the CMake or\n\n# the environment variable OGRE_HOME to point to the path where the\n\n# desired Ogre version can be found.\n\n# By default this script will look for a dynamic Ogre build. If you\n\n# need to link against static Ogre libraries, set the CMake variable\n\n# OGRE_STATIC to TRUE.\n\n#\n\n# Once done, this will define\n\n#\n\n#  OGRE_FOUND - system has OGRE\n\n#  OGRE_INCLUDE_DIRS - the OGRE include directories \n\n#  OGRE_LIBRARIES - link these to use the OGRE core\n\n#  OGRE_BINARY_REL - location of the main Ogre binary (win32 non-static only, release)\n\n#  OGRE_BINARY_DBG - location of the main Ogre binaries (win32 non-static only, debug)\n\n#\n\n# Additionally this script searches for the following optional\n\n# parts of the Ogre package:\n\n#  Plugin_BSPSceneManager, Plugin_CgProgramManager,\n\n#  Plugin_OctreeSceneManager, Plugin_OctreeZone,\n\n#  Plugin_ParticleFX, Plugin_PCZSceneManager,\n\n#  RenderSystem_GL, RenderSystem_GL3Plus,\n\n#  RenderSystem_GLES, RenderSystem_GLES2,\n\n#  RenderSystem_Direct3D9, RenderSystem_Direct3D11\n\n#  Paging, Terrain, Volume, Overlay\n\n#\n\n# For each of these components, the following variables are defined:\n\n#\n\n#  OGRE_${COMPONENT}_FOUND - ${COMPONENT} is available\n\n#  OGRE_${COMPONENT}_INCLUDE_DIRS - additional include directories for ${COMPONENT}\n\n#  OGRE_${COMPONENT}_LIBRARIES - link these to use ${COMPONENT} \n\n#  OGRE_${COMPONENT}_BINARY_REL - location of the component binary (win32 non-static only, release)\n\n#  OGRE_${COMPONENT}_BINARY_DBG - location of the component binary (win32 non-static only, debug)\n\n#\n\n# Finally, the following variables are defined:\n\n#\n\n#  OGRE_PLUGIN_DIR_REL - The directory where the release versions of\n\n#       the OGRE plugins are located\n\n#  OGRE_PLUGIN_DIR_DBG - The directory where the debug versions of\n\n#       the OGRE plugins are located\n\n#  OGRE_MEDIA_DIR - The directory where the OGRE sample media is\n\n#       located, if available\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine whether to search for a dynamic or static build\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# construct search paths from environmental hints and\n\n# OS specific guesses\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If both OGRE_BUILD and OGRE_SOURCE are set, prepare to find Ogre in a build dir\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# redo search if any of the environmental hints changed\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try to locate Ogre via pkg-config\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# try to find framework on OSX\n",
        "Line" : 164,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# locate Ogre include files\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# determine Ogre version\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# determine configuration settings\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# If working from source rather than SDK, add samples include\n",
        "Line" : 234,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# look for required Ogre dependencies in case of static build and/or threading\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# find binaries\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#########################################################\n\n# Find Ogre components\n\n#########################################################\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find binaries\n",
        "Line" : 391,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# look for Paging component\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# look for Terrain component\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# look for Property component\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# look for RTShaderSystem component\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# look for Volume component\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# look for Overlay component\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#########################################################\n\n# Find Ogre plugins\n\n#########################################################        \n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# On Unix, the plugins might have no prefix\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# strip RenderSystem_ or Plugin_ prefix from plugin name\n",
        "Line" : 425,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# header files for plugins are not usually needed, but find them anyway if they are present\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# find link libraries for plugins\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# look for plugin dirs\n",
        "Line" : 457,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# find binaries\n",
        "Line" : 483,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# check if dependencies for plugins are met\n",
        "Line" : 513,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# look for the media directory\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "cmake/FindOpenAL.cmake" : {
      "ObjectId" : "78fd632a5564a961a766901a8b14fea3f896cd81",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate OpenAL\n\n# This module defines\n\n# OPENAL_LIBRARY\n\n# OPENAL_FOUND, if false, do not try to link to OpenAL\n\n# OPENAL_INCLUDE_DIR, where to find the headers\n\n#\n\n# $OPENALDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$OPENALDIR\n\n# used in building OpenAL.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This makes the presumption that you are include al.h like\n\n# #include \"al.h\"\n\n# and not\n\n# #include <AL/al.h>\n\n# The reason for this is that the latter is not entirely portable.\n\n# Windows/Creative Labs does not by default put their headers in AL/ and\n\n# OS X uses the convention <OpenAL/al.h>.\n\n#\n\n# For Windows, Creative Labs seems to have added a registry key for their\n\n# OpenAL 1.1 installer. I have added that key to the list of search paths,\n\n# however, the key looks like it could be a little fragile depending on\n\n# if they decide to change the 1.00.0000 number for bug fix releases.\n\n# Also, they seem to have laid down groundwork for multiple library platforms\n\n# which puts the library in an extra subdirectory. Currently there is only\n\n# Win32 and I have hardcoded that here. This may need to be adjusted as\n\n# platforms are introduced.\n\n# The OpenAL 1.0 installer doesn't seem to have a useful key I can use.\n\n# I do not know if the Nvidia OpenAL SDK has a registry key.\n\n#\n\n# For OS X, remember that OpenAL was added by Apple in 10.4 (Tiger).\n\n# To support the framework, I originally wrote special framework detection\n\n# code in this module which I have now removed with CMake's introduction\n\n# of native support for frameworks.\n\n# In addition, OpenAL is open source, and it is possible to compile on Panther.\n\n# Furthermore, due to bugs in the initial OpenAL release, and the\n\n# transition to OpenAL 1.1, it is common to need to override the built-in\n\n# framework.\n\n# Per my request, CMake should search for frameworks first in\n\n# the following order:\n\n# ~/Library/Frameworks/OpenAL.framework/Headers\n\n# /Library/Frameworks/OpenAL.framework/Headers\n\n# /System/Library/Frameworks/OpenAL.framework/Headers\n\n#\n\n# On OS X, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# OPENAL_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 72,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# Blastwave\n",
        "Line" : 73,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPENAL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "1acb021e80bc2d47ce0de0ad99871fd2b4aa7984",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to FIND_PACKAGE().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call, in this case all the information\n\n# provided by the config-mode of find_package() will be evaluated\n\n# automatically.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    FIND_PACKAGE(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to FIND_PACKAGE(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# version handling:\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# exact version required\n",
        "Line" : 201,
        "CharPositionInLine" : 44
      },
      "14" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 209,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# print the result:\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cmake/FindPkgMacros.cmake" : {
      "ObjectId" : "09c02071fa3c61d94a08cfd252413ece3a65b786",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################\n\n# Provides some common functionality for the FindPackage modules\n\n##################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sets the QUIET and REQUIRED flags for a sub library\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Begin processing of package\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Display a status message unless FIND_QUIETLY is set\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 37,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Construct search paths for includes and libraries from a PREFIX_PATH\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clear cache variables if a certain variable changed\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# test against internal check variable\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Try to get some hints from pkg-config, if available\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Couple a set of release AND debug libraries (or frameworks)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Generate debug names from given release names\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add the parent dir from DIR to VAR \n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Do the final processing for the package find.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Slightly customised framework finder\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "70e607a89f66ff616e3a4e2035b9689dc5f81438",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 84,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 85,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/FindVorbisFile.cmake" : {
      "ObjectId" : "788b44c4a8f9b643f094b209f232cd0b17ec79ab",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate VorbisFile\r\n\n# This module defines\r\n\n# VorbisFile_LIBRARIES\r\n\n# VorbisFile_FOUND, if false, do not try to link to VorbisFile\r\n\n# VorbisFile_INCLUDE_DIRS, where to find the headers\r\n\n#\r\n\n# $VORBISDIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$VORBISDIR\r\n\n# used in building Vorbis.\r\n\n#\r\n\n# Created by Sukender (Benoit Neil). Based on FindOpenAL.cmake module.\r\n\n# TODO Add hints for linux and Mac\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\r\n",
        "Line" : 26,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 27,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 28,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 4
    },
    "cmake/OgreConfigTargets.cmake" : {
      "ObjectId" : "842c4a3d2e42f21f86a9a2882b7c728e3d72c659",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure settings and install targets\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default build output paths\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# create vcproj.user file for Visual Studio to set debug working directory\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# install targets according to current build type\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Skip all install targets in SDK\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#EXPORT Ogre-exports\n",
        "Line" : 73,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "#EXPORT Ogre-exports\n",
        "Line" : 80,
        "CharPositionInLine" : 33
      },
      "8" : {
        "Text" : "#EXPORT Ogre-exports\n",
        "Line" : 87,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "#EXPORT Ogre-exports\n",
        "Line" : 94,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "#install(EXPORT Ogre-exports DESTINATION ${OGRE_LIB_DIRECTORY})\n",
        "Line" : 101,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# setup common target settings\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# setup library build\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add static prefix, if compiling static version\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# add GCC visibility flags to shared library build\n",
        "Line" : 160,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# remove lib prefix from DLL outputs\n",
        "Line" : 164,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# install debug pdb files\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# setup plugin build\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# add static prefix, if compiling static version\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# add GCC visibility flags to shared library build\n",
        "Line" : 213,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# disable \"lib\" prefix on Unix\n",
        "Line" : 215,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# export only if static\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# install debug pdb files\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# setup Ogre sample build\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# The PRODUCT_NAME target setting cannot contain underscores.  Just remove them\n\n# Known bug in Xcode CFBundleIdentifier processing rdar://6187020\n\n# Can cause an instant App Store rejection. Also, code signing will fail. \n\n#if (OGRE_BUILD_PLATFORM_IPHONE)\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "#    string (REPLACE \"_\" \"\" SAMPLENAME ${SAMPLENAME})\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#endif()\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# set install RPATH for Unix systems\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# On OS X, create .app bundle\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Add the path where the Ogre framework was found\n",
        "Line" : 267,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# add GCC visibility flags to shared library build\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# disable \"lib\" prefix on Unix\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# install debug pdb files - no _d on exe\n",
        "Line" : 291,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# Add the path where the Ogre framework was found\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# install debug pdb files - with a _d on lib\n",
        "Line" : 316,
        "CharPositionInLine" : 3
      },
      "35" : {
        "Text" : "# Add the path where the Ogre framework was found\n",
        "Line" : 328,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Add sample to the list of link targets\n\n# Global property so that we can build this up across entire sample tree\n\n# since vars are local to containing scope of directories / functions\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# setup Ogre tool build\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#set _d debug postfix\n",
        "Line" : 350,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# set install RPATH for Unix systems\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# install debug pdb files\n",
        "Line" : 365,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# Get component include dir (different when referencing SDK)\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "cmake/OgreFindFrameworks.cmake" : {
      "ObjectId" : "a8052d305bfe726f7a07157e724fe2b5ea9f58b8",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - helper module to find OSX frameworks\n\n# Adapted from standard CMake version, but added dependencies\n\n# Standard finder does not look in any variable locations such as \n\n# CMAKE_FRAMEWORK_PATH (not sure why not)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/OgreGetVersion.cmake" : {
      "ObjectId" : "abf839df778f5eacefb9c32caf5d8e9089874649",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/PreprocessorUtils.cmake" : {
      "ObjectId" : "38462a98d42c08688901712076b543757043094e",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "config/CMakeLists.txt" : {
      "ObjectId" : "2bba41102bd977e5fc0693dad6f7e1ca018999e4",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install config files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "53ab0d433e93615219b5a3eece33945e4da6efe8",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install data files\n\n# TODO: make this use all data/* subdirs without tracks, not entered by hand ..\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Issue warning for missing tracks\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "dist/CMakeLists.txt" : {
      "ObjectId" : "3b4cb45be3e434016d0a4d51ece73fbea8a605b7",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "b47ac52dbf630ed963e659fa75dcda6a51939265",
      "LastModified" : "2015-09-05T17:30:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Linux prefers lower-case exe names\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Search include files from all source sub directories\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compile our libraries  ------\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Game executable  ------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Glob .cpp files needed for the game\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#source_group(vdrift\\\\game Buoy|coll|game|sound|settings)\n",
        "Line" : 64,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Editor\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Glob .cpp files needed for the editor\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Master server\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Glob .cpp files needed for the server\n",
        "Line" : 125,
        "CharPositionInLine" : 58
      },
      "CommentCount" : 10
    },
    "source/btOgre/CMakeLists.txt" : {
      "ObjectId" : "c5125df5c9c04e7183b1a6d609b353800936ddd7",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create a static library\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "source/oics/CMakeLists.txt" : {
      "ObjectId" : "78433d29dea3880d299b324467491168af2eaca6",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/paged-geom/CMakeLists.txt" : {
      "ObjectId" : "fc615b873e0c6e10fa424740e94aab67db84b1fd",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create a static library\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "source/sdl4ogre/CMakeLists.txt" : {
      "ObjectId" : "c4c26751047c26ff0aa55960e5209c41cb486bd7",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/shiny/CMakeLists.txt" : {
      "ObjectId" : "46f744e2e4a210c7bde4d10b6fcc3fb3ff024316",
      "LastModified" : "2017-07-20T11:28:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is NOT intended as a stand-alone build system! Instead, you should include this from the main CMakeLists of your project.\n\n# Make sure to link against Ogre, boost::filesystem and boost::wave.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sources of shiny\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sources of shiny.OgrePlatform\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "source/shiny/Editor/CMakeLists.txt" : {
      "ObjectId" : "eead159f08fb9897bccd104f6670eba0ddc4c9d0",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers that must be preprocessed\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Just to have them in the IDE's file explorer\n",
        "Line" : 38,
        "CharPositionInLine" : 27
      },
      "CommentCount" : 2
    },
    "source/tinyxml/CMakeLists.txt" : {
      "ObjectId" : "8352292208d887b5c9503b68e43d3aefc45d788f",
      "LastModified" : "2015-08-26T19:14:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create a static library\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 26
  },
  "ElapsedTime" : 6968
}