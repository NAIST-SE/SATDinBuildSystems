{
  "Repository" : "3372381",
  "Revision" : "HEAD",
  "ObjectId" : "8d2074be61be6189ff6860fc5da9c14496ea9cb3",
  "CommitTime" : "2019-02-21T06:15:46Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "614f4855e9c53bea4fa604371f0a4e07ade2c589",
      "LastModified" : "2018-10-13T00:53:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CEN64: Cycle-Accurate Nintendo 64 Emulator.\n\n# Copyright (C) 2015, Tyler J. Stachecki.\n\n#\n\n# This file is subject to the terms and conditions defined in\n\n# 'LICENSE', which is part of this source code package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Needed for signal.h on OS X.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If using GCC, configure it accordingly.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include architecture-specify machinery.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#    if (${GCC_MACHINE} MATCHES \"i.86.*\" OR ${GCC_MACHINE} MATCHES \"x86.*\")\n\n#      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ffixed-xmm8 -ffixed-xmm9 -ffixed-xmm10\")\n\n#      set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ffixed-xmm11 -ffixed-xmm12 -ffixed-xmm13 -ffixed-xmm14 -ffixed-xmm15\")\n\n#    endif (${GCC_MACHINE} MATCHES \"i.86.*\" OR ${GCC_MACHINE} MATCHES \"x86.*\")\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set architecture-independent flags.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Enable link time optimization on recent versions.\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Enable \"unsafe\" loop optimizations on recent versions.\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Check for undefined behaviour when debugging.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Use fat LTO objects.\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Check for const-correctness.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# If using Clang, configure it accordingly.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Include architecture-specify machinery.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Set architecture-independent flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# If using ICC, configure it accordingly.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set architecture-independent flags.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# If using MSVC, configure it accordingly.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Are you kidding me? Really?\n",
        "Line" : 216,
        "CharPositionInLine" : 28
      },
      "18" : {
        "Text" : "# Print out MMIO register accesses?\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Use VR4300's busy-wait-detection feature?\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build RelWithDebInfo by default so builds are fast out of the box\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Glob all the files together.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# Create lists of files.\n\n#\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# Build OS_SOURCES list.\n\n#\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# Glob all the files together.\n\n#\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# Configure the common header.\n\n#\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# Create the executable.\n\n#\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "cmake/Modules/FindIconv.cmake" : {
      "ObjectId" : "951b5bdf521202bd1448006aef1ff5246858f6c6",
      "LastModified" : "2017-03-08T18:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Iconv\n\n# Once done this will define\n\n#\n\n#  ICONV_FOUND - system has Iconv\n\n#  ICONV_INCLUDE_DIR - the Iconv include directory\n\n#  ICONV_LIBRARIES - Link these to use Iconv\n\n#  ICONV_SECOND_ARGUMENT_IS_CONST - the second argument for iconv() is const\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindOpenGLXQuartz.cmake" : {
      "ObjectId" : "cceaf261a4b45fd48766459e8be4010e194a128d",
      "LastModified" : "2017-03-08T18:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds OpenGL for XQuartz on OSX. Sets the same flags as the default\n\n# FindOpenGL.cmake module. Necessary because the default module will\n\n# only find the system OpenGL framework, which does not work with\n\n# XQuartz.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Toolchains/mingw64-i686.cmake" : {
      "ObjectId" : "078c96ffbc370745430d04ede8758bbefff06b25",
      "LastModified" : "2017-03-08T18:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For cross-compiling CEN64 with mingw64-i686.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Toolchains/mingw64-x86_64.cmake" : {
      "ObjectId" : "fcebb27e61ed01976e9dab1f3ff02237495d3619",
      "LastModified" : "2017-03-08T18:18:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For cross-compiling CEN64 with mingw64-x86_64.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Toolchains/osxcross-x86_64.cmake" : {
      "ObjectId" : "43463b38a5a560bc87978bf14f8b03e50533fedd",
      "LastModified" : "2017-03-19T02:16:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For cross-compiling CEN64 with osxcross (x86_64).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "debugger/cen64d.pro" : {
      "ObjectId" : "4c0b2ebbb15c276df4dbe2a098bade3676d68b0e",
      "LastModified" : "2017-03-19T02:16:35Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#\n\n# cen64d.pro: CEN64 qmake file.\n\n#\n\n# CEN64D: Cycle-Accurate Nintendo 64 Debugger.\n\n# Copyright (C) 2015, Tyler J. Stachecki.\n\n#\n\n# This file is subject to the terms and conditions defined in\n\n# 'LICENSE', which is part of this source code package.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 6,
    "QMAKE" : 1
  },
  "ElapsedTime" : 1113
}