{
  "Repository" : "3947583",
  "Revision" : "HEAD",
  "ObjectId" : "92ffbe4dd6d1b1a1c034a3b301f820d9020c4eab",
  "CommitTime" : "2019-01-14T08:25:59Z",
  "Files" : {
    "cpp_tests/source/CMakeLists.txt" : {
      "ObjectId" : "040d5e374e30777c1bdfc8bf54bc2838e253fc78",
      "LastModified" : "2015-11-26T13:27:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if not specified by user, the standard build type is release\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cmake_policy(SET CMP0015 NEW)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add and compile the gtest library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the pele include directory\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# build the pele library\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get all the source files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#target_link_libraries(test_main gcov)\n\n#target_link_libraries(pele_lib gcov)\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cpp_tests/source/CMakeModules/CodeCoverage.cmake" : {
      "ObjectId" : "b8f5ce043fb9a4c96f644aee6c09bb6a9f73acd1",
      "LastModified" : "2014-12-01T15:28:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage: \n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#  \n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 84,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors. \n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 99,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 103,
        "CharPositionInLine" : 9
      },
      "10" : {
        "Text" : "# Setup target\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 124,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 130,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 141,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 145,
        "CharPositionInLine" : 9
      },
      "19" : {
        "Text" : "# Run tests\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Running gcovr\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 164,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 23
    },
    "cpp_tests/source/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "4b42396f4b6bc5a1f97cba85141dbea28d1f1b0f",
      "LastModified" : "2015-11-26T13:27:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/Makefile" : {
      "ObjectId" : "a83154a21613e3722d8314674eb8cb656acfd209",
      "LastModified" : "2015-11-26T13:27:53Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/new_potential/fortran_iso_c_bindings/Makefile" : {
      "ObjectId" : "56c3f25a1f9f100420247f6cebeb8cbd7d4bface",
      "LastModified" : "2014-12-01T15:28:02Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "playground/amber12/Makefile" : {
      "ObjectId" : "56c3f25a1f9f100420247f6cebeb8cbd7d4bface",
      "LastModified" : "2014-12-01T15:28:02Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "playground/native_code/CMakeLists.txt" : {
      "ObjectId" : "dfa1b8ced84cfdaac9f93d8c8b5d96f5d7103ad9",
      "LastModified" : "2014-12-01T15:28:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# So far build is with cmake.\n\n# run run_cython.sh to generate all interface files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#list( APPEND CMAKE_CXX_FLAGS \"-std=c++0x\" )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#file(GLOB sources include/)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Release comes with -O3 by default\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 4,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 2538
}