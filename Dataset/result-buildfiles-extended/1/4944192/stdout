{
  "Repository" : "4944192",
  "Revision" : "HEAD",
  "ObjectId" : "5f4b2a0abc3240eab6695223d91e7a2069780876",
  "CommitTime" : "2019-04-12T07:00:22Z",
  "Files" : {
    "3rd/CMakeLists.txt" : {
      "ObjectId" : "eb531bb7577d97f74e8eb65223503b815aafe409",
      "LastModified" : "2019-03-03T16:30:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# disable all warnings while compile sources in 3rd\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add C++ wrapper for Lua include files\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# wxSQLite3 security ext doesn't require C 99 for MSVC\n",
        "Line" : 199,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 3
    },
    "CMakeLists.txt" : {
      "ObjectId" : "ebdfbb3f79836f822ea949d29e700ca6d5e0f625",
      "LastModified" : "2019-03-30T21:51:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get the latest version tag\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# MMEX uses semantic versioning Ref: http://semver.org\n\n#\n\n# PROJECT VERSION - Format: MAJOR.MINOR.PATCH-UNSTABLE\n\n# Update the version definition for the PROJECT as follows:\n\n# 1. MAJOR version when incompatible API changes are made.\n\n# 2. MINOR version adding functionality in a backwards-compatible manner.\n\n# 3. PATCH version makeing backwards-compatible bug fixes.\n\n# 4. UNSTABLE = alpha, alpha.1, beta, beta.4, rc, rc.3\n\n#    - used as additional version suffix, must be unset for stable version\n\n# ---------------------------------------------------------------------------\n\n# By setting the application version here, CMake will transfer the variable\n\n# values to the corresponding variable names in the following files:\n\n# ./src/versions.h\n\n# ./resources/mmex.rc\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Name of the resulted executable binary\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find Git commit details to put into versions.h later\n\n# Get the current working branch\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get the latest abbreviated commit hash of the working branch\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Get the latest commit date of the working branch\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# define shortcut\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Detect Linux distribution (if possible)\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# --------- Set compiler parameters ---------\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# force libc++, not libstdc++ for Xcode 10\n\n# https://developer.apple.com/documentation/xcode_release_notes/xcode_10_release_notes#3035631\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# try to use clcache/ccache to speed up builds\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# --------- cmake --grapgviz settings ---------\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# --------- Set various location ---------\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Preparing for configure icons\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Setting path to icon\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# --------- wxWidgets dependency ---------\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# FindwxWidgets.cmake module will be fixed in CMake 3.14.0\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# use static libs in place of dynamic if using static wxMac\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# --------- curl dependency ---------\n\n# curl version >=7.57 can have config files\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# curl 7.62 removed support for COMPONENTS\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# CURL_STATICLIB is missing for curl versions <7.61.1\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# CMake <3.12 workaround\n",
        "Line" : 287,
        "CharPositionInLine" : 12
      },
      "23" : {
        "Text" : "# --------- Collect sources and targets ---------\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Tuning for VisualStudio IDE ##\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Subdirectories with targets ##\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Tuning for VisualStudio IDE ##\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# --------- Install ---------\n\n# Before moving to INSTALL commands for macOS bundle this needs to be set\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Configure variables that are substituted into the plist\n\n# https://cmake.org/cmake/help/latest/prop_tgt/MACOSX_BUNDLE_INFO_PLIST.html\n\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html\n",
        "Line" : 381,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Set the path to the plist template\n",
        "Line" : 394,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Besides normal installable version, for windows the portable\n\n# version needs additionall files\n",
        "Line" : 400,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# add shared wxWidgets DLLs\n",
        "Line" : 408,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# DLL filenames are different for different versions\n\n# see https://github.com/wxWidgets/wxWidgets/blob/master/build/tools/msvs/package.bat#L42\n",
        "Line" : 413,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# check custom build name vs original one\n",
        "Line" : 447,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# This may be required to run on old Windows version\n",
        "Line" : 465,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Following can be used for Debug builds, but\n\n# cannot be redistributed according to\n\n# https://www.visualstudio.com/productinfo/2017-redistribution-vs#visual-c-runtime-files\n\n# https://www.visualstudio.com/license-terms/distributable-code-microsoft-visual-studio-2015-rc-microsoft-visual-studio-2015-sdk-rc-includes-utilities-buildserver-files/#visual-c-runtime\n\n# https://docs.microsoft.com/cpp/ide/determining-which-dlls-to-redistribute\n\n# set(CMAKE_INSTALL_DEBUG_LIBRARIES ON)\n\n# set(CMAKE_INSTALL_DEBUG_LIBRARIES_ONLY ON)\n",
        "Line" : 468,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Help Files\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Resources\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# .desktop File\n",
        "Line" : 501,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Icons\n",
        "Line" : 507,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# --------- CPack ---------\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# TODO: do we package Debug builds with stripped binaries?\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# TODO: distribute dbg packages\n\n# set(CPACK_RPM_DEBUGINFO_PACKAGE ON)\n\n# set(CPACK_RPM_DEBUGINFO_FILE_NAME RPM-DEFAULT)\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# not working?\n",
        "Line" : 591,
        "CharPositionInLine" : 49
      },
      "44" : {
        "Text" : "# With using http://nsis.sourceforge.net/Main_Page\n",
        "Line" : 607,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Use dedicated tool to build Arch Linux package\n",
        "Line" : 624,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# allow use reserved for cpack package target\n",
        "Line" : 634,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# workarount for old CMake without DEB-DEFAULT/RPM-DEFAULT support\n",
        "Line" : 644,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# --------- Print summary after configuration stage ---------\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 49
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "b777bda76cb5178181aff9b293840d39b854afe6",
      "LastModified" : "2019-03-03T16:30:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# COMMAND ${GETTEXT_MSGMERGE_EXECUTABLE} --quiet --update --backup=none -s \"${POFile}\" ${MMEX_EXE}.pot\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# wxWidgets standard paths\n\n# https://github.com/wxWidgets/wxWidgets/blob/master/docs/doxygen/overviews/internationalization.h#L86\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#    set(MODir share/locale/${CurrentFile}/LC_MESSAGES)\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "b11c06ed0e9753cfd75d836efe3dde36fb30a059",
      "LastModified" : "2019-03-30T21:51:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# enable warnings while compile sources in src\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use UTF-8 for /source-charset and /execution-charset\n",
        "Line" : 21,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# use old pragma execution_character_set\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Pass version numbers to the sources\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Based on this http://stackoverflow.com/a/8294669\n\n# added solution to compile problems due to\n\n# conflict between winsock and winsock2\n\n# Partially reinvented fix from commit\n\n# commit 06accae1273e66ced469672151522e45eee685a9\n",
        "Line" : 353,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "util/FindwxWidgets.cmake" : {
      "ObjectId" : "b913c8d0e19111b426427d4c57623503090a71ed",
      "LastModified" : "2019-01-06T11:43:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindwxWidgets\n\n# -------------\n\n#\n\n# Find a wxWidgets (a.k.a., wxWindows) installation.\n\n#\n\n# This module finds if wxWidgets is installed and selects a default\n\n# configuration to use.  wxWidgets is a modular library.  To specify the\n\n# modules that you will use, you need to name them as components to the\n\n# package:\n\n#\n\n# find_package(wxWidgets COMPONENTS core base ... OPTIONAL_COMPONENTS net ...)\n\n#\n\n# There are two search branches: a windows style and a unix style.  For\n\n# windows, the following variables are searched for and set to defaults\n\n# in case of multiple choices.  Change them if the defaults are not\n\n# desired (i.e., these are the only variables you should change to\n\n# select a configuration):\n\n#\n\n# ::\n\n#\n\n#   wxWidgets_ROOT_DIR      - Base wxWidgets directory\n\n#                             (e.g., C:/wxWidgets-2.6.3).\n\n#   wxWidgets_LIB_DIR       - Path to wxWidgets libraries\n\n#                             (e.g., C:/wxWidgets-2.6.3/lib/vc_lib).\n\n#   wxWidgets_CONFIGURATION - Configuration to use\n\n#                             (e.g., msw, mswd, mswu, mswunivud, etc.)\n\n#   wxWidgets_EXCLUDE_COMMON_LIBRARIES\n\n#                           - Set to TRUE to exclude linking of\n\n#                             commonly required libs (e.g., png tiff\n\n#                             jpeg zlib regex expat).\n\n#\n\n#\n\n#\n\n# For unix style it uses the wx-config utility.  You can select between\n\n# debug/release, unicode/ansi, universal/non-universal, and\n\n# static/shared in the QtDialog or ccmake interfaces by turning ON/OFF\n\n# the following variables:\n\n#\n\n# ::\n\n#\n\n#   wxWidgets_USE_DEBUG\n\n#   wxWidgets_USE_UNICODE\n\n#   wxWidgets_USE_UNIVERSAL\n\n#   wxWidgets_USE_STATIC\n\n#\n\n#\n\n#\n\n# There is also a wxWidgets_CONFIG_OPTIONS variable for all other\n\n# options that need to be passed to the wx-config utility.  For example,\n\n# to use the base toolkit found in the /usr/local path, set the variable\n\n# (before calling the FIND_PACKAGE command) as such:\n\n#\n\n# ::\n\n#\n\n#   set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)\n\n#\n\n#\n\n#\n\n# The following are set after the configuration is done for both windows\n\n# and unix style:\n\n#\n\n# ::\n\n#\n\n#   wxWidgets_FOUND            - Set to TRUE if wxWidgets was found.\n\n#   wxWidgets_INCLUDE_DIRS     - Include directories for WIN32\n\n#                                i.e., where to find \"wx/wx.h\" and\n\n#                                \"wx/setup.h\"; possibly empty for unices.\n\n#   wxWidgets_LIBRARIES        - Path to the wxWidgets libraries.\n\n#   wxWidgets_LIBRARY_DIRS     - compile time link dirs, useful for\n\n#                                rpath on UNIX. Typically an empty string\n\n#                                in WIN32 environment.\n\n#   wxWidgets_DEFINITIONS      - Contains defines required to compile/link\n\n#                                against WX, e.g. WXUSINGDLL\n\n#   wxWidgets_DEFINITIONS_DEBUG- Contains defines required to compile/link\n\n#                                against WX debug builds, e.g. __WXDEBUG__\n\n#   wxWidgets_CXX_FLAGS        - Include dirs and compiler flags for\n\n#                                unices, empty on WIN32. Essentially\n\n#                                \"`wx-config --cxxflags`\".\n\n#   wxWidgets_USE_FILE         - Convenience include file.\n\n#\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    # Note that for MinGW users the order of libs is important!\n\n#    find_package(wxWidgets COMPONENTS gl core base OPTIONAL_COMPONENTS net)\n\n#    if(wxWidgets_FOUND)\n\n#      include(${wxWidgets_USE_FILE})\n\n#      # and for each of your dependent executable/library targets:\n\n#      target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\n\n#    endif()\n\n#\n\n#\n\n#\n\n# If wxWidgets is required (i.e., not an optional part):\n\n#\n\n# ::\n\n#\n\n#    find_package(wxWidgets REQUIRED gl core base OPTIONAL_COMPONENTS net)\n\n#    include(${wxWidgets_USE_FILE})\n\n#    # and for each of your dependent executable/library targets:\n\n#    target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# FIXME: check this and provide a correct sample usage...\n\n#        Remember to connect back to the upper text.\n\n# Sample usage with monolithic wx build:\n\n#\n\n#   find_package(wxWidgets COMPONENTS mono)\n\n#   ...\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTES\n\n#\n\n# This module has been tested on the WIN32 platform with wxWidgets\n\n# 2.6.2, 2.6.3, and 2.5.3. However, it has been designed to\n\n# easily extend support to all possible builds, e.g., static/shared,\n\n# debug/release, unicode, universal, multilib/monolithic, etc..\n\n#\n\n# If you want to use the module and your build type is not supported\n\n# out-of-the-box, please contact me to exchange information on how\n\n# your system is setup and I'll try to add support for it.\n\n#\n\n# AUTHOR\n\n#\n\n# Miguel A. Figueroa-Villanueva (miguelf at ieee dot org).\n\n# Jan Woetzel (jw at mip.informatik.uni-kiel.de).\n\n#\n\n# Based on previous works of:\n\n# Jan Woetzel (FindwxWindows.cmake),\n\n# Jorgen Bodde and Jerry Fath (FindwxWin.cmake).\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO/ideas\n\n#\n\n# (1) Option/Setting to use all available wx libs\n\n# In contrast to expert developer who lists the\n\n# minimal set of required libs in wxWidgets_USE_LIBS\n\n# there is the newbie user:\n\n#   - who just wants to link against WX with more 'magic'\n\n#   - doesn't know the internal structure of WX or how it was built,\n\n#     in particular if it is monolithic or not\n\n#   - want to link against all available WX libs\n\n# Basically, the intent here is to mimic what wx-config would do by\n\n# default (i.e., `wx-config --libs`).\n\n#\n\n# Possible solution:\n\n#   Add a reserved keyword \"std\" that initializes to what wx-config\n\n# would default to. If the user has not set the wxWidgets_USE_LIBS,\n\n# default to \"std\" instead of \"base core\" as it is now. To implement\n\n# \"std\" will basically boil down to a FOR_EACH lib-FOUND, but maybe\n\n# checking whether a minimal set was found.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FIXME: This and all the DBG_MSG calls should be removed after the\n\n# module stabilizes.\n\n#\n\n# Helper macro to control the debugging output globally. There are\n\n# two versions for controlling how verbose your output should be.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  message(STATUS\n\n#    \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  message(STATUS\n\n#    \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Clear return values in case the module is loaded more than once.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DEPRECATED: This is a patch to support the DEPRECATED use of\n\n# wxWidgets_USE_LIBS.\n\n#\n\n# If wxWidgets_USE_LIBS is set:\n\n# - if using <components>, then override wxWidgets_USE_LIBS\n\n# - else set wxWidgets_FIND_COMPONENTS to wxWidgets_USE_LIBS\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add the convenience use file if available.\n\n#\n\n# Get dir of this file which may reside in:\n\n# - CMAKE_MAKE_ROOT/Modules on CMake installation\n\n# - CMAKE_MODULE_PATH if user prefers his own specialized version\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Prefer an existing customized version, but the user might override\n\n# the FindwxWidgets module and not the UsewxWidgets one.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#=====================================================================\n\n# Determine whether unix or win32 paths should be used\n\n#=====================================================================\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#=====================================================================\n\n# WIN32_FIND_STYLE\n\n#=====================================================================\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Useful common wx libs needed by almost all components.\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# DEPRECATED: Use find_package(wxWidgets COMPONENTS mono) instead.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# this is default\n",
        "Line" : 229,
        "CharPositionInLine" : 47
      },
      "17" : {
        "Text" : "# Add the common (usually required libs) unless\n\n# wxWidgets_EXCLUDE_COMMON_LIBRARIES has been set.\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#-------------------------------------------------------------------\n\n# WIN32: Helper MACROS\n\n#-------------------------------------------------------------------\n\n#\n\n# Get filename components for a configuration. For example,\n\n#   if _CONFIGURATION = mswunivud, then _UNV=univ, _UCD=u _DBG=d\n\n#   if _CONFIGURATION = mswu,      then _UNV=\"\",   _UCD=u _DBG=\"\"\n\n#\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#\n\n# Find libraries associated to a configuration.\n\n#\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# FIXME: What if both regex libs are available. regex should be\n\n# found outside the loop and only wx${LIB}${_UCD}${_DBG}.\n\n# Find wxWidgets common libraries.\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# for regex\n",
        "Line" : 271,
        "CharPositionInLine" : 31
      },
      "22" : {
        "Text" : "# Find wxWidgets multilib base libraries.\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Find wxWidgets monolithic library.\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Find wxWidgets multilib libraries.\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#\n\n# Clear all library paths, so that FIND_LIBRARY refinds them.\n\n#\n\n# Clear a lib, reset its found flag, and mark as advanced.\n",
        "Line" : 343,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clear all debug or release library paths (arguments are \"d\" or \"\").\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Clear wxWidgets common libraries.\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Clear wxWidgets multilib base libraries.\n",
        "Line" : 359,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Clear wxWidgets monolithic library.\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Clear wxWidgets multilib libraries.\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Clear all wxWidgets debug libraries.\n",
        "Line" : 374,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Clear all wxWidgets release libraries.\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#\n\n# Set the wxWidgets_LIBRARIES variable.\n\n# Also, Sets output variable wxWidgets_FOUND to FALSE if it fails.\n\n#\n",
        "Line" : 383,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#-------------------------------------------------------------------\n\n# WIN32: Start actual work.\n\n#-------------------------------------------------------------------\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Look for an installation tree.\n",
        "Line" : 438,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# WX 2.6.x\n",
        "Line" : 444,
        "CharPositionInLine" : 123
      },
      "37" : {
        "Text" : "# If wxWidgets_ROOT_DIR changed, clear lib dir.\n",
        "Line" : 487,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Select one default tree inside the already determined wx tree.\n\n# Prefer static/shared order usually consistent with build\n\n# settings.\n",
        "Line" : 496,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# prefer shared\n",
        "Line" : 523,
        "CharPositionInLine" : 73
      },
      "40" : {
        "Text" : "# prefer shared\n\n# prefer shared\n",
        "Line" : 524,
        "CharPositionInLine" : 70
      },
      "41" : {
        "Text" : "# prefer static\n",
        "Line" : 544,
        "CharPositionInLine" : 73
      },
      "42" : {
        "Text" : "# prefer static\n\n# prefer static\n",
        "Line" : 545,
        "CharPositionInLine" : 70
      },
      "43" : {
        "Text" : "# If wxWidgets_LIB_DIR changed, clear all libraries.\n",
        "Line" : 558,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# If building shared libs, define WXUSINGDLL to use dllimport.\n",
        "Line" : 566,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# Search for available configuration types.\n",
        "Line" : 572,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# If the selected configuration wasn't found force the default\n\n# one. Otherwise, use it but still force a refresh for\n\n# updating the doc string with the current list of available\n\n# configurations.\n",
        "Line" : 586,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# If release config selected, and both release/debug exist.\n",
        "Line" : 598,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# If the option exists (already in cache), force it false.\n",
        "Line" : 604,
        "CharPositionInLine" : 10
      },
      "49" : {
        "Text" : "# Get configuration parameters from the name.\n",
        "Line" : 612,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# Set wxWidgets lib setup include directory.\n",
        "Line" : 615,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# Set wxWidgets main include directory.\n",
        "Line" : 624,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# Find wxWidgets libraries.\n",
        "Line" : 632,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# Settings for requested libs (i.e., include dir, libraries, etc.).\n",
        "Line" : 638,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# Add necessary definitions for unicode builds\n",
        "Line" : 641,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# Add necessary definitions for debug builds\n",
        "Line" : 646,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "#=====================================================================\n\n# UNIX_FIND_STYLE\n\n#=====================================================================\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#-----------------------------------------------------------------\n\n# UNIX: Helper MACROS\n\n#-----------------------------------------------------------------\n\n#\n\n# Set the default values based on \"wx-config --selected-config\".\n\n#\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "#\n\n# Query a boolean configuration option to determine if the system\n\n# has both builds available. If so, provide the selection option\n\n# to the user.\n\n#\n",
        "Line" : 688,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# If option exists (already in cache), force to available one.\n",
        "Line" : 713,
        "CharPositionInLine" : 8
      },
      "60" : {
        "Text" : "#\n\n# Set wxWidgets_SELECT_OPTIONS to wx-config options for selecting\n\n# among multiple builds.\n\n#\n",
        "Line" : 724,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "#-----------------------------------------------------------------\n\n# UNIX: Start actual work.\n\n#-----------------------------------------------------------------\n\n# Support cross-compiling, only search in the target platform.\n",
        "Line" : 742,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# get defaults based on \"wx-config --selected-config\"\n",
        "Line" : 755,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# for each option: if both builds are available, provide option\n",
        "Line" : 758,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# process selection to set wxWidgets_SELECT_OPTIONS\n",
        "Line" : 764,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# run the wx-config program to get cxxflags\n",
        "Line" : 768,
        "CharPositionInLine" : 6
      },
      "66" : {
        "Text" : "# parse definitions and include dirs from cxxflags\n\n#   drop the -D and -I prefixes\n",
        "Line" : 786,
        "CharPositionInLine" : 8
      },
      "67" : {
        "Text" : "# include directory\n",
        "Line" : 791,
        "CharPositionInLine" : 12
      },
      "68" : {
        "Text" : "# compile definition\n",
        "Line" : 794,
        "CharPositionInLine" : 12
      },
      "69" : {
        "Text" : "# run the wx-config program to get the libs\n\n# - NOTE: wx-config doesn't verify that the libs requested exist\n\n#         it just produces the names. Maybe a TRY_COMPILE would\n\n#         be useful here...\n",
        "Line" : 811,
        "CharPositionInLine" : 6
      },
      "70" : {
        "Text" : "# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)\n",
        "Line" : 847,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "# When using wx-config in MSYS, the include paths are UNIX style paths which may or may\n\n# not work correctly depending on you MSYS/MinGW configuration.  CMake expects native\n\n# paths internally.\n",
        "Line" : 864,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "#=====================================================================\n\n# Neither UNIX_FIND_STYLE, nor WIN32_FIND_STYLE\n\n#=====================================================================\n",
        "Line" : 914,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Check that all libraries are present, as wx-config does not check it\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Check if a specific version was requested by find_package().\n",
        "Line" : 960,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Debug output:\n",
        "Line" : 984,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#=====================================================================\n\n#=====================================================================\n",
        "Line" : 992,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#=====================================================================\n\n# Macros for use in wxWidgets apps.\n\n# - This module will not fail to find wxWidgets based on the code\n\n#   below. Hence, it's required to check for validity of:\n\n#\n\n# wxWidgets_wxrc_EXECUTABLE\n\n#=====================================================================\n",
        "Line" : 1003,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Resource file compiler.\n",
        "Line" : 1011,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "#\n\n# WX_SPLIT_ARGUMENTS_ON(<keyword> <left> <right> <arg1> <arg2> ...)\n\n#\n\n# Sets <left> and <right> to contain arguments to the left and right,\n\n# respectively, of <keyword>.\n\n#\n\n# Example usage:\n\n#  function(WXWIDGETS_ADD_RESOURCES outfiles)\n\n#    WX_SPLIT_ARGUMENTS_ON(OPTIONS wxrc_files wxrc_options ${ARGN})\n\n#    ...\n\n#  endfunction()\n\n#\n\n#  WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o file.C)\n\n#\n\n# NOTE: This is a generic piece of code that should be renamed to\n\n# SPLIT_ARGUMENTS_ON and put in a file serving the same purpose as\n\n# FindPackageStandardArgs.cmake. At the time of this writing\n\n# FindQt4.cmake has a QT4_EXTRACT_OPTIONS, which I basically copied\n\n# here a bit more generalized. So, there are already two find modules\n\n# using this approach.\n\n#\n",
        "Line" : 1018,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# FIXME: Document that the input variables will be cleared.\n\n#list(APPEND ${_leftvar}  \"\")\n\n#list(APPEND ${_rightvar} \"\")\n",
        "Line" : 1040,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "#\n\n# WX_GET_DEPENDENCIES_FROM_XML(\n\n#   <depends>\n\n#   <match_pattern>\n\n#   <clean_pattern>\n\n#   <xml_contents>\n\n#   <depends_path>\n\n#   )\n\n#\n\n# FIXME: Add documentation here...\n\n#\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# make the file have an absolute path\n",
        "Line" : 1090,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# append file to dependency list\n",
        "Line" : 1095,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "#\n\n# WXWIDGETS_ADD_RESOURCES(<sources> <xrc_files>\n\n#                         OPTIONS <options> [NO_CPP_CODE])\n\n#\n\n# Adds a custom command for resource file compilation of the\n\n# <xrc_files> and appends the output files to <sources>.\n\n#\n\n# Example usages:\n\n#   WXWIDGETS_ADD_RESOURCES(sources xrc/main_frame.xrc)\n\n#   WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o altname.cxx)\n\n#\n",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Parse files for dependencies.\n",
        "Line" : 1116,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# All files have absolute paths or paths relative to the location\n\n# of the rc file.\n",
        "Line" : 1125,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# get bitmap/bitmap2 files\n",
        "Line" : 1129,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# get url files\n",
        "Line" : 1138,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# get wxIcon files\n",
        "Line" : 1147,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "#\n\n# Parse options.\n\n#\n\n# If NO_CPP_CODE option specified, then produce .xrs file rather\n\n# than a .cpp file (i.e., don't add the default --cpp-code option).\n",
        "Line" : 1157,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# wxrc's default output filename for cpp code.\n",
        "Line" : 1165,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# wxrc's default output filename for xrs file.\n",
        "Line" : 1169,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# Get output name for use in ADD_CUSTOM_COMMAND.\n\n# - short option scanning\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "#list(REMOVE_AT rc_options ${index} ${filename_index})\n",
        "Line" : 1179,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# - long option scanning\n",
        "Line" : 1181,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "#string(REGEX REPLACE \"--output=[^;]*;?\" \"\" rc_options \"${rc_options}\")\n\n#string(REGEX REPLACE \";$\" \"\" rc_options \"${rc_options}\")\n",
        "Line" : 1186,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Add generated header to output file list.\n",
        "Line" : 1198,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# Add generated file to output file list.\n",
        "Line" : 1210,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 99
    },
    "util/toolchain-linux-armhf.cmake" : {
      "ObjectId" : "68a1ad922bd9b0eee7c474d10575ffd24ee034d4",
      "LastModified" : "2019-03-03T16:30:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "util/toolchain-linux-x86.cmake" : {
      "ObjectId" : "bbe71095912eb603ab928e8e9158f8c78f6a6818",
      "LastModified" : "2019-03-03T16:30:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 7
  },
  "ElapsedTime" : 1842
}