{
  "Repository" : "9969857",
  "Revision" : "HEAD",
  "ObjectId" : "bbfe75644653bc95fe06b633a1c350646542d1dc",
  "CommitTime" : "2019-04-18T13:31:45Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "32ebe6ae4efa251f2ed07ad8b2b800c734646475",
      "LastModified" : "2019-02-26T18:47:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# NOTE: being C++, these only affect build of the tools, not the liballocs core.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ltdl complains if I don't set these....\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#tools/objdumpallocs-llvm\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# massive HACKs for ifacetypes\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#x86_emulate.o\n",
        "Line" : 68,
        "CharPositionInLine" : 40
      },
      "5" : {
        "Text" : "# pkg-config doesn't understand PKG_CXXFLAGS, but I'm buggered\n\n# if I'm going to have my Makefiles use _CFLAGS to mean _CXXFLAGS.\n\n# So, if we find we have _CFLAGS set for these, either from pkg.m4\n\n# or because pkg.m4 told the user to set this var, and if we *don't*\n\n# have _CXXFLAGS for these things, propagate. Only one of the USER_*_CFLAGS\n\n# and *_CFLAGS should be non-empty. Note that if we got this far,\n\n# we *must* have a _CFLAGS, even if the user (sanely) didn't call it that,\n\n# because pkg-config will have complained if we didn't fake it up.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#tools/gold-plugin.so: $(lib_LTLIBRARIES)\n\n#\techo \"gold-plugin.so: creating convenience link from $(abs_builddir)/.libs to $(top_builddir)\"; \\\n#            rm -f $(top_builddir)/tools/gold-plugin.so ; \\\n#            test -e $(abs_builddir)/tools/.libs/gold-plugin.so && \\\n#            cd $(top_builddir) && \\\n#            $(LN_S) $(abs_builddir)/tools/.libs/gold-plugin.so tools/gold-plugin.so || true\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n#all-am: tools/gold-plugin.so\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# dummy target for now\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "contrib/Makefile" : {
      "ObjectId" : "8c920741f8f315bb0bd40bc9abdcdcb80c847ae4",
      "LastModified" : "2018-12-09T16:21:43Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# trap-syscalls's and libdlbind's contribs need to be able to find librunt\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# things we need to build:\n\n# - libdwarfpp\n\n# - libcxxgen\n\n# - libantlr3cxx\n\n# - trap-syscalls's own contrib      (this needs antlr, I think)\n\n# - trap-syscalls/libsystrap    (*not* the main trap-syscalls, which has other deps...)\n\n# - dwarfidl (ignore its contrib build script)\n\n# - libdlbind\n\n# - binutils-gdb?\n\n#\n\n# things that just sit here, but we have to set config for:\n\n# - libmallochooks\n\n#\n\n# contrib things that live elsewhere\n\n# - everything in trap-syscalls/contrib\n\n# - cil (in liballocs/tools/lang/c)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------antlr things\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# HACK: if the patch fails, it's probably because we've already applied it in an earlier failed run of these rules\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# ----------------------------other libs that are autotools'd\n\n# ----------------------------libdwarfpp\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------------------------libcxxgen\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----------------------------libantlr3cxx\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ----------------------------dwarfidl\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ----------------------------trap-syscalls\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ----------------------------libdlbind\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ----------------------------malloc-hooks\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ----------------------------optional: LLVM (Chris Diamand's fork, for now)\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# use -fuse-ld=gold because ld.bfd exhausts memory on my not-short-of-memory machine\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# FIXME: clean target\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# this cmake argument doesn't work\n\n# -DEXTRA_LINK_FLAGS=\"-fuse-ld=gold\" ..\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ----------------------------config.mk\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "lib/Makefile" : {
      "ObjectId" : "8b976b41b9b3885261b6bb79bb8bfe08444dac17",
      "LastModified" : "2017-05-11T16:50:39Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Makefile" : {
      "ObjectId" : "008781941ec1517e173b2faf1102d2470a84b27a",
      "LastModified" : "2019-03-01T14:56:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# HACK: -flto doesn't seem to work with our ld -r -generated malloc_hooks_preload_fast\n\n# object. It complains about __next_malloc_hook et al being undefined, even though\n\n# we --defsym'd them and they are clearly defined in the .o file.\n\n# So don't use that rule. We use the preprocessor (above) to define __next_hook_*.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# STRANGE: this\n\n#DEFAULT_EXTRA_CFLAGS := -flto -O4 # note! no -DNDEBUG\n\n# is slower than the following (4.61, 4.54, 4.60)\n\n#DEFAULT_EXTRA_CFLAGS := -O0 -finline-functions\n\n# ; what about this? it's the same or slightly slower\n\n#DEFAULT_EXTRA_CFLAGS := -O4 -flto -finline-functions -DNDEBUG\n\n# what about this one? makes little difference\n\n#DEFAULT_EXTRA_CFLAGS := -O4 -flto -DNDEBUG\n\n# what about this one? same or slightly slower\n\n#DEFAULT_EXTRA_CFLAGS := -Os -flto -DNDEBUG\n\n# what about this one? slightly faster\n\n#DEFAULT_EXTRA_CFLAGS := -O0 -DNDEBUG\n\n# what about this one?  among the fastest (4.52, 4.50, 4.51)\n\n#DEFAULT_EXTRA_CFLAGS := -O3 -DNDEBUG\n\n# really double-check that the following isn't faster? nope (4.64, 4.64, 4.59)\n\n#DEFAULT_EXTRA_CFLAGS := -O4 -flto -DNDEBUG\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Summary of the above: -O3 -DNDEBUG is the fastest\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#-DTRACE_DEEP_HEAP_INDEX\n",
        "Line" : 44,
        "CharPositionInLine" : 71
      },
      "4" : {
        "Text" : "# regardless of fast/non-fast CFLAGS, link with -Wl,-O2 -flto\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# until binutils bug 13600 is fixed, gold is the linker we need\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We define our own malloc_usable_size to catch the alloca case.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# $(warning CFLAGS is $(CFLAGS))\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Don't use allocscc to compile liballocs!\n\n# if CC is allocscc, unset it\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# GRR. We can't include the Makerules now that we need to build the hooks by \n\n# two different methods. Also, we can't get dependency information about these\n\n# files from the makefiles. So we always want to run these rules. HMM.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# HACK: move to libsystrap\n",
        "Line" : 90,
        "CharPositionInLine" : 38
      },
      "11" : {
        "Text" : "# We put dlmalloc in a library so that --exclude-libs=dlmalloc.a will hide its symbols\n\n# in our output .so, so that they don't override anything in the rest of the program.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# important for _etext in preload hooks\n",
        "Line" : 108,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# NOTE: we need to defsym to the __wrap_* functions, because of the way\n\n# --wrap and --defsym interact: references generated by --defsym are *not*\n\n# wrapped, unlike references that were in the file already.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# never link this into a preload lib! nor include in _preload.a!\n",
        "Line" : 133,
        "CharPositionInLine" : 30
      },
      "15" : {
        "Text" : "# HOOKS_*_OBJS are defined at the top\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# build src backwards \n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# patsubst %.c,$(dir %.c).$(patsubst %.c,%.d$(notdir %.c).d,$(C_SRC))\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# $(warning DEPS are $(DEPS))\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# FIXME: make complains \"target `allocators/.alloca.d' doesn't match the target pattern\"\n\n# if we prefix with C_DEPS here. \n\n# Actually it's a bit weird (but nice) that it's happy to expand \"$(call dep_fname,%.c)\".\n\n#$(C_DEPS): \n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# hooks have either fpic or fPIC\n",
        "Line" : 166,
        "CharPositionInLine" : 118
      },
      "21" : {
        "Text" : "# hooks have either fpic or fPIC\n",
        "Line" : 168,
        "CharPositionInLine" : 117
      },
      "22" : {
        "Text" : "# HACK override the rule for *.c -> *.o as a possible fix for debug info non-findy (does it work?)\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# FIXME: in preload case, can be clever with stubs? \n\n# HMM. We still have to --wrap the allocation funcs, but we could put the wrappers in the preload lib...\n\n# BUT since they're generated per-build from the LIBALLOCS_ALLOC_FNS content, this doesn't work --\n\n# stick with stubs!\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# What libraries do we build?\n\n# \n\n# liballocs_preload.so -- the main binary\n\n# liballocs_preload.a  -- in archive form, for extending libraries to link in (libcrunch)\n\n# liballocs.so         -- nasty linker script for clients, working around uniqueness problem\n\n# liballocs_nonshared.a -- just uniqtypes; linker script points to this, s.t. client exes (-lallocs) get this linked in statically (uniqtypes)\n\n# liballocs.a          -- the main binary usable for statically-linked exes -- no uniqueness problem\n\n# liballocs_pic.a         -- PIC non-preload archive, used for testing (_test.so)\n\n# liballocs_test.so       -- designed to be dlopen()able, to run self-tests in constructors\n\n# liballocs_dummyweaks.so -- non-client exes, that contain instrumented code, get -l this (but ideally would eliminate)\n\n# liballocs_dummyweaks.o  -- non-client solibs, that contain instrumented code, get this linked in (i.e. avoiding a .so dependency; this is okay for solibs because LD_PRELOAD overrides them)\n\n#\n\n# What do client solibs get?\n\n# Easiest is just to treat them like exes. They will get their own copy \n\n# of the basic uniqtypes, but this will get uniqued as appropriate.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOTE that our use of __private_malloc, a defsym'd symbol,\n\n# used to provoke a gold bug when we were generating protected-visibility\n\n# undefineds that were bound to it. That bug has been reported (#24286) and\n\n# I've removed the protected undefineds (which came from libmallochooks\n\n# template code). So we are still committed to using gold to link liballocs\n\n# owing to binutils issue 13600 is fixed (see elsewhere in this file).\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# HACK: would ideally eliminate \"dummyweaks\" shared object if ld provided a \"--dt-useful\" option.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# have to preload the hooks yourself if you want them to hook!\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# liballocs.so is a linker script, so don't remove it\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "tests/Makefile" : {
      "ObjectId" : "d46c6eef8f79275baecbfb8d574b0339b27406e4",
      "LastModified" : "2017-12-20T18:10:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# HMM -- this is causing us to re-add the +='d stuff in each recursive make.\n\n# can we get away without this?\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some cases are expected to fail\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# special: this failing case aborts, for now\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Some cases are expected to abort\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Most test cases should output a liballocs summary in which \n\n# -- zero queries aborted\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# disabled cases\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# disabled plugin-hello while expected to fail\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Some cases are special and require only an exit status of zero\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# run the test case with itself as input\n",
        "Line" : 146,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# generic clean rule that we can run from test dirs too (with $(MAKE) -f ../Makefile)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# (delete anything whose name is a prefix of a .c file's and doesn't contain a dot)\n",
        "Line" : 161,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 11,
      "Errorlog" : "line 63:30 token recognition error at: '\\f'\nline 87:30 token recognition error at: '\\f'\n"
    },
    "tests/section-group/Makefile" : {
      "ObjectId" : "717b174dd6181dc834f3a7cde8849bc85641f382",
      "LastModified" : "2014-02-28T12:36:25Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tools/lang/Makefile" : {
      "ObjectId" : "c9e3a5a3568e2e736bb219ff8f8b95163375a13c",
      "LastModified" : "2015-11-25T18:11:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# nothing\n",
        "Line" : 3,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 1
    },
    "tools/lang/c/Makefile" : {
      "ObjectId" : "7553a779b2340998827f6f20154c4d79212bb852",
      "LastModified" : "2016-09-19T15:25:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# build cilallocs first\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for testing\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\t$(MAKE) -C cil clean\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# .PHONY: distclean\n\n# distclean: clean\n\n# \t$(MAKE) -C cil distclean\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tools/lang/c/src/Makefile" : {
      "ObjectId" : "94fe111fba5434dd8e42fdc9cf520886f8943f59",
      "LastModified" : "2019-01-08T20:41:46Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# while we're using old libdwarfpp -- FIXME\n",
        "Line" : 9,
        "CharPositionInLine" : 41
      },
      "1" : {
        "Text" : "# use the pkg-config vars\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for config.h\n",
        "Line" : 15,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : "#lower-typenames\n",
        "Line" : 24,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "# GAH... for some reason GNU Make needs this rule to avoid trying\n\n# to link the .o using $(CC) instead of $(CXX).\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#$(ALLOCSTOOL)/liballocstool.a\n",
        "Line" : 45,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "#$(ALLOCSTOOL)/liballocstool.a\n",
        "Line" : 46,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 7
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 8,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1723
}