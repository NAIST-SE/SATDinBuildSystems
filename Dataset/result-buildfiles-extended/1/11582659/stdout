{
  "Repository" : "11582659",
  "Revision" : "HEAD",
  "ObjectId" : "61f7e7716c6743b16051d8c3ea4cea3b27d0197b",
  "CommitTime" : "2019-04-14T11:05:07Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "411ae1ed56bdb001aa8dfccaf2ea78669b81e1ea",
      "LastModified" : "2019-04-10T03:48:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build file list for OpenAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C pre-process, not C++\n",
        "Line" : 69,
        "CharPositionInLine" : 15
      },
      "2" : {
        "Text" : "# This option is mainly for static linking OpenAL Soft into another project\n\n# that already defines the IDs. It is up to that project to ensure all\n\n# required IDs are defined.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# QNX's gcc do not uses /usr/include and /usr/lib pathes by default\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check if _POSIX_C_SOURCE and _XOPEN_SOURCE needs to be set for POSIX functions\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Set defines for large file support. Don't set this for Android targets. See:\n\n# https://android-developers.googleblog.com/2017/09/introducing-android-native-development.html\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# C99 has restrict, but C++ does not, so we can only utilize __restrict.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Some systems may need libatomic for C11 atomic functions to work\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include liblog for Android logging\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add definitions, compiler switches, etc.\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We want RelWithDebInfo to actually include debug stuff (define _DEBUG\n\n# instead of NDEBUG)\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Set visibility/export options if available\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Yes GCC, really don't accept visibility modes you don't support\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Some systems need libm for some of the following math functions to work\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for the dlopen API (for dynamicly loading backend libs)\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check for a cpuid intrinsic\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check if we have Windows headers\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We need pthreads outside of Windows\n",
        "Line" : 549,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Some systems need pthread_np.h to get recursive mutexes\n",
        "Line" : 554,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Check for a 64-bit type\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Check for SSE+SSE2 support\n",
        "Line" : 744,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Check for ARM Neon support\n",
        "Line" : 802,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Default backends, always available\n",
        "Line" : 851,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Check ALSA backend\n",
        "Line" : 858,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Check OSS backend\n",
        "Line" : 875,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Check Solaris backend\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Check SndIO backend\n",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Check QSA backend\n",
        "Line" : 927,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Check Windows-only backends\n",
        "Line" : 944,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Check MMSystem backend\n",
        "Line" : 952,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Check DSound backend\n",
        "Line" : 967,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Check for WASAPI backend\n",
        "Line" : 980,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Check PortAudio backend\n",
        "Line" : 1004,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Check PulseAudio backend\n",
        "Line" : 1021,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Check JACK backend\n",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Check CoreAudio backend\n",
        "Line" : 1055,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Some versions of OSX may need the AudioToolbox framework. Add it if\n\n# it's found.\n",
        "Line" : 1071,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# Check for OpenSL (Android) backend\n",
        "Line" : 1088,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Check for SDL2 backend\n",
        "Line" : 1107,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Off by default, since it adds a runtime dependency\n",
        "Line" : 1111,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Optionally enable the Wave Writer backend\n",
        "Line" : 1125,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# This is always available\n",
        "Line" : 1133,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Get the current working branch and its latest abbreviated commit hash\n",
        "Line" : 1139,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Needed for openal.pc.in\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# If this is already a linker flag, or is a full path+file, add it\n\n# as-is. Otherwise, it's a name intended to be dressed as -lname.\n",
        "Line" : 1243,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# End configuration\n",
        "Line" : 1253,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Add a static library with common functions used by multiple targets\n",
        "Line" : 1263,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Build main library\n",
        "Line" : 1274,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Make sure to compile the common code with PIC, since it'll be linked into\n\n# shared libs that needs it.\n",
        "Line" : 1282,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Install alsoft.conf configuration file\n",
        "Line" : 1417,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Install HRTF definitions\n",
        "Line" : 1426,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Install AmbDec presets\n",
        "Line" : 1436,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Add a static library with common functions used by multiple targets\n",
        "Line" : 1520,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 53
    },
    "cmake/CheckFileOffsetBits.cmake" : {
      "ObjectId" : "1dc154e489b716b872c11755d854da957cb8317a",
      "LastModified" : "2014-08-20T20:31:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the _FILE_OFFSET_BITS macro is needed for large files\n\n# CHECK_FILE_OFFSET_BITS()\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n# Copyright (c) 2009, Chris Robinson\n\n#\n\n# Redistribution and use is allowed according to the terms of the LGPL license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/CheckSharedFunctionExists.cmake" : {
      "ObjectId" : "c691fa9c9ea4b2f568ddf6d9f775e9c18eaab5df",
      "LastModified" : "2016-11-22T22:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if a symbol exists as a function, variable, or macro\n\n# CHECK_SYMBOL_EXISTS(<symbol> <files> <variable>)\n\n#\n\n# Check that the <symbol> is available after including given header\n\n# <files> and store the result in a <variable>.  Specify the list\n\n# of files in one argument as a semicolon-separated list.\n\n#\n\n# If the header files define the symbol as a macro it is considered\n\n# available and assumed to work.  If the header files declare the\n\n# symbol as a function or variable then the symbol must also be\n\n# available for linking.  If the symbol is a type or enum value\n\n# it will not be recognized (consider using CheckTypeSize or\n\n# CheckCSourceCompiles).\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindALSA.cmake" : {
      "ObjectId" : "519304d6322113f05a736f6ff3f2b98f5e422e2a",
      "LastModified" : "2014-04-23T09:12:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find alsa\n\n# Find the alsa libraries (asound)\n\n#\n\n#  This module defines the following variables:\n\n#     ALSA_FOUND       - True if ALSA_INCLUDE_DIR & ALSA_LIBRARY are found\n\n#     ALSA_LIBRARIES   - Set when ALSA_LIBRARY is found\n\n#     ALSA_INCLUDE_DIRS - Set when ALSA_INCLUDE_DIR is found\n\n#\n\n#     ALSA_INCLUDE_DIR - where to find asoundlib.h, etc.\n\n#     ALSA_LIBRARY     - the asound library\n\n#     ALSA_VERSION_STRING - the version of alsa found (since CMake 2.8.8)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009-2011 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ALSA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindAudioIO.cmake" : {
      "ObjectId" : "f0f8b2a59aff1f6e9987ef5d80f70da0b4008016",
      "LastModified" : "2014-04-23T09:12:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find AudioIO includes and libraries\n\n#\n\n#   AUDIOIO_FOUND        - True if AUDIOIO_INCLUDE_DIR is found\n\n#   AUDIOIO_INCLUDE_DIRS - Set when AUDIOIO_INCLUDE_DIR is found\n\n#\n\n#   AUDIOIO_INCLUDE_DIR - where to find sys/audioio.h, etc.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindDSound.cmake" : {
      "ObjectId" : "4078deb5ed7ed8cbecac8a3acd127d157c7a9c8d",
      "LastModified" : "2016-11-22T22:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find DirectSound includes and libraries\n\n#\n\n#   DSOUND_FOUND        - True if DSOUND_INCLUDE_DIR & DSOUND_LIBRARY are found\n\n#   DSOUND_LIBRARIES    - Set when DSOUND_LIBRARY is found\n\n#   DSOUND_INCLUDE_DIRS - Set when DSOUND_INCLUDE_DIR is found\n\n#\n\n#   DSOUND_INCLUDE_DIR - where to find dsound.h, etc.\n\n#   DSOUND_LIBRARY     - the dsound library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DSOUND_INCLUDE_DIR\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DSOUND_LIBRARY\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindFFmpeg.cmake" : {
      "ObjectId" : "c489c2c3cd73e68b8276f57f99cade382408226c",
      "LastModified" : "2017-02-11T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: ts=2 sw=2\n\n# - Try to find the required ffmpeg components(default: AVFORMAT, AVUTIL, AVCODEC)\n\n#\n\n# Once done this will define\n\n#  FFMPEG_FOUND         - System has the all required components.\n\n#  FFMPEG_INCLUDE_DIRS  - Include directory necessary for using the required components headers.\n\n#  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.\n\n#  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.\n\n#\n\n# For each of the components it will additionaly set.\n\n#   - AVCODEC\n\n#   - AVDEVICE\n\n#   - AVFORMAT\n\n#   - AVUTIL\n\n#   - POSTPROC\n\n#   - SWSCALE\n\n#   - SWRESAMPLE\n\n# the following variables will be defined\n\n#  <component>_FOUND        - System has <component>\n\n#  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers\n\n#  <component>_LIBRARIES    - Link these to use <component>\n\n#  <component>_DEFINITIONS  - Compiler switches required for using <component>\n\n#  <component>_VERSION      - The components version\n\n#\n\n# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2011, Michael Jansen, <kde@michael-jansen.biz>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n### Macro: set_component_found\n\n#\n\n# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.\n\n#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(STATUS \"  - ${_component} found.\")\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# message(STATUS \"  - ${_component} not found.\")\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#\n\n### Macro: find_component\n\n#\n\n# Checks for the given component by invoking pkgconfig and then looking up the libraries and\n\n# include directories.\n\n#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check for all possible components.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check if the required components were found and add their stuff to the FFMPEG_* vars.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# message(STATUS \"Required component ${_component} present.\")\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# message(STATUS \"Required component ${_component} missing.\")\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Add libz if it exists (needed for static ffmpeg builds)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Build the include path and library list with duplicates removed.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# cache the vars.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now set the noncached _FOUND vars for the components.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Compile the list of required vars\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Give a nice error message if some of the required vars are missing.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/FindJACK.cmake" : {
      "ObjectId" : "b72fe3f9a91ed55050e41719d8d9486abd210c1b",
      "LastModified" : "2017-02-11T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find JACK\n\n# Find the JACK libraries\n\n#\n\n#  This module defines the following variables:\n\n#     JACK_FOUND        - True if JACK_INCLUDE_DIR & JACK_LIBRARY are found\n\n#     JACK_INCLUDE_DIRS - where to find jack.h, etc.\n\n#     JACK_LIBRARIES    - the jack library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009-2011 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set JACK_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindMySOFA.cmake" : {
      "ObjectId" : "a1d57446784b8566607725ccfc386f2720be989e",
      "LastModified" : "2019-01-22T21:17:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MySOFA\n\n# Find the MySOFA libraries\n\n#\n\n#  This module defines the following variables:\n\n#     MYSOFA_FOUND        - True if MYSOFA_INCLUDE_DIR & MYSOFA_LIBRARY are found\n\n#     MYSOFA_INCLUDE_DIRS - where to find mysofa.h, etc.\n\n#     MYSOFA_LIBRARIES    - the MySOFA library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009-2011 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MYSOFA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindOSS.cmake" : {
      "ObjectId" : "feffb451674d24ac95fd1653bd41246afb3727a4",
      "LastModified" : "2017-09-16T05:22:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OSS includes\n\n#\n\n#   OSS_FOUND        - True if OSS_INCLUDE_DIR is found\n\n#   OSS_INCLUDE_DIRS - Set when OSS_INCLUDE_DIR is found\n\n#   OSS_LIBRARIES    - Set when OSS_LIBRARY is found\n\n#\n\n#   OSS_INCLUDE_DIR - where to find sys/soundcard.h, etc.\n\n#   OSS_LIBRARY     - where to find libossaudio (optional).\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindPortAudio.cmake" : {
      "ObjectId" : "fad2313df834759e4d83d0feb18abb5178b434f1",
      "LastModified" : "2017-02-11T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PortAudio includes and libraries\n\n#\n\n#   PORTAUDIO_FOUND        - True if PORTAUDIO_INCLUDE_DIR & PORTAUDIO_LIBRARY\n\n#                            are found\n\n#   PORTAUDIO_LIBRARIES    - Set when PORTAUDIO_LIBRARY is found\n\n#   PORTAUDIO_INCLUDE_DIRS - Set when PORTAUDIO_INCLUDE_DIR is found\n\n#\n\n#   PORTAUDIO_INCLUDE_DIR - where to find portaudio.h, etc.\n\n#   PORTAUDIO_LIBRARY     - the portaudio library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindPulseAudio.cmake" : {
      "ObjectId" : "1f6f843a1d8d5402504d06d07cd67f1cecfc5b2d",
      "LastModified" : "2017-02-11T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PulseAudio includes and libraries\n\n#\n\n#   PULSEAUDIO_FOUND        - True if PULSEAUDIO_INCLUDE_DIR &\n\n#                             PULSEAUDIO_LIBRARY are found\n\n#   PULSEAUDIO_LIBRARIES    - Set when PULSEAUDIO_LIBRARY is found\n\n#   PULSEAUDIO_INCLUDE_DIRS - Set when PULSEAUDIO_INCLUDE_DIR is found\n\n#\n\n#   PULSEAUDIO_INCLUDE_DIR - where to find pulse/pulseaudio.h, etc.\n\n#   PULSEAUDIO_LIBRARY     - the pulse library\n\n#   PULSEAUDIO_VERSION_STRING - the version of PulseAudio found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindQSA.cmake" : {
      "ObjectId" : "0ad1fd43893f0dbd6b5935b9f8b17994a9570c4e",
      "LastModified" : "2017-02-11T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find QSA includes and libraries\n\n#\n\n#   QSA_FOUND        - True if QSA_INCLUDE_DIR & QSA_LIBRARY are found\n\n#   QSA_LIBRARIES    - Set when QSA_LIBRARY is found\n\n#   QSA_INCLUDE_DIRS - Set when QSA_INCLUDE_DIR is found\n\n#\n\n#   QSA_INCLUDE_DIR - where to find sys/asoundlib.h, etc.\n\n#   QSA_LIBRARY     - the asound library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only check for QSA on QNX, because it conflicts with ALSA.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "e808d006154fb5b159d51245ce9dcf8e2e8530b8",
      "LastModified" : "2018-03-30T01:10:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_CORE_LIBRARY in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_CORE_LIBRARY to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 84,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 85,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_CORE_LIBRARY is ${SDL2_CORE_LIBRARY}\")\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "cmake/FindSDL_sound.cmake" : {
      "ObjectId" : "5557b55b1587a293afc2c41f57f7f3625b20c2b9",
      "LastModified" : "2017-02-11T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locates the SDL_sound library\n\n#\n\n# This module depends on SDL being found and\n\n# must be called AFTER FindSDL.cmake or FindSDL2.cmake is called.\n\n#\n\n# This module defines\n\n#  SDL_SOUND_INCLUDE_DIR, where to find SDL_sound.h\n\n#  SDL_SOUND_FOUND, if false, do not try to link to SDL_sound\n\n#  SDL_SOUND_LIBRARIES, this contains the list of libraries that you need\n\n#    to link against. This is a read-only variable and is marked INTERNAL.\n\n#  SDL_SOUND_EXTRAS, this is an optional variable for you to add your own\n\n#    flags to SDL_SOUND_LIBRARIES. This is prepended to SDL_SOUND_LIBRARIES.\n\n#    This is available mostly for cases this module failed to anticipate for\n\n#    and you must add additional flags. This is marked as ADVANCED.\n\n#  SDL_SOUND_VERSION_STRING, human-readable string containing the version of SDL_sound\n\n#\n\n# This module also defines (but you shouldn't need to use directly)\n\n#   SDL_SOUND_LIBRARY, the name of just the SDL_sound library you would link\n\n#   against. Use SDL_SOUND_LIBRARIES for you link instructions and not this one.\n\n# And might define the following as needed\n\n#   MIKMOD_LIBRARY\n\n#   MODPLUG_LIBRARY\n\n#   OGG_LIBRARY\n\n#   VORBIS_LIBRARY\n\n#   SMPEG_LIBRARY\n\n#   FLAC_LIBRARY\n\n#   SPEEX_LIBRARY\n\n#\n\n# Typically, you should not use these variables directly, and you should use\n\n# SDL_SOUND_LIBRARIES which contains SDL_SOUND_LIBRARY and the other audio libraries\n\n# (if needed) to successfully compile on your system.\n\n#\n\n# Created by Eric Wing.\n\n# This module is a bit more complicated than the other FindSDL* family modules.\n\n# The reason is that SDL_sound can be compiled in a large variety of different ways\n\n# which are independent of platform. SDL_sound may dynamically link against other 3rd\n\n# party libraries to get additional codec support, such as Ogg Vorbis, SMPEG, ModPlug,\n\n# MikMod, FLAC, Speex, and potentially others.\n\n# Under some circumstances which I don't fully understand,\n\n# there seems to be a requirement\n\n# that dependent libraries of libraries you use must also be explicitly\n\n# linked against in order to successfully compile. SDL_sound does not currently\n\n# have any system in place to know how it was compiled.\n\n# So this CMake module does the hard work in trying to discover which 3rd party\n\n# libraries are required for building (if any).\n\n# This module uses a brute force approach to create a test program that uses SDL_sound,\n\n# and then tries to build it. If the build fails, it parses the error output for\n\n# known symbol names to figure out which libraries are needed.\n\n#\n\n# Responds to the $SDLDIR and $SDLSOUNDDIR environmental variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR used in building SDL.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL_LIBRARY or SDL2_LIBRARY to override this selection or set the CMake\n\n# environment CMAKE_INCLUDE_PATH to modify the search paths.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find SDL_sound.h\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake is giving me problems using TRY_COMPILE with the CMAKE_FLAGS\n\n# for the :STRING syntax if I have multiple values contained in a\n\n# single variable. This is a problem for the SDL2_LIBRARY variable\n\n# because it does just that. When I feed this variable to the command,\n\n# only the first value gets the appropriate modifier (e.g. -I) and\n\n# the rest get dropped.\n\n# To get multiple single variables to work, I must separate them with a \"\\;\"\n\n# I could go back and modify the FindSDL2.cmake module, but that's kind of painful.\n\n# The solution would be to try something like:\n\n# set(SDL2_TRY_COMPILE_LIBRARY_LIST \"${SDL2_TRY_COMPILE_LIBRARY_LIST}\\;${CMAKE_THREAD_LIBS_INIT}\")\n\n# Instead, it was suggested on the mailing list to write a temporary CMakeLists.txt\n\n# with a temporary test project and invoke that with TRY_COMPILE.\n\n# See message thread \"Figuring out dependencies for a library in order to build\"\n\n# 2005-07-16\n\n#     try_compile(\n\n#             MY_RESULT\n\n#             ${CMAKE_BINARY_DIR}\n\n#             ${PROJECT_SOURCE_DIR}/DetermineSoundLibs.c\n\n#             CMAKE_FLAGS\n\n#                     -DINCLUDE_DIRECTORIES:STRING=${SDL2_INCLUDE_DIR}\\;${SDL_SOUND_INCLUDE_DIR}\n\n#                     -DLINK_LIBRARIES:STRING=${SDL_SOUND_LIBRARY}\\;${SDL2_LIBRARY}\n\n#             OUTPUT_VARIABLE MY_OUTPUT\n\n#     )\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# To minimize external dependencies, create a sdlsound test program\n\n# which will be used to figure out if additional link dependencies are\n\n# required for the link phase.\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Calling\n\n# target_link_libraries(DetermineSoundLibs \"${SDL_SOUND_LIBRARY} ${SDL2_LIBRARY})\n\n# causes problems when SDL2_LIBRARY looks like\n\n# /Library/Frameworks/SDL2.framework;-framework Cocoa\n\n# The ;-framework Cocoa seems to be confusing CMake once the OS X\n\n# framework support was added. I was told that breaking up the list\n\n# would fix the problem.\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Keep trying to build a temp project until we find all missing libs.\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# message(\"TMP_TRY_LIBS ${TMP_TRY_LIBS}\")\n",
        "Line" : 168,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Write the CMakeLists.txt and test project\n\n# Weird, this is still sketchy. If I don't quote the variables\n\n# in the TARGET_LINK_LIBRARIES, I seem to loose everything\n\n# in the SDL2_LIBRARY string after the \"-framework\".\n\n# But if I quote the stuff in INCLUDE_DIRECTORIES, it doesn't work.\n",
        "Line" : 170,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# message(\"${MY_RESULT}\")\n\n# message(${MY_OUTPUT})\n",
        "Line" : 190,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# I expect that MPGLIB, VOC, WAV, AIFF, and SHN are compiled in statically.\n\n# I think Timidity is also compiled in statically.\n\n# I've never had to explcitly link against Quicktime, so I'll skip that for now.\n",
        "Line" : 194,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : "# Find libmath\n",
        "Line" : 198,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# Find MikMod\n",
        "Line" : 208,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# Find ModPlug\n",
        "Line" : 229,
        "CharPositionInLine" : 16
      },
      "14" : {
        "Text" : "# Find Ogg and Vorbis\n",
        "Line" : 250,
        "CharPositionInLine" : 16
      },
      "15" : {
        "Text" : "# Find SMPEG\n",
        "Line" : 310,
        "CharPositionInLine" : 16
      },
      "16" : {
        "Text" : "# Find FLAC\n",
        "Line" : 332,
        "CharPositionInLine" : 16
      },
      "17" : {
        "Text" : "# Hmmm...Speex seems to depend on Ogg. This might be a problem if\n\n# the TRY_COMPILE attempt gets blocked at SPEEX before it can pull\n\n# in the Ogg symbols. I'm not sure if I should duplicate the ogg stuff\n\n# above for here or if two ogg entries will screw up things.\n",
        "Line" : 354,
        "CharPositionInLine" : 16
      },
      "18" : {
        "Text" : "# Find OGG (needed for Speex)\n\n# We might have already found Ogg for Vorbis, so skip it if so.\n",
        "Line" : 377,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 19
    },
    "cmake/FindSoundIO.cmake" : {
      "ObjectId" : "10450254d213fd602682f8b579e57752644da701",
      "LastModified" : "2017-02-11T20:56:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find SoundIO (sndio) includes and libraries\n\n#\n\n#   SOUNDIO_FOUND        - True if SOUNDIO_INCLUDE_DIR & SOUNDIO_LIBRARY are\n\n#                          found\n\n#   SOUNDIO_LIBRARIES    - Set when SOUNDIO_LIBRARY is found\n\n#   SOUNDIO_INCLUDE_DIRS - Set when SOUNDIO_INCLUDE_DIR is found\n\n#\n\n#   SOUNDIO_INCLUDE_DIR - where to find sndio.h, etc.\n\n#   SOUNDIO_LIBRARY     - the sndio library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindWindowsSDK.cmake" : {
      "ObjectId" : "007c9b1722864f41250cb4faf9fb0a0de5adb098",
      "LastModified" : "2018-11-27T05:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Windows SDK aka Platform SDK\n\n#\n\n# Relevant Wikipedia article: http://en.wikipedia.org/wiki/Microsoft_Windows_SDK\n\n#\n\n# Pass \"COMPONENTS tools\" to ignore Visual Studio version checks: in case\n\n# you just want the tool binaries to run, rather than the libraries and headers\n\n# for compiling.\n\n#\n\n# Variables:\n\n#  WINDOWSSDK_FOUND - if any version of the windows or platform SDK was found that is usable with the current version of visual studio\n\n#  WINDOWSSDK_LATEST_DIR\n\n#  WINDOWSSDK_LATEST_NAME\n\n#  WINDOWSSDK_FOUND_PREFERENCE - if we found an entry indicating a \"preferred\" SDK listed for this visual studio version\n\n#  WINDOWSSDK_PREFERRED_DIR\n\n#  WINDOWSSDK_PREFERRED_NAME\n\n#\n\n#  WINDOWSSDK_DIRS - contains no duplicates, ordered most recent first.\n\n#  WINDOWSSDK_PREFERRED_FIRST_DIRS - contains no duplicates, ordered with preferred first, followed by the rest in descending recency\n\n#\n\n# Functions:\n\n#  windowssdk_name_lookup(<directory> <output variable>) - Find the name corresponding with the SDK directory you pass in, or\n\n#     NOTFOUND if not recognized. Your directory must be one of WINDOWSSDK_DIRS for this to work.\n\n#\n\n#  windowssdk_build_lookup(<directory> <output variable>) - Find the build version number corresponding with the SDK directory you pass in, or\n\n#     NOTFOUND if not recognized. Your directory must be one of WINDOWSSDK_DIRS for this to work.\n\n#\n\n#  get_windowssdk_from_component(<file or dir> <output variable>) - Given a library or include dir,\n\n#     find the Windows SDK root dir corresponding to it, or NOTFOUND if unrecognized.\n\n#\n\n#  get_windowssdk_library_dirs(<directory> <output variable>) - Find the architecture-appropriate\n\n#     library directories corresponding to the SDK directory you pass in (or NOTFOUND if none)\n\n#\n\n#  get_windowssdk_library_dirs_multiple(<output variable> <directory> ...) - Find the architecture-appropriate\n\n#     library directories corresponding to the SDK directories you pass in, in order, skipping those not found. NOTFOUND if none at all.\n\n#     Good for passing WINDOWSSDK_DIRS or WINDOWSSDK_DIRS to if you really just want a file and don't care where from.\n\n#\n\n#  get_windowssdk_include_dirs(<directory> <output variable>) - Find the\n\n#     include directories corresponding to the SDK directory you pass in (or NOTFOUND if none)\n\n#\n\n#  get_windowssdk_include_dirs_multiple(<output variable> <directory> ...) - Find the\n\n#     include directories corresponding to the SDK directories you pass in, in order, skipping those not found. NOTFOUND if none at all.\n\n#     Good for passing WINDOWSSDK_DIRS or WINDOWSSDK_DIRS to if you really just want a file and don't care where from.\n\n#\n\n# Requires these CMake modules:\n\n#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)\n\n#\n\n# Original Author:\n\n# 2012 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2012.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# pre-output\n",
        "Line" : 57,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "# pre-output\n",
        "Line" : 58,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# pre-output\n",
        "Line" : 59,
        "CharPositionInLine" : 26
      },
      "4" : {
        "Text" : "# pre-output\n",
        "Line" : 60,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "# search parameters\n",
        "Line" : 61,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "# search parameters\n",
        "Line" : 62,
        "CharPositionInLine" : 18
      },
      "7" : {
        "Text" : "# Windows 10 Version 1809\n\n# Windows 10 Version 1803 (April 2018 Update)\n\n# Windows 10 Version 1709 (Fall Creators Update)\n\n# Windows 10 Version 1703 (Creators Update)\n",
        "Line" : 76,
        "CharPositionInLine" : 19
      },
      "8" : {
        "Text" : "# Redstone aka Win10 1607 \"Anniversary Update\"\n\n# TH2 aka Win10 1511\n\n# Win10 RTM\n\n# just ucrt\n",
        "Line" : 80,
        "CharPositionInLine" : 14
      },
      "9" : {
        "Text" : "# Appends to the three main pre-output lists used only if the path exists\n\n# and is not already in the list.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Path invalid - do not add\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Path already in list - do not add\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Not yet in the list, so we'll add it\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Appends to the \"preferred SDK\" lists only if the path exists\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Path invalid - do not add\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Path already in list - do not add\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Not yet in the list, so we'll add it\n",
        "Line" : 138,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Just in case we somehow missed it:\n",
        "Line" : 142,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# Given a version like v7.0A, looks for an SDK in the registry under \"Microsoft SDKs\".\n\n# If the given version might be in both HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\n\n# and HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows Kits\\\\Installed Roots aka \"Windows Kits\",\n\n# use this macro first, since these registry keys usually have more information.\n\n#\n\n# Pass a \"default\" build number as an extra argument in case we can't find it.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Default build number passed as extra argument\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# See if the registry holds a Microsoft-mutilated, err, designated, product name\n\n# (just using get_filename_component to execute the registry lookup)\n",
        "Line" : 162,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Got a product name\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# try for a version to augment our name\n\n# (just using get_filename_component to execute the registry lookup)\n",
        "Line" : 172,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# Got a version\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# and it's not an invalid one with two dots in it:\n\n# use to override the default build\n",
        "Line" : 180,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# Got a version that's not already in the name, let's use it to improve our name.\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Given a name for identification purposes, the build number, and a key (technically a \"value name\")\n\n# corresponding to a Windows SDK packaged as a \"Windows Kit\", look for it\n\n# in HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows Kits\\\\Installed Roots\n\n# Note that the key or \"value name\" tends to be something weird like KitsRoot81 -\n\n# no easy way to predict, just have to observe them in the wild.\n\n# Doesn't hurt to also try _winsdk_check_microsoft_sdks_registry for these:\n\n# sometimes you get keys in both parts of the registry (in the wow64 portion especially),\n\n# and the non-\"Windows Kits\" location is often more descriptive.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Given a name for identification purposes and the build number\n\n# corresponding to a Windows 10 SDK packaged as a \"Windows Kit\", look for it\n\n# in HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows Kits\\\\Installed Roots\n\n# Doesn't hurt to also try _winsdk_check_microsoft_sdks_registry for these:\n\n# sometimes you get keys in both parts of the registry (in the wow64 portion especially),\n\n# and the non-\"Windows Kits\" location is often more descriptive.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# not found\n",
        "Line" : 218,
        "CharPositionInLine" : 11
      },
      "29" : {
        "Text" : "# Given a name for indentification purposes, the build number, and the associated package GUID,\n\n# look in the registry under both HKLM and HKCU in \\\\SOFTWARE\\\\Microsoft\\\\MicrosoftSDK\\\\InstalledSDKs\\\\\n\n# for that guid and the SDK it points to.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###\n\n# Detect toolchain information: to know whether it's OK to use Vista+ only SDKs\n\n###\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# VC 10 and older has broad target support\n",
        "Line" : 242,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# VC 11 by default targets Vista and later only, so we can add a few more SDKs that (might?) only work on vista+\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# This is the XP-compatible v110+ toolset\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# This is the VS2010/VS2008 toolset\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# OK, we're VC11 or newer and not using a backlevel or XP-compatible toolset.\n\n# These versions have no XP (and possibly Vista pre-SP1) support\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "###\n\n# MSVC version checks - keeps messy conditionals in one place\n\n# (messy because of _WINDOWSSDK_IGNOREMSVC)\n\n###\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Newer than VS .NET/VS Toolkit 2003\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# VS2005/2008\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# VS2013+\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "###\n\n# START body of find module\n\n###\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Newer than VS .NET/VS Toolkit 2003\n",
        "Line" : 292,
        "CharPositionInLine" : 30
      },
      "42" : {
        "Text" : "###\n\n# Look for \"preferred\" SDKs\n\n###\n",
        "Line" : 293,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# Environment variable for SDK dir\n",
        "Line" : 297,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Per-user current Windows SDK for VS2005/2008\n",
        "Line" : 303,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# System-wide current Windows SDK for VS2005/2008\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "###\n\n# Begin the massive list of SDK searching!\n\n###\n",
        "Line" : 316,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# These require at least Visual Studio 2013 (VC12)\n",
        "Line" : 320,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Windows Software Development Kit (SDK) for Windows 10\n\n# Several different versions living in the same directory - if nothing else we can assume RTM (10240)\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# vista-only and 2013+\n",
        "Line" : 330,
        "CharPositionInLine" : 9
      },
      "50" : {
        "Text" : "# Included in Visual Studio 2013\n\n# Includes the v120_xp toolset\n",
        "Line" : 332,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# Windows Software Development Kit (SDK) for Windows 8.1\n\n# http://msdn.microsoft.com/en-gb/windows/desktop/bg162891\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# vista-only and 2013+\n",
        "Line" : 341,
        "CharPositionInLine" : 9
      },
      "53" : {
        "Text" : "# Included in Visual Studio 2012\n",
        "Line" : 344,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Microsoft Windows SDK for Windows 8 and .NET Framework 4.5\n\n# This is the first version to also include the DirectX SDK\n\n# http://msdn.microsoft.com/en-US/windows/desktop/hh852363.aspx\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# vista-only\n",
        "Line" : 352,
        "CharPositionInLine" : 9
      },
      "56" : {
        "Text" : "# Included with VS 2012 Update 1 or later\n\n# Introduces v110_xp toolset\n",
        "Line" : 354,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# Microsoft Windows SDK for Windows 7 and .NET Framework 4\n\n# http://www.microsoft.com/downloads/en/details.aspx?FamilyID=6b6c21d2-2006-4afa-9702-529fa782d63b\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# vista-only\n",
        "Line" : 361,
        "CharPositionInLine" : 9
      },
      "59" : {
        "Text" : "# Included with VS 2010\n",
        "Line" : 363,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# Windows SDK for Windows 7 and .NET Framework 3.5 SP1\n\n# Works with VC9\n\n# http://www.microsoft.com/en-us/download/details.aspx?id=18950\n",
        "Line" : 366,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# Two versions call themselves \"v6.1\":\n\n# Older:\n\n# Windows Vista Update & .NET 3.0 SDK\n\n# http://www.microsoft.com/en-us/download/details.aspx?id=14477\n",
        "Line" : 371,
        "CharPositionInLine" : 1
      },
      "62" : {
        "Text" : "# Newer:\n\n# Windows Server 2008 & .NET 3.5 SDK\n\n# may have broken VS9SP1? they recommend v7.0 instead, or a KB...\n\n# http://www.microsoft.com/en-us/download/details.aspx?id=24826\n",
        "Line" : 376,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# Included in VS 2008\n",
        "Line" : 382,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# Microsoft Windows Software Development Kit for Windows Vista and .NET Framework 3.0 Runtime Components\n\n# http://blogs.msdn.com/b/stanley/archive/2006/11/08/microsoft-windows-software-development-kit-for-windows-vista-and-net-framework-3-0-runtime-components.aspx\n",
        "Line" : 385,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# Let's not forget the Platform SDKs, which sometimes are useful!\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "###\n\n# Finally, look for \"preferred\" SDKs\n\n###\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Newer than VS .NET/VS Toolkit 2003\n",
        "Line" : 398,
        "CharPositionInLine" : 30
      },
      "68" : {
        "Text" : "# Environment variable for SDK dir\n",
        "Line" : 401,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# Per-user current Windows SDK for VS2005/2008\n",
        "Line" : 407,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# System-wide current Windows SDK for VS2005/2008\n",
        "Line" : 413,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# If we found something...\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Fallback, in case no preference found.\n",
        "Line" : 451,
        "CharPositionInLine" : 1
      },
      "73" : {
        "Text" : "# If we found indications of a user preference...\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Internal: Architecture-appropriate library directory names.\n",
        "Line" : 476,
        "CharPositionInLine" : 1
      },
      "75" : {
        "Text" : "# Only supported in Win10 SDK and up.\n",
        "Line" : 479,
        "CharPositionInLine" : 3
      },
      "76" : {
        "Text" : "# what the WDK for Win8+ calls this architecture\n",
        "Line" : 480,
        "CharPositionInLine" : 28
      },
      "77" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n",
        "Line" : 482,
        "CharPositionInLine" : 30
      },
      "78" : {
        "Text" : "# what the architecture used to be called\n",
        "Line" : 483,
        "CharPositionInLine" : 25
      },
      "79" : {
        "Text" : "# what the WDK for Win8+ calls this architecture\n",
        "Line" : 484,
        "CharPositionInLine" : 26
      },
      "80" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n",
        "Line" : 488,
        "CharPositionInLine" : 30
      },
      "81" : {
        "Text" : "# what the architecture used to be called\n",
        "Line" : 489,
        "CharPositionInLine" : 27
      },
      "82" : {
        "Text" : "# what the WDK for Win8+ calls this architecture\n",
        "Line" : 490,
        "CharPositionInLine" : 26
      },
      "83" : {
        "Text" : "# what the architecture used to be called in oldest SDKs\n\n# what the architecture used to be called\n\n# what the WDK for Win8+ calls this architecture\n",
        "Line" : 492,
        "CharPositionInLine" : 26
      },
      "84" : {
        "Text" : "# If we don't have any \"parent directory\" items...\n",
        "Line" : 505,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# Fail.\n",
        "Line" : 511,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# SDKs like 7.1A\n",
        "Line" : 517,
        "CharPositionInLine" : 28
      },
      "87" : {
        "Text" : "# just because some SDKs have x86 dir and root dir\n",
        "Line" : 518,
        "CharPositionInLine" : 25
      },
      "88" : {
        "Text" : "# Win2k min requirement\n\n# WinXP min requirement\n",
        "Line" : 519,
        "CharPositionInLine" : 29
      },
      "89" : {
        "Text" : "# Win Server 2003 min requirement\n",
        "Line" : 521,
        "CharPositionInLine" : 30
      },
      "90" : {
        "Text" : "# Win Vista (\"Long Horn\") min requirement\n",
        "Line" : 523,
        "CharPositionInLine" : 33
      },
      "91" : {
        "Text" : "# Win 7 min requirement\n",
        "Line" : 525,
        "CharPositionInLine" : 34
      },
      "92" : {
        "Text" : "# Win Vista (\"Long Horn\") min requirement\n",
        "Line" : 528,
        "CharPositionInLine" : 7
      },
      "93" : {
        "Text" : "# Win 7 min requirement\n\n# Win 8 min requirement\n",
        "Line" : 529,
        "CharPositionInLine" : 8
      },
      "94" : {
        "Text" : "# Win 8.1 min requirement\n",
        "Line" : 531,
        "CharPositionInLine" : 11
      },
      "95" : {
        "Text" : "# Look for WDF libraries in Win10+ SDK\n",
        "Line" : 541,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Look in each Win10+ SDK version for the components\n",
        "Line" : 549,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Check to see if a library actually exists here.\n",
        "Line" : 557,
        "CharPositionInLine" : 3
      },
      "98" : {
        "Text" : "# Check to see if a header file actually exists here.\n",
        "Line" : 587,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 99
    },
    "native-tools/CMakeLists.txt" : {
      "ObjectId" : "5e816bba7018fe5e5fece072b560c493793c068e",
      "LastModified" : "2018-11-27T05:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enforce no dressing for executable names, so the main script can find it\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Avoid configuration-dependent subdirectories while building with Visual Studio\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "utils/alsoft-config/CMakeLists.txt" : {
      "ObjectId" : "67cc44c7acef7f19f76b30096fcc17b5c4e378d1",
      "LastModified" : "2018-11-27T05:39:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Need Qt 4.8.0 or newer for the iconset theme attribute to work\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "version.cmake" : {
      "ObjectId" : "af7ff0a67e5524fdded7b70904dd16d5bf3a9e89",
      "LastModified" : "2018-11-27T05:39:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 20
  },
  "ElapsedTime" : 2084
}