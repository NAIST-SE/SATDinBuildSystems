{
  "Repository" : "41921336",
  "Revision" : "HEAD",
  "ObjectId" : "571d360eb2d825bdceb79ab994cb83f07761121f",
  "CommitTime" : "2018-09-03T05:23:47Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "29028f624fea002cb03b01e7b7dfc78594be7a86",
      "LastModified" : "2018-09-03T05:23:47Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright 2015-2016 Tony Dark Industries LLC.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Edit this release and run \"make release\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# label-schema spec: http://label-schema.org/rc1/\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CONTAINER_VERSION  = $(shell \\cat ./VERSION | awk '{print $1}')\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#################################################################################\n\n# DOCKER_RUN_ARGS   = \\\n# \t-e FLIGHT_DIRECTOR_URL \\\n# \t-e FD_BEHAVE_DEFAULT_IMAGE \\\n# \t-e PYTHONUNBUFFERED=1 \\\n# \t-e DCOS_USER \\\n# \t-e DCOS_PASSWORD \\\n# \t-v ~/.dcos:/root/.dcos \\\n# \t-v ~/.docker:/root/.docker \\\n# \t-v $$PWD/junit-results:/junit-results \\\n# \t-v $$PWD:/usr/src/app \\\n# \t-i\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# # if this session isn't interactive, then we don't want to allocate a\n\n# # TTY, which would fail, but if it is interactive, we do want to attach\n\n# # so that the user can send e.g. ^C through.\n\n# INTERACTIVE := $(shell [ -t 0 ] && echo 1 || echo 0)\n\n# ifeq ($(INTERACTIVE), 1)\n\n# \tDOCKER_RUN_ARGS += -t\n\n# endif\n\n# ifneq ($(JENKINS_URL), )\n\n# \tDOCKER_RUN_ARGS += -e BEHAVE_FORMATTER=plain.color\n\n# endif\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# MKDIR = mkdir\n\n# PARALLEL = parallel\n\n# PARALLEL_ARGS = -j 3 -v --results=outdir\n\n#################################################################################\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOTE: DEFAULT_GOAL\n\n# source: (GNU Make - Other Special Variables) https://www.gnu.org/software/make/manual/html_node/Special-Variables.html\n\n# Sets the default goal to be used if no\n\n# targets were specified on the command\n\n# line (see Arguments to Specify the Goals).\n\n# The .DEFAULT_GOAL variable allows you to\n\n# discover the current default goal,\n\n# restart the default goal selection\n\n# algorithm by clearing its value,\n\n# or to explicitly set the default goal.\n\n# The following example illustrates these cases:\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# [-s] per-test capturing method: one of fd|sys|no. shortcut for --capture=no.\n\n# [--tb short] traceback print mode (auto/long/short/line/native/no).\n\n# [--cov-config=path]     config file for coverage, default: .coveragerc\n\n# [--cov=[path]] coverage reporting with distributed testing support. measure coverage for filesystem path (multi-allowed)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# coverage flags, these all come from here\n\n# SOURCE: https://media.readthedocs.org/pdf/pytest-cov/latest/pytest-cov.pdf\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## (.*)$$', line)\n",
        "Line" : 122,
        "CharPositionInLine" : 38
      },
      "11" : {
        "Text" : "# http://misc.flogisoft.com/bash/tip_colors_and_formatting\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# verify that certain variables have been defined off the bat\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13,
      "Errorlog" : "line 149:4 token recognition error at: '\\0'\nline 150:6 token recognition error at: '\\0'\nline 151:5 token recognition error at: '\\0'\nline 152:5 token recognition error at: '\\0'\nline 153:3 token recognition error at: '\\0'\nline 171:9 token recognition error at: '\"\\0'\nline 172:10 token recognition error at: '\\0'\nline 859:19 token recognition error at: '\" -exec autopep8 --max-line-length 200 --in-place --aggressive --aggressive {} \\;\\n\\n.PHONY: apply-isort\\napply-isort:\\n\\tisort --recursive --diff --verbose scarlett_os/\\n\\n.PHONY: setup-pre-commit\\nsetup-pre-commit:\\n\\tpip install pre-commit\\n\\tpre-commit install -f --install-hooks\\n\\n.PHONY: pre-commit-run\\npre-commit-run:\\n\\tpre-commit run\\n\\n.PHONY: pre-commit-try\\npre-commit-try:\\n\\tpre-commit try-repo .\\n\\n.PHONY: makelint-install\\nmakelint-install:\\n\\tgo get github.com/mrtazz/checkmake\\n\\tcd $$GOPATH/src/github.com/mrtazz/checkmake\\n\\tmake\\n\\n# github_changelog_generator comes from\\n# https://github.com/skywinder/github-changelog-generator\\n# Follow the instructions to generate a github api token\\n# VERSION = $(firstword $(subst -, ,$(RELEASE) ))\\n# LAST_COMMIT_MSG = $(shell git log -1 --pretty=%B | sed -e 's/\\x'\nline 1095:63 token recognition error at: '\" -type d -print); do \\\\n# \\t\\techo $$file; \\\\n# \\t\\tf=$$(basename $$file); \\\\n# \\t\\tln -sfn $$file $(CURDIR)/roles/$f; \\\\n# \\tdone; \\\\n# \\tls -lta $(CURDIR)/roles/; \\\\n\\nmeson-build:\\n\\tmeson mesonbuild/\\n\\nninja-build:\\n\\tninja-build -C mesonbuild/\\n\\nninja-install:\\n\\tninja-build -C mesonbuild/ install\\n\\n\\nmeson-install: meson-build ninja-install\\n\\nmeson-build-uninstalled:\\n\\tmeson mesonbuild/ --prefix=$$(pwd)/uninstalled --libdir=lib\\n\\nninja-build-uninstalled:\\n\\tninja-build -C mesonbuild/\\n\\nninja-install-uninstalled:\\n\\tninja-build -C mesonbuild/ install\\n\\nmeson-install-uninstalled: meson-build-uninstalled ninja-install-uninstalled\\n\\n# Since we don't want to write to homebrew system python directly, create a virtualenv them add modules in via symlinks\\n# MUST MATCH SAME VERSION!\\npyenv-virtualenv37:\\n\\tvirtualenv -p /usr/local/bin/python3 --system-site-packages ~/.pyenv/versions/system37\\n\\n# ~/.pyenv/versions/system37/lib/python3.7/site-packages\u0000'\n"
    },
    "docs/Makefile" : {
      "ObjectId" : "a3cadbe3f4018978e713217f865ad38a2506ed60",
      "LastModified" : "2016-07-23T20:35:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1518
}