{
  "Repository" : "11475097",
  "Revision" : "HEAD",
  "ObjectId" : "296d556d170f0dc0d5fe49945a5943f1f65a05d8",
  "CommitTime" : "2019-04-14T07:57:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "17ee3fc2956c40d352516269cf2382f59adb493d",
      "LastModified" : "2019-04-12T03:07:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GC on by default on MSVC\n",
        "Line" : 42,
        "CharPositionInLine" : 15
      },
      "1" : {
        "Text" : "# Assume 64 bit has SSE2 support\n",
        "Line" : 73,
        "CharPositionInLine" : 19
      },
      "2" : {
        "Text" : "# It is strongly recommended to uncomment one of these VAR_ARRAYS: Use C99\n\n# variable-length arrays for stack allocation USE_ALLOCA: Use alloca() for stack\n\n# allocation If none is defined, then the fallback is a non-threadsafe global\n\n# array\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Do runtime check for NEON\n",
        "Line" : 282,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# silk arm neon depends on main_Fix.h\n",
        "Line" : 292,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# demo\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# debug.h\n\n# arch.h\n",
        "Line" : 365,
        "CharPositionInLine" : 53
      },
      "7" : {
        "Text" : "# compare\n",
        "Line" : 369,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# tests\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# disable tests that depends on private API when building shared lib\n",
        "Line" : 395,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "Makefile.am" : {
      "ObjectId" : "4e3f18366a03421880d7389fa8696264eec84043",
      "LastModified" : "2019-04-03T15:51:13Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Provide the full test output for failed tests when using the parallel\n\n# test suite (which is enabled by default with automake 1.13+).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Targets to build and install just the library without the docs\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Or just the docs\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Or everything (by default)\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We check this every time make is run, with configure.ac being touched to\n\n# trigger an update of the build system files if update_version changes the\n\n# current PACKAGE_VERSION (or if package_version was modified manually by a\n\n# user with either AUTO_UPDATE=no or no update_version script present - the\n\n# latter being the normal case for tarball releases).\n\n#\n\n# We can't just add the package_version file to CONFIGURE_DEPENDENCIES since\n\n# simply running autoconf will not actually regenerate configure for us when\n\n# the content of that file changes (due to autoconf dependency checking not\n\n# knowing about that without us creating yet another file for it to include).\n\n#\n\n# The MAKECMDGOALS check is a gnu-make'ism, but will degrade 'gracefully' for\n\n# makes that don't support it.  The only loss of functionality is not forcing\n\n# an update of package_version for `make dist` if AUTO_UPDATE=no, but that is\n\n# unlikely to be a real problem for any real user.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create a minimal package_version file when make dist is run.\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# automake doesn't do dependency tracking for asm files, that I can tell\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# convert ARM asm to GNU as format\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For autoconf-modified sources (e.g., armopts.s)\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "celt/dump_modes/Makefile" : {
      "ObjectId" : "93f599fb5baf5cb0acd4997cf18001c8b0875875",
      "LastModified" : "2015-10-07T22:09:20Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "doc/Makefile.am" : {
      "ObjectId" : "31fddab49f985ecdd346ad3300be1d18a9d183f5",
      "LastModified" : "2016-05-18T20:20:35Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "opus_buildtype.cmake" : {
      "ObjectId" : "aaee9effaaebaadbd6810632899f3e9ca9c5868a",
      "LastModified" : "2019-04-12T03:07:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "opus_config.cmake" : {
      "ObjectId" : "a0bfd5839c8bba1bd447eb34e3a23049129eb4bf",
      "LastModified" : "2019-04-11T00:24:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "opus_functions.cmake" : {
      "ObjectId" : "fe309c2c490d9a6c9b5f98a81330dbdf6845f339",
      "LastModified" : "2019-04-03T15:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#[[Cmake helper function to parse source files from make files\nthis is to avoid breaking existing make and auto make support\nbut still have the option to use CMake with only lists at one place]]",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Not a git repo, lets' try to parse it from package_version file if exists\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# if all else fails set to 0\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# function to check if compiler supports SSE, SSE2, SSE4.1 and AVX if target\n\n# systems may not have SSE support then use OPUS_MAY_HAVE_SSE option if target\n\n# system is guaranteed to have SSE support then OPUS_PRESUME_SSE can be used to\n\n# skip SSE runtime check\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SSE1\n",
        "Line" : 111,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : "# different arch options for 32 and 64 bit target for MSVC\n",
        "Line" : 114,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# SSE2\n",
        "Line" : 127,
        "CharPositionInLine" : 51
      },
      "7" : {
        "Text" : "# SSE4.1\n",
        "Line" : 142,
        "CharPositionInLine" : 51
      },
      "8" : {
        "Text" : "# SSE2 and above\n",
        "Line" : 146,
        "CharPositionInLine" : 38
      },
      "9" : {
        "Text" : "# AVX\n",
        "Line" : 157,
        "CharPositionInLine" : 51
      },
      "10" : {
        "Text" : "# To avoid warning D9025 of overriding compiler options\n",
        "Line" : 168,
        "CharPositionInLine" : 11
      },
      "11" : {
        "Text" : "# on 64 bit and 32 bits\n",
        "Line" : 169,
        "CharPositionInLine" : 22
      },
      "12" : {
        "Text" : "# if AVX not supported then set SSE flag\n",
        "Line" : 171,
        "CharPositionInLine" : 40
      },
      "13" : {
        "Text" : "# read file, each item in list is one group\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# add wildcard for regex match\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# find group\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# for tests split by '=' and clean up the rest into a list\n",
        "Line" : 227,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# discard the group\n",
        "Line" : 239,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# remove trailing whitespaces\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "opus_sources.cmake" : {
      "ObjectId" : "225543af3641db00f010439d55324a7ab378246f",
      "LastModified" : "2019-04-11T00:24:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 5,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 2
  },
  "ElapsedTime" : 1564
}