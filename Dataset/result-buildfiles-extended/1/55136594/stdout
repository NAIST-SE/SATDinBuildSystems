{
  "Repository" : "55136594",
  "Revision" : "HEAD",
  "ObjectId" : "5bce532febc82e22d874fe5c96c167536a5e43e9",
  "CommitTime" : "2019-03-08T10:19:20Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "d12f5b0a13879d23e8b42fb800670bc0d1aca8de",
      "LastModified" : "2019-03-05T12:46:36Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# Automake configuration\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## We include libsemigroups-config.h in the distribution even though it is \n\n## autogenerated by configure, since it is required to allow libsemigroups to\n\n## be included in other projects, such as the GAP package Semigroups where it\n\n## will not be compiled directly but within the build system of the other\n\n## project. In such a case, the configure script of libsemigroups will not be\n\n## called, and if we do not include libsemigroups-config.h in the distribution\n\n## it will not exist, and so compilation will fail. \n\n##\n\n## libsemigroups-config.h is included in libsemigroups-debug.h so that, for\n\n## example,\n\n##\n\n##    ./configure --enable-debug\n\n## \n\n## can define the preprocessor symbol LIBSEMIGROUP_DEBUG to enable certain\n\n## lines of code, and assertions. \n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## libsemigroups headers\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## libsemigroups sources\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Extra files for the distribution\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## lstest sources \n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Make targets\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "benchmark/CMakeLists.txt" : {
      "ObjectId" : "9038a1abb1b8b67474f99f13307fda54ae691768",
      "LastModified" : "2017-12-06T13:01:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Location of additional cmake modules\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Guard against in-source builds and bad build-type strings\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you want to self-test benchmark lib too, turn me ON\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure google micro benchmark\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# c++11 is required\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "benchmark/cmake/ConfigGBench.cmake" : {
      "ObjectId" : "690cba088ee5200923b3c351a084b9cb76ee85fe",
      "LastModified" : "2017-08-23T14:07:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adapted from https://github.com/Crascit/DownloadProject/blob/master/CMakeLists.txt\n\n#\n\n# CAVEAT: use DownloadProject.cmake\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "benchmark/cmake/ConfigSafeGuards.cmake" : {
      "ObjectId" : "83b40e551fcc3622474862686a4d983ff3f1ff06",
      "LastModified" : "2017-08-23T14:07:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adapted from: https://github.com/bast/cmake-example/tree/master/cmake\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# guard against in-source builds\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# guard against bad build-type strings\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "benchmark/cmake/DownloadProject.cmake" : {
      "ObjectId" : "982ba2df79930e6fd2d9c26af85279a8e1c803db",
      "LastModified" : "2017-08-23T14:07:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/Crascit/DownloadProject\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(download_project.cmake)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "benchmark/src/CMakeLists.txt" : {
      "ObjectId" : "06fd00d197985cd16831dcb25dd709e0b5392155",
      "LastModified" : "2017-12-06T13:01:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#~~~~~~~~~~~~~~~~\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Avoid name collision \n",
        "Line" : 14,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# If required, you can add your project library here\n\n# ...\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you want to run benchmarks with the \"make test\" command, uncomment me\n",
        "Line" : 27,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 5,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1085
}