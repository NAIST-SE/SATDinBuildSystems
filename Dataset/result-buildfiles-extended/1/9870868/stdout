{
  "Repository" : "9870868",
  "Revision" : "HEAD",
  "ObjectId" : "d3901d900cacff376e1201e86223adf1cc56784a",
  "CommitTime" : "2018-12-07T01:01:14Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "0944ed37844fc4fbd7f7b547544877864d4a4397",
      "LastModified" : "2018-12-07T00:52:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Arguments (all are optional):\n\n# MAXK=31\n\n# RELEASE=1                  (release build)\n\n# DEBUG=1                    (debug build)\n\n# VERBOSE=1                  (compile to print all the things!)\n\n# HASH=<CITY,LOOKUP3,XXHASH> (default hash function)\n\n# RECOMPILE=1                (recompile all from source)\n\n# NOLIBS=1                   (do not attempt to recompile library code)\n\n# STRICT=1                   (compile with stricter CC warnings)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Resolve some issues linking libz:\n\n# e.g. for WTCHG cluster3\n\n# 1) pass LIB_PATH=/usr/local/lib/ to compile on WTCHG cluster3\n\n# 2) set LD_LIBRARY_PATH=/usr/local/lib/:$(LD_LIBRARY_PATH) before running\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Targets:\n\n#  make\n\n#  make clean\n\n#  make all\n\n#  make [mccortex|tables|debug|test]\n\n#  make tests   <- run tests\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use bash as shell\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Toggle Release Version\n\n#\n\n# RELEASE=1\n\n# RECOMPILE=1\n\n#\n\n##\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use City hash instead of lookup3?\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# default\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Library paths\n\n# IDIR_GSL_HEADERS=libs/gsl-1.16\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# LIB_GSL=libs/gsl-1.16/.libs/libgsl.a\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# LIB_STRS=libs/string_buffer/libstrbuf.a\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LIB_MISC=$(MISC_SRCS) libs/xxHash/xxhash.c\n\n# LIB_MISC=$(MISC_OBJS)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Library linking\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Preprocessor declarations\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# C Compiler flags\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# -fno-strict-aliasing\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If not debugging, add optimisations and -DNDEBUG=1 to turn off assert() calls\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Could add -DNDEBUG=1 here to turn off asserts\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# DEPS dependencies that do not need to be re-built per target\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# RECOMPILE=1 to recompile all from source\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Update libraries\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Run tests\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# This Makefile mastery borrowed from htslib [https://github.com/samtools/htslib]\n\n# If git repo, grab commit hash to use in version\n\n# Force version.h to be remade if $(CTX_VERSION) has changed.\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# CTX_VERSION := $(shell git log --pretty=format:'%h' -n 1 --tags)\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Misc library code\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# directories\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# libraries\n\n# This triggers the compiling of library dependencies for first install\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "dev/bkmer_revcmp/Makefile" : {
      "ObjectId" : "5d1c0fd3c1a65533c871c3ae36fa33bc2703f817",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "libs/Makefile" : {
      "ObjectId" : "ac85c01e9965ebf95682de2dba0c87c200fd6470",
      "LastModified" : "2017-08-28T07:49:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# make          <- compile mccortex dependencies\n\n# make all      <- compile all libraries (deps + analysis)\n\n# make clean    <- clean all libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only compile dependencies for compiling McCortex itself\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Download of git hosted libraries now done with git submodules\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Build\n\n#\n\n# xxHash: xxHash/Makefile\n\n# \tcd xxHash && $(MAKE)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Run configure if config makefile not created\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#\n\n# Run tests\n\n#\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Clean\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# cd xxHash && $(MAKE) clean\n",
        "Line" : 99,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 8
    },
    "libs/maximal_substrs/Makefile" : {
      "ObjectId" : "894eb27266c1e73864831ce1ed04400abcdb3859",
      "LastModified" : "2014-10-22T14:59:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "libs/misc/Makefile" : {
      "ObjectId" : "ab07991142562ab56e9133b230258592bca9a026",
      "LastModified" : "2014-10-22T14:59:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# These files are all compiled by the main Makefile,\n\n# this is just here as documentation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clang Link Time Optimisation (lto) seems to have issues atm\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "results/assembly/Makefile" : {
      "ObjectId" : "44affbe5ddc9bdecf60b70ce863d9016b78e9d2c",
      "LastModified" : "2018-07-16T09:20:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Mark all dependencies as secondary\n\n# It means don't re-run if the dependency file disappears -- allows us to delete unused files\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Delete files if their recipe fails\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove implicit rules for certain suffixes\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# assess:\n\n# \t$(BWA) index $(REF)\n\n# \t$(BWA) mem $(REF) proj/k31/contigs/MissSample.pop.rmdup.fa.gz > tmp.sam\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 1 Mb human diploid\n\n# Generate a diploid genome from a haploid reference\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove deletion marks (-) and convert to uppercase\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Simulate PE reads of each chrom each 50X\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "results/benchmark/paperSimulations/Makefile" : {
      "ObjectId" : "bf86f90d83c6120f81d8f469b33e4aaa8d3cd80e",
      "LastModified" : "2017-02-14T13:48:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile to run simulation for paper\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PhiX.1.fq.gz needs to be downloaded\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Number of events\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#$* is {Hs,Staph}{One,Many}{Error,NoError}Reads{100,250}\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "results/breakpoint_calling/Makefile" : {
      "ObjectId" : "34fc29ca2c1cae24320df15882319fdced55b6cb",
      "LastModified" : "2018-09-29T20:16:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Smash up a genome and count how many breakpoints we recover\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mark all dependencies as secondary\n\n# It means don't re-run if the dependency file disappears -- allows us to delete unused files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Delete files if their recipe fails\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove implicit rules for certain suffixes\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 1 Mb human diploid\n\n# Generate a diploid genome from a diploid reference\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Simulate PE reads of each chrom each 50X\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "results/contig_confidence/Makefile" : {
      "ObjectId" : "4e54f9ef4d9353b61b62505cc7a1663617258485",
      "LastModified" : "2017-02-14T13:48:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "results/correct/ecoli/Makefile" : {
      "ObjectId" : "94eb1b8f85f3fa4493100af147bc0b80f3e81260",
      "LastModified" : "2017-02-14T13:48:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Simulate SE reads\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cortex build k=$(K)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cortex clean\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Cortex thread reads\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cortex correct\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "results/correct/hg_chr22/Makefile" : {
      "ObjectId" : "6123c74e25344a0fee0f83234b2fcfefff268271",
      "LastModified" : "2017-02-14T13:48:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# simluating a diploid, actual depth 2*$(HAPDEPTH)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a diploid genome\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove deletion marks (-) and convert to uppercase\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Simulate PE reads of each chrom each 50X\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# McCortex build k=$(K)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# McCortex clean\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# McCortex thread reads\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# McCortex correct\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "results/data/chr22/Makefile" : {
      "ObjectId" : "5e722b4faedc4cd5dd2ffb7dcd599d6577e75d52",
      "LastModified" : "2017-02-14T13:48:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "results/data/chr22/uniq_flanks/Makefile" : {
      "ObjectId" : "c1785a558a575adfde5261f36a8144cd850a82f6",
      "LastModified" : "2017-02-14T13:48:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Isaac Turner\n\n# 2014-09-05\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "results/data/ecoli/Makefile" : {
      "ObjectId" : "dfebf09484e2af598965b9c458394633c06d5198",
      "LastModified" : "2017-02-14T13:48:18Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "results/kmer_size_experiment/Makefile" : {
      "ObjectId" : "fb90f1ee61562d6efdbfeb1a9532e0884e3dc9c3",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Get N50 for assemblies with perfect coverage, stochastic coverage and\n\n# stochastic coverage + sequencing error for k=21,31,41,51,63,75,99\n\n#\n\n# Fetch data before running:\n\n#   cd mccortex/results/data && ./download.sh\n\n#\n\n# Generate plots with:\n\n#   cd results && ./make-csvs-and-plots.sh\n\n#\n\n# Isaac Turner 2016-10-28\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# REF=$(CTXDIR)/results/data/chr22/chr22_28M_29M.fa\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# {perfect_cov,stoch_cov,stocherr_cov}/k{21,31,41,51,61,71,81,91,99}/stats.links.txt\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Keep all files\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# perfect_cov/k%/stats.plain.txt perfect_cov/k%/stats.links.txt: $(READS_PERFECT)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# stoch_cov/k%/stats.plain.txt stoch_cov/k%/stats.links.txt: $(READS_STOCH)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# stocherr_cov/k%/stats.plain.txt stocherr_cov/k%/stats.links.txt: $(READS_STOCHERR)\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Find the number of sequencing errors that would add a new edges between two\n\n# existing kmers\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "results/kmer_size_experiment/results/20170206mon_chr22_28M/err-corr-plots/Makefile" : {
      "ObjectId" : "2d740c496b6a9c5a199060c012871000fb3b8748",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "results/traversal_conjecture/Makefile" : {
      "ObjectId" : "13b6f24b61e1086a72d5f80fa74f96a78b3a7828",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile\n\n# Isaac Turner\n\n# 2014-09-05\n\n# Using 1Mb of chr22 and error free reads with both perfect & stochstic coverage\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if we start a 100bp read at each base, coverage is 100X\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Simulate PE reads of each chrom each 50X, only use\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Cortex build k=$(K)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Thread\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Contigs\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Remove duplicates\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check error rate\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "results/var_calling_10ecoli/Makefile" : {
      "ObjectId" : "a60d069a82b44e85182dbde7dfc32b7c93c30adc",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Need to install these separately yourself\n\n# CORTEXDIR=~/cortex/releases/CORTEX_release_v1.0.5.21\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VCFTOOLSDIR=~/bioinf/vcftools_0.1.12b/\n\n# VCFREF=~/c/vcf-hack/bin/vcfref\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Mark all dependencies as secondary\n\n# It means don't re-run if the dependency file disappears -- allows us to delete unused files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Delete files if their recipe fails\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Remove implicit rules for certain suffixes\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ecoli 4.6Mb, 1SNP per 100 => 46000 SNPs\n\n# Generate a 10 ecoli genomes\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Remove deletion marks (-) and convert to uppercase\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Simulate PE reads of each chrom each 50X\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "results/var_calling_10ecoli/cortex/Makefile" : {
      "ObjectId" : "0b2124e16416ed9d290ce1d0ab862344824dd7d6",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Need to install these separately yourself\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Need absolute path to reference\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Dependencies that we create. We delete them on clean\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CTXVCF_1BY1=cortex_1by1/vcfs/ecoli_union_BC_calls_k$(K).decomp.vcf\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CTXVCF_JOINT=cortex_joint/vcfs/ecoli_union_BC_calls_k$(K).decomp.vcf\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make stampy hash\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build reference graph file\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add '##contig=<ID=ecoli,length=1000000,assembly=hg19>'\n\n# to header, and fix an INFO field\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Put new header on, filter ref mismatches, sort entries\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Normalise indels and compress\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Index\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check there are executables for cortex\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13,
      "Errorlog" : "line 122:26 token recognition error at: '\\s'\nline 126:26 token recognition error at: '\\s'\n"
    },
    "results/var_calling_diploid_chr22_1Mbp/Makefile" : {
      "ObjectId" : "dc8333e0f3e87bb1b0d259492c22fd5c52804f22",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Mark all dependencies as secondary\n\n# It means don't re-run if the dependency file disappears -- allows us to delete unused files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Delete files if their recipe fails\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove implicit rules for certain suffixes\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# 1 Mb human diploid\n\n# Generate a diploid genome from a haploid reference\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Remove deletion marks (-) and convert to uppercase\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Simulate PE reads of each chrom each 50X\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "results/var_calling_diploid_chr22_1Mbp/cortex/Makefile" : {
      "ObjectId" : "05aaed717ec933d51b324eca65307cbc1244f693",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Need to install these separately yourself\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Dependencies that we create. We delete them on clean\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CTXVCF=cortex_joint/vcfs/ecoli_wk_flow_J_RefCC_FINALcombined_BC_calls_at_all_k.decomp.vcf\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make stampy hash\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build reference graph file\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add '##contig=<ID=chr22_17M_18M,length=1000000,assembly=hg19>'\n\n# to header, and fix an INFO field\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Put new header on, remove empty lines, filter ref mismatches, sort entries\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Normalise indels and compress\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Index\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10,
      "Errorlog" : "line 103:26 token recognition error at: '\\s'\n"
    },
    "tests/breakpoint/Makefile" : {
      "ObjectId" : "538ea797dc4d15c825039d8762402dd3395ed70f",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# breakpoint0: empty breakpoint calls (K=31)\n\n# breakpoint1: test we get the correct VCF (K=11)\n\n# breakpoint2: check we don't call any ref bubbles\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/breakpoint/breakpoint0/Makefile" : {
      "ObjectId" : "4749046e43e3a2bde912523415542fd5d261dc89",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Sanity check that calling breakpoints with only a ref and reads from the ref\n\n# gives no calls\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check no VCF entries\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Check no breakpoint call entries\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "tests/breakpoint/breakpoint1/Makefile" : {
      "ObjectId" : "a3912489fbc15d236787075128a7c76182ebd3c6",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# chr1: CCCGTAGGTAAGGGCGTTAGTGCAAGGCCACATTGGGACACGAGTTGATA\n\n# chr2: gCCGTAGGTAAGGGCGTTAGTGC\n\n# chr3: GAACACCCTTTGGTTTAAGCCGGGTTGGAGTTGGCCAAAGAAGTTCAACG\n\n# chr4: ATTCTACAGCAGGTCATGAGCAACCGGCACTCGAGCAGACGTACGGGAAA\n\n#\n\n# >mix\n\n# gCCGTAGGTAAGGGCGTTAGaCGGGTTGGAGTTGGCCAAAGAAGTTCAAgg\n\n# .1111111111111111111.3333333333333333333333333333..\n\n#\n\n# >repeat of 5bp\n\n# CCCGTAGGTAAGGGCGTTAGTGCAGTGCAAGGCCACATTGGGACACGAGTTGAgg\n\n# 111111111111111111111111xxxxx111111111111111111111111..\n\n#\n\n# >deletion of 1bp\n\n# cAACACCCTTTGGTTTAAGCCG-GTTGGAGTTGGCCAAAGAAGTTCAAgg\n\n# .333333333333333333333 3333333333333333333333333..\n\n#\n\n# >SNP\n\n# ATTCTACAGCAGGTCATGAGCAACtGGCACTCGAGCAGACGTACGGGAAA\n\n# 444444444444444444444444 4444444444444444444444444\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# join.k$(K).ctx\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compare truth.vcf and breakpoints.norm.vcf.gz\n\n# Check no entries private to either truth.vcf.gz or breakpoints.norm.vcf.gz\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3,
      "Errorlog" : "line 103:12 token recognition error at: '\\s'\nline 103:19 token recognition error at: '\\s'\n"
    },
    "tests/breakpoint/breakpoint2/Makefile" : {
      "ObjectId" : "414f3ca01ea02f835c8b23de2eebeda6f3492e04",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Check that we don't call a ref bubble\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check no VCF entries\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Check no breakpoint call entries\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "tests/bubbles/Makefile" : {
      "ObjectId" : "bcb9d2c3dc2a93f11ab894b0304c0fb57528e1fd",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Test bubble calling and decomposing to VCF\n\n# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/bubbles/bubbles1/Makefile" : {
      "ObjectId" : "1e4437d4a45757daae9d99a3e08dee2992d9702b",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test we do not call certain bubbles, including:\n\n# - haploid bubbles (haploid colour on both branches)\n\n# - serial bubbles - bubbles whose branches share a unitig, e.g.\n\n#         _   _\n\n#       _/ \\_/ \\_\n\n#        \\_/ \\_/\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#                     1 0/0 1/1              1b                                      2 0/0 1/1             3 0/0 1/1             4 0/0 1/1\n\n# r:AAGTACCAACTCCCCGATaCCTGTGATCATACCAAACTCCCCGATtCCTGTGATCATAAGTAGTTATGTCGCAAAGTCTGAGAGGTTGCGTCTTTGTACGGGCTGTCAGGCCGGGCCATCAGTTCCAGTATTCTGTGTTCGTGCTCAATTTCTACCACACT\n\n# i:AAGTACCAACTCCCCGATaCCTGTGATCATACCA-----------------------AAGTAGTTATGTCGCAAAGTCTGAGAGGTTGCGTCTTTGTACGGGCTGTCAGGCCGGGCCATCAGTTCCAGTATTCTGTGTTCGTGCTCAATTTCTACCACACT\n\n# I:AAGTACCAACTCCCCGATaCCTGTGATCATACCA-----------------------AAGTAGTTATGTCGCAAAGTCTGAGAGGTTGCGTCTTTGTACGGGCTGTCAGGCCGGGCCATCAGTTCCAGTATTCTGTGTTCGTGCTCAATTTCTACCACACT\n\n# s:AAGTACCAACTCCCCGATtCCTGTGATCATACCA-----------------------AAGTAGTTATGTCGCAAAGTCTGAGAGGTaGCGTCTTTGTACGGGCTGTCAtGCCGGGCCATCAGTTCCAGTAaTCTGTGTTCGTGCTCAATTTCTACCACACT\n\n# S:AAGTACCAACTCCCCGATtCCTGTGATCATACCA-----------------------AAGTAGTTATGTCGCAAAGTCTGAGAGGTaGCGTCTTTGTACGGGCTGTCAtGCCGGGCCATCAGTTCCAGTAaTCTGTGTTCGTGCTCAATTTCTACCACACT\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#                   5 0/1 0/1                            5b\n\n# r:AAACGTCGGAACAGTGTGCCGTGTAGGCTCCGATACCATAGGTCGGAACAGTGcGCCGTGTAGGCTTCGACCGATGGCGGCCTGGCCTTTTACAATACTATTCGCTA\n\n# i:AAACGTCGGAACAGTGTGCCGTGTAGGCTCCGATACCATAG------------------------TTCGACCGATGGCGGCCTGGCCTTTTACAATACTATTCGCTA\n\n# I:AAACGTCGGAACAGTGcGCCGTGTAGGCTCCGATACCATAG------------------------TTCGACCGATGGCGGCCTGGCCTTTTACAATACTATTCGCTA\n\n# s:AAACGTCGGAACAGTGTGCCGTGTAGGCTCCGATACCATAG------------------------TTCGACCGATGGCGGCCTGGCCTTTTACAATACTATTCGCTA\n\n# S:AAACGTCGGAACAGTGcGCCGTGTAGGCTCCGATACCATAG------------------------TTCGACCGATGGCGGCCTGGCCTTTTACAATACTATTCGCTA\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Complex structures\n\n#                 6 00,01  6b 01,01 6c 00,01\n\n# r:CATCATTTATACGGATACTACAGCACCACAATCTGGTATCGTTAAACAGTAACCGATCAAGGCTAATGTTGCACAATTCGGTG\n\n# i:CATCATTTATACGGATACTACAGCACCACAATCTGGTATCGTTAAACAGTAACCGATCAAGGCTAATGTTGCACAATTCGGTG\n\n# I:CATCATTTATACGGATACTACAGaACCACAATCTGGTATCGTTAAACAGTAACCGATCAAGGCTAATGTTGCACAATTCGGTG\n\n# s:CATCATTTATACGGATACTACAGCACCACAATCTGGTATCGTTAAACAGTAACCGATCAAGGCTAATGTTGCACAATTCGGTG\n\n# S:CATCATTTATACGGtTACTACAGaACCACAATgTGGTATCGTTAAACAGTAACCGATCAAGGCTAATGTTGCACAATTCGGTG\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# haploid: 1, 5\n\n# serial: [2,3] [2,3,4] [3,4]\n\n# Expect 2,3,4,6a,6b,6c to be found\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Mapping with BWA\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/bubbles/bubbles2/Makefile" : {
      "ObjectId" : "1381c9249780baf9948fda7a94fe3b90657bbb35",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test we call all bubbles when filtering ref bubbles\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# expect 60 bubbles called = (2**4-1)*2*2\n\n# expect 64 haploid bubbles = (2**4)*2*2 (i.e. bubbles in ref ignored)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/bubbles/bubbles3/Makefile" : {
      "ObjectId" : "ec22e803332734bd858be7b3cc33c51711f9241f",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test we can place a het-non-ref SNP (triallelic),\n\n# when it's flanks don't match the ref\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/bubbles/bubbles4/Makefile" : {
      "ObjectId" : "fdb8aef6b0e8204e39e0708016fd8517b3809262",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# 1 het site in s0, 1 het between s0,s1\n\n#\n\n#                                                        v     v ref mismatch\n\n# ref:GTAGACTACTTGTCGCGACCCCCGTAGGTAAGGGCGTTAGTGCAAGGCCACcTTGGGcCACGAGTTGATATCATCCGGCGTAGGAGGACT\n\n#                                     x                  y\n\n# s0: GTAGACTACTTGTCGCGACCCCCGTAGGTAAGGGCGTTAGTGCAAGGCCACATTGGGACACGAGTTGATATCATCCGGCGTAGGAGGACT\n\n# s0: GTAGACTACTTGTCGCGACCCCCGTAGGTAAGtGCGTTAGTGCAAGGCCACATTGGGACACGAGTTGATATCATCCGGCGTAGGAGGACT\n\n#\n\n# s1: GTAGACTACTTGTCGCGACCCCCGTAGGTAAGGGCGTTAGTGCAAGGCCACtTTGGGACACGAGTTGATATCATCCGGCGTAGGAGGACT\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# compare truth.vcf and bubbles.norm.vcf.gz\n\n# Check no entries private to either truth.vcf.gz or bubbles.norm.vcf.gz\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2,
      "Errorlog" : "line 98:66 token recognition error at: '\\s'\nline 98:73 token recognition error at: '\\s'\n"
    },
    "tests/bubbles/bubbles5/Makefile" : {
      "ObjectId" : "ad98c84dd12d8a87bc81af7d9834d176b004f83b",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/build/Makefile" : {
      "ObjectId" : "7dc46c0bc2b8514bafe98fb15f122a9e0e20312f",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build0: random sequence, sort graph, reassemble sequence\n\n# build1: test --intersection and --graph arguments\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/build/build0/Makefile" : {
      "ObjectId" : "ff7ceb1257ed8dc84c9405f5b12a0b59887959d5",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Generate 60 bases of sequence, build graph, save, sort and index it, then\n\n# re-assemble the sequence. We should get back a single contig of length 60\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/build/build1/Makefile" : {
      "ObjectId" : "9837d3b8487e5fca1751b88b48624a4c2629a701",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# build1: test --intersect and --graph arguments\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/clean_graph/Makefile" : {
      "ObjectId" : "4578e41e71e1d4e74bdcc4d471a4c81f4de54f5a",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Test graph cleaning\n\n# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/clean_graph/clean1/Makefile" : {
      "ObjectId" : "ec918cabaf074ee4d62652c0f64a6dd3d6310676",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/clean_graph/clean2/Makefile" : {
      "ObjectId" : "3cdc8a4b776f7772b87dbdb4c0e072e86f3002f4",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Repeat of CAAAGGCCTCACGGGTA\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# $(CTX2DOT) --simplify $< > $@\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "tests/clean_graph/clean3/Makefile" : {
      "ObjectId" : "28d0befb088b051e47bd89a45a8f426b943772e7",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Three sample cleaning, one colour in the graph.\n\n# Compares output from 'mccortex build --sort', 'mccortex sort' and\n\n# 'mccortex clean --sort'.\n\n# Works with kmers 11..39 inclusive.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check each sample is properly sorted\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "tests/clean_graph/clean4/Makefile" : {
      "ObjectId" : "99890ac394f53712ec79ea47db55232ec61d7882",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Clean a multi-sample graph by loading all samples at once. Each sample has\n\n# only one copy, remove <2 copies from population. \n\n# When only 2 samples are loaded we dump an empty graph.\n\n# When all 3 samples are loaded we dump a full graph.\n\n#\n\n# works with all kmers\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/clean_links/Makefile" : {
      "ObjectId" : "857ddb6f7b3bc86d8cb99d471c1528cd5472ef68",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# 1. Sample seq from ref with error\n\n# 2. Build + clean graph\n\n# 3. Build + clean links\n\n# 4. Assemble contigs\n\n# 5. check contigs match seq\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Coverage must be at least one, bash {1..N} gives '1 0' (i.e. 2) if N is 0\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cleaning should not remove any kmers\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/contigs/Makefile" : {
      "ObjectId" : "27a9293bd1e5ee28af92de0a11e7da5746cad990",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Might work with diff K values\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/correct/Makefile" : {
      "ObjectId" : "7a3994dd2e31ef2eaaf82c438112a8074f285049",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Correct reads\n\n# -P, --print-orig means add original sequence to read name 'orig=SEQ'\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# input: plain output: fastq\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# input: fastq output: fastq\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Plots to help understand what is going on\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "tests/coverage/Makefile" : {
      "ObjectId" : "09cd2fc26ab018dc0144881a4a6d7be77da19f0f",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/dist_matrix/Makefile" : {
      "ObjectId" : "14b78f7a8d53d3b082b68b5072d01ea11b6dbde0",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Mac doesn't have:\n\n# - `sort -R` (sort with hash of key)\n\n# - `shuf` shuffle\n\n#  So have to use perl\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 31:46 token recognition error at: '\\d'\n"
    },
    "tests/graphviz/Makefile" : {
      "ObjectId" : "38c583a86e981e127229f18172c4c27f53c76708",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/inferedges/Makefile" : {
      "ObjectId" : "fe10b4c925eabcb063a1a2fbf61edc3dfe81018c",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# 1) Stream to output file\n\n# 2) Edit in place\n\n# 3) File to output file\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 1) generate sequence, construct graph\n\n# 2) generate graph without edges\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 1) pop edges\n\n# 2) all edges\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# inferedges --pop test using CAAGG kmer\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 1) Stream\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Edit file in place (mmap)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Separate input + output files\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 2) fix on 01 is same as 10\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# 3) fix on 11 is just 11\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# fix on 00 is just 00\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n#  CAAGG TEST: Tests inferring population kmers\n\n#\n\n# ACAAG             AAGGA\n\n# CCAAG*-> CAAGG -> AAGGC\n\n# GCAAG             AAGGG\n\n# TCAAG            *AAGGT  * = edges\n\n#\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Colour 0 has all kmers and 2 edges\n\n# Colour 1 has left kmers but no edges (gets 1 from infer)\n\n# Colour 2 has right kmers but no edges (gets 1 from infer)\n\n# Colour 3 has all kmers but no edges (gets them from infer)\n\n# Colour 4 has no kmers\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# diff -q fix.1a.txt mix.11.k$(K).txt\n",
        "Line" : 146,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 13
    },
    "tests/join/Makefile" : {
      "ObjectId" : "febbb416f3f0c4f3883946f0ddfc1023c7868149",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Any kmer (K=) should work\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Output colours are {0,1,2,0+0,1+2,2}\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Output colours are: {1,0,empty,empty,3} => {1,0,empty,empty,0+0}\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/largeK/Makefile" : {
      "ObjectId" : "d375017b79a5c9ac6767d228798106d581fe5a0c",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Run build and clean commands followed by the check command\n\n# to test we can build valid graphs for random sequence\n\n# Works for any K value (e.g. K=11, K=39, K=61)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/loop/Makefile" : {
      "ObjectId" : "d5540b3b3309c9e4f02346dae6b3af488bb70493",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Isaac Turner 2014-11-25\n\n#\n\n# In this test we thread a read through a loop to see how links allow us\n\n# to reconstruct repetitive regions.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CGTTAATCCG (ATTGAGTTCA x 4) TTGGTCACGG\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/lossless/Makefile" : {
      "ObjectId" : "b659e5a9d099fba2f8844286459bd62beed9a3f6",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We show that a sequence can be losslessly regenerated from its linked dBG\n\n# lossless0: random sequence in a single read is regenerated\n\n# lossless1: minimum required read length to reproduce exact contig\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/lossless/lossless0/Makefile" : {
      "ObjectId" : "90d6200a84b9213df4f662938e5410a2f07e0583",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Isaac Turner 2014-10-08\n\n#\n\n# In this test we generate a random 1001 base sequence, add 9bp unique kmers\n\n# either side and build graph and link files. Links are generated using the\n\n# entire sequence. Then, using k=9, we reassemble contigs from the graph+links,\n\n# remove duplicates, trim off 9bp added each side and compare to original.\n\n# It should match perfectly.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Inferring edges breaks lossless recovery because forks can be induced\n\n# before we have a chance to pick up links:\n\n#\n\n# start__/ ... \\__end\n\n#        \\     /\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 4**7 = 16,384\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Inferring edges breaks lossless recovery, see not above\n\n# $(MCCORTEX) inferedges $@\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "tests/lossless/lossless1/Makefile" : {
      "ObjectId" : "f58650710dede17884a5bcdc461eba9f787327d8",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Isaac Turner 2014-10-08\n\n#\n\n# In this test we generate a random 10kbp base sequence, add 9bp unique kmers\n\n# either side and build graph and path files. Then, using k=7, we reassemble\n\n# contigs from the graph+path, remove duplicates, trim off 9bp added each side\n\n# and compare to original.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 4**7 = 16,384\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/path_check/Makefile" : {
      "ObjectId" : "5af0e5ed7422b1f14de485bed321d18927331aef",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Sample random genome\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/pipeline/Makefile" : {
      "ObjectId" : "e3643c05e7fbd98a17080537290ab56934889c13",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Simulate reads from two given samples, with sequencing error of 1%, 50X, 100bp\n\n# Call variants and check that we get exactly the expected variants\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 600 random bases generated with: dnacat -n 600\n\nn",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 400 bp fragment len, 100 bp reads\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tests/pjoin/Makefile" : {
      "ObjectId" : "9374a8577fa009e67d5b8624419c581bb9cd64be",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# pjoin0:\n\n# pjoin1:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/pjoin/pjoin0/Makefile" : {
      "ObjectId" : "df59e393a941515c5c9ab0e8ed3da21396dff188",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# non-default target: genome.k$(K).pdf\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/pjoin/pjoin1/Makefile" : {
      "ObjectId" : "134a6803eff20e92da60b1ade30276b82401d042",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Sanity check that merging matching link files gives correct counts\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/pop_bubbles/Makefile" : {
      "ObjectId" : "cd22453119cc6f9b4e9606e0ce12fb10320d4264",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Test bubble popping\n\n# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/pop_bubbles/pop_bubbles1/Makefile" : {
      "ObjectId" : "f2721586fe85dd882a069716d96d4fe12ddd2229",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Test pop bubbles with a single sample input file\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/pop_bubbles/pop_bubbles2/Makefile" : {
      "ObjectId" : "07e97a57f3c902f2ba3700767362eaeee97610e5",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Test pop bubbles with a multiple samples, multiple input files\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/reads/Makefile" : {
      "ObjectId" : "c7e1f0c92bc75c4a57feec8c56e7805e4cd2ba89",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/rmsubstr/Makefile" : {
      "ObjectId" : "bf5e56886579c89c82b47a495e33fb79ed7165e0",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#     read a is  <--------|\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/sort/Makefile" : {
      "ObjectId" : "2c742908857115e5e2f3eac8ee9de9215f665991",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Any kmer (K=) should work\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/subgraph/Makefile" : {
      "ObjectId" : "13a1fb51ff0df9f239398692c46e204a0810f547",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/subgraph_unitigs/Makefile" : {
      "ObjectId" : "52263685997623ab22ec07a76614334d6aab6838",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/threading/Makefile" : {
      "ObjectId" : "fc19582aca54fe885b3fa000d2e15f68ed4b2567",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Test read threading through the graph\n\n# Each test case is in a separate sub-directory\n\n# threading1:\n\n# threading2: paired-end threading\n\n# threading3: paired-end threading with short reads\n\n# threading4:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/threading/threading1/Makefile" : {
      "ObjectId" : "59e8ba151db7b2a52963fcb6ff1870994978a0e3",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/threading/threading2/Makefile" : {
      "ObjectId" : "b2cd4fdd3d41dbde1c5340fee5325fce7db77d8c",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# echo CAGTGGCCGT > $@ # Actually revcmp read2\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# seq-gaps -> gap-hist\n\n# mp-gaps -> frag-hist\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/threading/threading3/Makefile" : {
      "ObjectId" : "857e996ce09177f4931998deae7a12173b4f8b43",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# non-default target: genome.k9.pdf\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# echo ACGCTAACT > read.2.fa # Actually revcmp read2\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "tests/threading/threading4/Makefile" : {
      "ObjectId" : "177b710d0fae64d826e27aca59dee00720edd5eb",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ctx thread arguments\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sample random genome\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/unitigs/Makefile" : {
      "ObjectId" : "e8aba55a2212b9f90b22c5086b99ee72722b59b0",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test unitigs command by generating 200 random DNA bases, building cortex graph\n\n# then generating untigs with various output options\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sample random genome\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/vcfcov/Makefile" : {
      "ObjectId" : "dd0f55c59caaebaac9b397cd8ec37c50511000dd",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Each test case is in a separate sub-directory\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call0: test with empty VCF\n\n# call1: overlapping SNPs at ref:1,50,199, chr1:50. Handle missing contig= header.\n\n# call2: SNP every base, across two chromosomes\n\n# call3: blocks of overlapping variants (on one chrom)\n\n# call4: variants exactly k-1 bases apart (on one chrom)\n\n# call5: test for large indels\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/vcfcov/calls0/Makefile" : {
      "ObjectId" : "a5b8e51f6246922b0bc77a81436931fae14b04b6",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test vcfcov with an empty VCF\n\n# Works with any kmer size (K)\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/vcfcov/calls1/Makefile" : {
      "ObjectId" : "0d8f1bd234fd98e539c6e17a33057b259ec159ed",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test vcfcov with three groups of overlapping SNPs at positions ref:1,50,199\n\n# and chr1:30. Length of chromosome is ref=200, chr1=100.\n\n# We also test that we don't crash if we encounter a contig that was not defined\n\n# in the header.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/vcfcov/calls2/Makefile" : {
      "ObjectId" : "88161a5520a78fe433edd6d57e4b9e5b5ef658b9",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test vcfcov with too many overlapping variants\n\n#\n\n# Test VCF of a SNP per base generated with:\n\n#   ./fake-vcf.py ../ref/ref.fa > calls.vcf\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/vcfcov/calls3/Makefile" : {
      "ObjectId" : "e0f8594f271c54ed99c4450ef263806a49a829ec",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test two samples on several overlapping variants\n\n#\n\n# max vars=4, max-allele=20\n\n#\n\n# large ref insertion to ignore\n\n# 1 that can be done\n\n# block of 5 that can't be done\n\n# 2 that can be done\n\n# <gap>\n\n# 3 snps\n\n# <gap>\n\n# large ref deletion to ignore\n\n# 2 that can be done\n\n# block  of 8 that can't\n\n# 1 that can be done\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ref:80C>T num kmers => 85-80=5, k=21, 5+(k-5)*2 = 37, mean cov = (5*2+35*1)/37 = 1.21\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/vcfcov/calls4/Makefile" : {
      "ObjectId" : "bef0f4ab68f6df7cd709d0efcaef47c81ee49881",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test variants exactly k-1 bp apart (mix of SNPs, insertions and deletions)\n\n#\n\n# Test files (calls.vcf pluto.fa) made with:\n\n#   python3 fake-spaced-vcf.py ../ref/ref.fa 21 pluto 2 3 > calls.vcf 2> pluto.fa\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/vcfcov/calls5/Makefile" : {
      "ObjectId" : "0adc438f4bb8d2e75f510d647499350ec97acd4c",
      "LastModified" : "2018-08-20T12:09:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Test that large indels are used and the variants they overlap are not grouped\n\n# with them to stop genotyping of near by variants\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 78
  },
  "ElapsedTime" : 1886
}