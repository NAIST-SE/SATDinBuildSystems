{
  "Repository" : "41094654",
  "Revision" : "HEAD",
  "ObjectId" : "f89bf12a739d5bc5d3ccfefd6c0918924d41f94c",
  "CommitTime" : "2018-04-04T17:36:55Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d3d47047b3d77ed328ef61bda7d94ce1a5dd2c36",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -------------------- Profiling ---------------------------------\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---------------------- modules ------------------------------------\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -------------------- tests ----------------------------------\r\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---------------------- status message -----------------------------\r\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------- examples ---------------------------\r\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------------------- install ----------------------------\r\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/CMakeMacros.cmake" : {
      "ObjectId" : "bcdd833fed985c7891cd4f9199c6d3fccd9d7a0c",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Cuda.cmake" : {
      "ObjectId" : "1910c40804baf8fc6ecefb955a1c6139c3205feb",
      "LastModified" : "2017-03-08T22:32:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of arch names\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# set CUDA_ARCH_NAME strings (so it will be seen as dropbox in CMake-Gui)\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# verify CUDA_ARCH_NAME value\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# (${CUDA_ARCH_NAME} STREQUAL \"Manual\")\n",
        "Line" : 87,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# User explicitly specified PTX for the concrete BIN\n",
        "Line" : 104,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/FindCUDA.cmake" : {
      "ObjectId" : "742cdab50d89394ef9f4190d8ed96451188169a6",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# .. note::\n\n#\n\n#   The FindCUDA module has been superseded by first-class support\n\n#   for the CUDA language in CMake.  It is no longer necessary to\n\n#   use this module or call ``find_package(CUDA)``.  This module\n\n#   now exists only for compatibility with projects that have not\n\n#   been ported.\n\n#\n\n#   Instead, list ``CUDA`` among the languages named in the top-level\n\n#   call to the :command:`project` command, or call the\n\n#   :command:`enable_language` command with ``CUDA``.\n\n#   Then one can add CUDA (``.cu``) sources to programs directly\n\n#   in calls to :command:`add_library` and :command:`add_executable`.\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on Linux,\n\n# Windows, and macOS and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard :command:`find_package` arguments of\n\n# ``<VERSION>``, ``REQUIRED`` and ``QUIET``.  ``CUDA_FOUND`` will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify ``CUDA_TOOLKIT_ROOT_DIR`` if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and ``REQUIRED`` is specified to :command:`find_package`.  To use\n\n# a different installed version of the toolkit set the environment variable\n\n# ``CUDA_BIN_PATH`` before running cmake (e.g.\n\n# ``CUDA_BIN_PATH=/usr/local/cuda1.0`` instead of the default\n\n# ``/usr/local/cuda``) or set ``CUDA_TOOLKIT_ROOT_DIR`` after configuring.  If\n\n# you change the value of ``CUDA_TOOLKIT_ROOT_DIR``, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set ``CUDA_TOOLKIT_ROOT_DIR`` manually on certain\n\n# platforms, or to use a CUDA runtime not installed in the default\n\n# location.  In newer versions of the toolkit the CUDA library is\n\n# included with the graphics driver -- be sure that the driver version\n\n# matches what is needed by the CUDA runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# ``CUDA_ADD_EXECUTABLE``, ``CUDA_ADD_LIBRARY``, ``CUDA_COMPILE``,\n\n# ``CUDA_COMPILE_PTX``, ``CUDA_COMPILE_FATBIN``, ``CUDA_COMPILE_CUBIN``\n\n# or ``CUDA_WRAP_SRCS``::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_LINK_LIBRARIES_KEYWORD (Default \"\")\n\n#    -- The <PRIVATE|PUBLIC|INTERFACE> keyword to use for internal\n\n#       target_link_libraries calls. The default is to use no keyword which\n\n#       uses the old \"plain\" form of target_link_libraries. Note that is matters\n\n#       because whatever is used inside the FindCUDA module must also be used\n\n#       outside - the two forms of target_link_libraries cannot be mixed.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\n\n#      the command is run from within VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#      Note that this is a function instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cudadevrt_LIBRARY -- Device runtime library.\n\n#                             Required for separable compilation.\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5 - 8.0.\n\n#   CUDA_nppial_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicom_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppidei_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppif_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppig_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppim_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppist_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppisu_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppitc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 413,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 457,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 462,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 473,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 475,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 480,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 485,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 491,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 535,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 544,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 562,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accommodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 605,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 607,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n#  End of unset()\n\n#\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n#  Start looking for things\n\n#\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 653,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Now search default paths\n",
        "Line" : 665,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 675,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Support for NVPACK\n",
        "Line" : 692,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Support for arm cross compilation\n",
        "Line" : 695,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Support for aarch64 cross compilation\n",
        "Line" : 698,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\n",
        "Line" : 712,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\n",
        "Line" : 722,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compute the version.\n",
        "Line" : 744,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 751,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 757,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 762,
        "CharPositionInLine" : 21
      },
      "56" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 785,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 789,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 801,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 822,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\n",
        "Line" : 836,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# If not available, silently disable the option.\n",
        "Line" : 839,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 856,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 862,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\n",
        "Line" : 879,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 888,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 901,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 911,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 919,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 928,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 935,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 943,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 945,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 952,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# In CUDA 9.0 NPP was nppi was removed\n",
        "Line" : 965,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\n",
        "Line" : 980,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 989,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 1001,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 1013,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1025,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 1027,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 1037,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 1042,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 1046,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 1067,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1092,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "##############################################################################\n",
        "Line" : 1107,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 1113,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1137,
        "CharPositionInLine" : 8
      },
      "96" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1144,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1150,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1155,
        "CharPositionInLine" : 8
      },
      "99" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1166,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1185,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1204,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1211,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1215,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1226,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1229,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1231,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1233,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1235,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1238,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1244,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1247,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# Put optional arguments in list.\n",
        "Line" : 1265,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\n\n# remove it from the list.\n",
        "Line" : 1267,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1277,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1282,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1286,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Emulation.\n",
        "Line" : 1288,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1291,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# $(VCInstallDir)/bin.\n",
        "Line" : 1317,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1327,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1337,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\n\n# cuda_compile_* functions), need to query directory properties to get include directories\n\n# and compile definitions.\n",
        "Line" : 1340,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\n\n# include dirs set by the user, whether via directory properties or target properties\n",
        "Line" : 1349,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Do the same thing with compile definitions\n",
        "Line" : 1354,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1359,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1369,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1372,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# STATIC\n",
        "Line" : 1378,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1384,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1386,
        "CharPositionInLine" : 4
      },
      "131" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1392,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1401,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1404,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1408,
        "CharPositionInLine" : 6
      },
      "135" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1428,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1434,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1439,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1451,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1454,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1457,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1459,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1466,
        "CharPositionInLine" : 6
      },
      "143" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1489,
        "CharPositionInLine" : 8
      },
      "144" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1497,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1510,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1528,
        "CharPositionInLine" : 6
      },
      "147" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1539,
        "CharPositionInLine" : 6
      },
      "148" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1543,
        "CharPositionInLine" : 31
      },
      "149" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1547,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1559,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1562,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1569,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1577,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1584,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1601,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1614,
        "CharPositionInLine" : 6
      },
      "157" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1617,
        "CharPositionInLine" : 8
      },
      "158" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1621,
        "CharPositionInLine" : 8
      },
      "159" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1635,
        "CharPositionInLine" : 6
      },
      "160" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1640,
        "CharPositionInLine" : 6
      },
      "161" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1648,
        "CharPositionInLine" : 2
      },
      "162" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1663,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1669,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1681,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1687,
        "CharPositionInLine" : 27
      },
      "166" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1692,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1700,
        "CharPositionInLine" : 4
      },
      "168" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1704,
        "CharPositionInLine" : 6
      },
      "169" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1712,
        "CharPositionInLine" : 4
      },
      "170" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1717,
        "CharPositionInLine" : 6
      },
      "171" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1727,
        "CharPositionInLine" : 4
      },
      "172" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1734,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1739,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1745,
        "CharPositionInLine" : 6
      },
      "175" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1779,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1788,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1791,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1796,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# Add the library.\n",
        "Line" : 1800,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1807,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1822,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1832,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1841,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1843,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1846,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# Add the library.\n",
        "Line" : 1850,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1857,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1866,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1876,
        "CharPositionInLine" : 0
      },
      "190" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\n",
        "Line" : 1882,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1893,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1896,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1904,
        "CharPositionInLine" : 0
      },
      "194" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1913,
        "CharPositionInLine" : 0
      },
      "195" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1922,
        "CharPositionInLine" : 0
      },
      "196" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1931,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1941,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1954,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1967,
        "CharPositionInLine" : 0
      },
      "200" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1973,
        "CharPositionInLine" : 2
      },
      "201" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1984,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 202
    },
    "cmake/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "7b5389ec51fdad7df760df0666809105e3239c09",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Extra output\n\n#\n\n# input_file:FILEPATH=<>   Path to dependecy file in makefile format\n\n#\n\n# output_file:FILEPATH=<>  Path to file with dependencies in CMake readable variable\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we check to see if we have a file, before asking if it is not a directory.\n\n# if(NOT IS_DIRECTORY \"\") will return TRUE.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "86051cf56ed154734688a6cc23bf1222841d6705",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 64,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 66,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 67,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 71,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 74,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 77,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 78,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in lua quotes see #16510 ).\n",
        "Line" : 79,
        "CharPositionInLine" : 75
      },
      "22" : {
        "Text" : "# string\n",
        "Line" : 80,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\n",
        "Line" : 81,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 159,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Note that this will remove all occurrences of -G.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Generate the code\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 53
    },
    "cmake/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "b604a179043d992717adb6ceeff60a4a14d327b7",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 131,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 187,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 191,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cmake/FindNVToolsExt.cmake" : {
      "ObjectId" : "d7464bbb0e8cb41d0cc00dfcfadb073286e9b068",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindWt.cmake" : {
      "ObjectId" : "9f819b6bacd4404ac88cf7390dab86226a3d90c6",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Wt includes and libraries\n\n#\n\n# This script sets the following variables:\n\n#\n\n#  Wt_INCLUDE_DIR\n\n#  Wt_LIBRARIES  - Release libraries\n\n#  Wt_FOUND  - True if release libraries found\n\n#  Wt_DEBUG_LIBRARIES  - Debug libraries\n\n#  Wt_DEBUG_FOUND  - True if debug libraries found\n\n#\n\n# To direct the script to a particular Wt installation, use the\n\n# standard cmake variables CMAKE_INCLUDE_PATH and CMAKE_LIBRARY_PATH\n\n#\n\n# To use this script to find Wt, when using the new style for include files:\n\n#   #include <Wt/WLineEdit>\n\n#   #include <Wt/Ext/LineEdit>\n\n#   #include <Wt/Chart/WPieChart>\n\n#\n\n# include the following CMake snippet in your project:\n\n#\n\n#  FIND_PACKAGE( Wt REQUIRED )\n\n#  INCLUDE_DIRECTORIES( ${Wt_INCLUDE_DIR} )\n\n#  TARGET_LINK_LIBRARIES( yourexe\n\n#    ${Wt_DEBUG_LIBRARY}        # or {Wt_LIBRARY}\n\n#    ${Wt_HTTP_DEBUG_LIBRARY}   # or {Wt_HTTP_LIBRARY}\n\n#    ${Wt_EXT_DEBUG_LIBRARY}    # or {Wt_EXT_LIBRARY}\n\n#  )\n\n#\n\n# To use this script to find Wt, when using the old include style:\n\n#   #include <WLineEdit>\n\n#   #include <Ext/LineEdit>\n\n#   #include <Chart/WPieChart>\n\n# style of include files, change the INCLUDE_DIRECTORIES statement to:\n\n#   INCLUDE_DIRECTORIES( ${Wt_INCLUDE_DIR} ${Wt_INCLUDE_DIR}/Wt )\n\n#\n\n#\n\n#\n\n#\n\n# Copyright (c) 2007, Pau Garcia i Quiles, <pgquiles@elpauer.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindZeroMQ.cmake" : {
      "ObjectId" : "551565556321f5c56f00e4571105450d5b2652eb",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##=============================================================================\r\n\n##\r\n\n##  Copyright (c) Kitware, Inc.\r\n\n##  All rights reserved.\r\n\n##  See LICENSE.txt for details.\r\n\n##\r\n\n##  This software is distributed WITHOUT ANY WARRANTY; without even\r\n\n##  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\r\n\n##  PURPOSE.  See the above copyright notice for more information.\r\n\n##\r\n\n##=============================================================================\r\n\n# - Try to find ZeroMQ headers and libraries\r\n\n#\r\n\n# Usage of this module as follows:\r\n\n#\r\n\n#     find_package(ZeroMQ)\r\n\n#\r\n\n# Variables used by this module, they can change the default behaviour and need\r\n\n# to be set before calling find_package:\r\n\n#\r\n\n#  ZeroMQ_ROOT_DIR  Set this variable to the root installation of\r\n\n#                            ZeroMQ if the module has problems finding\r\n\n#                            the proper installation path.\r\n\n#\r\n\n# Variables defined by this module:\r\n\n#\r\n\n#  ZeroMQ_FOUND              System has ZeroMQ libs/headers\r\n\n#  ZeroMQ_LIBRARIES          The ZeroMQ libraries\r\n\n#  ZeroMQ_INCLUDE_DIR        The location of ZeroMQ headers\r\n\n#  ZeroMQ_VERSION            The version of ZeroMQ\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add in all the names it can have on windows\r\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#now try to find the release and debug version\r\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#We are using the 2.8.10 signature of find_package_handle_standard_args,\r\n\n#as that is the version that ParaView 5.1 && VTK 6/7 ship, and inject\r\n\n#into the CMake module path. This allows our FindModule to work with\r\n\n#projects that include VTK/ParaView before searching for Remus\r\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Findcereal.cmake" : {
      "ObjectId" : "f23665ca2e4f8bd5c681018c2896a214fd485e12",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCVPCHSupport.cmake" : {
      "ObjectId" : "149d42d0678f31178dfe5b0ae68a2a08ca76c6ff",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# taken from http://public.kitware.com/Bug/view.php?id=1260 and slightly adjusted\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find precompiled headers support for GCC 3.4 and 4.x\r\n\n# Once done this will define:\r\n\n#\r\n\n# Variable:\r\n\n#   PCHSupport_FOUND\r\n\n#\r\n\n# Macro:\r\n\n#   ADD_PRECOMPILED_HEADER  _targetName _input  _dowarn\r\n\n#   ADD_PRECOMPILED_HEADER_TO_TARGET _targetName _input _pch_output_to_use _dowarn\r\n\n#   ADD_NATIVE_PRECOMPILED_HEADER _targetName _input _dowarn\r\n\n#   GET_NATIVE_PRECOMPILED_HEADER _targetName _input\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MESSAGE(\"GCC Version: ${gcc_compiler_version}\")\r\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "## TODO ... ? or does it work out of the box\r\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# remove leading space in compiler argument\r\n",
        "Line" : 129,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "#/out:${_output}\r\n",
        "Line" : 148,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# for use with distcc and gcc >4.0.1 if preprocessed files are accessible\r\n\n# on all remote machines set\r\n\n# PCH_ADDITIONAL_COMPILER_FLAGS to -fpch-preprocess\r\n\n# if you want warnings for invalid header files (which is very inconvenient\r\n\n# if you have different versions of the headers for different build types\r\n\n# you may set _pch_dowarn\r\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# to do: test whether compiler flags match between target  _targetName\r\n\n# and _pch_output_to_use\r\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#MESSAGE(\"Add flags ${_target_cflags} to ${_targetName} \" )\r\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#MESSAGE(\"_compile_FLAGS: ${_compile_FLAGS}\")\r\n\n#message(\"COMMAND ${CMAKE_CXX_COMPILER}\t${_compile_FLAGS} -x c++-header -o ${_output} ${_input}\")\r\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# ensure same directory! Required by gcc\r\n",
        "Line" : 275,
        "CharPositionInLine" : 103
      },
      "11" : {
        "Text" : "#message(\"_command  ${_input} ${_output}\")\r\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Generates the use of precompiled in a target,\r\n\n# without using depency targets (2 extra for each target)\r\n\n# Using Visual, must also add ${_targetName}_pch to sources\r\n\n# Not needed by Xcode\r\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check if contents is the same, if not rewrite\r\n\n# todo\r\n",
        "Line" : 309,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Auto include the precompile (useful for moc processing, since the use of\r\n\n# precompiled is specified at the target level\r\n\n# and I don't want to specifiy /F- for each moc/res/ui generated files (using Qt)\r\n",
        "Line" : 329,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "#also inlude ${oldProps} to have the same compile options\r\n",
        "Line" : 341,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# For Xcode, cmake needs my patch to process\r\n\n# GCC_PREFIX_HEADER and GCC_PRECOMPILE_PREFIX_HEADER as target properties\r\n",
        "Line" : 346,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# When buiding out of the tree, precompiled may not be located\r\n\n# Use full path instead.\r\n",
        "Line" : 349,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "#Fallback to the \"old\" precompiled suppport\r\n\n#ADD_PRECOMPILED_HEADER(${_targetName} ${_input} ${_dowarn})\r\n",
        "Line" : 358,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 19
    },
    "cmake/OpenCVParseHeader.cmake" : {
      "ObjectId" : "ff7a3485df68d9dab8a1780e725401fb3d161643",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/dependencies/boost.cmake" : {
      "ObjectId" : "c5bbb7b4c89aeaaf3c2f92ee6d1295f9f2732336",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/dependencies/cereal.cmake" : {
      "ObjectId" : "d44734bc8eee7c9870a4e5dc8b5312bf05077183",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/dependencies/cuda.cmake" : {
      "ObjectId" : "e5591bebbadd8cc03bb3ae38334b9e9b257c57b8",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/dependencies/opencv.cmake" : {
      "ObjectId" : "ef8356343f4f59c70b960db404b7f4b2858187b4",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/dependencies/python.cmake" : {
      "ObjectId" : "3db894cc5b2c13f117408113b4b43149fb545c66",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the matching boost python implementation\n",
        "Line" : 22,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 1
    },
    "cmake/dependencies/qt5.cmake" : {
      "ObjectId" : "fb3fb726f0b82d959b7916b6e2e6e94cc84d5754",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#QT5_WRAP_CPP(MOC \"${CMAKE_CURRENT_LIST_DIR}/include/MetaObject/params/ui/Qt/SignalProxy.hpp\")\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake/dependencies/rcc.cmake" : {
      "ObjectId" : "4e60da4483ef03402d5567248db8a6384044aaab",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/dependencies/wt.cmake" : {
      "ObjectId" : "df142b59bb2c6f21afae2bb7c8c09464e40c6fb1",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/dependencies/zeromq.cmake" : {
      "ObjectId" : "ad54ef36fb431f1b42441442dcce69efaf71cef1",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cpp bindings\n",
        "Line" : 5,
        "CharPositionInLine" : 75
      },
      "CommentCount" : 1
    },
    "cmake/metaobject_declare_module.cmake" : {
      "ObjectId" : "e075c864461d0ed9b1db13624eaeed8297bc83b1",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/metaobject_dependencies.cmake" : {
      "ObjectId" : "d1513a98a3c5ca42a162f1354d9cc9df28a46f65",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "b37f9c0c5f96f4319a4fbc55d6f09e5230f7a7d2",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/console_recompile/CMakeLists.txt" : {
      "ObjectId" : "25a5cd11136682413d9663e9f1d28e0b2af5ed46",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/console_reflection/CMakeLists.txt" : {
      "ObjectId" : "325db81290516b13e3d6d23a3db1de7f2625fb6d",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/python/CMakeLists.txt" : {
      "ObjectId" : "65693bea0d1130ddeb157aa84786c2cceed87223",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/qt_gui/CMakeLists.txt" : {
      "ObjectId" : "71272755864cf93a48f01b7a8d6b296364be2124",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/wt_gui/CMakeLists.txt" : {
      "ObjectId" : "1bc6f7c8b358917583a5e3b1879cd91e013e3692",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/core/CMakeLists.txt" : {
      "ObjectId" : "2536436d8ff35ebe0053f4dea840a54fad10fa18",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/gui/CMakeLists.txt" : {
      "ObjectId" : "ed3cc0c470df21dfb59af400afcc50adc26aa5fe",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/metaparams/CMakeLists.txt" : {
      "ObjectId" : "769c5739dc83b2de60fdc6eba90caacd37333b12",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/object/CMakeLists.txt" : {
      "ObjectId" : "3315a3f39a9eb1ddf310d06b54c89c39e97fea00",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/params/CMakeLists.txt" : {
      "ObjectId" : "874fc0c413e3ad8335018d577f3739b0c38bd669",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/python/CMakeLists.txt" : {
      "ObjectId" : "dc25f5eea123a2c77892e3d40c69432b772a3df2",
      "LastModified" : "2017-12-23T16:19:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/serialization/CMakeLists.txt" : {
      "ObjectId" : "c0893ddcbff193636ca75003e182ba56a2017aa1",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "6352ca936b790a7e3f67c12477c4cb70ff5b1997",
      "LastModified" : "2017-12-23T00:43:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------- tests -----------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 39
  },
  "ElapsedTime" : 1220
}