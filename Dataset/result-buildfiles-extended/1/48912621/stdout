{
  "Repository" : "48912621",
  "Revision" : "HEAD",
  "ObjectId" : "a8d460f85382ed968c7754207aea3271a6a21901",
  "CommitTime" : "2019-03-28T15:13:38Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "391516cdd86cf3b9692720faa967484029be82ab",
      "LastModified" : "2019-01-26T12:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n##  Copyright 2016-2018 libfptu authors: please see AUTHORS file.\n\n##\n\n##  This file is part of libfptu, aka \"Fast Positive Tuples\".\n\n##\n\n##  libfptu is free software: you can redistribute it and/or modify\n\n##  it under the terms of the GNU General Public License as published by\n\n##  the Free Software Foundation, either version 3 of the License, or\n\n##  (at your option) any later version.\n\n##\n\n##  libfptu is distributed in the hope that it will be useful,\n\n##  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n##  GNU General Public License for more details.\n\n##\n\n##  You should have received a copy of the GNU General Public License\n\n##  along with libfptu.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n##  libfptu = { Fast Positive Tuples, aka Позитивные Кортежи }\n\n##\n\n##  The kind of lightweight linearized tuples, which are extremely handy\n\n##  to machining, including cases with shared memory.\n\n##  Please see README.md at https://github.com/leo-yuriev/libfptu\n\n##\n\n##  The Future will Positive. Всё будет хорошо.\n\n##\n\n##  \"Позитивные Кортежи\" дают легковесное линейное представление небольших\n\n##  JSON-подобных структур в экстремально удобной для машины форме,\n\n##  в том числе при размещении в разделяемой памяти.\n\n##\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Set default build type to Release. This is to ease a User's life.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define GNU standard installation directories\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the order is significant: we need to know os and compiler to configure libs\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# LY: cmake is ugly and nasty.\n\n#      - therefore memcheck-options should be defined before including ctest;\n\n#      - otherwise ctest may ignore it.\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\n\n# Enable 'make tags' target.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\n\n# Enable 'make reformat' target.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#######################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake.fptu/arch.cmake" : {
      "ObjectId" : "9d82e46940ad97020a047c7fff454b5eb4c84242",
      "LastModified" : "2017-07-12T11:32:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# We do not perform host-to-network byte order translation,\n\n# and simply assume the machine is little-endian.\n\n# We also do not bother with trying to avoid unaligned\n\n# word access. Refuse to compile on rare hardware such as\n\n# Sparc or Itanium.\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Bug in CMake, Darwin always detect on i386\n\n# Fixed with check types\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake.fptu/compiler.cmake" : {
      "ObjectId" : "4f24a61add21cf9878dd7627512a9d9ac564e847",
      "LastModified" : "2019-01-26T12:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check if the same compile family is used for both C and CXX\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We support building with Clang and gcc. First check\n\n# what we're using for build.\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# cmake 2.8.9 and earlier doesn't support CMAKE_CXX_COMPILER_VERSION\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Hard coding the compiler version is ugly from cmake POV, but\n\n# at least gives user a friendly error message. The most critical\n\n# demand for C++ compiler is support of C++11 lambdas, added\n\n# only in version 4.5 https://gcc.gnu.org/projects/cxx0x.html\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check for Elbrus lcc\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check for Elbrus l++\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# GCC started to warn for unused result starting from 4.2, and\n\n# this is when it introduced -Wno-unused-result\n\n# GCC can also be built on top of llvm runtime (on mac).\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\n\n# Check for an omp support\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\n\n# Check for LTO support by GCC\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# check for LTO by MSVC\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Check for LTO support by CLANG\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Perform build type specific configuration.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We only know this option to work with gcc\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Use GNU bfd if present.\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# In C a global variable without a storage specifier (static/extern) and\n\n# without an initialiser is called a ’tentative definition’. The\n\n# language permits multiple tentative definitions in the single\n\n# translation unit; i.e. int foo; int foo; is perfectly ok. GNU\n\n# toolchain goes even further, allowing multiple tentative definitions\n\n# in *different* translation units. Internally, variables introduced via\n\n# tentative definitions are implemented as ‘common’ symbols. Linker\n\n# permits multiple definitions if they are common symbols, and it picks\n\n# one arbitrarily for inclusion in the binary being linked.\n\n#\n\n# -fno-common forces GNU toolchain to behave in a more\n\n# standard-conformant way in respect to tentative definitions and it\n\n# prevents common symbols generation. Since we are a cross-platform\n\n# project it really makes sense. There are toolchains that don’t\n\n# implement GNU style handling of the tentative definitions and there\n\n# are platforms lacking proper support for common symbols (osx).\n\n#\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# LY: save initial C/CXX flags\n",
        "Line" : 343,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# LY: reset C/CXX flags\n",
        "Line" : 357,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We must set -fno-omit-frame-pointer here, since we rely\n\n# on frame pointer when getting a backtrace, and it must\n\n# be used consistently across all object files.\n\n# The same reasoning applies to -fno-stack-protector switch.\n",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# G++ bug. http://gcc.gnu.org/bugzilla/show_bug.cgi?id=31488\n",
        "Line" : 414,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Only add -Werror if it's a debug build, done by developers.\n\n# Release builds should not cause extra trouble.\n",
        "Line" : 423,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# add_library(gcov SHARED IMPORTED)\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Pass the same optimization flags to the linker\n",
        "Line" : 464,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# LY: push C/CXX flags into the cache\n",
        "Line" : 527,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Check if -D_GNU_SOURCE has been defined and add this flag to\n\n# CMAKE_REQUIRED_DEFINITIONS in order to get check_prototype_definition work\n",
        "Line" : 565,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# determine library for for std::filesystem\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cmake.fptu/multilib.cmake" : {
      "ObjectId" : "0d5013e98b222323f7fcf36fd5e9a541335c3873",
      "LastModified" : "2017-07-12T11:32:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Comment from GNUInstallDirs.cmake:\n\n# Override this default 'lib' with 'lib64' if:\n\n#  - we are on Linux system but NOT cross-compiling\n\n#  - we are NOT on debian\n\n#  - we are on a 64 bits system\n\n# reason is: amd64 ABI: http://www.x86-64.org/documentation/abi.pdf\n\n# For Debian with multiarch, use 'lib/${CMAKE_LIBRARY_ARCHITECTURE}' if\n\n# CMAKE_LIBRARY_ARCHITECTURE is set (which contains e.g. \"i386-linux-gnu\"\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Debian\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Not debian, rely on CMAKE_SIZEOF_VOID_P:\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake.fptu/os.cmake" : {
      "ObjectId" : "433997eb05d88fe9e66296a082416ca4b58f7124",
      "LastModified" : "2017-09-05T13:57:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Perform operating-system specific configuration.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Enable GNU glibc extentions.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# On 32-bit systems, support files larger than 2GB\n\n# (see man page for feature_test_macros).\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Debian/kFreeBSD uses GNU glibc.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n# Default build type is None, which uses depends by Apple\n\n# command line tools. Also supportting install with MacPorts.\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Mac ports get installed into /opt/local, hence:\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# In Mac OS, the dynamic linker recognizes\n\n# @loader_path, @executable_path and @rpath tokens, ex:\n\n#   '@loder_path/lit.dylib'\n\n# means load lib from the same dir the requesting binary lives in.\n\n# Since our dynamic libraries aren't intended for static linking,\n\n# this is pretty much irrelevant. Disable CMake rpath features\n\n# altogether. Suppresses a few warnings.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake.fptu/profile.cmake" : {
      "ObjectId" : "5c4409690a0398f6e17607414a162f4e2e450696",
      "LastModified" : "2017-07-12T11:32:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake.fptu/testing.cmake" : {
      "ObjectId" : "a8101499fb4206e1052d767b00b69f8720ce9d1e",
      "LastModified" : "2019-02-26T21:35:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##  Copyright 2010-2018 libfptu authors: please see AUTHORS file.\n\n##\n\n##  This file is part of libfptu, aka \"Fast Positive Tuples\".\n\n##\n\n##  libfptu is free software: you can redistribute it and/or modify\n\n##  it under the terms of the GNU General Public License as published by\n\n##  the Free Software Foundation, either version 3 of the License, or\n\n##  (at your option) any later version.\n\n##\n\n##  libfptu is distributed in the hope that it will be useful,\n\n##  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n##  GNU General Public License for more details.\n\n##\n\n##  You should have received a copy of the GNU General Public License\n\n##  along with libfptu.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expected GTest was already found and/or pointed via ${gtest_root},\n\n# otherwise will search at ${gtest_paths} locations, if defined or default ones.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(STATUS \"gtest_paths = ${gtest_paths}\")\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Prevent overriding the parent project's compiler/linker\n\n# settings on Windows\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add googletest directly to our build. This defines\n\n# the gtest and gtest_main targets.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Windows don't have RPATH feature,\n\n# therefore we should prepare PATH or copy DLL(s)\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# will use LOCATION property to compose DLLPATH\n",
        "Line" : 137,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Windows don't have RPATH feature,\n\n# therefore we should prepare PATH or copy DLL(s)...\n",
        "Line" : 187,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Could not provide static ENVIRONMENT property with configuration-depended path\n",
        "Line" : 190,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Path is configuration-depended or not available, should copy dll\n",
        "Line" : 219,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# FIXME: unless there are any other ideas how to fix the\n\n#        timeouts problem when testing under Valgrind.\n",
        "Line" : 236,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Compose DLL's path in the ENVIRONMENT property\n",
        "Line" : 243,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "cmake.fptu/utils.cmake" : {
      "ObjectId" : "e75306a8039d2f6c8a7d39269d6a59d0e1f9c300",
      "LastModified" : "2018-07-23T13:31:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake believes that Objective C is a flavor of C++, not C,\n\n# and uses g++ compiler for .m files.\n\n# LANGUAGE property forces CMake to use CC for ${file}\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# message(STATUS \"Set (${file} ${_flags}\")\n",
        "Line" : 31,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Try to get version from VERSION file\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "efd97c771e91c33008fceb94d6f85d9a139bbc75",
      "LastModified" : "2019-01-26T12:25:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n##  Copyright 2016-2018 libfptu authors: please see AUTHORS file.\n\n##\n\n##  This file is part of libfptu, aka \"Fast Positive Tuples\".\n\n##\n\n##  libfptu is free software: you can redistribute it and/or modify\n\n##  it under the terms of the GNU General Public License as published by\n\n##  the Free Software Foundation, either version 3 of the License, or\n\n##  (at your option) any later version.\n\n##\n\n##  libfptu is distributed in the hope that it will be useful,\n\n##  but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n##  GNU General Public License for more details.\n\n##\n\n##  You should have received a copy of the GNU General Public License\n\n##  along with libfptu.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n##  libfptu = { Fast Positive Tuples, aka Позитивные Кортежи }\n\n##\n\n##  The kind of lightweight linearized tuples, which are extremely handy\n\n##  to machining, including cases with shared memory.\n\n##  Please see README.md at https://github.com/leo-yuriev/libfptu\n\n##\n\n##  The Future will Positive. Всё будет хорошо.\n\n##\n\n##  \"Позитивные Кортежи\" дают легковесное линейное представление небольших\n\n##  JSON-подобных структур в экстремально удобной для машины форме,\n\n##  в том числе при размещении в разделяемой памяти.\n\n##\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Get version\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################\n\n#\n\n# library build info (used in library version output)\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# get definitions as a string of \"-Dxyz=124 ...\"\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get target compile options as a list\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append cmake's common cxx flags and defines\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# append cmake's build-type flags and defines\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# append linker dll's options\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# drop duplicates in the option list\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# make string of space separated flags\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# add dynamic part via per-configuration define\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# make a build-target triplet\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# via per-configuration define\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# generate version file\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/erthink/CMakeLists.txt" : {
      "ObjectId" : "d910e23bd9f187495a506177961a5cae94a9766c",
      "LastModified" : "2019-02-26T21:35:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Copyright (c) 2012-2019 Leonid Yuriev <leo@yuriev.ru>.\n\n## ZLib License\n\n##\n\n## This software is provided 'as-is', without any express or implied\n\n## warranty. In no event will the authors be held liable for any damages\n\n## arising from the use of this software.\n\n##\n\n## Permission is granted to anyone to use this software for any purpose,\n\n## including commercial applications, and to alter it and redistribute it\n\n## freely, subject to the following restrictions:\n\n##\n\n## 1. The origin of this software must not be misrepresented; you must not\n\n##    claim that you wrote the original software. If you use this software\n\n##    in a product, an acknowledgement in the product documentation would be\n\n##    appreciated but is not required.\n\n## 2. Altered source versions must be plainly marked as such, and must not be\n\n##    misrepresented as being the original software.\n\n## 3. This notice may not be removed or altered from any source distribution.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n##  This CMakeLists.txt required for testing, but most things are header-only.\n\n##  https://github.com/leo-yuriev/erthink\n\n##\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Set default build type to Release. This is to ease a User's life.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# LY: cmake is ugly and nasty.\n\n#      - therefore memcheck-options should be defined before including ctest;\n\n#      - otherwise ctest may ignore it.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# Enable 'make tags' target.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\n\n# Enable 'make reformat' target.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#######################################################################\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/erthink/cmake/profile.cmake" : {
      "ObjectId" : "5c4409690a0398f6e17607414a162f4e2e450696",
      "LastModified" : "2018-12-19T14:40:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/erthink/cmake/testing.cmake" : {
      "ObjectId" : "e5979274cd30281e64bdf2b5dd460bd9c0849d73",
      "LastModified" : "2019-02-26T21:35:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## Copyright (c) 2012-2019 Leonid Yuriev <leo@yuriev.ru>.\n\n##\n\n## This software is provided 'as-is', without any express or implied\n\n## warranty. In no event will the authors be held liable for any damages\n\n## arising from the use of this software.\n\n##\n\n## Permission is granted to anyone to use this software for any purpose,\n\n## including commercial applications, and to alter it and redistribute it\n\n## freely, subject to the following restrictions:\n\n##\n\n## 1. The origin of this software must not be misrepresented; you must not\n\n##    claim that you wrote the original software. If you use this software\n\n##    in a product, an acknowledgement in the product documentation would be\n\n##    appreciated but is not required.\n\n## 2. Altered source versions must be plainly marked as such, and must not be\n\n##    misrepresented as being the original software.\n\n## 3. This notice may not be removed or altered from any source distribution.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expected GTest was already found and/or pointed via ${gtest_root},\n\n# otherwise will search at ${gtest_paths} locations, if defined or default ones.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(STATUS \"gtest_paths = ${gtest_paths}\")\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Prevent overriding the parent project's compiler/linker\n\n# settings on Windows\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add googletest directly to our build. This defines\n\n# the gtest and gtest_main targets.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The gtest/gtest_main targets carry header search path\n\n# dependencies automatically when using CMake 2.8.11 or\n\n# later. Otherwise we have to add them here ourselves.\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Windows don't have RPATH feature,\n\n# therefore we should prepare PATH or copy DLL(s)\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# will use LOCATION property to compose DLLPATH\n",
        "Line" : 153,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Windows don't have RPATH feature,\n\n# therefore we should prepare PATH or copy DLL(s)...\n",
        "Line" : 203,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Could not provide static ENVIRONMENT property with configuration-depended path\n",
        "Line" : 206,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# Path is configuration-depended or not available, should copy dll\n",
        "Line" : 239,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# FIXME: unless there are any other ideas how to fix the\n\n#        timeouts problem when testing under Valgrind.\n",
        "Line" : 256,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Compose DLL's path in the ENVIRONMENT property\n",
        "Line" : 263,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 13
    },
    "src/erthink/test/CMakeLists.txt" : {
      "ObjectId" : "fe3edc3211ccf258163db3dd5ef4e5c91dc23e86",
      "LastModified" : "2019-02-26T21:35:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LY: reduce compilation time (significantly on Elbrus)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "f32400004bc04dc856a42d8bfd30fa56c14a06ee",
      "LastModified" : "2019-02-26T21:35:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LY: reduce compilation time (significantly on Elbrus)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_perf_test(abc_perf TIMEOUT 60 LIBRARY fptu)\n\n# add_long_test(xyz_long TIMEOUT 600 LIBRARY fptu)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 14
  },
  "ElapsedTime" : 1118
}