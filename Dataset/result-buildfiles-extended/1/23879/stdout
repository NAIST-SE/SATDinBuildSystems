{
  "Repository" : "23879",
  "Revision" : "HEAD",
  "ObjectId" : "16525505c6c41729d900780e4234291c2cf849b9",
  "CommitTime" : "2019-04-17T21:18:18Z",
  "Files" : {
    "3rdparty/docker/bootstrap/Makefile" : {
      "ObjectId" : "65a25224d5b08071ed2072aa01ab901ef2230fec",
      "LastModified" : "2018-11-20T20:53:13Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "data/develop/Makefile" : {
      "ObjectId" : "3bbcbf872884cfdd70fa1a7314f9a3e00c5a61da",
      "LastModified" : "2018-08-26T01:28:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## Haiku Generic Makefile v2.6 ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Fill in this file to specify the project being created, and the referenced\n\n## Makefile-Engine will do all of the hard work for you. This handles any\n\n## architecture of Haiku.\n\n##\n\n## For more information, see:\n\n## file:///system/develop/documentation/makefile-engine.html\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The name of the binary.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The type of binary, must be one of:\n\n#\tAPP:\tApplication\n\n#\tSHARED:\tShared library or add-on\n\n#\tSTATIC:\tStatic library archive\n\n#\tDRIVER: Kernel driver\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you plan to use localization, specify the application's MIME signature.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tThe following lines tell Pe and Eddie where the SRCS, RDEFS, and RSRCS are\n\n#\tso that Pe and Eddie can fill them in for you.\n\n#%{\n\n# @src->@\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tSpecify the source files to use. Full paths or paths relative to the\n\n#\tMakefile can be included. All files, regardless of directory, will have\n\n#\ttheir object files created in the common object directory. Note that this\n\n#\tmeans this Makefile will not work correctly if two source files with the\n\n#\tsame name (source.c or source.cpp) are included from different directories.\n\n#\tAlso note that spaces in folder names do not work well with this Makefile.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tSpecify the resource definition files to use. Full or relative paths can be\n\n#\tused.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tSpecify the resource files to use. Full or relative paths can be used.\n\n#\tBoth RDEFS and RSRCS can be utilized in the same Makefile.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# End Pe/Eddie support.\n\n# @<-src@\n\n#%}\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\tSpecify libraries to link against.\n\n#\tThere are two acceptable forms of library specifications:\n\n#\t-\tif your library follows the naming pattern of libXXX.so or libXXX.a,\n\n#\t\tyou can simply specify XXX for the library. (e.g. the entry for\n\n#\t\t\"libtracker.so\" would be \"tracker\")\n\n#\n\n#\t-\tfor GCC-independent linking of standard C++ libraries, you can use\n\n#\t\t$(STDCPPLIBS) instead of the raw \"stdc++[.r4] [supc++]\" library names.\n\n#\n\n#\t- \tif your library does not follow the standard library naming scheme,\n\n#\t\tyou need to specify the path to the library and it's name.\n\n#\t\t(e.g. for mylib.a, specify \"mylib.a\" or \"path/mylib.a\")\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tSpecify additional paths to directories following the standard libXXX.so\n\n#\tor libXXX.a naming scheme. You can specify full paths or paths relative\n\n#\tto the Makefile. The paths included are not parsed recursively, so\n\n#\tinclude all of the paths where libraries must be found. Directories where\n\n#\tsource files were specified are\tautomatically included.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\tAdditional paths to look for system headers. These use the form\n\n#\t\"#include <header>\". Directories that contain the files in SRCS are\n\n#\tNOT auto-included here.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\tAdditional paths paths to look for local headers. These use the form\n\n#\t#include \"header\". Directories that contain the files in SRCS are\n\n#\tautomatically included.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\tSpecify the level of optimization that you want. Specify either NONE (O0),\n\n#\tSOME (O1), FULL (O3), or leave blank (for the default optimization level).\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# \tSpecify the codes for languages you are going to support in this\n\n# \tapplication. The default \"en\" one must be provided too. \"make catkeys\"\n\n# \twill recreate only the \"locales/en.catkeys\" file. Use it as a template\n\n# \tfor creating catkeys for other languages. All localization files must be\n\n# \tplaced in the \"locales\" subdirectory.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\tSpecify all the preprocessor symbols to be defined. The symbols will not\n\n#\thave their values set automatically; you must supply the value (if any) to\n\n#\tuse. For example, setting DEFINES to \"DEBUG=1\" will cause the compiler\n\n#\toption \"-DDEBUG=1\" to be used. Setting DEFINES to \"DEBUG\" would pass\n\n#\t\"-DDEBUG\" on the compiler's command line.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\tSpecify the warning level. Either NONE (suppress all warnings),\n\n#\tALL (enable all warnings), or leave blank (enable default warnings).\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\tWith image symbols, stack crawls in the debugger are meaningful.\n\n#\tIf set to \"TRUE\", symbols will be created.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\tIncludes debug information, which allows the binary to be debugged easily.\n\n#\tIf set to \"TRUE\", debug info will be created.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\tSpecify any additional compiler flags to be used.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\tSpecify any additional linker flags to be used.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\tSpecify the version of this binary. Example:\n\n#\t\t-app 3 4 0 d 0 -short 340 -long \"340 \"`echo -n -e '\\302\\251'`\"1999 GNU GPL\"\n\n#\tThis may also be specified in a resource.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\t(Only used when \"TYPE\" is \"DRIVER\"). Specify the desired driver install\n\n#\tlocation in the /dev hierarchy. Example:\n\n#\t\tDRIVER_PATH = video/usb\n\n#\twill instruct the \"driverinstall\" rule to place a symlink to your driver's\n\n#\tbinary in ~/add-ons/kernel/drivers/dev/video/usb, so that your driver will\n\n#\tappear at /dev/video/usb when loaded. The default is \"misc\".\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Include the Makefile-Engine\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "headers/libs/libc++/CMakeLists.txt" : {
      "ObjectId" : "e16dc8b4de63d0a0e003050912147ab3c3e675ea",
      "LastModified" : "2015-11-09T17:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate and install a custom __config header. The new header is created\n\n# by  prepending __config_site to the current __config header.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Add a target that executes the generation commands.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Install the generated header as __config.\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "src/bin/network/ftp/Makefile" : {
      "ObjectId" : "79cc5a6060d426292ddb4530ff6e9c572e8ad57a",
      "LastModified" : "2015-11-09T17:02:17Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\t$NetBSD: Makefile,v 1.30 2005/02/11 15:13:28 jmc Exp $\n\n#\tfrom: @(#)Makefile\t8.2 (Berkeley) 4/3/94\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Uncomment the following to provide defaults for gate-ftp operation\n\n#\n\n#CPPFLAGS+=-DGATE_SERVER=\\\"ftp-gw.host\\\" # -DGATE_PORT=21\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/data/settings/tracker_new_templates/Makefile" : {
      "ObjectId" : "3bbcbf872884cfdd70fa1a7314f9a3e00c5a61da",
      "LastModified" : "2018-08-26T01:28:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## Haiku Generic Makefile v2.6 ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Fill in this file to specify the project being created, and the referenced\n\n## Makefile-Engine will do all of the hard work for you. This handles any\n\n## architecture of Haiku.\n\n##\n\n## For more information, see:\n\n## file:///system/develop/documentation/makefile-engine.html\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The name of the binary.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The type of binary, must be one of:\n\n#\tAPP:\tApplication\n\n#\tSHARED:\tShared library or add-on\n\n#\tSTATIC:\tStatic library archive\n\n#\tDRIVER: Kernel driver\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you plan to use localization, specify the application's MIME signature.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tThe following lines tell Pe and Eddie where the SRCS, RDEFS, and RSRCS are\n\n#\tso that Pe and Eddie can fill them in for you.\n\n#%{\n\n# @src->@\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tSpecify the source files to use. Full paths or paths relative to the\n\n#\tMakefile can be included. All files, regardless of directory, will have\n\n#\ttheir object files created in the common object directory. Note that this\n\n#\tmeans this Makefile will not work correctly if two source files with the\n\n#\tsame name (source.c or source.cpp) are included from different directories.\n\n#\tAlso note that spaces in folder names do not work well with this Makefile.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tSpecify the resource definition files to use. Full or relative paths can be\n\n#\tused.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tSpecify the resource files to use. Full or relative paths can be used.\n\n#\tBoth RDEFS and RSRCS can be utilized in the same Makefile.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# End Pe/Eddie support.\n\n# @<-src@\n\n#%}\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\tSpecify libraries to link against.\n\n#\tThere are two acceptable forms of library specifications:\n\n#\t-\tif your library follows the naming pattern of libXXX.so or libXXX.a,\n\n#\t\tyou can simply specify XXX for the library. (e.g. the entry for\n\n#\t\t\"libtracker.so\" would be \"tracker\")\n\n#\n\n#\t-\tfor GCC-independent linking of standard C++ libraries, you can use\n\n#\t\t$(STDCPPLIBS) instead of the raw \"stdc++[.r4] [supc++]\" library names.\n\n#\n\n#\t- \tif your library does not follow the standard library naming scheme,\n\n#\t\tyou need to specify the path to the library and it's name.\n\n#\t\t(e.g. for mylib.a, specify \"mylib.a\" or \"path/mylib.a\")\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\tSpecify additional paths to directories following the standard libXXX.so\n\n#\tor libXXX.a naming scheme. You can specify full paths or paths relative\n\n#\tto the Makefile. The paths included are not parsed recursively, so\n\n#\tinclude all of the paths where libraries must be found. Directories where\n\n#\tsource files were specified are\tautomatically included.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\tAdditional paths to look for system headers. These use the form\n\n#\t\"#include <header>\". Directories that contain the files in SRCS are\n\n#\tNOT auto-included here.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\tAdditional paths paths to look for local headers. These use the form\n\n#\t#include \"header\". Directories that contain the files in SRCS are\n\n#\tautomatically included.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\tSpecify the level of optimization that you want. Specify either NONE (O0),\n\n#\tSOME (O1), FULL (O3), or leave blank (for the default optimization level).\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# \tSpecify the codes for languages you are going to support in this\n\n# \tapplication. The default \"en\" one must be provided too. \"make catkeys\"\n\n# \twill recreate only the \"locales/en.catkeys\" file. Use it as a template\n\n# \tfor creating catkeys for other languages. All localization files must be\n\n# \tplaced in the \"locales\" subdirectory.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\tSpecify all the preprocessor symbols to be defined. The symbols will not\n\n#\thave their values set automatically; you must supply the value (if any) to\n\n#\tuse. For example, setting DEFINES to \"DEBUG=1\" will cause the compiler\n\n#\toption \"-DDEBUG=1\" to be used. Setting DEFINES to \"DEBUG\" would pass\n\n#\t\"-DDEBUG\" on the compiler's command line.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\tSpecify the warning level. Either NONE (suppress all warnings),\n\n#\tALL (enable all warnings), or leave blank (enable default warnings).\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\tWith image symbols, stack crawls in the debugger are meaningful.\n\n#\tIf set to \"TRUE\", symbols will be created.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\tIncludes debug information, which allows the binary to be debugged easily.\n\n#\tIf set to \"TRUE\", debug info will be created.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\tSpecify any additional compiler flags to be used.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\tSpecify any additional linker flags to be used.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\tSpecify the version of this binary. Example:\n\n#\t\t-app 3 4 0 d 0 -short 340 -long \"340 \"`echo -n -e '\\302\\251'`\"1999 GNU GPL\"\n\n#\tThis may also be specified in a resource.\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\t(Only used when \"TYPE\" is \"DRIVER\"). Specify the desired driver install\n\n#\tlocation in the /dev hierarchy. Example:\n\n#\t\tDRIVER_PATH = video/usb\n\n#\twill instruct the \"driverinstall\" rule to place a symlink to your driver's\n\n#\tbinary in ~/add-ons/kernel/drivers/dev/video/usb, so that your driver will\n\n#\tappear at /dev/video/usb when loaded. The default is \"misc\".\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Include the Makefile-Engine\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "src/libs/libunwind/Makefile.am" : {
      "ObjectId" : "5d87475568e1d6374047582f95a20339168afd87",
      "LastModified" : "2015-11-09T17:02:17Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# See comments at end of file.\n",
        "Line" : 1,
        "CharPositionInLine" : 17
      },
      "1" : {
        "Text" : "#\n\n# Don't link with start-files since we don't use any constructors/destructors:\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### libunwind-ptrace:\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### libunwind-coredump:\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### libunwind-setjmp:\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### libunwind:\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# List of arch-independent files needed by both local-only and generic\n\n# libraries:\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List of arch-independent files needed by generic library (libunwind-$ARCH):\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  _ReadULEB()/_ReadSLEB() are needed for Intel C++ 8.0 compatibility\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# List of arch-independent files needed by local-only library (libunwind):\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The list of files that go into libunwind and libunwind-aarch64:\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The list of files that go into libunwind and libunwind-arm:\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The list of files that go both into libunwind and libunwind-ia64:\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The list of files that go into libunwind-ia64:\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The list of files that go both into libunwind and libunwind-hppa:\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# The list of files that go into libunwind-hppa:\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The list of files that go info libunwind and libunwind-mips:\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The list of files that go info libunwind and libunwind-tilegx:\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# The list of files that go both into libunwind and libunwind-x86:\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# The list of files that go into libunwind-x86:\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# The list of files that go both into libunwind and libunwind-x86_64:\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# The list of files that go into libunwind-x86_64:\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# The list of local files that go to Power 64 and 32:\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# The list of generic files that go to Power 64 and 32:\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# The list of files that go both into libunwind and libunwind-ppc32:\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# The list of files that go into libunwind-ppc32:\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# The list of files that go both into libunwind and libunwind-ppc64:\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# The list of files that go into libunwind-ppc64:\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# The list of files that go into libunwind and libunwind-sh:\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# The list of files that go into libunwind:\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\tNothing to do here....\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n# This is not ideal, but I know of no other way to install an\n\n# alias for a library.  For the shared version, we have to do\n\n# a file check before creating the link, because it isn't going\n\n# to be there if the user configured with --disable-shared.\n\n#\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# ARCH_SH\n\n# ARCH_PPC64\n\n# ARCH_PPC32\n\n# ARCH_X86_64\n\n# ARCH_X86\n\n# ARCH_TILEGX\n\n# ARCH_MIPS\n\n# ARCH_HPPA\n\n# ARCH_IA64\n\n# ARCH_ARM\n\n# ARCH_AARCH64\n",
        "Line" : 631,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# libunwind-setjmp depends on libunwind-$(arch). Therefore must be added\n\n# at the end.\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\n\n# Don't link with standard libraries, because those may mention\n\n# libunwind already.\n\n#\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# The -version-info flag accepts an argument of the form\n\n# `current[:revision[:age]]'. So, passing `-version-info 3:12:1' sets\n\n# current to 3, revision to 12, and age to 1.\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# If either revision or age are omitted, they default to 0. Also note\n\n# that age must be less than or equal to the current interface number.\n",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Here are a set of rules to help you update your library version\n\n# information:\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#    1. Start with version information of `0:0:0' for each libtool\n\n#       library.\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#    2. Update the version information only immediately before a public\n\n#       release of your software. More frequent updates are unnecessary,\n\n#       and only guarantee that the current interface number gets larger\n\n#       faster.\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#    3. If the library source code has changed at all since the last\n\n#       update, then increment revision (`c:r:a' becomes `c:r+1:a').\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#    4. If any interfaces have been added, removed, or changed since the\n\n#       last update, increment current, and set revision to 0.\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#    5. If any interfaces have been added since the last public release,\n\n#       then increment age.\n",
        "Line" : 711,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#    6. If any interfaces have been removed since the last public\n\n#       release, then set age to 0.\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 54
    }
  },
  "FileTypes" : {
    "CMAKE" : 1,
    "MAKEFILE" : 4,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 11321
}