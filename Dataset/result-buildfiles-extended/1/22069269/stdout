{
  "Repository" : "22069269",
  "Revision" : "HEAD",
  "ObjectId" : "064c4d428773ad60175d49f76397d62f15bc2074",
  "CommitTime" : "2019-02-25T17:17:21Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "35c5e206a659849f712d68088aa9f6c84015f5b7",
      "LastModified" : "2018-11-12T22:40:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# See the file INSTALL for detailed instructions\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the following line avoids trouble on some systems (GNU make does this anyway)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# You may edit the INSTALLDIR and BINDIR variables\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# INSTALLDIR is where the executables Fokko, atlas and the messages directory\n\n# will be moved after successfull compilation\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# BINDIR is where a symbolic link to the 'Fokko' executable will be created,\n\n# and shell script executing 'atlas' will be placed; provided this directory\n\n# is in the search path, you can then call Fokko, atlas from anywhere\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# However when BINDIR is INSTALLDIR one cannot have those shell scripts since\n\n# they would be at the same place as the executable to call; since both default\n\n# to the current directory, you are advised to set at least BINDIR explicitly.\n\n# INSTALLDIR only needs to be changed if the current directory is temporary\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# In a single-user situation, you might want something like this:\n\n#   INSTALLDIR := /home/ducloux/atlas\n\n#   BINDIR     := /home/ducloux/bin\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In a multi-user situation, you might want this (requires root privilege):\n\n#   INSTALLDIR := /usr/local/atlas\n\n#   BINDIR     := /usr/local/bin\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The default: use current directory for executables, shell script in ~/bin\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Fokko_dirs contains subdirectories of 'atlas/sources' needed for 'Fokko'\n\n# atlas_dirs are where the object files for 'atlas' are situated\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Fokko_sources contains a list of the source files (i.e., the .cpp files)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# there is one .o file for each .cpp file, in the same directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# headers are searched in the all directories containing source files\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# for the interpreter (atlas sans the Atlas library) sources are *.w files\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# the following variable is a list of patterns, not files!\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# the variable 'dependencies' groups the names of the files, generated by a\n\n# preliminary run of the compiler, recording dependencies of object files\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# compiler flags\n\n# whenever changing the setting of these flags, do 'make clean' first\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# the following are predefined flavors for the compiler flags:\n\n# normal (nflags)\n\n# optimizing (oflags)\n\n# development with debugging (gflags)\n\n# profiling (pflags)\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# these flags are necessary for compilation, the -c should not be altered\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# additional flags specific for Fokko (atlas specifics are in its own Makefile)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# to select another flavor, set optimize=true, debug=true or profile=true\n\n# when calling make (as in \"make optimize=true\") or set CXXFLAVOR as an\n\n# environment variable (only the first flavor set in above list takes effect)\n\n# alternatively, you can do \"make CXXFLAVOR='explicit options'\" to specify\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# use value from environment or command line, or default to normal\n",
        "Line" : 111,
        "CharPositionInLine" : 5
      },
      "22" : {
        "Text" : "# Now the CXXFLAVOR is defined in all cases, we can safely mark it for export\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# suppress readline by setting readline=false\n\n# and/or make more verbose by setting verbose=true\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# To override this define and export a shell variable 'rl_libs', for instance\n\n# for readline on the Mac give the command: make rl_libs=\"-lreadline.5 -lcurses\"\n\n# Any value of LDFLAGS set in the environment is also included in $(LDFLAGS)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# the compiler to use, including language switch\n\n# some C++11 support needed (rvalue references, shared_ptr) but g++-4.4 suffices\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# RULES follow below\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This target causes failed actions to clean up their (corrupted) target\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# we use no suffix rules\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# The default target is 'all', which builds the executable 'Fokko', and 'atlas'\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# the following dependency forces emptymode.cpp to be recompiled whenever any\n\n# of the object files changes; this guarantees that the date in the version\n\n# string it prints will be that of the last recompilation.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# For profiling not only 'CXXFLAGS' used in compiling is modified, but linking\n\n# also is different\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Rules with two colons are static pattern rules: they are like implicit\n\n# rules, but only apply to the files listed before the first colon\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# the $(messagedir) variable is only needed for the compilation of io.cpp\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# for files proper to atlas, the build is defined inside sources/interpreter\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# skip %.cpp, go straight to sources\n",
        "Line" : 193,
        "CharPositionInLine" : 40
      },
      "36" : {
        "Text" : "# bison produces a file with extension .c, nonetheless it too needs $(CXX)\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# generate files that describe which .o files depend on which other (.h) files\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# now include all the files constructed by the previous rule; this defines\n\n# the dependencies, found by the preprocessor scanning #include directives,\n\n# so for all object files used by Fokko, 'make' will automatically remake\n\n# any of $(dependencies) if necessary. But 'veryclean' target should skip this\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# these are manually maintained for now\n",
        "Line" : 218,
        "CharPositionInLine" : 41
      },
      "40" : {
        "Text" : "# make symbolic link\n",
        "Line" : 234,
        "CharPositionInLine" : 43
      },
      "41" : {
        "Text" : "# whenever BINDIR is not INSTALLDIR, we can put a shell script as bin/atlas\n\n# which ensures the search path will be properly set (no compiled-in path here)\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "cwebx/Makefile" : {
      "ObjectId" : "47bda8a0254aa13af75dc4c28e90d5978f9f807b",
      "LastModified" : "2014-07-07T05:42:31Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This file is part of the Atlas of Lie Groups ans Representation project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A minimal Makefile for in-place compilation of a stripped version of cwebx\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The C compiler should be ANSI compatible. If you change this to another\n\n# brand then gcc, make sure you also change the -ansi flag in CFLAGS below to\n\n# one that tells your compiler to expect only strict ANSI/ISO C source code.\n\n# If you don't, then your compiler might squirm about identifiers that it\n\n# predeclares without us having asked it to, and which conflict with the\n\n# identifiers actually used in the CWEBx source, which then fails to compile.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The -ansi flag (for gcc) should guard against spurious #include files\n\n# We keep debugging info around to enable the `+d' option of cweave\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# RM is used below in case rm is aliased\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########  You shouldn't have to change anything after this point #######\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "sources/interpreter/Makefile" : {
      "ObjectId" : "9116701338b8a6d97b4900a6b0f33a1ac70873ed",
      "LastModified" : "2018-11-12T22:40:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This Makefile serves to make 'atlas' and possibly source documentation\n\n# running 'make' or 'make atlas' in the main atlas directory will just use\n\n# this Makefile to make the atlas program (and its requisites of course)\n\n# Running 'make' from the current directory will in addition make the source\n\n# documentation (as first target, so that you can look at your typeset code in\n\n# the dvi file while it is being compiled, and when reading error messages).\n\n# In the latter case debugging is on, and optimization off, by default, but in\n\n# the former case (being invoked from the main atlas directory), the\n\n# compilation flavor that is set in that directory is passed on and used.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# where we are\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# where to look for the Atlas sources (in the parent directory)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# only the directories listed below of the Atlas sources are actually used\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# this variable is used both by g++, and by cweavex needing the trailing slash\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# these are the optional flags for CWEBx, modify them according to your taste\n\n# do no omit flags ++ (expect C++ rather than C) and $(INCLUDE_FLAGS)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# these flags are necessary for compilation, and should not be altered\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# these flags set the compilation flavor (default: debugging, no optimization)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# our C++ compiler\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# only the Atlas object files listed below are used\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# You may define an environment variable 'rl_libs' to override the definition\n\n# below. For me (on Debian or Ubuntu Linux) just \"-lreadline\" suffices, but on\n\n# some systems adding \"-lcurses\" seems to be necessary. The author (Marc van\n\n# Leeuwen) offers EUR 40.96 to the first person who can provide a decent\n\n# reason why the \"-lcurses\" should be needed here\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# to override this, either define and export a shell variable 'rl_libs'\n\n# or set LDFLAGS when calling make. For instance for readline on the Mac do:\n\n# $ make LDFLAGS=\"-lreadline.5 -lcurses\"\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# RULES follow now\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# 'make clean' removes all derived files, but the executable program isn't here\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# 'make compilable' prepares everything for compilation\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# remove existing .cpp flies, to regerenate without #line\n",
        "Line" : 149,
        "CharPositionInLine" : 18
      },
      "16" : {
        "Text" : "# get the macros file here, so TeX applies cleanly\n",
        "Line" : 151,
        "CharPositionInLine" : 21
      },
      "17" : {
        "Text" : "# we use no implicit suffix rules in this Makefile\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# we do use the following pattern rules (explicit implicit rules, so to say)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# static pattern rules giving the usual C++ compilation\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# for running ctanglex we cannot use a static pattern rule, since there are\n\n# multiple targets: the C++ source and the corresponding header file(s) are\n\n# made from CWEBx files (.w) by a single run of ctanglex (with the ++ switch)\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# For a long time we added manipulations here to preserve the date of existing\n\n# and unchanged targets, to prevent remaking nearly everything whenever any .w\n\n# file was modified, because the remakes the .h file(s). The mechanism is\n\n# commented out now however, as while it works reasonably for a seqential\n\n# make, it cases trouble when make is run with --jobs set to more than 1\n\n# The basic problem is that targets are temporily removed, so other makes fail\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\t@if [ -f $*.cpp ]; then mv $*.cpp old_targets;\\\n#                           else touch old_targets/$*.ccp; fi\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\t@if [ -f $*.h ];   then mv $*.h old_targets;\\\n#                           else touch old_targets/$*.h; fi\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\t@if [ $* = parsetree ]; then \\\n#           if [ -f parse_types.h ]; then mv parse_types.h old_targets;\\\n#                                    else rm -f old_targets/parse_types.h; fi fi\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\t@for i in $*.cpp $*.h;\\\n#        do if cmp -s old_targets/$$i $$i;\\\n#           then mv old_targets/$$i $$i; echo $$i unchanged;\\\n#           fi done\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\t@if [ $* = parsetree ]; then \\\n#           if cmp -s old_targets/parse_types.h parse_types.h;\\\n#           then mv old_targets/parse_types.h .; echo parse_types.h unchanged;\\\n#           fi fi\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# remaking these Atlas files is unneeded: they are also under version control\n\n# but above pattern rule matches; so provide an empty rule to prevent remaking\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# TeX files are also made from CWEBx files (.w) with the ++ switch, by cweavex\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# and DVI files are made from TeX files of course\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# these targets allow you to say \"make headers\" or \"make dvifiles\"\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# all of these \"derived sources\" need the CWEBx tools to be compiled first\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Our executable program 'atlas' is in Atlas root directory.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# the parser is produced by bison, and compiled using the C++ compiler\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\t@if [ -f parser.tab.c ]; then mv parser.tab.c old_targets;\\\n#                                 else touch old_targets/parser.tab.c; fi\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\t@if [ -f parser.tab.h ]; then mv parser.tab.h old_targets;\\\n#                                 else touch old_targets/$*.h; fi\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\t@for i in parser.tab.c parser.tab.h;\\\n#        do if cmp -s old_targets/$$i $$i;\\\n#           then mv old_targets/$$i $$i; echo $$i unchanged;\\\n#           fi done\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# miscellaneous dependencies (some already known), produced by hand for now\n\n# these are also included from the main Atlas makefile\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "sources/stand-alone/Makefile" : {
      "ObjectId" : "13e666e1d53d516fc7e6315d3e3c2c870e86d3a5",
      "LastModified" : "2018-12-31T20:28:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# where to look for the atlas sources (in the parent directory)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only the directories listed below of the atlas sources are actually used\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this variable is used both by g++, and by cweavex needing the trailing slash\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# please make sure cweavex and ctanglex refer to the executables of the latest\n\n# version of CWEBx, see http://www-math.univ-poitiers.fr/~maavl/CWEBx\n\n# the ++ flags make them expect C++ rather than C\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# these are the optional flags for CWEBx, modify them according to your taste\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# our beloved C++ compiler\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# RULES follow now\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 'make clean' removes all derived files\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# 'make mostlyclean' removes all derived files except the executable program\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# 'make compilable' prepares everything for compilation\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# we use no implicit suffix rules in this Makefile\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TeX files are also made from CWEBx files (.w) with the ++ switch, by cweavex\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# and DVI files are made from TeX files of course\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# a static pattern rule giving the usual C++ single-module compilation\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 2567
}