{
  "Repository" : "30968290",
  "Revision" : "HEAD",
  "ObjectId" : "3ebc07198ad171ed482fb3c2c3dd445757a0e1fb",
  "CommitTime" : "2017-11-28T11:20:16Z",
  "Files" : {
    "CppProjects/Example/CMakeLists.txt" : {
      "ObjectId" : "6e2fa305e7fe0adcea545b4cf8eff96eb6d6cbc2",
      "LastModified" : "2017-07-24T07:07:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Сборочный файл для программы my_program\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Минимальная версия CMake, младше нельзя.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Устанавливаем значение переменной BIN\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Имя проекта у нас соответствует имени программы.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Устанавливаем корневой путь к папке с исходниками программы.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Очень полезная функция. По умолчанию имена файлов с исходниками\n\n# нужно перечислять явно. Мне это кажется совершенно неудобным (особенно\n\n# если файлов много). Поэтому я использую эту функцию.\n\n# Она (рекурсивно) просматривает исходники (начиная от корневого пути,\n\n# указанного выше) и собирает имена всех файлов, имеющих классическое\n\n# разрешение, такие как .cpp, .cxx и т.п.\n\n# В итоге формируется список всех найденных файлов и сохраняется в переменной\n\n# SOURCES\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Указываем пути, где искать заголовочники, дополнительно к стандартным путям.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Устанавливаем путь, куда будет скопирован исполняемый файл при выполнении\n\n# команды 'make install'.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Указываем пути, где искать сторонние динамически библиотеки. Эти пути будут\n\n# просмотрены в дополнение к умолчальными системным путям.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Перечисляем необходимые сторонние динамические библиотеки и сохраняем\n\n# их список в переменной REQUIRED_LIBRARIES.\n\n# Поиск этих библиотек будет произведён как по стандартным системным путям, \n\n# так и по указанным выше (с помощью функции link_directories).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Устанавливаем флаги компилятора (причём никаких скрытых флагов, только эти).\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Собираем исполняемый файл с именем my_program.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Компонуем собранную программу с необходимыми динамическими библиотеками.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Установка. Это действие будет активировано при выполнении команды 'make install'.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#Всё. На мой взгляд, чрезвычайно понятный синтаксис, и даже комментарии не особо нужны.\n\n#Динамическая библиотека\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Сборочный файл для библиотеки my_lib\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# См. выше.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Устанавливаем значение переменной LIB\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Имя проекта у нас соответствует имени библиотеки.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Устанавливаем версии библиотеки. В данном случае собранная библиотека будет иметь версию\n\n# 1.0.0, а первая символическая ссылка на неё будет иметь версию 1.0.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Устанавливаем корневые пути к папками с исходниками библиотеки и \n\n# к заголовочникам для установки.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# См. выше.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# См. выше.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# См. выше.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Устанавливаем путь установки заголовочных файлов библиотеки.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# См. выше.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# См. выше.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# См. выше.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Собираем динамическую библиотеку.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# См. выше.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Создаём символические ссылки. Учитывая указанные выше версии, результат будет\n\n# таким:\n\n# lib_my_lib.so       -> lib_my_lib.so.1.0\n\n# lib_my_lib.so.1.0   -> lib_my_lib.so.1.0.0\n\n# lib_my_lib.so.1.0.0\n\n# Это действие будет активировано при выполнении команды 'make install'.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Установка. Это действие будет активировано при выполнении команды 'make install'.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Берём из папки ${HEADERS} все файлы с расширением .hpp и копируем их в \n\n# ${HEADERS_INSTALL_PATH}.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "CppProjects/Example/CoroService/CMakeLists.txt" : {
      "ObjectId" : "9fc83defd45773de6409cf5f5b37f4318d2c4c8b",
      "LastModified" : "2017-07-14T08:07:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set( LIB_NAME CoroService )\n\n#add_library( ${LIB_NAME} ${SRC_LIST} ) - создание динамической библиотеки (.dll в винде, .so в линуксе)\n\n#add_library( ${LIB_NAME} SHARED ${SRC_LIST} ) - создание статической библиотеки\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries( ${PROJECT_NAME} ${LIB_NAME} )\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Установка. Это действие будет активировано при выполнении команды 'make install'.\n\n#install( TARGETS ${BIN} DESTINATION ${INSTALL_PATH} )\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CppProjects/Example/Libraries/CMakeLists.txt" : {
      "ObjectId" : "fd0cfb11491148009030f587cd8b744a6b477a2f",
      "LastModified" : "2017-07-14T08:07:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Устанавливаем версии библиотеки. В данном случае собранная библиотека будет иметь версию\n\n# 1.0.0, а первая символическая ссылка на неё будет иметь версию 1.0.\n\n#set( MAJOR_VERSION 1.0.0 )\n\n#set( MINOR_VERSION 1.0 )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set( ADDITIONAL_FLAGS \"-DBUILD_OUTPUT_BIN=./Bin/${BuildType}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Устанавливаем корневой путь к папке с исходниками программы.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Очень полезная функция. По умолчанию имена файлов с исходниками\n\n# нужно перечислять явно. Мне это кажется совершенно неудобным (особенно\n\n# если файлов много). Поэтому я использую эту функцию.\n\n# Она (рекурсивно) просматривает исходники (начиная от корневого пути,\n\n# указанного выше) и собирает имена всех файлов, имеющих классическое\n\n# разрешение, такие как .cpp, .cxx и т.п.\n\n# В итоге формируется список всех найденных файлов и сохраняется в переменной SRC_LIST\n\n#aux_source_directory( ${SOURCE_ROOT} SRC_LIST )\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set( SRC_LIST ${SRC_LIST} ./src/Errors.cpp )\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#message( FATAL_ERROR \"# Unsupported OS !\" )\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#set( SRC_LIST ${SRC_LIST} LockFree.h test.cpp )\n\n#add_executable( ${PROJECT_NAME} ${SRC_LIST} )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Установка. Это действие будет активировано при выполнении команды 'make install'.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Берём из папки ${SOURCE_ROOT} все файлы с расширением .h и копируем их в ${HEADERS_INSTALL_PATH}.\n\n#install( DIRECTORY ${SOURCE_ROOT} DESTINATION ${HEADERS_INSTALL_PATH} FILES_MATCHING PATTERN \"*.h\" )\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "CppProjects/Proj/EchoServer/CMakeLists.txt" : {
      "ObjectId" : "33563cd696c55c639681b00e5d303c3d07a0ce22",
      "LastModified" : "2017-11-01T07:23:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Подцепляем все нужные файлы\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Строка ниже нужна для отладки в долбаном QtCreator-е убунты\n\n#set( ADDITIONAL_FLAGS \"${ADDITIONAL_FLAGS} -g3 -Wall -W -D_DEBUG \" )\n",
        "Line" : 27,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "#message( FATAL_ERROR \"# Unsupported OS !\" )\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "CppProjects/Proj/Tests/CMakeLists.txt" : {
      "ObjectId" : "9698c6982fdf62152bca17ddc661dc8a1fd976dc",
      "LastModified" : "2017-11-23T17:33:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message( FATAL_ERROR \"# Unsupported OS !\" )\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "SimpleServer/CMakeLists.txt" : {
      "ObjectId" : "3bd136b2c1003e88bcf055850c254cf21e8b569b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 512
}