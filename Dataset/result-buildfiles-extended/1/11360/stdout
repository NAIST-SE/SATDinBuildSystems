{
  "Repository" : "11360",
  "Revision" : "HEAD",
  "ObjectId" : "eec82809c4f3f107139eecbacddd0efa48b43064",
  "CommitTime" : "2019-04-07T17:41:01Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "7eecf16b864a9889715c18000ab27cdc9cbbb08e",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For yaml-cpp\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add check for library (SDL_gfx, yaml-cpp )\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find OpenGL\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Resolve backtraces\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Read version number\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Append the commit to version number\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "Makefile.am" : {
      "ObjectId" : "d0681fc8bdb03e9454603623a23090bca0ba95ca",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# NOTE: this might wipe user unpacked xcom if it is in the dir, as there\n\n#       is no way of distinguishing between our content and their.\n\n#       If user uses distro package or if he does not use uninstall\n\n#       command this won't of course happen.\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindSDL2.cmake" : {
      "ObjectId" : "20a7ceff55130e38b86f4bb7559e65407ca325aa",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL library\n\n# This module defines\n\n# SDL_LIBRARY, the name of the library to link against\n\n# SDL_FOUND, if false, do not try to link to SDL\n\n# SDL_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL_BUILDING_LIBRARY\n\n# If this is defined, then no SDL_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDLmain which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL_LIBRARY_TEMP in your configuration\n\n# and no SDL_LIBRARY, it means CMake did not find your SDL library\n\n# (SDL.dll, libsdl.so, SDL.framework, etc).\n\n# Set SDL_LIBRARY_TEMP to point to your SDL library, and configure again.\n\n# Similarly, if you see an empty SDLMAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL_LIBRARY\n\n# variable, but when these values are unset, SDL_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building SDL.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDLmain which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL/ (see FreeBSD).\n\n#\n\n#\n\n# Modified by Guillaume Chevallereau\n\n# Added code to search for SDL sub library (e.g : mixer, gfx )\n\n# This avoid the multiplication of FindSDL_*.cmake modules.\n\n# To use, just add a COMPONENTS component1 component2 to find_package.\n\n# example: find_package ( SDL2 COMPONENTS mixer gfx )\n\n#          Will look for SDL, SDL_mixer and SDL_gfx.\n\n# For each components, SDL${UPPERCOMPONENT}_FOUND will be set if the component is found. the module will also set SDL${UPPERCOMPONENT}_LIBRARY for the library and SDL${UPPERCOMPONENT}_INCLUDE_DIR) for include dir of the library. UPPERCOMPONENT is the name of the component in upper-case(mixer => MIXER)\n\n# Each component is first search in the SDL${UPPERCOMPONENT}DIR environment variable, then in the found SDL dir. The search is then performed in the standard directory of the platform.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FreeBSD ports\n",
        "Line" : 86,
        "CharPositionInLine" : 27
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 89,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 90,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# Blastwave\n",
        "Line" : 91,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL_INCLUDE_DIR is ${SDL_INCLUDE_DIR}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# SDL-1.1 is the name used by FreeBSD ports...\n\n# don't confuse it for the version number.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#MESSAGE(\"SDL_LIBRARY_TEMP is ${SDL_LIBRARY_TEMP}\")\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDLmain. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDLmain for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# SDL may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDLmain -lSDL -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# For SDLmain\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For OS X, SDL uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For MinGW library\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#Special case for SDL_gfx. This seems to be the only library where the main header is not SDL_${lib}.h.\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# FreeBSD ports\n",
        "Line" : 227,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# Fink\n",
        "Line" : 230,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 231,
        "CharPositionInLine" : 15
      },
      "22" : {
        "Text" : "# Blastwave\n",
        "Line" : 232,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 23
    },
    "cmake/modules/FindSDL_gfx.cmake" : {
      "ObjectId" : "36af02394ddbb37c912fe7778eb460cff8e11fcf",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL_gfx library\n\n# This module defines\n\n# SDLGFX_LIBRARY, the name of the library to link against\n\n# SDLGFX_FOUND, if false, do not try to link to SDL_gfx\n\n# SDLGFX_INCLUDE_DIR, where to find SDL/SDL_gfx.h\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building SDL.\n\n#\n\n# Created by Guillaume Chevallereau. This was influenced by the FindSDL.cmake\n\n# module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FreeBSD ports\n",
        "Line" : 38,
        "CharPositionInLine" : 27
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 43,
        "CharPositionInLine" : 18
      },
      "4" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 45,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "# Blastwave\n",
        "Line" : 47,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "# FreeBSD ports\n",
        "Line" : 82,
        "CharPositionInLine" : 29
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 87,
        "CharPositionInLine" : 20
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 89,
        "CharPositionInLine" : 27
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 91,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 10
    },
    "cmake/modules/FindYaml_cpp.cmake" : {
      "ObjectId" : "b3520e9131cab36fa2d9404aac6ea191a25a9a86",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate yaml-cpp library\n\n# This module defines\n\n# YAMLCPP_LIBRARY, the name of the library to link against\n\n# YAMLCPP_FOUND, if false, do not try to link to yaml-cpp\n\n# YAMLCPP_INCLUDE_DIR, where to find yaml-cpp/yaml.h\n\n#\n\n# Created by Guillaume Chevallereau. This was influenced by the FindSDL.cmake\n\n# module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# yaml-cpp 0.5.2 has issues that cause openxcom to fail to load any rules:\n\n# See: https://github.com/jbeder/yaml-cpp/pull/316\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/LinuxDEB.cmake" : {
      "ObjectId" : "7e7ba82a31ec59bd06b081372244ca00d212d32f",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/LinuxRPM.cmake" : {
      "ObjectId" : "b23467a4096cfd0ac57a29114fea0652198a3541",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/PostprocessBundle.cmake" : {
      "ObjectId" : "f9fc47d91012764eb534da3798e48ae0c2a2b8d2",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adapted from the Dolphin project: https://dolphin-emu.org/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module can be used in two different ways.\n\n#\n\n# When invoked as `cmake -P PostprocessBundle.cmake`, it fixes up an\n\n# application folder to be standalone. It bundles all required libraries from\n\n# the system and fixes up library IDs. Any additional shared libraries, like\n\n# plugins, that are found under Contents/MacOS/ will be made standalone as well.\n\n#\n\n# When called with `include(PostprocessBundle)`, it defines a helper\n\n# function `postprocess_bundle` that sets up the command form of the\n\n# module as a post-build step.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Being called as include(PostprocessBundle), so define a helper function.\n",
        "Line" : 15,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Make sure to fix up any additional shared libraries (like plugins) that are\n\n# needed.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/apple.cmake" : {
      "ObjectId" : "6767a7c82ba8d056c13e91841054e74d82c286e7",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/nsis.cmake" : {
      "ObjectId" : "f14337c504f2474fc507c1e45186d85eebd78ce7",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NSIS specific option for CPack\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "172b383a12123629b846f3f10c6b509f3a2b0653",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/Makefile.am" : {
      "ObjectId" : "0e1565b264a59869ef38df2dd791ebb2b26430e4",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "8718bc53e27571741277fc7c9557785a6883ea42",
      "LastModified" : "2019-04-06T17:13:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable more GCC warnings if requested or we are doing a Debug build.\n",
        "Line" : 351,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# These warning options actually generate way too many warnings. Should be enabled later.\n\n#      -Weffc++\n\n#      -Winline\n\n#      -Wshadow\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add warning flags recognized by g++ but not by clang\n",
        "Line" : 369,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# add warning flags recognized by clang but not by g++\n",
        "Line" : 372,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# These warnings aren't worth polluting the code for\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# cross-platform functions\n",
        "Line" : 381,
        "CharPositionInLine" : 38
      },
      "6" : {
        "Text" : "# add warning flags recognized by g++ but not by clang\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# xbrz\n",
        "Line" : 386,
        "CharPositionInLine" : 38
      },
      "8" : {
        "Text" : "# add warning flags recognized by clang but not by g++\n",
        "Line" : 389,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# overloads with different parameters\n",
        "Line" : 391,
        "CharPositionInLine" : 38
      },
      "10" : {
        "Text" : "# Set warning levels for Debug and Release with debug info\n",
        "Line" : 407,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Extra link flags for Windows. They need to be set before the SDL/YAML link flags, otherwise you will get strange link errors ('Undefined reference to WinMain@16')\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# backtrace(3) requires libexecinfo on some *BSD systems\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Pack libraries into bundle and link executable appropriately\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Copy Windows DLLs to bin folder\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#Setup source groups for IDE\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    }
  },
  "FileTypes" : {
    "CMAKE" : 11,
    "AUTOMAKE" : 2
  },
  "ElapsedTime" : 1984
}