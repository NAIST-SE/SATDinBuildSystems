{
  "Repository" : "13643670",
  "Revision" : "HEAD",
  "ObjectId" : "2304251b56fe0bf327588416f070a87fff1ce2f7",
  "CommitTime" : "2019-01-18T12:03:09Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "58f5e432ed49284c9e182977e9cea595d3987c66",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Different Configuration Types (Debug release)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only generate the single build type (Debug vs Release) we have our dependencies built for, since our prior step is to run conan.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Project Name and start working in project scope (some things just work until now, some just work after this command)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get compiler/os/architecture variables\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set compile flags and compile specific definitions\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add conan dependencies (our c++ dependency manager)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# And we split them accordingly into different require_XY() functions\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Path Variables\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Error if paths aren't set well\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Main inexor folder\n\n# Where it generates the projects into\n",
        "Line" : 42,
        "CharPositionInLine" : 64
      },
      "11" : {
        "Text" : "# Set the path to inexor/ explicitly to simplify some following definitions\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Installation\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# INSTALL_LOCALLY will surpress the installation into CMAKE_INSTALL_PREFIX which is by default some global system path.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Trailing '/' before the DIRECTORY is significant. Without it bin would be installed to bin/bin.\n",
        "Line" : 63,
        "CharPositionInLine" : 94
      },
      "15" : {
        "Text" : "# We have the .exe suffix on all platforms, to ease our startup manager and possible future uses.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Go for the source subfolder.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/clean_files_folders.cmake" : {
      "ObjectId" : "27e30224a14b27163ca869797dcf3f88b5c74609",
      "LastModified" : "2016-10-20T13:49:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file removes all folders and files specified with the VARS PATHS_TO_REMOVE (taking both files and folders).\n\n# The key point is that it can happen at runtime! (so e.g. always before a build):\n\n# Therefore use the command:\n\n# add_custom_target(<your_command_name_here> COMMAND ${CMAKE_COMMAND} -DPATHS_TO_REMOVE=\"<your_files_and_folders_here>\" -P clean_files_folders.cmake)\n\n# Note: its IMPORTANT that \"-DPATHS_TO_REMOVE=\" comes before \"-P ..\"!\n\n# PATHS_TO_REMOVE is a string, not a list! (separation by \" \" not \";\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convert the given PATHS_TO_REMOVE to being a list instead of an string\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/compile_flags_and_defs.cmake" : {
      "ObjectId" : "c2b2f816183d7951db6e89a89c36692d4f0a0112",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#### @File Set Compiler and Linker flags for the different compilers and os-specific definitions ####\n\n## Note: This file needs to be included **after** platform_detection.cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## GCC and CLang\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't keep the frame pointer for functions that don't need one\n\n# Avoid assumptions regarding non-aliasing of objects of different types\n\n# Let the type char be signed, like signed char.\n\n# Use pipes rather than temporary files for communication between build stages\n\n# Enable all warnings\n\n# Execpt Warnings for missing switch cases\n\n#\n\n#\n\n# Show Warning IDs\n\n# Generate debug information\n",
        "Line" : 7,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# Use the C99 language standard\n",
        "Line" : 20,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# Don't generate thread-safe statics\n\n# Use the C++14 language standard\n",
        "Line" : 23,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# Disable optimizations.\n\n# Debug build\n",
        "Line" : 27,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# Optimize for maximum speed\n\n# Enable linker optimizations to improve locality of reference for data sections\n\n# Enable linker optimizations to improve locality of reference for function sections\n\n# Ignore the #ident directive\n\n# Not a debug build\n\n# Undefine _FORTIFY_SOURCE in case it was previously defined\n\n# Add memory and string function protection (security feature)\n",
        "Line" : 31,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "# Set rpath so that libraries can be placed next to the executable\n\n# Link statically\n",
        "Line" : 40,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "## --as-needed is not known to Apple's Clang linker\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Only link libraries that export symbols used by the binary\n",
        "Line" : 47,
        "CharPositionInLine" : 36
      },
      "10" : {
        "Text" : "# Enable linker optimizations\n",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "11" : {
        "Text" : "# Remove unused code resulting from -fdata-sections and -function-sections\n",
        "Line" : 55,
        "CharPositionInLine" : 36
      },
      "12" : {
        "Text" : "# 64-bit architecture.\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# 32-bit architecture.\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Ability to use your environment own cflags/ldflags.. as well\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## MS Visual Studio\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Multiprocess compilation\n\n# Enable function-level linking\n\n# Enable program database\n\n# Calculate with less precise floating point values\n\n# assume extern C stuff never throws exceptions\n\n# Warning level 2\n\n# Disable obj file size limitation to compile big files\n\n# Ignore \"typedef .. where no variable gets declared ingored\" warning\n\n# Ignore \"conversion from 'int' to 'float', possible loss of data\" warning\n\n# Ignore \"class 'type' needs to have dll-interface ..\" warning\n\n# Ignore \"conversion from 'size_t' to 'int', possible loss of data\" warning\n\n# Ignore \"truncation from 'double' to 'float'\" warning\n\n# Ignore \"Function call with parameters that may be unsafe\" warning\n",
        "Line" : 82,
        "CharPositionInLine" : 40
      },
      "17" : {
        "Text" : "# Multithreaded debug runtime\n\n# Disable optimizations\n\n# Enable basic run-time checks\n\n# Debug build\n",
        "Line" : 97,
        "CharPositionInLine" : 40
      },
      "18" : {
        "Text" : "# Multithreaded release runtime\n\n# Optimize for maximum speed\n\n# Inline any suitable function\n\n# Enable string pooling\n\n# Not a debug build, skip code passages meant for debug.\n\n# Whole Program Optimization: further optimize the program in linker stage (but calling the compiler).\n",
        "Line" : 103,
        "CharPositionInLine" : 40
      },
      "19" : {
        "Text" : "# Generate debug information (even for release builds for our stackwalker)\n\n# No default manifest\n\n# Do Not Create a table of safe exception handlers (binary incompatible)\n",
        "Line" : 111,
        "CharPositionInLine" : 40
      },
      "20" : {
        "Text" : "# Eliminate Unreferenced Data (to revert changes to the binary caused by /DEBUG)\n\n# Remove Redundant COMDATs (to revert changes to the binary caused by /DEBUG)\n\n# Linking incremental (faster) does not work anymore with the previous two optimizations\n\n# Link-time Code Generation: further optimisations in the linker stage.\n",
        "Line" : 116,
        "CharPositionInLine" : 40
      },
      "21" : {
        "Text" : "# Enable link time optimizations\n",
        "Line" : 124,
        "CharPositionInLine" : 38
      },
      "22" : {
        "Text" : "# Just merge compiler/linker flags (specific to the used compiler)\n\n# We do save separate compiler specific flags, since we need them in our reflection pass which builds upon clang\n\n# (and hence always needs clang flags)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Fix CMake having no easy workaround to change between cmake lists (separated by ;) and cmake strings (separated by \" \")\n\n# TODO remove this fix by using target_add_compile flags or sth which can handle a cmake list.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#### Platform specific definitions ####\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Allow C++ programs to use stdint.h macros specified in the C99 standard that\n\n# aren't in the C++ standard (e.g. UINT8_MAX, INT64_MIN, etc).\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# -D_USE_MATH_DEFINES                   = By defining this prior to math.h we get M_PI defined\n\n# -DHAVE_M_PI                           = This is for SDL to not try to define M_PI\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Allow the Large File Support (LFS) interface to replace the old interface.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# -DWIN32 -D_WIN32 -D_WINDOWS           = Windows platform\n\n# -DNOMINMAX                            = Use the standard's templated min/max\n\n# -D_WIN32_WINNT=0x0600                 = Target is Windows Vista\n\n# -DWIN32_LEAN_AND_MEAN                 = Skip deprecated windows.h parts (which will for sure cause troubles)\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "cmake/create_package.cmake" : {
      "ObjectId" : "ac775d520fa827d6a16bac8896d21e5235bef380",
      "LastModified" : "2018-08-24T22:55:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a package using CPack.\n\n# CPack just uses everything done with \"install()\". so we \"install()\" all stuff we normally wouldn't but need for a complete package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Wrapper around install(FILES) to preserve subdirectories.\n\n#\n\n# A normal install(FILES tool/create_visual_studio_project.bat DESTINATION \"directoryname\") would copy the file directly to \"directoryname\",\n\n# but we want it in \"directoryname/tool\".\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Normal game bundle\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Developer files bundle\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate the documentation using doxygen.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## versioning and name of the file\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we do not use the path level number\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# e.g. the git tag \"0.3.1-alpha\"\n",
        "Line" : 58,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 8
    },
    "cmake/functions.cmake" : {
      "ObjectId" : "b64718d5c8e8c0980a7172aa3f14abe0e569c5e1",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Otherwise we can't access the path of this directory anyhow\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# USAGE: declare_module(<NAME> [PATH])\n\n#\n\n# Automatically search for headers and source files inside\n\n# a module, export these and add a group for visual studio\n\n# that contains all the sources.\n\n#\n\n# ARGUMENTS:\n\n#   NAME – The name of the module\n\n#   PATH – The relative path all the sources are inside\n\n#\n\n# SIDE EFFECTS:\n\n#   * ${NAME}_MODULE_HEADERS – such a variable is created;\n\n#     it contains a list of all headers in this module\n\n#   * ${NAME}_MODULE_SOURCES – such a variable is created;\n\n#     it contains a list of all source files in this module\n\n#   * A VS source group is added with the name ${NAME}; it\n\n#     contains all the headers and source files in this module\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search headers\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Search sources\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Save for group_modules()\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# USAGE: group_sources(file1 file2 file3)\n\n#\n\n# Set up source groups (for better browsing inside IDEs) for the provided list of source files.\n\n# Filenames can be absolute or relative to SOURCE_DIR.\n\n# Group names get created based on that path.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get the directory of the source file\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Remove common directory prefix to make the group\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Make sure we are using windows slashes\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# USAGE: group_modules()\n\n#\n\n# Set up Source_groups for VS/XCode.\n\n# Does not need to be called normally, except you are not\n\n# using add_app\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# skip creating a source_group for outsourced_modules\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# USAGE: prepend(<VARIABLE> <PREP> [ARGS]...)\n\n#\n\n# Prepend ${PREP} to each element of ${ARGS} and save the\n\n# result in VARIABLE.\n\n#\n\n# ARGUMENTS:\n\n#   VARIABLE – The variable to save the sources in\n\n#   PREP     – The string to prepend\n\n#   ARGS...  – The strings to prepend to\n\n# SIDE EFFECTS:\n\n#   * Creates a variable named VARIABLE and writes our\n\n#     result there.\n\n#\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# USAGE: add_app(executable SOURCE_FILES [CONSOLE_APP])\n\n#\n\n# Set up an executable.\n\n# First this function creates a platform specific\n\n# executable. On windows it creates a WIN32 executable, on\n\n# macOS it creates a bundle.\n\n# If \"CONSOLE_APP\" is given within the arguments,\n\n# it wont create a WIN32 but a console app on windows.\n\n#\n\n# The executable created is also installed: On windows we\n\n# add it to the executables folder, and we have it installed\n\n# in ${EXE_DIR}.\n\n#\n\n# see: add_executable\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Remove \"CONSOLE_APP\" if specified\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# USAGE: add_lib(modulename)\n\n#\n\n# Set up a STATIC LIB for the corresponding module.\n\n# Used for solving source_group issues for some IDEs\n\n# @example add_lib(net)\n\n# @sideeffects creates a library called module_<modulname>.\n\n#\n\n# see add_library\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# USAGE: opt_subdir SUBDIR INITIAL\n\n#\n\n# Optionally include a sub directory.\n\n# This adds an option called BUILD_${subdir} (all caps) and\n\n# includes the named subdir if that option is ON.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# USAGE: pragma_once(net_module server_target)\n\n# Servers as include guard alternative, since its sets the variable ALREADY_INCLUDED\n\n# in its parents scope.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# GET_PROPERTY and SET_PROPERTY is a workaround for having global variables in cmake.\n\n# Cached strings would not work, since they'd stay for the next configuring as well..\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "cmake/get_conan_build_type.cmake" : {
      "ObjectId" : "51fa5bb5db6f928afc88aadb6700f16488991167",
      "LastModified" : "2016-12-16T19:05:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns if conan is configured for Debug or Release\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/get_conan_dependency_list.cmake" : {
      "ObjectId" : "2fd3ccb2bd72361e166504b0b7313c01de86d506",
      "LastModified" : "2018-08-24T22:55:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This function executes conan to get a list of all dependencies (\"conan info\" but stripped).\n\n# conanfile_py_folder is the path to the folder the conanfile.py lies in.\n\n# if STRIP_CHANNELS is true the output in the form of boost/1.66.0@conan/stable becomes boost/1.66.0\n\n# if SHOW_LICENSE is true it will also display license info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Strip any log appearing before the actual list (probably coming form the configure() commands):\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/platform_detection.cmake" : {
      "ObjectId" : "98d8c18d894551db82ffdd735bc55c435515b97d",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### @File:\n\n# NOTE:  **This file needs to be included AFTER project()**\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# * Set platform boolean OS_* (WINDOWS/LINUX/MACOS)\n\n# * Set architecture booleans X32 and X64\n\n# * Set architecture string PROJECT_ARCH (\"64\"/\"32\" or \"x86\"/\"x86_64\")\n\n# * Set compiler booleans COMPILER_* (GNU/CLANG/MSVC)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Determine the platform.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine the project architecture.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the compiler.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Currently we only support VS 2015+ natively\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/require_thirdparty_libs.cmake" : {
      "ObjectId" : "140805064979b47d7b95a08c05e54378f2960b74",
      "LastModified" : "2019-01-18T12:03:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adding third-party libs is a three step procedure:\n\n# 1) Add it to conanfile.txt\n\n# 2) Add a require_XY() to this file\n\n# 3) Use the require_XY() in the places you need\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Locally built dependencies need to go to the bottom\n\n# so all the others are available and the GLIBC C++11 ABI detection\n\n# works (it needs a list of libraries to check whether they use the new ABI)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### Threads\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#### OpenGL\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(Boost_USE_STATIC_LIBS ON)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set(Boost_USE_STATIC_RUNTIME ON)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use the same threading as we found out from find_package(Threads)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# conan: we can override FindBoost\n\n# include(\"${CONAN_BOOST_ROOT}/FindBoost.cmake\") disable it until we have our runtime chosen.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This macro lets us create a require_boost_XY for all other libs. name is the canonical name without spaces, e.g. \"program_options\"\n\n# additional defines can be listed, but WITHOUT \"-D\" and in quotes, followed by additional **boost lib requirements** e.g. \"system thread\"\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# we want PROGRAM_OPTIONS as variable\n",
        "Line" : 84,
        "CharPositionInLine" : 39
      },
      "10" : {
        "Text" : "# string to list\n",
        "Line" : 86,
        "CharPositionInLine" : 54
      },
      "11" : {
        "Text" : "# string to list, we just add those libs\n",
        "Line" : 87,
        "CharPositionInLine" : 64
      },
      "12" : {
        "Text" : "# This macro lets us create a require_xy (with XY being the name of the library) without code duplication\n\n# but just the name of the library (as it can be found in conan).\n\n# require_xy is all lower case. LIMITATION: lib name (\"XY\") is not allowed to contain \"-\".\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Google test (unit testing framework)\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# PugiXML (xml parser, used for our gluecode generator)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# kainjow-mustache (a template engine, used for our gluecode generator)\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ZLIB (fast file compression)\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ENet (reliable UDP networking lib)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Protobuf (XML or JSON like serialization format but in binary, so it needs an compiler)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# gRPC (googles remote procedure call framework, used for Inexors networking and scripting binding)\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# spdlog (fast logging library)\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# fmt (fast and convenient formatting library)\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# CEF Chromium Embedded Framework (Embedded Browser used for the UI)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# sdl2 (input output framework)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# sdl2_image (image loader library)\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# libjpeg turbo a dependency of sdl2_image\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# libpng a dependency of sdl2_image\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# sdl2_mixer (sound library)\n\n# add_require_conan_lib_function(sdl2_mixer)\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Wrapper for all SDL libs (you usually want all of them)\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# require_sdl2_mixer(${targ})\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 30
    },
    "cmake/silence_find_pathprogram.cmake" : {
      "ObjectId" : "3f3d6e924f0c50dc81100d43b8c58b3d0075193f",
      "LastModified" : "2016-12-16T19:05:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# @file this file overrides the find_path() and find_program() global function to remove its findings from the cmake-gui\n\n# Since those paths do not really need to be in the gui, but in the cache.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "inexor/CMakeLists.txt" : {
      "ObjectId" : "b78bd986554f94301984ecf4b46e9006dcb2da12",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Wrong folder: User attempted to generate from src instead of the main-inexor folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Automatically detect new modules\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# syncronisation module + legacy network\n",
        "Line" : 20,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : "# Actual targets\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "inexor/client/CMakeLists.txt" : {
      "ObjectId" : "c0fea6ab600f5c6df380b14eed0b32720f005d37",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate source file list of this folder\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set Binary name\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "inexor/crashreporter/CMakeLists.txt" : {
      "ObjectId" : "7e04419a9bed3b49346ab18bc5a5977cac19de47",
      "LastModified" : "2016-12-16T19:05:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "inexor/gamemode/CMakeLists.txt" : {
      "ObjectId" : "33b92a13f4f747d291614a7e29bcaef80a20dd0d",
      "LastModified" : "2018-01-07T20:03:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This function is used to bind this module into another module/application\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "inexor/io/CMakeLists.txt" : {
      "ObjectId" : "fb2cf71896b446939181ed9b21277a11ec0b9ef7",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We work in 2 different scopes in this file: One is this subproject added through add_lib and called module_<ourname>\n\n#                                             The other one is the scope of require_<ourname> used to bind this module\n\n#                                             into other modules and hence operates **in the scope of where it gets executed!**\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get the source lists of all files in this folder (and register us as module)\n\n# Our module is **a static lib** which gets linked into other modules or apps.\n",
        "Line" : 6,
        "CharPositionInLine" : 21
      },
      "2" : {
        "Text" : "# Its name is \"module_io\" (due to this function)\n",
        "Line" : 8,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# Acquire our dependencies for this module\n\n# (\"module_io\" is used and not just \"io\", since we require it for this subproject)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This function is used to bind this module into another module/application\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tell the requiring module that it needs to link with our static lib\n",
        "Line" : 20,
        "CharPositionInLine" : 43
      },
      "6" : {
        "Text" : "# Also tell the other module that it needs our dependencies:\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# we need sdl since we havent refractored cube.hpp good enough yet\n",
        "Line" : 23,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# same cube.hpp shit\n",
        "Line" : 26,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 9
    },
    "inexor/model/CMakeLists.txt" : {
      "ObjectId" : "a0f62844ecaf700ffb59e32863a2295a1e25ed61",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Acquire our dependencies for this module\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This function is used to bind this module into another module/application\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tell the requiring module that it needs to link with our static lib\n",
        "Line" : 11,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 3
    },
    "inexor/network/CMakeLists.txt" : {
      "ObjectId" : "a459ba2d78ddcd3fe9deff1642442fdaffab5774",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate source file list\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# exclude any template file from the source list (it wont compile)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# @param BUILD_FLAGS see require_run_gluegen\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Folder where generated files land: somewhere in the build/ dir.\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "inexor/network/require_run_gluegen.cmake" : {
      "ObjectId" : "8007f1b8b75ae443818c486bf6cdc0868a700c9a",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate Tree API Glue code\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Before building Inexor we generate our serialization glue.\n\n# Therefore we use Doxygen to output the AST in .xml files and parse those, looking for Shared Declarations.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Run Doxygen\n\n# add a target to generate API documentation with Doxygen\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We import it there using conan:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We additionally do this, since we don't have the \"GLUEGEN_EXE\" path anywhere.\n",
        "Line" : 15,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "# Add a gluecode generation run for the specified target.\n\n# Also adds the gluecode intermediates to the source file list of the target.\n\n#\n\n# @param TARG specifies the target name in the format inexor-core-{client|server}\n\n# @param BUILDFLAGS specifies any additional build flags we want to specify for that target:\n\n#        The argument of the tag is a list of macros of the form: name or name=definition (no spaces).\n\n#        If the definition and the \"=\" are omitted, \"=1\" is assumed.\n\n# @param TEMPLATES_DIR specifies the directory where the template files are which get used to generate the target specific gluecode.\n\n# @param OUT_DIR specifies the dir where the .gen.hpp files get spit out.\n\n# @note The .proto file gets additionally copied to CMAKE_RUNTIME_OUTPUT_DIRECTORY.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO move this\n",
        "Line" : 34,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# Generate doxygen config\n",
        "Line" : 42,
        "CharPositionInLine" : 47
      },
      "8" : {
        "Text" : "# The name the proto will be installed (other languages will use this name)\n",
        "Line" : 45,
        "CharPositionInLine" : 75
      },
      "9" : {
        "Text" : "# Generate RPC PROTOCOL API Headers/Sources\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Before building Inexor we generate our serialization headers from\n\n# language independent .proto files\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Tell CMake not to complain about missing files since they get generated:\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add to targets source list.\n",
        "Line" : 78,
        "CharPositionInLine" : 54
      },
      "13" : {
        "Text" : "# clear folder containing intermediate files (the AST xml files) before, since we take the complete folder as input to the next stage.\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Parse the codebase using doxygen and output the AST (Abstract syntax tree) to xml files.\n",
        "Line" : 87,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Run our in-house gluecode generator taking doxygens AST as input and generating .gen.proto and .gen.hpp for ${TARG}.\n",
        "Line" : 90,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Invoke protoc compiler to generate the .gen.pb.h .gen.pb.cpp files from the .proto definition\n",
        "Line" : 99,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# same but for the GRPC additions (which does now generate the RPC logic in .gen.grpc.pb.cc)\n",
        "Line" : 105,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Copy the proto file to the CMAKE_CURRENT_BINARY_DIR\n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# install .proto to bin/all\n",
        "Line" : 124,
        "CharPositionInLine" : 92
      },
      "20" : {
        "Text" : "# Add intermediate targets if desired.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# clear folder containing intermediate files (the AST xml files) before, since we take the complete folder as input to the next stage.\n",
        "Line" : 133,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Parse the codebase using doxygen and output the AST (Abstract syntax tree) to xml files.\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Run our in-house gluecode generator taking doxygens AST as input and generating .gen.proto and .gen.hpp for ${TARG}.\n",
        "Line" : 143,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# Invoke protoc compiler to generate the .gen.pb.h .gen.pb.cpp files from the .proto definition\n",
        "Line" : 156,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# same but for the GRPC additions (which does now generate the RPC logic in .gen.grpc.pb.cc)\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Other:\n\n# Hashing?\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# file(MD5 ${protoc_in} protofile_hash)\n\n# if(NOT(${protofile_hash_old} EQUAL ${protofile_hash}))\n\n# ..\n\n# set(protofile_hash_old ${protofile_hash} CACHE INTERNAL \"\")\n\n# endif()\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Make everything DEPENDS targetfile .. DEPENDS targetfile2.. (commands instead of targets)\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "inexor/physics/CMakeLists.txt" : {
      "ObjectId" : "47a88f239779cb51eccfd6fd99d7ade324c284c3",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Acquire our dependencies for this module\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This function is used to bind this module into another module/application\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tell the requiring module that it needs to link with our static lib\n",
        "Line" : 11,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 3
    },
    "inexor/server/CMakeLists.txt" : {
      "ObjectId" : "5a6b1533cdffb528781168eed282739e7aa6a450",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate source file list from files in this folder\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# files from this folder\n",
        "Line" : 10,
        "CharPositionInLine" : 27
      },
      "2" : {
        "Text" : "# Set Binary name\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "inexor/sound/CMakeLists.txt" : {
      "ObjectId" : "aee6f78e8cbc7d60872c6f0921a65931663c9e22",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Acquire our dependencies for this module\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This function is used to bind this module into another module/application\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Tell the requiring module that it needs to link with our static lib\n",
        "Line" : 11,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 3
    },
    "inexor/test/CMakeLists.txt" : {
      "ObjectId" : "b5d220ad6810c447ada399669b02cfe8a37b4a5e",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This needs to come before the target, sigh\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "inexor/texture/CMakeLists.txt" : {
      "ObjectId" : "2e6c673493e8344ae0330e3521f9edab4fae4c43",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "inexor/ui/CMakeLists.txt" : {
      "ObjectId" : "1deb0dddc3e195b09447595e4efa73c2dc0b4d4e",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UI MODULE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# exclude the subfolder cef_subprocess from the source file list, as these files are in a different binary.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pulled in by including cube.h\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "inexor/ui/cef_subprocess/CMakeLists.txt" : {
      "ObjectId" : "0065180845b0b77f1c6f673b1aeea3279dbe0fb8",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "inexor/util/CMakeLists.txt" : {
      "ObjectId" : "ec766b6c7a61181a59b2a80be5e035d74746d862",
      "LastModified" : "2018-07-05T19:46:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UTIL Module ##############\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 26
  },
  "ElapsedTime" : 1703
}