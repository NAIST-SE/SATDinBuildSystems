{
  "Repository" : "20914773",
  "Revision" : "HEAD",
  "ObjectId" : "191d941c5d0d6aca032ef07decab13c6e89e4703",
  "CommitTime" : "2017-03-26T14:45:41Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c0beeb76a26520b93903ca4ba12aab675f79d2fa",
      "LastModified" : "2017-03-26T13:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check for in-source build, forbid it!\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# require a fairly recent ROOT version\n\n# this is needed by all subdirectories\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# including them as SYSTEM prevents\n\n# many false-positive warnings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# now the relevant subdirectories\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# create a rootlogon.C\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# link the AntSubmit file\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# link the AntSimSubmit file\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# link the AntMapReduce file\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindAPLCONpp.cmake" : {
      "ObjectId" : "a6c9d2105e1547e8dc182b52fe70e67731eb1244",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find APLCONpp\n\n# Once done this will define\n\n#  APLCONpp_FOUND - System has APLCONpp\n\n#  APLCONpp_INCLUDE_DIRS - The APLCONpp include directories\n\n#  APLCONpp_LIBRARIES - The libraries needed to use APLCONpp\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set APLCONpp_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGSL.cmake" : {
      "ObjectId" : "e8ecf616ae9d5e4078952567f453b3a7c947267a",
      "LastModified" : "2017-03-24T18:15:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindGSL\n\n# --------\n\n#\n\n# Find the native GSL includes and libraries.\n\n#\n\n# The GNU Scientific Library (GSL) is a numerical library for C and C++\n\n# programmers. It is free software under the GNU General Public\n\n# License.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# If GSL is found, this module defines the following :prop_tgt:`IMPORTED`\n\n# targets::\n\n#\n\n#  GSL::gsl      - The main GSL library.\n\n#  GSL::gslcblas - The CBLAS support library used by GSL.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project::\n\n#\n\n#  GSL_FOUND          - True if GSL found on the local system\n\n#  GSL_INCLUDE_DIRS   - Location of GSL header files.\n\n#  GSL_LIBRARIES      - The GSL libraries.\n\n#  GSL_VERSION        - The version of the discovered GSL install.\n\n#\n\n# Hints\n\n# ^^^^^\n\n#\n\n# Set ``GSL_ROOT_DIR`` to a directory that contains a GSL installation.\n\n#\n\n# This script expects to find libraries at ``$GSL_ROOT_DIR/lib`` and the GSL\n\n# headers at ``$GSL_ROOT_DIR/include/gsl``.  The library directory may\n\n# optionally provide Release and Debug folders.  For Unix-like systems, this\n\n# script will use ``$GSL_ROOT_DIR/bin/gsl-config`` (if found) to aid in the\n\n# discovery GSL.\n\n#\n\n# Cache Variables\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# This module may set the following variables depending on platform and type\n\n# of GSL installation discovered.  These variables may optionally be set to\n\n# help this module find the correct files::\n\n#\n\n#  GSL_CBLAS_LIBRARY       - Location of the GSL CBLAS library.\n\n#  GSL_CBLAS_LIBRARY_DEBUG - Location of the debug GSL CBLAS library (if any).\n\n#  GSL_CONFIG_EXECUTABLE   - Location of the ``gsl-config`` script (if any).\n\n#  GSL_LIBRARY             - Location of the GSL library.\n\n#  GSL_LIBRARY_DEBUG       - Location of the debug GSL library (if any).\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# If the user has provided ``GSL_ROOT_DIR``, use it!  Choose items found\n\n# at this location over system locations.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\n\n# As a first try, use the PkgConfig module.  This will work on many\n\n# *NIX systems.  See :module:`findpkgconfig`\n\n# This will return ``GSL_INCLUDEDIR`` and ``GSL_LIBDIR`` used below.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================================\n\n# Set GSL_INCLUDE_DIRS and GSL_LIBRARIES. If we skipped the PkgConfig step, try\n\n# to find the libraries at $GSL_ROOT_DIR (if provided) or in standard system\n\n# locations.  These find_library and find_path calls will prefer custom\n\n# locations over standard locations (HINTS).  If the requested file is not found\n\n# at the HINTS location, standard system locations will be still be searched\n\n# (/usr/lib64 (Redhat), lib/i386-linux-gnu (Debian)).\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do we also have debug versions?\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we didn't use PkgConfig, try to find the version via gsl-config or by\n\n# reading gsl_version.h.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 1. If gsl-config exists, query for the version.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# 2. If gsl-config is not available, try looking in gsl/gsl_version.h\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# might also try scraping the directory name for a regex match \"gsl-X.X\"\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#=============================================================================\n\n# handle the QUIETLY and REQUIRED arguments and set GSL_FOUND to TRUE if all\n\n# listed variables are TRUE\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#=============================================================================\n\n# Register imported libraries:\n\n# 1. If we can find a Windows .dll file (or if we can find both Debug and\n\n#    Release libraries), we will set appropriate target properties for these.\n\n# 2. However, for most systems, we will only register the import location and\n\n#    include directory.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Look for dlls, or Release and Debug libraries.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Windows systems with dll libraries.\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Windows with dlls, but only Release libraries.\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# If we have both Debug and Release libraries\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# For all other environments (ones without dll libraries), create\n\n# the imported library targets.\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "cmake/Modules/FindPluto.cmake" : {
      "ObjectId" : "3d6c4d7c695d85a16db04fbe0183572391aee581",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GSI Hades Pluto\n\n# Once done this will define\n\n#  PLUTO_FOUND - System has Pluto\n\n#  PLUTO_INCLUDE_DIRS - The Pluto include directories\n\n#  PLUTO_LIBRARIES - The libraries needed to use Pluto\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PLUTO_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindROOT.cmake" : {
      "ObjectId" : "7f11eadc872a79e64fc5f606e2f2bcd9969ddcfc",
      "LastModified" : "2017-03-26T13:50:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds ROOT instalation\n\n# This module sets up ROOT information\n\n# It defines:\n\n# ROOT_FOUND          If the ROOT is found\n\n# ROOT_INCLUDE_DIR    PATH to the include directory\n\n# ROOT_INCLUDE_DIRS   PATH to the include directories (not cached)\n\n# ROOT_LIBRARIES      Most common libraries\n\n# ROOT_<name>_LIBRARY Full path to the library <name>\n\n# ROOT_LIBRARY_DIR    PATH to the library directory\n\n# ROOT_DEFINITIONS    Compiler definitions and flags\n\n#\n\n# Updated by K. Smith (ksmith37@nd.edu) to properly handle\n\n#  dependencies in ROOT_GENERATE_DICTIONARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This generates a ROOT dictionary from a LinkDef file by using rootcint\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# construct -I arguments\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# construct -D arguments\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# also add the outfile with extension .h\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# and ensure the output directory exists\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# prepare rootcint command\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# this little trick re-runs cmake if the LINKDEF_FILE was changed\n\n# this is needed since rootcint needs an up-to-date list of input files\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/doxygen.cmake" : {
      "ObjectId" : "e08dca7f33b6731918010464e85f485308f11d4d",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# look for Doxygen\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we look for Graphviz, if found, we enable the\n\n# include graph generation\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we use one global Doxyfile\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# and define how to run Doxygen\n\n# it always outputs a symbolic doc dir to avoid clashing\n\n# with the target \"doxygen\"\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# so we can make it saying \"make doxygen\"\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/settings.cmake" : {
      "ObjectId" : "bfe83ee2590fa26295ff6dab9dba008ed357b420",
      "LastModified" : "2017-03-20T09:48:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# every subdirectory has its own bin/lib path\n\n# this should be changed to one \"global\" directory...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we check for empty string here, since the variable\n\n# is indeed defined to an empty string\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enable as many warnings as possible\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check which c++ standard is supported by the compiler\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# really no optimization in debug mode\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# disable optimizations to fix clang infinite loop...\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# for GCC >5.1 add -Wsuggest-override\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# check if gold linker is available and use it\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# for file(GLOB_RECURSE..) don't follow symlinks\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# use some concurrency for tests\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "doc/CMakeGraphVizOptions.cmake" : {
      "ObjectId" : "cb84820e0f7ec5ce5c8be5f21c9e38436c2d89e3",
      "LastModified" : "2016-06-01T09:51:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "progs/CMakeLists.txt" : {
      "ObjectId" : "f108ccab7ef1f6bf4f20235cc1245ea75813ff94",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "274906d4cd4697eb55e3fc98fb4d8a47b13fd5fb",
      "LastModified" : "2017-03-15T09:59:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this makes cross-includes easy,\n\n# for example for like\n\n# >>  #include \"base/Logger.h\"\n\n# but don't forget to link against\n\n# the corresponding library then\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for generated files by configure_file()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the order is important if libraries from\n\n# other subdirectories are needed\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/analysis/CMakeLists.txt" : {
      "ObjectId" : "e96584e7a7a27d8cb3ebb3b3e49e6c10d50c58cb",
      "LastModified" : "2017-03-26T13:50:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/input/CMakeLists.txt" : {
      "ObjectId" : "ac02485899c8b124396541b5dfeb0bb0000a8dc8",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/CMakeLists.txt" : {
      "ObjectId" : "c2d0029013943770c25e6bf301c023daea78de52",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the additional linker flag is very important if\n\n# physics classes define symbols (such as plotter classes)\n\n# with the same name (see for example tunings/TriggerSimulation and check/PIDEfficiencyCheck)\n\n# the linker then picks just one, and this leads to weird segfaults in Ant-plot\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# tweak also the output into separare lib dir\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# no lib prefix\n",
        "Line" : 17,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 3
    },
    "src/analysis/physics/calibration/CMakeLists.txt" : {
      "ObjectId" : "3b0e5b8f190351a8c3b0109ff8a608f50cbb2dff",
      "LastModified" : "2017-03-15T09:59:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/check/CMakeLists.txt" : {
      "ObjectId" : "460ce1a43fa0995b15e46d5fec7d7706843a0b4e",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/common/CMakeLists.txt" : {
      "ObjectId" : "4ce067f0be13757c99933bf156b393f4e771fa79",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/etaprime/CMakeLists.txt" : {
      "ObjectId" : "9fae4db424f2863a1721a59724889718d9db7b8a",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/misc/CMakeLists.txt" : {
      "ObjectId" : "f82608aa432210675f0d0e5049b9aae120818f1e",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/omega/CMakeLists.txt" : {
      "ObjectId" : "cc5d006f29ea99560fdccdc34f4b56a87eb9b49d",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/pi0/CMakeLists.txt" : {
      "ObjectId" : "b5c29e588f30a655f6431dfbb84198942d2204e7",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/production/CMakeLists.txt" : {
      "ObjectId" : "23e95226367c2a980980ae38742e437fefa4d3c2",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/scratch/CMakeLists.txt" : {
      "ObjectId" : "6345d175b854b6f59017e865a65745503e6e503d",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/test/CMakeLists.txt" : {
      "ObjectId" : "f21a6ce9e02f84b48edfe17b09edc38b8703a093",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/tpc/CMakeLists.txt" : {
      "ObjectId" : "bd4776dda97d96a9af95f6e36b3c53ce9a9ba392",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/physics/tunings/CMakeLists.txt" : {
      "ObjectId" : "9148bde0c23e02aba5b363df4546a3e3dcde722f",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/plot/CMakeLists.txt" : {
      "ObjectId" : "1a3836c9a5c9fd0df41564ad71cd2ecddf4059c8",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/analysis/slowcontrol/CMakeLists.txt" : {
      "ObjectId" : "a2d72cdd56b5221284fe22e15515256e08183696",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# since the processors and the variables are\n\n# managed in static registries, they are compiled\n\n# as separate libraries\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/analysis/utils/CMakeLists.txt" : {
      "ObjectId" : "5eaa0cfaaae7af004acc1db2949260ac2599a4e7",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/base/CMakeLists.txt" : {
      "ObjectId" : "640417ca24d0f07af70658aba85de39af9df5c0f",
      "LastModified" : "2017-03-26T11:23:11Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/calibration/CMakeLists.txt" : {
      "ObjectId" : "3b17ef7ad2539ddc85a61959d07879d40c1f5972",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/expconfig/CMakeLists.txt" : {
      "ObjectId" : "243a8e1025fa97aa129ef1e1e145c66188850618",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make detector stuff own library,\n\n# very important to get init of static members at correct runtime\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/mc/database/CMakeLists.txt" : {
      "ObjectId" : "38c947c92ae5bb40a5fb9b4902f0c47a1d4846f0",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/mc/pluto/CMakeLists.txt" : {
      "ObjectId" : "082fd63eb32e55db92beace6ed46cbc2403102f6",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/reconstruct/CMakeLists.txt" : {
      "ObjectId" : "d1e93049f3a1108dd3ce7726f16cb1bc78bcc42d",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/root-addons/CMakeLists.txt" : {
      "ObjectId" : "1f1c9b396aad7634d425af1f5442cbbadb560f98",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/root-addons/analysis_codes/CMakeLists.txt" : {
      "ObjectId" : "93991170f5bf5d16abe703d53694a8ce5d3956d0",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/root-addons/cbtaps_display/CMakeLists.txt" : {
      "ObjectId" : "c9431e121426285f61a7a93f80325c36730d730d",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tree/CMakeLists.txt" : {
      "ObjectId" : "f7c4c5d13f1c2421268c45f71303538b3c1d17a0",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/unpacker/CMakeLists.txt" : {
      "ObjectId" : "a71399df86441ec06ba375757a13085ad8533945",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pluto is needed for Geant root files including copied TID information\n",
        "Line" : 22,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "e39de2413c01001b1ab4607b9e9f48e57f1c8062",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the catch++ library is the workhorse for our tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# some tests need binary blobs\n\n# use a configure file to\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# two helpers for defining tests\n\n# we don't simply GLOB over all files,\n\n# because macros are more flexible\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# search for expconfig, then automatically add expconfig_helpers\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "test/analysis/CMakeLists.txt" : {
      "ObjectId" : "b21d687f6f8f43d62a0847b51d03387895619eb2",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/base/CMakeLists.txt" : {
      "ObjectId" : "825587b663fad8e00f528806288034a9a84c925b",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/calibration/CMakeLists.txt" : {
      "ObjectId" : "963246f4337002a4425bf531b247033f579ac3c5",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/expconfig/CMakeLists.txt" : {
      "ObjectId" : "836c9c248a62a799e6bf6be5aca3b6f7356223ef",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/reconstruct/CMakeLists.txt" : {
      "ObjectId" : "6195d7e2c0f4fb74804e168bbf04f681344a8197",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/tree/CMakeLists.txt" : {
      "ObjectId" : "8a7958fd583df9b57106be77773b61233a99ef0a",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/unpacker/CMakeLists.txt" : {
      "ObjectId" : "8c59ec022b344c89a71e3dab97e9d785de333f55",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third-party/CMakeLists.txt" : {
      "ObjectId" : "c38fbc0c6cb1a9a466b19945ed4e69d41add071c",
      "LastModified" : "2017-03-24T18:46:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 48
  },
  "ElapsedTime" : 1909
}