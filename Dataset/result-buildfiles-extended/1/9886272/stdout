{
  "Repository" : "9886272",
  "Revision" : "HEAD",
  "ObjectId" : "8d6e6e8c36ed50466e2fc622852f7b75f728b3c2",
  "CommitTime" : "2019-04-20T20:24:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "58fc7a73e6273651ad60b86e9672cff51f3d4618",
      "LastModified" : "2019-04-16T18:36:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# compiler flags\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# character set to Not Set=ASCII/SBCS\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# http://public.kitware.com/Bug/view.php?id=12189\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# disable rtti\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# enable all warnings\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# fix the code for this\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# force visual studio and the like to only have debug and release builds\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "base64/CMakeLists.txt" : {
      "ObjectId" : "d2cb98228c4e59855854d667c1d5a1956e299bac",
      "LastModified" : "2018-05-16T06:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -fix\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "chatbot_test/CMakeLists.txt" : {
      "ObjectId" : "d41b54a4cf72acb8513a2c8e9c3bf823614106d5",
      "LastModified" : "2018-05-16T06:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -fix\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake-modules/FindGMock.cmake" : {
      "ObjectId" : "43a83df03b19a68fe37aa62bbfd385e2d807402f",
      "LastModified" : "2018-05-16T06:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the Google C++ Mocking Framework.\n\n# (This file is almost an identical copy of the original FindGTest.cmake file,\n\n#  feel free to use it as it is or modify it for your own needs.)\n\n#\n\n#\n\n# Defines the following variables:\n\n#\n\n#   GMOCK_FOUND - Found the Google Testing framework\n\n#   GMOCK_INCLUDE_DIRS - Include directories\n\n#\n\n# Also defines the library variables below as normal\n\n# variables. These contain debug/optimized keywords when\n\n# a debugging library is found.\n\n#\n\n#   GMOCK_BOTH_LIBRARIES - Both libgmock & libgmock-main\n\n#   GMOCK_LIBRARIES - libgmock\n\n#   GMOCK_MAIN_LIBRARIES - libgmock-main\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   GMOCK_ROOT - (as a CMake or environment variable)\n\n#                The root directory of the gmock install prefix\n\n#\n\n#   GMOCK_MSVC_SEARCH - If compiling with MSVC, this variable can be set to\n\n#                       \"MD\" or \"MT\" to enable searching a gmock build tree\n\n#                       (defaults: \"MD\")\n\n#\n\n#-----------------------\n\n# Example Usage:\n\n#\n\n#    find_package(GMock REQUIRED)\n\n#    include_directories(${GMOCK_INCLUDE_DIRS})\n\n#\n\n#    add_executable(foo foo.cc)\n\n#    target_link_libraries(foo ${GMOCK_BOTH_LIBRARIES})\n\n#\n\n#=============================================================================\n\n# This file is released under the MIT licence:\n\n#\n\n# Copyright (c) 2011 Matej Svec\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to\n\n# deal in the Software without restriction, including without limitation the\n\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n\n# sell copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n\n# IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake-modules/FindSDL2.cmake" : {
      "ObjectId" : "7c11495bf43f941b9e8177a68dc29dc3e1ce8f40",
      "LastModified" : "2018-05-16T06:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 77,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 78,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 79,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 144,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 154,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# https://forums.libsdl.org/viewtopic.php?p=39921\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# For MinGW library\n",
        "Line" : 167,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 172,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 174,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 15
    },
    "cmake-modules/Findassimp.cmake" : {
      "ObjectId" : "63b573d8e0bbbdab4fa59884c768ce674c8727df",
      "LastModified" : "2018-05-16T06:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find path of each library\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# release should be assimp-vc140-mt.dll\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "core/CMakeLists.txt" : {
      "ObjectId" : "ef457e5674276b3c25ee348b3e1b80877019fee6",
      "LastModified" : "2018-08-12T10:15:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# todo: move image loading to a io library instead\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# release date 2017-09-23 version duktape-2.2.0.tar.xz\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -fix\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# -fix\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "demo/CMakeLists.txt" : {
      "ObjectId" : "c611ac926e45e116089ca676c543a8ba357a4d3a",
      "LastModified" : "2018-05-16T06:32:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# imgui\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# -fix\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "duk/CMakeLists.txt" : {
      "ObjectId" : "d4d1538afec8331787e86b9c37c11f2f34f275da",
      "LastModified" : "2018-10-10T19:06:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# release date 2017-09-23 version duktape-2.2.0.tar.xz\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# -fix\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "editor/CMakeLists.txt" : {
      "ObjectId" : "7fb4eac5ec7ccd0f888da9fdc82612e5f07a42ca",
      "LastModified" : "2018-10-10T19:06:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -fix\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "engine/CMakeLists.txt" : {
      "ObjectId" : "b09c3d1a4a33f9bd5c837a94e4fe7f558de736b8",
      "LastModified" : "2018-10-10T19:06:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# release date 2017-09-23 version duktape-2.2.0.tar.xz\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# -fix\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "gui/CMakeLists.txt" : {
      "ObjectId" : "ba3782f957e125826efef6f28ba830f95880f3eb",
      "LastModified" : "2018-10-10T19:06:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -fix\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "render/CMakeLists.txt" : {
      "ObjectId" : "3f66dd520789eb0e6cc82279af8b364d6f6ad531",
      "LastModified" : "2018-10-10T19:06:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# freetype\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# glad\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# imgui\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# todo: look into how different stb libs work together\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# -fix\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# -fix\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "tabletool/CMakeLists.txt" : {
      "ObjectId" : "7034e3102138709e11a5e804a79ef9671a28ecb6",
      "LastModified" : "2019-02-11T22:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "fbcbe0cb0a55820349e1f835adfbab15b864dd8e",
      "LastModified" : "2019-02-11T22:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(src ${src} ${GMOCK_SOURCES})\n\n# source_group(\"gmock\" FILES ${GMOCK_SOURCES})\n\n# include_directories(${GMOCK_INCLUDE_DIRS})\n\n# add_definitions(-DGTEST_USE_OWN_TR1_TUPLE=1)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tracery/CMakeLists.txt" : {
      "ObjectId" : "96a6bc03c19842095c5a0217c34264d3f3dcb459",
      "LastModified" : "2019-03-09T10:59:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "window/CMakeLists.txt" : {
      "ObjectId" : "53a9c4845ff2e5b22a6d21ddcb7ba177ed4ef91f",
      "LastModified" : "2019-03-09T10:59:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# glad\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(src_glad ../external/glad/src/glad.c ../external/glad/include/glad/glad.h)\n\n#set(src ${src} ${src_glad})\n\n#source_group(\"glad\" FILES ${src_glad})\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# imgui\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -fix\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# -fix\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "worldgen/CMakeLists.txt" : {
      "ObjectId" : "668123b0714140735ab063d4baa546eaa7df8ca4",
      "LastModified" : "2019-04-16T18:36:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -fix\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# -fix\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 18
  },
  "ElapsedTime" : 1517
}