{
  "Repository" : "211577",
  "Revision" : "HEAD",
  "ObjectId" : "42a7caf2c75923ccbbfdcd072673586cda684cac",
  "CommitTime" : "2015-08-26T01:42:59Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "3278df1bf43e2bef229a5c96935c14a22a42dc18",
      "LastModified" : "2014-10-03T18:21:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find C++11 flags\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find clock_gettime function\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Google Test wants to include <tr1/tuple> instead of just tuple\n\n# If we can't find it, we have to force it to use its own implementation\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make sure to pick up headers from library dirs\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# unit tests\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# main project\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install scripts\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# integration testing\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# generate documentation\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Dump clang compilation database for use with YCM\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "PackageInfo.cmake" : {
      "ObjectId" : "5a8a845702a07638cbdefbaaf253e7b7231c002f",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .deb packaging\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# joinx1.9 is currently the default with a priority of 20\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The format of the description field is a short summary line followed by a\n\n# longer paragraph indented by a single space on each line\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "build-common/cmake/FindCairo.cmake" : {
      "ObjectId" : "fd53ce054fee61e2f23142c761870d23a9b0aa9a",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Cairo\n\n# Once done, this will define\n\n#\n\n#  Cairo_FOUND - system has Cairo\n\n#  Cairo_INCLUDE_DIRS - the Cairo include directories\n\n#  Cairo_LIBRARIES - link these to use Cairo\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include dir\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "build-common/cmake/FindCairomm.cmake" : {
      "ObjectId" : "78de86d105919acaabd15b61fa981de20c83c8cd",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Cairomm 1.0\n\n# Once done, this will define\n\n#\n\n#  Cairomm_FOUND - system has Cairomm\n\n#  Cairomm_INCLUDE_DIRS - the Cairomm include directories\n\n#  Cairomm_LIBRARIES - link these to use Cairomm\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Main include dir\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FIXME: figure out how to let libfind locate libsigc++\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "build-common/cmake/FindFreetype.cmake" : {
      "ObjectId" : "2e04e0ae4dcc7e97dc8382b4e97fd0f7e1ec46eb",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Freetype2\n\n# Once done, this will define\n\n#\n\n#  Freetype_FOUND - system has Freetype\n\n#  Freetype_INCLUDE_DIRS - the Freetype include directories\n\n#  Freetype_LIBRARIES - link these to use Freetype\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include dir\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "build-common/cmake/FindSamtools.cmake" : {
      "ObjectId" : "442b594bb06accd2b6af3bf6e7b9c137760fce82",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Samtools \n\n# Once done, this will define\n\n#\n\n#  Samtools_FOUND - system has Samtools\n\n#  Samtools_INCLUDE_DIRS - the Samtools include directories\n\n#  Samtools_LIBRARIES - link these to use Samtools\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include dir\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this lib depends on.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "build-common/cmake/FindTRE.cmake" : {
      "ObjectId" : "e5fca11bd327f98dd337c134581beed2bdb356c4",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find TRE \n\n# Once done, this will define\n\n#\n\n#  TRE - system has TRE\n\n#  TRE_INCLUDE_DIRS - the TRE include directories\n\n#  TRE_LIBRARIES - link these to use TRE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dependencies\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include dir\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this lib depends on.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "build-common/cmake/LibFindMacros.cmake" : {
      "ObjectId" : "69975c51be3f9c5e0ff372a4424f8de3b580ee88",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "build-common/cmake/ProjectHelper.cmake" : {
      "ObjectId" : "e51c463867c25e6df8295418bf8020259c4a82e3",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "build-common/cmake/TestHelper.cmake" : {
      "ObjectId" : "712027d4e9e6c0deb3931246c28c1a52f95b9c29",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build/configure gtest\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "build-common/cmake/VersionHelper.cmake" : {
      "ObjectId" : "b725ce905ea483e0d8860caf24380fc1dc3da82a",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/BuildDeps.cmake" : {
      "ObjectId" : "6f6d47e61f95408afc3fbcbfecdb349d603fdd6e",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/PlatformChecks.cmake" : {
      "ObjectId" : "a0df56c47f6826ec53d224eadb52be8d2484b981",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "1d85e3cfedf0d77c9f35a29ae8d08439e44f1c8c",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "integration-test/CMakeLists.txt" : {
      "ObjectId" : "6cf15efa49b6cd21ec0628609c56143ba02c907d",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/exe/contrib/CMakeLists.txt" : {
      "ObjectId" : "08cb5e68bb37f1eda9e8baf8d0868e7ab3d78863",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/exe/joinx/CMakeLists.txt" : {
      "ObjectId" : "81d0fa063c9014f8ec8f272e4f0591822eded8c0",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/annotate/CMakeLists.txt" : {
      "ObjectId" : "67fa59691d664358797f864026caf277051e05d9",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/common/CMakeLists.txt" : {
      "ObjectId" : "cafb99cd82f2a5be1080efa13a0eb9e5e80d080b",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/fileformats/CMakeLists.txt" : {
      "ObjectId" : "48a7e282cc69b221aaefc04417a57c141bad3313",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/io/CMakeLists.txt" : {
      "ObjectId" : "be3bae35414643228b6f7e46ee10c1571fe993c3",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/metrics/CMakeLists.txt" : {
      "ObjectId" : "52f44604389a0e2941a07db36f323bd24c8aa03c",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/parse/CMakeLists.txt" : {
      "ObjectId" : "b853043eb9ee0d4a1807d737203902c3212be37f",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/processors/CMakeLists.txt" : {
      "ObjectId" : "98432c9a0bc82bf17e8b415945f93e6596fa6127",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lib/ui/CMakeLists.txt" : {
      "ObjectId" : "629c1de398fe36a9741c7374ef9fca24306d909e",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/scripts/CMakeLists.txt" : {
      "ObjectId" : "8018fbd1092fe4f6e232b73157160317348f77d7",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/annotate/CMakeLists.txt" : {
      "ObjectId" : "71d529aeccd64164849874e3439986d4c8ad297c",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/common/CMakeLists.txt" : {
      "ObjectId" : "9f7ca228e257e23a569375ea5a736f139411f66c",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/fileformats/CMakeLists.txt" : {
      "ObjectId" : "0119cba6999b70bbc54862a2af0c42faeaf5d980",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/io/CMakeLists.txt" : {
      "ObjectId" : "b1ae3f8b4188c1e42f7bb2311093b8a579418384",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/metrics/CMakeLists.txt" : {
      "ObjectId" : "85d7d6d573b3bd942ef91184df26ab50c56f199f",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/parse/CMakeLists.txt" : {
      "ObjectId" : "876145349a0c1bb8f434c0c754bf8f8b85a3fe8f",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/processors/CMakeLists.txt" : {
      "ObjectId" : "58ff64d3a713504a3d08fdb25c97f7470ed5bd4d",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/lib/ui/CMakeLists.txt" : {
      "ObjectId" : "e2486e67f03c2e582b6bd3c77d9aade569f102b5",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vendor/boost/libs/serialization/CMake/CMakeLists.txt" : {
      "ObjectId" : "d5ff86d03a235e27fb0c4e820503830f63b07168",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build control file for Serialization Library tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Compiler settings\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set (CMAKE_CXX_FLAGS \"-std=c++11\" )\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#\n\n# IDE settings\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# note: it seems that bjam builds both address models in any case\n\n# so we can defer this decision to the IDE just as we do for debug/release\n\n# so we'll not use this now\n\n# set(Boost_ADDRESS_MODEL 64 CACHE INTEGER \"32/64 bits\")\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\n\n# Locate Project Prerequisites \n\n#\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Boost\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# note: we're assuming that boost has been built with:\n\n# ./b2 —-layout=versioned toolset=clang-darwin link=static,shared variant=debug,release stage\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###########################\n\n# special notes for Xcode.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# these three should result in CMake setting the variables\n\n# Boost_SERIALIZATION_LIBRARY_DEBUG … to the correct values.  \n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# But my current version of CMake doesn't automatically set the library names\n\n# to point to the the libraries to be used.  The variables are created\n\n# but they are not initialized.  So be prepared to set these variables by hand.\n\n# If you want to use the static libraries - point to the boost libraries ending\n\n# in \".a\".  If you want to use the shared boost libraries - point to the libraries\n\n# ending in \".dylib\".\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# But wait - there's more.\n\n# if both lib.a and lib.dylib both exist in the library directory, Xcode will\n\n# automatically chose the *.dylib one - and there's nothing you can do to fix this.\n\n# So my recommendation is \n\n# a) to place the compiled libraries in two different directories\n\n#    - e.g. stage/lib-static/*.a and stage/lib-shared/*.dylib\n\n#    and set the CMake variable Boost_LIBRARY_DIR to point to one or the other\n\n# b) create two different CMake build directories - build-static and build-shared\n\n#    and switch between projects as desired.  I like to test both since\n\n#    there are things like dead code elimination and visibility which vary\n\n#    between the two environments.\n\n#\n\n#    caveat - as I write this, I've been unable to get the tests on the shared\n\n#    library to function. Problem is that one needs to either put the shared\n\n#    libraries in a special known place or set an environmental\n\n#    variable which points to the shared library directory.  I prefer the latter\n\n#    but I've been unable to figure out how to get Xcode to do on a global basis\n\n#    and it's not practical to do this for 247 test targets one at a time.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# c) The targets in the project will by default be built as universal 32/64 binaries\n\n#    I have yet to experiment with these yet so I just set the target to 64 bit.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# end special note for Xcode\n\n############################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "###########################\n\n# library builds\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# end library build\n\n###########################\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "###########################\n\n# test targets\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# serialization(test_dll_exported dll_polymorphic_derived2_lib)\n\n# serialization(test_dll_simple dll_a_lib)\n\n# compile test_dll_plugin.cpp\n\n# Running the following test requires that the test know the directory \n\n# in which the dll is stored. I don't know how to extract this from bjam\n\n# serialization(test_dll_plugin : : dll_polymorphic_derived2_lib)\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# archive_test(test_private_base)\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# end test targets\n\n####################\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "####################\n\n# add headers in IDE\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# end headers in IDE\n\n####################\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#####################\n\n# add test project to run misc tests\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# end test project\n\n#####################\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "vendor/boost/tools/build/example/make/main_cpp.pro" : {
      "ObjectId" : "237c8ce181774d991a9dbdd8cacf1a5fb9f199f1",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "vendor/boost/tools/build/src/engine/boehm_gc/Makefile.am" : {
      "ObjectId" : "e632864df2b7bf33a97469b112be0e104bc15b5e",
      "LastModified" : "2015-02-04T21:29:34Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright (c) 1999-2001 by Red Hat, Inc. All rights reserved.\n\n# \n\n# THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n\n# OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n\n# \n\n# Permission is hereby granted to use or copy this program\n\n# for any purpose,  provided the above notices are retained on all copies.\n\n# Permission to modify the code and to distribute modified code is granted,\n\n# provided the above notices are retained, and a notice that the code was\n\n# modified is included with the above copyright notice.\n\n#\n\n# Original author: Tom Tromey\n\n# Severely truncated by Hans-J. Boehm\n\n# Modified by: Grzegorz Jakacki <jakacki at acm dot org>\n\n# Modified by: Petter Urkedal <petter.urkedal@nordita.dk> (2005-04)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Process this file with automake to produce Makefile.in.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## FIXME: `make distcheck' in this directory will not currently work.\n\n##     This is most likely to the explicit flags passed to submakes.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We currently use the source files directly from libatomic_ops, if we\n\n# use the internal version.  This is done since libatomic_ops doesn't\n\n# use libtool, since it has no real use for it.  But that seems to make\n\n# it hard to use either the resulting object files or libraries.\n\n# Thus there seems too be no real reason to recusively build in the\n\n# libatomic_ops directory.\n\n# if USE_INTERNAL_LIBATOMICS_OPS\n\n# SUBDIRS = @maybe_libatomic_ops@\n\n# else\n\n# SUBDIRS =\n\n# endif\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Initialize variables so that we can declare files locally.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# C Library\n\n# ---------\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# C Library: Architecture Dependent\n\n# ---------------------------------\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Include THREADDLLIBS here to ensure that the correct versions of\n\n# linuxthread semaphore functions get linked:\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# C++ Interface\n\n# -------------\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# FIXME: If Visual C++ users use Makefile.am, this should go into\n\n# pkginclude_HEADERS with proper AM_CONDITIONALization.  Otherwise\n\n# delete this comment.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Misc\n\n# ----\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## FIXME: relies on internal code generated by automake.\n\n## FIXME: ./configure --enable-dependency-tracking should be used \n\n#all_objs = @addobjs@ $(libgc_la_OBJECTS)\n\n#$(all_objs) : include/private/gcconfig.h include/private/gc_priv.h \\\n#include/private/gc_hdrs.h include/gc.h include/gc_gcj.h \\\n#include/gc_pthread_redirects.h include/gc_config_macros.h \\\n#include/private/thread_local_alloc.h include/private_support.h \\\n#include/private/pthread_stop_world.h \\\n#include/gc_mark.h @addincludes@\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## FIXME: we shouldn't have to do this, but automake forces us to.\n\n## We use -Wp,-P to strip #line directives.  Irix `as' chokes on\n\n## these.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## XLC neither requires nor tolerates the unnecessary assembler goop\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "## We use -Wp,-P to strip #line directives.  Irix `as' chokes on\n\n## these.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "## We need to add DEFS to assembler flags\n\n## :FIXME: what if assembler does not accept -D... ?\n\n##     (use Autoconf to prepare ASDEFS ???)\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## callprocs --- used by Makefile.{dj,direct}\n\n## configure.host --- used by Makefile.{am,dj,direct}\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# headers which are not installed\n\n# (see include/include.am for more)\n\n#\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# documentation which is not installed\n\n#\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# other makefiles\n\n# :GOTCHA: deliberately we do not include 'Makefile'\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# files used by makefiles other than Makefile.am\n\n#\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The libatomic_ops library.  This is not ideal, since we pick up junk from\n\n# there.  The hard-coded version number should also go.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# this is an auxiliary shell file used by Makefile and Makefile.direct\n\n#\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# :FIXME: why do we distribute this one???\n\n#\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# :GOTCHA: GNU make rule for making .s out of .S is flawed, \n\n# it will not remove dest if building fails\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Putting these at the top causes cord to be built first, and not find libgc.a\n\n# on HP/UX.  There may be a better fix.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    }
  },
  "FileTypes" : {
    "CMAKE" : 35,
    "QMAKE" : 1,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2009
}