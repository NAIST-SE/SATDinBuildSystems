{
  "Repository" : "7294393",
  "Revision" : "HEAD",
  "ObjectId" : "5784dd6dc9483535c2290407d4e417a4b5ad8bd6",
  "CommitTime" : "2019-04-15T21:37:20Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "2611d70867ff6d08ec955c088e3f3a01ecc14877",
      "LastModified" : "2019-03-05T21:42:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Override version information for non-base builds\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix linking on 10.14+. See issue #4762 on github\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# TODO: Fix linking issues with msys debug builds\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Resolve Qt5::qmake to full path for use in packaging scripts\n",
        "Line" : 166,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# check for Qt4\n",
        "Line" : 174,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# check for libsndfile\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check for CARLA\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# look for carla under old name\n",
        "Line" : 236,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# check for SDL\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# check for Stk\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# check for PortAudio\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# check for libsoundio\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# check for PulseAudio\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# check for MP3/Lame-libraries\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# check for OGG/Vorbis-libraries\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# check whether to enable OSS-support\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# check for ALSA\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# check for JACK\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# use dlsym instead\n",
        "Line" : 389,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# check for FFTW3F-library\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# check for FLTK\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# check for Fluidsynth\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# check for libgig\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# check for pthreads\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# check for WINE\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# check for libsamplerate\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set compiler flags\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Due to a regression in gcc-4.8.X, we need to disable array-bounds check\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 489,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# people simply updating git will still have this and mess up build with it\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Get list of all committers from git history, ordered by number of commits.\n\n# The CONTRIBUTORS file is used by AboutDialog. This information can be provided\n\n# with -DCONTRIBUTORS=/path/to/CONTRIBUTORS instead. For instance, to generate\n\n# this file for version 1.1.3, the command is:\n\n# \tgit shortlog -sne v1.1.3 | cut -c8-\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# embedded resources stuff\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# compile buildtools native\n",
        "Line" : 524,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# we somehow have to make LMMS-binary depend on MOC-files\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# use ccache\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# make sub-directories\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# post-install tasks\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# install headers\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# package ZynAddSubFX into win32 build\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n# add distclean-target\n\n#\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n# add tarball-target\n\n#\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n# display configuration information\n\n#\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "b27dec91e0fe8424284697df13cafb789bb72256",
      "LastModified" : "2016-09-10T02:27:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/apple/CMakeLists.txt" : {
      "ObjectId" : "835d886b9b6b890df2afb308d7adce240925e259",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DMG creation target\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# see also ../postinstall/CMakeLists.txt\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/linux/CMakeLists.txt" : {
      "ObjectId" : "24cc859c3d3ccc472f31ca5d11c57540a62ef854",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AppImage creation target\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/BashCompletion.cmake" : {
      "ObjectId" : "c3916f201b527e5c1bc2d4bf4c3c43ca57de2b5b",
      "LastModified" : "2018-12-09T10:19:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# A wrapper around pkg-config-provided and cmake-provided bash completion that\n\n# will have dynamic behavior at INSTALL() time to allow both root-level\n\n# INSTALL() as well as user-level INSTALL().\n\n#\n\n# See also https://github.com/scop/bash-completion\n\n#\n\n# Copyright (c) 2018, Tres Finocchiaro, <tres.finocchiaro@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Usage:\n\n#    INCLUDE(BashCompletion)\n\n#    BASHCOMP_INSTALL(foo)\n\n#    ... where \"foo\" is a shell script adjacent to the CMakeLists.txt\n\n#\n\n# How it determines BASHCOMP_PKG_PATH, in order:\n\n#    1. Uses BASHCOMP_PKG_PATH if already set (e.g. -DBASHCOMP_PKG_PATH=...)\n\n#       a. If not, uses pkg-config's PKG_CHECK_MODULES to determine path\n\n#       b. Fallback to cmake's FIND_PACKAGE(bash-completion) path\n\n#       c. Fallback to hard-coded /usr/share/bash-completion/completions\n\n#    2. Final fallback to ${CMAKE_INSTALL_PREFIX}/share/bash-completion/completions if\n\n#       detected path is unwritable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Windows does not support bash completion\n\n# - macOS support should eventually be added for Homebrew (TODO)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Honor manual override if provided\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# First, use pkg-config, which is the most reliable\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Second, use cmake (preferred but less common)\n",
        "Line" : 40,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Third, use a hard-coded fallback value\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Always provide a fallback for non-root INSTALL()\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Cmake doesn't allow easy use of conditional logic at INSTALL() time\n\n# this is a problem because ${BASHCOMP_PKG_PATH} may not be writable and we\n\n# need sane fallback behavior for bundled INSTALL() (e.g. .AppImage, etc).\n\n#\n\n# The reason this can't be detected by cmake is that it's fairly common to\n\n# run \"cmake\" as a one user (i.e. non-root) and \"make install\" as another user\n\n# (i.e. root).\n\n#\n\n# - Creates a script called \"install_${SCRIPT_NAME}_completion.sh\" into the\n\n#   working binary directory and invokes this script at install.\n\n# - Script handles INSTALL()-time conditional logic for sane ballback behavior\n\n#   when ${BASHCOMP_PKG_PATH} is unwritable (i.e. non-root); Something cmake\n\n#   can't handle on its own at INSTALL() time)\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# A shell script for wrapping conditionl logic\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/modules/BuildPlugin.cmake" : {
      "ObjectId" : "25cca92afbc5216867fd14c16905969633cbfb57",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# BuildPlugin.cmake - Copyright (c) 2008 Tobias Doerffel\n\n#\n\n# description: build LMMS-plugin\n\n# usage: BUILD_PLUGIN(<PLUGIN_NAME> <PLUGIN_SOURCES> MOCFILES <HEADERS_FOR_MOC> EMBEDDED_RESOURCES <LIST_OF_FILES_TO_EMBED> UICFILES <UI_FILES_TO_COMPILE> LINK <SHARED|MODULE>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Expand and sort arguments to avoid locale dependent sorting in\n\n# shell\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Override Qt debug libraries with release versions\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/DetectMachine.cmake" : {
      "ObjectId" : "60c4a0953ce3838b6842671219fe4d9fd11820c1",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See build_mingwXX.sh for LMMS_BUILD_MSYS\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect Homebrew versus Macports environment\n",
        "Line" : 63,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Detect OS Version\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindAlsa.cmake" : {
      "ObjectId" : "c70fa7aaa4ec069a6ec5f2a3eda8e846beb64aa6",
      "LastModified" : "2015-08-12T15:39:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Alsa check, based on libkmid/configure.in.in.\n\n# Only the support for Alsa >= 0.9.x was included; 0.5.x was dropped (but feel free to re-add it if you need it)\n\n# It defines ...\n\n# It offers the following macros:\n\n#  ALSA_CONFIGURE_FILE(config_header) - generate a config.h, typical usage: \n\n#                                       ALSA_CONFIGURE_FILE(${CMAKE_BINARY_DIR}/config-alsa.h)\n\n#  ALSA_VERSION_STRING(version_string)  looks for alsa/version.h and reads the version string into\n\n#                                       the first argument passed to the macro\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already done by toplevel\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check for version in alsa/version.h\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindLame.cmake" : {
      "ObjectId" : "e5dc93bd5a7bdb5c91ddb663237499a23ece27c4",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LAME\n\n# Once done this will define\n\n#\n\n# LAME_FOUND - system has liblame\n\n# LAME_INCLUDE_DIRS - the liblame include directory\n\n# LAME_LIBRARIES - The liblame libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindOggVorbis.cmake" : {
      "ObjectId" : "79a9ab406575a93ddb26b00652c933c200e04890",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the OggVorbis libraries\n\n# Once done this will define\n\n#\n\n#  OGGVORBIS_FOUND - system has OggVorbis\n\n#  OGGVORBIS_VERSION - set either to 1 or 2\n\n#  OGGVORBIS_INCLUDE_DIR - the OggVorbis include directory\n\n#  OGGVORBIS_LIBRARIES - The libraries needed to use OggVorbis\n\n#  OGG_LIBRARY         - The Ogg library\n\n#  VORBIS_LIBRARY      - The Vorbis library\n\n#  VORBISFILE_LIBRARY  - The VorbisFile library\n\n#  VORBISENC_LIBRARY   - The VorbisEnc library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Richard Laerkaeng, <richard@goteborg.utfors.se>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#check_include_files(vorbis/vorbisfile.h HAVE_VORBISFILE_H)\n\n#check_library_exists(ogg ogg_page_version \"\" HAVE_LIBOGG)\n\n#check_library_exists(vorbis vorbis_info_init \"\" HAVE_LIBVORBIS)\n\n#check_library_exists(vorbisfile ov_open \"\" HAVE_LIBVORBISFILE)\n\n#check_library_exists(vorbisenc vorbis_info_clear \"\" HAVE_LIBVORBISENC)\n\n#check_library_exists(vorbis vorbis_bitrate_addblock \"\" HAVE_LIBVORBISENC2)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis found\")\n\n#    set (VORBIS_LIBS \"-lvorbis -logg\")\n\n#    set (VORBISFILE_LIBS \"-lvorbisfile\")\n\n#    set (VORBISENC_LIBS \"-lvorbisenc\")\n\n#    set (OGGVORBIS_FOUND TRUE)\n\n#    if (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 2)\n\n#    else (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 1)\n\n#    endif (HAVE_LIBVORBISENC2)\n\n#else (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis not found\")\n\n#endif (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindPortaudio.cmake" : {
      "ObjectId" : "bb6bdf48b244cc61b8731a13ad647b7cbacd73ed",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Portaudio\n\n# Once done this will define\n\n#\n\n#  PORTAUDIO_FOUND - system has Portaudio\n\n#  PORTAUDIO_INCLUDE_DIRS - the Portaudio include directory\n\n#  PORTAUDIO_LIBRARIES - Link these to use Portaudio\n\n#  PORTAUDIO_DEFINITIONS - Compiler switches required for using Portaudio\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the PORTAUDIO_INCLUDE_DIRS and PORTAUDIO_LIBRARIES variables only in the advanced view\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindPulseAudio.cmake" : {
      "ObjectId" : "8ea2616cf53978b4e58d3e7d2df7bd3190355d78",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find PulseAudioSimple\n\n# Once done this will define\n\n#\n\n#  PULSEAUDIO_FOUND - system has PulseAudioSimple\n\n#  PULSEAUDIO_INCLUDE_DIR - the PulseAudioSimple include directory\n\n#  PULSEAUDIO_LIBRARIES - the libraries needed to use PulseAudioSimple\n\n#  PULSEAUDIO_DEFINITIONS - Compiler switches required for using PulseAudioSimple\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 14,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 19,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindSTK.cmake" : {
      "ObjectId" : "6c2f16de4c62520f36f7aa76eab579f86299556d",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindSndio.cmake" : {
      "ObjectId" : "3fcd713609065c10c8a4e7cb9eaf38c24b6dae87",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sndio check, based on FindAlsa.cmake\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Matthias Kretz <kretz@kde.org>\n\n# Copyright (c) 2009, Jacob Meuser <jakemsr@sdf.lonestar.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already done by toplevel\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindSoundIo.cmake" : {
      "ObjectId" : "0d905ecf21c5f1cc7ec1871725a36917c6e729a9",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 Andrew Kelley\n\n# This file is MIT licensed.\n\n# See http://opensource.org/licenses/MIT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SOUNDIO_FOUND\n\n# SOUNDIO_INCLUDE_DIR\n\n# SOUNDIO_LIBRARY\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindWine.cmake" : {
      "ObjectId" : "8771ff3f34e5f58b032d485ce66bac47a2a2a904",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the wine libraries\n\n# Once done this will define\n\n#\n\n#  WINE_FOUND - System has wine\n\n#  WINE_INCLUDE_DIRS - The wine include directories\n\n#  WINE_LIBRARIES - The libraries needed to use wine\n\n#  WINE_DEFINITIONS - Compiler switches required for using wine\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle wine linking problems\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Debian systems\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Fedora systems\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Gentoo systems\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# WineHQ (/opt/wine-stable, /opt/wine-devel, /opt/wine-staging)\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/modules/InstallHelpers.cmake" : {
      "ObjectId" : "53eec43b5d623ad92573bc2bbfb4b6103566e10a",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# install all files matching certain wildcards below ${LMMS_DATA_DIR}/<subdir>\n\n#\n\n# example:\n\n#\n\n#   INSTALL_DATA_SUBDIRS(\"samples\" \"*.ogg;*.wav;*.flac\")\n\n#\n\n# Copyright (c) 2008 Tobias Doerffel\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# helper-macro\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/MinGWCrossCompile.cmake" : {
      "ObjectId" : "90dd7c60741db052d9cbe0def67a93d2d2e20468",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Required by cmake if `uname -s` is inadaquate\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The target environment\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Windows msys mingw ships with a mostly-suitable preconfigured environment\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# For 32-bit vst support\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Specify the 32-bit cross compiler\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Msys compiler does not support @CMakeFiles/Include syntax\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Variable to assist override Qt debug libraries with release versions\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Override Qt debug libraries with release versions\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Linux mingw requires explicitly defined tools to prevent clash with native system tools\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Specify the cross compiler\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Mingw tools\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Search for programs in the build host directories\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# For libraries and headers in the target directories\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# For 32-bit vst support\t\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Specify the 32-bit cross compiler\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Qt tools\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Echo modified cmake vars to screen for debugging purposes\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# So that the debug info only appears once\n",
        "Line" : 99,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 18
    },
    "cmake/modules/VersionInfo.cmake" : {
      "ObjectId" : "cf6932cbbba2f57789a6418f3d00c7f1de4f6e75",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Look for git tag information (e.g. Tagged: \"v1.0.0\", Non-tagged: \"v1.0.0-123-a1b2c3d\")\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Use release info from /CMakeLists.txt\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/modules/Win32Toolchain.cmake" : {
      "ObjectId" : "60e8d3a47bcbacc5436faa73dd501f34f7a38a02",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/Win64Toolchain.cmake" : {
      "ObjectId" : "2b569e7acc0a8bd06007d7e62dc92d7da02700b6",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/config-alsa.h.cmake" : {
      "ObjectId" : "9ecb908025543b5ca98d1a64fe58c278861c5191",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Define to 1 if you have the <linux/awe_voice.h> header file. */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Define to 1 if you have the <sys/awe_voice.h> header file. */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 if you have the </usr/src/sys/gnu/i386/isa/sound/awe_voice.h>\n   header file. */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 if you have the </usr/src/sys/i386/isa/sound/awe_voice.h>\n   header file. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the <awe_voice.h> header file. */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define if you have libasound.so.2 (required for ALSA 0.9.x support) */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define if libasound has snd_pcm_resume() */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if you have the <alsa/asoundlib.h> header file. */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the <sys/asoundlib.h> header file. */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the <sys/soundcard.h> header file. */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the <machine/soundcard.h> header file. */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/nsis/CMakeLists.txt" : {
      "ObjectId" : "eb9868bf52c7085408701bdbef86868d489ec96d",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fix windows paths for msys\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: there's no easy way to fix $INST_DIR, so we'll redefine it manually\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Setup missing parent scopes\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Windows resource compilers\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/postinstall/CMakeLists.txt" : {
      "ObjectId" : "434d1c54e79896cf91be9ec6edd40f81294e95c1",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "e80bb1b861e98a3e620ff92bbb1e97b79ec318c0",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "data/backgrounds/CMakeLists.txt" : {
      "ObjectId" : "0693fb3dd85b609bfaf214f234c28380769c1696",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "data/locale/CMakeLists.txt" : {
      "ObjectId" : "4de6d5ff78c550124d303cbeb595cdefc745e077",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# rules for building localizations\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "data/presets/CMakeLists.txt" : {
      "ObjectId" : "f72ecc4aa8456ad384518aedf39019b1099a190e",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "data/projects/CMakeLists.txt" : {
      "ObjectId" : "f57ffbc6f8c797a4e185d6d0e1c381e5f7db1ca7",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "data/samples/CMakeLists.txt" : {
      "ObjectId" : "bb8e15ef7e202a7f96233e7c31e6a2c026ab34b2",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "data/themes/CMakeLists.txt" : {
      "ObjectId" : "10d8df727e19412fa237d517ecf60a88b9298ea6",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "data/wavetables/CMakeLists.txt" : {
      "ObjectId" : "9491c45c53d201b98354f09def17cd3fb1883291",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "859c5f2c608b2982de13dc545a608eedef0f7b35",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/bash-completion/CMakeLists.txt" : {
      "ObjectId" : "783e13a711cb3c80c422fad05780809bf1c438ef",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/Amplifier/CMakeLists.txt" : {
      "ObjectId" : "06ed1160e412d201def1a7b950791bd85a6dfa12",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/BassBooster/CMakeLists.txt" : {
      "ObjectId" : "2f0703254d43ffaf9ac987723152e7ed1493c2ec",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/Bitcrush/CMakeLists.txt" : {
      "ObjectId" : "ca70afcebb154fafb82588de0ce6191695062035",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/CMakeLists.txt" : {
      "ObjectId" : "4a1196886343b0342abf62c293571d4ea80beb2b",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable C++11\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/CrossoverEQ/CMakeLists.txt" : {
      "ObjectId" : "fbc8407d978ba456379ed011c59ac1aa29a4a0f3",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/Delay/CMakeLists.txt" : {
      "ObjectId" : "ceb7ceb4a68aa94ea05d2d6123159d23a634a90a",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/DualFilter/CMakeLists.txt" : {
      "ObjectId" : "748cbcd1cb5c8cf76da185f37d0d0dfb71fadf3a",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/Eq/CMakeLists.txt" : {
      "ObjectId" : "1414b519414f0740c3eff9912b6d3442d491c6e5",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/Flanger/CMakeLists.txt" : {
      "ObjectId" : "f2195e0bcd9d33446bd86f9473e7f3346e5c9372",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/GigPlayer/CMakeLists.txt" : {
      "ObjectId" : "88e15f87bd1e1e8c4c6384ed25cbea4d2845f724",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable C++11 on Clang until gig.h is patched\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Required for not crashing loading files with libgig\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# disable deprecated check for mingw-x-libgig\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "plugins/HydrogenImport/CMakeLists.txt" : {
      "ObjectId" : "27e8d6a4de9c67456e7e5fbda0447357b17279c8",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/LadspaEffect/CMakeLists.txt" : {
      "ObjectId" : "029cd9168b52a97f2674f312650642d649a57b61",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable C++11\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable C++11 for CXXFLAGS only and not for Windows\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "plugins/LadspaEffect/calf/CMakeLists.txt" : {
      "ObjectId" : "b78a3817540db05c557935f965a3a2b99732df50",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/LadspaEffect/caps/CMakeLists.txt" : {
      "ObjectId" : "0eff4d5cd9c7463b33eae33e90705157b4ca2d59",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/LadspaEffect/cmt/CMakeLists.txt" : {
      "ObjectId" : "f9fcd89cbb4d7e03bca978a831752017efed8bbd",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/LadspaEffect/swh/CMakeLists.txt" : {
      "ObjectId" : "07893c8a4ff3b6e6d3b2d2e65a4cdb34fc836bd7",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vocoder_1337 does not use fftw3f\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "plugins/LadspaEffect/tap/CMakeLists.txt" : {
      "ObjectId" : "02e131ce72d74ecd9316a871a46574d988fffb76",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/MidiExport/CMakeLists.txt" : {
      "ObjectId" : "1d19f081e6a9b7bfdf840c5e4984e60710d9ab2b",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/MidiImport/CMakeLists.txt" : {
      "ObjectId" : "9fd6b6876e522129b230f7f1a263d0b9714c18d4",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/MultitapEcho/CMakeLists.txt" : {
      "ObjectId" : "bfd9e62498fc673a8f3c3e065e5fe18c0aba6a67",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/ReverbSC/CMakeLists.txt" : {
      "ObjectId" : "d2abafbe5389b6d3bed00bf3c74cfd16b1593b99",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable C++11 for CXXFLAGS only\n\n# This is needed since this plugin uses C. Otherwise Travis fails\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/SpectrumAnalyzer/CMakeLists.txt" : {
      "ObjectId" : "2f56fe256ed458bdb474cd620fd3bc51a4c40616",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/VstEffect/CMakeLists.txt" : {
      "ObjectId" : "4a1c03196a878b6cd7bb8cd48b18a2353873a934",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/audio_file_processor/CMakeLists.txt" : {
      "ObjectId" : "089028c3272017eeb9ae91697d85adde3d451e7a",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/bit_invader/CMakeLists.txt" : {
      "ObjectId" : "4b0ffcba1f911e4a201d8cd12df5ee789ec7e78c",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/carlabase/CMakeLists.txt" : {
      "ObjectId" : "4fa81a4916fcdb1699c53964c7d665dd49bfa8e3",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For MacOS, use \"OLD\" RPATH install_name behavior\n\n# This can be changed to \"NEW\" safely if install_apple.sh.in\n\n# is updated to relink libcarlabase.dylib.  MacOS 10.8 uses\n\n# cmake 3.9.6, so this can be done at any time.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/carlapatchbay/CMakeLists.txt" : {
      "ObjectId" : "d9aa6b32102045a74fada66cc0500d2c5c3a8fee",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/carlarack/CMakeLists.txt" : {
      "ObjectId" : "1834b23715e7f2fd898723bc8ecf915f3db19638",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/dynamics_processor/CMakeLists.txt" : {
      "ObjectId" : "fcfd8e207756bf2dc6570d824b6c7211561540ce",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/kicker/CMakeLists.txt" : {
      "ObjectId" : "d2990639d8032c0efb952352f7286371730c6766",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/ladspa_browser/CMakeLists.txt" : {
      "ObjectId" : "5da7194edf6abdedcbfcb958a14c47c6c07c0225",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lb302/CMakeLists.txt" : {
      "ObjectId" : "c9389eb189abcb5f4bf7832d4b9fba03894e5425",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/monstro/CMakeLists.txt" : {
      "ObjectId" : "6a9195b75a4ee246ea3191969cb8907864adb4bc",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/nes/CMakeLists.txt" : {
      "ObjectId" : "b864f612513aca0445443828a6dcdb612b7ef324",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/opl2/CMakeLists.txt" : {
      "ObjectId" : "a62eee5880964a7823c7d560280b48388dd651a5",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable C++11 for CXXFLAGS only\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/organic/CMakeLists.txt" : {
      "ObjectId" : "8eb0db7c8eb89e7e09ec22075817c40e5d216378",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/papu/CMakeLists.txt" : {
      "ObjectId" : "20d9bbd20339031b403cf10962ac931932731fd9",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/patman/CMakeLists.txt" : {
      "ObjectId" : "38132ae223e8ebefbc4f9716d210921d69b28aef",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/peak_controller_effect/CMakeLists.txt" : {
      "ObjectId" : "b55fde5c559cb021b3575565dc6fb0b6210ecdc0",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/sf2_player/CMakeLists.txt" : {
      "ObjectId" : "d087f437d4eefb10ab4170fb62f365141916bb84",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/sfxr/CMakeLists.txt" : {
      "ObjectId" : "97f6dd88d97a4ac28132a9aebb45c19e8009c114",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/sid/CMakeLists.txt" : {
      "ObjectId" : "387604bd47398e11db6829f0c5808ba75d0006e5",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/stereo_enhancer/CMakeLists.txt" : {
      "ObjectId" : "c8e8c60097eb7b21b162190805c23eb4c090443c",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/stereo_matrix/CMakeLists.txt" : {
      "ObjectId" : "1c6471ab21165b636d7d0abf022a5f43884ce01e",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/stk/CMakeLists.txt" : {
      "ObjectId" : "78ae7432c4b37aba08f0f4e4cce870c9ded60a94",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/stk/mallets/CMakeLists.txt" : {
      "ObjectId" : "5be9cd1440824841641a5fa8116d87d8315a307a",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/triple_oscillator/CMakeLists.txt" : {
      "ObjectId" : "e17c39f1d25aa9756e3abe4b4f16cc1b2b93c874",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/vestige/CMakeLists.txt" : {
      "ObjectId" : "21803a924332c2de400dbde803430a10bbff4927",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/vibed/CMakeLists.txt" : {
      "ObjectId" : "c092e874ea272acc69d2dafcc0f77be7bc82e247",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/vst_base/CMakeLists.txt" : {
      "ObjectId" : "84920d9be596330d823f382a5176b0f0cf006ec3",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: 32-bit VST fails on MSYS\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# build 32 bit version of RemoteVstPlugin for Win64 so we can load\n\n# 32 bit VST plugins\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# winegcc fails if winebuild is not in path\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ensure correct file extension\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "plugins/vst_base/Win64/CMakeLists.txt" : {
      "ObjectId" : "4895fcbacf977e79534c549b65ad2f8b8bf18924",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/watsyn/CMakeLists.txt" : {
      "ObjectId" : "1353b47caca74c9f38509d907c53a4eb8a353be3",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/waveshaper/CMakeLists.txt" : {
      "ObjectId" : "da44322d2c2eb2d40277ed4bd4634bd79c457238",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zynaddsubfx/CMakeLists.txt" : {
      "ObjectId" : "9d90c5e38d766acca0d4e2ed719c0b785a98eff4",
      "LastModified" : "2019-01-19T16:29:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# definitions for ZynAddSubFX\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# do not conflict with LMMS' Controller class\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use asm optimizations when on x86 or x86_64\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build ZynAddSubFX with full optimizations\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# link system-libraries\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# fix X11 headers errors caused by bug with mingw + c++11\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Try to detect full path anyway\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# removes exit confirmation dialogs etc. in MasterUI.fl\n",
        "Line" : 64,
        "CharPositionInLine" : 33
      },
      "8" : {
        "Text" : "# required libs for debug msys builds\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use libraries in non-standard directories (e.g., another version of Qt)\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Remove useless dependencies from FLTK. Use fltk-config to avoid static library\n\n# in older environments\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Support qt_version_tag in Qt 5.6\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# link Qt libraries when on win32\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "plugins/zynaddsubfx/zynaddsubfx/CMakeLists.txt" : {
      "ObjectId" : "d36aa80781629ac0374d8e4e76c1a0abaf5fb4a9",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Currently the only directory that uses cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/zynaddsubfx/zynaddsubfx/CTestConfig.cmake" : {
      "ObjectId" : "bf4f379ae2e4cdc0877729fa9cdca1ff102e9994",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/zynaddsubfx/zynaddsubfx/cmake/FindAlsa.cmake" : {
      "ObjectId" : "23003b39cd2a0970927cea5ef49f77f8e81b063a",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Alsa check, based on libkmid/configure.in.in.\n\n# Only the support for Alsa >= 0.9.x was included; 0.5.x was dropped (but feel free to re-add it if you need it)\n\n# It defines ...\n\n# It offers the following macros:\n\n#  ALSA_CONFIGURE_FILE(config_header) - generate a config.h, typical usage: \n\n#                                       ALSA_CONFIGURE_FILE(${CMAKE_BINARY_DIR}/config-alsa.h)\n\n#  ALSA_VERSION_STRING(version_string)  looks for alsa/version.h and reads the version string into\n\n#                                       the first argument passed to the macro\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, David Faure, <faure@kde.org>\n\n# Copyright (c) 2007, Matthias Kretz <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already done by toplevel\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check for version in alsa/version.h\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "plugins/zynaddsubfx/zynaddsubfx/cmake/FindCxxTest.cmake" : {
      "ObjectId" : "937142b58a9d048575a090329681cfa80835691e",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find CxxTest\n\n# Find the CxxTest suite and declare a helper macro for creating unit tests\n\n# and integrating them with CTest.\n\n# For more details on CxxTest see http://cxxtest.tigris.org\n\n#\n\n# INPUT Variables\n\n#\n\n#   CXXTEST_USE_PYTHON [deprecated since 1.3]\n\n#       Only used in the case both Python & Perl\n\n#       are detected on the system to control\n\n#       which CxxTest code generator is used.\n\n#       Valid only for CxxTest version 3.\n\n#\n\n#       NOTE: In older versions of this Find Module,\n\n#       this variable controlled if the Python test\n\n#       generator was used instead of the Perl one,\n\n#       regardless of which scripting language the\n\n#       user had installed.\n\n#\n\n#   CXXTEST_TESTGEN_ARGS (since CMake 2.8.3)\n\n#       Specify a list of options to pass to the CxxTest code\n\n#       generator.  If not defined, --error-printer is\n\n#       passed.\n\n#\n\n# OUTPUT Variables\n\n#\n\n#   CXXTEST_FOUND\n\n#       True if the CxxTest framework was found\n\n#   CXXTEST_INCLUDE_DIRS\n\n#       Where to find the CxxTest include directory\n\n#   CXXTEST_PERL_TESTGEN_EXECUTABLE\n\n#       The perl-based test generator\n\n#   CXXTEST_PYTHON_TESTGEN_EXECUTABLE\n\n#       The python-based test generator\n\n#   CXXTEST_TESTGEN_EXECUTABLE (since CMake 2.8.3)\n\n#       The test generator that is actually used (chosen using user preferences\n\n#       and interpreters found in the system)\n\n#   CXXTEST_TESTGEN_INTERPRETER (since CMake 2.8.3)\n\n#       The full path to the Perl or Python executable on the system\n\n#\n\n# MACROS for optional use by CMake users:\n\n#\n\n#    CXXTEST_ADD_TEST(<test_name> <gen_source_file> <input_files_to_testgen...>)\n\n#       Creates a CxxTest runner and adds it to the CTest testing suite\n\n#       Parameters:\n\n#           test_name               The name of the test\n\n#           gen_source_file         The generated source filename to be\n\n#                                   generated by CxxTest\n\n#           input_files_to_testgen  The list of header files containing the\n\n#                                   CxxTest::TestSuite's to be included in\n\n#                                   this runner\n\n#           \n\n#       #==============\n\n#       Example Usage:\n\n#\n\n#           find_package(CxxTest)\n\n#           if(CXXTEST_FOUND)\n\n#               include_directories(${CXXTEST_INCLUDE_DIR})\n\n#               enable_testing()\n\n#\n\n#               CXXTEST_ADD_TEST(unittest_foo foo_test.cc\n\n#                                 ${CMAKE_CURRENT_SOURCE_DIR}/foo_test.h)\n\n#               target_link_libraries(unittest_foo foo) # as needed\n\n#           endif()\n\n#\n\n#              This will (if CxxTest is found):\n\n#              1. Invoke the testgen executable to autogenerate foo_test.cc in the\n\n#                 binary tree from \"foo_test.h\" in the current source directory.\n\n#              2. Create an executable and test called unittest_foo.\n\n#               \n\n#      #=============\n\n#      Example foo_test.h:\n\n#\n\n#          #include <cxxtest/TestSuite.h>\n\n#          \n\n#          class MyTestSuite : public CxxTest::TestSuite \n\n#          {\n\n#          public:\n\n#             void testAddition( void )\n\n#             {\n\n#                TS_ASSERT( 1 + 1 > 1 );\n\n#                TS_ASSERT_EQUALS( 1 + 1, 2 );\n\n#             }\n\n#          };\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2010 Kitware, Inc.\n\n# Copyright 2008-2010 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version 1.4 (11/18/10) (CMake 2.8.4)\n\n#     Issue 11384: Added support to the CXX_ADD_TEST macro so header\n\n#                  files (containing the tests themselves) show up in\n\n#                  Visual Studio and other IDEs.\n\n#\n\n# Version 1.3 (8/19/10) (CMake 2.8.3)\n\n#     Included patch by Simone Rossetto to check if either Python or Perl\n\n#     are present in the system.  Whichever intepreter that is detected\n\n#     is now used to run the test generator program.  If both interpreters\n\n#     are detected, the CXXTEST_USE_PYTHON variable is obeyed.\n\n#\n\n#     Also added support for CXXTEST_TESTGEN_ARGS, for manually specifying\n\n#     options to the CxxTest code generator.\n\n# Version 1.2 (3/2/08)\n\n#     Included patch from Tyler Roscoe to have the perl & python binaries\n\n#     detected based on CXXTEST_INCLUDE_DIR\n\n# Version 1.1 (2/9/08)\n\n#     Clarified example to illustrate need to call target_link_libraries()\n\n#     Changed commands to lowercase\n\n#     Added licensing info\n\n# Version 1.0 (1/8/08)\n\n#     Fixed CXXTEST_INCLUDE_DIRS so it will work properly\n\n#     Eliminated superfluous CXXTEST_FOUND assignment\n\n#     Cleaned up and added more documentation\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================\n\n# CXXTEST_ADD_TEST (public macro)\n\n#=============================================================\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================\n\n# main()\n\n#=============================================================\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "plugins/zynaddsubfx/zynaddsubfx/cmake/FindJACK.cmake" : {
      "ObjectId" : "20379db8e0b02896de907c7c8be4faefc2e596ad",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Find JACK Audio Connection Kit\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/zynaddsubfx/zynaddsubfx/cmake/FindOSS.cmake" : {
      "ObjectId" : "319c90ed6d54147e4ecf52bd0562d7073509b917",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find OSS (Open Sound System)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OSS_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "plugins/zynaddsubfx/zynaddsubfx/cmake/Findzlib.cmake" : {
      "ObjectId" : "49edafd128929a01b71f0d089da683219c7c6aa3",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find zlib\n\n# Find the native ZLIB includes and library\n\n#\n\n#  ZLIB_INCLUDE_DIRS - where to find zlib.h, etc.\n\n#  ZLIB_LIBRARIES    - List of libraries when using zlib.\n\n#  ZLIB_FOUND        - True if zlib found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Per-recommendation\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ZLIB_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/CMakeLists.txt" : {
      "ObjectId" : "786231a732a920a8783276bd3f863322e461f754",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#checking include/library paths\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Dependency check\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#for FLTK\n",
        "Line" : 19,
        "CharPositionInLine" : 21
      },
      "3" : {
        "Text" : "# lash\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "######### Settings ###########\n\n# NOTE: These cache variables should normally not be changed in this\n\n# file, but either in in CMakeCache.txt before compile, or by passing\n\n# parameters directly into cmake using the -D flag.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now, handle the incoming settings and set define flags/variables based\n\n# on this\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add version information\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add scheduler function existance info (OSX compatiability)\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Give a good guess on the best Input/Output default backends\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Override with perhaps more helpful midi backends\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#Build Flags\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########### Settings dependant code ###########\n\n# From here on, the setting variables have  been prepared so concentrate\n\n# on the actual compiling.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# other include directories\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#TODO #todo put in a better location\n",
        "Line" : 197,
        "CharPositionInLine" : 5
      },
      "14" : {
        "Text" : "#UGLY WORKAROUND\n",
        "Line" : 251,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "########### General section ##############\n\n# Following this should be only general compilation code, and no mention\n\n# of module-specific variables\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/DSP/CMakeLists.txt" : {
      "ObjectId" : "84ac3853f84ca4599be55c3fa34e27fc47f36b73",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/Effects/CMakeLists.txt" : {
      "ObjectId" : "803cbca1b67695f91d74de05097dbb452a11760f",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/Misc/CMakeLists.txt" : {
      "ObjectId" : "eab8ca0528ef5d26385db89ced9260b2e61b5e61",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/Nio/CMakeLists.txt" : {
      "ObjectId" : "9386610b7abf77463d98da8010d68eae675f1042",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Defaults:\n\n#         - Wave Output (enabled with the record function)\n\n#         - Null Output\n\n#         - Null Output Running by default\n\n#         - Managed with OutMgr\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/Params/CMakeLists.txt" : {
      "ObjectId" : "d5758affa1f35d22514902684517054981161871",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/Synth/CMakeLists.txt" : {
      "ObjectId" : "ce45fa54c3cc6e3a8628e5e48f4a2d389bda0dce",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/Tests/CMakeLists.txt" : {
      "ObjectId" : "373fd40ba1af9c17812f3804f77e0bc3459f54b9",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#for tests looking for files stored in the source dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CXXTEST_ADD_TEST(SampleTest SampleTest.h)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Extra libraries added to make test and full compilation use the same library\n\n#links for quirky compilers\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "plugins/zynaddsubfx/zynaddsubfx/src/UI/CMakeLists.txt" : {
      "ObjectId" : "38ea1e1134da3fe5818f7a7c7b37d1d0f81c5108",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rdparty/CMakeLists.txt" : {
      "ObjectId" : "5dec2890c45a59e3582a43eb762a45a3437960f6",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/3rdparty/rpmalloc/CMakeLists.txt" : {
      "ObjectId" : "23d1551c22b8f749a4d4ffa82ffc868dccd5e25e",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# rpmalloc uses GCC builtin \"__builtin_umull_overflow\" with ENABLE_VALIDATE_ARGS,\n\n# which is only available starting with GCC 5\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "b18fa897e4630b841d34eaf0441619ff5b8e2084",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable C++11\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Paths relative to lmms executable\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use libraries in non-standard directories (e.g., another version of Qt)\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ADD_LIBRARY's OBJECT is only supported in CMake >=2.8.8\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#SET_PROPERTY(TARGET lmmsobjs PROPERTY CXX_INCLUDE_WHAT_YOU_USE ${iwyu})\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Expose required libs for tests binary\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Required libs for debug msys builds\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Install\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "c8840997dee3594225e3fe7dc63a427bfbadc09d",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gui/CMakeLists.txt" : {
      "ObjectId" : "5b4050bca70321f306a525315b166da44af21c0e",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tracks/CMakeLists.txt" : {
      "ObjectId" : "158588318aca20b2bd368e982cb3fbd1d5e8dfc2",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "8cbe23858bf1203e6d9adb5968980540a88cded0",
      "LastModified" : "2018-09-24T09:09:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 110,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 4808
}