{
  "Repository" : "3133671",
  "Revision" : "HEAD",
  "ObjectId" : "16e16672c73e9b40b33c9dde406ef1ae3fbfcf42",
  "CommitTime" : "2019-04-14T05:09:38Z",
  "Files" : {
    "pom.xml" : {
      "ObjectId" : "a2591bb7316cd5d6eee8f7fa87d26de9320b866f",
      "LastModified" : "2019-04-07T18:43:45Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " required to run JUnit4 tests in eclipse without to explicitly select JUnit 4 runner ... ",
        "Line" : 63,
        "CharPositionInLine" : 101
      },
      "1" : {
        "Text" : "JSR-305 only used for non-required meta-annotations",
        "Line" : 77,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : " NEEDED! Unlike File, a Path is not linked to the JRE's filesystem. In order to accurately test assertions, we need\n      a decent JSR 203 implementation which lets us test our assertions. Right now, this is memoryfilesystem (https://github.com/marschall/memoryfilesystem).\n      Another choice would be jimfs from Google (https://github.com/google/jimfs), but its support for reading/writing file attributes\n      is not as complete as that of memoryfilesystem's. ",
        "Line" : 103,
        "CharPositionInLine" : 60
      },
      "3" : {
        "Text" : " to get jacoco report we need to set argLine in surefire, without this snippet the jacoco argLine is lost ",
        "Line" : 145,
        "CharPositionInLine" : 120
      },
      "4" : {
        "Text" : " Unpack the shaded jar so that the maven-bundle-plugin can analyze the packages to import and to export ",
        "Line" : 182,
        "CharPositionInLine" : 118
      },
      "5" : {
        "Text" : " Don't import what assertj-core exports but import everything else. Also need to explicitly import packages\n                  that are dynamically loaded using Class.forName() (org.junit, org.opentest4j and org.testng are needed by the assumptions\n                  engine). ",
        "Line" : 223,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : " generate jacoco report ",
        "Line" : 239,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : " exclude hamcrest as its classes are compiled in target/classes for an unknown reason related to hamcrest\n              dependency being optional ",
        "Line" : 246,
        "CharPositionInLine" : 44
      },
      "8" : {
        "Text" : " jacoco is executed in the prepare-package phase instead of the verify phase, it can not determine code coverage\n          of the unpacked shaded classes ",
        "Line" : 251,
        "CharPositionInLine" : 45
      },
      "9" : {
        "Text" : " (1) CSS file location ",
        "Line" : 287,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : " (2) Highlight Javascript file ",
        "Line" : 289,
        "CharPositionInLine" : 49
      },
      "11" : {
        "Text" : " init Highlight ",
        "Line" : 293,
        "CharPositionInLine" : 34
      },
      "12" : {
        "Text" : "This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build\n          itself. ",
        "Line" : 306,
        "CharPositionInLine" : 22
      },
      "13" : {
        "Text" : " allow tests to access private fields/methods of java.base classes via reflection ",
        "Line" : 341,
        "CharPositionInLine" : 98
      },
      "14" : {
        "Text" : " currently fails with \"javadoc: error - The code being documented uses modules but the packages defined in https://docs.oracle.com/javase/8/docs/api/\n          are in the unnamed module.\" ",
        "Line" : 355,
        "CharPositionInLine" : 42
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "MAVEN" : 1
  },
  "ElapsedTime" : 1994
}