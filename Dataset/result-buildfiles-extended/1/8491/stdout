{
  "Repository" : "8491",
  "Revision" : "HEAD",
  "ObjectId" : "95885a70df282a8e8e6e5c72b28a7f2f21bf7e99",
  "CommitTime" : "2018-06-15T17:00:23Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "9ba4b005e3aec62dc1705a9f2c26e0b16b0d810b",
      "LastModified" : "2018-05-25T17:48:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 2.8.11 for target_include_directories\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Don't polute the git repository with the generated files for out-of-source builds\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#load_source_for_module(ugdk-${UGDK_GRAPHIC_MODULE})\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create the targets for all the dependencies.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We can't create a target for a header-only library, so we have to do this...\n\n# TODO: CMake 3.0 will add INTERFACE to add_library (http://www.kdab.com/modern-cmake-with-qt-and-boost/)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#include_directories(SYSTEM ${GLM_LOCATION}) ## FIXME\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CPack configuration.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#########################################################\n\n# Bindings configuration\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#########################################################\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Bit hacky way so all the output files are placed on the ${LIB_DIR} folder.\n\n# Code found on http://stackoverflow.com/questions/7747857/in-cmake-how-do-i-work-around-the-debug-and-release-directories-visual-studio-2\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# First for the generic no-config case (e.g. with mingw)\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Second, for multi-config builds (e.g. msvc)\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#add_definitions(-msse2)\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# TODO: would like these but they produce overwhelming amounts of warnings\n\n#-Wshadow                       # GLM causes many warnings with this\n\n#-Wextra                        # implies -Wunused-parameter\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "#-Wswitch-default               # Currently ignored.\n\n#-Wconversion                   # GLM causes many warnings with this\n\n#-Wzero-as-null-pointer-constant\n",
        "Line" : 120,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# And we ignore these warnings...\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# SDL includes causes these. Awaiting CMake 2.8.12 to ignore these properly. TODO\n",
        "Line" : 130,
        "CharPositionInLine" : 28
      },
      "21" : {
        "Text" : "# Disable some warnings for Clang.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# =============================\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Generated config\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#target_include_directories(libugdk\n\n#    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/modules/ugdk-${UGDK_GRAPHIC_MODULE}/include\"\n\n#    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/modules/ugdk-${UGDK_GRAPHIC_MODULE}/src\")\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Add GLM dependency\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# utf8<->ucs4 conversion uses a networking function\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Libraries for the scripts.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# SDL-mixer must come before SDL itself, or else we may have linking errors.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#    CONFIGURATIONS Release\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Export variables for any project using UGDK as subdirectory\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Tests and examples\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "android/skeleton/build.xml" : {
      "ObjectId" : "0bff6bfb847010470461b9276dc2af80d8cd835a",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " This should be changed to the name of your project ",
        "Line" : 2,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 7,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 29,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 35,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 49,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 52,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : " version-tag: 1 ",
        "Line" : 90,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 9
    },
    "cmake/Compatibility.cmake" : {
      "ObjectId" : "77b367432da19df683051772718b96c196743e49",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Search lib64 paths for visual studio x64 builds.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SYSTEM include directories don't produce warnings.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ExecutableFunctions.cmake" : {
      "ObjectId" : "ec7ac451c9f753ae0991afb98e9c44be2933ffb5",
      "LastModified" : "2015-11-22T02:57:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindFreetype.cmake" : {
      "ObjectId" : "eb01404678bd249a69f68ba04592179e8439cf29",
      "LastModified" : "2017-05-10T17:29:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Even though we dont use OGRE anymore, we need this one to use FreeType\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# - Try to find FreeType\n\n# Once done, this will define\n\n#\n\n#  FREETYPE_FOUND - system has FreeType\n\n#  FREETYPE_INCLUDE_DIRS - the FreeType include directories \n\n#  FREETYPE_LIBRARIES - link these to use FreeType\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# construct search paths\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# redo search if prefix path changed\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# prefer static library over framework \n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Reset framework finding\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindPkgMacros.cmake" : {
      "ObjectId" : "59686232ab1b757ffd7cfd8d027a500b52a5cb33",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################\n\n# Provides some common functionality for the FindPackage modules\n\n##################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Begin processing of package\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Display a status message unless FIND_QUIETLY is set\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Construct search paths for includes and libraries from a PREFIX_PATH\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# clear cache variables if a certain variable changed\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test against internal check variable\n\n# HACK: Apparently, adding a variable to the cache cleans up the list\n\n# a bit. We need to also remove any empty strings from the list, but\n\n# at the same time ensure that we are actually dealing with a list.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try to get some hints from pkg-config, if available\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Couple a set of release AND debug libraries (or frameworks)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate debug names from given release names\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the parent dir from DIR to VAR \n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Do the final processing for the package find.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Slightly customised framework finder\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# These could be arrays of paths, add each individually to the search paths\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "cmake/Modules/FindSDL2.cmake" : {
      "ObjectId" : "8922c519f86bace4b5ba85fd0a42c7f28f5c7749",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARIES, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIRS, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_DEPENDENCIES in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_DEPENDENCIES to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 73,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 74,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 75,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "cmake/Modules/FindSDL2_image.cmake" : {
      "ObjectId" : "8a7d5914f5fdb2696153b08370af33bc62364d7f",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_image library\n\n# This module defines:\n\n#  SDL2_IMAGE_LIBRARIES, the name of the library to link against\n\n#  SDL2_IMAGE_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_IMAGE_FOUND, if false, do not try to link against\n\n#  SDL2_IMAGE_VERSION_STRING - human-readable string containing the version of SDL2_image\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL2.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindSDL2_mixer.cmake" : {
      "ObjectId" : "e1edc50a8219f55f47da07756f421b70f302bb3e",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_mixer library\n\n# This module defines:\n\n#  SDL2_MIXER_LIBRARIES, the name of the library to link against\n\n#  SDL2_MIXER_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_MIXER_FOUND, if false, do not try to link against\n\n#  SDL2_MIXER_VERSION_STRING - human-readable string containing the version of SDL2_mixer\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL2.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindVorbis.cmake" : {
      "ObjectId" : "4894c82096ac17ebede38ae7611dfa464a872a58",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Vorbis\n\n#\n\n# This module defines the standard variables\n\n# - VORBIS_LIBRARIES\n\n# - VORBIS_FOUND\n\n# - VORBIS_INCLUDE_DIRS\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 14,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 15,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 16,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindVorbisFile.cmake" : {
      "ObjectId" : "5261cec2859090960f0f9d0ed6da3c74ca4ba3d0",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate VorbisFile\n\n#\n\n# This module defines the standard variables\n\n# - VORBISFILE_LIBRARIES\n\n# - VORBISFILE_FOUND\n\n# - VORBISFILE_INCLUDE_DIRS\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 14,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 15,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 16,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 4
    },
    "cmake/Package.cmake" : {
      "ObjectId" : "9e5d917eede00f230ef5f1c8dc74c24cc0340bdb",
      "LastModified" : "2017-05-10T17:29:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##########################################\n\n# Package Configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n##########################################\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/android.toolchain.cmake" : {
      "ObjectId" : "7f3d0812b749d1fef640dceae63ba8f12adb2eac",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2013, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  The name of the copyright holders may be used to endorse or promote\n\n#     products derived from this software without specific prior written\n\n#     permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r9\n\n#  Requires cmake 2.6.3 or newer (2.8.5 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  The file is mantained by the OpenCV project. The latest version can be get at\n\n#  http://code.opencv.org/projects/opencv/repository/revisions/master/changes/android/android.toolchain.cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Linux (using standalone toolchain):\n\n#   $ export ANDROID_STANDALONE_TOOLCHAIN=/absolute/path/to/android-toolchain\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (or newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_STANDALONE_TOOLCHAIN=/opt/android-toolchain - path to the\n\n#      standalone toolchain. This option is not used if full NDK is found\n\n#      (ignored if ANDROID_NDK is set).\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16).\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP.\n\n#        \"x86\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"mips\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.6 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r8c the possible values are:\n\n#\n\n#        * arm-linux-androideabi-4.4.3\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-clang3.1\n\n#        * mipsel-linux-android-4.4.3\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-clang3.1\n\n#        * x86-4.4.3\n\n#        * x86-4.6\n\n#        * x86-clang3.1\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"x86\" (inapplicable) and\n\n#      \"armeabi-v6 with VFP\" (is forced to be ON) ABIs.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT=${CMAKE_SOURCE_DIR} - where to output binary\n\n#      files. See additional details below.\n\n#\n\n#    ANDROID_SET_OBSOLETE_VARIABLES=ON - if set, then toolchain defines some\n\n#      obsolete variables which were used by previous versions of this file for\n\n#      backward compatibility.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS will be set true, mutually\n\n#    exclusive. NEON option will be set true if VFP is set to NEON.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT should be set in cache to determine where Android\n\n#    libraries will be installed.\n\n#    Default is ${CMAKE_SOURCE_DIR}, and the android libs will always be\n\n#    under the ${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME}\n\n#    (depending on the target ABI). This is convenient for Android packaging.\n\n#\n\n#  Change Log:\n\n#   - initial version December 2010\n\n#   - April 2011\n\n#     [+] added possibility to build with NDK (without standalone toolchain)\n\n#     [+] support cross-compilation on Windows (native, no cygwin support)\n\n#     [+] added compiler option to force \"char\" type to be signed\n\n#     [+] added toolchain option to compile to 32-bit ARM instructions\n\n#     [+] added toolchain option to disable SWIG search\n\n#     [+] added platform \"armeabi-v7a with VFPV3\"\n\n#     [~] ARM_TARGETS renamed to ARM_TARGET\n\n#     [+] EXECUTABLE_OUTPUT_PATH is set by toolchain (required on Windows)\n\n#     [~] Fixed bug with ANDROID_API_LEVEL variable\n\n#     [~] turn off SWIG search if it is not found first time\n\n#   - May 2011\n\n#     [~] ANDROID_LEVEL is renamed to ANDROID_API_LEVEL\n\n#     [+] ANDROID_API_LEVEL is detected by toolchain if not specified\n\n#     [~] added guard to prevent changing of output directories on the first\n\n#         cmake pass\n\n#     [~] toolchain exits with error if ARM_TARGET is not recognized\n\n#   - June 2011\n\n#     [~] default NDK path is updated for version r5c\n\n#     [+] variable CMAKE_SYSTEM_PROCESSOR is set based on ARM_TARGET\n\n#     [~] toolchain install directory is added to linker paths\n\n#     [-] removed SWIG-related stuff from toolchain\n\n#     [+] added macro find_host_package, find_host_program to search\n\n#         packages/programs on the host system\n\n#     [~] fixed path to STL library\n\n#   - July 2011\n\n#     [~] fixed options caching\n\n#     [~] search for all supported NDK versions\n\n#     [~] allowed spaces in NDK path\n\n#   - September 2011\n\n#     [~] updated for NDK r6b\n\n#   - November 2011\n\n#     [*] rewritten for NDK r7\n\n#     [+] x86 toolchain support (experimental)\n\n#     [+] added \"armeabi-v6 with VFP\" ABI for ARMv6 processors.\n\n#     [~] improved compiler and linker flags management\n\n#     [+] support different build flags for Release and Debug configurations\n\n#     [~] by default compiler flags the same as used by ndk-build (but only\n\n#         where reasonable)\n\n#     [~] ANDROID_NDK_TOOLCHAIN_ROOT is splitted to ANDROID_STANDALONE_TOOLCHAIN\n\n#         and ANDROID_TOOLCHAIN_ROOT\n\n#     [~] ARM_TARGET is renamed to ANDROID_ABI\n\n#     [~] ARMEABI_NDK_NAME is renamed to ANDROID_NDK_ABI_NAME\n\n#     [~] ANDROID_API_LEVEL is renamed to ANDROID_NATIVE_API_LEVEL\n\n#   - January 2012\n\n#     [+] added stlport_static support (experimental)\n\n#     [+] added special check for cygwin\n\n#     [+] filtered out hidden files (starting with .) while globbing inside NDK\n\n#     [+] automatically applied GLESv2 linkage fix for NDK revisions 5-6\n\n#     [+] added ANDROID_GET_ABI_RAWNAME to get NDK ABI names by CMake flags\n\n#   - February 2012\n\n#     [+] updated for NDK r7b\n\n#     [~] fixed cmake try_compile() command\n\n#     [~] Fix for missing install_name_tool on OS X\n\n#   - March 2012\n\n#     [~] fixed incorrect C compiler flags\n\n#     [~] fixed CMAKE_SYSTEM_PROCESSOR change on ANDROID_ABI change\n\n#     [+] improved toolchain loading speed\n\n#     [+] added assembler language support (.S)\n\n#     [+] allowed preset search paths and extra search suffixes\n\n#   - April 2012\n\n#     [+] updated for NDK r7c\n\n#     [~] fixed most of problems with compiler/linker flags and caching\n\n#     [+] added option ANDROID_FUNCTION_LEVEL_LINKING\n\n#   - May 2012\n\n#     [+] updated for NDK r8\n\n#     [+] added mips architecture support\n\n#   - August 2012\n\n#     [+] updated for NDK r8b\n\n#     [~] all intermediate files generated by toolchain are moved to CMakeFiles\n\n#     [~] libstdc++ and libsupc are removed from explicit link libraries\n\n#     [+] added CCache support (via NDK_CCACHE environment or cmake variable)\n\n#     [+] added gold linker support for NDK r8b\n\n#     [~] fixed mips linker flags for NDK r8b\n\n#   - September 2012\n\n#     [+] added NDK release name detection (see ANDROID_NDK_RELEASE)\n\n#     [+] added support for all C++ runtimes from NDK\n\n#         (system, gabi++, stlport, gnustl)\n\n#     [+] improved warnings on known issues of NDKs\n\n#     [~] use gold linker as default if available (NDK r8b)\n\n#     [~] globally turned off rpath\n\n#     [~] compiler options are aligned with NDK r8b\n\n#   - October 2012\n\n#     [~] fixed C++ linking: explicitly link with math library (OpenCV #2426)\n\n#   - November 2012\n\n#     [+] updated for NDK r8c\n\n#     [+] added support for clang compiler\n\n#   - December 2012\n\n#     [+] suppress warning about unused CMAKE_TOOLCHAIN_FILE variable\n\n#     [+] adjust API level to closest compatible as NDK does\n\n#     [~] fixed ccache full path search\n\n#     [+] updated for NDK r8d\n\n#     [~] compiler options are aligned with NDK r8d\n\n#   - March 2013\n\n#     [+] updated for NDK r8e (x86 version)\n\n#     [+] support x86_64 version of NDK\n\n#   - April 2013\n\n#     [+] support non-release NDK layouts (from Linaro git and Android git)\n\n#     [~] automatically detect if explicit link to crtbegin_*.o is needed\n\n#   - June 2013\n\n#     [~] fixed stl include path for standalone toolchain made by NDK >= r8c\n\n#   - July 2013\n\n#     [+] updated for NDK r9\n\n#   - November 2013\n\n#     [+] updated for NDK r9b\n\n#   - December 2013\n\n#     [+] updated for NDK r9c\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 307,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable only to suppress \"unused variable\" warning\n",
        "Line" : 312,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# this one is important\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this one not so much\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rpath makes low sence for Android\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# detect current host platform\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 501,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 519,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# remember found paths\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# try to detect change\n",
        "Line" : 544,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# android NDK layout\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 583,
        "CharPositionInLine" : 71
      },
      "19" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 588,
        "CharPositionInLine" : 71
      },
      "20" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 592,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 599,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 675,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 688,
        "CharPositionInLine" : 39
      },
      "26" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 706,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# choose target ABI\n",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 721,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set target ABI options\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 760,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 791,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# choose toolchain\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# choose native API level\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# adjust API level\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# validate\n",
        "Line" : 868,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# remember target ABI\n",
        "Line" : 889,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 897,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# honor legacy ANDROID_USE_STLPORT\n",
        "Line" : 899,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 974,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 983,
        "CharPositionInLine" : 3
      },
      "41" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 993,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# clang\n",
        "Line" : 1028,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# do nothing\n",
        "Line" : 1058,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1093,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1111,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1113,
        "CharPositionInLine" : 137
      },
      "48" : {
        "Text" : "# r7-r8\n",
        "Line" : 1115,
        "CharPositionInLine" : 110
      },
      "49" : {
        "Text" : "# before r7\n",
        "Line" : 1117,
        "CharPositionInLine" : 36
      },
      "50" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1137,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# ccache support\n",
        "Line" : 1152,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1165,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1208,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1227,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1235,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1241,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1256,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# NDK flags\n",
        "Line" : 1263,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1273,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1302,
        "CharPositionInLine" : 62
      },
      "61" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1309,
        "CharPositionInLine" : 72
      },
      "62" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1312,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1323,
        "CharPositionInLine" : 91
      },
      "64" : {
        "Text" : "# STL\n",
        "Line" : 1338,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# C objects:\n",
        "Line" : 1349,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1367,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1369,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# linker flags\n",
        "Line" : 1389,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1393,
        "CharPositionInLine" : 1
      },
      "70" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1400,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# version 4.6\n",
        "Line" : 1429,
        "CharPositionInLine" : 8
      },
      "72" : {
        "Text" : "# cache flags\n",
        "Line" : 1457,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1468,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# finish flags\n",
        "Line" : 1474,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# configure rtti\n",
        "Line" : 1491,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1500,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1511,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1515,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# setup output directories\n",
        "Line" : 1552,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1565,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1569,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1572,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1578,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1600,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1637,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1673,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1675,
        "CharPositionInLine" : 1
      },
      "88" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1677,
        "CharPositionInLine" : 37
      },
      "89" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1681,
        "CharPositionInLine" : 1
      },
      "90" : {
        "Text" : "# set some obsolete variables for backward compatibility\n",
        "Line" : 1686,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_SET_OBSOLETE_VARIABLES : ON/OFF\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   NDK_CCACHE : <path to your ccache executable>\n\n# Obsolete:\n\n#   ANDROID_API_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL\n\n#   ARM_TARGET : superseded by ANDROID_ABI\n\n#   ARM_TARGETS : superseded by ANDROID_ABI (can be set only)\n\n#   ANDROID_NDK_TOOLCHAIN_ROOT : superseded by ANDROID_STANDALONE_TOOLCHAIN (can be set only)\n\n#   ANDROID_USE_STLPORT : superseded by ANDROID_STL=stlport_static\n\n#   ANDROID_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL (completely removed)\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   MIPS : TRUE if configured for mips\n\n#   BUILD_ANDROID : always TRUE\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : one of r5, r5b, r5c, r6, r6b, r7, r7b, r7c, r8, r8b, r8c, r8d, r8e, r9, r9b, r9c; set only for NDK\n\n#   ANDROID_ARCH_NAME : \"arm\" or \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n# Obsolete:\n\n#   ARMEABI_NDK_NAME : superseded by ANDROID_NDK_ABI_NAME\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1696,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 92
    },
    "cmake/ugdk.cmake" : {
      "ObjectId" : "7c9a79432db01a075be94aa3bfb064ff1434693d",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/CMakeLists.txt" : {
      "ObjectId" : "5a50e7f5e68a879235ad243fb8d867135255b705",
      "LastModified" : "2017-06-27T17:17:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Always compile all externals for Android.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "########################\n\n## SDL2\n\n########################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines 'SDL2'\n",
        "Line" : 57,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : "########################\n\n## SDL2_IMAGE\n\n########################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Defines 'SDL2-image'\n",
        "Line" : 74,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "########################\n\n## SDL2_MIXER\n\n########################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defines 'SDL2-mixer'\n",
        "Line" : 88,
        "CharPositionInLine" : 33
      },
      "8" : {
        "Text" : "# Defines 'glew'\n",
        "Line" : 99,
        "CharPositionInLine" : 31
      },
      "9" : {
        "Text" : "########################\n\n## freetype\n\n########################\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################\n\n## freetype-gl\n\n########################\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "externals/freetype-gl/CMakeLists.txt" : {
      "ObjectId" : "3bbf12ccd8307a86a764e80778c985d7ea79d860",
      "LastModified" : "2017-05-10T17:29:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# =========================================================================\n\n# Freetype GL - A C OpenGL Freetype engine\n\n# Platform:    Any\n\n# WWW:         http://code.google.com/p/freetype-gl/\n\n# -------------------------------------------------------------------------\n\n# Copyright 2011,2012 Nicolas P. Rougier. All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n#  1. Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n#  2. Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY NICOLAS P. ROUGIER ''AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n\n# EVENT SHALL NICOLAS P. ROUGIER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n\n# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\n# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# The views and conclusions contained in the software and documentation are\n\n# those of the authors and should not be interpreted as representing official\n\n# policies, either expressed or implied, of Nicolas P. Rougier.\n\n# =========================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/freetype/CMakeLists.txt" : {
      "ObjectId" : "42f855e7234ed2b26abb3f948f2475db8c001ceb",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glew/CMakeLists.txt" : {
      "ObjectId" : "e69a8317abb201865fabdf8a00aae9166440adaa",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/CMakeLists.txt" : {
      "ObjectId" : "685710f57086b6840d8d98bdb2a8af4184f21cfa",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VC doesn't support /arch:SSE3\t\n",
        "Line" : 91,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "#add_definitions(-S)\n\n#add_definitions(-s)\n\n#add_definitions(-m32)\n\n#add_definitions(-O3)\n",
        "Line" : 121,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#add_definitions(-fprofile-arcs -ftest-coverage) gcov\n\n#ctest_enable_coverage()\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "externals/glm/CTestConfig.cmake" : {
      "ObjectId" : "d3388358823000497712871f32bb6428e6d3bef8",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/glm/cmake/GNUInstallDirs.cmake" : {
      "ObjectId" : "4dc2d68a4ad620e099c8d7b37da87318f11e6ba4",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Define GNU standard installation directories\n\n# Provides install directory variables as defined for GNU software:\n\n#  http://www.gnu.org/prep/standards/html_node/Directory-Variables.html\n\n# Inclusion of this module defines the following variables:\n\n#  CMAKE_INSTALL_<dir>      - destination for files of a given type\n\n#  CMAKE_INSTALL_FULL_<dir> - corresponding absolute path\n\n# where <dir> is one of:\n\n#  BINDIR           - user executables (bin)\n\n#  SBINDIR          - system admin executables (sbin)\n\n#  LIBEXECDIR       - program executables (libexec)\n\n#  SYSCONFDIR       - read-only single-machine data (etc)\n\n#  SHAREDSTATEDIR   - modifiable architecture-independent data (com)\n\n#  LOCALSTATEDIR    - modifiable single-machine data (var)\n\n#  LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)\n\n#  INCLUDEDIR       - C header files (include)\n\n#  OLDINCLUDEDIR    - C header files for non-gcc (/usr/include)\n\n#  DATAROOTDIR      - read-only architecture-independent data root (share)\n\n#  DATADIR          - read-only architecture-independent data (DATAROOTDIR)\n\n#  INFODIR          - info documentation (DATAROOTDIR/info)\n\n#  LOCALEDIR        - locale-dependent data (DATAROOTDIR/locale)\n\n#  MANDIR           - man documentation (DATAROOTDIR/man)\n\n#  DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)\n\n# Each CMAKE_INSTALL_<dir> value may be passed to the DESTINATION options of\n\n# install() commands for the corresponding file type.  If the includer does\n\n# not define a value the above-shown default will be used and the value will\n\n# appear in the cache for editing by the user.\n\n# Each CMAKE_INSTALL_FULL_<dir> value contains an absolute path constructed\n\n# from the corresponding destination by prepending (if necessary) the value\n\n# of CMAKE_INSTALL_PREFIX.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Nikita Krupen'ko <krnekit@gmail.com>\n\n# Copyright 2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Installation directories\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Override this default 'lib' with 'lib64' iff:\n\n#  - we are on Linux system but NOT cross-compiling\n\n#  - we are NOT on debian\n\n#  - we are on a 64 bits system\n\n# reason is: amd64 ABI: http://www.x86-64.org/documentation/abi.pdf\n\n# For Debian with multiarch, use 'lib/${CMAKE_LIBRARY_ARCHITECTURE}' if\n\n# CMAKE_LIBRARY_ARCHITECTURE is set (which contains e.g. \"i386-linux-gnu\"\n\n# See http://wiki.debian.org/Multiarch\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# is this a debian system ?\n",
        "Line" : 83,
        "CharPositionInLine" : 38
      },
      "5" : {
        "Text" : "# not debian, rely on CMAKE_SIZEOF_VOID_P:\n",
        "Line" : 87,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Values whose defaults are relative to DATAROOTDIR.  Store empty values in\n\n# the cache and store the defaults in local variables if the cache values are\n\n# not set explicitly.  This auto-updates the defaults as DATAROOTDIR changes.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Result directories\n\n#\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "externals/glm/glm/CMakeLists.txt" : {
      "ObjectId" : "9dbe11cab2eda236e6de15dff2f9f9b9c1c0adae",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(glm STATIC glm.cpp)\n\n#add_library(glm_shared SHARED glm.cpp)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "externals/glm/test/CMakeLists.txt" : {
      "ObjectId" : "ef6c2877ef7c1df037f1e97f1c961cb3a82dfcde",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/test/bug/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/test/core/CMakeLists.txt" : {
      "ObjectId" : "0f5b9b496347e038d1ef5be32e5134935c605cf1",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/test/external/gli/CMakeLists.txt" : {
      "ObjectId" : "6b91c28801ad559b9f69b60a1122d5d25f1b43b7",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/test/gtc/CMakeLists.txt" : {
      "ObjectId" : "895a99f0009cd29d9fa447e60773feaeeff56962",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/test/gtx/CMakeLists.txt" : {
      "ObjectId" : "c0dda1852c4760b665ca7946f5bc4051dfccdf7d",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/util/CMakeLists.txt" : {
      "ObjectId" : "3deeb15b086e68582f32c245e342d20eef859424",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "externals/glm/util/FindGLM.cmake" : {
      "ObjectId" : "2d9009298ff0e5906a0e075d08790c860476e129",
      "LastModified" : "2014-10-17T02:04:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindGLM - attempts to locate the glm matrix/vector library.\n\n#\n\n# This module defines the following variables (on success):\n\n#   GLM_INCLUDE_DIRS  - where to find glm/glm.hpp\n\n#   GLM_FOUND         - if the library was successfully located\n\n#\n\n# It is trying a few standard installation locations, but can be customized\n\n# with the following variables:\n\n#   GLM_ROOT_DIR      - root directory of a glm installation\n\n#                       Headers are expected to be found in either:\n\n#                       <GLM_ROOT_DIR>/glm/glm.hpp           OR\n\n#                       <GLM_ROOT_DIR>/include/glm/glm.hpp\n\n#                       This variable can either be a cmake or environment\n\n#                       variable. Note however that changing the value\n\n#                       of the environment varible will NOT result in\n\n#                       re-running the header search and therefore NOT\n\n#                       adjust the variables set by this module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Carsten Neumann\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# default search dirs\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check environment variable\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put user specified location at beginning of search\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate header\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "modules/ugdk-2d/generated_src_list.cmake" : {
      "ObjectId" : "cc1684e52c32bb1d117a8c6547f1813d5864f852",
      "LastModified" : "2017-10-02T18:42:52Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ugdk-core/generated_src_list.cmake" : {
      "ObjectId" : "8f143cf53eeb364bdf02e4da8478617a625de4cd",
      "LastModified" : "2018-05-25T17:48:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "7750ed080ced68e51955347b0eda12e57ae97ca2",
      "LastModified" : "2017-09-11T20:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 46,
        "CharPositionInLine" : 30
      },
      "7" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dbuild_gtest_samples=ON flag when running cmake.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Second, for multi-config builds (e.g. msvc)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "test/internal_utils.cmake" : {
      "ObjectId" : "ab5f53675280490f999e32308eab493b2c2717a1",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 96,
        "CharPositionInLine" : 32
      },
      "14" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    }
  },
  "FileTypes" : {
    "CMAKE" : 33,
    "ANT" : 1
  },
  "ElapsedTime" : 2206
}