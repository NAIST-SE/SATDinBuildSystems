{
  "Repository" : "6276214",
  "Revision" : "HEAD",
  "ObjectId" : "fa813181b579f4e1b67c32a213a1747ce428a442",
  "CommitTime" : "2019-04-07T17:44:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e1520425a24ccff9402896a10654a7b2f3d3b4b8",
      "LastModified" : "2019-02-27T11:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2013-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# required for CMAKE_CXX_STANDARD for C++17\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# main build configuration file\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# text art: figlet -f rounded \"[SFT] openage\" | sed -e 's/\\\\/\\\\\\\\/g'\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##################################################\n\n# main buildsystem setup entry point\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# C++ standard requirement\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Python and Cython requirements\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CMake policies\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# honor language standard in try_compile()\n\n# enable automoc for generated files\n\n# prefers GLVND by default FindOpenGL\n",
        "Line" : 46,
        "CharPositionInLine" : 17
      },
      "9" : {
        "Text" : "# don't print 'Built target ...' messages\n\n# upstream since cmake v3.4.0-rc1 (by commit 1d3984780df8)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Ensure CMAKE_BUILD_TYPE is set correctly.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##################################################\n\n# options: keep up to date with those in ./configure!\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##################################################\n\n# static content filesystem locations\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##################################################\n\n# ccache setup\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# distros can also do this but they don't use this mechanism\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##################################################\n\n# clang tidy static analysis\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# option processing is now done.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##################################################\n\n# include buildsystem features\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# add search paths to helper modules\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# load helper modules\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# include build configuration modules\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# initialize language support\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# now that all modules and settings are loaded,\n\n# apply those to the project.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##################################################\n\n# documentation generation\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# create documentation\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##################################################\n\n# static content\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##################################################\n\n# C++ content\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##################################################\n\n# Python content (uses the C++ library)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "##################################################\n\n# packaging.\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Ensure that packaging is always the last step.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "##################################################\n\n# show build configuration overview\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "##################################################\n\n# done! that was easy, right?\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "Makefile" : {
      "ObjectId" : "0739ef77abda250e62da8dd330c703b4a3cbad07",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# type 'make help' for a list/explaination of recipes.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# removes all object files and binaries\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# removes all sourcefiles created by codegen\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# removes all generated .pxd files\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# removes all .cpp files created by Cython\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# removes object files, binaries, py modules, generated code\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "assets/CMakeLists.txt" : {
      "ObjectId" : "4e522484467e96b767d40a27c043ce89b4423a22",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To show QML files in the QtCreator.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "assets/logo/CMakeLists.txt" : {
      "ObjectId" : "039bff08dd86d65313c93554b3598649e92a64f2",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "assets/shaders/CMakeLists.txt" : {
      "ObjectId" : "95239fdf26af1b0ac5a445442a7fc48e72d3ef53",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "assets/textures/CMakeLists.txt" : {
      "ObjectId" : "80a3ed2107e61fa2cfadb9e4ac20b365295e2585",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "buildsystem/CheckCompilerFeatures.cmake" : {
      "ObjectId" : "acbb38bfc17ae8cf586abced771f7f3cb0e55530",
      "LastModified" : "2019-02-27T11:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2019 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "buildsystem/CheckInSourceBuild.cmake" : {
      "ObjectId" : "97ee73bdae6ae073a67133b2235e08cc51774381",
      "LastModified" : "2019-02-27T11:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if the source directory has a generated file.\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Clean the generated files from the source directory.\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "buildsystem/CheckRuntimeDependencies.cmake" : {
      "ObjectId" : "d3c5bfd4eb515e59a280763de8c85d5c44a37d7b",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# python modules\n\n# a list of imported modules may be obtained via\n\n#\n\n# grep -RE '^ *(import |from [^.])' | cut -d: -f2- | \\\n\n#     sed 's/^ *//g' | sort -u | grep -v openage\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# command-line tools\n\n# example: set(REQUIRED_UTILITIES \"foobar\")\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Checks if the specified python module exists\n\n#\n\n#     check_python_module_exists(<module> <exists>)\n\n#         <module>: The python module.\n\n#         <exists>: TRUE of FALSE based on the check.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# loop through all required python modules to find them\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# loop through all required utilities to find them\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "buildsystem/DependencyFetch.cmake" : {
      "ObjectId" : "7dfa4d61c3a18b9db58439c1ef90b54894fd3e81",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fetch project with given name from the Internet.\n\n# Basically wraps ExternalProject and does a nested cmake invocation.\n\n#\n\n# Usage:\n\n#   fetch_project(\n\n#       NAME ${projectname}\n\n#       [DISABLE_UPDATES]\n\n#       ${locationspecification...}\n\n#   )\n\n#\n\n# Arguments:\n\n#   NAME                    -- custom name of the project\n\n#   DISABLE_UPDATES         -- when set, don't do automatic git updates\n\n#   locationspecification   -- passed to ExternalProject_Add\n\n#\n\n# sets in caller scope:\n\n#   ${projectname}_SOURCE_DIR     -- subproject source directory\n\n#   ${projectname}_BINARY_DIR     -- subproject binary directory\n\n#   ${projectname}_SUBPROJ_DIR    -- everything of the subproject\n\n#                                 -- (including src and bin directory)\n\n#\n\n# You need to specify the location with options of\n\n# ExternalProject_Add, for example:\n\n#\n\n# fetch_project(\n\n#     NAME yourmom\n\n#     GIT_REPOSITORY https://github.com/nevergonna/giveyouup\n\n#     GIT_TAG origin/master\n\n# )\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CLion creates this file for multiple projects\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# create the ExternalProject configuration file\n\n# for the nested cmake call.\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# run cmake to \"configure\" the external project.\n\n# this prepares the download that will be done in the next step.\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Now actually download the project.\n\n# This does not \"build\" it! The \"build\" is the download execution.\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "buildsystem/DetectProjectVersion.cmake" : {
      "ObjectId" : "a58f6403999a643b65175dc0102e1d445cd139bc",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determines the version of the project and stores it in the variable PROJECT_VERSION.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If the project version was already defined or previously retrieved, don't bother.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if .git exists, try running git describe\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Fallback for downloaded zip's or git unavailability\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Still could not detect the version. Don't worry, raise a warning (shout a curse word?) and move on.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "buildsystem/HandleCXXOptions.cmake" : {
      "ObjectId" : "e074443d281b2fb95cc8c1240214cc2ff599d107",
      "LastModified" : "2019-02-27T11:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2019 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sets CXXFLAGS and compiler for the project\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#TODO: integrate PGO (profile-guided optimization) build\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set up gold linker features\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Activate ld.gold instead of the default\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# do splitdebug by default when in debug mode\n",
        "Line" : 79,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# https://gcc.gnu.org/wiki/DebugFission\n",
        "Line" : 88,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# check for compiler versions\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Don't worry. You're not alone. If you face an issue, just ask.\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Enable multi processor compilation on MSVC\n",
        "Line" : 116,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# The following flag specifications don't apply.\n",
        "Line" : 119,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# \"Intel\", etc..\n",
        "Line" : 121,
        "CharPositionInLine" : 7
      },
      "12" : {
        "Text" : "# optimization settings.\n\n# TODO: multi-configuration support for xcode, vstudio, ...\n\n#       the following code just makes sense for single-config\n\n#       generation, e.g. makefiles.\n\n#       we'd have to perform the flag generation for other types as well.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# these flags will now be extended by the following code.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If CXX_OPTIMIZATION_LEVEL was not provided, default to auto\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# sanitizing options\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Do nothing\n",
        "Line" : 183,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 17
    },
    "buildsystem/HandlePythonOptions.cmake" : {
      "ObjectId" : "2dfc01ab8a5d4c84cd6ee955805349862bc95826",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# finds the python interpreter, install destination and extension flags.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the Python version number requirement is in modules/FindPython_test.cpp\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is the only useful thing after cleaning up what python suggests\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# suppress #warning about deprecated numpy api\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# suppress #warning about deprecated numpy api\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "buildsystem/codegen.cmake" : {
      "ObjectId" : "068078bf6dd4a2d152d0ec5371eddbc11a32fde7",
      "LastModified" : "2019-04-07T17:28:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2019 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set CODEGEN_SCU_FILE to the absolute path to SCU file\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this function must be called once all required assets have been created, but before the executable is finalized.\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# make sure this function gets called only once\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# as the codegen creates all files at once,\n\n# let the buildsystem only depend on this single dummy file.\n\n# otherwise the codegen invocation would be done for each generated source.\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "buildsystem/cpp.cmake" : {
      "ObjectId" : "1ce780cab954f482f757e14935234d87a38a7c46",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# declare a new 'empty' executable file.\n\n# you need to use add_sources to add source files to it, and finalize_binary to finalize it.\n\n# then you can add libraries, include dirs, etc.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create the executable\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# process further arguments\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# add source files to a binary\n\n#\n\n# by default, the filename is interpreted as relative to the current directory\n\n# to specify absolute filenames, write ABSOLUTE\n\n# to specify a file that will be auto-generated, write GENERATED, all files after\n\n# this modifier are marked as generated.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add all sources as private, otherwise _ALL SOURCES_\n\n# would be compiled again for each library that links against\n\n# the $target_name\n",
        "Line" : 67,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# finalize the executable definition\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# make the binary depend on codegen iff it has any generated files\n\n#if(has_generated_sources)\n\n#\tadd_dependencies(\"${target_name}\" codegen)\n\n#endif()\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 8
    },
    "buildsystem/doxygen.cmake" : {
      "ObjectId" : "056ffaf0b08116688cfb4ab117bb0a2d7f78a627",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Doxygen integration\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enable doxygen for all given folder names\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add doc target\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# create doc folder name list\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# adapt doxygen config\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# add no-op doc target\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "buildsystem/modules/DownloadCache.cmake" : {
      "ObjectId" : "15ce2f83a63340214829e6c8bfc1753a97f5864e",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DownloadCache, as the name suggests, downloads a file and\n\n# if it succeeds, caches it for subsequent runs.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# function args:\n\n# * url: the source URL to download the file from.\n\n# * download_path: the destination file path.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "buildsystem/modules/FindCython.cmake" : {
      "ObjectId" : "e1637b1fce778c76015f0f5b65c90e29d8a3c5b6",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines:\n\n#\n\n#  CYTHON_FOUND\n\n#  CYTHON_VERSION          - e.g. '0.23dev'\n\n#  CYTHON                  - invocation (using python)\n\n#\n\n# It depends on:\n\n#\n\n#  PYTHON\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/modules/FindEpoxy.cmake" : {
      "ObjectId" : "a65e230d971bbeb48808ae02ca3564b569aed615",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "buildsystem/modules/FindGCCBacktrace.cmake" : {
      "ObjectId" : "8f73c83e95e448ef462cd7f12e4a2c8dca93c5f4",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines:\n\n#\n\n#  GCCBacktrace_FOUND           - whether libbacktrace was found\n\n#  GCCBacktrace_INCLUDE_DIRS    - The include dirs for libbacktrace\n\n#  GCCBacktrace_LIBRARIES       - The list of libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set BACKTRACE_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "buildsystem/modules/FindGPerfTools.cmake" : {
      "ObjectId" : "4a3920719e04fd47795cc55b29d170a74d016dc0",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file was taken from VAST,\n\n# Copyright 2014-2014 Matthias Vallentin.\n\n# It's licensed under the terms of the 3-clause BSD license.\n\n# Modifications Copyright 2014-2015 the openage authors.\n\n# See copying.md for further legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tries to find Gperftools.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Gperftools)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Gperftools_ROOT_DIR  Set this variable to the root installation of\n\n#                       Gperftools if the module has problems finding\n\n#                       the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  GPERFTOOLS_FOUND              System has Gperftools libs/headers\n\n#  GPERFTOOLS_LIBRARIES          The Gperftools libraries (tcmalloc & profiler)\n\n#  GPERFTOOLS_TCMALLOC           The tcmalloc library\n\n#  GPERFTOOLS_PROFILER           The profiler library\n\n#  GPERFTOOLS_INCLUDE_DIR        The location of Gperftools headers\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/modules/FindHarfBuzz.cmake" : {
      "ObjectId" : "837657bf562ad861cee3631afc17317b48726e7f",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindHarfBuzz\n\n# ---------\n\n#\n\n# Locate HarfBuzz, the awesome text shaping library.\n\n#\n\n# The module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#    HarfBuzz_FOUND - Found HarfBuzz library\n\n#    HarfBuzz_INCLUDE_DIRS - HarfBuzz include directories\n\n#    HarfBuzz_LIBRARIES - The libraries needed to use HarfBuzz\n\n#    HarfBuzz_VERSION_STRING - the version of HarfBuzz found\n\n#\n\n# Example Usage:\n\n#\n\n# ::\n\n#\n\n#     find_package(HarfBuzz REQUIRED)\n\n#     include_directories(${HarfBuzz_INCLUDE_DIRS})\n\n#\n\n# ::\n\n#\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${HarfBuzz_LIBRARIES})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/modules/FindInotify.cmake" : {
      "ObjectId" : "03620285367c7c86f94916dc0fa3318d1697a1af",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\n\n#\n\n# INOTIFY_INCLUDE_DIR\n\n# INOTIFY_FOUND\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/modules/FindNumpy.cmake" : {
      "ObjectId" : "0fb562058f6b23d7eeb0f7f50bd482abb567de38",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2016-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines:\n\n#\n\n# NUMPY_INCLUDE_DIR\n\n# NUMPY_FOUND\n\n#\n\n# Depends on: Python\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/modules/FindOgg.cmake" : {
      "ObjectId" : "67866597188adc7e41a2fe164f944b5a35eeb27f",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find ogg library\n\n# Find the native Ogg headers and library.\n\n# This module defines\n\n#  OGG_INCLUDE_DIRS   - where to find ogg/ogg.h etc.\n\n#  OGG_LIBRARIES      - List of libraries when using libogg\n\n#  OGG_FOUND          - True if ogg is found.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OGG_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# export the variables\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "buildsystem/modules/FindOpusfile.cmake" : {
      "ObjectId" : "bdbc76ef22f8c73f71ce134260561526a551935e",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file was taken from Unvanquished,\n\n# Copyright 2000-2009 Kitware, Inc., Insight Software Consortium\n\n# It's licensed under the terms of the 3-clause OpenBSD license.\n\n# Modifications Copyright 2014-2015 the openage authors.\n\n# See copying.md for further legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find opus library\n\n# Find the native Opus headers and libraries.\n\n# This module defines\n\n#  OPUS_INCLUDE_DIRS   - where to find opus/opus.h, opus/opusfile.h, etc\n\n#  OPUS_LIBRARIES      - List of libraries when using libopus\n\n#  OPUS_FOUND          - True if opus is found.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find the opusfile header, defines our api.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# look for libopusfile, the highlevel container-aware api.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find libopus, the core codec component.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OPUSFILE_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# export the variables\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "buildsystem/modules/FindPython.cmake" : {
      "ObjectId" : "c8b9da9c72b12e97312dc3f5694b8c2901046a07",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2015-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find Python\n\n# ~~~~~~~~~~~\n\n# Find the Python interpreter, and related info.\n\n#\n\n# You can manually pass an interpreter by defining PYTHON:\n\n# it's used as a manual override,\n\n# and no further search is performed.\n\n#\n\n# This file defines the following variables:\n\n#\n\n# PYTHON_FOUND        - True when python was found.\n\n# PYTHON              - The full path to the Python interpreter.\n\n# PYTHON_INCLUDE_DIRS - Include path for Python extensions.\n\n# PYTHON_LIBRARIES    - Library and Linker options for Python extensions.\n\n#\n\n# Also defines py_exec and py_get_config_var.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# python version string to test for\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the python version for the cpython api test\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# executes some python statement(s), and returns the result in RESULTVAR.\n\n# aborts with a fatal error on error.\n\n# no single quotes are allowed in STATEMENTS.\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# uses py_exec to determine a config var as in distutils.sysconfig.get_config_var().\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# execute `/usr/bin/env python`\n",
        "Line" : 66,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# resolve symlinks and get the full path of the interpreter\n",
        "Line" : 84,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# the above globbing patterns might have caught some files\n\n# like /usr/bin/python-config; skip those.\n",
        "Line" : 87,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# collect a list of possible python interpreters from all sorts of sources,\n\n# in the hope that one of them will have associated libs and headers.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# user-specified or from previous run, add it first\n\n# so it has highest priority.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# From /usr/bin/env's\n",
        "Line" : 107,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# From known python locations\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# general POSIX / GNU paths\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# OSX-specific paths\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# use cmake's built-in finder\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# After resolving symlinks, the list of interpreters contains duplicates\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Retain only the proper python interpreters\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# python* matches pythontex.py, which we never ever want.\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# test for validity of the interpreter\n",
        "Line" : 139,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# not a python interpreter\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# test all the found interpreters; break on success.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# If the current python interpreter equals the one found at the very beginning with PythonInterp,\n\n# we can use the PythonLibs find-module to find the matching libraries.\n\n# Otherwise we ask that interpreter where its matching libraries are.\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# ask the interpreter for the essential extension-building flags\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# there's a static_assert that tests the Python version.\n\n# that way, we verify the interpreter and the library version.\n\n# (the interpreter provided us the library location)\n",
        "Line" : 176,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# if python was not set before, force-set it now.\n",
        "Line" : 221,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 26
    },
    "buildsystem/modules/FindSDL2.cmake" : {
      "ObjectId" : "48dcbe549e3634055100940b8e7330aee4af53cc",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file was taken from openmw,\n\n# Copyright 2003-2009 Kitware, Inc.\n\n# It's licensed under the terms of the 3-clause OpenBSD license.\n\n# Modifications Copyright 2014-2016 the openage authors.\n\n# See copying.md for further legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_FOUND             - whether SDL2 was found\n\n# SDL2_INCLUDE_DIR       - include dir\n\n# SDL2_LIBRARY           - linker directives\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# These values are used to generate the final SDL2_LIBRARY variable,\n\n# but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 70,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 71,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Blastwave\n",
        "Line" : 72,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# Its total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For MinGW library\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 13
    },
    "buildsystem/modules/FindSDL2Image.cmake" : {
      "ObjectId" : "74b36be8ba2e6b151ab933778ca61aca3c3b70c7",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 17,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 18,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SDL2Image_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "buildsystem/options.cmake" : {
      "ObjectId" : "4b20a655ec2d24792395e5b14ed5c7976710c583",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# logs whether the option NAME is enabled\n\n# sets WITH_${VARNAME} to HAVE\n\n# errors if WANT_${VARNAME} conflicts with HAVE\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/python.cmake" : {
      "ObjectId" : "23c5bfb8139e1778574dfb3ea35e075f32944cf3",
      "LastModified" : "2019-03-06T19:31:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2019 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# provides macros for defining python extension modules and pxdgen sources.\n\n# and a 'finalize' function that must be called in the end.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# filled by pxdgen; written to bin/py/pxdgen_sources for use by pxdgen.py.\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# filled by add_cython_modules. used by cythonize.py.\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# list of pxd files added manually\n\n# filled by add_pxd only. for use as depends list for cythonize.py.\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# filled by pxdgen. for use as output list for the pxdgen target.\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# filled with all .py filenames; used for installing.\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# filled with the relative source dirs of the above py files.\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# filled with all .py filenames that should not be installed.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# filled with all .py filenames that are installed to the elf binary directory.\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# filled with replacement names that are used for installing each entry in SFT_PY_FILES\n\n# special value __nope is used if no replacement should be done.\n\n# thank you cmake for not providing a dict\n\n# where i could just look the original name up to get the replacement name.\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# filled with all cython module target names; used for in-place creation.\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# adds a new module for cython compilation, by relative filename.\n\n# synoposis:\n\n# add_cython_modules(\n\n#    test.pyx\n\n#    EMBED __main__.pyx\n\n#    STANDALONE EMBED foo/bar.pyx\n\n#    NOINSTALL STANDALONE foo/test.pyx\n\n# )\n\n#\n\n# test.pyx is compiled to a shared library linked against PYEXT_LINK_LIBRARY\n\n# __main__.pyx is compiled to a executable with embedded python interpreter,\n\n# linked against libpython and PYEXT_LINK_LIBRARY.\n\n# foo/bar.pyx is compiled to a executable with embedded pytthon interpreter,\n\n# linked only against libpython.\n\n# foo/test.pyx is compiled to a shared library linked against nothing, and will\n\n# not be installed.\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# construct some hopefully unique target name\n",
        "Line" : 89,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# generate the pretty module name\n",
        "Line" : 93,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# TODO: use full ldflags and cflags provided by python${VERSION}-config\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Since this module is not embedded with python interpreter,\n\n# Mac OS X requires a link flag to resolve undefined symbols\n",
        "Line" : 147,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# Reset the flags before processing the next cython module\n",
        "Line" : 159,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# add a C++ header file as pxdgen source file\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# TODO: change if multiple files with the same name are supported in a directory\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# add a .pxd or other additional Cython source\n",
        "Line" : 192,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add a .py file for installing\n\n#\n\n# add_py_module (\n\n#    somefile.py\n\n#    NOINSTALL otherfile.py          # do not install this file\n\n#    BININSTALL wtf.py               # install to $PREFIX/bin/wtf.py\n\n#    BININSTALL lol.py AS rofl       # install lol.py to $PREFIX/bin/rofl\n\n# )\n\n#\n\n# because cmake is such a nice language,\n\n# the handling of the above is quite painful.\n",
        "Line" : 208,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# keyword parsing so the next arg knows\n\n# what the previous keyword was.\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# if after the source file for /bin installation no AS\n\n# follows, normal source listings follow.\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# make the source absolute, except when source is the \"AS $replacementname\"\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# if source should not be installed or be installed to bin/\n\n# it is excluded from the big python installation list\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# if the file is to be installed to bin/\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# the replacement name must be after the BININSTALL definition\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# in all cases except the \"AS $newname\",\n\n# add the python file to the to-compile list.\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# don't replace the install name if we're in the \"AS $name\"\n\n# or no AS followed the BININSTALL\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# reset the alias and bin-install flags\n\n# so they count only for one (the current) source file.\n",
        "Line" : 292,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# pxdgen (.h -> .pxd)\n",
        "Line" : 303,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# cythonize (.pyx -> .cpp)\n",
        "Line" : 320,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# remove unneeded files from the previous builds (if any)\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# py compile (.py -> .pyc)\n",
        "Line" : 355,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# determine the compiled file name for all source files\n",
        "Line" : 372,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# install the python file to the elf binary dir\n",
        "Line" : 416,
        "CharPositionInLine" : 3
      },
      "37" : {
        "Text" : "# optionally, rename the file:\n",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "##################################################\n\n# code generation\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# inplace module install (bin/module.so -> module.so)\n\n# MSVC, Xcode (multi-config generators) produce outputs\n\n# in a directory different from `CMAKE_CURRENT_BINARY_DIR`.\n\n# link/copy the output files as required for the cython modules.\n",
        "Line" : 439,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# cleaning of all in-sourcedir stuff\n",
        "Line" : 472,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# general deleters to catch files that have already been un-listed.\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# check for any unlisted .py files, and error.\n",
        "Line" : 501,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 43
    },
    "buildsystem/scripts/EmbedFont.cmake" : {
      "ObjectId" : "de90bc5cea675aa9b31563c12509016927620a3f",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: disable downloading for CI builds. <Need CI first>\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/scripts/EmbedPython.cmake" : {
      "ObjectId" : "0df395f5c371c4e928e98388c969b8cb67d9cdb6",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: disable downloading for CI builds. <Need CI first>\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "buildsystem/scripts/EmbedWinDependencies.cmake" : {
      "ObjectId" : "07eba81cabde29b14775391bdebc6a5f3ef94409",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# function to wrap the dependency resolving and copying logic on Windows.\n\n# Inspired by `applocal.ps1` from vcpkg which recursively descends into the\n\n# dependency tree of a binary and copies each to the target directory.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The fonts directory defaults to the same directory as the executable.\n\n# In this case, it is python.exe at `py_install_prefix`.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "buildsystem/util.cmake" : {
      "ObjectId" : "35c4550adb201d14a9a9c3d5de49c48225b43867",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2016 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# pretty-prints a new target; tries to group target types to make stuff look more clean.\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# write the content to filename if it is different than\n\n# what's already in that file (if exists)\n\n# if the file doesn't exist, create it.\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "cfg/CMakeLists.txt" : {
      "ObjectId" : "2f51eaedecc1aac1e59f0614d209baad63f1fa6c",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dist/CMakeLists.txt" : {
      "ObjectId" : "77bc4e6a9c22cdbf5ba0b6e9affd44265b82ef7c",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/CMakeLists.txt" : {
      "ObjectId" : "d1fc16600c45c6c1a161cdf5a34f00dda800b861",
      "LastModified" : "2019-02-27T11:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2014-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# main C++ library definitions.\n\n# dependency and source file setup for the resulting library.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#################################################################\n\n# source files and folders are added at the bottom of this file #\n\n#################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set basic library settings\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##################################################\n\n# library dependency specification\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# freetype includedir hint for ubuntu...\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# provide apple qt5 location\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# windows does not have libm\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##################################################\n\n# nyan integration\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# first, try to locate nyan directly\n\n# this discovers the system package or the user-registry package\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# if this didn't work, we can download nyan like a git submodule.\n\n# this is the treeish to be checked out.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# if nyan was not found, consider downloading it as subproject\n\n# only use the subproject mode if it was requested\n\n# or if it was used before.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# don't register nyan to the userpackage-repo!\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# don't generate the `doc` target again (name conflict!)\n",
        "Line" : 116,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# register the targets\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "##################################################\n\n# optional dependencies\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# advanced stacktraces with libbacktrace from gcc\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# google performance tools\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# inotify support\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ncurses support\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# opengl support\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# vulkan support\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "##################################################\n\n# build configuration generation\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##################################################\n\n# platform specifics\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##################################################\n\n# directories for header inclusion\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##################################################\n\n# dependency linking\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# all the libraries are not exposed\n\n# to the public api of libopenage\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##################################################\n\n# installation of the library\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "##################################################\n\n# source file definitions\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# add new sources here, dependencies for linking and including\n\n# are specified above the source file list.\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add subsystem folders\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "libopenage/audio/CMakeLists.txt" : {
      "ObjectId" : "dcb54230fe0b5a0dbc5d7fd2f6be8f924f655812",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/console/CMakeLists.txt" : {
      "ObjectId" : "11d2deb8e27d29c61591e91cdcd5538d082c7f63",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/coord/CMakeLists.txt" : {
      "ObjectId" : "da6c806fad6a6dc74151b23af857e3e465688d50",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2018-2018 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libopenage/curve/CMakeLists.txt" : {
      "ObjectId" : "fd797510abf637cbe5449c102f065198347b4d83",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/curve/tests/CMakeLists.txt" : {
      "ObjectId" : "62e8a61f86f988345b55b1f21b7f5af87fd125eb",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/cvar/CMakeLists.txt" : {
      "ObjectId" : "086b1cee0d1306b13baace976ebd2d5cd3d22ff6",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/datastructure/CMakeLists.txt" : {
      "ObjectId" : "16b0bc807c61fa741b70acb2a6fc0edc837242e8",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/error/CMakeLists.txt" : {
      "ObjectId" : "9fefd61a5df5316d2f2700689efb2ea5815ab630",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/event/CMakeLists.txt" : {
      "ObjectId" : "b4231385ff9fbd64d0169685874d0b25dedcfe51",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/event/demo/CMakeLists.txt" : {
      "ObjectId" : "f685f0547047f6dafd57798eb7b1fd6436f98f5c",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/gamestate/CMakeLists.txt" : {
      "ObjectId" : "87dffe21d702f2b7a521f7c695f6349297d728e3",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/gui/CMakeLists.txt" : {
      "ObjectId" : "e63046c4013dae80c788454524ff152e1644adb9",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/gui/guisys/CMakeLists.txt" : {
      "ObjectId" : "3b1091ce47225cd11b243d9ebd9cd5bc2b081fd1",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/gui/integration/CMakeLists.txt" : {
      "ObjectId" : "0bb272b5c540028b225893220e073e913ea4d9a9",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/gui/integration/private/CMakeLists.txt" : {
      "ObjectId" : "97f03fc4f4d7fbb50efb7a93325b80583ccdb54d",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/gui/integration/public/CMakeLists.txt" : {
      "ObjectId" : "c7a535bb1fb6f4397733f8982be8eba31814dfc6",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/input/CMakeLists.txt" : {
      "ObjectId" : "799b91e1eeb4c106a57549a2a7037a6e147696b6",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/job/CMakeLists.txt" : {
      "ObjectId" : "0c7b29f24b983e0646292b0d566ae91d74864d54",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/log/CMakeLists.txt" : {
      "ObjectId" : "77d38198a0c0efd428a984c5efb095e446b5996d",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/pathfinding/CMakeLists.txt" : {
      "ObjectId" : "ad828995c917cd640b88a3a9e3c3b180de74282d",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/pyinterface/CMakeLists.txt" : {
      "ObjectId" : "3c06410934c59d74b5df0ab0bb4699ab39e08cf0",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/renderer/CMakeLists.txt" : {
      "ObjectId" : "366ebde28b25bc9433a3d1a336e6e5191f848074",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/renderer/font/CMakeLists.txt" : {
      "ObjectId" : "6dd66d658368b3aad1457daf2956b4e9473c06be",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/renderer/opengl/CMakeLists.txt" : {
      "ObjectId" : "849c339c6f81990352d28f2e1100e0aa2ac47fa7",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/renderer/resources/CMakeLists.txt" : {
      "ObjectId" : "250509a3056af8c57adbbec170e858102665a828",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/renderer/vulkan/CMakeLists.txt" : {
      "ObjectId" : "569d36c6720b4eadb52023ef869220a893d847c7",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/rng/CMakeLists.txt" : {
      "ObjectId" : "d436dad4d36bb4bcbacbe7749e8e2091e5610ab0",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/shader/CMakeLists.txt" : {
      "ObjectId" : "6477fa9fc7eced3c27e6f412cf81e0c5be3caa2a",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/simulation/CMakeLists.txt" : {
      "ObjectId" : "dd1fee1fe9b4e42684c305e383dd023d2174189f",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/terrain/CMakeLists.txt" : {
      "ObjectId" : "2dbe9a39ccd2bc16518f08f6edc42c11d9cbf788",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/testing/CMakeLists.txt" : {
      "ObjectId" : "ab2a53b65f35e07f0b646aeafe3baf840770d91f",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/unit/CMakeLists.txt" : {
      "ObjectId" : "3c7a6e27ccaf8fce903f58923df3cc6f1a039693",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/util/CMakeLists.txt" : {
      "ObjectId" : "ac5b585f06459b32946b04e4581bdd75cc507f90",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/util/compress/CMakeLists.txt" : {
      "ObjectId" : "3d66e9a237592c863a4a8822753da90c5823b516",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/util/filelike/CMakeLists.txt" : {
      "ObjectId" : "faa29d9119b5ce52bf83992347784995130dfcfa",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libopenage/util/fslike/CMakeLists.txt" : {
      "ObjectId" : "8a250e0053f110b266ff5008155f12d562a93e9e",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/CMakeLists.txt" : {
      "ObjectId" : "c92df3e70eb833bf513a189944aa1cb5942b5ebb",
      "LastModified" : "2019-02-27T11:52:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# python module configurations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# python config file is created in libopenage\n\n# in order to get options from libopenage\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "openage/cabextract/CMakeLists.txt" : {
      "ObjectId" : "9a545259af6a4e9e0523efcb96c1050620e8b14a",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/codegen/CMakeLists.txt" : {
      "ObjectId" : "2b08db7c619318f3d6c7cfc34e040dbbad13c876",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/convert/CMakeLists.txt" : {
      "ObjectId" : "da36323c9380b354db3c10ea80a4781231aea078",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/convert/dataformat/CMakeLists.txt" : {
      "ObjectId" : "35e2bfeaa083eae3469baf47a8d95e525c5cc1ee",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/convert/gamedata/CMakeLists.txt" : {
      "ObjectId" : "787f89989a85b15c3c47cceb7e2cb37670335171",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/convert/hardcoded/CMakeLists.txt" : {
      "ObjectId" : "edd4b040d1ab5887c2f10e9bfb7dd862b5cb99a9",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/convert/interface/CMakeLists.txt" : {
      "ObjectId" : "259ea42a648555234e90cb15d7b77e4b745be802",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/convert/opus/CMakeLists.txt" : {
      "ObjectId" : "de9cb5b0afc0c8dec8280ea055f15e19dbe82d69",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Currently there is no way to link cython modules to extra libraries.\n\n# Since PYEXT_LINK_LIBRARY normally only includes libopenage (what\n\n# opusenc doesn't need), we hijack this variable. This is ok, because\n\n# there are no subdirectories, that will see the changed variable.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "openage/cppinterface/CMakeLists.txt" : {
      "ObjectId" : "45bdd803821b13c47206de45e77bd899971800c8",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/cvar/CMakeLists.txt" : {
      "ObjectId" : "0bdbdf4c887cf85d3cbda8ba8d32cd51191bd01e",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/event/CMakeLists.txt" : {
      "ObjectId" : "5cbdcb4856c21449fec58a6fe0eb84fd2da4059c",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/game/CMakeLists.txt" : {
      "ObjectId" : "6fa562cece0bea315e4782a4869fd5854eb270ea",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/log/CMakeLists.txt" : {
      "ObjectId" : "2dfbd2adc72629a1cf8be6ad81423654b6ff1282",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/renderer/CMakeLists.txt" : {
      "ObjectId" : "1f32b350a4c913587bb2d16de1f55acac2b5399f",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/testing/CMakeLists.txt" : {
      "ObjectId" : "2e17d69245fc8c2c7bf26fec56b9475a97976ae4",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/util/CMakeLists.txt" : {
      "ObjectId" : "d48240538ac74ecd64cf82bcefc4a1f648320dd8",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/util/filelike/CMakeLists.txt" : {
      "ObjectId" : "6cd2125fe97fecb596b8ef16c8726963ce189def",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openage/util/fslike/CMakeLists.txt" : {
      "ObjectId" : "ee85d18c1a4033eedcbeec41a4f032a3804e21f3",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "packaging/CMakeLists.txt" : {
      "ObjectId" : "715c565f8d1561dbc12873377b4d52a0bb3f0ab2",
      "LastModified" : "2018-12-16T15:24:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2017-2017 the openage authors. See copying.md for legal info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keeps all required CPack configuration in one place and include(CPack)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HACKHACK: Update the following if vcpkg breaks compatibility for\n\n# internal directories, scripts, or variables.\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# TODO: set package version components instead\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 93,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2219
}