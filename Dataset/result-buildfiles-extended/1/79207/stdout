{
  "Repository" : "79207",
  "Revision" : "HEAD",
  "ObjectId" : "ebf2eaf515e46abd43bc798e7e4ba77bfe529218",
  "CommitTime" : "2019-03-18T10:24:08Z",
  "Files" : {
    "contrib/vm/Makefile" : {
      "ObjectId" : "3c0e645abefa65a8cd13dfe80b3a05ceeaf8fc7d",
      "LastModified" : "2010-09-22T15:26:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Makefile" : {
      "ObjectId" : "d74565d1385da368dadfb26838811959c9b42b8d",
      "LastModified" : "2017-09-18T13:38:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###############################################################################\n\n#\n\n# Initialise various variables\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n#\n\n# Locations of tools\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n#\n\n# SRCDIRS lists all directories containing source files.\n\n#\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These directories contain code that is not eligible for UEFI Secure\n\n# Boot signing.\n\n#\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# NON_AUTO_SRCS lists files that are excluded from the normal\n\n# automatic build system.\n\n#\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# INCDIRS lists the include path\n\n#\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n\n#\n\n# Default build target: build the most common targets and print out a\n\n# helpfully suggestive message\n\n#\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###############################################################################\n\n#\n\n# Comprehensive build target: build a selection of cross-platform\n\n# targets to expose potential build errors that show up only on\n\n# certain platforms\n\n#\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###############################################################################\n\n#\n\n# VMware build target: all ROMs used with VMware\n\n#\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################\n\n#\n\n# Build targets that do nothing but might be tried by users\n\n#\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###############################################################################\n\n#\n\n# Version number calculations\n\n#\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################\n\n#\n\n# Drag in the bulk of the build system\n\n#\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/arch/arm/Makefile" : {
      "ObjectId" : "3cee5f3aca89714b13ff2f7d05f857a0002e48e9",
      "LastModified" : "2016-05-07T23:18:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Assembler section type character\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include common ARM headers\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ARM-specific directories containing source files\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/arch/arm32/Makefile" : {
      "ObjectId" : "3a7c0923075dfe0fe8992fb43e2c875ee9c328fc",
      "LastModified" : "2016-05-07T23:18:35Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ARM32-specific directories containing source files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ARM32-specific flags\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# EFI requires -fshort-wchar, and nothing else currently uses wchar_t\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include common ARM Makefile\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include platform-specific Makefile\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/arch/arm64/Makefile" : {
      "ObjectId" : "9b9dd5ec8254fd9b719a0f7e4ba22abb8c6e08e1",
      "LastModified" : "2017-09-18T13:38:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ARM64-specific directories containing source files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ARM64-specific flags\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We want to specify the LP64 model.  There is an explicit -mabi=lp64\n\n# on GCC 4.9 and later, and no guarantee as to which is the default\n\n# model.  In earlier versions of GCC, there is no -mabi option and the\n\n# default appears to be LP64 anyway.\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# EFI requires -fshort-wchar, and nothing else currently uses wchar_t\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include common ARM Makefile\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include platform-specific Makefile\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/arch/i386/Makefile" : {
      "ObjectId" : "b7c2792d9327a7b1bc874e4abd7c0bf82b3922da",
      "LastModified" : "2017-09-18T13:38:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Force i386-only instructions\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Code size reduction.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Code size reduction.\n\n#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Code size reduction.  gcc3 needs a different syntax to gcc2 if you\n\n# want to avoid spurious warnings.\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# gcc2\n\n# gcc\n",
        "Line" : 25,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Code size reduction.  This is almost always a win.  The kernel uses\n\n# it, too.\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Code size reduction.  Use regparm for all functions - C functions\n\n# called from assembly (or vice versa) need __asmcall now\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Code size reduction.  Use -mrtd (same __asmcall requirements as above)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Code size reduction.  This is the logical complement to -mregparm=3.\n\n# It doesn't currently buy us anything, but if anything ever tries to\n\n# return small structures, let's be prepared\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Force 32-bit code even on an x86-64 machine\n\n#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# EFI requires -fshort-wchar, and nothing else currently uses wchar_t\n\n#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We need to undefine the default macro \"i386\" when compiling .S\n\n# files, otherwise \".arch i386\" translates to \".arch 1\"...\n\n#\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Some widespread patched versions of gcc include -fPIE -Wl,-pie by\n\n# default.  Note that gcc will exit *successfully* if it fails to\n\n# recognise an option that starts with \"no\", so we have to test for\n\n# output on stderr instead of checking the exit status.\n\n#\n\n# Current versions of gcc require -no-pie; older versions require\n\n# -nopie.  We therefore test for both.\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# i386-specific directories containing source files\n\n#\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Include common x86 Makefile\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Include platform-specific Makefile\n\n#\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "src/arch/x86/Makefile" : {
      "ObjectId" : "011260cac7fc9abf773e1e4e0fa7b1565a3026e7",
      "LastModified" : "2017-09-18T13:38:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Assembler section type character\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include common x86 headers\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# x86-specific directories containing source files\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# breaks building some of the linux-related objects\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# disable valgrind\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Define version string for lkrnprefix.S\n\n#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include Hyper-V driver in the all-drivers build\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/arch/x86_64/Makefile" : {
      "ObjectId" : "b3064b7526fd7ca5b16606b7eda086e184bcd4fe",
      "LastModified" : "2018-03-20T20:01:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Code size reduction.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Code size reduction.  gcc3 needs a different syntax to gcc2 if you\n\n# want to avoid spurious warnings.\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force 64-bit code\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prevent use of MMX and SSE registers\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# EFI requires -fshort-wchar, and nothing else currently uses wchar_t\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We need to undefine the default macro \"i386\" when compiling .S\n\n# files, otherwise \".arch i386\" translates to \".arch 1\"...\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add -maccumulate-outgoing-args if required by this version of gcc\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# x86_64-specific directories containing source files\n\n#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Include common x86 Makefile\n\n#\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include platform-specific Makefile\n\n#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/util/Makefile" : {
      "ObjectId" : "4a6a7c7c6e3a58d0e271044b686a9172a58432f9",
      "LastModified" : "2016-05-07T23:18:35Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 9
  },
  "ElapsedTime" : 3168
}