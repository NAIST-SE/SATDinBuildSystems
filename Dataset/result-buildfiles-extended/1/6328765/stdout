{
  "Repository" : "6328765",
  "Revision" : "HEAD",
  "ObjectId" : "ec9fc97681ad6758b0c6fb0468d08e2c9a953324",
  "CommitTime" : "2017-04-06T17:55:09Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "851ae3ad7f372f326a90fa587b0120e3e7a04ad9",
      "LastModified" : "2014-01-11T20:59:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/glfw/CMake/amd64-mingw32msvc.cmake" : {
      "ObjectId" : "705e251d3917f3787eca55aa3b3b0e303aee548f",
      "LastModified" : "2014-01-01T15:19:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/glfw/CMake/i586-mingw32msvc.cmake" : {
      "ObjectId" : "393ddbda3019706378b25bb3d1abb634a3936866",
      "LastModified" : "2014-01-01T15:19:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "deps/glfw/CMake/i686-pc-mingw32.cmake" : {
      "ObjectId" : "9a46aef7b3457c8382fe16b3ad2e5a776f7f5f7d",
      "LastModified" : "2014-01-01T15:19:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "#Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "deps/glfw/CMake/i686-w64-mingw32.cmake" : {
      "ObjectId" : "9bd60936de2ed08f365601fbbfe404adbb37853a",
      "LastModified" : "2014-01-01T15:19:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "deps/glfw/CMake/modules/FindEGL.cmake" : {
      "ObjectId" : "83bb9e36b57855adee3cecf0319d106ab0d7db08",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find EGL\n\n#\n\n# EGL_INCLUDE_DIR\n\n# EGL_LIBRARY\n\n# EGL_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/glfw/CMake/modules/FindGLESv1.cmake" : {
      "ObjectId" : "70d3eb9fcb34e2a9cb6af555b3b1699b92771515",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find GLESv1\n\n#\n\n# GLESv1_INCLUDE_DIR\n\n# GLESv1_LIBRARY\n\n# GLESv1_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/glfw/CMake/modules/FindGLESv2.cmake" : {
      "ObjectId" : "ff5ba954c6e44884603c5d1872bc74e09c20ef56",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find GLESv2\n\n#\n\n# GLESv2_INCLUDE_DIR\n\n# GLESv2_LIBRARY\n\n# GLESv2_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/glfw/CMake/modules/FindMir.cmake" : {
      "ObjectId" : "b1a495ba191db856c27e790cecd100a7288eeb89",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Mir on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   MIR_LIBRARIES   - Link these to use Wayland\n\n#   MIR_INCLUDE_DIR - Include directory for Wayland\n\n#\n\n# Copyright (c) 2014 Brandon Schaefer <brandon.schaefer@canonical.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/glfw/CMake/modules/FindWayland.cmake" : {
      "ObjectId" : "f93218b8739e66a50678a4b6965231438b87692f",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Wayland on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   WAYLAND_FOUND       - True if Wayland is found\n\n#   WAYLAND_LIBRARIES   - Link these to use Wayland\n\n#   WAYLAND_INCLUDE_DIR - Include directory for Wayland\n\n#   WAYLAND_DEFINITIONS - Compiler flags for using Wayland\n\n#\n\n# In addition the following more fine grained variables will be defined:\n\n#\n\n#   WAYLAND_CLIENT_FOUND  WAYLAND_CLIENT_INCLUDE_DIR  WAYLAND_CLIENT_LIBRARIES\n\n#   WAYLAND_SERVER_FOUND  WAYLAND_SERVER_INCLUDE_DIR  WAYLAND_SERVER_LIBRARIES\n\n#   WAYLAND_EGL_FOUND     WAYLAND_EGL_INCLUDE_DIR     WAYLAND_EGL_LIBRARIES\n\n#\n\n# Copyright (c) 2013 Martin Gräßlin <mgraesslin@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In the cache already\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "deps/glfw/CMake/modules/FindXKBCommon.cmake" : {
      "ObjectId" : "0f571eeacb5cd91d4ef72a89a066142e5a6a0d0a",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find XKBCommon\n\n# Once done, this will define\n\n#\n\n#   XKBCOMMON_FOUND - System has XKBCommon\n\n#   XKBCOMMON_INCLUDE_DIRS - The XKBCommon include directories\n\n#   XKBCOMMON_LIBRARIES - The libraries needed to use XKBCommon\n\n#   XKBCOMMON_DEFINITIONS - Compiler switches required for using XKBCommon\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "deps/glfw/CMake/x86_64-w64-mingw32.cmake" : {
      "ObjectId" : "84b2c701ec1d9e2ee0b72f3031cfccb4a81d205e",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "deps/glfw/CMakeLists.txt" : {
      "ObjectId" : "8f0d665095ba72468891e0fa8c4f3e81f45e9cc6",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Until all major package systems have moved to CMake 3,\n\n# we stick with the older INSTALL_NAME_DIR mechanism\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Set compiler specific flags\n\n#--------------------------------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable link-time exploit mitigation features enabled by default on MSVC\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Compatibility with data execution prevention (DEP)\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Compatibility with address space layout randomization (ASLR)\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Compatibility with 64-bit address space layout randomization (ASLR)\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# HACK: When building on MinGW, WINVER and UNICODE need to be defined before\n\n# the inclusion of stddef.h (by glfw3.h), which is itself included before\n\n# win32_platform.h.  We define them here until a saner solution can be found\n\n# NOTE: MinGW-w64 and Visual C++ do /not/ need this hack.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Detect and select backend APIs\n\n#--------------------------------------------------------------------\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Find and add Unix math and time libraries\n\n#--------------------------------------------------------------------\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Win32 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use WGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use X11 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Check for XRandR (modern resolution switching and gamma control)\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Check for Xinerama (legacy multi-monitor support)\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Check for XInput (high-resolution cursor motion)\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Backwards compatibility (bug in CMake 2.8.7)\n",
        "Line" : 293,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Check for Xf86VidMode (fallback gamma control)\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Backwards compatibility (see CMake bug 0006976)\n",
        "Line" : 308,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Check for Xkb (X keyboard extension)\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Check for Xcursor\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Wayland for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Mir for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use GLX for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use EGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Cocoa for window creation and NSOpenGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Export GLFW library dependencies\n\n#--------------------------------------------------------------------\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Choose library output name\n\n#--------------------------------------------------------------------\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# On Unix-like systems, shared libraries can use the soname system.\n",
        "Line" : 470,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Create generated files\n\n#--------------------------------------------------------------------\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add subdirectories\n\n#--------------------------------------------------------------------\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Install files other than the library\n\n# The library is installed by src/CMakeLists.txt\n\n#--------------------------------------------------------------------\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Only generate this target if no higher-level project already has\n",
        "Line" : 541,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 34
    },
    "deps/glfw/docs/CMakeLists.txt" : {
      "ObjectId" : "45a6162e83e91ce41065a176375d4fa9225f0bfd",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "deps/glfw/examples/CMakeLists.txt" : {
      "ObjectId" : "16a25b0fdc26cb20c8edf2313c6f724703a286f0",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "deps/glfw/src/CMakeLists.txt" : {
      "ObjectId" : "77a8501f6cc9f197763e43688992d5828ea3709a",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason, CMake doesn't know about .m\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# The GLFW DLL needs a special compile-time macro and import library name\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Append -fno-common to the compile flags to work around a bug in\n\n# Apple's GCC\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "deps/glfw/tests/CMakeLists.txt" : {
      "ObjectId" : "bfc67d83d1c6bfaaedd54dbbe55d6db9a4087456",
      "LastModified" : "2016-01-31T22:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 17
  },
  "ElapsedTime" : 1387
}