{
  "Repository" : "17577369",
  "Revision" : "HEAD",
  "ObjectId" : "2cf0c0e4420c8b87795300aeb71a729451d4f4c9",
  "CommitTime" : "2018-07-14T14:14:50Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b94a26bcc813662a8b51900864f3913735ae8acc",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The root CMakeLists.txt\n\n# All cmake files were initially generated by am2cmake with lots of manual edits.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This root file specifies project-wide settings and compiler settings,\n\n# which were placed in root Makefile.am and Makefile.generic in original ShoreMT.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# generate clang compilation database\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if you don't want the full compiler output, remove the following line\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find pthread library\n",
        "Line" : 44,
        "CharPositionInLine" : 31
      },
      "5" : {
        "Text" : "# libprofiler x86_64 has some issue on libunwind.\n\n# it's so ugly and hard to fix. Just give up using libprofiler on some platform.\n\n# http://code.google.com/p/google-perftools/issues/detail?id=66&can=1&q=libunwind\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# google-perftools / google-perftools-devel\n",
        "Line" : 49,
        "CharPositionInLine" : 30
      },
      "7" : {
        "Text" : "# Optionally, also use tcmalloc if there is.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# google-perftools-devel\n",
        "Line" : 54,
        "CharPositionInLine" : 25
      },
      "9" : {
        "Text" : "# Disabled tcmalloc because the memory acquired by tcmalloc is somehow slower to access.\n\n# SET (LINK_GOOGLEPROFILER \"${LINK_GOOGLEPROFILER} -ltcmalloc\")\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# MUTrace profiles user-mode mutex locks\n\n# SET(ENABLE_MUTRACE_PROFILER 'ON')\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# numa library\n",
        "Line" : 68,
        "CharPositionInLine" : 19
      },
      "12" : {
        "Text" : "# we use CTest all over the project. run \"make test\" after cmake\n",
        "Line" : 70,
        "CharPositionInLine" : 17
      },
      "13" : {
        "Text" : "# compiler options. ported from Makefile.generic of original ShoreMT.\n\n# W_DEBUG_LEVEL enables various check logics and asserts. higher is more verbose.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Below is better for performance analysis; above is better for debugging\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Release build with most aggressive optimization\n\n## (leave debug symbols since they don't affect performance at all=\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## _REENTRANT and _POSIX_PTHREAD_SEMANTICS are needed on Solaris to ensure\n\n# that the posix-compliant clib interfaces are there (e.g., ctime_r)\n\n# (Actually, you're supposed to get them both with _POSIX_C_SOURCE > 199506L\n\n# but I'm not that trusting.)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# -pedantic requires -Wno-long-long\n\n#\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# NO_INLINE_FLAGS =  -fno-inline\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## enabled by config option (default)\n\n## Now try to find out the compiler arguments needed\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TUNE_FLAGS = -mtune=generic\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Assembler flags\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## end of compiler options\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# define a bunch of environment specific macros.\n\n# this replaces the old autoconf/autoheader stuffs\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########   header files and symbols #####################\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "####################   std functions #####################\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "################   non-std functions #####################\n\n# these need CHECK_SYMBOL_EXISTS or CHECK_PROTOTYPE_EXISTS, not CHECK_FUNCTION_EXISTS\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "################   OS-dependent sizes       ###################\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# so far hard-coded.\n",
        "Line" : 182,
        "CharPositionInLine" : 24
      },
      "29" : {
        "Text" : "####################   parameters #####################\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# so far hard-coded...\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Page size in bytes. Has to be powers of 2. 1kb-256kb\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# # of bits used for dreadlock.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# # of bits used as identity.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "####################   OS/architecture #####################\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# so far, always assume 64 bits\n",
        "Line" : 201,
        "CharPositionInLine" : 24
      },
      "36" : {
        "Text" : "# maybe additional check needed. but now they are almost synonyms\n",
        "Line" : 214,
        "CharPositionInLine" : 21
      },
      "37" : {
        "Text" : "# then finally call CONFIGURE_FILE to generate shore-config-env.h\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# configuration options passed as preprocessor flags\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# main source codes\n",
        "Line" : 232,
        "CharPositionInLine" : 22
      },
      "40" : {
        "Text" : "# to be eliminated\n",
        "Line" : 233,
        "CharPositionInLine" : 25
      },
      "41" : {
        "Text" : "# google-test library\n",
        "Line" : 234,
        "CharPositionInLine" : 30
      },
      "42" : {
        "Text" : "# unit testcases\n",
        "Line" : 235,
        "CharPositionInLine" : 24
      },
      "43" : {
        "Text" : "# not needed so far, and causes a warning\n\n# add_library(shore)\n\n# target_link_libraries(shore fc sthread common sm)\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# \"make lint\" will run google-cpplint\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# ALL # Enable this line if we want to enforce lint for every compilation.. not so far.\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# So far minimal rules only\n",
        "Line" : 260,
        "CharPositionInLine" : 59
      },
      "CommentCount" : 48
    },
    "cmake/Modules/CheckPrototypeExists.cmake" : {
      "ObjectId" : "d4791c4d4f055f58c6cbbb24a9644ec39f05479f",
      "LastModified" : "2012-02-23T18:38:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the prototype for a function exists.\n\n# CHECK_PROTOTYPE_EXISTS (FUNCTION HEADER VARIABLE)\n\n#\n\n#  FUNCTION - the name of the function you are looking for\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Source: KDE/kdelibs\n\n# <http://websvn.kde.org/trunk/KDE/kdelibs/cmake/modules/CheckPrototypeExists.cmake?pathrev=776742>\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindBerkeleyDB.cmake" : {
      "ObjectId" : "db44e5d0d6af3876c0fe3aa898dcbfd077c132e2",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from https://github.com/hawkinsp/ZTopo/ then modified.\n\n# This module is distributed with BSD license.\n\n#\n\n# - Try to find Berkeley DB\n\n# Once done this will define\n\n#\n\n#  BERKELEY_DB_FOUND - system has Berkeley DB\n\n#  BERKELEY_DB_INCLUDE_DIR - the Berkeley DB include directory\n\n#  BERKELEY_DB_LIBRARIES_C - Link these to use Berkeley DB for C\n\n#  BERKELEY_DB_LIBRARIES_CXX - Link these to use Berkeley DB for C++\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Dymo, <adymo@kdevelop.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# older Linux distro puts it directly under here.\n",
        "Line" : 18,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "# newer Linux distro puts it here.\n",
        "Line" : 21,
        "CharPositionInLine" : 22
      },
      "4" : {
        "Text" : "# retrieve version information from the header\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# C version and C++ versions are quite different.\n\n# If you get \"underfined reference\" linker errors,\n\n# check if you use the right one.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindGooglePerftools.cmake" : {
      "ObjectId" : "7ddd5a532e90e24b39f3a655794ebadec0b30d3c",
      "LastModified" : "2012-02-23T18:38:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GooglePerftools headers and libraries\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(GooglePerftools)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  GooglePerftools_ROOT_DIR  Set this variable to the root installation of\n\n#                            GooglePerftools if the module has problems finding \n\n#                            the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  GOOGLEPERFTOOLS_FOUND              System has GooglePerftools libs/headers\n\n#  GooglePerftools_LIBRARIES          The GooglePerftools libraries\n\n#  GooglePerftools_INCLUDE_DIR        The location of GooglePerftools headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindNuma.cmake" : {
      "ObjectId" : "95d773c85f8ce33203e38fc15024e6080d3e9763",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the numa policy library.\n\n# Output variables:\n\n#  NUMA_INCLUDE_DIR : e.g., /usr/include/.\n\n#  NUMA_LIBRARY     : Library path of numa library\n\n#  NUMA_FOUND       : True if found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindTcmalloc.cmake" : {
      "ObjectId" : "b552af52dd036e227e8b1c738cec0c9934e02a13",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the google tcmalloc library.\n\n# Output variables:\n\n#  TCMALLOC_INCLUDE_DIR : e.g., /usr/include/.\n\n#  TCMALLOC_LIBRARY     : Library path of tcmalloc.\n\n#  TCMALLOC_FOUND       : True if found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/TestBigEndian.cmake" : {
      "ObjectId" : "9960602105b8340b01aefb194e0b30e2df35abc0",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Define macro to determine endian type\n\n# Check if the system is big endian or little endian\n\n#  TEST_BIG_ENDIAN(VARIABLE)\n\n#  VARIABLE - variable to store the result to\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2002-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# on mac, if there are universal binaries built both will be true\n\n# return the result depending on the machine on which cmake runs\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "config/CMakeLists.txt" : {
      "ObjectId" : "2acc668962ad46922258bb4f8ecb23cf9381d021",
      "LastModified" : "2014-11-04T21:52:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "config/shore-config-env.h.cmake" : {
      "ObjectId" : "4cc5daa0d89a43a349d44c581a8a33049dad01f5",
      "LastModified" : "2015-09-18T11:19:13Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/****************** headers and symbols. *********************/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Defined if the system has the type `char_t'. */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Defined if the system has the type `long_t'. */",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Defined if the system has the type `short_t'. */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Defined if the system has the type `uchar_t'. */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Defined if the system has the type `ulong_t'. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Defined if the system has the type `ushort_t'. */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Defined if you have the <atomic.h> header file. */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Defined if you have the <sys/mman.h> header file. */",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Defined if sys/mman.h has `MAP_ALIGN'. */",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Defined if sys/mman.h has `MAP_ANON'. */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Defined if sys/mman.h has `MAP_ANONYMOUS'. */",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Defined if sys/mman.h has `MAP_FIXED'. */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Defined if sys/mman.h has `MAP_NORESERVE'. */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Defined if you have the <dirent.h> header file. */",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Defined if you have the <fcntl.h> header file. */",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Defined if you have the <inttypes.h> header file. */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Defined if you have the <memory.h> header file. */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Defined if you have the <ndir.h> header file, and it defines `DIR'. */",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Defined if you have the <netdb.h> header file. */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Defined if you have the <netinet/in.h> header file. */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Defined if you have the <semaphore.h> header file. */",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Defined if you have the <stdint.h> header file. */",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Defined if you have the <stdlib.h> header file. */",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Defined if you have the <sys/ioctl.h> header file. */",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Defined if you have the <sys/param.h> header file. */",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Defined if you have the <sys/stat.h> header file. */",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Defined if you have the <sys/types.h> header file. */",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Defined if you have the <valgrind.h> header file. */",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Defined if you have the <valgrind/valgrind.h> header file. */",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Defined if you have the <google/profiler.h> header file. */",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Defined if you have the <numa.h> header file. */",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/****************** std functions. *****************************/",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Defined if you have the `vprintf' function. */",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Defined if you have the `getopt' function. */",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Defined if you have the `memalign' function. */",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Defined if you have the `membar_enter' function. */",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Defined if you have the `memcntl' function. */",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Defined if you have the `posix_memalign' function. */",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Defined if you have the `posix_spawn' function. */",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Defined if you have the `valloc' function. */",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Defined if you have the `strerror' function. */",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/****************** non-std functions. ************************/",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* Defined if you have the `clock_gettime' function in time.h or sys/time.h. */",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* Defined if you have the `gethrtime' function in time.h or sys/time.h. */",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Defined if you have the `gettimeofday' function in time.h or sys/time.h. */",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Defined if you have the pthread_attr_getstack function in pthread.h. */",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Defined if you have the pthread_attr_getstacksize function in pthread.h. */",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Defined if you have the `getpagesizes' function in sys/mman.h. */",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/****************** OS-dependent sizes ************************/\n/* The size of `pthread_t', as computed by sizeof. */",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* huge page size in kb. */",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/****************** parameters. *****************************/\n/*for in-memory str streams*/",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* configured page size */",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* # of bits used for dreadlock. */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* # of bits used as identity. */",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* enable-pthread-mutex ? */",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* maintain parent pointer among control blocks */",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/****************** OS/architecture. **************************/",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* 64 bits? */",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* operating system */",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* operating system */",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* operating system */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* architecture */",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* architecture */",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* architecture */",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n   significant byte first (like Motorola and SPARC, unlike Intel). */",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 66
    },
    "gtest-1.7.0/CMakeLists.txt" : {
      "ObjectId" : "57470c84f3af0772c411bbb8bbbb41b515747ecd",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "gtest-1.7.0/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "gtest-1.7.0/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "gtest-1.7.0/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "gtest-1.7.0/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2014-02-14T21:08:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e8d232289330d87ff934809213c9d18263ae70af",
      "LastModified" : "2016-03-15T09:51:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to look for generated headers\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cmd/CMakeLists.txt" : {
      "ObjectId" : "ccf06d6e3c9c6e6b6ccb68955823f219dd29568d",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to look for generated headers\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# zapps components\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Zero/Shore libraries\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# third-party dependencies\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "src/cmd/base/CMakeLists.txt" : {
      "ObjectId" : "5e028887db7be5cce0ce260e074d37c5e12f098c",
      "LastModified" : "2016-04-07T12:50:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmd/kits/CMakeLists.txt" : {
      "ObjectId" : "0afc941a785329ea5d0f1dbc2edc3e2170a7ec3e",
      "LastModified" : "2018-07-10T10:11:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# BASIC TABLE INFRASTRUCTURE\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# KITS SM INTERFACE\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# UTILITIES\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# YCSB\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# TPC-B\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# TPC-C\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# KITS ZAPPS INTERFACE\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# copy shore.conf file to /src/\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/cmd/loginspect/CMakeLists.txt" : {
      "ObjectId" : "ec7530f4e752c598d70dae22fd754940bb00d87a",
      "LastModified" : "2017-06-11T15:37:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmd/restore/CMakeLists.txt" : {
      "ObjectId" : "fd427d65bb3981c5b22711c35e5269d7cd35c267",
      "LastModified" : "2016-03-15T09:51:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cmd/webserver/CMakeLists.txt" : {
      "ObjectId" : "a4badf741bc552b5cc2e734d5d9a353f2903e6bd",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to look for generated headers\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# zapps components\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Zero/Shore libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# third-party dependencies\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "src/common/CMakeLists.txt" : {
      "ObjectId" : "766fbeada621ada4fe192c6c7638805d1c90d409",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# unifiy all mem mgmt code (2 below too)\n",
        "Line" : 6,
        "CharPositionInLine" : 46
      },
      "1" : {
        "Text" : "# cleanup and remove if possible (lots of std numeric stuff)\n",
        "Line" : 9,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : "# remove all uses and throw away\n",
        "Line" : 10,
        "CharPositionInLine" : 42
      },
      "3" : {
        "Text" : "# cleanup (at least macros) and leave only memory manager stuff\n",
        "Line" : 11,
        "CharPositionInLine" : 38
      },
      "4" : {
        "Text" : "# cleanup unused parts; move used parts elsewhere\n",
        "Line" : 12,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : "# unify with FL's new lsn_t\n",
        "Line" : 13,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 6
    },
    "src/sm/CMakeLists.txt" : {
      "ObjectId" : "cba9dc602ef013c918872a0e3d01040e9957e37b",
      "LastModified" : "2018-07-10T10:11:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate a library that performs swizzling but no pin_cnt increments/decrements\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make sure we don't override any previous value of COMPILE_DEFINITIONS\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# generate a library that simulates no swizzling\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make sure we don't override any previous value of COMPILE_DEFINITIONS\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# generate a library that simulates an in-memory DB\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# make sure we don't override any previous value of COMPILE_DEFINITIONS\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "25fcf8921cd0d7124b49db49b84e46045fea51e3",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# global include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to look for generated headers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# strip out unused data/function. this also removes -rdynamic\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "tests/common/CMakeLists.txt" : {
      "ObjectId" : "4280028aaf52999d4c88262c2565e92eee39417d",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FIXME fails on ubuntu 12 due to limitations of gtest with expected crashes in MT environment\n",
        "Line" : 22,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 1
    },
    "tests/sm/CMakeLists.txt" : {
      "ObjectId" : "1e10e589aca65d13f500c8b2dcd2ec64d14b5fc4",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#################################################\n\n# To add alternate configurations to be tested,\n\n# edit both ../testutil.cmake and also btree_test_env.h\n\n#################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#X_ADD_TESTCASE(test_fix_with_Q btree_test_env)   # should fail for now until have QSX latch integrated\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Serial and traditional recovery test suite\n\n# Serial and traditional recovery test suite\n\n# normally disabled so the code does not get compiled or executed during functional test run\n",
        "Line" : 29,
        "CharPositionInLine" : 64
      },
      "3" : {
        "Text" : "# CS TODO: log archiver test gets on infinite loop\n\n# X_ADD_TESTCASE(test_logarchiver logfactory)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# moved from common\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/testutil.cmake" : {
      "ObjectId" : "6d8d97c64558e68bb4839d051c35e8ff57fc71e9",
      "LastModified" : "2017-05-09T06:56:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake function to help build testcases.\n\n# Include this file from the CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To specify alternate configuration definitions \n\n# (such as defined in sm/btree_test_env.h)\n\n# add to the ALTERNATE_TEST_CONFIGS variable below.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set(ALTERNATE_TEST_CONFIGS DEFAULT_SWIZZLING_OFF)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To pick up these xml files from Jenkins,\n\n# Set \"**/test-reports/*.xml\" as the report file filter.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMake function to add compile target, linking, ADD_TEST directives.\n\n# If ALTERNATE_TEST_CONFIGS configurations are defined, then add each alternate\n\n# configuration (${f}) to the testname and to COMPILE_DEFINITIONS\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 23,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1286
}