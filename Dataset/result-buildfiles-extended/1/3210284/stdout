{
  "Repository" : "3210284",
  "Revision" : "HEAD",
  "ObjectId" : "b1f70836f4d7529260cacd88c1ca8ee0974047d2",
  "CommitTime" : "2018-07-20T19:39:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "bb75c93522bc79535c518103ed08b5eb19c8d36b",
      "LastModified" : "2018-07-20T19:39:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Retrieve the current git sha1, for use in the configured version.cpp.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Macro to copy a file or folder to the directory where binaries are built to.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Options for native builds.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Visual Studio projects have multiple build configurations in one generated project file...\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#---------------------------------------------\n\n# Library\n\n#---------------------------------------------\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Headers are not needed to build, but are included so they show up in IDE.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we're building for HTML we just throw everything into one project later, otherwise we use a shared library for this.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Build TinyXML from source files in the tinyxml folder.\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# All TinyXML sources that we care about (i.e. that aren't tests) start with \"tiny\"...\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Locate the prebuilt version of TinyXML. (Can be very fussy on Windows.)\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Both interfaces use the textures folder, so copy it if either one is enabled.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# The SDL gamepad support works with both interfaces from the same source code,\n\n# but it doesn't go in the library because that doesn't require SDL.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#---------------------------------------------\n\n# Emscripten Interface\n\n#---------------------------------------------\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Already set, but Qt Creator doesn't know about it.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Still needs SDL for gamepad support.\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Included for IDE support.\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# All these files that the JS interface needs...\n\n# TODO - Find a way to make them copy again any time they change.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# This file doesn't work with the macro because the TARGET_FILE value isn't available until the build step.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#---------------------------------------------\n\n# SDL Interface\n\n#---------------------------------------------\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# GLEW is required on Windows.\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Elsewhere including glcorearb.h usually works, but we leave the possibility of using GLEW open.\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# For IDE usage.\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# For the resource system and IDE usage.\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Use that resource generation script to generate res.hpp and res.cpp.\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# For Windows icon and version information.\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# MSVC needs to link to SDL's main wrapper.\n",
        "Line" : 177,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#---------------------------------------------\n\n# Qt Interface\n\n#---------------------------------------------\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Find all the source files. Again, headers are included to show up in IDE.\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# For Windows icon and version information.\n",
        "Line" : 227,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# Use Qt's tools to generate resource and UI code.\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Link to the SDL gamepad code and enable it.\n",
        "Line" : 245,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 31
    },
    "cmake/CreateResources.cmake" : {
      "ObjectId" : "de9617159931604518370d92a7588b4ae514f142",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Places resource files into a .cpp and .hpp file. (stolen from stackoverflow with some tweaks)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create output files.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Iterate through input files\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Get short filename\n",
        "Line" : 17,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Replace filename spaces & extension separator for C compatibility\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Read text data from file\n",
        "Line" : 21,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Append data to output file\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Iterate through input files\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Get short filename\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Replace filename spaces & extension separator for C compatibility\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Read hex data from file\n",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Convert hex data for C compatibility\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Append data to output file\n",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 13
    },
    "cmake/FindGLM.cmake" : {
      "ObjectId" : "887807dfe772fe7025eb6751f8e0bd46c763fce3",
      "LastModified" : "2015-10-11T19:57:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindGLM - attempts to locate the glm matrix/vector library.\r\n\n#\r\n\n# This module defines the following variables (on success):\r\n\n#   GLM_INCLUDE_DIRS  - where to find glm/glm.hpp\r\n\n#   GLM_FOUND         - if the library was successfully located\r\n\n#\r\n\n# It is trying a few standard installation locations, but can be customized\r\n\n# with the following variables:\r\n\n#   GLM_ROOT_DIR      - root directory of a glm installation\r\n\n#                       Headers are expected to be found in either:\r\n\n#                       <GLM_ROOT_DIR>/glm/glm.hpp           OR\r\n\n#                       <GLM_ROOT_DIR>/include/glm/glm.hpp\r\n\n#                       This variable can either be a cmake or environment\r\n\n#                       variable. Note however that changing the value\r\n\n#                       of the environment varible will NOT result in\r\n\n#                       re-running the header search and therefore NOT\r\n\n#                       adjust the variables set by this module.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2012 Carsten Neumann\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# default search dirs\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check environment variable\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put user specified location at beginning of search\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate header\r\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindNFD.cmake" : {
      "ObjectId" : "ad92553237e6163e9fc67b3be6f5a13b759f6f3b",
      "LastModified" : "2017-05-11T02:09:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find NFD\n\n# Find the NativeFileDialog includes and library\n\n#\n\n#   NFD_FOUND       - True if NFD found.\n\n#   NFD_INCLUDE_DIR - where to find NFD.h, etc.\n\n#   NFD_LIBRARIES   - List of libraries when using NFD.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NFD_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "087f35aaf31a6b3e943ec737f36897d7c3d4b92a",
      "LastModified" : "2017-05-11T02:09:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 82,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 83,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 84,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "cmake/FindSDL2_image.cmake" : {
      "ObjectId" : "0cc9e07cdd1a6b00f234cf9b3c832701bcdb96dc",
      "LastModified" : "2017-05-11T02:09:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# this module look for SDL2_image (http://www.libsdl.org) support\n\n# it will define the following values\n\n#\n\n# SDL2_IMAGE_INCLUDE_DIR  = where SDL_image.h can be found\n\n# SDL2_IMAGE_LIBRARY      = the library to link against SDL2_image\n\n# SDL2_IMAGE_FOUND        = set to 1 if SDL2_image is found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindTinyXML.cmake" : {
      "ObjectId" : "67a502c66027bd6d335211c113455501cba46683",
      "LastModified" : "2017-05-11T02:09:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find TinyXML\n\n# Find the native TinyXML includes and library\n\n#\n\n#   TINYXML_FOUND       - True if TinyXML found.\n\n#   TINYXML_INCLUDE_DIR - where to find tinyxml.h, etc.\n\n#   TINYXML_LIBRARIES   - List of libraries when using TinyXML.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TINYXML_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "b06207530662c9a216aa2f953cb1b8f55d70d44c",
      "LastModified" : "2017-05-11T02:09:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 921
}