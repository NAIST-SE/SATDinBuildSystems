{
  "Repository" : "45548097",
  "Revision" : "HEAD",
  "ObjectId" : "2fe69afadf719bea0a50087ba0e77401021adb67",
  "CommitTime" : "2019-04-14T20:57:08Z",
  "Files" : {
    "BBBSetup/pru-icss-5.1.0/Makefile" : {
      "ObjectId" : "8ba62f41275bb084e5560506a93252a57a64c19d",
      "LastModified" : "2018-07-30T03:14:09Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "BBBSetup/pru-icss-5.1.0/lib/src/Makefile" : {
      "ObjectId" : "a98bd54884fbb6a7e483397bd2b565c2e015ab3c",
      "LastModified" : "2018-07-30T03:14:09Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "BBBSetup/pru-icss-5.1.0/lib/src/rpmsg_lib/Makefile" : {
      "ObjectId" : "9161be02bb9022bc74b08aced03e16ca7415ff94",
      "LastModified" : "2018-07-30T03:14:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# PRU_CGT environment variable must point to the TI PRU code gen tools directory. E.g.:\n\n#(Desktop Linux) export PRU_CGT=/path/to/pru/code/gen/tools/ti-cgt-pru_2.1.2\n\n#(Windows) set PRU_CGT=C:/path/to/pru/code/gen/tools/ti-cgt-pru_2.1.2\n\n#(ARM Linux*) export PRU_CGT=/usr/share/ti/cgt-pru\n\n#\n\n# *ARM Linux also needs to create a symbolic link to the /usr/bin/ directory in\n\n# order to use the same Makefile\n\n#(ARM Linux) ln -s /usr/bin/ /usr/share/ti/cgt-pru/bin\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Common compiler flags (Defined in 'PRU Optimizing C/C++ Compiler User's Guide)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Using .object instead of .obj in order to not conflict with the CCS build process\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Invokes the archiver to make the .lib file\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Invokes the compiler on all c files in the directory to create the object files\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove the $(GEN_DIR) directory\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Includes the dependencies that the compiler creates (-ppd and -ppa flags)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "CentralComputing/Makefile" : {
      "ObjectId" : "b7da4d34cfb66302f7229f49c2b6b6812c99defd",
      "LastModified" : "2019-04-04T04:15:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Set up source file list and obj list\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up path to test library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up compiler\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Set up linker\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-static-libgcc -static-libstdc++ \n",
        "Line" : 27,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "# The 'static' flags might be necessary if the cross compiler and BBB have different versions of the libgcc and libstdc++ libraries. \n\n# This is why these flags were intially included, but now the BBBs are running newer software such that these are no longer needed.\n\n# However, the 'static' flags will likely not work with any of the Sanitizers\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define all executables\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Compile libgtest\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "####\n\n# All Build Rules are similar, except for different names and slightly different paths. \n\n# Instead of having just two rules (as I did before), this new system - while more complicated\n\n# - will allow all executables to be built at the same time, without any `make clean`s.\n\n####\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#####\n\n# build\n\n#####\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#####\n\n# build-debug\n\n#####\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#####\n\n# build-test\n\n#####\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#####\n\n# cross\n\n#####\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#####\n\n# cross-debug\n\n#####\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#####\n\n# cross-test\n\n#####\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 869
}