{
  "Repository" : "5442848",
  "Revision" : "HEAD",
  "ObjectId" : "39d2f21b7cd78fc3353562902feb3e7e74ac3e06",
  "CommitTime" : "2019-04-17T13:49:56Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "eda7bbcb15805f9a5bf474d010e4fdc2e8ba8a36",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n#\n\n# CMake configuration file for the Chrono Project\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Check backward compatibility\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Prevent in-source builds.\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Be sure to avoid troubles with library paths when using old policy\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get rid of cmake RPATH warning on OSX\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Disable solution folders because not supported in VC Express\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Define project name and specify version information\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Version as a hexadecimal integer of the form 0x00MMmmPP\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Location of additional CMake scripts\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Enable CTest\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Use dependent options\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Also, some variables that were used in previous makefile system (some\n\n# of them could be set automatically because CMake should recognize automatically\n\n# the compiler, generator, platform, etc....\n\n# Set a default build type if none was specified\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Specify locations of executables and libraries\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#set(CPACK_CMAKE_GENERATOR \"Unix Makefiles\")\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#set(CPACK_INSTALL_CMAKE_PROJECTS \"${PROJECT_BINARY_DIR};ChronoEngine;ALL;/\")\n\n#set(CPACK_NSIS_DISPLAY_NAME \"ChronoEngine\")\n\n#set(CPACK_PACKAGE_DESCRIPTION_FILE \"/home/andy/vtk/CMake/Copyright.txt\")\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#set(CPACK_PACKAGE_EXECUTABLES \"ccmake;CMake\")\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#set(CPACK_RESOURCE_FILE_WELCOME \"/home/andy/vtk/CMake/Templates/CPack.GenericWelcome.txt\")\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#set(CPACK_SOURCE_PACKAGE_FILE_NAME \"ChronoEngine\")\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#set(CPACK_STRIP_FILES \"bin/ccmake;bin/cmake;bin/cpack;bin/ctest\")\n\n#set(CPACK_TOPLEVEL_TAG \"Linux-x64\")\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#------------------------------------------------------------\n\n# Install destinations for data and demo programs\n\n#------------------------------------------------------------\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#------------------------------------------------------------\n\n# Copy data directory to BUILD tree \n\n# Install data directory \n\n# Install sample template_project\n\n#------------------------------------------------------------\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#------------------------------------------------------------\n\n# Defer configuration of all Chrono libraries and programs\n\n#------------------------------------------------------------\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#------------------------------------------------------------\n\n# Use CPack\n\n#------------------------------------------------------------\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "685ceab2ec9c989d3cc4a9f383785f56b6216149",
      "LastModified" : "2015-08-20T18:27:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CTEST_PROJECT_NAME \"chrono\")\n\n#set(CTEST_NIGHTLY_START_TIME \"00:00:00 EST\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(CTEST_DROP_METHOD \"http\")\n\n#set(CTEST_DROP_SITE \"my.cdash.org\")\n\n#set(CTEST_DROP_LOCATION \"/submit.php?project=chrono\")\n\n#set(CTEST_DROP_SITE_CDASH TRUE)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/CheckOpenMPVersion.cmake" : {
      "ObjectId" : "b068b8cef2d7070a0f0826854b41c576a3e34333",
      "LastModified" : "2016-07-11T11:34:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script checks for the highest level of OpenMP support on the host\n\n# by compiling small C++ programs that use various features.\n\n#\n\n# TODO: needs more work. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set compiler flag to generate instructions for the host architecture.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assume at least 2.0 support\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for OpenMP 3.0 support.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check for OpenMP 4.0 support.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindAVX.cmake" : {
      "ObjectId" : "20fc9de0e782f8d9de07c6ad479f28d11966a4e4",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script checks for the highest level of AVX support on the host\n\n# by compiling and running small C++ programs that use AVX intrinsics.\n\n#\n\n# You can invoke this module using the following command:\n\n#\n\n#   FIND_PACKAGE(AVX [major[.minor]] [EXACT] [QUIET|REQUIRED])\n\n#\n\n# where the version string is one of:\n\n#\n\n#   1.0 for AVX support\n\n#   2.0 for AVX2 support\n\n#\n\n# Note that any \".0\" in the above version string is optional.\n\n#\n\n# If any AVX support is detected, the following variables are set:\n\n#\n\n#   AVX_FOUND   = 1\n\n#   AVX_VERSION = the requested version, if EXACT is true, or\n\n#                 the highest AVX version found.\n\n#   AVX_FLAGS = compile flags for the version of AVX found\n\n# \n\n# If AVX is not supported on the host platform, these variables are\n\n# not set. If QUIET is true, the module does not print a message if\n\n# AVX if missing. If REQUIRED is true, the module produces a fatal\n\n# error if AVX support is missing.\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a list of AVX versions to test.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for AVX2 support.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for AVX support.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-------------------------------------\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If no AVX support is found, print an error message.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindBLAS.cmake" : {
      "ObjectId" : "835baddbc62fef712a936df0bd5baaff28c6313b",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindBLAS\n\n# --------\n\n#\n\n# Find BLAS library\n\n#\n\n# This module finds an installed fortran library that implements the\n\n# BLAS linear-algebra interface (see http://www.netlib.org/blas/).  The\n\n# list of libraries searched for is taken from the autoconf macro file,\n\n# acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#\n\n# ::\n\n#\n\n#   BLAS_FOUND - set to true if a library implementing the BLAS interface\n\n#     is found\n\n#   BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\n\n#     and -L).\n\n#   BLAS_LIBRARIES - uncached list of libraries (using full path name) to\n\n#     link against to use BLAS\n\n#   BLAS95_LIBRARIES - uncached list of libraries (using full path name)\n\n#     to link against to use BLAS95 interface\n\n#   BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\n\n#     is found\n\n#   BLA_STATIC  if set on this determines what kind of linkage we do (static)\n\n#   BLA_VENDOR  if set checks only the specified vendor, if not set checks\n\n#      all the possibilities\n\n#   BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\n\n#\n\n# ######### ## List of vendors (BLA_VENDOR) valid in this module #\n\n# Goto,OpenBLAS,ATLAS PhiPACK,CXML,DXML,SunPerf,SCSL,SGIMATH,IBMESSL,\n\n# Intel10_32 (intel mkl v10 32 bit),Intel10_64lp (intel mkl v10 64 bit,\n\n# lp thread model, lp64 model), # Intel10_64lp_seq (intel mkl v10 64\n\n# bit,sequential code, lp64 model), # Intel( older versions of mkl 32\n\n# and 64 bit), ACML,ACML_MP,ACML_GPU,Apple, NAS, Generic C/CXX should be\n\n# enabled to use Intel mkl\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include(CMakePushCheckState.cmake)\n\n# cmake_push_check_state()\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check the language being used\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# MESSAGE(STATUS \"${_prefix}_${_library}_LIBRARY is ${${_prefix}_${_library}_LIBRARY}\")\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# gotoblas (http://www.tacc.utexas.edu/tacc-projects/gotoblas2)\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# OpenBLAS (http://www.openblas.net)\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# OpenBLAS (http://www.openblas.net)\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# BLAS in Alpha CXML library?\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# BLAS in Sun Performance library?\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# BLAS in SGIMATH library?\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# BLAS in IBM ESSL library? (requires generic BLAS lib, too)\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#BLAS in acml library?\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# try to find acml in \"standard\" paths\n",
        "Line" : 312,
        "CharPositionInLine" : 3
      },
      "24" : {
        "Text" : "# 32 bit builds not supported on Open64 but for code simplicity\n\n# We'll just use the same directory twice\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Either acml or acml_mp should be in LD_LIBRARY_PATH but not both\n",
        "Line" : 410,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# ACML\n",
        "Line" : 441,
        "CharPositionInLine" : 9
      },
      "27" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 507,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 518,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# old version\n",
        "Line" : 525,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 528,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 533,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# old version\n",
        "Line" : 546,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 550,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\n",
        "Line" : 574,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Add threading/sequential libs\n",
        "Line" : 585,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# old version\n",
        "Line" : 588,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 591,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Cartesian product of the above\n",
        "Line" : 600,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# old version\n",
        "Line" : 614,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# mkl >= 10.3\n",
        "Line" : 618,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "#older vesions of intel mkl libs\n",
        "Line" : 632,
        "CharPositionInLine" : 6
      },
      "45" : {
        "Text" : "# cmake_pop_check_state()\n",
        "Line" : 711,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46
    },
    "cmake/FindCudaArch.cmake" : {
      "ObjectId" : "0e43f43b4449d09093dcc291bbf508c8f600a82e",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Automatic detection of installed GPUs.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Borrowed from caffe\n\n# https://github.com/BVLC/caffe/blob/master/cmake/Cuda.cmake\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Known NVIDIA GPU achitectures Chrono can be compiled for.\n\n# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Removes duplicates from LIST(s)\n\n# Usage:\n\n#   LIST_UNIQUE(<list_variable> [<list_variable>] [...])\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (IF autodetection is enabled)\n\n# Usage:\n\n#   DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# RADU: fix for nvcc on Windows (output includes compilation messages)\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Catch any pre-CUDA 8.0 GPUs and replace the target SM with a newer one\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA_ARCH_NAME\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# List of arch names\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# SET CUDA_ARCH_NAME strings (so it will be seen as dropbox in CMake-Gui)\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# verify CUDA_ARCH_NAME value\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# IF(${CUDA_ARCH_NAME} STREQUAL \"Fermi\")\n\n#   SET(__cuda_arch_bin \"2.0 2.1(2.0)\")\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# (${CUDA_ARCH_NAME} STREQUAL \"Manual\")\n",
        "Line" : 120,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# User explicitly specIFied PTX for the concrete BIN\n",
        "Line" : 139,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 143,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "cmake/FindFMA.cmake" : {
      "ObjectId" : "634afa23311366808ef3be2e8ecbfb9a37efa24c",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script checks for the highest level of FMA support on the host\n\n# by compiling and running small C++ programs that uses FMA intrinsics.\n\n#\n\n# You can invoke this module using the following command:\n\n#\n\n#   FIND_PACKAGE(FMA [QUIET|REQUIRED])\n\n#\n\n# If any  FMA support is detected, the following variables are set:\n\n#\n\n#   FMA_FOUND   = 1\n\n#   FMA_FLAGS = compile flags for the version of FMA found\n\n# \n\n# If  FMA is not supported on the host platform, these variables are\n\n# not set. If QUIET is true, the module does not print a message if\n\n#  FMA if missing. If REQUIRED is true, the module produces a fatal\n\n# error if  FMA support is missing.\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a list of FMA versions to test.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for FMA support.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If no FMA support is found, print an error message.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindGLEW.cmake" : {
      "ObjectId" : "0e9c7d763b00170e233fa6ac22f1f24c367272e1",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find GLEW library and include path.\n\n# Once done this will define\n\n#\n\n# GLEW_FOUND\n\n# GLEW_INCLUDE_DIR\n\n# GLEW_LIBRARY\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindGLFW.cmake" : {
      "ObjectId" : "a092a1be984722d704b5bf329517d5e83796e4e9",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the glfw library\n\n# This module defines the following variables:\n\n# GLFW_LIBRARY, the name of the library;\n\n# GLFW_INCLUDE_DIR, where to find glfw include files.\n\n# GLFW_FOUND, true if both the GLFW_LIBRARY and GLFW_INCLUDE_DIR have been found.\n\n#\n\n# To help locate the library and include file, you could define an environment variable called\n\n# GLFW_ROOT which points to the root of the glfw library installation. This is pretty useful\n\n# on a Windows platform.\n\n#\n\n#\n\n# Usage example to compile an \"executable\" target to the glfw library:\n\n#\n\n# FIND_PACKAGE (glfw REQUIRED)\n\n# INCLUDE_DIRECTORIES (${GLFW_INCLUDE_DIR})\n\n# ADD_EXECUTABLE (executable ${EXECUTABLE_SRCS})\n\n# TARGET_LINK_LIBRARIES (executable ${GLFW_LIBRARY})\n\n#\n\n# TODO:\n\n# Allow the user to select to link to a shared library or to a static library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Search for the include file...\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#For finding the include file under the root of the glfw expanded archive, typically on Windows.\n",
        "Line" : 26,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# By default headers are under GL subfolder\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# added by ptr\n",
        "Line" : 35,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "#For finding the library file under the root of the glfw expanded archive, typically on Windows.\n",
        "Line" : 43,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "# added by ptr\n",
        "Line" : 47,
        "CharPositionInLine" : 39
      },
      "CommentCount" : 7
    },
    "cmake/FindGLM.cmake" : {
      "ObjectId" : "2d9009298ff0e5906a0e075d08790c860476e129",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindGLM - attempts to locate the glm matrix/vector library.\n\n#\n\n# This module defines the following variables (on success):\n\n#   GLM_INCLUDE_DIRS  - where to find glm/glm.hpp\n\n#   GLM_FOUND         - if the library was successfully located\n\n#\n\n# It is trying a few standard installation locations, but can be customized\n\n# with the following variables:\n\n#   GLM_ROOT_DIR      - root directory of a glm installation\n\n#                       Headers are expected to be found in either:\n\n#                       <GLM_ROOT_DIR>/glm/glm.hpp           OR\n\n#                       <GLM_ROOT_DIR>/include/glm/glm.hpp\n\n#                       This variable can either be a cmake or environment\n\n#                       variable. Note however that changing the value\n\n#                       of the environment varible will NOT result in\n\n#                       re-running the header search and therefore NOT\n\n#                       adjust the variables set by this module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Carsten Neumann\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# default search dirs\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check environment variable\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put user specified location at beginning of search\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate header\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindMKL.cmake" : {
      "ObjectId" : "fe5e89fc9c566f6183fd0effe10176074ebed947",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake script to detect Intel(R) Math Kernel Library (MKL)\n\n#\n\n# This will try to find Intel MKL libraries, and include path by automatic\n\n# search through typical install locations and if failed it will\n\n# examine MKLROOT environment variable.\n\n# Note, MKLROOT is not set by IPP installer, it should be set manually.\n\n#\n\n# Usage example:\n\n#   set(MKL_USE_STATIC_LIBS ON)\n\n#   find_package(MKL)\n\n#   if (MKL_FOUND)\n\n#      include_directories(${MKL_INCLUDE_DIRS})\n\n#      link_directories(${MKL_LIBRARY_DIRS})\n\n#      add_executable(foo foo.cc)\n\n#      target_link_libraries(foo ${MKL_LIBRARIES})\n\n#   endif()\n\n#\n\n# Variables used by this module, they can change the default behaviour and\n\n# need to be set before calling find_package:\n\n#\n\n#   MKL_ADDITIONAL_VERSIONS      A list of version numbers to use for searching\n\n#                                the MKL include directory.\n\n#\n\n#   MKL_USE_STATIC_LIBS          Can be set to ON to force the use of the static\n\n#                                boost libraries. Defaults to OFF.\n\n#\n\n#   MKL_FIND_DEBUG               Set this to TRUE to enable debugging output\n\n#                                of FindMKL.cmake if you are having problems.\n\n#\n\n# On return this will define:\n\n#   MKL_FOUND                   Indicates whether MKL was found (True/False)\n\n#   MKL_INCLUDE_DIRS            MKL include folder\n\n#   MKL_LIBRARY_DIRS            MKL libraries folder\n\n#   MKL_LIBRARIES               MKL libraries names\n\n#\n\n# NOTE: this script has only been tested with Intel(R) Parallel Studio XE 2011\n\n# and may need changes for compatibility with older versions.\n\n#\n\n# Adapted from OpenCV IPP detection script\n\n#   https://code.ros.org/trac/opencv/browser/trunk/opencv/OpenCVFindIPP.cmake\n\n# Many portions taken from FindBoost.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The user must:\n\n# - have the the runtime libraries directory in PATH:\n\n# (from Parallel Studio XE 2016) <install_parent_folder>/IntelSWTools/compilers_and_libraries/<OS>/redist/<ARCH>/mkl\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Versions should be listed is decreasing order of preference\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# alternative form: \"2011.xxx.y\"\n\n# (y is the release-update number and xxx is the package number)\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# no other 'years' should be added since the install directory is not influenced by that after 2015\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Use environment variables from Intel build scripts, if available\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find MKL include directory\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add the default install location to the search path\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# default until ParallelStudioXE2015\n",
        "Line" : 108,
        "CharPositionInLine" : 72
      },
      "9" : {
        "Text" : "# default for ParallelStudioXE2016 and later\n",
        "Line" : 109,
        "CharPositionInLine" : 99
      },
      "10" : {
        "Text" : "# default until ParallelStudioXE2015 (root permissions)\n",
        "Line" : 112,
        "CharPositionInLine" : 77
      },
      "11" : {
        "Text" : "# default until ParallelStudioXE2015 (no root permissions)\n",
        "Line" : 113,
        "CharPositionInLine" : 83
      },
      "12" : {
        "Text" : "# default for ParallelStudioXE2016 and later (root permissions)\n",
        "Line" : 115,
        "CharPositionInLine" : 83
      },
      "13" : {
        "Text" : "# default for ParallelStudioXE2016 and later (no root permissions)\n",
        "Line" : 116,
        "CharPositionInLine" : 89
      },
      "14" : {
        "Text" : "# Find MKL include directory\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Find MKL library directory\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find MKL libraries\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Find OpenMP, pthread and math libraries\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# we could instead fallback to default library (via FindOpenMP.cmake)\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "####list(APPEND MKL_LIBRARIES ${IOMP5_LIBRARY})\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#######################################\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Optimized math library (optional)\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# linked by default with Intel compiler\n",
        "Line" : 272,
        "CharPositionInLine" : 20
      },
      "23" : {
        "Text" : "# assumes (/MD) otherwise libmmt.lib (for /MT)\n",
        "Line" : 275,
        "CharPositionInLine" : 40
      },
      "24" : {
        "Text" : "# we could instead fallback to default library (via FindOpenMP.cmake)\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "####list(APPEND MKL_LIBRARIES ${MATH_LIBRARY})\n",
        "Line" : 292,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Check all required libraries are available\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "cmake/FindModernCXX.cmake" : {
      "ObjectId" : "e2f3fbdb24a44cb481ca1992baefd5f40941f4be",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindModernCXX\n\n# -------------\n\n#\n\n# This module determines the versions of C++ supported by the compiler.\n\n#\n\n# The following variables are set\n\n#\n\n# ::\n\n#\n\n#   CMAKE_CXX11_STANDARD_COMPILE_OPTION    - compiler option for C++11\n\n#   CMAKE_CXX11_EXTENSION_COMPILE_OPTION   - compiler option for C++11 w/extensions\n\n#   CMAKE_CXX14_STANDARD_COMPILE_OPTION    - compiler option for C++14\n\n#   CMAKE_CXX14_EXTENSION_COMPILE_OPTION   - compiler option for C++14 w/extensions\n\n#   CMAKE_CXX17_STANDARD_COMPILE_OPTION    - compiler option for C++17\n\n#   CMAKE_CXX17_EXTENSION_COMPILE_OPTION   - compiler option for C++17 w/extensions\n\n#\n\n# Note: These variables are set by default in CMake >= 3.1.0.\n\n#\n\n# TODO: Generalize to support C11, make more DRY.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hack: these should only be set to empty if the compiler does not require a\n\n# specific flag.\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/FindMumps.cmake" : {
      "ObjectId" : "b59e96ffd2c08781981ca5fdc8fc9c7b6929d60c",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##########################\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################# Mumps library itself #####################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################# MPI library #####################\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: have they to be included?\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "################# Ordering library #####################\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: have they to be included?\n\n# find_path(MUMPS_ORDERINGS_INCLUDE_DIRS\n",
        "Line" : 99,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# protos.h\n\n# PATHS ${MUMPS_ROOT}\n\n# PATH_SUFFIXES \"PORD/include\" \"PORD\" \"include\"\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# )\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# SET(MUMPS_ORDERINGS_LIBRARIES \"\" CACHE PATH \"Path to ordering library\" FORCE)\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "################# Clean up #####################\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################# Exported variables #####################\t\t\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/FindMyGUI.cmake" : {
      "ObjectId" : "b5563c8014b76b96d30652a200fde2d2bd2099d6",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MyGUI includes and library\n\n#\n\n# This module defines\n\n# MYGUI_INCLUDE_DIRS\n\n# MYGUI_LIBRARIES, the libraries to link against to use MYGUI.\n\n# MYGUI_LIB_DIR, the location of the libraries\n\n# MYGUI_FOUND, If false, do not try to use MYGUI\n\n#\n\n# Copyright © 2007, Matt Williams\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# IF (MYGUI_LIBRARIES AND MYGUI_INCLUDE_DIRS)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(MYGUI_FIND_QUIETLY TRUE)\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# ENDIF (MYGUI_LIBRARIES AND MYGUI_INCLUDE_DIRS)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Windows\n",
        "Line" : 20,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#findpkg_finish ( \"MYGUI\" )\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#Unix\n",
        "Line" : 82,
        "CharPositionInLine" : 13
      },
      "7" : {
        "Text" : "# don't use pkgconfig on OS X, find freetype & append it's libs to resulting MYGUI_LIBRARIES\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#Do some preparation\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This does not work on Windows for paths with spaces in them\n",
        "Line" : 131,
        "CharPositionInLine" : 15
      },
      "10" : {
        "Text" : "# we need explicit freetype libs only on OS X for static build, for other cases just make it TRUE\n",
        "Line" : 144,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 11
    },
    "cmake/FindNEON.cmake" : {
      "ObjectId" : "e48f808792d480b3abb78bdc28697218ca479030",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script checks for the highest level of NEON support on the host\n\n# by compiling and running small C++ programs that uses NEON intrinsics.\n\n#\n\n# You can invoke this module using the following command:\n\n#\n\n#   FIND_PACKAGE(NEON)\n\n#\n\n# If any NEON support is detected, the following variables are set:\n\n#\n\n#   NEON_FOUND   = 1\n\n#   NEON_VERSION = 2_0 (assumes Advanced SIMD 2.0)\n\n#   NEON_FLAGS = compile flags for the version of NEON found\n\n# \n\n# If NEON is not supported on the host platform, these variables are\n\n# not set.\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_REQUIRED_INCLUDES arm_neon.h)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for NEON support.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setting -ffloat-store to alleviate 32bit vs 64bit discrepancies on non-SIMD platforms.\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "cmake/FindOgre.cmake" : {
      "ObjectId" : "9e2081a0c2bccea01c46382256fce0657ded05da",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find OGRE\n\n# If you have multiple versions of Ogre installed, use the CMake or\n\n# the environment variable OGRE_HOME to point to the path where the\n\n# desired Ogre version can be found.\n\n# By default this script will look for a dynamic Ogre build. If you\n\n# need to link against static Ogre libraries, set the CMake variable\n\n# OGRE_STATIC to TRUE.\n\n#\n\n# Once done, this will define\n\n#\n\n#  OGRE_FOUND - system has OGRE\n\n#  OGRE_INCLUDE_DIRS - the OGRE include directories \n\n#  OGRE_LIBRARIES - link these to use the OGRE core\n\n#  OGRE_BINARY_REL - location of the main Ogre binary (win32 non-static only, release)\n\n#  OGRE_BINARY_DBG - location of the main Ogre binaries (win32 non-static only, debug)\n\n#\n\n# Additionally this script searches for the following optional\n\n# parts of the Ogre package:\n\n#  Plugin_BSPSceneManager, Plugin_CgProgramManager,\n\n#  Plugin_OctreeSceneManager, Plugin_OctreeZone,\n\n#  Plugin_ParticleFX, Plugin_PCZSceneManager,\n\n#  RenderSystem_GL, RenderSystem_GL3Plus,\n\n#  RenderSystem_GLES, RenderSystem_GLES2,\n\n#  RenderSystem_Direct3D9, RenderSystem_Direct3D11\n\n#  Paging, Terrain, Volume, Overlay\n\n#\n\n# For each of these components, the following variables are defined:\n\n#\n\n#  OGRE_${COMPONENT}_FOUND - ${COMPONENT} is available\n\n#  OGRE_${COMPONENT}_INCLUDE_DIRS - additional include directories for ${COMPONENT}\n\n#  OGRE_${COMPONENT}_LIBRARIES - link these to use ${COMPONENT} \n\n#  OGRE_${COMPONENT}_BINARY_REL - location of the component binary (win32 non-static only, release)\n\n#  OGRE_${COMPONENT}_BINARY_DBG - location of the component binary (win32 non-static only, debug)\n\n#\n\n# Finally, the following variables are defined:\n\n#\n\n#  OGRE_PLUGIN_DIR_REL - The directory where the release versions of\n\n#       the OGRE plugins are located\n\n#  OGRE_PLUGIN_DIR_DBG - The directory where the debug versions of\n\n#       the OGRE plugins are located\n\n#  OGRE_MEDIA_DIR - The directory where the OGRE sample media is\n\n#       located, if available\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine whether to search for a dynamic or static build\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# construct search paths from environmental hints and\n\n# OS specific guesses\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If both OGRE_BUILD and OGRE_SOURCE are set, prepare to find Ogre in a build dir\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# redo search if any of the environmental hints changed\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try to locate Ogre via pkg-config\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Set the framework search path for OS X\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# locate Ogre include files\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# determine Ogre version\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# determine configuration settings\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# If working from source rather than SDK, add samples include\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# look for required Ogre dependencies in case of static build and/or threading\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# find binaries\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#########################################################\n\n# Find Ogre components\n\n#########################################################\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find binaries\n",
        "Line" : 401,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# look for Paging component\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# look for Terrain component\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# look for Property component\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# look for RTShaderSystem component\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# look for Volume component\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# look for Overlay component\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#########################################################\n\n# Find Ogre plugins\n\n#########################################################        \n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# On Unix, the plugins might have no prefix\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# strip RenderSystem_ or Plugin_ prefix from plugin name\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# header files for plugins are not usually needed, but find them anyway if they are present\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# find link libraries for plugins\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# look for plugin dirs\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# find binaries\n",
        "Line" : 493,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# check if dependencies for plugins are met\n",
        "Line" : 523,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# look for the media directory\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "cmake/FindPkgMacros.cmake" : {
      "ObjectId" : "53111e074ab345fea81ad29cf0bf8aedbf76fa62",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################\n\n# Provides some common functionality for the FindPackage modules\n\n##################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Begin processing of package\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Display a status message unless FIND_QUIETLY is set\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# replace won't work if var is blank\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Construct search paths for includes and libraries from a PREFIX_PATH\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# clear cache variables if a certain variable changed\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test against internal check variable\n\n# HACK: Apparently, adding a variable to the cache cleans up the list\n\n# a bit. We need to also remove any empty strings from the list, but\n\n# at the same time ensure that we are actually dealing with a list.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try to get some hints from pkg-config, if available\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Couple a set of release AND debug libraries (or frameworks)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate debug names from given release names\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the parent dir from DIR to VAR \n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Do the final processing for the package find.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# skip if already processed during this run\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Slightly customised framework finder\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# These could be arrays of paths, add each individually to the search paths\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "4b8f7e915f506bb7315f004bba8689aed79f7662",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 73,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 74,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 75,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "cmake/FindSSE.cmake" : {
      "ObjectId" : "970e00f6ef959d7bfd6abb9cd9a61bed911a9b43",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script checks for the highest level of SSE support on the host\n\n# by compiling and running small C++ programs that uses SSE intrinsics.\n\n#\n\n# You can invoke this module using the following command:\n\n#\n\n#   FIND_PACKAGE(SSE [major[.minor]] [EXACT] [QUIET|REQUIRED])\n\n#\n\n# where the version string is one of:\n\n#\n\n#   1.0 for SSE support\n\n#   2.0 for SSE2 support\n\n#   3.0 for SSE3 support\n\n#   3.1 for SSSE3 support\n\n#   4.1 for SSE 4.1 support\n\n#   4.2 for SSE 4.2 support\n\n#\n\n# Note that any \".0\" in the above version string is optional.\n\n#\n\n# If any SSE support is detected, the following variables are set:\n\n#\n\n#   SSE_FOUND   = 1\n\n#   SSE_VERSION = the requested version, if EXACT is true, or\n\n#                 the highest SSE version found.\n\n#   SSE_FLAGS = compile flags for the version of SSE found\n\n# \n\n# If SSE is not supported on the host platform, these variables are\n\n# not set. If QUIET is true, the module does not print a message if\n\n# SSE if missing. If REQUIRED is true, the module produces a fatal\n\n# error if SSE support is missing.\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a list of SSE versions to test.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for SSE 4.2 support.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for SSE 4.1 support.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check for SSE 3 support.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check for SSE2 support.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check for SSE support.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Setting -ffloat-store to alleviate 32bit vs 64bit discrepancies on non-SSE platforms.\n",
        "Line" : 255,
        "CharPositionInLine" : 5
      },
      "8" : {
        "Text" : "#-------------------------------------\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If no SSE support is found, print an error message.\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindTBB.cmake" : {
      "ObjectId" : "58f256af94c5c447cd5eef9eeeb223d5b7887c98",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\n\n#   Florian Uhlig <F.Uhlig _at_ gsi.de>,\n\n#   Jiri Marsik <jiri.marsik89 _at_ gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# Copyright (c) 2011 Hannes Hofmann\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\n# THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\n\n#   e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\n\n#   TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\n\n#   in the TBB installation directory (TBB_INSTALL_DIR).\n\n#\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\n\n#\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\n\n#   which architecture to use\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\n\n#   which compiler to use (detected automatically on Windows)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\n\n# TBB_INSTALL_DIR, the base TBB install directory\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\n\n# TBB_FOUND, If false, don't try to use TBB.\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# MAC\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\n\n# Jiri: There is no reason to presume there is only one flavor and\n\n#       that user's setting of variables should be ignored.\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# LINUX\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5 em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\n\n# has ia32/*\n\n# has itanium/*\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# SUN\n\n# not yet supported\n\n# has em64t/cc3.4.3_kernel5.10\n\n# has ia32/*\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- Clear the public variables\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\n\n# first: use CMake variable TBB_INSTALL_DIR\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# second: use environment variable\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# third: try to find path automatically\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# sanity check\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\n\n#   find_library() always found the em64t/vc9 version of the TBB libs\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#    if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#    endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\n\n#       containing the headers.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-- Look for libraries\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\n\n#       (hence no else), instead I test if the user really specified\n\n#       the variables in question.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# HH: deprecated\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\n\n#       ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\n\n#       variables and search them both.\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\n\n#       tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\n\n#       variables, which now point to the directories of the lib files.\n\n#       It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\n\n#       argument instead of the implicit PATHS as it isn't hard-coded\n\n#       but computed by system introspection. Searching the LIBRARY_PATH\n\n#       and LD_LIBRARY_PATH environment variables is now even more important\n\n#       that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\n\n#       the use of TBB built from sources.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#Extract path from TBB_LIBRARY name\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#-- Look for debug libraries\n\n# Jiri: Changed the same way as for the release libraries.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n\n#       Extract path from TBB_LIBRARY_DEBUG name\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\n",
        "Line" : 260,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "#message(\"ERROR: Intel TBB NOT found!\")\n\n#message(STATUS \"Looked for Threading Building Blocks in ${_TBB_INSTALL_DIR}\")\n\n# do only throw fatal, if this pkg is REQUIRED\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 38
    },
    "cmake/FindThrust.cmake" : {
      "ObjectId" : "d1fb58f371ff5cd5f189f44be08c910b8ec62fed",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##=============================================================================\n\n##\n\n##  Copyright (c) Kitware, Inc.\n\n##  All rights reserved.\n\n##  See LICENSE.txt for details.\n\n##\n\n##  This software is distributed WITHOUT ANY WARRANTY; without even\n\n##  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n\n##  PURPOSE.  See the above copyright notice for more information.\n\n##\n\n##  Copyright 2012 Sandia Corporation.\n\n##  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,\n\n##  the U.S. Government retains certain rights in this software.\n\n##\n\n##=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# FindThrust\n\n#\n\n# This module finds the Thrust header files and extrats their version.  It\n\n# sets the following variables.\n\n#\n\n# THRUST_INCLUDE_DIR -  Include directory for thrust header files.  (All header\n\n#                       files will actually be in the thrust subdirectory.)\n\n# THRUST_VERSION -      Version of thrust in the form \"major.minor.patch\".\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find thrust version\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for required components\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "319f307a9b614919c8fd205b25ea7da9eb98e769",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file license-boost-1.0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/PreprocessorUtils.cmake" : {
      "ObjectId" : "38462a98d42c08688901712076b543757043094e",
      "LastModified" : "2019-01-22T06:06:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is part of the CMake build system for OGRE\n\n#     (Object-oriented Graphics Rendering Engine)\n\n# For the latest info, see http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/opencrg-support/CMakeLists.txt" : {
      "ObjectId" : "b8b4d85ea4680479900193709394980b1d7b93d5",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/Makefile" : {
      "ObjectId" : "e39ebd1fef2cb7090507ac75f6f12a8cfaa0f0ec",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "70086c134322584ff08d06fb8f024e9f132fc107",
      "LastModified" : "2019-03-07T11:19:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n#\n\n# CMake configuration file for all Chrono libraries, demos, and tests.\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Optionally enable building the various programs\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Collect compiler flags required to build the Chrono libraries\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Enable C++11 support.  Check for C++14 support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CH_CXX_FLAGS \"${CH_CXX_FLAGS} ${CMAKE_CXX11_STANDARD_COMPILE_OPTION}\")\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is a hack -- look for a more robust solution\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cmake/FindModernCXX.cmake behaves strangely with PGI compilers, don't trust it\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Threads and OpenMP support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We always look for OpenMP (which is required for the PARALLEL module).\n\n# However, we allow the user to optionally disable OpenMP support in the\n\n# main ChronoEngine library, regardless on whether or not OpenMP is found.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Determine OpenMP version. Prepare substitution variables that can be used in\n\n# generating configuration header files.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Provide an option (dependent on OPENMP_FOUND) for the user to disable OpenMP\n\n# support in the Chrono libraries (note that some modules may override this).\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# As an alternative, if TBB is located the Parallel module will use it for all thrust calls\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# SSE and AVX support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Figure out SIMD level support\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Set substitution variables for configuration file\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Figure out AVX level support\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Set substitution variables for configuration file\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Figure out FMA level support\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set substitution variables for configuration file\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add SSE, AVX, and FMA flags to Chrono compiler flags\n\n# Note that these flags are already added to CMake compiler flags\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# NEON support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Check if the system has NEON support\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Set substitution variables for configuration file.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Add NEON flags to Chrono compiler flags\n\n# Note that these flags are already added to CMake compiler flags\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MPI support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# CUDA support\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Identify the CUDA architecture\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# avoids deprecation warnings\n\n# avoids deprecation warnings\n",
        "Line" : 288,
        "CharPositionInLine" : 57
      },
      "29" : {
        "Text" : "# do not use MSVC's min/max macros\n",
        "Line" : 290,
        "CharPositionInLine" : 40
      },
      "30" : {
        "Text" : "# perform parallel builds\n",
        "Line" : 291,
        "CharPositionInLine" : 33
      },
      "31" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# HDF5 support (optional)\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# First look for a FindHDF5.cmake module\n\n# If found, this will define the following relevant variables:\n\n#    HDF5_INCLUDE_DIRS\n\n#    HDF5_C_LIBRARIES\n\n#    HDF5_CXX_LIBRARIES\n",
        "Line" : 317,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Look for a package configuration file\n\n# LIB_TYPE can be one of STATIC or SHARED.\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# STATIC or SHARED\n",
        "Line" : 327,
        "CharPositionInLine" : 29
      },
      "35" : {
        "Text" : "# If using shared libraries on Windows, MUST define H5_BUILT_AS_DYNAMIC_LIB to have\n\n# the symbols imported from the DLL.  Note also that the path to the HDF5 DLLs must\n\n# be in the search path (or else copied in the working directory).\n",
        "Line" : 344,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Set the base compilation flags\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# For Bullet to use 32 bit math\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#OPTION(USE_BULLET_DOUBLE \"Compile Bullet in double precision\" ON)\n\n#if (USE_BULLET_DOUBLE)\n\n#   add_definitions(\"-DBT_USE_DOUBLE_PRECISION\")\n\n#endif()\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Set the base include directories\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#------------------------------------------------------------\n\n# Build submodules\n\n#------------------------------------------------------------\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Build google test and google mock (targets: gtest_main, gtest, gmock_main, gmock).\n\n# Disable installation of googletest.\n\n# Force using shared libraries.\n",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Hide some Google test-related variables\n",
        "Line" : 401,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Build google benchmark (target: benchmark).\n\n# Disable installation of benchmark.\n\n# Do not build tests of benchmarking lib.\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Hide some Google benchmark-related variables\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#------------------------------------------------------------\n\n# Propagate the CMake build to other directories\n\n#------------------------------------------------------------\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Add directory for main ChronoEngine library \n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Let all modules have access to the headers of the main library\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Add directories to build various optional modules.  Each module is supposed\n\n# to provide an option for enabling that particular module.\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#add_subdirectory(chrono_ogre)\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Add directories for model libraries\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Add directories for demo programs, unit test programs, and benchmark test programs.\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#------------------------------------------------------------\n\n# Install headers from chrono_thirdparty folder\n\n#------------------------------------------------------------\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#------------------------------------------------------------\n\n# Generate and install the Chrono configuration header\n\n#------------------------------------------------------------\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Prepare substitution variables for the modules that were enabled\n\n# TODO: the following tests should be more precise (we should test\n\n#       that a particular module was successfully built, not just\n\n#       enabled)\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Generate and install the versioning header file \n\n#-----------------------------------------------------------------------------\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#------------------------------------------------------------\n\n# Create the Chrono CMake project configuration file\n\n#------------------------------------------------------------\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# For the BUILD tree\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# For the INSTALL tree\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 59
    },
    "src/chrono/CMakeLists.txt" : {
      "ObjectId" : "3ba4ce22accbf622beef97856e2257154dbf812a",
      "LastModified" : "2019-03-07T15:16:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n#\n\n# CMake configuration file for the main ChronoEngine library.\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Double precision support for Bullet\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Includes for the main library\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make CH_INCLUDES visible in parent scope\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Collect files in the main ChronoEngine library\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Core group\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Serialization group\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Physics group\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# FEA group\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Geometry group\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Asset group\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#assets/ChGenericRender.h\n",
        "Line" : 559,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Collision group\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Edgetempest group\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Particle factory group\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Timestepper group\n",
        "Line" : 660,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Motion functions group\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Parallel support group\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Solver group\n",
        "Line" : 764,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Bullet collision group\n",
        "Line" : 844,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Gimpact group\n",
        "Line" : 944,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Convex decomposition JR group\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# HACD group\n",
        "Line" : 1008,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# HACDv2 group\n",
        "Line" : 1023,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Utility group\n",
        "Line" : 1047,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# TinyObj Group\n",
        "Line" : 1087,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Collect all source and header files for the ChronoEngine library\n",
        "Line" : 1097,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Add the ChronoEngine library to the project\n",
        "Line" : 1139,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Set some custom properties of this target\n",
        "Line" : 1146,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Install the main ChronoEngine library\n",
        "Line" : 1163,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Install all header files for the main ChronoEngine library\n",
        "Line" : 1169,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "src/chrono_cascade/CMakeLists.txt" : {
      "ObjectId" : "b86eae4606a79054c7436571e8ef8ae648ac8e46",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the Chrono OpenCASCADE module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# LIST THE FILES THAT MAKE THE OpenCASCADE LIBRARY\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\t\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_definitions( -DHAVE_LIMITS_H -DHAVE_IOSTREAM )\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Let some variables be visible also from outside this directory, using the PARENT_SCOPE trick\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------\t\n\n# Add the ChronoEngine_cascade library\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/chrono_cosimulation/CMakeLists.txt" : {
      "ObjectId" : "c002ec1121ba88deff138ceb080075ec5d9b3e19",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for chrono cosimulation module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n#\n\n# LIST THE FILES THAT MAKE THE COSIMULATION LIBRARY\n\n# NOTE: to add a new source to this unit, just add its name\n\n# here and re-run the CMake.\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add the 'socket' library to the linking, but this depends on the \n\n# different platforms. CMake does not have an automatic script to \n\n# detect the library, so do this here:\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# btw not Ws2_64.lib that does not exist\n",
        "Line" : 51,
        "CharPositionInLine" : 35
      },
      "5" : {
        "Text" : "# not needed?\n",
        "Line" : 53,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "# not needed?\n",
        "Line" : 55,
        "CharPositionInLine" : 26
      },
      "7" : {
        "Text" : "# not needed?\n",
        "Line" : 58,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : "# not needed?\n",
        "Line" : 60,
        "CharPositionInLine" : 27
      },
      "9" : {
        "Text" : "#-----------------------------------------------------------------------------\t\n\n# In most cases, you do not need to edit the lines below.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The COSIMULATION library is added to the project,\n\n# and some custom properties of this target are set.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/chrono_distributed/CMakeLists.txt" : {
      "ObjectId" : "0c6794865cfbf5c68a95a291a8f2bdb1fbc48dc7",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===============================================================================\n\n# CMake configuration file for the ChronoEngine_distributed library\n\n#\n\n# Invoked from the main CMakeLists.txt using ADD_SUBDIRECTORY()\n\n#===============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Return now if MPI is not available\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Return now if Chrono::Parallel is not enabled\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Additional dependencies, specific to this module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Generate and install configuration header file.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate the configuration header file using substitution variables.\n\n# Place the header file in the library output directory and make sure it can\n\n# be found at compile time.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Compiler and linker flags specific to this module.\n\n# Additional include directories for this module.\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Make some variables visible from parent directory\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# List the files in the Chrono distributed module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Add the ChronoEngine_distributed library\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/chrono_fsi/CMakeLists.txt" : {
      "ObjectId" : "7e48e612bd4cf1feae3d673ee2f0f7a1d0189817",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for Chrono FSI module\n\n#\n\n# Cannot be used stand-alone (it is loaded by parent CMake configuration file)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#mark_as_advanced(FORCE USE_FSI_DOUBLE)\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Return now if CUDA is not available\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#mark_as_advanced(FORCE USE_FSI_DOUBLE)\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#mark_as_advanced(CLEAR USE_FSI_DOUBLE)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Additional options for this module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#option(USE_FSI_DOUBLE \"Compile Chrono::FSI with double precision math\" ON)\n\n#if(USE_FSI_DOUBLE)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#endif()\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Collect additional include directories necessary for the FSI module.\n\n# Make some variables visible from parent directory\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Generate and install configuration file\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generate the configuration header file using substitution variables.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# LIST THE FILES THAT MAKE THE FSI FLUID-SOLID INTERACTION LIBRARY\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Create the ChronoEngine_fsi library\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/chrono_irrlicht/CMakeLists.txt" : {
      "ObjectId" : "1c60e34f025def606737923344356d6edef909b3",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===============================================================================\n\n# CMake configuration file for the Chrono irrlicht module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#===============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# List all the files in the ChronoEngine_irrlicht library\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Find the IRRLICHT library\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add path to IRRLICHT headers\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Let some variables be visible also from outside this directory\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Create the ChronoEngine_irrlicht library\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# On Windows, copy the IRRLICHT DLL to the bin/ directory\n\n# We do this through a custom command so that the Irrlich DLL is copied to the\n\n# appropriate directory (depending on the build type); however, we use\n\n# copy_if_different.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# copy the Irrlicht dll into the installed package to be on the safe side \n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Make variable visible from outside this directory\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Install the ChronoEngine_irrlicht library\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/chrono_matlab/CMakeLists.txt" : {
      "ObjectId" : "93b609b494b5ba3b49c3690bae7fff3320dc3e01",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for Chrono Matlab module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/chrono_mkl/CMakeLists.txt" : {
      "ObjectId" : "f1d657263a1849bda2f9b1e4a59586251997a983",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the Chrono MKL module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Dependencies for MKL module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(MKL_USE_STATIC_LIBS ON)\n\n#set(MKL_FIND_DEBUG ON)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make required libraries visible from outside current directory\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Set up linking line for Intel OpenMP library\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Collect all additional include directories necessary for the MKL module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# List all files in the Chrono mkl module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Add the ChronoEngine_mkl library\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/chrono_models/CMakeLists.txt" : {
      "ObjectId" : "143afd9820ee3fc5f6279b9480b5e4aad281b797",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/chrono_models/vehicle/CMakeLists.txt" : {
      "ObjectId" : "dad31e646be356d84174427c2be02efc703f17df",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for Chrono Vehicle Models\n\n#\n\n# Cannot be used stand-alone (it is loaded by parent CMake configuration file)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# List the files in the Chrono_vehicle_models library\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Add the Chrono_vehicle_models library\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/chrono_mumps/CMakeLists.txt" : {
      "ObjectId" : "d7211b0a1759ee597f86c3c44f37dadc0ee18349",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the Chrono MUMPS module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Arithmetic configuration\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################# BLAS library ##########################\n\n#BLAS configuration\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#(intel mkl v10 32 bit)\n",
        "Line" : 44,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "#(intel mkl v10 64 bit lp thread model  lp64 model)\n",
        "Line" : 45,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "#(intel mkl v10 64 bit sequential code  lp64 model)\n",
        "Line" : 46,
        "CharPositionInLine" : 29
      },
      "6" : {
        "Text" : "#( older versions of mkl 32 and 64 bit) \n",
        "Line" : 47,
        "CharPositionInLine" : 18
      },
      "7" : {
        "Text" : "# Automatic inclusion of MKL folders\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# default for ParallelStudioXE2016 and later\n",
        "Line" : 64,
        "CharPositionInLine" : 123
      },
      "9" : {
        "Text" : "# default for ParallelStudioXE2016 and later\n",
        "Line" : 65,
        "CharPositionInLine" : 128
      },
      "10" : {
        "Text" : "# default until ParallelStudioXE2015\n",
        "Line" : 67,
        "CharPositionInLine" : 96
      },
      "11" : {
        "Text" : "# default until ParallelStudioXE2015\n",
        "Line" : 68,
        "CharPositionInLine" : 101
      },
      "12" : {
        "Text" : "# default for ParallelStudioXE2016 and later (root permissions)\n",
        "Line" : 70,
        "CharPositionInLine" : 107
      },
      "13" : {
        "Text" : "# default for ParallelStudioXE2016 and later (root permissions)\n",
        "Line" : 71,
        "CharPositionInLine" : 112
      },
      "14" : {
        "Text" : "# default for ParallelStudioXE2016 and later (no root permissions)\n",
        "Line" : 73,
        "CharPositionInLine" : 113
      },
      "15" : {
        "Text" : "# default for ParallelStudioXE2016 and later (no root permissions)\n",
        "Line" : 74,
        "CharPositionInLine" : 118
      },
      "16" : {
        "Text" : "# restore original CMAKE_LIBRARY_PATH\n",
        "Line" : 81,
        "CharPositionInLine" : 50
      },
      "17" : {
        "Text" : "# let the user specifies its own BLAS library\n",
        "Line" : 84,
        "CharPositionInLine" : 72
      },
      "18" : {
        "Text" : "# for Block Low-Rank usage\n",
        "Line" : 93,
        "CharPositionInLine" : 17
      },
      "19" : {
        "Text" : "############# Fortran runtime libraries\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# provided by FindMumps\n",
        "Line" : 109,
        "CharPositionInLine" : 26
      },
      "21" : {
        "Text" : "#aka LIBBLAS; provided by FindBlas\n",
        "Line" : 115,
        "CharPositionInLine" : 25
      },
      "22" : {
        "Text" : "# provided by FindMumps\n",
        "Line" : 121,
        "CharPositionInLine" : 29
      },
      "23" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Collect all additional include directories necessary for the Mumps module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# List all files in the Chrono mumps module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Add the ChronoEngine_mumps library\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Make variable visible from outside this directory\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "src/chrono_ogre/CMakeLists.txt" : {
      "ObjectId" : "f04db48b6945e8953b889e4f6e5f7b64f6285db4",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(Boost_USE_STATIC_LIBS ON)\n\n#SET(Boost_USE_MULTITHREADED ON)\n\n#SET(Boost_USE_STATIC_RUNTIME OFF)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#${Boost_threadlib}\n\n#${Boost_systemlib}\n\n#${Boost_date_timelib}\n\n#${Boost_chronolib}\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "src/chrono_opengl/CMakeLists.txt" : {
      "ObjectId" : "c6ea45e5a87caa93c41df82bc81c8f945e87bfe4",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the Chrono OpenGL module\n\n# Cannot be used stand-alone (it is loaded by parent CMake configuration file)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Hide Chrono::OpenGL specific variables\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Show Chrono::OpenGL specific variables\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Dependencies for OpenGL module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On windows, ask for the GLEW and GLFW DLLs so that we can copy. This is\n\n# optional.  If not specified, it is the user's responsibility to make them\n\n# available at runtime.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If all dependencies are available, enable building OpenGL support.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Unable to find everything, turn off OpenGL\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Collect all include directories necessary for the OpenGL module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Make some variables visible from parent directory\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Add commands to compile shaders\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#All shaders are compiled into strings by embedfile.cpp\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Copy OBJ files to binary directory\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# OBJ files are copied to the resources folder in the binary directory\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# List the files in the Chrono OpenGL module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# On Windows, include necessary Bullet source files.\n",
        "Line" : 247,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Add the ChronoEngine_opengl library\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# On Windows, copy the GLEW and GLFW DLLs (if specified)\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "src/chrono_parallel/CMakeLists.txt" : {
      "ObjectId" : "516ea70fac7d52cd783c1d63ccdb8651e49bd51b",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===============================================================================\n\n# CMake configuration file for the ChronoEngine_Parallel library\n\n#\n\n# Invoked from the main CMakeLists.txt using ADD_SUBDIRECTORY()\n\n#===============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Chrono Parallel will build even if openmp is not found, it just won't have parallel computation support\n\n# If TBB is defined, thrust will use TBB but the rest of the code will be single threaded\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Additional compiler flags\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Additional dependencies, specific to this module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----- CUDA support -----\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----- SIMD (SSE or AVX) support -----\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ----- Double precision support -----\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ----- Thrust library -----\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ----- Blaze library -----\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Extract Blaze version\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ----- Configure Blaze and Thrust -----\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ----- BOOST -- required only for older versions of Blaze -----\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Generate and install configuration header file.\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Generate the configuration header file using substitution variables.\n\n# Place the header file in the library output directory and make sure it can\n\n# be found at compile time.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Collect all additional include directories necessary for the PARALLEL module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Make some variables visible from parent directory\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# List the files in the Chrono parallel module\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#math/matrix.cu\n\n#math/matrixf.cu\n\n#math/matrixf.cuh\n\n#math/real3.cu\n\n#math/real4.cu\n\n#math/vec3.cu\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Windows doesn't automatically pick up Bullet sources from Chrono\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CollisionDispatch\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# CollisionShapes\n",
        "Line" : 344,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# BroadphaseCollision\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# NarrowPhaseCollision\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# gimpact\n",
        "Line" : 409,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# LinearMath\n",
        "Line" : 416,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Add the ChronoEngine_parallel library\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "src/chrono_postprocess/CMakeLists.txt" : {
      "ObjectId" : "459b0963f517877f3650f90219644226f98c776b",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the Chrono postprocess module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# LIST THE FILES THAT MAKE THE POSTPROCESS LIBRARY\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\t\n\n# In most cases, you do not need to edit the lines below.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The POSTPROCESS library is added to the project,\n\n# and some custom properties of this target are set.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/chrono_python/CMakeLists.txt" : {
      "ObjectId" : "3dd433a37495b29b849f255b09efbdb93f8de4b0",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the Chrono Python module\n\n# \n\n# Cannot be used stand-alone (it's loaded by CMake config. file in parent dir.)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Python package name\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Enable debugging CMake output\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Find PYTHON\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Let some variables be visible also from outside this directory, using the PARENT_SCOPE trick\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this to fix warnings about the use of LOCATION with CMake version >= 3.0\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# this to fix warnings about the use of SWIG_MODULE_${mymodulename}_REAL_NAME with CMake version >= 3.13\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Create the ChronoEngine_pyparser library\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# List the files in the Python parser library to be used via C++\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Find SWIG\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The generated .cxx wrapper can be so huge that the /bigobj flag is required in VC++\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set location of SWIG-generated files.\n\n# Note that *.py files are also generated in this location.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MODULE for the core wrapper, including most of the C::E\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Python module name\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Interface files\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create the SWIG module.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Ensure that the PYD library file is generated in the bin/ directory.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Copy PY file in a package dir\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Copy the __init__.py file in the package\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Install .pyd binary module (.so on linux)\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Install .py module wrapper \n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Install __init__.py to signal the directory is a python package\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Install demos\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MODULE for the postprocess python wrapper.\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Python module name\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Interface files\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Create the SWIG module.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Ensure that the PYD library file is generated in the bin/ directory.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Copy PY file in a package dir \n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Install .pyd binary module (.so on linux)\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Install .py module wrapper\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MODULE for the fea python wrapper.\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Python module name\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Interface files\n",
        "Line" : 292,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Create the SWIG module.\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Ensure that the PYD library file is generated in the bin/ directory.\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Copy PY file in a package dir \n",
        "Line" : 320,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Install .pyd binary module (.so on linux)\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Install .py module wrapper\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MODULE for the irrlicht python wrapper.\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Python module name\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Interface files\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Create the SWIG module.\n",
        "Line" : 370,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Ensure that the PYD library file is generated in the bin/ directory.\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Copy PY file in a package dir \n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Install .pyd binary module (.so on linux)\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Install .py module wrapper\n",
        "Line" : 405,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MODULE for the mkl python wrapper.\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Python module name\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Interface files\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Create the SWIG module.\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Ensure that the PYD library file is generated in the bin/ directory.\n",
        "Line" : 450,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Copy PY file in a package dir \n",
        "Line" : 461,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Install .pyd binary module (.so on linux)\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Install .py module wrapper\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MODULE for the cascade python wrapper.\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Python module name\n",
        "Line" : 491,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Interface files\n",
        "Line" : 494,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Create the SWIG module.\n",
        "Line" : 503,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "#if(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n\n#  set_target_properties(${SWIG_MODULE_${CHPY_CASCADE}_REAL_NAME} PROPERTIES SWIG_COMPILE_OPTIONS \"-D_WIN32 -DWNT\")\n\n#endif()\n",
        "Line" : 518,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Ensure that the PYD library file is generated in the bin/ directory.\n",
        "Line" : 522,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Copy PY file in a package dir \n",
        "Line" : 533,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# Install .pyd binary module (.so on linux)\n",
        "Line" : 544,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Install .py module wrapper\n",
        "Line" : 549,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# Display information about setting the PYTHONPATH environment variable\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 66
    },
    "src/chrono_vehicle/CMakeLists.txt" : {
      "ObjectId" : "8a9ea1384358939061edd3442cb2640f40de05ea",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for Chrono Vehicle module\n\n#\n\n# Cannot be used stand-alone (it is loaded by parent CMake configuration file)\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Return now if this module is not enabled\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide option to add OpenCRG support.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If Irrlicht support was enabled, provide option to add Irrklang support.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Find the OpenCRG library\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Find IrrKlang library\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Generate and install configuration file\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Prepare replacement variables\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate the configuration header file using substitution variables.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# List the files in the ChronoEngine_vehicle library\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# --------------- COMMON FILES\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# --------------- WHEELED VEHICLE FILES\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#if(MPI_CXX_FOUND)\n\n#    set(CV_WV_COSIM_FILES\n\n#        wheeled_vehicle/cosim/ChCosimManager.h\n\n#        wheeled_vehicle/cosim/ChCosimManager.cpp\n\n#        wheeled_vehicle/cosim/ChCosimNode.h\n\n#        wheeled_vehicle/cosim/ChCosimVehicleNode.h\n\n#        wheeled_vehicle/cosim/ChCosimVehicleNode.cpp\n\n#        wheeled_vehicle/cosim/ChCosimTireNode.h\n\n#        wheeled_vehicle/cosim/ChCosimTireNode.cpp\n\n#        wheeled_vehicle/cosim/ChCosimTerrainNode.h\n\n#        wheeled_vehicle/cosim/ChCosimTerrainNode.cpp\n\n#    )\n\n#    source_group(\"wheeled_vehicle\\\\cosim\" FILES ${CV_WV_COSIM_FILES})\n\n#else()\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#endif()\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# --------------- TRACKED VEHICLE FILES\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# --------------- THIRD-PARTY FILES\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Add the ChronoEngine_vehicle library\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 692,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n",
        "Line" : 758,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# On Windows, copy DLLs (if specified)\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "src/demos/CMakeLists.txt" : {
      "ObjectId" : "d7d7e99a0c33fdfc322b95ba226f1b4b59ac7669",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Always use full RPATH (differentiating between the build and install trees)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Enable creation of \"application bundles\" on MacOSX.\n\n# This is necessary for Irrlicht-based demos and optional for OpenGL or non-graphics demos.\n\n# For simplicity and consistency, we enable here MACOSX_BUNDLE for all subsequent programs.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#if(ENABLE_MODULE_MPI)\n\n#\tadd_subdirectory(mpi)\n\n#endif()\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/demos/cascade/CMakeLists.txt" : {
      "ObjectId" : "e217d1bb967ec8e0728517e4c64c40730d9e1007",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths and settings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all Cascade demos which also require Irrlicht support\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add demo executables that use Irrlicht\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/demos/core/CMakeLists.txt" : {
      "ObjectId" : "b357e9a2be5f49859c69abfbda44edf9aab0e25a",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/demos/cosimulation/CMakeLists.txt" : {
      "ObjectId" : "b00c02d0ea845dbf4305d11571c7b825e6c6977e",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/demos/distributed/CMakeLists.txt" : {
      "ObjectId" : "a614703969d56657353928a15d70344e5a4d9cb7",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/demos/fea/CMakeLists.txt" : {
      "ObjectId" : "c6b5f41420532a3a5914eb6c2f20ce83ec3b8d77",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all FEA demos that do have no other dependencies\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List all FEA demos that use Irrlicht\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# demo_FEA_beamsIGA\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List all FEA demos that use both Irrlicht and Matlab\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# List all FEA demos that use both Irrlicht and MKL\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# List all FEA demos that use Irrlicht, Matlab, and MKL\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables for demos that have no other dependencies\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables for demos that depend only on MKL\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--------------------------------------------------------------\n\n# For demo executables that use Irrlicht\n\n# (and possibly Matlab and/or MKL)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/demos/fsi/CMakeLists.txt" : {
      "ObjectId" : "7c977ba87ab2906d36b5f2bb35e7dc423fae8e21",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# List of demos according their depencies\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List FSI demos that do not have other dependencies\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/irrlicht/CMakeLists.txt" : {
      "ObjectId" : "b9fb620a04b8b3135218be3a1953379dfce72aa9",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all Irrlicht demos\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add executables\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/demos/matlab/CMakeLists.txt" : {
      "ObjectId" : "e002d297126b37cb32f367fe09e13fbaa0c725e0",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all matlab demos\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables for demos\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/demos/mkl/CMakeLists.txt" : {
      "ObjectId" : "fd1708bce4afc67392ae2e8d33db45b6997d46de",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Additional include paths\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/demos/mpi/CMakeLists.txt" : {
      "ObjectId" : "b11653376781504b1e048ee367d20e16644f1cfa",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/demos/mumps/CMakeLists.txt" : {
      "ObjectId" : "76d9ae568f4d29cef64f05e509db46bce36f3f78",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Additional include paths\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/demos/ogre/CMakeLists.txt" : {
      "ObjectId" : "f596b9e80b4e7d2277e36bd73d9754a28fe0043d",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(demo_gui)\n\n#add_subdirectory(demo_heightmap)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/demos/ogre/demo_ball_plane/CMakeLists.txt" : {
      "ObjectId" : "5d62412fdf46e6189770f960e277265a860bcc3f",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/demos/ogre/demo_brick_collide/CMakeLists.txt" : {
      "ObjectId" : "bd04389f4b5987ec77414f4d6da50caf76670f8c",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/demos/ogre/demo_gui/CMakeLists.txt" : {
      "ObjectId" : "ab7ea07fd419a0bcb5b456aefc7e823b7a773e0a",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/demos/ogre/demo_heightmap/CMakeLists.txt" : {
      "ObjectId" : "c3ad90c9db3dc1efc2b72a7419372dddd07579b0",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/demos/ogre/demo_vehicle/CMakeLists.txt" : {
      "ObjectId" : "0a36b74416aff73cf99c5bc78c63f23d6b88a789",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/demos/ogre/demo_wheel/CMakeLists.txt" : {
      "ObjectId" : "4b3f88fb77834bd47b11d54e7eb81b4befec4d04",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/demos/opengl/CMakeLists.txt" : {
      "ObjectId" : "b094bfb9bb8f22cd7f69864c9964e45c74f22210",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all OpenGL demos\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add executables\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/demos/parallel/CMakeLists.txt" : {
      "ObjectId" : "44a9ab5746d84ffd00dde170a726db0103685ee2",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Additional include paths and libraries\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# List of all executables\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Programs that can work with or without OpenGL\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n# Add all executables\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/postprocess/CMakeLists.txt" : {
      "ObjectId" : "957f27b93b8aa7d8ccc51c26e61f8599ce087c2f",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of demos with no additional dependencies \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# List of demos requiring the Chrono::Irrlicht module\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/pyparser/CMakeLists.txt" : {
      "ObjectId" : "2fde24b61881418f6e0bb02cb73534f3d2def291",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/demos/vehicle/CMakeLists.txt" : {
      "ObjectId" : "21921f7b9cadc4391d12a9539552bde2b931b99a",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# OS-specific settings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/demos/vehicle/demo_ArticulatedVehicle/CMakeLists.txt" : {
      "ObjectId" : "514c0e604aeb1077332389ee7ef21e062a18aa60",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the ARTICULATED_VEHICLE demo.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_CRGTerrain/CMakeLists.txt" : {
      "ObjectId" : "6311509d78d4739dabb6d1d42341d64effafe43f",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the CRGTerrain demos.\n\n# These example programs requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all demos\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executables\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_DeformableSoil/CMakeLists.txt" : {
      "ObjectId" : "37efd3e8fb12d6412a5507e9b9e3d57a5c45a07f",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the DEFORMABLE_SOIL demo.\n\n# This example program works only with Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all required libraries\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executable\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/demos/vehicle/demo_DeformableSoilAndTire/CMakeLists.txt" : {
      "ObjectId" : "6964209f89397c73123fa6faf807a7e456bccaf4",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the DEFORMABLE_SOIL demo.\n\n# This example program works only with Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all required libraries\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(COMPILER_FLAGS \"${COMPILER_FLAGS} ${CH_MKL_CXX_FLAGS}\")\n\n#set(LINKER_FLAGS \"${LINKER_FLAGS} ${CH_MKL_LINK_FLAGS}\")\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executable\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/demos/vehicle/demo_GranularTerrain/CMakeLists.txt" : {
      "ObjectId" : "2687a1d2a57cc43049fb2de494c866d48855bdeb",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the GRANULAR_TERRAIN demo.\n\n# This example program requires Chrono:Parallel and the OpenGL module for\n\n# run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all granular terrain demos\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_HMMWV/CMakeLists.txt" : {
      "ObjectId" : "b83526fc96cdb76d7f781484ef694223b9feff9d",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the HMMWV demos.\n\n# These example programs requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all HMMWV demos\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executables\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_HMMWV9/CMakeLists.txt" : {
      "ObjectId" : "62cb684db6466427d2dd638537455c03248dbbbe",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the HMMWV_9BODY demo.\n\n# This example program requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_HMMWV_Parallel/CMakeLists.txt" : {
      "ObjectId" : "b09a1484946dca9fb80152565f7c5755d302ff15",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==============================================================================\n\n# CMake configuration file for the HMMWV_PARALLEL demo.\n\n# These example programs require Chrono:Parallel and optionally uses the OpenGL\n\n# module for run-time visualization.\n\n#==============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Check dependencies.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# List all model files\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Additional include directories and libraries\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Add executable\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/demos/vehicle/demo_ISO2631/CMakeLists.txt" : {
      "ObjectId" : "97edf65f8873282bfebcaa6725786bc127031616",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the ISO2631 demos.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all ISO2631 demos\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executables\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_M113/CMakeLists.txt" : {
      "ObjectId" : "6f699160234fef000058eeffcb73b31391d78dd4",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the M113 demos.\n\n# These example programs requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Compiler and linker flags\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_M113_Band/CMakeLists.txt" : {
      "ObjectId" : "dbc80a5bbeade109c6ca2198c835aa2be2a0e442",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the M113 with continuous band track demos.\n\n# These example programs requires Irrlicht run-time visualization and the\n\n# MKL or MUMPS Chrono modules.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Irrlicht required\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MUMPS or MKL required\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all demo programs\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    demo_VEH_M113_Band_DefSoil\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n\n# Compiler and linker flags\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/demos/vehicle/demo_M113_Parallel/CMakeLists.txt" : {
      "ObjectId" : "a8d6f5c92e688c33f017ad6ddd3e4955d960e7e7",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the M113_PARALLEL demo.\n\n# This example program requires Chrono:Parallel and the OpenGL module for\n\n# run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Check dependencies.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executable\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/demos/vehicle/demo_Paths/CMakeLists.txt" : {
      "ObjectId" : "2bc18d63de000e5317dc325c915bf0f844cc30ce",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the vehicle path demo.\n\n# Requires Chrono:Postprocess for Gnuplot visualization.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executable\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/demos/vehicle/demo_RigidTerrain/CMakeLists.txt" : {
      "ObjectId" : "fa2dda1bea6da86012f5130357173a8fc2de2c96",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the RigidTerrain demos.\n\n# These example programs requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all HMMWV demos\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executables\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_Sedan/CMakeLists.txt" : {
      "ObjectId" : "a4b6cce18ccdaec4bc8ebc80ec3a1d26930320c2",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the Sedan demos.\n\n# These example programs requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all Sedan demos\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executables\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_SteeringController/CMakeLists.txt" : {
      "ObjectId" : "789aea885818cbc91a4e0b7e019835d54a9cfe65",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the STEERING_CONTROLLER demo.\n\n# This example program works only with Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_SuspensionTest/CMakeLists.txt" : {
      "ObjectId" : "de96eed63d14d1117c5b636a25f58ad0d35b25d9",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the SUSPENSION_TEST_RIG demo.\n\n# This example program works only with Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all required libraries\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executable\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/demos/vehicle/demo_TrackTestRig/CMakeLists.txt" : {
      "ObjectId" : "da359e44dba4bbcaa8dfd81349da97710cab71af",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the SUSPENSION_TEST_RIG demo.\n\n# This example program works only with Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Compiler and linker flags\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executable\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_TrackTestRig_Band/CMakeLists.txt" : {
      "ObjectId" : "0108fa57db59caae733fb212937bb19e34ac64a9",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the test rig with continuous band track demo.\n\n# This example program works only with Irrlicht run-time visualization and \n\n# requires the MKL or MUMPS Chrono modules.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Irrlicht required\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MUMPS or MKL required\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Compiler and linker flags\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/demos/vehicle/demo_TrackedJSON/CMakeLists.txt" : {
      "ObjectId" : "0a14a6d5c28a5059cca6db6443ccfde1303415cb",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the VEHICLE demo - an example program for using\n\n# a tracked vehicle model specified entirely through JSON specification files.\n\n# This example program works with and without Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all required libraries\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/demos/vehicle/demo_TrackedJSON_Band/CMakeLists.txt" : {
      "ObjectId" : "6572f83cc6864a3c4bb900869696a73c0e6eba75",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the VEHICLE demo - example programs for using\n\n# a tracked vehicle model with continuous-band track, specified entirely\n\n# through JSON specification files.\n\n# These example programs requires Irrlicht run-time visualization and the\n\n# MKL or MUMPS Chrono modules.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Irrlicht required\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MUMPS or MKL required\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all demo programs\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Compiler and linker flags\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add executables\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/demos/vehicle/demo_TractorTrailer/CMakeLists.txt" : {
      "ObjectId" : "5c14fdbc70cb2eb7adbfb15e51b88fb3487473c9",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the TRACTOR_TRAILER demo.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_TwoCars/CMakeLists.txt" : {
      "ObjectId" : "352070828023d68d43f06636878d9f2f41472128",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the TwoCars demo.\n\n# This example program requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_UAZ/CMakeLists.txt" : {
      "ObjectId" : "5abb162ad87b028d13d7e49ef46aebca855f9f1e",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the UAZBUS demos.\n\n# These example programs requires Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all UAZBUS demos\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executables\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_WheeledAssembly/CMakeLists.txt" : {
      "ObjectId" : "6d90aed2ac8cc02109607f4e8b7a33e1a8869c07",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the VEHICLE_ASSEMBLY demo.\n\n# This example program requires unit_PARALLEL with OpenGL support.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Check dependencies.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all required libraries\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/demos/vehicle/demo_WheeledGeneric/CMakeLists.txt" : {
      "ObjectId" : "c5681f80147e43b4df0be64ba1cec83b3d230908",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the GENERIC_VEHICLE demo.\n\n# This example program works with and without Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/demos/vehicle/demo_WheeledJSON/CMakeLists.txt" : {
      "ObjectId" : "5b24c3428bf88e74cf08a0381b54cac6c2593df1",
      "LastModified" : "2019-02-21T20:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# CMake configuration file for the VEHICLE demo - an example program for using\n\n# a wheeled vehicle model specified entirely through JSON specification files.\n\n# This example program works with and without Irrlicht run-time visualization\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# List all model files for this demo\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all required libraries\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Create the executable\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/tests/benchmark_tests/CMakeLists.txt" : {
      "ObjectId" : "1df4c851a919336996628877b293276ec743bdc3",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Always use full RPATH (differentiating between the build and install trees)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add path to google benchmark\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--------------------------------------------------------------\n\n# Propagate to subdirectories\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/tests/benchmark_tests/core/CMakeLists.txt" : {
      "ObjectId" : "005c37f253aba2df57f09f7c0818edbdba6b8140",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tests/benchmark_tests/fea/CMakeLists.txt" : {
      "ObjectId" : "fb4e41b9f932b62a8b4c624428b9139c8fd54728",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tests/benchmark_tests/physics/CMakeLists.txt" : {
      "ObjectId" : "450178b0ced0be433e181415f485c9ecb49c6fa7",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tests/benchmark_tests/vehicle/CMakeLists.txt" : {
      "ObjectId" : "4761db7115368852d1bdd31ff8a4057964660b96",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/tests/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "05a95234daabe8a2ae9d7eb01188452b9c8acb67",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# Always use full RPATH (differentiating between the build and install trees)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add path to googletest\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--------------------------------------------------------------\n\n# Propagate to subdirectories\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/tests/unit_tests/core/CMakeLists.txt" : {
      "ObjectId" : "ef7632c55fb04687661cbab28f2355fd06c89c2f",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#utest_CH_stream\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/tests/unit_tests/distributed/CMakeLists.txt" : {
      "ObjectId" : "c1fbcdac2a64befab60335407e517bb69879ed10",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests for the Chrono::Distributed module\n\n# ==================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths (for ChronoEngine_Utils)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Libraries\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all executables\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/tests/unit_tests/fea/CMakeLists.txt" : {
      "ObjectId" : "4c6747de612a3b56dd48918a6d64a2ebb5f5144b",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests for the Chrono::FEA module\n\n# ==================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A hack to set the working directory in which to execute the CTest\n\n# runs.  This is needed for tests that need to access the Chrono data\n\n# directory (since we use a relative path to it)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tests/unit_tests/parallel/CMakeLists.txt" : {
      "ObjectId" : "a301fd38a9b884b4a390731aef353bff527e8f3b",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests for the Chrono::Parallel module\n\n# ==================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# Additional include paths (for ChronoEngine_Utils)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Libraries\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# List of all executables\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#utest_PAR_mat33\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#utest_PAR_rhs\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#utest_PAR_svd\n\n#utest_PAR_collision_system\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#--------------------------------------------------------------\n\n# Executables that use Bullet\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Because Bullet classes are not DLL exported, the sources must be explicitly included.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#INSTALL(TARGETS ${PROGRAM} DESTINATION ${CH_INSTALL_DEMO})\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#--------------------------------------------------------------\n\n# Executables that use OpenGL if it is available\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/tests/unit_tests/physics/CMakeLists.txt" : {
      "ObjectId" : "7e32b151206b84bd31690d12899c7d7b4007dd02",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "template_project/CMakeLists.txt" : {
      "ObjectId" : "1882b45b459d0b22d8df743c6c1299fc3ad8e561",
      "LastModified" : "2019-04-08T17:09:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------\n\n# \n\n# Example of CMake configuration file to build an external \n\n# project depending on Chrono and on optional Chrono modules.\n\n# \n\n# This minimal sample project can be used as a template for a\n\n# user project.  Modify sections 1, 2, and 3 below as appropriate.\n\n# \n\n#--------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------\n\n# === 1 === \n\n# Modify the project name if you want: \n\n#--------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------\n\n# === 2 ===\n\n# Find the Chrono package and any REQUIRED or OPTIONAL modules\n\n# by invoking the find_package function in CONFIG mode:\n\n#    find_package(Chrono\n\n#\t              COMPONENTS req_module1 req_module1 ...\n\n#\t              OPTIONAL opt_module1 opt_module2 ...\n\n#                 CONFIG)\n\n# The following Chrono modules can be requested (their names\n\n# are case insensitive): Cascade, Cosimulation, FEA, Irrlicht,\n\n# Matlab, Parallel, Postprocess, Python, Vehicle.\n\n# \n\n# Note that you will have to set the variable Chrono_DIR to \n\n# specify the location of the ChronoConfig.cmake script, if\n\n# it is not in its default install location.\n\n# Chrono_DIR can be either a Chrono build tree or a Chrono install tree.\n\n# \n\n# The following variables are set and can be used further down:\n\n# CHRONO_FOUND\n\n#   set to true if Chrono and all required components were found\n\n# CHRONO_C_FLAGS\n\n# CHRONO_CXX_FLAGS\n\n#   C and C++ compilation flags\n\n# CHRONO_INCLUDE_DIRS\n\n#   additional paths for included headers\n\n# CHRONO_LIBRARIES\n\n#   list of required libraries (with full path)\n\n# CHRONO_LINKER_FLAGS\n\n#   additional linker flags\n\n# CHRONO_DLLS\n\n#   list of all DLL dependencies (with full path)\n\n# CHRONO_DATA_DIR\n\n#   path to the Chrono data make_directory\n\n# \n\n# In addition, for each requested component [COMPONENT], the\n\n# following variable is set to true (ON) or false (OFF):\n\n# CHRONO_[COMPONENT]_FOUND\n\n# \n\n# In this example, we only request the Irrlicht module (required)\n\n#--------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--------------------------------------------------------------\n\n# Return now if Chrono or a required component was not found.\n\n#--------------------------------------------------------------\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--------------------------------------------------------------\n\n# Enable creation of \"application bundles\" on MacOSX.\n\n#--------------------------------------------------------------\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This is necessary for any Irrlicht-based project (like the example here).\n\n# For OpenGL-based or non-graphics projects, this is optional and the block\n\n# below can be removed (or else explcitly set CMAKE_MACOSX_BUNDLE to 'OFF').\n\n#\n\n# If creating application bundles, the build output will be named 'myexe.app'.\n\n# Use the convenience script 'run_app.sh' available under 'contrib/appbundle-macosx/'\n\n# to run:\n\n#     start_demo.sh myexe.app\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--------------------------------------------------------------\n\n# Add path to Chrono headers and to headers of all dependencies\n\n# of the requested modules.\n\n#--------------------------------------------------------------\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#--------------------------------------------------------------\n\n# Tweaks to disable some warnings with MSVC\n\n#--------------------------------------------------------------\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# avoids deprecation warnings\n\n# avoids deprecation warnings\n\n# do not use MSVC's min/max macros\n\n# disable warnings triggered by Irrlicht\n",
        "Line" : 104,
        "CharPositionInLine" : 51
      },
      "9" : {
        "Text" : "#--------------------------------------------------------------\n\n# === 3 ===\n\n# Add the executable from your project and specify all C++ \n\n# files in your project. \n\n#--------------------------------------------------------------\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#--------------------------------------------------------------\n\n# Set properties for your executable target\n\n# \n\n# Note that here we define a macro CHRONO_DATA_DIR which will\n\n# contain the path to the Chrono data directory, either in its\n\n# source tree (if using a build version of Chrono), or in its\n\n# install tree (if using an installed version of Chrono).\n\n#--------------------------------------------------------------\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--------------------------------------------------------------\n\n# Link to Chrono libraries and dependency libraries\n\n#--------------------------------------------------------------\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#--------------------------------------------------------------\n\n# === 4 (OPTIONAL) ===\n\n# \n\n# Optionally, add a custom command for copying all Chrono and\n\n# dependency DLLs to the appropriate binary output folder.\n\n# This function has effect only on Windows.\n\n# \n\n# Note that you must first set EXECUTABLE_OUTPUT_PATH\n\n# (this can simply be ${CMAKE_BINARY_DIR}, like in this example)\n\n#--------------------------------------------------------------\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    }
  },
  "FileTypes" : {
    "CMAKE" : 105,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 4642
}