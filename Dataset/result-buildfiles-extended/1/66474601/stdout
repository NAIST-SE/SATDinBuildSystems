{
  "Repository" : "66474601",
  "Revision" : "HEAD",
  "ObjectId" : "4972582de4761910a6acbcbba16c0d23bb0f48a0",
  "CommitTime" : "2019-04-19T00:07:13Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1a4b12fd0a08a70424ef3234f5db79d8b067ef66",
      "LastModified" : "2018-02-07T12:24:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c++/CMakeLists.txt" : {
      "ObjectId" : "27b838d1b192f8d2683dee8586645c745ef3c765",
      "LastModified" : "2018-08-29T01:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# these arguments are passed to all install(TARGETS) calls\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options ======================================================================\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for invalid combinations of build options\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This flag is attached as PUBLIC target_compile_definition to kj target\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO(cleanup): Enable higher warning level in MSVC, but make sure to test\n\n#   build with that warning level and clean out false positives.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Only warn once on truncated decorated names. The maximum symbol length MSVC\n\n# supports is 4k characters, which the parser framework regularly blows. The\n\n# compiler likes to print out the entire type that went over the limit along\n\n# with this warning, which gets unbearably spammy. That said, we don't want to\n\n# just ignore it, so I'm letting it trigger once until we find some places to\n\n# inject ParserRefs.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Note that it's important to add new CXXFLAGS before ones specified by the\n\n# user, so that the user's flags override them. This is particularly\n\n# important if -Werror was enabled and then certain warnings need to be\n\n# disabled, as is done in super-test.sh.\n\n#\n\n# We enable a lot of warnings, but then disable some:\n\n# * strict-aliasing: We use type-punning in known-safe ways that GCC doesn't\n\n#   recognize as safe.\n\n# * sign-compare: Low S/N ratio.\n\n# * unused-parameter: Low S/N ratio.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Source =======================================================================\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install ======================================================================\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We used to use write_basic_package_version_file(), but since the autotools build needs to install\n\n# a config version script as well, I copied the AnyNewerVersion template from my CMake Modules\n\n# directory to Cap'n Proto's cmake/ directory (alternatively, we could make the autotools build\n\n# depend on CMake).\n\n#\n\n# We might as well use the local copy of the template. In the future we can modify the project's\n\n# version compatibility policy just by changing that file.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#install CapnProtoMacros for CapnProtoConfig.cmake build directory consumers\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Don't install pkg-config files when building with MSVC\n",
        "Line" : 120,
        "CharPositionInLine" : 14
      },
      "12" : {
        "Text" : "# Variables for pkg-config files\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# not needed since we use absolute paths in libdir and includedir\n",
        "Line" : 123,
        "CharPositionInLine" : 22
      },
      "14" : {
        "Text" : "# TODO: Unsupported\n",
        "Line" : 127,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 15
    },
    "c++/Makefile.am" : {
      "ObjectId" : "39c57b1aa26bb34d1d27e93bae4a9704fdd723ef",
      "LastModified" : "2018-08-29T01:08:45Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When running distcheck, verify that we've included all the files needed by\n\n# the cmake build.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in this case.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Symlink capnpc -> capnp.  The capnp binary will behave like the old capnpc\n\n# binary (i.e. like \"capnp compile\") when invoked via this symlink.\n\n#\n\n# Also attempt to run ldconfig, because otherwise users get confused.  If\n\n# it fails (e.g. because the platform doesn't have it, or because the\n\n# user doesn't have root privileges), don't worry about it.\n",
        "Line" : 382,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Source files intentionally not included in the dist at this time:\n\n#  src/capnp/serialize-snappy*\n\n#  src/capnp/benchmark/...\n\n#  src/capnp/compiler/...\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 240:103 token recognition error at: '\\1'\nline 240:105 token recognition error at: '\\3'\n"
    },
    "c++/cmake/CapnProtoMacros.cmake" : {
      "ObjectId" : "b37cb22c40c50219dd03e875a3dd02bd80887446",
      "LastModified" : "2018-02-07T12:24:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CAPNP_GENERATE_CPP ===========================================================\n\n#\n\n# Example usage:\n\n#   find_package(CapnProto)\n\n#   capnp_generate_cpp(CAPNP_SRCS CAPNP_HDRS schema.capnp)\n\n#   add_executable(foo main.cpp ${CAPNP_SRCS})\n\n#   target_link_libraries(foo PRIVATE CapnProto::capnp-rpc)\n\n#   target_include_directories(foo PRIVATE ${CMAKE_CURRENT_BINARY_DIR})\n\n#\n\n#  If you are not using the RPC features you can use 'CapnProto::capnp' in the\n\n#  target_link_libraries call\n\n#\n\n# Configuration variables (optional):\n\n#   CAPNPC_OUTPUT_DIR\n\n#       Directory to place compiled schema sources (default: CMAKE_CURRENT_BINARY_DIR).\n\n#   CAPNPC_IMPORT_DIRS\n\n#       List of additional include directories for the schema compiler.\n\n#       (CAPNPC_SRC_PREFIX and CAPNP_INCLUDE_DIRECTORY are always included.)\n\n#   CAPNPC_SRC_PREFIX\n\n#       Schema file source prefix (default: CMAKE_CURRENT_SOURCE_DIR).\n\n#   CAPNPC_FLAGS\n\n#       Additional flags to pass to the schema compiler.\n\n#\n\n# TODO: convert to cmake_parse_arguments\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Use cmake targets available\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Prepend a ':' to get the format for the '-o' flag right\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Default compiler includes. Note that in capnp's own test usage of capnp_generate_cpp(), these\n\n# two variables will end up evaluating to the same directory. However, it's difficult to\n\n# deduplicate them because if CAPNP_INCLUDE_DIRECTORY came from the capnp_tool target property,\n\n# then it must be a generator expression in order to handle usages in both the build tree and the\n\n# install tree. This vastly overcomplicates duplication detection, so the duplication doesn't seem\n\n# worth fixing.\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Append each directory as a series of '-I' flags in ${include_path}\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Figure out where the output files will go\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Output files are placed in CAPNPC_OUTPUT_DIR, at a location as if they were\n\n# relative to CAPNPC_SRC_PREFIX.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "c++/cmake/CapnProtoTargets.cmake" : {
      "ObjectId" : "879c2c0288c82d0a50a9d00ee3ef66d796e46162",
      "LastModified" : "2018-08-29T01:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake script adds imported targets for each shared library and executable distributed by\n\n# Cap'n Proto's autotools build.\n\n#\n\n# This file IS NOT USED by the CMake build! The CMake build generates its own version of this script\n\n# from its set of exported targets. I used such a generated script as a reference when writing this\n\n# one.\n\n#\n\n# The set of library targets provided by this script is automatically generated from the list of .pc\n\n# files maintained in configure.ac. The set of executable targets is hard-coded in this file.\n\n#\n\n# You can request that this script print debugging information by invoking cmake with:\n\n#\n\n#   -DCapnProto_DEBUG=ON\n\n#\n\n# TODO(someday): Distinguish between debug and release builds. I.e., set IMPORTED_LOCATION_RELEASE\n\n#   rather than IMPORTED_LOCATION, etc., if this installation was configured as a release build. But\n\n#   how do we tell? grep for -g in CXXFLAGS?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the consuming project called find_package(CapnProto) with the QUIET or REQUIRED flags, forward\n\n# them to calls to find_package(PkgConfig) and pkg_check_modules(). Note that find_dependency()\n\n# would do this for us in the former case, but there is no such forwarding wrapper for\n\n# pkg_check_modules().\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If we're here, the REQUIRED flag must not have been passed, else we would have had a fatal\n\n# error. Nevertheless, a diagnostic for this case is probably nice.\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add an imported library target named CapnProto::${target}, using the output of various\n\n# invocations of `pkg-config ${target}`. The generated imported library target tries to mimic the\n\n# behavior of a real CMake-generated imported target as closely as possible.\n\n#\n\n# Usage: _capnp_import_pkg_config_target(target <all Cap'n Proto targets>)\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Dump the information pkg-config discovered.\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Make an educated guess as to what the target's .so and .a filenames must be.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Find the actual target's file. find_library() sets a cache variable, so I made the variable name\n\n# unique-ish.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# prefer libfoo-version.so over libfoo.a\n",
        "Line" : 87,
        "CharPositionInLine" : 55
      },
      "8" : {
        "Text" : "# If the installed version of Cap'n Proto is in a system location, pkg-config will not have filled\n\n# in ${target}_LIBRARY_DIRS. To account for this, fall back to a regular search.\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# prefer libfoo-version.so over libfoo.a\n",
        "Line" : 94,
        "CharPositionInLine" : 55
      },
      "10" : {
        "Text" : "# Not an error if the library doesn't exist -- we may have found a lite mode installation.\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Record some information about this target -- shared versus static, location and soname -- which\n\n# we'll use to build our imported target later.\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Each library dependency of the target is either the target itself, a sibling Cap'n Proto\n\n# library, or a system library. We ignore the first case by removing this target from the\n\n# dependencies. The remaining dependencies are either passed through or, if they are a sibling\n\n# Cap'n Proto library, prefixed with `CapnProto::`.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# TODO(cleanup): CMake >= 3.3 lets us write: `if(NOT ${dependency} IN_LIST all_targets)`\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# TODO(cleanup): Use cxx_std_14 once it's safe to require cmake 3.8.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# I'm dumping LDFLAGS_OTHER in with the libraries because there exists no\n\n# INTERFACE_LINK_OPTIONS. See https://gitlab.kitware.com/cmake/cmake/issues/16543.\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Dump all the properties we generated for the imported target.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# ========================================================================================\n\n# Imported library targets\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Build a list of targets to search for from the list of .pc files.\n\n# I.e. [somewhere/foo.pc, somewhere/bar.pc] -> [foo, bar]\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Try to add an imported library target CapnProto::foo for each foo.pc distributed with Cap'n Proto.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Handle lite-mode and no libraries found cases. It is tempting to set a CapnProto_LITE variable\n\n# here, but the real CMake-generated implementation does no such thing -- we'd need to set it in\n\n# CapnProtoConfig.cmake.in itself.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Lite mode doesn't include the executables, so return here.\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# If we didn't even find capnp or kj, then we didn't find anything usable.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# ========================================================================================\n\n# Imported executable targets\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Add executable targets for the capnp compiler and plugins. This list must be kept manually in sync\n\n# with the rest of the project.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "c++/samples/CMakeLists.txt" : {
      "ObjectId" : "6a36b1752045402f20fb03e34587d8c7ab32870a",
      "LastModified" : "2018-02-07T12:24:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# A Cap'n Proto sample project.\n\n#\n\n# To build (non-MSVC):\n\n#   1. Install Cap'n Proto somewhere ($PREFIX below):\n\n#\n\n#      mkdir capnproto/build\n\n#      cd capnproto/build\n\n#      cmake ../c++ -DCMAKE_INSTALL_PREFIX=$PREFIX\n\n#      cmake --build . --target install\n\n#\n\n#   2. Ensure Cap'n Proto's executables are on the PATH, then build the sample project:\n\n#\n\n#      export PATH=$PREFIX/bin:$PATH\n\n#      mkdir ../build-samples\n\n#      cd ../build-samples\n\n#      cmake ../c++/samples\n\n#      cmake --build .\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Don't build the rpc sample if find_package() found an installation of Cap'n Proto lite.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "c++/src/CMakeLists.txt" : {
      "ObjectId" : "621e29aa054983d1cf20f438ea7634156acec1c8",
      "LastModified" : "2018-02-07T12:24:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tests ========================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup CAPNP_GENERATE_CPP for compiling test schemas\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# No working installation of Cap'n Proto found, so fall back to searching the environment.\n\n#\n\n# We search for the external capnp compiler binaries via $CAPNP, $CAPNPC_CXX, and\n\n# find_program(). find_program() will use various paths in its search, among them\n\n# ${CMAKE_PREFIX_PATH}/bin and $PATH.\n",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Also search in the same directory that `capnp` was found in\n",
        "Line" : 29,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "#TODO(someday) It would be nice to use targets instead of variables in CAPNP_GENERATE_CPP macro\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Sadly, we can't use the 'test' target, as that's coopted by ctest\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# BUILD_TESTING\n",
        "Line" : 42,
        "CharPositionInLine" : 9
      },
      "7" : {
        "Text" : "# kj ===========================================================================\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# capnp ========================================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "c++/src/capnp/CMakeLists.txt" : {
      "ObjectId" : "041697466abc55c9c2353bdc6ab39f8c53c6394f",
      "LastModified" : "2019-03-12T16:07:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# capnp ========================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#make sure external consumers don't need to manually set the include dirs\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# capnp-json ========================================================================\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Tools/Compilers ==============================================================\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#Capnp tool needs capnpc_cpp location. But cmake deprecated LOCATION property.\n\n#So we use custom property to pass location\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Symlink capnpc -> capnp\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# NOT CAPNP_LITE\n",
        "Line" : 186,
        "CharPositionInLine" : 9
      },
      "11" : {
        "Text" : "# Tests ========================================================================\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Tell capnp_generate_cpp to set --src-prefix to our parent directory. This allows us to pass our\n\n# .capnp files relative to this directory, but have their canonical name end up as\n\n# capnp/test.capnp, capnp/test-import.capnp, etc.\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# TODO(cleanup): capnp-tests and capnp-heavy-tests both depend on the test.capnp output files. In\n\n#   a parallel Makefile-based build (maybe others?), they can race and cause the custom capnp\n\n#   command in capnp_generate_cpp() to run twice. To get around this I'm using a custom target to\n\n#   force CMake to generate race-free Makefiles. Remove this garbage when we move to a\n\n#   target-based capnp_generate() command, as that will make CMake do the right thing by default.\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# NOT CAPNP_LITE\n",
        "Line" : 281,
        "CharPositionInLine" : 11
      },
      "15" : {
        "Text" : "# BUILD_TESTING\n",
        "Line" : 282,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 16
    },
    "c++/src/kj/CMakeLists.txt" : {
      "ObjectId" : "58009b464be2490f24ea9354c8f87f870ce7d890",
      "LastModified" : "2018-08-29T01:08:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# kj ===========================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO(cleanup): Use cxx_std_14 once it's safe to require cmake 3.8.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#make sure the lite flag propagates to all users (internal + external) of this library\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#make sure external consumers don't need to manually set the include dirs\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# external clients of this library need to link to pthreads\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# kj-http ======================================================================\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# kj-gzip ======================================================================\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Ensure the library has a version set to match autotools build\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Tests ========================================================================\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# TODO: Link with librt on Solaris for sched_yield\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# NOT CAPNP_LITE\n",
        "Line" : 240,
        "CharPositionInLine" : 11
      },
      "15" : {
        "Text" : "# BUILD_TESTING\n",
        "Line" : 241,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 16
    }
  },
  "FileTypes" : {
    "CMAKE" : 8,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 2375
}