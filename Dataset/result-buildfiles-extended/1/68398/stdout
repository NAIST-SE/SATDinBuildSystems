{
  "Repository" : "68398",
  "Revision" : "HEAD",
  "ObjectId" : "fa01a7fc47bf95ad3dbc0f812c8b91f33bb2ed51",
  "CommitTime" : "2019-04-11T09:41:53Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c2e60bc74b42210e912b411f5ad1f6d3ba92d08d",
      "LastModified" : "2018-05-21T09:41:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# settings\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# third party \n\n# none required\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# options\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# no deps currently to build\n",
        "Line" : 23,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : "# variables\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# modules\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#include(CheckTypeSize)\n\n#include(CheckPrototypeExists)\n\n#include(CheckCXXSourceCompiles)\n\n#include(CheckCSourceCompiles)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# spawn new cmake to build deps\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# external projects find path\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# prefer static packages if building static library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# prefer static libs\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# find libraries with cmake modules\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# enable languages\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# build dependencies\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# add external projects\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# none required currently\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# terminate non root cmake thread\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# configure\n\n#check_include_files(string.h HAVE_STRING_H)\n\n#check_function_exists(memcopy HAVE_MEMCOPY)\n\n#check_symbol_exists(LC_MESSAGES \"locale.h\" HAVE_LC_MESSAGES) \n\n#check_library_exists(pthread  attachNode \"\" HAVE_PTHREAD)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# config files\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# mavlink generation\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# build\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# testing\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# TODO fix udp example\n\n#add_executable(mavlink_udp examples/linux/mavlink_udp.c)\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# install files\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "### packaging\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# apple bundle icon\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set how it shows up in Info.plist\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# set where in the bundle to put the icns file\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# include the icns file in the target\n\n#list(APPEND MAVLINKGUI_SRCS cmake/mavlink.icns)\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# set NSIS image\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# add file extensions and set resource files\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# vim:sw=4:ts=4:expandtab\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "cmake/arkcmake/DefineCMakeDefaults.cmake" : {
      "ObjectId" : "1ea2fd8f40dbe89a260fcda01a6e706a7a17fd9d",
      "LastModified" : "2012-03-22T18:14:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Always include srcdir and builddir in include path\n\n# This saves typing ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY} in\n\n# about every subdir\n\n# since cmake 2.4.0\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Put the include dirs which are in the source or build tree\n\n# before all other include dirs, so the headers in the sources\n\n# are prefered over the already installed ones\n\n# since cmake 2.4.1\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use colored output\n\n# since cmake 2.4.0\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define the generic version of the libraries here\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the default build type to release with debug info\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# disallow in-source build\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/arkcmake/DefineCompilerFlags.cmake" : {
      "ObjectId" : "0926328b2368c3c67e741b05eb1c49ae577323ed",
      "LastModified" : "2012-03-22T18:14:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define system dependent compiler flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Define GNUCC compiler flags\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add -Wconversion ?\n\n#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu99 -pedantic -pedantic-errors\")\n\n#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Wextra -Wshadow -Wmissing-prototypes -Wdeclaration-after-statement\")\n\n#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wunused -Wfloat-equal -Wpointer-arith -Wwrite-strings -Wformat-security\")\n\n#set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wmissing-format-attribute\")\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic -pedantic-errors\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wshadow\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wunused -Wfloat-equal -Wpointer-arith -Wwrite-strings -Wformat-security\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wmissing-format-attribute\")\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# with -fPIC\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#\n\n# Check for large filesystem support\n\n#\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# with large file support\n",
        "Line" : 54,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# with large file support\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Use secure functions by defaualt and suppress warnings about\n\n#\"deprecated\" functions\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cmake/arkcmake/ExternalProjectWithFilename.cmake" : {
      "ObjectId" : "b4ca674f1e0e6fd39453c13684b565667552e72b",
      "LastModified" : "2012-03-22T18:14:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Create custom targets to build projects in external trees\n\n# The 'ExternalProjectWithFilename_Add' function creates a custom target to drive\n\n# download, update/patch, configure, build, install and test steps of an\n\n# external project:\n\n#  ExternalProjectWithFilename_Add(<name>    # Name for custom target\n\n#    [DEPENDS projects...]       # Targets on which the project depends\n\n#    [PREFIX dir]                # Root dir for entire project\n\n#    [LIST_SEPARATOR sep]        # Sep to be replaced by ; in cmd lines\n\n#    [TMP_DIR dir]               # Directory to store temporary files\n\n#    [STAMP_DIR dir]             # Directory to store step timestamps\n\n#   #--Download step--------------\n\n#    [FILENAME filename]         # Set the download filename\n\n#    [DOWNLOAD_DIR dir]          # Directory to store downloaded files\n\n#    [DOWNLOAD_COMMAND cmd...]   # Command to download source tree\n\n#    [CVS_REPOSITORY cvsroot]    # CVSROOT of CVS repository\n\n#    [CVS_MODULE mod]            # Module to checkout from CVS repo\n\n#    [CVS_TAG tag]               # Tag to checkout from CVS repo\n\n#    [SVN_REPOSITORY url]        # URL of Subversion repo\n\n#    [SVN_REVISION rev]          # Revision to checkout from Subversion repo\n\n#    [SVN_USERNAME john ]        # Username for Subversion checkout and update\n\n#    [SVN_PASSWORD doe ]         # Password for Subversion checkout and update\n\n#    [SVN_TRUST_CERT 1 ]         # Trust the Subversion server site certificate\n\n#    [GIT_REPOSITORY url]        # URL of git repo\n\n#    [GIT_TAG tag]               # Git branch name, commit id or tag\n\n#    [URL /.../src.tgz]          # Full path or URL of source\n\n#    [URL_MD5 md5]               # MD5 checksum of file at URL\n\n#    [TIMEOUT seconds]           # Time allowed for file download operations\n\n#   #--Update/Patch step----------\n\n#    [UPDATE_COMMAND cmd...]     # Source work-tree update command\n\n#    [PATCH_COMMAND cmd...]      # Command to patch downloaded source\n\n#   #--Configure step-------------\n\n#    [SOURCE_DIR dir]            # Source dir to be used for build\n\n#    [CONFIGURE_COMMAND cmd...]  # Build tree configuration command\n\n#    [CMAKE_COMMAND /.../cmake]  # Specify alternative cmake executable\n\n#    [CMAKE_GENERATOR gen]       # Specify generator for native build\n\n#    [CMAKE_ARGS args...]        # Arguments to CMake command line\n\n#    [CMAKE_CACHE_ARGS args...]  # Initial cache arguments, of the form -Dvar:string=on\n\n#   #--Build step-----------------\n\n#    [BINARY_DIR dir]            # Specify build dir location\n\n#    [BUILD_COMMAND cmd...]      # Command to drive the native build\n\n#    [BUILD_IN_SOURCE 1]         # Use source dir for build dir\n\n#   #--Install step---------------\n\n#    [INSTALL_DIR dir]           # Installation prefix\n\n#    [INSTALL_COMMAND cmd...]    # Command to drive install after build\n\n#   #--Test step------------------\n\n#    [TEST_BEFORE_INSTALL 1]     # Add test step executed before install step\n\n#    [TEST_AFTER_INSTALL 1]      # Add test step executed after install step\n\n#    [TEST_COMMAND cmd...]       # Command to drive test\n\n#   #--Output logging-------------\n\n#    [LOG_DOWNLOAD 1]            # Wrap download in script to log output\n\n#    [LOG_UPDATE 1]              # Wrap update in script to log output\n\n#    [LOG_CONFIGURE 1]           # Wrap configure in script to log output\n\n#    [LOG_BUILD 1]               # Wrap build in script to log output\n\n#    [LOG_TEST 1]                # Wrap test in script to log output\n\n#    [LOG_INSTALL 1]             # Wrap install in script to log output\n\n#   #--Custom targets-------------\n\n#    [STEP_TARGETS st1 st2 ...]  # Generate custom targets for these steps\n\n#    )\n\n# The *_DIR options specify directories for the project, with default\n\n# directories computed as follows.\n\n# If the PREFIX option is given to ExternalProjectWithFilename_Add() or the EP_PREFIX\n\n# directory property is set, then an external project is built and installed\n\n# under the specified prefix:\n\n#   TMP_DIR      = <prefix>/tmp\n\n#   STAMP_DIR    = <prefix>/src/<name>-stamp\n\n#   DOWNLOAD_DIR = <prefix>/src\n\n#   SOURCE_DIR   = <prefix>/src/<name>\n\n#   BINARY_DIR   = <prefix>/src/<name>-build\n\n#   INSTALL_DIR  = <prefix>\n\n# Otherwise, if the EP_BASE directory property is set then components\n\n# of an external project are stored under the specified base:\n\n#   TMP_DIR      = <base>/tmp/<name>\n\n#   STAMP_DIR    = <base>/Stamp/<name>\n\n#   DOWNLOAD_DIR = <base>/Download/<name>\n\n#   SOURCE_DIR   = <base>/Source/<name>\n\n#   BINARY_DIR   = <base>/Build/<name>\n\n#   INSTALL_DIR  = <base>/Install/<name>\n\n# If no PREFIX, EP_PREFIX, or EP_BASE is specified then the default\n\n# is to set PREFIX to \"<name>-prefix\".\n\n# Relative paths are interpreted with respect to the build directory\n\n# corresponding to the source directory in which ExternalProjectWithFilename_Add is\n\n# invoked.\n\n#\n\n# If SOURCE_DIR is explicitly set to an existing directory the project\n\n# will be built from it.\n\n# Otherwise a download step must be specified using one of the\n\n# DOWNLOAD_COMMAND, CVS_*, SVN_*, or URL options.\n\n# The URL option may refer locally to a directory or source tarball,\n\n# or refer to a remote tarball (e.g. http://.../src.tgz).\n\n#\n\n# The 'ExternalProjectWithFilename_Add_Step' function adds a custom step to an external\n\n# project:\n\n#  ExternalProjectWithFilename_Add_Step(<name> <step> # Names of project and custom step\n\n#    [COMMAND cmd...]        # Command line invoked by this step\n\n#    [COMMENT \"text...\"]     # Text printed when step executes\n\n#    [DEPENDEES steps...]    # Steps on which this step depends\n\n#    [DEPENDERS steps...]    # Steps that depend on this step\n\n#    [DEPENDS files...]      # Files on which this step depends\n\n#    [ALWAYS 1]              # No stamp file, step always runs\n\n#    [WORKING_DIRECTORY dir] # Working directory for command\n\n#    [LOG 1]                 # Wrap step in script to log output\n\n#    )\n\n# The command line, comment, and working directory of every standard\n\n# and custom step is processed to replace tokens\n\n# <SOURCE_DIR>,\n\n# <BINARY_DIR>,\n\n# <INSTALL_DIR>,\n\n# and <TMP_DIR>\n\n# with corresponding property values.\n\n#\n\n# The 'ExternalProjectWithFilename_Get_Property' function retrieves external project\n\n# target properties:\n\n#  ExternalProjectWithFilename_Get_Property(<name> [prop1 [prop2 [...]]])\n\n# It stores property values in variables of the same name.\n\n# Property names correspond to the keyword argument names of\n\n# 'ExternalProjectWithFilename_Add'.\n\n#\n\n# The 'ExternalProjectWithFilename_Add_StepTargets' function generates custom targets for\n\n# the steps listed:\n\n#  ExternalProjectWithFilename_Add_StepTargets(<name> [step1 [step2 [...]]])\n\n#\n\n# If STEP_TARGETS is set then ExternalProjectWithFilename_Add_StepTargets is automatically\n\n# called at the end of matching calls to ExternalProjectWithFilename_Add_Step. Pass\n\n# STEP_TARGETS explicitly to individual ExternalProjectWithFilename_Add calls, or\n\n# implicitly to all ExternalProjectWithFilename_Add calls by setting the directory property\n\n# EP_STEP_TARGETS.\n\n#\n\n# If STEP_TARGETS is not set, clients may still manually call\n\n# ExternalProjectWithFilename_Add_StepTargets after calling ExternalProjectWithFilename_Add or\n\n# ExternalProjectWithFilename_Add_Step.\n\n#\n\n# This functionality is provided to make it easy to drive the steps\n\n# independently of each other by specifying targets on build command lines.\n\n# For example, you may be submitting to a sub-project based dashboard, where\n\n# you want to drive the configure portion of the build, then submit to the\n\n# dashboard, followed by the build portion, followed by tests. If you invoke\n\n# a custom target that depends on a step halfway through the step dependency\n\n# chain, then all the previous steps will also run to ensure everything is\n\n# up to date.\n\n#\n\n# For example, to drive configure, build and test steps independently for each\n\n# ExternalProjectWithFilename_Add call in your project, write the following line prior to\n\n# any ExternalProjectWithFilename_Add calls in your CMakeLists file:\n\n#\n\n#   set_property(DIRECTORY PROPERTY EP_STEP_TARGETS configure build test)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pre-compute a regex to match documented keywords for each command.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"function [${_ep_func}]\")\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#message(\"  keyword [${_ep_key}]\")\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Transfer the arguments to this function into target properties for the\n\n# new custom target we just added so that we can set up all the build steps\n\n# correctly based on target properties.\n\n#\n\n# We loop through ARGN and consider the namespace starting with an\n\n# upper-case letter followed by at least two more upper-case letters,\n\n# numbers or underscores to be keywords.\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Value\n",
        "Line" : 210,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Missing Keyword\n",
        "Line" : 223,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# assert(base)\n",
        "Line" : 503,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# Make the directories at CMake configure time *and* add a custom command\n\n# to make them at build time. They need to exist at makefile generation\n\n# time for Borland make and wmake so that CMake may generate makefiles\n\n# with \"cd C:\\short\\paths\\with\\no\\spaces\" commands in them.\n\n#\n\n# Additionally, the add_custom_command is still used in case somebody\n\n# removes one of the necessary directories and tries to rebuild without\n\n# re-running cmake.\n",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# IMPORTANT: this MUST be a macro and not a function because of the\n\n# in-place replacements that occur in each ${var}\n\n#\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Write out values into an initial cache, that will be passed to CMake with -C\n",
        "Line" : 573,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# This is required to build up lists in variables, or complete an entry\n",
        "Line" : 580,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Assume this is a list to append to the last var\n",
        "Line" : 597,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Catch the final line of the args\n",
        "Line" : 601,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Replace location tags.\n",
        "Line" : 606,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Write out the initial cache file to the location specified.\n",
        "Line" : 608,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Explicit empty string means no configure step for this project\n",
        "Line" : 632,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Default is \"use cmake\":\n",
        "Line" : 636,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Otherwise we have to analyze the value:\n",
        "Line" : 639,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# CMake project.  Select build command based on generator.\n",
        "Line" : 660,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# The project uses the same Makefile generator.  Use recursive make.\n",
        "Line" : 664,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Drive the project with \"cmake --build\".\n",
        "Line" : 673,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# But for \"TEST\" drive the project with corresponding \"ctest\".\n",
        "Line" : 684,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# if(cfg_cmd_id STREQUAL \"configure\")\n",
        "Line" : 690,
        "CharPositionInLine" : 11
      },
      "25" : {
        "Text" : "# Non-CMake project.  Guess \"make\" and \"make install\" and \"make test\".\n\n# But use \"$(MAKE)\" to get recursive parallel make.\n",
        "Line" : 691,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Use user-specified arguments instead of default arguments, if any.\n",
        "Line" : 702,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# GNU make recognizes the string \"$(MAKE)\" as recursive make, so\n\n# ensure that it appears directly in the makefile.\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Wrap multiple 'COMMAND' lines up into a second-level wrapper\n\n# script so all output can be sent to one log file.\n",
        "Line" : 750,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Wrap the command in a script to log output to files.\n",
        "Line" : 782,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# This module used to use \"/${CMAKE_CFG_INTDIR}\" directly and produced\n\n# makefiles with \"/./\" in paths for custom command dependencies. Which\n\n# resulted in problems with parallel make -j invocations.\n\n#\n\n# This function was added so that the suffix (search below for ${cfgdir}) is\n\n# only set to \"/${CMAKE_CFG_INTDIR}\" when ${CMAKE_CFG_INTDIR} is not going to\n\n# be \".\" (multi-configuration build systems like Visual Studio and Xcode...)\n\n#\n",
        "Line" : 811,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Steps depending on this step.\n",
        "Line" : 854,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Dependencies on files.\n",
        "Line" : 863,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Dependencies on steps.\n",
        "Line" : 866,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# The command to run.\n",
        "Line" : 872,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Replace list separators.\n",
        "Line" : 881,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Replace location tags.\n",
        "Line" : 887,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Custom comment?\n",
        "Line" : 890,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Run every time?\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Wrap with log script?\n",
        "Line" : 905,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Add custom \"step target\"?\n",
        "Line" : 921,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# TODO: Perhaps file:// should be copied to download dir before extraction.\n",
        "Line" : 987,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# The git submodule update '--recursive' flag requires git >= v1.6.5\n\n#\n",
        "Line" : 1065,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Since git clone doesn't succeed if the non-empty source_dir exists,\n\n# create a cmake script to invoke as download command.\n\n# The script will delete the source directory and then call git clone.\n\n#\n",
        "Line" : 1089,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# TODO: Should download and extraction be different steps?\n",
        "Line" : 1118,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# MODIFICATION HERE: allows setting filename for urls\n\n# where filename is not embedded, such as github\n",
        "Line" : 1120,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# this is set by filename now\n",
        "Line" : 1125,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# TODO: Make sure external projects use the proper compiler\n",
        "Line" : 1276,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Depend on other external projects (file-level).\n",
        "Line" : 1282,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# If there are any CMAKE_CACHE_ARGS, write an initial cache and use it\n",
        "Line" : 1304,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# If anything about the configure command changes, (command itself, cmake\n\n# used, cmake args or cmake generator) then re-run the configure step.\n\n# Fixes issue http://public.kitware.com/Bug/view.php?id=10258\n\n#\n",
        "Line" : 1325,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Only actually add the test step if one of the test related properties is\n\n# explicitly set. (i.e. the test step is omitted unless requested...)\n\n#\n",
        "Line" : 1412,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Add a custom target for the external project.\n",
        "Line" : 1448,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# The 'complete' step depends on all other steps and creates a\n\n# 'done' mark.  A dependent external project's 'configure' step\n\n# depends on the 'done' mark so that it rebuilds when this project\n\n# rebuilds.  It is important that 'done' is not the output of any\n\n# custom command so that CMake does not propagate build rules to\n\n# other external project targets.\n",
        "Line" : 1456,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Depend on other external projects (target-level).\n",
        "Line" : 1473,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Set up custom build steps based on the target properties.\n\n# Each step depends on the previous one.\n\n#\n\n# The target depends on the output of the final step.\n\n# (Already set up above in the DEPENDS of the add_custom_target command.)\n\n#\n",
        "Line" : 1479,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Test is special in that it might depend on build, or it might depend\n\n# on install.\n\n#\n",
        "Line" : 1493,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 57
    },
    "cmake/arkcmake/MacroCheckCCompilerFlagSSP.cmake" : {
      "ObjectId" : "b64fb453a4daccecc26fde9cd22e9ba89272a74c",
      "LastModified" : "2012-03-22T18:14:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check whether the C compiler supports a given flag in the\n\n# context of a stack checking compiler option.\n\n# CHECK_C_COMPILER_FLAG_SSP(FLAG VARIABLE)\n\n#\n\n#  FLAG - the compiler flag\n\n#  VARIABLE - variable to store the result\n\n# \n\n#  This actually calls the check_c_source_compiles macro.\n\n#  See help for CheckCSourceCompiles for a listing of variables\n\n#  that can modify the build.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/arkcmake/MacroEnsureOutOfSourceBuild.cmake" : {
      "ObjectId" : "3ff891b5127f0867b97e9d6c8844d2eaa2b761c4",
      "LastModified" : "2012-03-22T18:14:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n\n# MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# vim:ts=4:sw=4:expandtab\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 1798
}