{
  "Repository" : "10971339",
  "Revision" : "HEAD",
  "ObjectId" : "be00393955aa6bfe7aa5391b1dd5689e89dbccbd",
  "CommitTime" : "2015-07-23T09:57:05Z",
  "Files" : {
    "3rdparty/CMakeLists.txt" : {
      "ObjectId" : "6b8357d798da808a5e4d05b858e8d674a919cc16",
      "LastModified" : "2015-01-18T14:12:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We compile sdl2 differently on Android\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Android has native zlib\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "3rdparty/assimp/CMakeLists.txt" : {
      "ObjectId" : "e4b08b70130333b949555111b65bccb0c43af728",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define here the needed parameters\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# subversion revision?\n",
        "Line" : 7,
        "CharPositionInLine" : 29
      },
      "2" : {
        "Text" : "# Get the current working branch\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get the latest abbreviated commit hash of the working branch\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# this is a very important switch and some libraries seem now to have it....\n",
        "Line" : 49,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "# hide all not-exported symbols\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# enable multi-core compilation with MSVC\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If this is an in-source build (CMAKE_SOURCE_DIR == CMAKE_BINARY_DIR),\n\n# write the library/executable files to the respective directories in the\n\n# source tree. During an out-of-source build, however, do not litter this\n\n# directory, since that is probably what the user wanted to avoid.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Cache these to allow the user to override them manually.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Allow the user to build a static library\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generate a pkg-config .pc for the Assimp library.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# INSTALL( FILES \"${PROJECT_BINARY_DIR}/assimp.pc\" DESTINATION ${ASSIMP_LIB_INSTALL_DIR}/pkgconfig/ COMPONENT ${LIBASSIMP-DEV_COMPONENT})\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Only generate this target if no higher-level project already has\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add make uninstall capability\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Globally enable Boost resp. the Boost workaround â€“ it is also needed by the\n\n# tools which include the Assimp headers.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# cmake configuration files\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/assimp-config.cmake\"             \"${CMAKE_CURRENT_BINARY_DIR}/assimp-config-version.cmake\" DESTINATION \"${ASSIMP_LIB_INSTALL_DIR}/cmake/assimp-${ASSIMP_VERSION_MAJOR}.${ASSIMP_VERSION_MINOR}\" COMPONENT ${LIBASSIMP-DEV_COMPONENT})\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Search for external dependencies, and build them from source if not found\n\n# Search for zlib\n\n# NEO: We ship our own version\n\n# find_package(ZLIB)\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# compile from sources\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Search for unzip\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# if(CMAKE_CL_64)\n\n# \tset(ASSIMP_BUILD_ARCHITECTURE \"amd64\")\n\n# else(CMAKE_CL_64)\n\n# \tset(ASSIMP_BUILD_ARCHITECTURE \"x86\")\n\n# endif(CMAKE_CL_64)\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ${CMAKE_GENERATOR}\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Packing information\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#set(CPACK_PACKAGE_DESCRIPTION_FILE       \"${CMAKE_CURRENT_SOURCE_DIR}/description\")\n",
        "Line" : 238,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# debian\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 25
    },
    "3rdparty/assimp/cmake-modules/DebSourcePPA.cmake" : {
      "ObjectId" : "62c64525189cc22526dd6a90bbd15b7a78508e61",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Debian Source Package Generator\r\n\n#\r\n\n# Copyright (c) 2010 Daniel Pfeifer <daniel@pfeifer-mail.de>\r\n\n# Many modifications by Rosen Diankov <rosen.diankov@gmail.com>\r\n\n#\r\n\n# Creates source debian files and manages library dependencies\r\n\n#\r\n\n# Features:\r\n\n# \r\n\n# - Automatically generates symbols and run-time dependencies from the build dependencies\r\n\n# - Custom copy of source directory via CPACK_DEBIAN_PACKAGE_SOURCE_COPY\r\n\n# - Simultaneous output of multiple debian source packages for each distribution\r\n\n# - Can specificy distribution-specific dependencies by suffixing DEPENDS with _${DISTRO_NAME}, for example: CPACK_DEBIAN_PACKAGE_DEPENDS_LUCID, CPACK_COMPONENT_MYCOMP0_DEPENDS_LUCID\r\n\n#\r\n\n# Usage:\r\n\n#\r\n\n# set(CPACK_DEBIAN_BUILD_DEPENDS debhelper cmake)\r\n\n# set(CPACK_DEBIAN_PACKAGE_PRIORITY optional)\r\n\n# set(CPACK_DEBIAN_PACKAGE_SECTION devel)\r\n\n# set(CPACK_DEBIAN_CMAKE_OPTIONS \"-DMYOPTION=myvalue\")\r\n\n# set(CPACK_DEBIAN_PACKAGE_DEPENDS mycomp0 mycomp1 some_ubuntu_package)\r\n\n# set(CPACK_DEBIAN_PACKAGE_DEPENDS_UBUNTU_LUCID mycomp0 mycomp1 lucid_specific_package)\r\n\n# set(CPACK_DEBIAN_PACKAGE_NAME mypackage)\r\n\n# set(CPACK_DEBIAN_PACKAGE_REMOVE_SOURCE_FILES unnecessary_file unnecessary_dir/file0)\r\n\n# set(CPACK_DEBIAN_PACKAGE_SOURCE_COPY svn export --force) # if using subversion\r\n\n# set(CPACK_DEBIAN_DISTRIBUTION_NAME ubuntu)\r\n\n# set(CPACK_DEBIAN_DISTRIBUTION_RELEASES karmic lucid maverick natty)\r\n\n# set(CPACK_DEBIAN_CHANGELOG \"  * Extra change log lines\")\r\n\n# set(CPACK_DEBIAN_PACKAGE_SUGGESTS \"ipython\")\r\n\n# set(CPACK_COMPONENT_X_RECOMMENDS \"recommended-package\")\r\n\n##\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DEBIAN/control\r\n\n# debian policy enforce lower case for package name\r\n\n# Package: (mandatory)\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Section: (recommended)\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Priority: (recommended)\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# remove unnecessary folders\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# create the original source tar\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##############################################################################\r\n\n# debian/control\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "##############################################################################\r\n\n# debian/copyright\r\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "##############################################################################\r\n\n# debian/rules\r\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# for reducing size\r\n",
        "Line" : 290,
        "CharPositionInLine" : 18
      },
      "10" : {
        "Text" : "##############################################################################\r\n\n# debian/compat\r\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "##############################################################################\r\n\n# debian/source/format\r\n",
        "Line" : 318,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "##############################################################################\r\n\n# debian/changelog\r\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "##############################################################################\r\n\n# debuild -S\r\n",
        "Line" : 333,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "##############################################################################\r\n\n# dput ppa:your-lp-id/ppa <source.changes>\r\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "3rdparty/assimp/cmake-modules/FindDirectX.cmake" : {
      "ObjectId" : "c8eac1a7d76e53ab2688560b1a103594624155df",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# This file is part of the CMake build system for OGRE\r\n\n#     (Object-oriented Graphics Rendering Engine)\r\n\n# For the latest info, see http://www.ogre3d.org/\r\n\n#\r\n\n# The contents of this file are placed in the public domain. Feel\r\n\n# free to make use of it in any way you like.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -----------------------------------------------------------------------------\r\n\n# Find DirectX SDK\r\n\n# Define:\r\n\n# DirectX_FOUND\r\n\n# DirectX_INCLUDE_DIR\r\n\n# DirectX_LIBRARY\r\n\n# DirectX_ROOT_DIR\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The only platform it makes sense to check for DirectX SDK\r\n",
        "Line" : 18,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# Get path, convert backslashes as ${ENV_DXSDK_DIR}\r\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# construct search paths\r\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# redo search if prefix path changed\r\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# dlls are in DirectX_ROOT_DIR/Developer Runtime/x64|x86\r\n\n# lib files are in DirectX_ROOT_DIR/Lib/x64|x86\r\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# look for dxgi (needed by both 10 and 11)\r\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# look for d3dcompiler (needed by 11)\r\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# look for D3D11 components\r\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "3rdparty/assimp/cmake-modules/FindPkgMacros.cmake" : {
      "ObjectId" : "bc3b145ba85833c5d3c7dab2be6ca43bacbf2ded",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# This file is part of the CMake build system for OGRE\r\n\n#     (Object-oriented Graphics Rendering Engine)\r\n\n# For the latest info, see http://www.ogre3d.org/\r\n\n#\r\n\n# The contents of this file are placed in the public domain. Feel\r\n\n# free to make use of it in any way you like.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################\r\n\n# Provides some common functionality for the FindPackage modules\r\n\n##################################################################\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Begin processing of package\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Display a status message unless FIND_QUIETLY is set\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# replace won't work if var is blank\r\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Construct search paths for includes and libraries from a PREFIX_PATH\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# clear cache variables if a certain variable changed\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test against internal check variable\r\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try to get some hints from pkg-config, if available\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Couple a set of release AND debug libraries (or frameworks)\r\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate debug names from given release names\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the parent dir from DIR to VAR \r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Do the final processing for the package find.\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# skip if already processed during this run\r\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Slightly customised framework finder\r\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "3rdparty/assimp/cmake-modules/FindZLIB.cmake" : {
      "ObjectId" : "c1e20016ba89c6cd0d5e58c41c56f848fe43fa32",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# This file is part of the CMake build system for OGRE\r\n\n#     (Object-oriented Graphics Rendering Engine)\r\n\n# For the latest info, see http://www.ogre3d.org/\r\n\n#\r\n\n# The contents of this file are placed in the public domain. Feel\r\n\n# free to make use of it in any way you like.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find ZLIB\r\n\n# Once done, this will define\r\n\n#\r\n\n#  ZLIB_FOUND - system has ZLIB\r\n\n#  ZLIB_INCLUDE_DIRS - the ZLIB include directories \r\n\n#  ZLIB_LIBRARIES - link these to use ZLIB\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# construct search paths\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# redo search if prefix path changed\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/assimp/cmake-modules/Findassimp.cmake" : {
      "ObjectId" : "300c631e70d47a0c63506bb6d6a078b41d6f036d",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/cmake-modules/PrecompiledHeader.cmake" : {
      "ObjectId" : "99c43a3cbc9713984fdf5e139759a050f343b5f9",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do not consider .c files\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add precompiled header to SourcesVar\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rdparty/assimp/code/CMakeLists.txt" : {
      "ObjectId" : "aeb90e06696141840792165cfff452ad5b8668be",
      "LastModified" : "2014-07-02T21:59:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Listing and grouping of all the source files.\r\n\n# 1) Set the file lists for each component\r\n\n# 2) Create a Source Group for each component, for IDE project orginization\r\n\n# 3) Add libassimp using the file lists (eliminates duplication of file names between\r\n\n#    source groups and library command)\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VC2010 fixes\r\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assimp Files\r\n",
        "Line" : 633,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Model Support\r\n",
        "Line" : 640,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Third-party libraries\r\n",
        "Line" : 681,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Necessary to show the headers in the project when using the VC++ generator:\r\n",
        "Line" : 687,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Old precompiled header\r\n\n# (removed because the precompiled header is not updated when visual studio switch configuration which leads to failed compilation.\r\n\n# Moreover it's a drag to recompile assimp entirely each time a modification is made to one of the included header, which is definitely counter-productive.)\r\n",
        "Line" : 693,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#ADD_MSVC_PRECOMPILED_HEADER(\"AssimpPCH.h\" \"AssimpPCH.cpp\" assimp_src)\r\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# use full version \r\n",
        "Line" : 708,
        "CharPositionInLine" : 31
      },
      "9" : {
        "Text" : "# Build against external unzip, or add ../contrib/unzip so\r\n\n# assimp can #include \"unzip.h\"\r\n",
        "Line" : 716,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# COMPONENT ${LIBASSIMP_COMPONENT})\r\n",
        "Line" : 729,
        "CharPositionInLine" : 9
      },
      "11" : {
        "Text" : "# INSTALL( FILES ${PUBLIC_HEADERS} DESTINATION ${ASSIMP_INCLUDE_INSTALL_DIR}/assimp COMPONENT assimp-dev)\r\n\n# INSTALL( FILES ${COMPILER_HEADERS} DESTINATION ${ASSIMP_INCLUDE_INSTALL_DIR}/assimp/Compiler COMPONENT assimp-dev)\r\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "3rdparty/assimp/port/iOS/IPHONEOS_ARM64_TOOLCHAIN.cmake" : {
      "ObjectId" : "bd7199cc58f2e1cdf1b28c0481842aca505c2212",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/port/iOS/IPHONEOS_ARMV6_TOOLCHAIN.cmake" : {
      "ObjectId" : "5ec416322da259a8ad021df3bdca091fbbf54c10",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/port/iOS/IPHONEOS_ARMV7S_TOOLCHAIN.cmake" : {
      "ObjectId" : "f11519aa41da9536483f7ee8b5a9ad3adb98ff1c",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/port/iOS/IPHONEOS_ARMV7_TOOLCHAIN.cmake" : {
      "ObjectId" : "b7f196c0f5bcbd04d3f138f075312be99627f96e",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/port/iOS/IPHONEOS_I386_TOOLCHAIN.cmake" : {
      "ObjectId" : "22178bb87f96a8c64b643f32b7ba6e62b8bca4a5",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/port/iOS/IPHONEOS_X86_64_TOOLCHAIN.cmake" : {
      "ObjectId" : "3c69ecdb3872a7b17cb227a2de6c1a4f6e28f489",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/port/jassimp/build.xml" : {
      "ObjectId" : "d81d1958a67d3719207eef92df1aa7514892d520",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "3rdparty/assimp/samples/SimpleOpenGL/CMakeLists.txt" : {
      "ObjectId" : "49e5fc212cb9d8895c929835d51fe303b14f855c",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/samples/SimpleTexturedOpenGL/CMakeLists.txt" : {
      "ObjectId" : "cc1db102419f57be33ea158526f8188720ba0b90",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/test/CMakeLists.txt" : {
      "ObjectId" : "87c36a89347b7fc56591e093d2d51128b3c0ba0f",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add the temporary output directories to the library path to make sure the\r\n\n# Assimp library can be found, even if it is not installed system-wide yet.\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Port to non-Windows platforms.\r\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/assimp/tools/assimp_cmd/CMakeLists.txt" : {
      "ObjectId" : "374758db8b95b3d1356be1b3ddc8ad31d448a387",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/assimp/tools/assimp_view/CMakeLists.txt" : {
      "ObjectId" : "ddc18686af250f8f7f291aab0af8efe4b0ed76aa",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the linker can find the Assimp library once it is built.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link the executable to the assimp + dx libs.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rdparty/bullet/BulletCollision/CMakeLists.txt" : {
      "ObjectId" : "e740e98ae6d007f11f8bda247ef9b4b2eb4b941e",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL of other files requires CMake 2.6\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Have to list out sub-directories manually:\n",
        "Line" : 270,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "3rdparty/bullet/BulletCollision/ibmsdk/Makefile" : {
      "ObjectId" : "82d5fd646d714e4a06383f2a3f57f4728d6aef43",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#### Source code Dirs\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Library\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### Compiler flags\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#### Optimization level flags\r\n\n#CC_OPT_LEVEL =  $(CC_OPT_LEVEL_DEBUG)\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##### Objects to be archived in lib\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#### Install directories\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/bullet/BulletDynamics/CMakeLists.txt" : {
      "ObjectId" : "5ddb8e2bb2481d1ee68b2bfea8c92840dcdffbda",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Have to list out sub-directories manually:\r\n",
        "Line" : 104,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 1
    },
    "3rdparty/bullet/BulletDynamics/ibmsdk/Makefile" : {
      "ObjectId" : "988526fd001454945a8634ad60f04e874b14b3b4",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#### Source code Dirs\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Library\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### Compiler flags\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#### Optimization level flags\r\n\n#CC_OPT_LEVEL =  $(CC_OPT_LEVEL_DEBUG)\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##### Objects to be archived in lib\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#### Install directories \r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/bullet/BulletSoftBody/CMakeLists.txt" : {
      "ObjectId" : "25e58f50cb6b90a3848ae8a4ac08b812f9d4c042",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SUBDIRS( Solvers )\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/bullet/CMakeLists.txt" : {
      "ObjectId" : "18f838c554ead8254894d00a29856606ebb5245c",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/bullet/LinearMath/CMakeLists.txt" : {
      "ObjectId" : "7bb0d13a921f3d98cdb24ecf2129684f3a0e5e76",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILES_MATCHING requires CMake 2.6\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "3rdparty/bullet/LinearMath/ibmsdk/Makefile" : {
      "ObjectId" : "a80570aea05ed69230973e3a385ee9035d169f3f",
      "LastModified" : "2014-06-14T09:22:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#### Source code Dirs\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Library\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### Compiler flags\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#### Optimization level flags\r\n\n#CC_OPT_LEVEL =  $(CC_OPT_LEVEL_DEBUG)\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##### Objects to be archived in lib\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#### Install directories\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/fltk/CMake/export.cmake" : {
      "ObjectId" : "971991c92188ec62a7e8606a31ac7eae6c5ee1ad",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# \"$Id: CMakeLists.txt 10092 2014-02-02 00:49:50Z AlbrechtS $\"\n\n#\n\n# Main CMakeLists.txt to build the FLTK project using CMake (www.cmake.org)\n\n# Written by Michael Surette\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# final config and export\n\n#######################################################################\n\n# Set the fluid executable path\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# no export\n",
        "Line" : 32,
        "CharPositionInLine" : 20
      },
      "3" : {
        "Text" : "# export\n",
        "Line" : 39,
        "CharPositionInLine" : 20
      },
      "4" : {
        "Text" : "# generate FLTK-Targets.cmake for build directory use\n\n# export(TARGETS ${FLUID} ${FLTK_LIBRARIES} FILE ${CMAKE_BINARY_DIR}/FLTK-Targets.cmake)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# generate FLTKConfig.cmake for build directory use\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# generate UseFLTK.cmake for build directory use\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# generate config.h\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# generate fltk-config\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/CMake/install.cmake" : {
      "ObjectId" : "78d7a3cdc43668cb6aa976b38a0c2ae351872086",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# \"$Id: CMakeLists.txt 10092 2014-02-02 00:49:50Z AlbrechtS $\"\n\n#\n\n# Main CMakeLists.txt to build the FLTK project using CMake (www.cmake.org)\n\n# Written by Michael Surette\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# installation\n\n#######################################################################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# generate uninstall target\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#install(DIRECTORY ${FLTK_SOURCE_DIR}/FL\n\n#   DESTINATION include USE_SOURCE_PERMISSIONS\n\n#   PATTERN \".svn\" EXCLUDE\n\n#)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#   install(SCRIPT ${FLTK_BINARY_DIR}/install-symlinks.cmake)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# generate FLTKConfig.cmake for installed directory use\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#install(FILES ${FLTK_BINARY_DIR}/etc/FLTKConfig.cmake\n\n#   DESTINATION ${FLTK_CONFIG_PATH}\n\n#)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#install(FILES ${FLTK_BINARY_DIR}/etc/UseFLTK.cmake\n\n#   DESTINATION ${FLTK_CONFIG_PATH}\n\n#)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#   install(FILES\n\n#      ${FLTK_SOURCE_DIR}/documentation/src/${FILE}.man\n\n#      DESTINATION man/man${LEVEL}\n\n#      RENAME ${FILE}.${LEVEL}\n\n#   )\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#   INSTALL_MAN(fluid 1)\n\n#   INSTALL_MAN(fltk-config 1)\n\n#   INSTALL_MAN(fltk 3)\n\n#   INSTALL_MAN(blocks 6)\n\n#   INSTALL_MAN(checkers 6)\n\n#   INSTALL_MAN(sudoku 6)\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "3rdparty/fltk/CMake/macros.cmake" : {
      "ObjectId" : "a513d5f657dea75d7f5b07cd66a6da17bed700de",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# \"$Id: CMakeLists.txt 10092 2014-02-02 00:49:50Z AlbrechtS $\"\n\n#\n\n# macros.cmake defines macros used by the build system\n\n# Written by Michael Surette\n\n#\n\n# Copyright 1998-2014 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# macros used by the build system\n\n#######################################################################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for MSVC static/shared coexistence\n",
        "Line" : 46,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : "#install(TARGETS ${LIBRARY_NAME}\n\n#    EXPORT FLTK-Targets\n\n#    RUNTIME DESTINATION bin\n\n#    LIBRARY DESTINATION lib\n\n#    ARCHIVE DESTINATION lib\n\n#    )\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#######################################################################\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# source files\n",
        "Line" : 81,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# fluid source files\n",
        "Line" : 82,
        "CharPositionInLine" : 18
      },
      "7" : {
        "Text" : "# target name\n\n# output (executable) name\n",
        "Line" : 84,
        "CharPositionInLine" : 24
      },
      "8" : {
        "Text" : "# rename reserved target name \"help\" (CMake 2.8.12 and later)\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# link in optional libraries\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# install the example\n\n#install(TARGETS ${tname}\n\n#    DESTINATION ${FLTK_EXAMPLES_PATH}\n\n#    )\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#######################################################################\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "3rdparty/fltk/CMake/options.cmake" : {
      "ObjectId" : "f6cb1fbb9995337fb4c99005f5c15b1ab1522bdb",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# \"$Id: CMakeLists.txt 10092 2014-02-02 00:49:50Z AlbrechtS $\"\n\n#\n\n# Main CMakeLists.txt to build the FLTK project using CMake (www.cmake.org)\n\n# Written by Michael Surette\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# options\n\n#######################################################################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n\n#######################################################################\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#######################################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#######################################################################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################################\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################################################################\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#######################################################################\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#######################################################################\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#######################################################################\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#######################################################################\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#######################################################################\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#if(OPTION_USE_SYSTEM_LIBPNG AND LIB_png)\n\n#   include(FindPNG)\n\n#endif(OPTION_USE_SYSTEM_LIBPNG AND LIB_png)\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We ship our own\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#######################################################################\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#######################################################################\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#######################################################################\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#######################################################################\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#######################################################################\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "3rdparty/fltk/CMake/resources.cmake" : {
      "ObjectId" : "5fe4063f5f626060149594d636914d1a46542110",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# \"$Id: CMakeLists.txt 10092 2014-02-02 00:49:50Z AlbrechtS $\"\n\n#\n\n# Main CMakeLists.txt to build the FLTK project using CMake (www.cmake.org)\n\n# Written by Michael Surette\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# check for headers, libraries and functions\n\n#######################################################################\n\n# headers\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# where to find freetype headers\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n\n# libraries\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n\n# functions\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# not really true but we convert strcasecmp calls to _stricmp calls in flstring.h\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/fltk/CMake/setup.cmake" : {
      "ObjectId" : "f84633f5bee7b9ebe89d1ca46a38d4cb411d630e",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# \"$Id: CMakeLists.txt 10092 2014-02-02 00:49:50Z AlbrechtS $\"\n\n#\n\n# CMakeLists.txt to build the FLTK project using CMake (www.cmake.org)\n\n# Written by Michael Surette\n\n#\n\n# Copyright 1998-2014 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n\n# basic setup\n\n#######################################################################\n\n# The FLTK version\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for modules in the FLTK source dir first\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n\n# platform dependent information\n\n#######################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# fix no WIN32 defined issue\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set where config and example files go\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "######## from ide/VisualC2010/config.h\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################################\n\n# size of ints\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/CMakeLists.txt" : {
      "ObjectId" : "fec985f2ada76e93c46e0590272b294214e4962f",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# \"$Id: CMakeLists.txt 10368 2014-10-09 16:03:56Z AlbrechtS $\"\n\n#\n\n# Main CMakeLists.txt to build the FLTK project using CMake (www.cmake.org)\n\n# Written by Michael Surette\n\n#\n\n# Copyright 1998-2014 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent annoying warning under Cygwin; this must be before project().\n\n# Remove when CMake >= 2.8.4 is required\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# define some macros\n\n#######################################################################\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n\n# basic setup\n\n#######################################################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n\n# check for headers, libraries and functions\n\n#######################################################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n\n# options\n\n#######################################################################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#######################################################################\n\n# final config and export\n\n#######################################################################\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#######################################################################\n\n# build examples - these have to be after fluid is built/imported\n\n#######################################################################\n\n#if(OPTION_BUILD_EXAMPLES)\n\n#   add_subdirectory(test)\n\n#endif(OPTION_BUILD_EXAMPLES)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################################\n\n# installation\n\n#######################################################################\n\n# include(CMake/install.cmake)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/DartConfig.cmake" : {
      "ObjectId" : "90e1ff6639242944ce002f819794d43b6c752a19",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Dashboard is opened for submissions for a 24 hour period starting at\n\n# the specified NIGHLY_START_TIME. Time is specified in 24 hour format.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dart server to submit results (used by client)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Project Home Page\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Dart server configuration \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Continuous email delivery variables\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/fltk/Makefile" : {
      "ObjectId" : "a0c2f40f6b172f0c3e10eeeff6a308b97904a83b",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 10224 2014-08-01 20:56:09Z greg.ercolano $\"\n\n#\n\n# Top-level makefile for the Fast Light Tool Kit (FLTK).\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#      http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#      http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Run the clang.llvm.org static code analysis tool on the C sources.\n\n# (at least checker-231 is required for scan-build to work this way)\n\n#\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 10224 2014-08-01 20:56:09Z greg.ercolano $\".\n\n#\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rdparty/fltk/cairo/CMakeLists.txt" : {
      "ObjectId" : "2cfa912fd18d652c995670e55a48336d0173d5e7",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# source files for cairo\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/fltk/cairo/Makefile" : {
      "ObjectId" : "0cc8d3b8e4403c6ad3c8ae973e918aa05c0ef5f8",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 5667 2007-02-07 02:35:44Z mike $\"\n\n#\n\n# CAIRO library makefile for the Fast Light Toolkit (FLTK).\n\n#\n\n# Copyright 1997-2009 by Easy Software Products.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Object files...\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Make all of the targets...\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Clean all of the targets and object files...\n\n#\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Install everything...\n\n#\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Uninstall everything...\n\n#\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 5667 2007-02-07 02:35:44Z mike $\".\n\n#\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rdparty/fltk/documentation/Makefile" : {
      "ObjectId" : "ab2ea741900be42d586708e923df422176496ab7",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 10361 2014-10-05 22:39:31Z AlbrechtS $\"\n\n#\n\n# Documentation makefile for the Fast Light Tool Kit (FLTK).\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#      http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get configuration stuff...\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that all docs are (re-)created independent of missing deps\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are the HTML \"source\" files...\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# use make dist to create all docs for distribution files\n\n# you need an installed version of doxygen for this\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# synonym for dist\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The HTML files are now generated using doxygen, and this needs\n\n# an installed doxygen version and may take some time, so this target\n\n# is not made by default.\n\n# Use `make html' or `make dist' to create the html docs\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# this is only used to minimize subversion updates of the online docs\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 10361 2014-10-05 22:39:31Z AlbrechtS $\".\n\n#\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/examples/Makefile" : {
      "ObjectId" : "def7376c9d1bafa6d32e1c370d8319ba4c87478d",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Executables\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default target -- build everything\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clean everything\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rdparty/fltk/fluid/CMakeLists.txt" : {
      "ObjectId" : "bcb4d90033fbaed50c77ce2651a076a5d181370e",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# link in optional libraries\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#install(TARGETS fluid\n\n#    EXPORT FLTK-Targets\n\n#    RUNTIME DESTINATION bin\n\n#    LIBRARY DESTINATION lib\n\n#    ARCHIVE DESTINATION lib\n\n#    )\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/fltk/fluid/Makefile" : {
      "ObjectId" : "4b7747ce12f1ffd2e8d4642d57f1cde324883327",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 9981 2013-09-21 17:23:09Z greg.ercolano $\"\n\n#\n\n# FLUID makefile for the Fast Light Tool Kit (FLTK).\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#      http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#      http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Automatically generated dependencies...\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Note: The rebuild target can only be used if you have the original .fl\n\n#       files.  This is normally only used by the FLTK maintainers...\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 9981 2013-09-21 17:23:09Z greg.ercolano $\".\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/fltk/jpeg/CMakeLists.txt" : {
      "ObjectId" : "20e215b639a3718dd381b6b21561bde22143ce69",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# memmgr back ends: compile only one of these into a working library\n\n# (For now, let's use the mode that requires the image fit into memory.\n\n# This is the recommended mode for Win32 anyway.)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# library object files common to compression and decompression\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compression library object files\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# decompression library object files\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#######################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#######################################################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################################\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/jpeg/Makefile" : {
      "ObjectId" : "32bc432c4f48760141a56766e6ed794789772d4b",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 8864 2011-07-19 04:49:30Z greg.ercolano $\"\n\n#\n\n# JPEG library makefile for the Fast Light Toolkit (FLTK).\n\n#\n\n# Copyright 1997-2011 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Object files...\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Make all targets...\n\n#\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Clean all targets and object files...\n\n#\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Install everything...\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Uninstall everything...\n\n#\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# libfltk_jpeg.a\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Make dependencies...\n\n#\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 8864 2011-07-19 04:49:30Z greg.ercolano $\".\n\n#\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/png/CMakeLists.txt" : {
      "ObjectId" : "4ebb905290d3c054ffff57916e35567ec68eebb5",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# source files for png\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/fltk/png/Makefile" : {
      "ObjectId" : "073b63f9c272c1d06ac05375091223bee201a719",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 8864 2011-07-19 04:49:30Z greg.ercolano $\"\n\n#\n\n# PNG library makefile for the Fast Light Toolkit (FLTK).\n\n#\n\n# Copyright 1997-2011 by Easy Software Products.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Object files...\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Make all of the targets...\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Clean all of the targets and object files...\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Install everything...\n\n#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Uninstall everything...\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# libfltk_png.a\n\n#\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Make dependencies...\n\n#\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 8864 2011-07-19 04:49:30Z greg.ercolano $\".\n\n#\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/src/CMakeLists.txt" : {
      "ObjectId" : "d53ab80018fa3b47277b3656a6ca36ef0b4652ae",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#######################################################################\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n\n#######################################################################\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#######################################################################\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#######################################################################\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################################\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#######################################################################\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#######################################################################\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "3rdparty/fltk/src/Makefile" : {
      "ObjectId" : "d55ea702f2c53d3bcaa2a6e70fa7b86a3ce62494",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 10419 2014-10-30 16:05:22Z AlbrechtS $\"\n\n#\n\n# Library makefile for the Fast Light Tool Kit (FLTK).\n\n#\n\n# Copyright 1998-2014 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#      http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#      http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------\n\n# - the import libraries libfltk*.dll.a and the .dll files\n\n#   are created from the libfltk*.a files. They are built\n\n#   into the src dir.\n\n# - The _images, _gl, _forms and dlls must be linked\n\n#   against the import libraries in the src dir.\n\n#-----------------------------------------------------------------\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------\n\n# cygwin GDI shared libraries\n\n#-----------------------------------------------------------------\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------\n\n# cygwin X11 shared libraries\n\n#-----------------------------------------------------------------\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------\n\n# See STR #1585 for --exclude-libs\n\n#-----------------------------------------------------\n",
        "Line" : 456,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Automatically generated dependencies... generated on a Linux/Unix host !\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These dependencies aren't part of the makedepend file since\n\n# they are part of the WIN32 and MacOS code base...\n\n# Please add only non-Linux/Unix files or such that are optional\n\n# (like \"*xft*\") here:\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 10419 2014-10-30 16:05:22Z AlbrechtS $\".\n\n#\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "3rdparty/fltk/src/xutf8/utils/Makefile" : {
      "ObjectId" : "3bed422c767f014a858f78d946f45dcd91dd82ec",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "3rdparty/fltk/test/CMakeLists.txt" : {
      "ObjectId" : "072fb852fd7cc9df45c08a79b066385e98e1c1e5",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#######################################################################\n\n# audio libs for test apps\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OpenGL demos...\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cairo demo\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/fltk/test/Makefile" : {
      "ObjectId" : "e4dfd49f0704c9b21af909e2141f399d57b5c457",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 10339 2014-09-26 23:58:05Z AlbrechtS $\"\n\n#\n\n# Test/example program makefile for the Fast Light Tool Kit (FLTK).\n\n#\n\n# Copyright 1998-2010 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#      http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#      http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automatically generated dependencies...\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FLUID file rules\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# All demos depend on the FLTK library...\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# General demos...\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This ensures that we have this dependency even if threads are not\n\n# enabled in the current tree...\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All OpenGL demos depend on the FLTK and FLTK_GL libraries...\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# OpenGL demos...\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 10339 2014-09-26 23:58:05Z AlbrechtS $\".\n\n#\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/fltk/zlib/CMakeLists.txt" : {
      "ObjectId" : "e96080622f8e99a3a9e56d1c72676ef4d17cf653",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# source files for zlib\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#######################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#######################################################################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/fltk/zlib/Makefile" : {
      "ObjectId" : "94def5d7d54930e004e3c44d384af4174b0673ea",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# \"$Id: Makefile 8864 2011-07-19 04:49:30Z greg.ercolano $\"\n\n#\n\n# GNU ZIP library makefile for the Fast Light Toolkit (FLTK).\n\n#\n\n# Copyright 1998-2011 by Bill Spitzak and others.\n\n#\n\n# This library is free software. Distribution and use rights are outlined in\n\n# the file \"COPYING\" which should have been included with this file.  If this\n\n# file is missing or damaged, see the license at:\n\n#\n\n#     http://www.fltk.org/COPYING.php\n\n#\n\n# Please report all bugs and problems on the following page:\n\n#\n\n#     http://www.fltk.org/str.php\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Object files...\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Make all targets...\n\n#\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Clean all targets and object files...\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Install everything...\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Uninstall everything...\n\n#\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# libfltk_z.a\n\n#\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Make dependencies...\n\n#\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# End of \"$Id: Makefile 8864 2011-07-19 04:49:30Z greg.ercolano $\".\n\n#\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "3rdparty/freetype/CMakeLists.txt" : {
      "ObjectId" : "ef809b1f69671d271d2814f7f4bd2e3033df0bae",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/glew/CMakeLists.txt" : {
      "ObjectId" : "507b4d708d11c5af53a7b967547a9d9cbf98e9d8",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# INSTALL( TARGETS libglew_static DESTINATION lib )\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# INSTALL( TARGETS libglew_shared DESTINATION lib )\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# INSTALL( FILES ${PUBLIC_HEADERS} DESTINATION include/GL/ )\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# INSTALL( TARGETS glewinfo visualinfo DESTINATION bin )\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "3rdparty/glew/Makefile" : {
      "ObjectId" : "140f03a9841c968e0e34665b96413d2f4c5d0364",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#!gmake\n\n## The OpenGL Extension Wrangler Library\n\n## Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>\n\n## Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>\n\n## Copyright (C) 2002, Lev Povalahev\n\n## All rights reserved.\n\n## \n\n## Redistribution and use in source and binary forms, with or without \n\n## modification, are permitted provided that the following conditions are met:\n\n## \n\n## * Redistributions of source code must retain the above copyright notice, \n\n##   this list of conditions and the following disclaimer.\n\n## * Redistributions in binary form must reproduce the above copyright notice, \n\n##   this list of conditions and the following disclaimer in the documentation \n\n##   and/or other materials provided with the distribution.\n\n## * The name of the author may be used to endorse or promote products \n\n##   derived from this software without specific prior written permission.\n\n##\n\n## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n\n## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE \n\n## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE \n\n## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n\n## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n\n## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n\n## THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# To disable stripping of binaries either:\n\n#   - use STRIP= on gmake command-line\n\n#   - edit this makefile to set STRIP to the empty string\n\n#\n\n# To disable symlinks:\n\n#   - use LN= on gmake command-line\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GLEW shared and static libraries\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Force re-write of glew.pc, GLEW_DEST can vary\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GLEW MX static and shared libraries\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Force re-write of glewmx.pc, GLEW_DEST can vary\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# GLEW utility programs\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Don't build glewinfo or visualinfo for NaCL, yet.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install targets\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# runtime\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# development files\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# runtime\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# development files\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Distributions\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "3rdparty/glew/auto/Makefile" : {
      "ObjectId" : "e05ceef43dec730e92d15ee71d5acb2ae9397ab4",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## Copyright (C) 2002-2008, Marcelo E. Magallon <mmagallo[]debian org>\n\n## Copyright (C) 2002-2008, Milan Ikits <milan ikits[]ieee org>\n\n##\n\n## This program is distributed under the terms and conditions of the GNU\n\n## General Public License Version 2 as published by the Free Software\n\n## Foundation or, at your option, any later version.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#GLEW_SPLIT_SOURCE = yes\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Use git repository for GL extension specifications\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n### Conventional desktop OpenGL settings\n\n###\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n### Experimental OpenGL ES settings\n\n###\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# REGISTRY     = registry/gles\n\n# EXT          = extensions/gles\n\n# FILTER       = filter_gles_ext.sh\n\n# CORE         = core/gles\n\n# REGISTRY_URL = http://www.khronos.org/registry/gles/\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#GL_CORE_SPEC  := $(shell grep GL_VERSION custom.txt    |                       perl -pi -e \"s=^=$(CORE)/=g;\")\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#GLX_CORE_SPEC := $(shell grep GLX_VERSION custom.txt   |                       perl -pi -e \"s=^=$(CORE)/=g;\")\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tperl -e \"s/GLEW_VERSION_STRING/$(GLEW_VERSION)/g\" -pi $@\n\n#\tperl -e \"s/GLEW_ARB_vertex_shader = !_glewInit_GL_ARB_vertex_shader\\(GLEW_CONTEXT_ARG_VAR_INIT\\);/{ GLEW_ARB_vertex_shader = !_glewInit_GL_ARB_vertex_shader(GLEW_CONTEXT_ARG_VAR_INIT); _glewInit_GL_ARB_vertex_program(GLEW_CONTEXT_ARG_VAR_INIT); }/g\" -pi $@\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Update documentation\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#<a href=\"$(@F)\">(.*)</a>#\\1#' > $@\n",
        "Line" : 347,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "#<a href=\"$(@F)\">(.*)</a>#\\1#' $@\n",
        "Line" : 357,
        "CharPositionInLine" : 15
      },
      "12" : {
        "Text" : "#<a href=\"$(@F)\">(.*)</a>#\\1#' $@\n",
        "Line" : 367,
        "CharPositionInLine" : 15
      },
      "13" : {
        "Text" : "#<a href=\"$(@F)\">(.*)</a>#\\1#' $@\n",
        "Line" : 377,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 14
    },
    "3rdparty/glew/build/vc6/Makefile" : {
      "ObjectId" : "9f0ab41c83a3a15673f0cd9032f91f6406f42e93",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "3rdparty/gtest/CMakeLists.txt" : {
      "ObjectId" : "57470c84f3af0772c411bbb8bbbb41b515747ecd",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "3rdparty/gtest/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "3rdparty/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "3rdparty/gtest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "3rdparty/gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rdparty/libjpeg/CMakeLists.txt" : {
      "ObjectId" : "bddf155a1befb4b0a63b3db85e07fae1dad69883",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/libogg/CMakeLists.txt" : {
      "ObjectId" : "ac0d9d5ee4ea44dcbaec34c0c1aba503b80569bb",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/libpng/CMakeLists.txt" : {
      "ObjectId" : "22e9717264870436089701f8aa2ba2e95f65ae67",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/libvorbis/CMakeLists.txt" : {
      "ObjectId" : "1c3576a9b586d57e2dc7844833c3950d1706cf7d",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/libzip/CMakeLists.txt" : {
      "ObjectId" : "90139e6aaa32b54d7b986c593dcc2f1f6953b455",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# XXX: TODO\n\n# 1. pkgconfig file not yet built.\n\n# 2. installation not tested.\n\n# 3. Problems generating html pages.\n\n# 4. distribution tarball not checked for unwanted/missing content.\n\n# 5. create usable libtool .la file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(PACKAGE \"libzip\")\n\n#SET(PACKAGE_NAME ${PACKAGE})\n\n#SET(PACKAGE_VERSION_MAJOR \"0\")\n\n#SET(PACKAGE_VERSION_MINOR \"10\")\n\n#SET(PACKAGE_VERSION_PATCH \"1\")\n\n#SET(VERSION \"${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}\")\n\n#SET(PACKAGE_VERSION ${VERSION})\n\n#SET(PACKAGE_STRING \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Checks\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIND_PACKAGE(ZLIB REQUIRED)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ADD_SUBDIRECTORY(man)\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#ADD_SUBDIRECTORY(regress)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# XXX: pkgconfig file\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# installation\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# XXX: pkgconfig file\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# packaging\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"library for manipulating zip archives\")\n\n#SET(CPACK_PACKAGE_VENDOR \"Dieter Baron <dillo@giga.or.at> and Thomas Klausner <tk@giga.or.at>\")\n\n#SET(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README\")\n\n#SET(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\n\n#SET(CPACK_PACKAGE_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})\n\n#SET(CPACK_PACKAGE_VERSION_MINOR ${PACKAGE_VERSION_MINOR})\n\n#SET(CPACK_PACKAGE_VERSION_PATCH ${PACKAGE_VERSION_PATCH})\n\n#SET(CPACK_SOURCE_PACKAGE_FILE_NAME ${PACKAGE_NAME}-${PACKAGE_VERSION})\n\n#SET(CPACK_GENERATOR \"TGZ\")\n\n#SET(CPACK_SOURCE_GENERATOR \"TGZ\")\n\n#SET(CPACK_SOURCE_IGNORE_FILES\n\n#  \".a$\"\n\n#  \".cmake$\"\n\n#  \".o$\"\n\n#  \".so$\"\n\n#  \"/.deps/\"\n\n#  \"/.libs/\"\n\n#  \"/CMakeFiles/\"\n\n#  \"/CVS/\"\n\n#  \"/autom4te.cache/\"\n\n#  \"/build\"\n\n#  \"/broken\"\n\n#  \"/docs/\"\n\n#  \"AdditionalInfo.txt$\"\n\n#  \"CMakeCache.txt$\"\n\n#  \"Makefile$\"\n\n#  \"\\\\\\\\.sh$\"\n\n#  \"_CPack_\"\n\n#  \"config.h$\"\n\n#  \"config.log$\"\n\n#  \"config.status$\"\n\n#  \"html$\"\n\n#  \"install_manifest.txt$\"\n\n#  \"stamp-h1$\"\n\n#  \"tar.bz2\"\n\n#  \"tar.gz\"\n\n#  \"~$\"\n\n#)\n\n#SET(CPACK_SOURCE_STRIP_FILES \"\")\n\n#INCLUDE(CPack)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# write out config file\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/zipconf.h DESTINATION lib/libzip/include)\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "3rdparty/libzip/Makefile.am" : {
      "ObjectId" : "da122f961fb6b5ba74838e79c2ff4a8f608ecca3",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# not GPL, thus no COPYING\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/libzip/lib/CMakeLists.txt" : {
      "ObjectId" : "857d6deff9b918a333e4a94fe4aed5e7a221e486",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL(FILES zip.h DESTINATION include)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# from http://www.cmake.org/Wiki/CMakeMacroLibtoolFile\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# XXX: distribute instead?\n\n#ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/zip_err_str.c\n\n#  COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/make_zip_err_str.sh\n\n#    ${CMAKE_CURRENT_SOURCE_DIR}/zip.h\n\n#    ${CMAKE_CURRENT_BINARY_DIR}/zip_err_str.c\n\n#  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/zip.h\n\n#    ${CMAKE_CURRENT_SOURCE_DIR}/make_zip_err_str.sh\n\n#)\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CREATE_LIBTOOL_FILE(zip lib)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "3rdparty/libzip/lib/Makefile.am" : {
      "ObjectId" : "9f7be38e859b3511b6ca786ed21935aefc2eb886",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# also update CMakeLists.txt when changing version\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/libzip/man/CMakeLists.txt" : {
      "ObjectId" : "19c0eaa80de3db2a1a10bffda71007cddb59ac39",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# installation\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# XXX: usually symlinks, but I only know how to do this way\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# custom maintainer targets\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#FOREACH(MAN ${MAN_PAGES})\n\n#  ADD_CUSTOM_TARGET(${MAN}.man\n\n#    DEPENDS ${MAN}.mdoc\n\n#    COMMAND mdoc2man ${CMAKE_CURRENT_SOURCE_DIR}/${MAN}.mdoc > ${MAN}.new\n\n#    COMMAND diff -I NiH ${MAN}.new ${CMAKE_CURRENT_SOURCE_DIR}/${MAN}.man || mv ${MAN}.new ${CMAKE_CURRENT_SOURCE_DIR}/${MAN}.man\n\n#    COMMAND rm -f ${MAN}.new\n\n#    COMMENT Updating man page ${MAN}.man\n\n#    )\n\n#  ADD_CUSTOM_TARGET(${MAN}.html\n\n#    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${MAN}.mdoc\n\n#    COMMAND nroff -mdoc2html ${CMAKE_CURRENT_SOURCE_DIR}/${MAN}.mdoc | sed -e \"s,../html[0-9]/,,\" > ${MAN}.html\n\n#    COMMENT Updating HTML page ${MAN}.html\n\n#    )\n\n#ENDFOREACH(MAN)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#STRING(REGEX REPLACE .mdoc .man MANDEPEND \"${MDOC_PAGES}\")\n\n#ADD_CUSTOM_TARGET(update-man\n\n#  DEPENDS ${MANDEPEND})\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#STRING(REGEX REPLACE .mdoc .html HTMLDEPEND \"${MDOC_PAGES}\")\n\n#ADD_CUSTOM_TARGET(update-html\n\n#  DEPENDS ${HTMLDEPEND})\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# XXX: strange error:\n\n#[ 94%] zipcmp.html\n\n#[ 97%] Built target zipcmp.html\n\n#[ 97%] zipmerge.html\n\n#[100%] Built target zipmerge.html\n\n#make: don't know how to make zipcmp.html. Stop\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# XXX: why are all the man pages rebuilt on a second 'make update-html'?\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "3rdparty/libzip/man/Makefile.am" : {
      "ObjectId" : "a4e5a69fe3232db7eb71e900f42c2cece9e572fb",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/libzip/regress/CMakeLists.txt" : {
      "ObjectId" : "bf628869d40a8b382f8d225040b6a4ea8dce694b",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/libzip/regress/Makefile.am" : {
      "ObjectId" : "0f9ef054afe28d222e8f661f92cc89d3c778b856",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# problems with comparing stderr output\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/libzip/src/CMakeLists.txt" : {
      "ObjectId" : "462a2e2e18726ca757cfc8c4706fcd0d1293eda9",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/../lib\n\n#  ${CMAKE_CURRENT_BINARY_DIR}/..)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#CHECK_FUNCTION_EXISTS(getopt HAVE_GETOPT)\n\n#IF(NOT HAVE_GETOPT)\n\n#  SET(SRC_EXTRA_FILES getopt.c)\n\n#ENDIF(NOT HAVE_GETOPT)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ADD_EXECUTABLE(zipcmp zipcmp.c ${SRC_EXTRA_FILES})\n\n#TARGET_LINK_LIBRARIES(zipcmp zip)\n\n#INSTALL(TARGETS zipcmp RUNTIME DESTINATION bin)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ADD_EXECUTABLE(zipmerge zipmerge.c ${SRC_EXTRA_FILES})\n\n#TARGET_LINK_LIBRARIES(zipmerge zip)\n\n#INSTALL(TARGETS zipmerge RUNTIME DESTINATION bin)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ADD_EXECUTABLE(ziptorrent ziptorrent.c ${SRC_EXTRA_FILES})\n\n#TARGET_LINK_LIBRARIES(ziptorrent zip)\n\n#INSTALL(TARGETS ziptorrent RUNTIME DESTINATION bin)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/libzip/src/Makefile.am" : {
      "ObjectId" : "7fa4b8e25860ab79fd269ecfa102af3cd8c28616",
      "LastModified" : "2015-05-03T10:35:07Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/lua-standard/CMakeLists.txt" : {
      "ObjectId" : "76f96c25a1f3357b97f11c26c3d0e0ec15bce2ca",
      "LastModified" : "2015-05-23T21:19:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2007-2013 LuaDist.\n\n# Created by Peter DrahoÅ¡, Peter Kapec\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## CONFIGURATION\n\n# Default configuration (we assume POSIX by default)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#2DO: LUAI_* and LUAL_* settings, for now defaults are used.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This will set up relative paths to lib\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Direct path to installation\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Windows systems\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Paths (Double escapes ne  option needed)\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Posix systems (incl. Cygwin)\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Apple and Linux specific\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "## SETUP\n\n# Optional libraries\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Setup needed variables and libraries\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# On POSIX Lua links to standard math library \"m\"\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Link to dynamic linker library \"dl\"\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Add readline\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Add curses\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "## SOURCES\n\n# Generate luaconf.h\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Sources and headers\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Use modified loadlib\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "## BUILD\n\n# Create lua library\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# On windows a variant of the lua interpreter without console output needs to be built\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#install_executable ( wlua )\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#install_executable ( lua luac )\n\n#install_targets (${NEO_INSTALL_DIR} liblua )\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#install_data ( README.md )\n\n#install_lua_module ( strict etc/strict.lua )\n\n#install_header ( src/lua.h src/lualib.h src/lauxlib.h src/lua.hpp ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h )\n\n#install_doc ( doc/ )\n\n#install_foo ( etc/ )\n\n#install_test ( test/ )\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "3rdparty/lua-standard/Makefile" : {
      "ObjectId" : "d2c7db4a2da841565b3f1f0e19a84b82dcaefe5e",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for installing Lua\n\n# See doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Other utilities.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# What to install.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Targets start here.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# echo config parameters\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "3rdparty/lua-standard/cmake/FindLua.cmake" : {
      "ObjectId" : "7fb7ca3f4f9de67e22efade7d6827f3ecdef6a51",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_EXECUTABLE, if found\n\n#  LUA_FOUND, if false, do not try to link to Lua \n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Modified to support Lua 5.2 by LuaDist 2012\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# The required version of Lua can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Lua 5.1)\n\n# Otherwise the module will search for any available Lua implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always search for non-versioned lua first (recommended)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine possible naming suffixes (there is no standard for this)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up possible search names and locations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the lua executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the lua header\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 69,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 70,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# Find the lua library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Determine Lua version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "3rdparty/lua-standard/cmake/FindReadline.cmake" : {
      "ObjectId" : "5401a9b4273fa11de9abcf5c94b3e78f2a73c303",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Readline\n\n# Once done this will define\n\n#  READLINE_FOUND - System has readline\n\n#  READLINE_INCLUDE_DIRS - The readline include directories\n\n#  READLINE_LIBRARIES - The libraries needed to use readline\n\n#  READLINE_DEFINITIONS - Compiler switches required for using readline\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/lua-standard/cmake/dist.cmake" : {
      "ObjectId" : "f2b37c7f1ca0b2c03a8608b37d7508363d3af1b5",
      "LastModified" : "2015-05-23T21:19:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library.\n\n# Provides sane project defaults and macros common to LuaDist CMake builds.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter DrahoÅ¡\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Extract information from dist.info\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reads field `name` from dist.info string `DIST_INFO` into variable `var`.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## 2DO: Parse DIST_DEPENDS and try to install Dependencies with automatically using externalproject_add\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)\n\n# Primary paths\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Secondary paths\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tweaks and other defaults\n\n# Setting CMAKE to use loose block and search for find modules in source directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# In MSVC, prevent warnings that can occur when using standard libraries.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# RPath and relative linking\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## MACROS\n\n# Parser macro\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# install_executable ( executable_targets )\n\n# Installs any executables generated using \"add_executable\".\n\n# USE: install_executable ( lua )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# install_library ( library_targets )\n\n# Installs any libraries generated using \"add_library\" into apropriate places.\n\n# USE: install_library ( libexpat )\n\n# NOTE: subdirectories are NOT supported\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# helper function for various install_* functions, for PATTERN/REGEX args.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# install_header ( files/directories [INTO destination] )\n\n# Install a directories or files into header destination.\n\n# USE: install_header ( lua.h luaconf.h ) or install_header ( GL )\n\n# USE: install_header ( mylib.h INTO mylib )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# install_data ( files/directories [INTO destination] )\n\n# This installs additional data files or directories.\n\n# USE: install_data ( extra data.dat )\n\n# USE: install_data ( image1.png image2.png INTO images )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# INSTALL_DOC ( files/directories [INTO destination] )\n\n# This installs documentation content\n\n# USE: install_doc ( doc/ doc.pdf )\n\n# USE: install_doc ( index.html INTO html )\n\n# For directories, supports optional PATTERN/REGEX arguments like install().\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# install_example ( files/directories [INTO destination]  )\n\n# This installs additional examples\n\n# USE: install_example ( examples/ exampleA )\n\n# USE: install_example ( super_example super_data INTO super)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# install_test ( files/directories [INTO destination] )\n\n# This installs tests and test files, DOES NOT EXECUTE TESTS\n\n# USE: install_test ( my_test data.sql )\n\n# USE: install_test ( feature_x_test INTO x )\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# install_foo ( files/directories [INTO destination] )\n\n# This installs optional or otherwise unneeded content\n\n# USE: install_foo ( etc/ example.doc )\n\n# USE: install_foo ( icon.png logo.png INTO icons)\n\n# For directories, supports optional PATTERN/REGEX argument like install().\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## CTest defaults\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## CPack defaults\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## include ( CPack )\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "3rdparty/lua-standard/cmake/lua.cmake" : {
      "ObjectId" : "a0f3e67d1f90d70496efbd5b13843a4896176d58",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library for Lua.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahos\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of (Lua module name, file path) pairs.\n\n# Used internally by add_lua_test.  Built by add_lua_module.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# utility function: appends path `path` to path `basepath`, properly\n\n# handling cases when `path` may be relative or absolute.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install_lua_executable ( target source )\n\n# Automatically generate a binary wrapper for lua application and install it\n\n# The wrapper and the source of the application will be placed into /bin\n\n# If the application source did not have .lua suffix then it will be added\n\n# USE: lua_executable ( sputnik src/sputnik.lua )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# _target is CMake-compatible target name for module (e.g. socket_core).\n\n# _module is relative path of target (e.g. socket/core),\n\n#   without extension (e.g. .lua/.so/.dll).\n\n# _MODULE_SRC is list of module source files (e.g. .lua and .c files).\n\n# _MODULE_NAMES is list of module names (e.g. socket.core).\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Lua source module\n",
        "Line" : 194,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : "# Lua C binary module\n",
        "Line" : 211,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "# add_lua_module\n\n# Builds a Lua source module into a destination locatable by Lua\n\n# require syntax.\n\n# Binary modules are also supported where this function takes sources and\n\n# libraries to compile separated by LINK keyword.\n\n# USE: add_lua_module ( socket.http src/http.lua )\n\n# USE2: add_lua_module ( mime.core src/mime.c )\n\n# USE3: add_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n\n# USE4: add_lua_module ( ssl.context ssl.core ALL_IN_ONE src/context.c src/ssl.c )\n\n#   This form builds an \"all-in-one\" module (e.g. ssl.so or ssl.dll containing\n\n#   both modules ssl.context and ssl.core).  The CMake target name will be\n\n#   ssl_all_in_one.\n\n# Also sets variable _module_path (relative path where module typically\n\n# would be installed).\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install_lua_module\n\n# This is the same as `add_lua_module` but also installs the module.\n\n# USE: install_lua_module ( socket.http src/http.lua )\n\n# USE2: install_lua_module ( mime.core src/mime.c )\n\n# USE3: install_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds string representing Lua table mapping Lua modules names to file\n\n# paths.  Used internally.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# avoids cmake complaint\n",
        "Line" : 268,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : "# add_lua_test ( _testfile [ WORKING_DIRECTORY _working_dir ] )\n\n# Runs Lua script `_testfile` under CTest tester.\n\n# Optional named argument `WORKING_DIRECTORY` is current working directory to\n\n# run test under (defaults to ${CMAKE_CURRENT_BINARY_DIR}).\n\n# Both paths, if relative, are relative to ${CMAKE_CURRENT_SOURCE_DIR}.\n\n# Any modules previously defined with install_lua_module are automatically\n\n# preloaded (via package.preload) prior to running the test script.\n\n# Under LuaDist, set test=true in config.lua to enable testing.\n\n# USE: add_lua_test ( test/test1.lua [args...] [WORKING_DIRECTORY dir])\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Write wrapper script.\n\n# Note: One simple way to allow the script to find modules is\n\n# to just put them in package.preload.\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# note: CMake 2.6 (unlike 2.8) lacks WORKING_DIRECTORY parameter.\n",
        "Line" : 328,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# see also http://gdcm.svn.sourceforge.net/viewvc/gdcm/Sandbox/CMakeModules/UsePythonTest.cmake\n\n# Note: ${CMAKE_CFG_INTDIR} is a command-line argument to allow proper\n\n# expansion by the native build tool.\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Converts Lua source file `_source` to binary string embedded in C source\n\n# file `_target`.  Optionally compiles Lua source to byte code (not available\n\n# under LuaJIT2, which doesn't have a bytecode loader).  Additionally, Lua\n\n# versions of bin2c [1] and luac [2] may be passed respectively as additional\n\n# arguments.\n\n#\n\n# [1] http://lua-users.org/wiki/BinToCee\n\n# [2] http://lua-users.org/wiki/LuaCompilerInLua\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "3rdparty/lua-standard/src/Makefile" : {
      "ObjectId" : "7b4b2b75420b876d0116b8af25c11ac44288ce10",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "3rdparty/lua/CMakeLists.txt" : {
      "ObjectId" : "42515cdcdc29477f25f20f96435d1c2a5c6fbe5f",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2007-2013 LuaDist.\n\n# Created by Peter DrahoÅ¡\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: This build is currently only supporting x86 targets, for other targets use the original makefile. Please do not submit bugs to the LuaJIT author in case this build fails, instead use http://github.com/LuaDist/luajit\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## CONFIGURATION\n\n# Default configuration (we assume POSIX by default)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Version\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Extra flags\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Tunable variables\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## SETUP\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This will set up relative paths to lib\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Direct path to installation\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Windows systems\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Paths (Double escapes needed)\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "## LIBRARY DETECTION\n\n# Optional libraries\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Setup needed variables and libraries\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# On POSIX Lua links to standard math library \"m\"\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Link to dynamic linker library \"dl\"\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Add readline\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Add curses\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "## SOURCES\n\n# Generate luaconf.h\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## GENERATE VM\n\n# Build minilua\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Dynasm\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# 2DO: Proper detection of flags\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Raspberry PI, ARM\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Windows is ... special\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# 32bit vs 64bit\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Generate buildvm arch header\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Buildvm\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## LuaJIT Library\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## LuaJIT Executable\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# On Windows build a no-console variant also\n\n# if ( LUA_BUILD_WLUA )\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# add_executable ( wluajit WIN32 src/wmain.c src/luajit.c src/luajit.rc )\n\n# target_link_libraries ( wluajit liblua )\n\n# install_executable ( wluajit )\n",
        "Line" : 316,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "#endif ()\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## INSTALL\n\n# install_executable( luajit )\n\n# install_library( liblua )\n\n# install_header( src/lua.h src/luajit.h src/lua.hpp ${CMAKE_CURRENT_BINARY_DIR}/luaconf.h src/lualib.h src/lauxlib.h )\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# install_doc ( doc/ )\n\n# install_foo ( etc/ )\n\n# install_data ( COPYRIGHT README.md )\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "3rdparty/lua/Makefile" : {
      "ObjectId" : "b23b64816d21061c89d7062400f9480bea92abb7",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT top level Makefile for installation. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Note: src/Makefile has many more configurable options.\n\n#\n\n# ##### This Makefile is NOT useful for Windows! #####\n\n# For MSVC, please follow the instructions given in src/msvcbuild.bat.\n\n# For MinGW and Cygwin, cd to src and run make with the Makefile there.\n\n#\n\n# Copyright (C) 2005-2014 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#\n\n# Change the installation path as needed. This automatically adjusts\n\n# the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/lua/cmake/FindLua.cmake" : {
      "ObjectId" : "7fb7ca3f4f9de67e22efade7d6827f3ecdef6a51",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_EXECUTABLE, if found\n\n#  LUA_FOUND, if false, do not try to link to Lua \n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Modified to support Lua 5.2 by LuaDist 2012\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# The required version of Lua can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Lua 5.1)\n\n# Otherwise the module will search for any available Lua implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always search for non-versioned lua first (recommended)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine possible naming suffixes (there is no standard for this)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up possible search names and locations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the lua executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the lua header\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 69,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 70,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# Find the lua library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Determine Lua version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "3rdparty/lua/cmake/FindReadline.cmake" : {
      "ObjectId" : "5401a9b4273fa11de9abcf5c94b3e78f2a73c303",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Readline\n\n# Once done this will define\n\n#  READLINE_FOUND - System has readline\n\n#  READLINE_INCLUDE_DIRS - The readline include directories\n\n#  READLINE_LIBRARIES - The libraries needed to use readline\n\n#  READLINE_DEFINITIONS - Compiler switches required for using readline\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set READLINE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/lua/cmake/dist.cmake" : {
      "ObjectId" : "8fac1474301ac1d70d12ccb816c1232b3df33068",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library.\n\n# Provides sane project defaults and macros common to LuaDist CMake builds.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter DrahoÅ¡\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Extract information from dist.info\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reads field `name` from dist.info string `DIST_INFO` into variable `var`.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## 2DO: Parse DIST_DEPENDS and try to install Dependencies with automatically using externalproject_add\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## INSTALL DEFAULTS (Relative to CMAKE_INSTALL_PREFIX)\n\n# Primary paths\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Secondary paths\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tweaks and other defaults\n\n# Setting CMAKE to use loose block and search for find modules in source directory\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# In MSVC, prevent warnings that can occur when using standard libraries.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# RPath and relative linking\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## MACROS\n\n# Parser macro\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "3rdparty/lua/cmake/lua.cmake" : {
      "ObjectId" : "5a884d1e4d26e0e12d9edb94d9de80f748b8ee89",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LuaDist CMake utility library for Lua.\n\n# \n\n# Copyright (C) 2007-2012 LuaDist.\n\n# by David Manura, Peter Drahos\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# List of (Lua module name, file path) pairs.\n\n# Used internally by add_lua_test.  Built by add_lua_module.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# utility function: appends path `path` to path `basepath`, properly\n\n# handling cases when `path` may be relative or absolute.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install_lua_executable ( target source )\n\n# Automatically generate a binary if srlua package is available\n\n# The application or its source will be placed into /bin \n\n# If the application source did have .lua suffix then it will be removed\n\n# USE: lua_executable ( sputnik src/sputnik.lua )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find srlua and glue\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Executable output\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Generate binary gluing the lua code to srlua, this is a robuust approach for most systems\n\n# Recommended, expecially for Windows systems\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we have a target associated with the binary\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Install with run permissions\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Also install the source as optional component\n",
        "Line" : 59,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# Install into bin as is, we assume the executable uses UNIX shebang\n\n# NOTE: This approach is unsuitable for non UNIX systems\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# _target is CMake-compatible target name for module (e.g. socket_core).\n\n# _module is relative path of target (e.g. socket/core),\n\n#   without extension (e.g. .lua/.so/.dll).\n\n# _MODULE_SRC is list of module source files (e.g. .lua and .c files).\n\n# _MODULE_NAMES is list of module names (e.g. socket.core).\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Lua source module\n",
        "Line" : 99,
        "CharPositionInLine" : 31
      },
      "13" : {
        "Text" : "# Lua C binary module\n",
        "Line" : 118,
        "CharPositionInLine" : 11
      },
      "14" : {
        "Text" : "# add_lua_module\n\n# Builds a Lua source module into a destination locatable by Lua\n\n# require syntax.\n\n# Binary modules are also supported where this function takes sources and\n\n# libraries to compile separated by LINK keyword.\n\n# USE: add_lua_module ( socket.http src/http.lua )\n\n# USE2: add_lua_module ( mime.core src/mime.c )\n\n# USE3: add_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n\n# USE4: add_lua_module ( ssl.context ssl.core ALL_IN_ONE src/context.c src/ssl.c )\n\n#   This form builds an \"all-in-one\" module (e.g. ssl.so or ssl.dll containing\n\n#   both modules ssl.context and ssl.core).  The CMake target name will be\n\n#   ssl_all_in_one.\n\n# Also sets variable _module_path (relative path where module typically\n\n# would be installed).\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# install_lua_module\n\n# This is the same as `add_lua_module` but also installs the module.\n\n# USE: install_lua_module ( socket.http src/http.lua )\n\n# USE2: install_lua_module ( mime.core src/mime.c )\n\n# USE3: install_lua_module ( socket.core ${SRC_SOCKET} LINK ${LIB_SOCKET} )\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Builds string representing Lua table mapping Lua modules names to file\n\n# paths.  Used internally.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# avoids cmake complaint\n",
        "Line" : 175,
        "CharPositionInLine" : 25
      },
      "18" : {
        "Text" : "# add_lua_test ( _testfile [ WORKING_DIRECTORY _working_dir ] )\n\n# Runs Lua script `_testfile` under CTest tester.\n\n# Optional named argument `WORKING_DIRECTORY` is current working directory to\n\n# run test under (defaults to ${CMAKE_CURRENT_BINARY_DIR}).\n\n# Both paths, if relative, are relative to ${CMAKE_CURRENT_SOURCE_DIR}.\n\n# Any modules previously defined with install_lua_module are automatically\n\n# preloaded (via package.preload) prior to running the test script.\n\n# Under LuaDist, set test=true in config.lua to enable testing.\n\n# USE: add_lua_test ( test/test1.lua [args...] [WORKING_DIRECTORY dir])\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Write wrapper script.\n\n# Note: One simple way to allow the script to find modules is\n\n# to just put them in package.preload.\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# note: CMake 2.6 (unlike 2.8) lacks WORKING_DIRECTORY parameter.\n",
        "Line" : 235,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# see also http://gdcm.svn.sourceforge.net/viewvc/gdcm/Sandbox/CMakeModules/UsePythonTest.cmake\n\n# Note: ${CMAKE_CFG_INTDIR} is a command-line argument to allow proper\n\n# expansion by the native build tool.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Converts Lua source file `_source` to binary string embedded in C source\n\n# file `_target`.  Optionally compiles Lua source to byte code (not available\n\n# under LuaJIT2, which doesn't have a bytecode loader).  Additionally, Lua\n\n# versions of bin2c [1] and luac [2] may be passed respectively as additional\n\n# arguments.\n\n#\n\n# [1] http://lua-users.org/wiki/BinToCee\n\n# [2] http://lua-users.org/wiki/LuaCompilerInLua\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "3rdparty/lua/src/Makefile" : {
      "ObjectId" : "9551781a78f4ff7ca76feee335b5ad9cdd01b3e1",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT Makefile. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Also works with MinGW and Cygwin on Windows.\n\n# Please check msvcbuild.bat for building with MSVC on Windows.\n\n#\n\n# Copyright (C) 2005-2014 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#############################  COMPILER OPTIONS  #############################\n\n##############################################################################\n\n# These options mainly affect the speed of the JIT compiler itself, not the\n\n# speed of the JIT-compiled code. Turn any of the optional settings on by\n\n# removing the '#' in front of them. Make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\" if you change any options.\n\n#\n\n# LuaJIT builds as a native 32 or 64 bit binary by default.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Use this if you want to force a 32 bit build on a 64 bit multilib OS.\n\n#CC= gcc -m32\n\n#\n\n# Since the assembler part does NOT maintain a frame pointer, it's pointless\n\n# to slow down the C part by not omitting it. Debugging, tracebacks and\n\n# unwinding are not affected -- the assembler part has frame unwind\n\n# information and GCC emits it where needed (x64) or with -g (see CCDEBUG).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use this if you want to generate a smaller binary (but it's slower):\n\n#CCOPT= -Os -fomit-frame-pointer\n\n# Note: it's no longer recommended to use -O3 with GCC 4.x.\n\n# The I-Cache bloat usually outweighs the benefits from aggressive inlining.\n\n#\n\n# Target-specific compiler options:\n\n#\n\n# x86 only: it's recommended to compile at least for i686. Better yet,\n\n# compile for an architecture that has SSE2, too (-msse -msse2).\n\n#\n\n# x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute\n\n# the binaries to a different machine you could also use: -march=native\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Uncomment the next line to generate debug information:\n\n#CCDEBUG= -g\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Uncomment the next line to enable more warnings:\n\n#CCWARN+= -Wextra -Wdeclaration-after-statement -Wredundant-decls -Wshadow -Wpointer-arith\n\n#\n\n##############################################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##############################################################################\n\n################################  BUILD MODE  ################################\n\n##############################################################################\n\n# The default build mode is mixed mode on POSIX. On Windows this is the same\n\n# as dynamic mode.\n\n#\n\n# Mixed mode creates a static + dynamic library and a statically linked luajit.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Static mode creates a static library and a statically linked luajit.\n\n#BUILDMODE= static\n\n#\n\n# Dynamic mode creates a dynamic library and a dynamically linked luajit.\n\n# Note: this executable will only run when the library is installed!\n\n#BUILDMODE= dynamic\n\n#\n\n##############################################################################\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##############################################################################\n\n#################################  FEATURES  #################################\n\n##############################################################################\n\n# Enable/disable these features as needed, but make sure you force a full\n\n# recompile with \"make clean\", followed by \"make\".\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Permanently disable the FFI extension to reduce the size of the LuaJIT\n\n# executable. But please consider that the FFI library is compiled-in,\n\n# but NOT loaded by default. It only allocates any memory, if you actually\n\n# make use of it.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_FFI\n\n#\n\n# Features from Lua 5.2 that are unlikely to break existing code are\n\n# enabled by default. Some other features that *might* break some existing\n\n# code (e.g. __pairs or os.execute() return values) can be enabled here.\n\n# Note: this does not provide full compatibility with Lua 5.2 at this time.\n\n#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT\n\n#\n\n# Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_JIT\n\n#\n\n# Some architectures (e.g. PPC) can use either single-number (1) or\n\n# dual-number (2) mode. Uncomment one of these lines to override the\n\n# default mode. Please see LJ_ARCH_NUMMODE in lj_arch.h for details.\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=1\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=2\n\n#\n\n##############################################################################\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##############################################################################\n\n############################  DEBUGGING SUPPORT  #############################\n\n##############################################################################\n\n# Enable these options as needed, but make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\".\n\n# Note that most of these are NOT suitable for benchmarking or release mode!\n\n#\n\n# Use the system provided memory allocator (realloc) instead of the\n\n# bundled memory allocator. This is slower, but sometimes helpful for\n\n# debugging. It's helpful for Valgrind's memcheck tool, too. This option\n\n# cannot be enabled on x64, since the built-in allocator is mandatory.\n\n#XCFLAGS+= -DLUAJIT_USE_SYSMALLOC\n\n#\n\n# This define is required to run LuaJIT under Valgrind. The Valgrind\n\n# header files must be installed. You should enable debug information, too.\n\n# Use --suppressions=lj.supp to avoid some false positives.\n\n#XCFLAGS+= -DLUAJIT_USE_VALGRIND\n\n#\n\n# This is the client for the GDB JIT API. GDB 7.0 or higher is required\n\n# to make use of it. See lj_gdbjit.c for details. Enabling this causes\n\n# a non-negligible overhead, even when not running under GDB.\n\n#XCFLAGS+= -DLUAJIT_USE_GDBJIT\n\n#\n\n# Turn on assertions for the Lua/C API to debug problems with lua_* calls.\n\n# This is rather slow -- use only while developing C libraries/embeddings.\n\n#XCFLAGS+= -DLUA_USE_APICHECK\n\n#\n\n# Turn on assertions for the whole LuaJIT VM. This significantly slows down\n\n# everything. Use only if you suspect a problem with LuaJIT itself.\n\n#XCFLAGS+= -DLUA_USE_ASSERT\n\n#\n\n##############################################################################\n\n# You probably don't need to change anything below this line!\n\n##############################################################################\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n# Flags and options for host and target.\n\n##############################################################################\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# You can override the following variables at the make command line:\n\n#   CC       HOST_CC       STATIC_CC       DYNAMIC_CC\n\n#   CFLAGS   HOST_CFLAGS   TARGET_CFLAGS\n\n#   LDFLAGS  HOST_LDFLAGS  TARGET_LDFLAGS  TARGET_SHLDFLAGS\n\n#   LIBS     HOST_LIBS     TARGET_LIBS\n\n#   CROSS    HOST_SYS      TARGET_SYS      TARGET_FLAGS\n\n#\n\n# Cross-compilation examples:\n\n#   make HOST_CC=\"gcc -m32\" CROSS=i586-mingw32msvc- TARGET_SYS=Windows\n\n#   make HOST_CC=\"gcc -m32\" CROSS=powerpc-linux-gnu-\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If left blank, minilua is built and used. You can supply an installed\n\n# copy of (plain) Lua 5.1 or 5.2, plus Lua BitOp. E.g. with: HOST_LUA=lua\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##############################################################################\n\n# System detection.\n\n##############################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##############################################################################\n\n# Files and pathnames.\n\n##############################################################################\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##############################################################################\n\n# Build mode handling.\n\n##############################################################################\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Mixed mode defaults.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Mixed mode is not supported on Windows. And static mode doesn't work well.\n\n# C modules cannot be loaded, because they bind to lua51.dll.\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#Q=\n\n#E= @:\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "##############################################################################\n\n# Make targets.\n\n##############################################################################\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22,
      "Errorlog" : "line 531:19 token recognition error at: '\\m'\nline 532:19 token recognition error at: '\\b'\nline 585:10 token recognition error at: '\"s| [^ ]*/dasm_\\S'\nline 586:29 token recognition error at: '\\1'\nline 587:24 token recognition error at: '\\S'\nline 588:22 token recognition error at: '\\S'\nline 589:21 token recognition error at: '\\S'\nline 684:42 token recognition error at: '\"\\n\\n##############################################################################\\n\u0000'\n"
    },
    "3rdparty/npk/CMakeLists.txt" : {
      "ObjectId" : "451755607ebfe29d8801b1a598eeef6312a0d8c1",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/openal-soft/CMakeLists.txt" : {
      "ObjectId" : "298decd9da3a53bcbd87d6849d9c2d6031119be8",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build file list for OpenAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Used on Linux\n",
        "Line" : 41,
        "CharPositionInLine" : 74
      },
      "2" : {
        "Text" : "## Used on Windows\n",
        "Line" : 47,
        "CharPositionInLine" : 74
      },
      "3" : {
        "Text" : "## Used on Ubuntu Linux\n\n## Used on OSX/iOS\n\n## Used on Android etc.\n",
        "Line" : 50,
        "CharPositionInLine" : 74
      },
      "4" : {
        "Text" : "# This option is mainly for static linking OpenAL Soft into another project\n\n# that already defines the IDs. It is up to that project to ensure all\n\n# required IDs are defined.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# These are needed on non-Windows systems for extra features\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Set defines for large file support\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QNX's gcc do not uses /usr/include and /usr/lib pathes by default\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MSVC may need workarounds for C99 restrict and inline\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: Once we truly require C99, these restrict and inline checks should go\n\n# away.\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Make sure we have C99-style inline semantics with GCC (4.3 or newer).\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Force no inlining for the next test.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Check if we have C99 variable length arrays\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check if we have C99 bool\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check if we have C11 static_assert\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check if we have C11 alignas\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check if we have C11 _Atomic\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add definitions, compiler switches, etc.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Force enable -fPIC for CMake versions before 2.8.9 (later versions have\n\n# the POSITION_INDEPENDENT_CODE target property). The static common library\n\n# will be linked into the dynamic openal library, which requires all its\n\n# code to be position-independent.\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# We want RelWithDebInfo to actually include debug stuff (define _DEBUG\n\n# instead of NDEBUG)\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Set visibility/export options if available\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Yes GCC, really don't accept visibility modes you don't support\n",
        "Line" : 313,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Some systems need libm for some of the following math functions to work\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Check for the dlopen API (for dynamicly loading backend libs)\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Check if we have Windows headers\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# We need pthreads outside of Windows\n",
        "Line" : 512,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Some systems need pthread_np.h to get recursive mutexes\n",
        "Line" : 517,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Check for a 64-bit type\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Check for SSE support\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Check for ARM Neon support\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Check for FluidSynth support\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Default backends, always available\n",
        "Line" : 753,
        "CharPositionInLine" : 14
      },
      "32" : {
        "Text" : "# Check ALSA backend\n",
        "Line" : 758,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Check OSS backend\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Check Solaris backend\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Check SndIO backend\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Check QSA backend\n",
        "Line" : 832,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Check Windows-only backends\n",
        "Line" : 851,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Check MMSystem backend\n",
        "Line" : 856,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Check DSound backend\n",
        "Line" : 871,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Check for MMDevApi backend\n",
        "Line" : 886,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Check PortAudio backend\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Check PulseAudio backend\n",
        "Line" : 926,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Check CoreAudio backend\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Some versions of OSX may need the AudioToolbox framework. Add it if\n\n# it's found.\n",
        "Line" : 961,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# Check for OpenSL (Android) backend\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Optionally enable the Wave Writer backend\n",
        "Line" : 997,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# This is always available\n",
        "Line" : 1005,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Needed for openal.pc.in\n",
        "Line" : 1030,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# End configuration\n",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Build a common library with reusable helpers\n",
        "Line" : 1047,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Build main library\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Add an install target here\n\n#INSTALL(TARGETS ${LIBNAME}\n\n#        RUNTIME DESTINATION bin\n\n#        LIBRARY DESTINATION \"lib${LIB_SUFFIX}\"\n\n#        ARCHIVE DESTINATION \"lib${LIB_SUFFIX}\"\n\n#)\n",
        "Line" : 1121,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Install alsoft.conf configuration file\n",
        "Line" : 1149,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Install HRTF definitions\n",
        "Line" : 1158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 55
    },
    "3rdparty/openal-soft/cmake/CheckFileOffsetBits.cmake" : {
      "ObjectId" : "1dc154e489b716b872c11755d854da957cb8317a",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the _FILE_OFFSET_BITS macro is needed for large files\n\n# CHECK_FILE_OFFSET_BITS()\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n# Copyright (c) 2009, Chris Robinson\n\n#\n\n# Redistribution and use is allowed according to the terms of the LGPL license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/openal-soft/cmake/CheckSharedFunctionExists.cmake" : {
      "ObjectId" : "7975f2334ccf16dbe0034e79d929416c325cf342",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if a symbol exists as a function, variable, or macro\n\n# CHECK_SYMBOL_EXISTS(<symbol> <files> <variable>)\n\n#\n\n# Check that the <symbol> is available after including given header\n\n# <files> and store the result in a <variable>.  Specify the list\n\n# of files in one argument as a semicolon-separated list.\n\n#\n\n# If the header files define the symbol as a macro it is considered\n\n# available and assumed to work.  If the header files declare the\n\n# symbol as a function or variable then the symbol must also be\n\n# available for linking.  If the symbol is a type or enum value\n\n# it will not be recognized (consider using CheckTypeSize or\n\n# CheckCSourceCompiles).\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/openal-soft/cmake/FindALSA.cmake" : {
      "ObjectId" : "519304d6322113f05a736f6ff3f2b98f5e422e2a",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find alsa\n\n# Find the alsa libraries (asound)\n\n#\n\n#  This module defines the following variables:\n\n#     ALSA_FOUND       - True if ALSA_INCLUDE_DIR & ALSA_LIBRARY are found\n\n#     ALSA_LIBRARIES   - Set when ALSA_LIBRARY is found\n\n#     ALSA_INCLUDE_DIRS - Set when ALSA_INCLUDE_DIR is found\n\n#\n\n#     ALSA_INCLUDE_DIR - where to find asoundlib.h, etc.\n\n#     ALSA_LIBRARY     - the asound library\n\n#     ALSA_VERSION_STRING - the version of alsa found (since CMake 2.8.8)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009-2011 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#  * Redistributions of source code must retain the above copyright notice,\n\n#    this list of conditions and the following disclaimer.\n\n#\n\n#  * Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n#  * The names of Kitware, Inc., the Insight Consortium, or the names of\n\n#    any consortium members, or of any contributors, may not be used to\n\n#    endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS ``AS IS''\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n\n# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ALSA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rdparty/openal-soft/cmake/FindAudioIO.cmake" : {
      "ObjectId" : "f0f8b2a59aff1f6e9987ef5d80f70da0b4008016",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find AudioIO includes and libraries\n\n#\n\n#   AUDIOIO_FOUND        - True if AUDIOIO_INCLUDE_DIR is found\n\n#   AUDIOIO_INCLUDE_DIRS - Set when AUDIOIO_INCLUDE_DIR is found\n\n#\n\n#   AUDIOIO_INCLUDE_DIR - where to find sys/audioio.h, etc.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/openal-soft/cmake/FindDSound.cmake" : {
      "ObjectId" : "0ddf98aad51df37a0332d60614fd5af0e73d5995",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find DirectSound includes and libraries\n\n#\n\n#   DSOUND_FOUND        - True if DSOUND_INCLUDE_DIR & DSOUND_LIBRARY are found\n\n#   DSOUND_LIBRARIES    - Set when DSOUND_LIBRARY is found\n\n#   DSOUND_INCLUDE_DIRS - Set when DSOUND_INCLUDE_DIR is found\n\n#\n\n#   DSOUND_INCLUDE_DIR - where to find dsound.h, etc.\n\n#   DSOUND_LIBRARY     - the dsound library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/openal-soft/cmake/FindFFmpeg.cmake" : {
      "ObjectId" : "96cbb6ed021dfbf50c1b0f04768c6b9f7699dffa",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: ts=2 sw=2\n\n# - Try to find the required ffmpeg components(default: AVFORMAT, AVUTIL, AVCODEC)\n\n#\n\n# Once done this will define\n\n#  FFMPEG_FOUND         - System has the all required components.\n\n#  FFMPEG_INCLUDE_DIRS  - Include directory necessary for using the required components headers.\n\n#  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.\n\n#  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.\n\n#\n\n# For each of the components it will additionaly set.\n\n#   - AVCODEC\n\n#   - AVDEVICE\n\n#   - AVFORMAT\n\n#   - AVUTIL\n\n#   - POSTPROC\n\n#   - SWSCALE\n\n#   - SWRESAMPLE\n\n# the following variables will be defined\n\n#  <component>_FOUND        - System has <component>\n\n#  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers\n\n#  <component>_LIBRARIES    - Link these to use <component>\n\n#  <component>_DEFINITIONS  - Compiler switches required for using <component>\n\n#  <component>_VERSION      - The components version\n\n#\n\n# Copyright (c) 2006, Matthias Kretz, <kretz@kde.org>\n\n# Copyright (c) 2008, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2011, Michael Jansen, <kde@michael-jansen.biz>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n### Macro: set_component_found\n\n#\n\n# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.\n\n#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(STATUS \"  - ${_component} found.\")\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# message(STATUS \"  - ${_component} not found.\")\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#\n\n### Macro: find_component\n\n#\n\n# Checks for the given component by invoking pkgconfig and then looking up the libraries and\n\n# include directories.\n\n#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check for all possible components.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check if the required components were found and add their stuff to the FFMPEG_* vars.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# message(STATUS \"Required component ${_component} present.\")\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# message(STATUS \"Required component ${_component} missing.\")\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Build the include path and library list with duplicates removed.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# cache the vars.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Now set the noncached _FOUND vars for the components.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Compile the list of required vars\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Give a nice error message if some of the required vars are missing.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "3rdparty/openal-soft/cmake/FindFluidSynth.cmake" : {
      "ObjectId" : "fe96b22511b06d4f934b7327bd95e1481c730fa9",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find fluidsynth\n\n# Find the native fluidsynth includes and library\n\n#\n\n#  FLUIDSYNTH_INCLUDE_DIR - where to find fluidsynth.h\n\n#  FLUIDSYNTH_LIBRARIES   - List of libraries when using fluidsynth.\n\n#  FLUIDSYNTH_FOUND       - True if fluidsynth found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set FLUIDSYNTH_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/openal-soft/cmake/FindOSS.cmake" : {
      "ObjectId" : "88ee66ad2e48a90aa42b0445b30b0879a3f50750",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OSS includes\n\n#\n\n#   OSS_FOUND        - True if OSS_INCLUDE_DIR is found\n\n#   OSS_INCLUDE_DIRS - Set when OSS_INCLUDE_DIR is found\n\n#\n\n#   OSS_INCLUDE_DIR - where to find sys/soundcard.h, etc.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/openal-soft/cmake/FindPortAudio.cmake" : {
      "ObjectId" : "fad2313df834759e4d83d0feb18abb5178b434f1",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PortAudio includes and libraries\n\n#\n\n#   PORTAUDIO_FOUND        - True if PORTAUDIO_INCLUDE_DIR & PORTAUDIO_LIBRARY\n\n#                            are found\n\n#   PORTAUDIO_LIBRARIES    - Set when PORTAUDIO_LIBRARY is found\n\n#   PORTAUDIO_INCLUDE_DIRS - Set when PORTAUDIO_INCLUDE_DIR is found\n\n#\n\n#   PORTAUDIO_INCLUDE_DIR - where to find portaudio.h, etc.\n\n#   PORTAUDIO_LIBRARY     - the portaudio library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/openal-soft/cmake/FindPulseAudio.cmake" : {
      "ObjectId" : "1f6f843a1d8d5402504d06d07cd67f1cecfc5b2d",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PulseAudio includes and libraries\n\n#\n\n#   PULSEAUDIO_FOUND        - True if PULSEAUDIO_INCLUDE_DIR &\n\n#                             PULSEAUDIO_LIBRARY are found\n\n#   PULSEAUDIO_LIBRARIES    - Set when PULSEAUDIO_LIBRARY is found\n\n#   PULSEAUDIO_INCLUDE_DIRS - Set when PULSEAUDIO_INCLUDE_DIR is found\n\n#\n\n#   PULSEAUDIO_INCLUDE_DIR - where to find pulse/pulseaudio.h, etc.\n\n#   PULSEAUDIO_LIBRARY     - the pulse library\n\n#   PULSEAUDIO_VERSION_STRING - the version of PulseAudio found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/openal-soft/cmake/FindQSA.cmake" : {
      "ObjectId" : "0ad1fd43893f0dbd6b5935b9f8b17994a9570c4e",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find QSA includes and libraries\n\n#\n\n#   QSA_FOUND        - True if QSA_INCLUDE_DIR & QSA_LIBRARY are found\n\n#   QSA_LIBRARIES    - Set when QSA_LIBRARY is found\n\n#   QSA_INCLUDE_DIRS - Set when QSA_INCLUDE_DIR is found\n\n#\n\n#   QSA_INCLUDE_DIR - where to find sys/asoundlib.h, etc.\n\n#   QSA_LIBRARY     - the asound library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only check for QSA on QNX, because it conflicts with ALSA.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/openal-soft/cmake/FindSDL2.cmake" : {
      "ObjectId" : "70e607a89f66ff616e3a4e2035b9689dc5f81438",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDL2main.h and SDL2main.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 84,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 85,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "3rdparty/openal-soft/cmake/FindSDL_sound.cmake" : {
      "ObjectId" : "2dab1a1ca3a557b6d6afc6cb1b2b0140884e4205",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locates the SDL_sound library\n\n#\n\n# This module depends on SDL being found and\n\n# must be called AFTER FindSDL.cmake or FindSDL2.cmake is called.\n\n#\n\n# This module defines\n\n#  SDL_SOUND_INCLUDE_DIR, where to find SDL_sound.h\n\n#  SDL_SOUND_FOUND, if false, do not try to link to SDL_sound\n\n#  SDL_SOUND_LIBRARIES, this contains the list of libraries that you need\n\n#    to link against. This is a read-only variable and is marked INTERNAL.\n\n#  SDL_SOUND_EXTRAS, this is an optional variable for you to add your own\n\n#    flags to SDL_SOUND_LIBRARIES. This is prepended to SDL_SOUND_LIBRARIES.\n\n#    This is available mostly for cases this module failed to anticipate for\n\n#    and you must add additional flags. This is marked as ADVANCED.\n\n#  SDL_SOUND_VERSION_STRING, human-readable string containing the version of SDL_sound\n\n#\n\n# This module also defines (but you shouldn't need to use directly)\n\n#   SDL_SOUND_LIBRARY, the name of just the SDL_sound library you would link\n\n#   against. Use SDL_SOUND_LIBRARIES for you link instructions and not this one.\n\n# And might define the following as needed\n\n#   MIKMOD_LIBRARY\n\n#   MODPLUG_LIBRARY\n\n#   OGG_LIBRARY\n\n#   VORBIS_LIBRARY\n\n#   SMPEG_LIBRARY\n\n#   FLAC_LIBRARY\n\n#   SPEEX_LIBRARY\n\n#\n\n# Typically, you should not use these variables directly, and you should use\n\n# SDL_SOUND_LIBRARIES which contains SDL_SOUND_LIBRARY and the other audio libraries\n\n# (if needed) to successfully compile on your system.\n\n#\n\n# Created by Eric Wing.\n\n# This module is a bit more complicated than the other FindSDL* family modules.\n\n# The reason is that SDL_sound can be compiled in a large variety of different ways\n\n# which are independent of platform. SDL_sound may dynamically link against other 3rd\n\n# party libraries to get additional codec support, such as Ogg Vorbis, SMPEG, ModPlug,\n\n# MikMod, FLAC, Speex, and potentially others.\n\n# Under some circumstances which I don't fully understand,\n\n# there seems to be a requirement\n\n# that dependent libraries of libraries you use must also be explicitly\n\n# linked against in order to successfully compile. SDL_sound does not currently\n\n# have any system in place to know how it was compiled.\n\n# So this CMake module does the hard work in trying to discover which 3rd party\n\n# libraries are required for building (if any).\n\n# This module uses a brute force approach to create a test program that uses SDL_sound,\n\n# and then tries to build it. If the build fails, it parses the error output for\n\n# known symbol names to figure out which libraries are needed.\n\n#\n\n# Responds to the $SDLDIR and $SDLSOUNDDIR environmental variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR used in building SDL.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL_LIBRARY or SDL2_LIBRARY to override this selection or set the CMake\n\n# environment CMAKE_INCLUDE_PATH to modify the search paths.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find SDL_sound.h\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CMake is giving me problems using TRY_COMPILE with the CMAKE_FLAGS\n\n# for the :STRING syntax if I have multiple values contained in a\n\n# single variable. This is a problem for the SDL2_LIBRARY variable\n\n# because it does just that. When I feed this variable to the command,\n\n# only the first value gets the appropriate modifier (e.g. -I) and\n\n# the rest get dropped.\n\n# To get multiple single variables to work, I must separate them with a \"\\;\"\n\n# I could go back and modify the FindSDL2.cmake module, but that's kind of painful.\n\n# The solution would be to try something like:\n\n# set(SDL2_TRY_COMPILE_LIBRARY_LIST \"${SDL2_TRY_COMPILE_LIBRARY_LIST}\\;${CMAKE_THREAD_LIBS_INIT}\")\n\n# Instead, it was suggested on the mailing list to write a temporary CMakeLists.txt\n\n# with a temporary test project and invoke that with TRY_COMPILE.\n\n# See message thread \"Figuring out dependencies for a library in order to build\"\n\n# 2005-07-16\n\n#     try_compile(\n\n#             MY_RESULT\n\n#             ${CMAKE_BINARY_DIR}\n\n#             ${PROJECT_SOURCE_DIR}/DetermineSoundLibs.c\n\n#             CMAKE_FLAGS\n\n#                     -DINCLUDE_DIRECTORIES:STRING=${SDL2_INCLUDE_DIR}\\;${SDL_SOUND_INCLUDE_DIR}\n\n#                     -DLINK_LIBRARIES:STRING=${SDL_SOUND_LIBRARY}\\;${SDL2_LIBRARY}\n\n#             OUTPUT_VARIABLE MY_OUTPUT\n\n#     )\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# To minimize external dependencies, create a sdlsound test program\n\n# which will be used to figure out if additional link dependencies are\n\n# required for the link phase.\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Calling\n\n# target_link_libraries(DetermineSoundLibs \"${SDL_SOUND_LIBRARY} ${SDL2_LIBRARY})\n\n# causes problems when SDL2_LIBRARY looks like\n\n# /Library/Frameworks/SDL2.framework;-framework Cocoa\n\n# The ;-framework Cocoa seems to be confusing CMake once the OS X\n\n# framework support was added. I was told that breaking up the list\n\n# would fix the problem.\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# message(\"TMP_TRY_LIBS ${TMP_TRY_LIBS}\")\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Write the CMakeLists.txt and test project\n\n# Weird, this is still sketchy. If I don't quote the variables\n\n# in the TARGET_LINK_LIBRARIES, I seem to loose everything\n\n# in the SDL2_LIBRARY string after the \"-framework\".\n\n# But if I quote the stuff in INCLUDE_DIRECTORIES, it doesn't work.\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# message(\"${MY_RESULT}\")\n\n# message(${MY_OUTPUT})\n",
        "Line" : 186,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# I expect that MPGLIB, VOC, WAV, AIFF, and SHN are compiled in statically.\n\n# I think Timidity is also compiled in statically.\n\n# I've never had to explcitly link against Quicktime, so I'll skip that for now.\n",
        "Line" : 190,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# Find MikMod\n",
        "Line" : 196,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Find ModPlug\n",
        "Line" : 215,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Find Ogg and Vorbis\n",
        "Line" : 234,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Find SMPEG\n",
        "Line" : 270,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Find FLAC\n",
        "Line" : 290,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# Hmmm...Speex seems to depend on Ogg. This might be a problem if\n\n# the TRY_COMPILE attempt gets blocked at SPEEX before it can pull\n\n# in the Ogg symbols. I'm not sure if I should duplicate the ogg stuff\n\n# above for here or if two ogg entries will screw up things.\n",
        "Line" : 310,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# Find OGG (needed for Speex)\n\n# We might have already found Ogg for Vorbis, so skip it if so.\n",
        "Line" : 331,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 17
    },
    "3rdparty/openal-soft/cmake/FindSoundIO.cmake" : {
      "ObjectId" : "10450254d213fd602682f8b579e57752644da701",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find SoundIO (sndio) includes and libraries\n\n#\n\n#   SOUNDIO_FOUND        - True if SOUNDIO_INCLUDE_DIR & SOUNDIO_LIBRARY are\n\n#                          found\n\n#   SOUNDIO_LIBRARIES    - Set when SOUNDIO_LIBRARY is found\n\n#   SOUNDIO_INCLUDE_DIRS - Set when SOUNDIO_INCLUDE_DIR is found\n\n#\n\n#   SOUNDIO_INCLUDE_DIR - where to find sndio.h, etc.\n\n#   SOUNDIO_LIBRARY     - the sndio library\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/openal-soft/utils/alsoft-config/CMakeLists.txt" : {
      "ObjectId" : "a6707a3de3e19fa43fae2642ab45e81a3ddb57d6",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Need Qt 4.8.0 or newer for the iconset theme attribute to work\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/sdl2-emscripten/CMakeLists.txt" : {
      "ObjectId" : "2e97b9aa18c27758ed216de8527dc37950385343",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# General settings\n\n# Edit include/SDL_version.h and change the version, then:\n\n#   SDL_MICRO_VERSION += 1;\n\n#   SDL_INTERFACE_AGE += 1;\n\n#   SDL_BINARY_AGE += 1;\n\n# if any functions have been added, set SDL_INTERFACE_AGE to 0.\n\n# if backwards compatibility has been broken,\n\n# set SDL_BINARY_AGE and SDL_INTERFACE_AGE to 0.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Calculate a libtool-like version number\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General settings & flags\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for 64 or 32 bit\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get the platform\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: iOS?\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Don't mistake osx for unix\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# JavaScript does not yet have threading support, so disable pthreads when building for Emscripten.\n",
        "Line" : 120,
        "CharPositionInLine" : 40
      },
      "8" : {
        "Text" : "# Default option knobs\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compiler info\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# VisualStudio 8.0+\n",
        "Line" : 141,
        "CharPositionInLine" : 34
      },
      "11" : {
        "Text" : "#set(CMAKE_C_FLAGS \"/ZI /WX- /\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Default flags, if not set otherwise\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Hackish, but does the trick on Win32\n",
        "Line" : 157,
        "CharPositionInLine" : 37
      },
      "14" : {
        "Text" : "# Those are used for pkg-config and friends, so that the SDL2.pc, sdl2-config,\n\n# etc. are created correctly.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Emscripten toolchain has a nonempty default value for this, and the checks \n\n# in this file need to change that, so remember the original value, and \n\n# restore back to that afterwards. For check_function_exists() to work in\n\n# Emscripten, this value must be at its default value.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# We build SDL on cygwin without the UNIX emulation layer\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# General includes\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set up default values for the currently supported set of subsystems:\n\n# Emscripten/Javascript does not have assembly support, a dynamic library \n\n# loading architecture, low-level CPU inspection or multithreading.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#set_option(DEPENDENCY_TRACKING \"Use gcc -MMD -MT dependency tracking\" ON)\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TODO: We should (should we?) respect cmake's ${BUILD_SHARED_LIBS} flag here\n\n# The options below are for compatibility to configure's default behaviour.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# General source files\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Do nada - use optimization settings to determine the assertion level\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Compiler option evaluation\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# TODO: Those all seem to be quite GCC specific - needs to be\n\n# reworked for better compiler support\n",
        "Line" : 377,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# if only HAVE_ALTIVEC_H_HDR is set\n",
        "Line" : 490,
        "CharPositionInLine" : 31
      },
      "26" : {
        "Text" : "# TODO: SDL_cpuinfo.h needs to support the user's configuration wish\n\n# for MSVC - right now it is always activated\n",
        "Line" : 499,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# TODO:\n\n#else()\n\n#  if(USE_GCC OR USE_CLANG)\n\n#    list(APPEND EXTRA_CFLAGS \"-mno-sse\" \"-mno-sse2\" \"-mno-mmx\")\n\n#  endif()\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# TODO: Can't deactivate on FreeBSD? w/o LIBC, SDL_stdinc.h can't define\n\n# anything.\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# needed for M_PI\n",
        "Line" : 540,
        "CharPositionInLine" : 41
      },
      "30" : {
        "Text" : "# TODO: refine the mprotect check\n",
        "Line" : 556,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Enable/disable various subsystems of the SDL library\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Haptic requires some private functions from the joystick subsystem.\n",
        "Line" : 616,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# TODO: in configure.in, the test for LOADSO and SDL_DLOPEN is a bit weird:\n\n# if LOADSO is not wanted, SDL_LOADSO_DISABLED is set\n\n# If however on Unix or APPLE dlopen() is detected via CheckDLOPEN(),\n\n# SDL_LOADSO_DISABLED will not be set, regardless of the LOADSO settings\n",
        "Line" : 626,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# General SDL subsystem options, valid for all platforms\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# CheckDummyAudio/CheckDiskAudio - valid for all platforms\n",
        "Line" : 633,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Relevant for Unix/Darwin only\n",
        "Line" : 649,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Platform-specific options and settings\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Hide noisy warnings that intend to aid mostly during initial stages of porting a new\n\n# project. Uncomment at will for verbose cross-compiling -I/../ path info.\n",
        "Line" : 667,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#enable gles\n",
        "Line" : 690,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# !!! FIXME: this needs pkg-config to find the include path, I think.\n",
        "Line" : 775,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# seems to be BSD specific - limit the test to BSD only?\n",
        "Line" : 790,
        "CharPositionInLine" : 20
      },
      "42" : {
        "Text" : "# Check for DirectX\n",
        "Line" : 863,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# TODO: change $ENV{DXSDL_DIR} to get the path from the include checks\n",
        "Line" : 878,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# requires SDL_LOADSO on Windows (IME, DX, etc.)\n",
        "Line" : 905,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Libraries for Win32 native and MinGW\n",
        "Line" : 948,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# TODO: in configure.in the check for timers is set on\n\n# cygwin | mingw32* - does this include mingw32CE?\n",
        "Line" : 951,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# TODO: rework this for proper MacOS X, iOS and Darwin support\n",
        "Line" : 1006,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Requires the darwin file implementation\n",
        "Line" : 1008,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Actually load the frameworks at the end so we don't duplicate include.\n",
        "Line" : 1073,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# iOS hack needed - http://code.google.com/p/ios-cmake/ ?\n",
        "Line" : 1099,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# TODO: Use FIND_PACKAGE(OpenGL) instead\n",
        "Line" : 1135,
        "CharPositionInLine" : 6
      },
      "52" : {
        "Text" : "# Dummies\n\n# configure.in does it differently:\n\n# if not have X\n\n#   if enable_X {  SDL_X_DISABLED = 1 }\n\n#   [add dummy sources]\n\n# so it always adds a dummy, without checking, if it was actually requested.\n\n# This leads to missing internal references on building, since the\n\n# src/X/*.c does not get included.\n",
        "Line" : 1147,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# results in unresolved symbols on OSX\n",
        "Line" : 1157,
        "CharPositionInLine" : 33
      },
      "54" : {
        "Text" : "# We always need to have threads and timers around\n",
        "Line" : 1179,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Append the -MMD -MT flags\n\n# if(DEPENDENCY_TRACKING)\n\n#   if(COMPILER_IS_GNUCC)\n\n#     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -MMD -MT \\$@\")\n\n#   endif()\n\n# endif()\n",
        "Line" : 1195,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Prepare the flags and remove duplicates\n",
        "Line" : 1205,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Compat helpers for the configuration files\n",
        "Line" : 1218,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# TODO: we need a Windows script, too\n",
        "Line" : 1220,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Clean up the different lists\n",
        "Line" : 1243,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# MESSAGE(STATUS \"SDL_LIBS: ${SDL_LIBS}\")\n\n# MESSAGE(STATUS \"SDL_STATIC_LIBS: ${SDL_STATIC_LIBS}\")\n",
        "Line" : 1252,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "##### Info output #####\n",
        "Line" : 1265,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Longest option is VIDEO_X11_XSCREENSAVER = 22 characters\n\n# Get the padding\n",
        "Line" : 1282,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# Ensure that the extra cflags are used at compile time\n",
        "Line" : 1305,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Always build SDLmain\n",
        "Line" : 1308,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# TODO: Win32 platforms keep the same suffix .lib for import and static\n\n# libraries - do we need to consider this?\n",
        "Line" : 1338,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "##### Installation targets #####\n",
        "Line" : 1344,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# FreeBSD uses ${PREFIX}/libdata/pkgconfig\n",
        "Line" : 1366,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# TODO: what about the .spec file? Is it only needed for RPM creation?\n",
        "Line" : 1373,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 69
    },
    "3rdparty/sdl2-emscripten/android-project/build.xml" : {
      "ObjectId" : "9f19a077b1b7a029013d33e3c3d602effdf53f14",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " This should be changed to the name of your project ",
        "Line" : 2,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 7,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 29,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 35,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 49,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 52,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : " version-tag: 1 ",
        "Line" : 90,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 9
    },
    "3rdparty/sdl2-emscripten/cmake/macros.cmake" : {
      "ObjectId" : "c234a566c0ae27c2208814fc9adaa2c867a0ab80",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Message Output\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix for each element\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Do not use string(REPLACE \";\" \" \") here to avoid messing up list\n\n# entries\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "3rdparty/sdl2-emscripten/cmake/sdlchecks.cmake" : {
      "ObjectId" : "6bce266f0bc0f45fd35e34abc1b7a48da7e309c6",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# reduce the library name for shared linking\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# resolves symlinks\n",
        "Line" : 9,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ALSA_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - PULSEAUDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - ESD_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ARTS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO\n",
        "Line" : 211,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - NAS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: set include paths properly, so the NAS headers are found\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - SNDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: set include paths properly, so the sndio headers are found\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - FUSIONSOUND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - X11_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for multitouch\n",
        "Line" : 451,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Requires:\n\n# - EGL\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Requires:\n\n# - n/a\n\n#\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Apple always has Cocoa.\n",
        "Line" : 559,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - DIRECTFB_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Rquires:\n\n# - nada\n\n# Optional:\n\n# - THREADS opt\n\n# Sets:\n\n# PTHREAD_CFLAGS\n\n# PTHREAD_LIBS\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# causes Carbon.p complaints?\n\n# set(PTHREAD_CFLAGS \"-D_REENTRANT -D_THREAD_SAFE\")\n",
        "Line" : 671,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Run some tests\n",
        "Line" : 703,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Can be faked, if necessary\n\n# Can be faked, if necessary\n",
        "Line" : 773,
        "CharPositionInLine" : 65
      },
      "27" : {
        "Text" : "# Requires\n\n# - nada\n\n# Optional:\n\n# Sets:\n\n# USB_LIBS\n\n# USB_CFLAGS\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "3rdparty/sdl2-emscripten/include/SDL_config.h.cmake" : {
      "ObjectId" : "82cff271f8e389a4ef75eebdb060fe87a3af3f86",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2014 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C language features */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Useful headers */",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* C library functions */",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* !!! FIXME: in configure script version, missing here: */",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable system power support */",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "3rdparty/sdl2/CMakeLists.txt" : {
      "ObjectId" : "32f8be094b9fec2df17450784ee733b4154109ed",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# General settings\n\n# Edit include/SDL_version.h and change the version, then:\n\n#   SDL_MICRO_VERSION += 1;\n\n#   SDL_INTERFACE_AGE += 1;\n\n#   SDL_BINARY_AGE += 1;\n\n# if any functions have been added, set SDL_INTERFACE_AGE to 0.\n\n# if backwards compatibility has been broken,\n\n# set SDL_BINARY_AGE and SDL_INTERFACE_AGE to 0.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Calculate a libtool-like version number\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General settings & flags\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for 64 or 32 bit\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get the platform\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: iOS?\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Don't mistake osx for unix\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Default option knobs\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compiler info\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# VisualStudio 8.0+\n",
        "Line" : 140,
        "CharPositionInLine" : 34
      },
      "10" : {
        "Text" : "#set(CMAKE_C_FLAGS \"/ZI /WX- /\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Default flags, if not set otherwise\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Hackish, but does the trick on Win32\n",
        "Line" : 156,
        "CharPositionInLine" : 37
      },
      "13" : {
        "Text" : "# Those are used for pkg-config and friends, so that the SDL2.pc, sdl2-config,\n\n# etc. are created correctly.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We build SDL on cygwin without the UNIX emulation layer\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# General includes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#set_option(DEPENDENCY_TRACKING \"Use gcc -MMD -MT dependency tracking\" ON)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#${UNIX_SYS})\n",
        "Line" : 243,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : "#${UNIX_SYS})\n",
        "Line" : 244,
        "CharPositionInLine" : 59
      },
      "19" : {
        "Text" : "# TODO: We should (should we?) respect cmake's ${BUILD_SHARED_LIBS} flag here\n\n# The options below are for compatibility to configure's default behaviour.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# General source files\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Do nada - use optimization settings to determine the assertion level\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Compiler option evaluation\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO: Those all seem to be quite GCC specific - needs to be\n\n# reworked for better compiler support\n",
        "Line" : 347,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# if only HAVE_ALTIVEC_H_HDR is set\n",
        "Line" : 460,
        "CharPositionInLine" : 31
      },
      "25" : {
        "Text" : "# TODO: SDL_cpuinfo.h needs to support the user's configuration wish\n\n# for MSVC - right now it is always activated\n",
        "Line" : 469,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# TODO:\n\n#else(ASSEMBLY)\n\n#  if(USE_GCC OR USE_CLANG)\n\n#    list(APPEND EXTRA_CFLAGS \"-mno-sse\" \"-mno-sse2\" \"-mno-mmx\")\n\n#  endif()\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# TODO: Can't deactivate on FreeBSD? w/o LIBC, SDL_stdinc.h can't define\n\n# anything.\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# needed for M_PI\n",
        "Line" : 510,
        "CharPositionInLine" : 41
      },
      "29" : {
        "Text" : "# TODO: refine the mprotect check\n",
        "Line" : 526,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Enable/disable various subsystems of the SDL library\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Haptic requires some private functions from the joystick subsystem.\n",
        "Line" : 586,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# TODO: in configure.in, the test for LOADSO and SDL_DLOPEN is a bit weird:\n\n# if LOADSO is not wanted, SDL_LOADSO_DISABLED is set\n\n# If however on Unix or APPLE dlopen() is detected via CheckDLOPEN(),\n\n# SDL_LOADSO_DISABLED will not be set, regardless of the LOADSO settings\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# General SDL subsystem options, valid for all platforms\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# CheckDummyAudio/CheckDiskAudio - valid for all platforms\n",
        "Line" : 603,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Relevant for Unix/Darwin only\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Platform-specific options and settings\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# !!! FIXME: this needs pkg-config to find the include path, I think.\n",
        "Line" : 712,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# seems to be BSD specific - limit the test to BSD only?\n",
        "Line" : 727,
        "CharPositionInLine" : 20
      },
      "39" : {
        "Text" : "# Check for DirectX\n",
        "Line" : 800,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# TODO: change $ENV{DXSDL_DIR} to get the path from the include checks\n",
        "Line" : 814,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# requires SDL_LOADSO on Windows (IME, DX, etc.)\n",
        "Line" : 841,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Libraries for Win32 native and MinGW\n",
        "Line" : 884,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# TODO: in configure.in the check for timers is set on\n\n# cygwin | mingw32* - does this include mingw32CE?\n",
        "Line" : 887,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# TODO: rework this for proper MacOS X, iOS and Darwin support\n",
        "Line" : 942,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Requires the darwin file implementation\n",
        "Line" : 944,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Actually load the frameworks at the end so we don't duplicate include.\n",
        "Line" : 1009,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# iOS hack needed - http://code.google.com/p/ios-cmake/ ?\n",
        "Line" : 1035,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# TODO: Use FIND_PACKAGE(OpenGL) instead\n",
        "Line" : 1071,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Dummies\n\n# configure.in does it differently:\n\n# if not have X\n\n#   if enable_X {  SDL_X_DISABLED = 1 }\n\n#   [add dummy sources]\n\n# so it always adds a dummy, without checking, if it was actually requested.\n\n# This leads to missing internal references on building, since the\n\n# src/X/*.c does not get included.\n",
        "Line" : 1083,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# results in unresolved symbols on OSX\n",
        "Line" : 1093,
        "CharPositionInLine" : 33
      },
      "51" : {
        "Text" : "# We always need to have threads and timers around\n",
        "Line" : 1115,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Append the -MMD -MT flags\n\n# if(DEPENDENCY_TRACKING)\n\n#   if(COMPILER_IS_GNUCC)\n\n#     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -MMD -MT \\$@\")\n\n#   endif()\n\n# endif()\n",
        "Line" : 1131,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Prepare the flags and remove duplicates\n",
        "Line" : 1141,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Compat helpers for the configuration files\n",
        "Line" : 1154,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# TODO: we need a Windows script, too\n",
        "Line" : 1156,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Clean up the different lists\n",
        "Line" : 1179,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "##### Info output #####\n",
        "Line" : 1198,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Longest option is VIDEO_X11_XSCREENSAVER = 22 characters\n\n# Get the padding\n",
        "Line" : 1215,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Ensure that the extra cflags are used at compile time\n",
        "Line" : 1238,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Always build SDLmain\n",
        "Line" : 1241,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# TODO: Win32 platforms keep the same suffix .lib for import and static\n\n# libraries - do we need to consider this?\n",
        "Line" : 1271,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "##### Installation targets #####\n\n#install(TARGETS ${_INSTALL_LIBS}\n\n#  LIBRARY DESTINATION \"lib${LIB_SUFFIX}\"\n\n#  ARCHIVE DESTINATION \"lib${LIB_SUFFIX}\")\n",
        "Line" : 1277,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#file(GLOB INCLUDE_FILES ${SDL2_SOURCE_DIR}/include/*.h)\n\n#file(GLOB BIN_INCLUDE_FILES ${SDL2_BINARY_DIR}/include/*.h)\n\n#foreach(_FNAME ${BIN_INCLUDE_FILES})\n\n#  get_filename_component(_INCNAME ${_FNAME} NAME)\n\n#  list(REMOVE_ITEM INCLUDE_FILES ${SDL2_SOURCE_DIR}/include/${_INCNAME})\n\n#endforeach()\n\n#list(APPEND INCLUDE_FILES ${BIN_INCLUDE_FILES})\n\n#install(FILES ${INCLUDE_FILES} DESTINATION include/SDL2)\n",
        "Line" : 1282,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#if(NOT WINDOWS OR CYGWIN)\n",
        "Line" : 1291,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#if(SDL_SHARED)\n",
        "Line" : 1292,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "#install(CODE \"\n",
        "Line" : 1293,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink\n\n#\\\"libSDL2-2.0.so\\\" \\\"libSDL2.so\\\")\")\n",
        "Line" : 1294,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "#install(FILES ${SDL2_BINARY_DIR}/libSDL2.so DESTINATION \"lib${LIB_SUFFIX}\")\n",
        "Line" : 1296,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# endif()\n",
        "Line" : 1297,
        "CharPositionInLine" : 1
      },
      "70" : {
        "Text" : "#if(FREEBSD)\n",
        "Line" : 1298,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# FreeBSD uses ${PREFIX}/libdata/pkgconfig\n\n#install(FILES ${SDL2_BINARY_DIR}/sdl2.pc DESTINATION \"libdata/pkgconfig\")\n",
        "Line" : 1299,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "#else(FREEBSD)\n",
        "Line" : 1301,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "#install(FILES ${SDL2_BINARY_DIR}/sdl2.pc\n",
        "Line" : 1302,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# DESTINATION \"lib${LIB_SUFFIX}/pkgconfig\")\n",
        "Line" : 1303,
        "CharPositionInLine" : 5
      },
      "75" : {
        "Text" : "#endif()\n\n#install(PROGRAMS ${SDL2_BINARY_DIR}/sdl2-config DESTINATION bin)\n\n# TODO: what about the .spec file? Is it only needed for RPM creation?\n\n#install(FILES \"${SDL2_SOURCE_DIR}/sdl2.m4\" DESTINATION \"share/aclocal\")\n",
        "Line" : 1304,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "#else()\n",
        "Line" : 1308,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#install(TARGETS SDL2 RUNTIME DESTINATION bin)\n",
        "Line" : 1309,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "#endif()\n",
        "Line" : 1310,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 79
    },
    "3rdparty/sdl2/cmake/macros.cmake" : {
      "ObjectId" : "c234a566c0ae27c2208814fc9adaa2c867a0ab80",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Message Output\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix for each element\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Do not use string(REPLACE \";\" \" \") here to avoid messing up list\n\n# entries\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "3rdparty/sdl2/cmake/sdlchecks.cmake" : {
      "ObjectId" : "2cd09e6ffff5b52e05c499793fb9557ff4927a35",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# reduce the library name for shared linking\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# resolves symlinks\n",
        "Line" : 9,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ALSA_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - PULSEAUDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - ESD_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ARTS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO\n",
        "Line" : 211,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - NAS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: set include paths properly, so the NAS headers are found\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - SNDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: set include paths properly, so the sndio headers are found\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - FUSIONSOUND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - X11_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for multitouch\n",
        "Line" : 451,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Requires:\n\n# - EGL\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Requires:\n\n# - n/a\n\n#\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Apple always has Cocoa.\n",
        "Line" : 559,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - DIRECTFB_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Rquires:\n\n# - nada\n\n# Optional:\n\n# - THREADS opt\n\n# Sets:\n\n# PTHREAD_CFLAGS\n\n# PTHREAD_LIBS\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# causes Carbon.p complaints?\n\n# set(PTHREAD_CFLAGS \"-D_REENTRANT -D_THREAD_SAFE\")\n",
        "Line" : 671,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Run some tests\n",
        "Line" : 703,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Can be faked, if necessary\n\n# Can be faked, if necessary\n",
        "Line" : 773,
        "CharPositionInLine" : 65
      },
      "27" : {
        "Text" : "# Requires\n\n# - nada\n\n# Optional:\n\n# Sets:\n\n# USB_LIBS\n\n# USB_CFLAGS\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "3rdparty/sdl2/include/SDL_config.h.cmake" : {
      "ObjectId" : "b6fb53aa237d3b1a6a957a1082b16cd803f71fb2",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2014 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C language features */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Useful headers */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* C library functions */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* !!! FIXME: in configure script version, missing here: */",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable system power support */",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "3rdparty/shinyprofiler/Samples/Advanced/Makefile" : {
      "ObjectId" : "49820d30ef359fe1ce29b0b4c859d189c8a956da",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Shiny Profiler\n\n# Advanced sample GNU Makefile\n\n# \n\n# You have to build libShiny.a first in 'Shiny' directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/shinyprofiler/Samples/MainLoop/Makefile" : {
      "ObjectId" : "c06ffa56a48fbe8985f1d7d2acd0a114159c590c",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Shiny Profiler\n\n# MainLoop sample GNU Makefile\n\n# \n\n# You have to build libShiny.a first in 'Shiny' directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/shinyprofiler/Samples/Simple/Makefile" : {
      "ObjectId" : "4fbe7b19b0982c8bff6fe00979dee4e18109cee6",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Shiny Profiler\n\n# Simple sample GNU Makefile\n\n# \n\n# You have to build libShiny.a first in 'Shiny' directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/shinyprofiler/Shiny/CMakeLists.txt" : {
      "ObjectId" : "5922978382b2e6709f59bbe4992ea03aeb9fb891",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/shinyprofiler/Shiny/Makefile" : {
      "ObjectId" : "28690cbfae31f80e0e18868c1c31a8beec752181",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Shiny Profiler\n\n# GNU Makefile for Linux\n\n#\n\n# By default libShiny.a will be compiled with g++ C++ compiler. If you prefer\n\n# or need a plain C version use the 'cclib' target. The C compiled lib should\n\n# be compatible to C AND C++ code according to ISO C99 and ISO C++98 (or\n\n# later).\n\n#\n\n# To build Shiny as a static C++ lib use:\n\n#\n\n# make\n\n#\n\n# To build it as a static C lib (ISO C99) use:\n\n#\n\n# make cclib\n\n#\n\n# For building libs including more debug support use:\n\n#\n\n# make cxxdebug\n\n# or\n\n# make ccdebug\n\n#\n\n# If you experience incompatibilities please feel free to tailor this makefile\n\n# to your needs and report problems here:\n\n# - sourceforge: http://sourceforge.net/projects/shinyprofiler/\n\n# - Google Code: http://code.google.com/p/shinyprofiler/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################\n\n# Compiler options\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# C options\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# C++ options\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Debug options\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##################\n\n# Target definitions\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All target builds static C++ lib\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Copy static lib into lib/ or lib/debug\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build static lib in either C or C++\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create object files from source code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Remove temporary files and compilation results\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "3rdparty/shinyprofiler/ShinyLua/Makefile" : {
      "ObjectId" : "c88a8bf39632bba1f9feb8b25fc20dc1d56271ac",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Shiny Profiler\n\n# Lua lib GNU Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build and move static lib to 'lib' directory\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build and move shared lib to 'lib' directory\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# builds static lib\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# builds shared lib\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# builds the object files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# removes all object files compilation results\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rdparty/tinyxml/CMakeLists.txt" : {
      "ObjectId" : "76321849cb7eb0905c8bfd7461e3837a098dec9b",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/zlib/CMakeLists.txt" : {
      "ObjectId" : "85b5c1e283ec1e47c42be84bf91b790ed243be62",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Additional/AndroidApp/build.xml" : {
      "ObjectId" : "9f19a077b1b7a029013d33e3c3d602effdf53f14",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " This should be changed to the name of your project ",
        "Line" : 2,
        "CharPositionInLine" : 60
      },
      "1" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 7,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 29,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 35,
        "CharPositionInLine" : 49
      },
      "4" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 49,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 52,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : " version-tag: 1 ",
        "Line" : 90,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 9
    },
    "Additional/AndroidApp/jni/sdl2/CMakeLists.txt" : {
      "ObjectId" : "e5ff6c05730e9efd8f3e08a6aeadd6e4c298c238",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# General settings\n\n# Edit include/SDL_version.h and change the version, then:\n\n#   SDL_MICRO_VERSION += 1;\n\n#   SDL_INTERFACE_AGE += 1;\n\n#   SDL_BINARY_AGE += 1;\n\n# if any functions have been added, set SDL_INTERFACE_AGE to 0.\n\n# if backwards compatibility has been broken,\n\n# set SDL_BINARY_AGE and SDL_INTERFACE_AGE to 0.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Calculate a libtool-like version number\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# General settings & flags\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for 64 or 32 bit\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get the platform\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: iOS?\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Don't mistake osx for unix\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Default option knobs\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compiler info\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# VisualStudio 8.0+\n",
        "Line" : 140,
        "CharPositionInLine" : 34
      },
      "10" : {
        "Text" : "#set(CMAKE_C_FLAGS \"/ZI /WX- /\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Default flags, if not set otherwise\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Hackish, but does the trick on Win32\n",
        "Line" : 156,
        "CharPositionInLine" : 37
      },
      "13" : {
        "Text" : "# Those are used for pkg-config and friends, so that the SDL2.pc, sdl2-config,\n\n# etc. are created correctly.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# We build SDL on cygwin without the UNIX emulation layer\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# General includes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#set_option(DEPENDENCY_TRACKING \"Use gcc -MMD -MT dependency tracking\" ON)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#${UNIX_SYS})\n",
        "Line" : 243,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : "#${UNIX_SYS})\n",
        "Line" : 244,
        "CharPositionInLine" : 59
      },
      "19" : {
        "Text" : "# TODO: We should (should we?) respect cmake's ${BUILD_SHARED_LIBS} flag here\n\n# The options below are for compatibility to configure's default behaviour.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# General source files\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Do nada - use optimization settings to determine the assertion level\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Compiler option evaluation\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO: Those all seem to be quite GCC specific - needs to be\n\n# reworked for better compiler support\n",
        "Line" : 347,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# if only HAVE_ALTIVEC_H_HDR is set\n",
        "Line" : 460,
        "CharPositionInLine" : 31
      },
      "25" : {
        "Text" : "# TODO: SDL_cpuinfo.h needs to support the user's configuration wish\n\n# for MSVC - right now it is always activated\n",
        "Line" : 469,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# TODO:\n\n#else(ASSEMBLY)\n\n#  if(USE_GCC OR USE_CLANG)\n\n#    list(APPEND EXTRA_CFLAGS \"-mno-sse\" \"-mno-sse2\" \"-mno-mmx\")\n\n#  endif()\n",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# TODO: Can't deactivate on FreeBSD? w/o LIBC, SDL_stdinc.h can't define\n\n# anything.\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# needed for M_PI\n",
        "Line" : 510,
        "CharPositionInLine" : 41
      },
      "29" : {
        "Text" : "# TODO: refine the mprotect check\n",
        "Line" : 526,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Enable/disable various subsystems of the SDL library\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Haptic requires some private functions from the joystick subsystem.\n",
        "Line" : 586,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# TODO: in configure.in, the test for LOADSO and SDL_DLOPEN is a bit weird:\n\n# if LOADSO is not wanted, SDL_LOADSO_DISABLED is set\n\n# If however on Unix or APPLE dlopen() is detected via CheckDLOPEN(),\n\n# SDL_LOADSO_DISABLED will not be set, regardless of the LOADSO settings\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# General SDL subsystem options, valid for all platforms\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# CheckDummyAudio/CheckDiskAudio - valid for all platforms\n",
        "Line" : 603,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Relevant for Unix/Darwin only\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Platform-specific options and settings\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# !!! FIXME: this needs pkg-config to find the include path, I think.\n",
        "Line" : 712,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# seems to be BSD specific - limit the test to BSD only?\n",
        "Line" : 727,
        "CharPositionInLine" : 20
      },
      "39" : {
        "Text" : "# Check for DirectX\n",
        "Line" : 800,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# TODO: change $ENV{DXSDL_DIR} to get the path from the include checks\n",
        "Line" : 814,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# requires SDL_LOADSO on Windows (IME, DX, etc.)\n",
        "Line" : 841,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Libraries for Win32 native and MinGW\n",
        "Line" : 884,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# TODO: in configure.in the check for timers is set on\n\n# cygwin | mingw32* - does this include mingw32CE?\n",
        "Line" : 887,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# TODO: rework this for proper MacOS X, iOS and Darwin support\n",
        "Line" : 942,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Requires the darwin file implementation\n",
        "Line" : 944,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Actually load the frameworks at the end so we don't duplicate include.\n",
        "Line" : 1009,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# iOS hack needed - http://code.google.com/p/ios-cmake/ ?\n",
        "Line" : 1035,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# TODO: Use FIND_PACKAGE(OpenGL) instead\n",
        "Line" : 1071,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Dummies\n\n# configure.in does it differently:\n\n# if not have X\n\n#   if enable_X {  SDL_X_DISABLED = 1 }\n\n#   [add dummy sources]\n\n# so it always adds a dummy, without checking, if it was actually requested.\n\n# This leads to missing internal references on building, since the\n\n# src/X/*.c does not get included.\n",
        "Line" : 1083,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# results in unresolved symbols on OSX\n",
        "Line" : 1093,
        "CharPositionInLine" : 33
      },
      "51" : {
        "Text" : "# We always need to have threads and timers around\n",
        "Line" : 1115,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Append the -MMD -MT flags\n\n# if(DEPENDENCY_TRACKING)\n\n#   if(COMPILER_IS_GNUCC)\n\n#     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -MMD -MT \\$@\")\n\n#   endif()\n\n# endif()\n",
        "Line" : 1131,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Prepare the flags and remove duplicates\n",
        "Line" : 1141,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Compat helpers for the configuration files\n",
        "Line" : 1154,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# TODO: we need a Windows script, too\n",
        "Line" : 1156,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Clean up the different lists\n",
        "Line" : 1179,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "##### Info output #####\n",
        "Line" : 1198,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Longest option is VIDEO_X11_XSCREENSAVER = 22 characters\n\n# Get the padding\n",
        "Line" : 1215,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Ensure that the extra cflags are used at compile time\n",
        "Line" : 1238,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Always build SDLmain\n",
        "Line" : 1241,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# TODO: Win32 platforms keep the same suffix .lib for import and static\n\n# libraries - do we need to consider this?\n",
        "Line" : 1271,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "##### Installation targets #####\n\n#install(TARGETS ${_INSTALL_LIBS}\n\n#  LIBRARY DESTINATION \"lib${LIB_SUFFIX}\"\n\n#  ARCHIVE DESTINATION \"lib${LIB_SUFFIX}\")\n",
        "Line" : 1277,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#file(GLOB INCLUDE_FILES ${SDL2_SOURCE_DIR}/include/*.h)\n\n#file(GLOB BIN_INCLUDE_FILES ${SDL2_BINARY_DIR}/include/*.h)\n\n#foreach(_FNAME ${BIN_INCLUDE_FILES})\n\n#  get_filename_component(_INCNAME ${_FNAME} NAME)\n\n#  list(REMOVE_ITEM INCLUDE_FILES ${SDL2_SOURCE_DIR}/include/${_INCNAME})\n\n#endforeach()\n\n#list(APPEND INCLUDE_FILES ${BIN_INCLUDE_FILES})\n\n#install(FILES ${INCLUDE_FILES} DESTINATION include/SDL2)\n",
        "Line" : 1282,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#if(NOT WINDOWS OR CYGWIN)\n",
        "Line" : 1291,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#if(SDL_SHARED)\n",
        "Line" : 1292,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "#install(CODE \"\n",
        "Line" : 1293,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink\n\n#\\\"libSDL2-2.0.so\\\" \\\"libSDL2.so\\\")\")\n",
        "Line" : 1294,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "#install(FILES ${SDL2_BINARY_DIR}/libSDL2.so DESTINATION \"lib${LIB_SUFFIX}\")\n",
        "Line" : 1296,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# endif()\n",
        "Line" : 1297,
        "CharPositionInLine" : 1
      },
      "70" : {
        "Text" : "#if(FREEBSD)\n",
        "Line" : 1298,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# FreeBSD uses ${PREFIX}/libdata/pkgconfig\n\n#install(FILES ${SDL2_BINARY_DIR}/sdl2.pc DESTINATION \"libdata/pkgconfig\")\n",
        "Line" : 1299,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "#else(FREEBSD)\n",
        "Line" : 1301,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "#install(FILES ${SDL2_BINARY_DIR}/sdl2.pc\n",
        "Line" : 1302,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# DESTINATION \"lib${LIB_SUFFIX}/pkgconfig\")\n",
        "Line" : 1303,
        "CharPositionInLine" : 5
      },
      "75" : {
        "Text" : "#endif()\n\n#install(PROGRAMS ${SDL2_BINARY_DIR}/sdl2-config DESTINATION bin)\n\n# TODO: what about the .spec file? Is it only needed for RPM creation?\n\n#install(FILES \"${SDL2_SOURCE_DIR}/sdl2.m4\" DESTINATION \"share/aclocal\")\n",
        "Line" : 1304,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "#else()\n",
        "Line" : 1308,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#install(TARGETS SDL2 RUNTIME DESTINATION bin)\n",
        "Line" : 1309,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "#endif()\n",
        "Line" : 1310,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 79
    },
    "Additional/AndroidApp/jni/sdl2/cmake/macros.cmake" : {
      "ObjectId" : "c234a566c0ae27c2208814fc9adaa2c867a0ab80",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Message Output\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix for each element\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Do not use string(REPLACE \";\" \" \") here to avoid messing up list\n\n# entries\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "Additional/AndroidApp/jni/sdl2/cmake/sdlchecks.cmake" : {
      "ObjectId" : "2cd09e6ffff5b52e05c499793fb9557ff4927a35",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# reduce the library name for shared linking\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# resolves symlinks\n",
        "Line" : 9,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ALSA_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - PULSEAUDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - ESD_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ARTS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO\n",
        "Line" : 211,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - NAS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: set include paths properly, so the NAS headers are found\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - SNDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: set include paths properly, so the sndio headers are found\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - FUSIONSOUND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - X11_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for multitouch\n",
        "Line" : 451,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Requires:\n\n# - EGL\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Requires:\n\n# - n/a\n\n#\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Apple always has Cocoa.\n",
        "Line" : 559,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - DIRECTFB_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Rquires:\n\n# - nada\n\n# Optional:\n\n# - THREADS opt\n\n# Sets:\n\n# PTHREAD_CFLAGS\n\n# PTHREAD_LIBS\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# causes Carbon.p complaints?\n\n# set(PTHREAD_CFLAGS \"-D_REENTRANT -D_THREAD_SAFE\")\n",
        "Line" : 671,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Run some tests\n",
        "Line" : 703,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Can be faked, if necessary\n\n# Can be faked, if necessary\n",
        "Line" : 773,
        "CharPositionInLine" : 65
      },
      "27" : {
        "Text" : "# Requires\n\n# - nada\n\n# Optional:\n\n# Sets:\n\n# USB_LIBS\n\n# USB_CFLAGS\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "Additional/AndroidApp/jni/sdl2/include/SDL_config.h.cmake" : {
      "ObjectId" : "b6fb53aa237d3b1a6a957a1082b16cd803f71fb2",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*\n  Simple DirectMedia Layer\n  Copyright (C) 1997-2014 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/**\n *  \\file SDL_config.h.in\n *\n *  This is a set of defines to configure the SDL features\n */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* General platform specific identifiers */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C language features */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* C datatypes */\n/* Define SIZEOF_VOIDP for 64/32 architectures */",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Comment this if you want to build without any C library requirements */",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Useful headers */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* C library functions */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* We may need some replacement for stdarg.h here */",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* SDL internal assertion support */",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Allow disabling of core subsystems */",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Enable various audio drivers */",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Enable various input drivers */",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Enable various shared object loading systems */",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enable various threading systems */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Enable various timer systems */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Enable various video drivers */",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* !!! FIXME: in configure script version, missing here: */",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Enable OpenGL support */",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Enable system power support */",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Enable system filesystem support */",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Enable assembly routines */",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Platform specific definitions */",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Older Visual C++ headers don't have the Win64-compatible typedefs... */",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "CMake/CheckSharedFunctionExists.cmake" : {
      "ObjectId" : "4980effad4c2ab45c3782e89c352eb4989206247",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if a symbol exists as a function, variable, or macro\n\n# CHECK_SYMBOL_EXISTS(<symbol> <files> <variable>)\n\n#\n\n# Check that the <symbol> is available after including given header\n\n# <files> and store the result in a <variable>.  Specify the list\n\n# of files in one argument as a semicolon-separated list.\n\n#\n\n# If the header files define the symbol as a macro it is considered\n\n# available and assumed to work.  If the header files declare the\n\n# symbol as a function or variable then the symbol must also be\n\n# available for linking.  If the symbol is a type or enum value\n\n# it will not be recognized (consider using CheckTypeSize or\n\n# CheckCSourceCompiles).\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMake/CopyFiles.cmake" : {
      "ObjectId" : "7b0acbf79dd603e48f6568a4d31e99731fe8f0fb",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindMono.cmake" : {
      "ObjectId" : "ae4ef08f84ec7e5a775e68e8daa035f1237a2b5a",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the mono, mcs, gmcs and gacutil\n\n#\n\n# defines\n\n#\n\n# MONO_FOUND - system has mono, mcs, gmcs and gacutil\n\n# MONO_PATH - where to find 'mono'\n\n# GMCS_PATH - where to find 'gmcs'\n\n# GACUTIL_PATH - where to find 'gacutil'\n\n#\n\n# copyright (c) 2007 Arno Rehn arno@arnorehn.de\n\n#\n\n# Redistribution and use is allowed according to the terms of the GPL license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindSSE.cmake" : {
      "ObjectId" : "c4897e16cd3d14dfd007d64ac53c1336e6bd5898",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Originally developed by Matthias Kretz as part of the Vc library.\n\n# http://gitorious.org/vc/vc/trees/master/cmake.\n\n#\n\n# Licensed under the terms of the GNU LGPL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if SSE instructions are available on the machine where\n\n# the project is compiled.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# /proc/cpuinfo apparently omits sse3 :(\n",
        "Line" : 20,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# TODO\n",
        "Line" : 84,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 4
    },
    "CMake/OutOfSourceBuild.cmake" : {
      "ObjectId" : "5863ce7a969cc5060c891bb9686fffc81f4f90e5",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disallow in-source build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/Packages/FindOggVorbis.cmake" : {
      "ObjectId" : "28575d396d5bcfc3c4de03523c33b591fe0f0dee",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the OggVorbis libraries\n\n# Once done this will define\n\n#\n\n#  OGGVORBIS_FOUND - system has OggVorbis\n\n#  OGGVORBIS_VERSION - set either to 1 or 2\n\n#  OGGVORBIS_INCLUDE_DIR - the OggVorbis include directory\n\n#  OGGVORBIS_LIBRARIES - The libraries needed to use OggVorbis\n\n#  OGG_LIBRARY         - The Ogg library\n\n#  VORBIS_LIBRARY      - The Vorbis library\n\n#  VORBISFILE_LIBRARY  - The VorbisFile library\n\n#  VORBISENC_LIBRARY   - The VorbisEnc library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Richard Laerkaeng, <richard@goteborg.utfors.se>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#check_include_files(vorbis/vorbisfile.h HAVE_VORBISFILE_H)\n\n#check_library_exists(ogg ogg_page_version \"\" HAVE_LIBOGG)\n\n#check_library_exists(vorbis vorbis_info_init \"\" HAVE_LIBVORBIS)\n\n#check_library_exists(vorbisfile ov_open \"\" HAVE_LIBVORBISFILE)\n\n#check_library_exists(vorbisenc vorbis_info_clear \"\" HAVE_LIBVORBISENC)\n\n#check_library_exists(vorbis vorbis_bitrate_addblock \"\" HAVE_LIBVORBISENC2)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#if (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis found\")\n\n#    set (VORBIS_LIBS \"-lvorbis -logg\")\n\n#    set (VORBISFILE_LIBS \"-lvorbisfile\")\n\n#    set (VORBISENC_LIBS \"-lvorbisenc\")\n\n#    set (OGGVORBIS_FOUND TRUE)\n\n#    if (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 2)\n\n#    else (HAVE_LIBVORBISENC2)\n\n#        set (HAVE_VORBIS 1)\n\n#    endif (HAVE_LIBVORBISENC2)\n\n#else (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n\n#    message(STATUS \"Ogg/Vorbis not found\")\n\n#endif (HAVE_LIBOGG AND HAVE_VORBISFILE_H AND HAVE_LIBVORBIS AND HAVE_LIBVORBISFILE AND HAVE_LIBVORBISENC)\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMake/Packages/FindOpenGLES.cmake" : {
      "ObjectId" : "f0e653f88095c0e0959201305fcacf9c9194be56",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n\n# Try to find OpenGLES\n\n# Once done this will define\n\n#  \n\n#  OPENGLES_FOUND        - system has OpenGLES\n\n#  OPENGLES_INCLUDE_DIR  - the GL include directory\n\n#  OPENGLES_LIBRARIES    - Link these to use OpenGLES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MS compiler - todo - fix the following line:\n",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# On Unix OpenGL most certainly always requires X11.\n\n# Feel free to tighten up these conditions if you don't \n\n# think this is always true.\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "CMake/Packages/FindOpenGLES2.cmake" : {
      "ObjectId" : "3d938963e4ec9bd6b1ba897f4a963f20b378ff3e",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n\n# Try to find OpenGLES and EGL\n\n# Once done this will define\n\n#  \n\n#  OPENGLES2_FOUND        - system has OpenGLES\n\n#  OPENGLES2_INCLUDE_DIR  - the GL include directory\n\n#  OPENGLES2_LIBRARIES    - Link these to use OpenGLES\n\n#\n\n#  EGL_FOUND        - system has EGL\n\n#  EGL_INCLUDE_DIR  - the EGL include directory\n\n#  EGL_LIBRARIES    - Link these to use EGL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Unix OpenGL most certainly always requires X11.\n\n# Feel free to tighten up these conditions if you don't \n\n# think this is always true.\n\n# It's not true on OSX.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "CMake/SDLChecks.cmake" : {
      "ObjectId" : "2cd09e6ffff5b52e05c499793fb9557ff4927a35",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# reduce the library name for shared linking\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# resolves symlinks\n",
        "Line" : 9,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# Requires:\n\n# - n/a\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ALSA_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - PULSEAUDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - ESD_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - ARTS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO\n",
        "Line" : 211,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - NAS_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: set include paths properly, so the NAS headers are found\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - SNDIO_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: set include paths properly, so the sndio headers are found\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - FUSIONSOUND_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Requires:\n\n# - n/a\n\n# Optional:\n\n# - X11_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for multitouch\n",
        "Line" : 451,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Requires:\n\n# - EGL\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# !!! FIXME: hook up dynamic loading here.\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Requires:\n\n# - n/a\n\n#\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Apple always has Cocoa.\n",
        "Line" : 559,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "# Requires:\n\n# - PkgCheckModules\n\n# Optional:\n\n# - DIRECTFB_SHARED opt\n\n# - HAVE_DLOPEN opt\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Requires:\n\n# - nada\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Rquires:\n\n# - nada\n\n# Optional:\n\n# - THREADS opt\n\n# Sets:\n\n# PTHREAD_CFLAGS\n\n# PTHREAD_LIBS\n",
        "Line" : 654,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# causes Carbon.p complaints?\n\n# set(PTHREAD_CFLAGS \"-D_REENTRANT -D_THREAD_SAFE\")\n",
        "Line" : 671,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Run some tests\n",
        "Line" : 703,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Can be faked, if necessary\n\n# Can be faked, if necessary\n",
        "Line" : 773,
        "CharPositionInLine" : 65
      },
      "27" : {
        "Text" : "# Requires\n\n# - nada\n\n# Optional:\n\n# Sets:\n\n# USB_LIBS\n\n# USB_CFLAGS\n",
        "Line" : 789,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "CMake/SDLMacros.cmake" : {
      "ObjectId" : "c234a566c0ae27c2208814fc9adaa2c867a0ab80",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Message Output\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix for each element\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Do not use string(REPLACE \";\" \" \") here to avoid messing up list\n\n# entries\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CMake/Toolchains/Android-new.cmake" : {
      "ObjectId" : "dfbd1218c5e7f28e5b4ba231e967210e7a80058f",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2014, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  Neither the name of the copyright holder nor the names of its\n\n#     contributors may be used to endorse or promote products derived from this\n\n#     software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r9\n\n#  Requires cmake 2.6.3 or newer (2.8.5 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  The file is mantained by the OpenCV project. The latest version can be get at\n\n#  http://code.opencv.org/projects/opencv/repository/revisions/master/changes/android/android.toolchain.cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Linux (using standalone toolchain):\n\n#   $ export ANDROID_STANDALONE_TOOLCHAIN=/absolute/path/to/android-toolchain\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (or newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_STANDALONE_TOOLCHAIN=/opt/android-toolchain - path to the\n\n#      standalone toolchain. This option is not used if full NDK is found\n\n#      (ignored if ANDROID_NDK is set).\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16).\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP.\n\n#        \"x86\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"mips\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.6 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r8c the possible values are:\n\n#\n\n#        * arm-linux-androideabi-4.4.3\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-clang3.1\n\n#        * mipsel-linux-android-4.4.3\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-clang3.1\n\n#        * x86-4.4.3\n\n#        * x86-4.6\n\n#        * x86-clang3.1\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"x86\" (inapplicable) and\n\n#      \"armeabi-v6 with VFP\" (is forced to be ON) ABIs.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT=${CMAKE_SOURCE_DIR} - where to output binary\n\n#      files. See additional details below.\n\n#\n\n#    ANDROID_SET_OBSOLETE_VARIABLES=ON - if set, then toolchain defines some\n\n#      obsolete variables which were used by previous versions of this file for\n\n#      backward compatibility.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS will be set true, mutually\n\n#    exclusive. NEON option will be set true if VFP is set to NEON.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT should be set in cache to determine where Android\n\n#    libraries will be installed.\n\n#    Default is ${CMAKE_SOURCE_DIR}, and the android libs will always be\n\n#    under the ${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME}\n\n#    (depending on the target ABI). This is convenient for Android packaging.\n\n#\n\n#  Change Log:\n\n#   - initial version December 2010\n\n#   - April 2011\n\n#     [+] added possibility to build with NDK (without standalone toolchain)\n\n#     [+] support cross-compilation on Windows (native, no cygwin support)\n\n#     [+] added compiler option to force \"char\" type to be signed\n\n#     [+] added toolchain option to compile to 32-bit ARM instructions\n\n#     [+] added toolchain option to disable SWIG search\n\n#     [+] added platform \"armeabi-v7a with VFPV3\"\n\n#     [~] ARM_TARGETS renamed to ARM_TARGET\n\n#     [+] EXECUTABLE_OUTPUT_PATH is set by toolchain (required on Windows)\n\n#     [~] Fixed bug with ANDROID_API_LEVEL variable\n\n#     [~] turn off SWIG search if it is not found first time\n\n#   - May 2011\n\n#     [~] ANDROID_LEVEL is renamed to ANDROID_API_LEVEL\n\n#     [+] ANDROID_API_LEVEL is detected by toolchain if not specified\n\n#     [~] added guard to prevent changing of output directories on the first\n\n#         cmake pass\n\n#     [~] toolchain exits with error if ARM_TARGET is not recognized\n\n#   - June 2011\n\n#     [~] default NDK path is updated for version r5c\n\n#     [+] variable CMAKE_SYSTEM_PROCESSOR is set based on ARM_TARGET\n\n#     [~] toolchain install directory is added to linker paths\n\n#     [-] removed SWIG-related stuff from toolchain\n\n#     [+] added macro find_host_package, find_host_program to search\n\n#         packages/programs on the host system\n\n#     [~] fixed path to STL library\n\n#   - July 2011\n\n#     [~] fixed options caching\n\n#     [~] search for all supported NDK versions\n\n#     [~] allowed spaces in NDK path\n\n#   - September 2011\n\n#     [~] updated for NDK r6b\n\n#   - November 2011\n\n#     [*] rewritten for NDK r7\n\n#     [+] x86 toolchain support (experimental)\n\n#     [+] added \"armeabi-v6 with VFP\" ABI for ARMv6 processors.\n\n#     [~] improved compiler and linker flags management\n\n#     [+] support different build flags for Release and Debug configurations\n\n#     [~] by default compiler flags the same as used by ndk-build (but only\n\n#         where reasonable)\n\n#     [~] ANDROID_NDK_TOOLCHAIN_ROOT is splitted to ANDROID_STANDALONE_TOOLCHAIN\n\n#         and ANDROID_TOOLCHAIN_ROOT\n\n#     [~] ARM_TARGET is renamed to ANDROID_ABI\n\n#     [~] ARMEABI_NDK_NAME is renamed to ANDROID_NDK_ABI_NAME\n\n#     [~] ANDROID_API_LEVEL is renamed to ANDROID_NATIVE_API_LEVEL\n\n#   - January 2012\n\n#     [+] added stlport_static support (experimental)\n\n#     [+] added special check for cygwin\n\n#     [+] filtered out hidden files (starting with .) while globbing inside NDK\n\n#     [+] automatically applied GLESv2 linkage fix for NDK revisions 5-6\n\n#     [+] added ANDROID_GET_ABI_RAWNAME to get NDK ABI names by CMake flags\n\n#   - February 2012\n\n#     [+] updated for NDK r7b\n\n#     [~] fixed cmake try_compile() command\n\n#     [~] Fix for missing install_name_tool on OS X\n\n#   - March 2012\n\n#     [~] fixed incorrect C compiler flags\n\n#     [~] fixed CMAKE_SYSTEM_PROCESSOR change on ANDROID_ABI change\n\n#     [+] improved toolchain loading speed\n\n#     [+] added assembler language support (.S)\n\n#     [+] allowed preset search paths and extra search suffixes\n\n#   - April 2012\n\n#     [+] updated for NDK r7c\n\n#     [~] fixed most of problems with compiler/linker flags and caching\n\n#     [+] added option ANDROID_FUNCTION_LEVEL_LINKING\n\n#   - May 2012\n\n#     [+] updated for NDK r8\n\n#     [+] added mips architecture support\n\n#   - August 2012\n\n#     [+] updated for NDK r8b\n\n#     [~] all intermediate files generated by toolchain are moved to CMakeFiles\n\n#     [~] libstdc++ and libsupc are removed from explicit link libraries\n\n#     [+] added CCache support (via NDK_CCACHE environment or cmake variable)\n\n#     [+] added gold linker support for NDK r8b\n\n#     [~] fixed mips linker flags for NDK r8b\n\n#   - September 2012\n\n#     [+] added NDK release name detection (see ANDROID_NDK_RELEASE)\n\n#     [+] added support for all C++ runtimes from NDK\n\n#         (system, gabi++, stlport, gnustl)\n\n#     [+] improved warnings on known issues of NDKs\n\n#     [~] use gold linker as default if available (NDK r8b)\n\n#     [~] globally turned off rpath\n\n#     [~] compiler options are aligned with NDK r8b\n\n#   - October 2012\n\n#     [~] fixed C++ linking: explicitly link with math library (OpenCV #2426)\n\n#   - November 2012\n\n#     [+] updated for NDK r8c\n\n#     [+] added support for clang compiler\n\n#   - December 2012\n\n#     [+] suppress warning about unused CMAKE_TOOLCHAIN_FILE variable\n\n#     [+] adjust API level to closest compatible as NDK does\n\n#     [~] fixed ccache full path search\n\n#     [+] updated for NDK r8d\n\n#     [~] compiler options are aligned with NDK r8d\n\n#   - March 2013\n\n#     [+] updated for NDK r8e (x86 version)\n\n#     [+] support x86_64 version of NDK\n\n#   - April 2013\n\n#     [+] support non-release NDK layouts (from Linaro git and Android git)\n\n#     [~] automatically detect if explicit link to crtbegin_*.o is needed\n\n#   - June 2013\n\n#     [~] fixed stl include path for standalone toolchain made by NDK >= r8c\n\n#   - July 2013\n\n#     [+] updated for NDK r9\n\n#   - November 2013\n\n#     [+] updated for NDK r9b\n\n#   - December 2013\n\n#     [+] updated for NDK r9c\n\n#   - January 2014\n\n#     [~] fix copying of shared STL\n\n#   - April 2014\n\n#     [+] updated for NDK r9d\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 311,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable only to suppress \"unused variable\" warning\n",
        "Line" : 316,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# this one is important\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this one not so much\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rpath makes low sence for Android\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 468,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# detect current host platform\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 505,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 509,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 523,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# remember found paths\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# try to detect change\n",
        "Line" : 548,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# android NDK layout\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 575,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 587,
        "CharPositionInLine" : 71
      },
      "19" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 592,
        "CharPositionInLine" : 71
      },
      "20" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 596,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 603,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 679,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 692,
        "CharPositionInLine" : 39
      },
      "26" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# choose target ABI\n",
        "Line" : 723,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set target ABI options\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 764,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 795,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# choose toolchain\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# choose native API level\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# adjust API level\n",
        "Line" : 860,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# validate\n",
        "Line" : 872,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# remember target ABI\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 901,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# honor legacy ANDROID_USE_STLPORT\n",
        "Line" : 903,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 987,
        "CharPositionInLine" : 3
      },
      "41" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 997,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# clang\n",
        "Line" : 1032,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 1056,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# do nothing\n",
        "Line" : 1062,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1097,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1115,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1117,
        "CharPositionInLine" : 137
      },
      "48" : {
        "Text" : "# r7-r8\n",
        "Line" : 1119,
        "CharPositionInLine" : 110
      },
      "49" : {
        "Text" : "# before r7\n",
        "Line" : 1121,
        "CharPositionInLine" : 36
      },
      "50" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1141,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# TODO: check if .so file exists before the renaming\n",
        "Line" : 1144,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# ccache support\n",
        "Line" : 1148,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1161,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1204,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1223,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1237,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1252,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# NDK flags\n",
        "Line" : 1259,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1269,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1298,
        "CharPositionInLine" : 62
      },
      "62" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1305,
        "CharPositionInLine" : 72
      },
      "63" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1308,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1319,
        "CharPositionInLine" : 91
      },
      "65" : {
        "Text" : "# STL\n",
        "Line" : 1334,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# C objects:\n",
        "Line" : 1345,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1363,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1365,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# linker flags\n",
        "Line" : 1385,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1389,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1396,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# version 4.6\n",
        "Line" : 1425,
        "CharPositionInLine" : 8
      },
      "73" : {
        "Text" : "# cache flags\n",
        "Line" : 1453,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1464,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# finish flags\n",
        "Line" : 1470,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# configure rtti\n",
        "Line" : 1487,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1496,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1507,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# avoid CMP0015 policy warning\n",
        "Line" : 1509,
        "CharPositionInLine" : 111
      },
      "80" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1512,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# setup output directories\n",
        "Line" : 1549,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# copy shaed stl library to build directory\n",
        "Line" : 1562,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1574,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1578,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1581,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1587,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1609,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1646,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1682,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1684,
        "CharPositionInLine" : 1
      },
      "91" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1686,
        "CharPositionInLine" : 37
      },
      "92" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1690,
        "CharPositionInLine" : 1
      },
      "93" : {
        "Text" : "# set some obsolete variables for backward compatibility\n",
        "Line" : 1695,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_SET_OBSOLETE_VARIABLES : ON/OFF\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   NDK_CCACHE : <path to your ccache executable>\n\n# Obsolete:\n\n#   ANDROID_API_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL\n\n#   ARM_TARGET : superseded by ANDROID_ABI\n\n#   ARM_TARGETS : superseded by ANDROID_ABI (can be set only)\n\n#   ANDROID_NDK_TOOLCHAIN_ROOT : superseded by ANDROID_STANDALONE_TOOLCHAIN (can be set only)\n\n#   ANDROID_USE_STLPORT : superseded by ANDROID_STL=stlport_static\n\n#   ANDROID_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL (completely removed)\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   MIPS : TRUE if configured for mips\n\n#   BUILD_ANDROID : always TRUE\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : one of r5, r5b, r5c, r6, r6b, r7, r7b, r7c, r8, r8b, r8c, r8d, r8e, r9, r9b, r9c, r9d; set only for NDK\n\n#   ANDROID_ARCH_NAME : \"arm\" or \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n# Obsolete:\n\n#   ARMEABI_NDK_NAME : superseded by ANDROID_NDK_ABI_NAME\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1705,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 95
    },
    "CMake/Toolchains/Android.cmake" : {
      "ObjectId" : "3d9de06736ba14a98203a8f05fd498fa6d84a6ab",
      "LastModified" : "2015-05-15T08:37:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r9\n\n#  Requires cmake 2.6.3 or newer (2.8.5 or newer is recommended).\n\n#  See home page: http://code.google.com/p/android-cmake/\n\n#\n\n#  The file is mantained by the OpenCV project. And also can be found at\n\n#  http://code.opencv.org/projects/opencv/repository/revisions/master/changes/android/android.toolchain.cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Linux (using standalone toolchain):\n\n#   $ export ANDROID_STANDALONE_TOOLCHAIN=/absolute/path/to/android-toolchain\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (or newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ \"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\"\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_STANDALONE_TOOLCHAIN=/opt/android-toolchain - path to the\n\n#      standalone toolchain. This option is not used if full NDK is found\n\n#      (ignored if ANDROID_NDK is set).\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a -  specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16).\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP.\n\n#        \"x86\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"mips\" - matches to the NDK ABI with the same name\n\n#            (not testes on real devices)\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain used.\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set true to generate 32-bit ARM instructions\n\n#      instead of Thumb-1. Is not available for \"x86\" (inapplicable) and\n\n#      \"armeabi-v6 with VFP\" (forced) ABIs.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set true to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set true to allow undefined symbols in shared\n\n#      libraries. Automatically turned on for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT=${CMAKE_SOURCE_DIR} - where to output binary\n\n#      files. See additional details below.\n\n#\n\n#    ANDROID_SET_OBSOLETE_VARIABLES=ON - it set, then toolchain defines some\n\n#      obsolete variables which were set by previous versions of this file for\n\n#      backward compatibility.\n\n#\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#      The flags will be prepopulated with critical flags, so don't loose them.\n\n#      Also be aware that toolchain also sets configuration-specific compiler\n\n#      flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 will be set true, mutually exclusive.\n\n#    NEON option will be set true if VFP is set to NEON.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT should be set in cache to determine where Android\n\n#    libraries will be installed.\n\n#    Default is ${CMAKE_SOURCE_DIR}, and the android libs will always be\n\n#    under the ${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME}\n\n#    (depending on the target ABI). This is convenient for Android packaging.\n\n#\n\n#  Authors:\n\n#    Ethan Rublee ethan.ruble@gmail.com\n\n#    Andrey Kamaev andrey.kamaev@itseez.com\n\n#\n\n#  Change Log:\n\n#   - initial version December 2010\n\n#   - modified April 2011\n\n#     [+] added possibility to build with NDK (without standalone toolchain)\n\n#     [+] support cross-compilation on Windows (native, no cygwin support)\n\n#     [+] added compiler option to force \"char\" type to be signed\n\n#     [+] added toolchain option to compile to 32-bit ARM instructions\n\n#     [+] added toolchain option to disable SWIG search\n\n#     [+] added platform \"armeabi-v7a with VFPV3\"\n\n#     [~] ARM_TARGETS renamed to ARM_TARGET\n\n#     [+] EXECUTABLE_OUTPUT_PATH is set by toolchain (required on Windows)\n\n#     [~] Fixed bug with ANDROID_API_LEVEL variable\n\n#     [~] turn off SWIG search if it is not found first time\n\n#   - modified May 2011\n\n#     [~] ANDROID_LEVEL is renamed to ANDROID_API_LEVEL\n\n#     [+] ANDROID_API_LEVEL is detected by toolchain if not specified\n\n#     [~] added guard to prevent changing of output directories on the first\n\n#         cmake pass\n\n#     [~] toolchain exits with error if ARM_TARGET is not recognized\n\n#   - modified June 2011\n\n#     [~] default NDK path is updated for version r5c\n\n#     [+] variable CMAKE_SYSTEM_PROCESSOR is set based on ARM_TARGET\n\n#     [~] toolchain install directory is added to linker paths\n\n#     [-] removed SWIG-related stuff from toolchain\n\n#     [+] added macro find_host_package, find_host_program to search\n\n#         packages/programs on the host system\n\n#     [~] fixed path to STL library\n\n#   - modified July 2011\n\n#     [~] fixed options caching\n\n#     [~] search for all supported NDK versions\n\n#     [~] allowed spaces in NDK path\n\n#   - modified September 2011\n\n#     [~] updated for NDK r6b\n\n#   - modified November 2011\n\n#     [*] rewritten for NDK r7\n\n#     [+] x86 toolchain support (experimental)\n\n#     [+] added \"armeabi-v6 with VFP\" ABI for ARMv6 processors.\n\n#     [~] improved compiler and linker flags management\n\n#     [+] support different build flags for Release and Debug configurations\n\n#     [~] by default compiler flags the same as used by ndk-build (but only\n\n#         where reasonable)\n\n#     [~] ANDROID_NDK_TOOLCHAIN_ROOT is splitted to ANDROID_STANDALONE_TOOLCHAIN\n\n#         and ANDROID_TOOLCHAIN_ROOT\n\n#     [~] ARM_TARGET is renamed to ANDROID_ABI\n\n#     [~] ARMEABI_NDK_NAME is renamed to ANDROID_NDK_ABI_NAME\n\n#     [~] ANDROID_API_LEVEL is renamed to ANDROID_NATIVE_API_LEVEL\n\n#   - modified January 2012\n\n#     [+] added stlport_static support (experimental)\n\n#     [+] added special check for cygwin\n\n#     [+] filtered out hidden files (starting with .) while globbing inside NDK\n\n#     [+] automatically applied GLESv2 linkage fix for NDK revisions 5-6\n\n#     [+] added ANDROID_GET_ABI_RAWNAME to get NDK ABI names by CMake flags\n\n#   - modified February 2012\n\n#     [+] updated for NDK r7b\n\n#     [~] fixed cmake try_compile() command\n\n#     [~] Fix for missing install_name_tool on OS X\n\n#   - modified March 2012\n\n#     [~] fixed incorrect C compiler flags\n\n#     [~] fixed CMAKE_SYSTEM_PROCESSOR change on ANDROID_ABI change\n\n#     [+] improved toolchain loading speed\n\n#     [+] added assembler language support (.S)\n\n#     [+] allowed preset search paths and extra search suffixes\n\n#   - modified April 2012\n\n#     [+] updated for NDK r7c\n\n#     [~] fixed most of problems with compiler/linker flags and caching\n\n#     [+] added option ANDROID_FUNCTION_LEVEL_LINKING\n\n#   - modified May 2012\n\n#     [+] updated for NDK r8\n\n#     [+] added mips architecture support\n\n#   - modified August 2012\n\n#     [+] updated for NDK r8b\n\n#     [~] all intermediate files generated by toolchain are moved into CMakeFiles\n\n#     [~] libstdc++ and libsupc are removed from explicit link libraries\n\n#   - modified December 2013\n\n#     [+] updated for NDK r9b (directory changes for Linux 64bit)\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 197,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# this one is important\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# this one not so much\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# stl version: by default gnustl_static will be used\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 353,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# detect current host platform\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 377,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 395,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# remember found paths\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# try to detect change\n",
        "Line" : 409,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# try to detect change\n",
        "Line" : 423,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# do not run gcc every time because it is relatevely expencive\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# choose target ABI\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# remember target ABI\n",
        "Line" : 526,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# set target ABI options\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 554,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 582,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# choose toolchain\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# choose native API level\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# validate\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# setup paths\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# specify the cross compiler\n",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# there may be a way to make cmake deduce these TODO deduce the rest of the tools\n",
        "Line" : 698,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# export directories\n",
        "Line" : 715,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# setup output directories\n",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# includes\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# c++ bits includes\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# flags and definitions\n",
        "Line" : 752,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# quotes will break try_compile and compiler identification\n",
        "Line" : 755,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 764,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 776,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# NDK flags\n",
        "Line" : 783,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# NDK also defines -ffunction-sections -funwind-tables but they result in worse OpenCV performance\n",
        "Line" : 785,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# extra arm-specific flags\n",
        "Line" : 790,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# release and debug flags\n",
        "Line" : 812,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# It is recommended to use the -mthumb compiler flag to force the generation\n\n# of 16-bit Thumb-1 instructions (the default being 32-bit ARM ones).\n\n# O3 instead of O2/Os in release mode - like cmake sets for desktop gcc\n",
        "Line" : 815,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n\n# O3 instead of O2/Os in release mode - like cmake sets for desktop gcc\n",
        "Line" : 823,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#sse?\n",
        "Line" : 861,
        "CharPositionInLine" : 48
      },
      "47" : {
        "Text" : "# linker flags\n",
        "Line" : 864,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# STL\n",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# cleanup for STL search\n",
        "Line" : 903,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# other linker flags\n",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to exteranal symbols. So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 916,
        "CharPositionInLine" : 1
      },
      "52" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 937,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# cache flags\n",
        "Line" : 942,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# finish flags\n",
        "Line" : 956,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 971,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# where is the target environment\n",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 984,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1006,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1041,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# set some obsolete variables for backward compatibility\n",
        "Line" : 1059,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14 (depends on NDK version)\n\n#   ANDROID_SET_OBSOLETE_VARIABLES : ON/OFF\n\n#   ANDROID_USE_STLPORT : OFF/ON - EXPERIMENTAL!!!\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n# Variables that takes effect only at first run:\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#   ANDROID_TOOLCHAIN_NAME : \"arm-linux-androideabi-4.4.3\" or \"arm-linux-androideabi-4.6\" or \"mipsel-linux-android-4.4.3\" or \"mipsel-linux-android-4.6\" or \"x86-4.4.3\" or \"x86-4.6\"\n\n# Obsolete:\n\n#   ANDROID_API_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL\n\n#   ARM_TARGET : superseded by ANDROID_ABI\n\n#   ARM_TARGETS : superseded by ANDROID_ABI (can be set only)\n\n#   ANDROID_NDK_TOOLCHAIN_ROOT : superseded by ANDROID_STANDALONE_TOOLCHAIN (can be set only)\n\n#   ANDROID_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL (completely removed)\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   BUILD_ANDROID : always TRUE\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\" or \"x86\" depending on ANDROID_ABI\n\n#   ANDROID_ARCH_NAME : \"arm\" or \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   ANDROID_SYSTEM_INCLUDE_DIRS\n\n#   ANDROID_SYSTEM_LIB_DIRS\n\n# Obsolete:\n\n#   ARMEABI_NDK_NAME : superseded by ANDROID_NDK_ABI_NAME\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1069,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 63
    },
    "CMake/Toolchains/CrossMinGW-Debian.cmake" : {
      "ObjectId" : "6c2cbc3b9cfdcee6ccccf0bf86bf72a9b28c6958",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Choose an appropriate compiler prefix\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for classical mingw32\n\n# see http://www.mingw.org/\n\n# set(COMPILER_PREFIX \"i586-mingw32msvc\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for 32 or 64 bits mingw-w64\n\n# see http://mingw-w64.sourceforge.net/\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(COMPILER_PREFIX \"x86_64-w64-mingw32\"\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#SET(CMAKE_RC_COMPILER ${COMPILER_PREFIX}-windres)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#SET(CMAKE_C_COMPILER ${COMPILER_PREFIX}-gcc)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#SET(CMAKE_CXX_COMPILER ${COMPILER_PREFIX}-g++)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# here is the target environment located\n\n# SET(USER_ROOT_PATH /home/erk/erk-win32-dev)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "CMake/Toolchains/CrossMinGW-Redhat.cmake" : {
      "ObjectId" : "fe8cf0b585ed493b70aa0110efa42005cc399a21",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Choose an appropriate compiler prefix\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for classical mingw32\n\n# see http://www.mingw.org/\n\n# set(COMPILER_PREFIX \"i586-mingw32msvc\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for 32 or 64 bits mingw-w64\n\n# see http://mingw-w64.sourceforge.net/\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(COMPILER_PREFIX \"x86_64-w64-mingw32\"\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#SET(CMAKE_RC_COMPILER ${COMPILER_PREFIX}-windres)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#SET(CMAKE_C_COMPILER ${COMPILER_PREFIX}-gcc)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#SET(CMAKE_CXX_COMPILER ${COMPILER_PREFIX}-g++)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# here is the target environment located\n\n# SET(USER_ROOT_PATH /home/erk/erk-win32-dev)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "CMake/Toolchains/Emscripten.cmake" : {
      "ObjectId" : "1d7536a5918b1ff91580127c4a7b0f9337153d63",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeLists.txt" : {
      "ObjectId" : "e0a4a4dbbc718ee88adaa6624f9c8e42189a271f",
      "LastModified" : "2015-07-23T09:57:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Let's use a reasonable modern version\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Disallow in-source builds\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Look for SSE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Documentation tool\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## SWIG for script bindings\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Set version and info\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Packaging\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Set install path\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Set up binary output path\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Set build flags\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# using GCC\n\n# LuaJIT does not build with the current MinGW\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## Remove build type from output path\n",
        "Line" : 117,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# there is probably a better way to do this\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Don't use -fPIC for executables\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# for libogg\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# for openal\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Don't use -fPIC for executables\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Include cpack after all system specifics\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Set up 3rd party dependencies\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Set up SDK dependencies\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Set up Neo dependencies\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## TODO: Only works for LuaJIT!\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#${NEO_BINARY_OUTPUT}/lua)\n",
        "Line" : 373,
        "CharPositionInLine" : 24
      },
      "24" : {
        "Text" : "## Set up subdirectories...\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Build only for PC\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Copy Android app to build dir\n",
        "Line" : 402,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "## Install files\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "Data/CMakeLists.txt" : {
      "ObjectId" : "1af44b6606822073144e6c77720f16356e596fc3",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ${NEO_INSTALL_DIR}/../share/applications/)\n",
        "Line" : 4,
        "CharPositionInLine" : 111
      },
      "1" : {
        "Text" : "# ${NEO_INSTALL_DIR}/../share/icons/)\n",
        "Line" : 5,
        "CharPositionInLine" : 64
      },
      "CommentCount" : 2
    },
    "Data/Editor/gui/CMakeLists.txt" : {
      "ObjectId" : "dce11a2f6f428f448293f82de06535c862b3db14",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Documentation/CMakeLists.txt" : {
      "ObjectId" : "ab1db38aab306a720ddcd8089caa63875b144bbd",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Developer documentation\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## SDK documentation\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## SDK documentation\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Neo/AndroidPlayer/CMakeLists.txt" : {
      "ObjectId" : "89c126bc74bbf2b0d98eb2dda3560d3e21fdfb72",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Neo include directories\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "Neo/CMakeLists.txt" : {
      "ObjectId" : "687fdfb2d58a1fcc87992fc9ce582565bb4062ab",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# IF(${DISABLE_PIC_EXECUTABLES} AND NOT ${CMAKE_CXX_FLAGS} STREQUAL \"\" AND NOT ${CMAKE_C_FLAGS} STREQUAL \"\")\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ENDIF()\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Neo/Common/CMakeLists.txt" : {
      "ObjectId" : "d67e877046870d004e480a3a67f8c140f1214af7",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build TODO: Only when editor is built!\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Build\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Needed for windows\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Neo/EmscriptenPlayer/CMakeLists.txt" : {
      "ObjectId" : "606b2b5c85d64a60a21bbba6fc05d1d5e06c2063",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Maratis include directories\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#${SDL_INCLUDE_DIR}\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## Maratis libraries\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "## System libraries\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "## Maratis libraries\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## System libraries\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "## Maratis libraries\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "## System libraries\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14
    },
    "Neo/NeoEditor/CMakeLists.txt" : {
      "ObjectId" : "ff19bba12dee8b932b193d8286b59a877cad6b38",
      "LastModified" : "2015-07-06T10:53:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Need to include *.m* files for MAC!!!\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Build\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "##  ${LUA_LIBRARIES}\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## System libraries\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "## Update needed translations\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Neo/NeoEditor/Plugins/CMakeLists.txt" : {
      "ObjectId" : "e7f88d3415e069fd62a37b624130adfa61b10464",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Neo/NeoEditor/Plugins/libs/CMakeLists.txt" : {
      "ObjectId" : "9ac814beb90023f47dcf7982c4cc14b542bde03f",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Neo/NeoEditor/Translations/CMakeLists.txt" : {
      "ObjectId" : "2c7a3b97a1f32a3c4af1a590bb0eee024243af1b",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Neo/Player/CMakeLists.txt" : {
      "ObjectId" : "3330d50a5b1306e6e4a47b29d9889e61ba2e376f",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## System libraries\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "## Maratis libraries\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "## System libraries\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## System libraries\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "SDK/CMakeLists.txt" : {
      "ObjectId" : "b5e6cf230b92244e6fb14c7f23e3bc372298e06b",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SDK/LuaApi/CMakeLists.txt" : {
      "ObjectId" : "62b4ef87997b89bd11784136e2896a7a1d12bb1f",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## TODO: Document behavior!\n\n## TODO: Get proper Lua executable path!\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "##COMMAND ${LUA_EXECUTABLE} ${NEO_SOURCE_DIR}/Tools/docl/docl --lift ${CMAKE_CURRENT_SOURCE_DIR}/Neo3D.lua -o ${DOCUMENTATION_BINARY_DIR}/LuaDoc ${CMAKE_CURRENT_SOURCE_DIR}/*.lua\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "SDK/Neo2D/CMakeLists.txt" : {
      "ObjectId" : "ddc0b48e5edaa4a8a7f9c75f5971c51e74b3902d",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build TODO: Only when editor is built!\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Build\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Needed for windows\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "SDK/NeoCore/CMakeLists.txt" : {
      "ObjectId" : "720485953d21b106a4cd5558c5ca5cba2f2231f1",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\") # \"${CMAKE_INSTALL_PREFIX}\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Install for Editor\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Install for SDK\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "SDK/NeoEngine/CMakeLists.txt" : {
      "ObjectId" : "4b058fe145b6bf705e680516379b5dcc1989f904",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\") # \"${CMAKE_INSTALL_PREFIX}\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Install for Editor\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Install for SDK\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## ADD_DEPENDENCIES(NeoEngine neoengine-swig)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Swig/CMakeLists.txt" : {
      "ObjectId" : "1b3c44c7f71605f9910ab65dfd541d9bebd439f3",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Select library to import\n",
        "Line" : 33,
        "CharPositionInLine" : 3
      },
      "1" : {
        "Text" : "## Install C# plugin\n",
        "Line" : 67,
        "CharPositionInLine" : 16
      },
      "2" : {
        "Text" : "## Install Lua API\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Tests/Benchmark/CMakeLists.txt" : {
      "ObjectId" : "2de03724693d73643cacb16f5dd20723d1133049",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "## System libraries\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "Tests/LuaApi/CMakeLists.txt" : {
      "ObjectId" : "25753874906b1c5d90281955495ea05603169829",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tests/LuaSDK/CMakeLists.txt" : {
      "ObjectId" : "361d7506ff52dea8e38fe32d848ae7f501dc849d",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "## System libraries\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "Tests/SDK/CMakeLists.txt" : {
      "ObjectId" : "6823ad07f1be7fc0932fe8e5e7da4dc12c9142ab",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# For testing the editor\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## System libraries\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "Tools/CMakeLists.txt" : {
      "ObjectId" : "e3037e022650b9bf9eff2c0625423e5931f83b9d",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tools/CrashHandler/CMakeLists.txt" : {
      "ObjectId" : "ecb13acdd8666ea5fa8915c6d194c3364790d61a",
      "LastModified" : "2015-07-06T10:53:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Tools/NeoStore/CMakeLists.txt" : {
      "ObjectId" : "78f8c6e63e181d6da0a6d550d2d2d71cad07dc8d",
      "LastModified" : "2015-07-06T10:53:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Tools/ProfileViewer/CMakeLists.txt" : {
      "ObjectId" : "347bee265a05154b4ddf5fb83e05db281ce11c66",
      "LastModified" : "2015-07-06T10:53:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Tools/ProjectManager/CMakeLists.txt" : {
      "ObjectId" : "c40e2c2098d4436ef44ba934d42012415757afa8",
      "LastModified" : "2015-07-06T10:53:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Tools/ProjectWizard/CMakeLists.txt" : {
      "ObjectId" : "6a8a908efda79f6b868cb6b8436e553bc1b3b873",
      "LastModified" : "2015-07-06T10:53:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Tools/Publisher/CMakeLists.txt" : {
      "ObjectId" : "89c1f1da1c08aeb187df6922fac6774a93a3989d",
      "LastModified" : "2015-06-06T13:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find source and headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## 3rdparty include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# SET(CMAKE_INSTALL_RPATH \"./\")\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## 3rdparty libraries\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## System libraries\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 137,
    "CMAKESOURCE" : 3,
    "MAKEFILE" : 28,
    "AUTOMAKE" : 6,
    "ANT" : 3
  },
  "ElapsedTime" : 6968
}