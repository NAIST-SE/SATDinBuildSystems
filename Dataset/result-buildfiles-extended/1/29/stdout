{
  "Repository" : "29",
  "Revision" : "HEAD",
  "ObjectId" : "1f517b8a0293f2574c3dce739e5b273164244cac",
  "CommitTime" : "2019-04-17T18:54:47Z",
  "Files" : {
    "3rdparty/carotene/CMakeLists.txt" : {
      "ObjectId" : "bfa9368d79d58b7f972a0d1f1c25487e8af9465c",
      "LastModified" : "2017-12-15T12:56:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# allow more inlines - these parameters improve performance for:\n\n# - matchTemplate about 5-10%\n\n# - goodFeaturesToTrack 10-20%\n\n# - cornerHarris 30% for some cases\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "3rdparty/carotene/hal/CMakeLists.txt" : {
      "ObjectId" : "c4b9acaedd1653aa24b062f9209cd841cc9ab08d",
      "LastModified" : "2018-12-21T13:56:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate unwind information even for functions that can't throw/propagate exceptions.\n\n# This lets debuggers and such get non-broken backtraces for such functions, even without debugging symbols.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# allow more inlines - these parameters improve performance for:\n\n#   matchTemplate about 5-10%\n\n#   goodFeaturesToTrack 10-20%\n\n#   cornerHarris 30% for some cases\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#    set_source_files_properties(impl.cpp $<TARGET_OBJECTS:carotene_objs> COMPILE_FLAGS \"--param ipcp-unit-growth=100000 --param inline-unit-growth=100000 --param large-stack-frame-growth=5000\")\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "3rdparty/cpufeatures/CMakeLists.txt" : {
      "ObjectId" : "92bce6abf8ace86c2cd32582badecd1ee5d08673",
      "LastModified" : "2018-03-07T07:15:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/ffmpeg/ffmpeg.cmake" : {
      "ObjectId" : "682c90fb725a05f5917845261d6dcb2b598bee74",
      "LastModified" : "2018-11-07T19:59:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Binaries branch name: ffmpeg/master_20181106\n\n# Binaries were created for OpenCV: 2c6f1ab57d4250ee46e32d1b51c056431965b470\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/ippicv/CMakeLists.txt" : {
      "ObjectId" : "7931832737cc168debbf2e38303ec16e909468a5",
      "LastModified" : "2018-03-28T12:38:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for IPP IW. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------------\n\n#         Define the library target:\n\n# ----------------------------------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/ippicv/ippicv.cmake" : {
      "ObjectId" : "ae8748c283497fa543e30671a7383e31fdd0fe7f",
      "LastModified" : "2018-11-07T19:59:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Commit SHA in the opencv_3rdparty repo\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Define actual ICV versions\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "3rdparty/ittnotify/CMakeLists.txt" : {
      "ObjectId" : "c2caf76723d72431ea48fbfeb69de1c8733f0e5a",
      "LastModified" : "2018-04-23T15:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for Intel ITT API. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/libjasper/CMakeLists.txt" : {
      "ObjectId" : "897b6ae606280a8c329312297031cf5172ab48dc",
      "LastModified" : "2018-04-23T15:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for libjasper. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------------\n\n#         Define the library target:\n\n# ----------------------------------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clang on Linux\n",
        "Line" : 29,
        "CharPositionInLine" : 53
      },
      "3" : {
        "Text" : "# clang\n",
        "Line" : 32,
        "CharPositionInLine" : 75
      },
      "4" : {
        "Text" : "# vs2005\n",
        "Line" : 33,
        "CharPositionInLine" : 84
      },
      "CommentCount" : 5
    },
    "3rdparty/libjpeg-turbo/CMakeLists.txt" : {
      "ObjectId" : "cf1f77aaa34d49b7092f355f0ba17595254bf412",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check for headers\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Other predefines\n\n# undef NEED_BSD_STRINGS\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# undef INCOMPLETE_TYPES_BROKEN\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# OpenCV\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# No SIMD\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/libjpeg/CMakeLists.txt" : {
      "ObjectId" : "4d06bbffd61b0ea811d130f64b07b5e05c97ba9f",
      "LastModified" : "2018-04-23T15:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for libjpeg. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------------\n\n#         Define the library target:\n\n# ----------------------------------------------------------------------------------\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clang\n",
        "Line" : 36,
        "CharPositionInLine" : 55
      },
      "3" : {
        "Text" : "# vs2005\n",
        "Line" : 37,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 4
    },
    "3rdparty/libpng/CMakeLists.txt" : {
      "ObjectId" : "c0c2b133cba490e935ae43976cba7f7b6305861e",
      "LastModified" : "2019-04-03T19:33:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for libpng. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# not needed on windows\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# NEON assembler is not supported\n",
        "Line" : 39,
        "CharPositionInLine" : 42
      },
      "3" : {
        "Text" : "# MSVS2013+ (issue #7232)\n",
        "Line" : 44,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------------\n\n#         Define the library target:\n\n# ----------------------------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/libtiff/CMakeLists.txt" : {
      "ObjectId" : "2319b9853edce9c5b83935bbf2afb11069ee5d4b",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for libtiff. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find libm, if available\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Inspired from /usr/share/autoconf/autoconf/c.m4\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check type sizes\n\n# NOTE: Could be replaced with C99 <stdint.h>\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Nonstandard int types\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check functions\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# May be inlined, so check it compiles:\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CPU bit order\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CPU endianness\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# IEEE floating point\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Large file support\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Android NDK build problem: 'mmap' issue with GCC and API<21\n",
        "Line" : 248,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# This might not catch every possibility catered for by\n\n# AC_SYS_LARGEFILE.\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Documentation install directory (default to cmake project docdir)\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Options to enable and disable internal codecs\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Option for Microsoft Document Imaging\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ZLIB\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# JPEG\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# OpenCV: changed to OFF\n",
        "Line" : 303,
        "CharPositionInLine" : 69
      },
      "19" : {
        "Text" : "# OpenCV: turned off\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# OpenCV: turned off\n",
        "Line" : 311,
        "CharPositionInLine" : 21
      },
      "21" : {
        "Text" : "# OpenCV: turned off\n",
        "Line" : 312,
        "CharPositionInLine" : 25
      },
      "22" : {
        "Text" : "# Win32 IO\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Orthogonal features\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# OpenCV: turned ON\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Libraries required by libtiff\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# clang\n",
        "Line" : 451,
        "CharPositionInLine" : 55
      },
      "27" : {
        "Text" : "# tiffiop.h: #if __clang_major__ >= 4\n",
        "Line" : 453,
        "CharPositionInLine" : 13
      },
      "28" : {
        "Text" : "# vs2005\n",
        "Line" : 455,
        "CharPositionInLine" : 86
      },
      "29" : {
        "Text" : "# vs2008\n",
        "Line" : 456,
        "CharPositionInLine" : 46
      },
      "30" : {
        "Text" : "# vs2008 Win64\n",
        "Line" : 457,
        "CharPositionInLine" : 62
      },
      "31" : {
        "Text" : "# vs2012\n",
        "Line" : 458,
        "CharPositionInLine" : 46
      },
      "32" : {
        "Text" : "# vs2015\n",
        "Line" : 459,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 33
    },
    "3rdparty/libwebp/CMakeLists.txt" : {
      "ObjectId" : "cd4d61f68765727d925e7bfe85c41cc32b812edd",
      "LastModified" : "2018-04-23T15:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for libwebp. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXIT\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------------\n\n#         Define the library target:\n\n# ----------------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# clang\n",
        "Line" : 38,
        "CharPositionInLine" : 26
      },
      "4" : {
        "Text" : "# gcc\n",
        "Line" : 39,
        "CharPositionInLine" : 27
      },
      "5" : {
        "Text" : "# vs2005\n",
        "Line" : 42,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 6
    },
    "3rdparty/openexr/CMakeLists.txt" : {
      "ObjectId" : "88e06e96cf3d420e2c0a0469713f746cd4608a04",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for openexr\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Unnamed semaphores are not supported: https://github.com/opencv/opencv/issues/9361\n",
        "Line" : 10,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# vs2005\n",
        "Line" : 54,
        "CharPositionInLine" : 150
      },
      "3" : {
        "Text" : "# vs2005 Win64\n\n# vs2008\n\n# vs2008 Win64\n\n# vs2015\n",
        "Line" : 55,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 4
    },
    "3rdparty/openvx/CMakeLists.txt" : {
      "ObjectId" : "41fd377d707714340a54af08b582552780f9dade",
      "LastModified" : "2017-12-15T12:56:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/openvx/hal/CMakeLists.txt" : {
      "ObjectId" : "f5af67a3c8e6466cbbe183bcb583764627877360",
      "LastModified" : "2017-12-15T12:56:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/protobuf/CMakeLists.txt" : {
      "ObjectId" : "ada9891a7b9f2d49e351a94fae611967d1fd34fb",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# potentially uninitialized local/pointer variable 'value' used\n\n# unreferenced local function has been removed\n",
        "Line" : 13,
        "CharPositionInLine" : 59
      },
      "1" : {
        "Text" : "#NOTE: -Wno-invalid-offsetof was used as solution for invalid offset warning on protobuf #3450\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Easier to support different versions of protobufs\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# libprotobuf-lite\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# libprotobuf\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  ${PROTOBUF_ROOT}/src/google/protobuf/compiler/importer.cc\n\n#  ${PROTOBUF_ROOT}/src/google/protobuf/compiler/parser.cc\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  ${PROTOBUF_ROOT}/src/google/protobuf/util/internal/error_listener.cc\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  ${PROTOBUF_ROOT}/src/google/protobuf/util/internal/type_info_test_helper.cc\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "3rdparty/quirc/CMakeLists.txt" : {
      "ObjectId" : "7a6b2bb22220ad956df7fc164a9a47dec002ab23",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/tbb/CMakeLists.txt" : {
      "ObjectId" : "a05d0d3c1ae461aaca340831f68fbfe8ef60b65a",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Cross compile TBB from source\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MacOSX\n",
        "Line" : 15,
        "CharPositionInLine" : 26
      },
      "2" : {
        "Text" : "# defines were copied from windows.cl.inc\n",
        "Line" : 52,
        "CharPositionInLine" : 17
      },
      "3" : {
        "Text" : "#required\n\n#required for 4.3\n\n#required\n\n#no cilk support\n\n#just to be sure\n\n#don't need backward compatibility\n\n#it seems that we don't need these notifications\n",
        "Line" : 62,
        "CharPositionInLine" : 57
      },
      "4" : {
        "Text" : "#required for Unix\n",
        "Line" : 73,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "#required for ARM GCC\n",
        "Line" : 77,
        "CharPositionInLine" : 44
      },
      "6" : {
        "Text" : "# workaround for GCC 6.x\n",
        "Line" : 79,
        "CharPositionInLine" : 63
      },
      "7" : {
        "Text" : "# filter out flags that are not handled well by the TBB code\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# to fit pragmas in _windef.h inside TBB\n",
        "Line" : 135,
        "CharPositionInLine" : 34
      },
      "CommentCount" : 9
    },
    "3rdparty/zlib/CMakeLists.txt" : {
      "ObjectId" : "553700bacc3d6c114c3a77b6b3effbe899d58729",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for zlib. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# _LFS64_LARGEFILE is not defined\n\n# MSVS 2015 (x64) + zlib 1.2.11\n",
        "Line" : 83,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 5
    },
    "CMakeLists.txt" : {
      "ObjectId" : "3a3c9e2ee4ddbcff691c317ba1e8cda0532c3f77",
      "LastModified" : "2019-04-03T19:33:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Root CMake file for OpenCV\n\n#\n\n#    From the off-tree build directory, invoke:\n\n#      $ cmake <PATH_TO_OPENCV_ROOT>\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable in-source builds to prevent source tree corruption.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Required to resolve linker error issues due to incompatibility with CMake v3.0+ policies.\n\n#CMake fails to find _fseeko() which leads to subsequent linker error.\n\n#See details here: http://www.cmake.org/Wiki/CMake/Policies\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Following block can break build in case of cross-compiling\n\n# but CMAKE_CROSSCOMPILING variable will be set only on project(OpenCV) command\n\n# so we will try to detect cross-compiling by the presence of CMAKE_TOOLCHAIN_FILE\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# it _must_ go before project(OpenCV) in order to work\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#Android: set output folder to ${CMAKE_BINARY_DIR}\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# any cross-compiling\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Making definitions available to other configurations and\n\n# to filter dependency restrictions at compile time.\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# CMake 3.1: Only interpret if() arguments as variables or keywords when unquoted.\n",
        "Line" : 99,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# CMake 3.9+: `RPATH` settings on macOS do not affect `install_name`.\n",
        "Line" : 112,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "# must go before the project command\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Break in case of popular CMake configuration mistakes\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect compiler and target platform architecture\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add these standard paths to the search paths for FIND_LIBRARY\n\n# to find libraries from these locations first\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add these standard paths to the search paths for FIND_PATH\n\n# to find include files from these locations first\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# OpenCV cmake options\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# 3rd party libs\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optional 3rd party components\n\n# ===================================================\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# experimental\n",
        "Line" : 365,
        "CharPositionInLine" : 26
      },
      "19" : {
        "Text" : "# OpenCV build components\n\n# ===================================================\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# OpenCV installation options\n\n# ===================================================\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# OpenCV build options\n\n# ===================================================\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Use CPU_BASELINE instead\n",
        "Line" : 463,
        "CharPositionInLine" : 66
      },
      "23" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Get actual OpenCV version number from sources\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Build & install layouts\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Save libs and executables in the same place\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Note: layout differs from OpenCV 3.4\n",
        "Line" : 587,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#ocv_update(OPENCV_PYTHON_INSTALL_PATH  \"python\")  # no default value, see https://github.com/opencv/opencv/issues/13202\n",
        "Line" : 600,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# file names include version (.so/.dll): OPENCV_LIB_INSTALL_PATH\n",
        "Line" : 609,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# JAR file name includes version: OPENCV_JAR_INSTALL_PATH\n",
        "Line" : 614,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Postfix of DLLs:\n",
        "Line" : 636,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Postfix of so's:\n",
        "Line" : 640,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Path for build/platform -specific headers\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Path for additional modules\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Autodetect if we are in a GIT repository\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# We don't have git:\n",
        "Line" : 672,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# OpenCV compiler and linker options\n\n# ----------------------------------------------------------------------------\n\n# In case of Makefiles if the user does not setup CMAKE_BUILD_TYPE, assume it's Release:\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# --- Python Support ---\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#       CHECK FOR SYSTEM LIBRARIES, OPTIONS, ETC..\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 696,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# no need to link to system libs with emscripten\n",
        "Line" : 728,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Detect endianness of build platform\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 746,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# test_big_endian needs try_compile, which doesn't work for iOS\n\n# http://public.kitware.com/Bug/view.php?id=12288\n",
        "Line" : 751,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Detect 3rd-party libraries\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Detect other 3rd-party libraries/tools\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# --- Java Support ---\n",
        "Line" : 781,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# --- OpenCL ---\n",
        "Line" : 815,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# --- Halide ---\n",
        "Line" : 820,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# --- VkCom ---\n",
        "Line" : 825,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# --- Inference Engine ---\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# --- DirectX ---\n",
        "Line" : 835,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# OpenCV HAL\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# 1. libraries\n",
        "Line" : 857,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# 2. headers\n",
        "Line" : 864,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# 3. include paths\n",
        "Line" : 868,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Add CUDA libraries (needed for apps/tools, samples)\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 912,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Code trace support\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 933,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Solution folders:\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 942,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Extra OpenCV targets: uninstall, package_source, perf, etc.\n",
        "Line" : 950,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Process subdirectories\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# opencv.hpp and legacy headers\n",
        "Line" : 957,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Enable compiler options for OpenCV modules/apps/samples only (ignore 3rdparty)\n",
        "Line" : 960,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# OpenCV modules\n",
        "Line" : 963,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Generate targets for documentation\n",
        "Line" : 966,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# various data that is used by cv libraries and/or demo applications.\n",
        "Line" : 969,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# extra applications\n",
        "Line" : 972,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# examples\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Finalization: generate configuration-based files\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 986,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Generate platform-dependent and configuration-dependent headers\n",
        "Line" : 992,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Generate opencv.pc for pkg-config command\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Generate OpenCV.mk for ndk-build (Android build tool)\n",
        "Line" : 1000,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Generate OpenCVConfig.cmake and OpenCVConfig-version.cmake for cmake projects\n",
        "Line" : 1003,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Generate Info.plist for the IOS framework\n",
        "Line" : 1006,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Generate ABI descriptor\n",
        "Line" : 1011,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Generate environment setup file\n",
        "Line" : 1014,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# for UNIX it does not make sense as LICENSE and readme will be part of the package automatically\n",
        "Line" : 1045,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Summary:\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1069,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# ========================== build platform ==========================\n",
        "Line" : 1096,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# ========================= CPU code generation mode =========================\n",
        "Line" : 1127,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# ========================== C/C++ options ==========================\n",
        "Line" : 1153,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# ========================== Dependencies ============================\n",
        "Line" : 1180,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# ========================== OpenCV modules ==========================\n",
        "Line" : 1185,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# ========================== Android details ==========================\n",
        "Line" : 1226,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# ================== Windows RT features ==================\n",
        "Line" : 1264,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# ========================== GUI ==========================\n",
        "Line" : 1278,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# APPLE\n",
        "Line" : 1298,
        "CharPositionInLine" : 16
      },
      "85" : {
        "Text" : "# ========================== MEDIA IO ==========================\n",
        "Line" : 1324,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# ========================== VIDEO IO ==========================\n",
        "Line" : 1383,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Order is similar to CV_PARALLEL_FRAMEWORK in core/src/parallel.cpp\n",
        "Line" : 1467,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# ========================== Other third-party libraries ==========================\n",
        "Line" : 1487,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# ========================== python ==========================\n",
        "Line" : 1596,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# ========================== java ==========================\n",
        "Line" : 1632,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# ========================== auxiliary ==========================\n",
        "Line" : 1646,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# CPack stuff\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1661,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# This should be the last command\n",
        "Line" : 1667,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 94
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "40a36b656e06d0f0bcbd3d2346ea415ee54637e8",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unified function for creating OpenCV applications:\n\n#   ocv_add_application(tgt [MODULES <m1> [<m2> ...]] SRCS <src1> [<src2> ...])\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ocv_add_app(traincascade)\n\n#ocv_add_app(createsamples)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/annotation/CMakeLists.txt" : {
      "ObjectId" : "a30846db41955b74fa89c4578c0bd09ac301c66a",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/createsamples/CMakeLists.txt" : {
      "ObjectId" : "7fb2b679c2abd510635ed6eb3dde84b1a6b697fc",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/interactive-calibration/CMakeLists.txt" : {
      "ObjectId" : "dacbb13c7971da0966e4c0f38a7264f3af9f7da3",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/traincascade/CMakeLists.txt" : {
      "ObjectId" : "ef80ce8b2f05e56c2b2cec43cbeacef5be898851",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/version/CMakeLists.txt" : {
      "ObjectId" : "89e739b1ba1e67f20aa7a39b8ac07b6edb6ac880",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/visualisation/CMakeLists.txt" : {
      "ObjectId" : "eaddf776eca597053c1c584284b0aab152970aef",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindCUDA.cmake" : {
      "ObjectId" : "37d557a792e1b1dc13dbba497e761171c2d81f14",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\n\n# windows, and mac and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard find_package arguments of\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets,\n\n#      the host compiler is constructed with one or more visual studio macros\n\n#      such as $(VCInstallDir), that expands out to the path when\n\n#      the command is run from within VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convenience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 374,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 386,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 395,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 397,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 399,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 415,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n",
        "Line" : 462,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accommodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 507,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 519,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\n",
        "Line" : 553,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 563,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Now search default paths\n",
        "Line" : 573,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 583,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Compute the version.\n",
        "Line" : 609,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 616,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Target CPU architecture\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Target OS variant\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Target triplet\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Target directory\n",
        "Line" : 667,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 674,
        "CharPositionInLine" : 21
      },
      "54" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 685,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 691,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 704,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 715,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 735,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 742,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 748,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 756,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 765,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 782,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 789,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# In CUDA 8.0 NPPI was split in to many libraries.\n",
        "Line" : 798,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# In CUDA 5.5 NPP was split in to 3 separate libraries.\n",
        "Line" : 814,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 831,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 843,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 855,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 867,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 870,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 872,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 876,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 897,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 923,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 929,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "##############################################################################\n",
        "Line" : 938,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 943,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 967,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 974,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 980,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 985,
        "CharPositionInLine" : 8
      },
      "89" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 996,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1015,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1034,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1041,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Absolute paths are generally unnecessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1045,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1056,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1059,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1061,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1063,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1065,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removing the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1068,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1074,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1077,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1095,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1100,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1104,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Emulation.\n",
        "Line" : 1106,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1109,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# CPU architecture is either ARM or X86. Patch AARCH64 to be ARM\n",
        "Line" : 1132,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# various macros from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# _CUDA_MSVC_HOST_COMPILER\n",
        "Line" : 1141,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1151,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1161,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n\n# Remove duplicate entries which may be present since include_directories\n\n# in CMake >= 2.8.8 does not remove them.\n",
        "Line" : 1163,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1174,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1184,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1187,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# STATIC\n",
        "Line" : 1193,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1199,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1201,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1207,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1216,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1219,
        "CharPositionInLine" : 4
      },
      "121" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1223,
        "CharPositionInLine" : 6
      },
      "122" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1243,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 1249,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1261,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1264,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1267,
        "CharPositionInLine" : 4
      },
      "127" : {
        "Text" : "# Allow per source file overrides of the format.\n",
        "Line" : 1271,
        "CharPositionInLine" : 6
      },
      "128" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1293,
        "CharPositionInLine" : 8
      },
      "129" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1301,
        "CharPositionInLine" : 6
      },
      "130" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1314,
        "CharPositionInLine" : 6
      },
      "131" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1332,
        "CharPositionInLine" : 6
      },
      "132" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1342,
        "CharPositionInLine" : 6
      },
      "133" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1346,
        "CharPositionInLine" : 31
      },
      "134" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1350,
        "CharPositionInLine" : 6
      },
      "135" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1362,
        "CharPositionInLine" : 6
      },
      "136" : {
        "Text" : "# Convenience string for output ###########################################\n",
        "Line" : 1365,
        "CharPositionInLine" : 6
      },
      "137" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1372,
        "CharPositionInLine" : 6
      },
      "138" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1380,
        "CharPositionInLine" : 6
      },
      "139" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1383,
        "CharPositionInLine" : 6
      },
      "140" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1400,
        "CharPositionInLine" : 6
      },
      "141" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1408,
        "CharPositionInLine" : 6
      },
      "142" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1411,
        "CharPositionInLine" : 8
      },
      "143" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1415,
        "CharPositionInLine" : 8
      },
      "144" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1428,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1433,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1441,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1456,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1462,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1474,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1480,
        "CharPositionInLine" : 27
      },
      "151" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1485,
        "CharPositionInLine" : 4
      },
      "152" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1493,
        "CharPositionInLine" : 4
      },
      "153" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG}\n",
        "Line" : 1499,
        "CharPositionInLine" : 4
      },
      "154" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1504,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1514,
        "CharPositionInLine" : 4
      },
      "156" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1519,
        "CharPositionInLine" : 4
      },
      "157" : {
        "Text" : "# VS 2010 and 2012 have this problem.  If future versions fix this issue,\n\n# it should still work, it just won't be as nice as the other method.\n",
        "Line" : 1525,
        "CharPositionInLine" : 6
      },
      "158" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1549,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1558,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1561,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "# Compute the file name of the intermediate link file used for separable\n\n# compilation.\n",
        "Line" : 1566,
        "CharPositionInLine" : 2
      },
      "162" : {
        "Text" : "# Add the library.\n",
        "Line" : 1570,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1577,
        "CharPositionInLine" : 2
      },
      "164" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1586,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1596,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1605,
        "CharPositionInLine" : 2
      },
      "167" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1607,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# Compute the file name of the intermediate link file used for separable\n\n# compilation.\n",
        "Line" : 1610,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# Add the library.\n",
        "Line" : 1614,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1621,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1630,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1640,
        "CharPositionInLine" : 0
      },
      "173" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1647,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1649,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1657,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1666,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1675,
        "CharPositionInLine" : 0
      },
      "178" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1684,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1694,
        "CharPositionInLine" : 0
      },
      "180" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1707,
        "CharPositionInLine" : 0
      },
      "181" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1720,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convenience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1726,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1737,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 184
    },
    "cmake/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "c433fa8ed4e1d9e7fb8d5ecb026c3536c9449050",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "25ceb49f3dd8e684e35cac49834c4db0aa5c338a",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "c372fe44ec6652e922859935a3dfc2b370e33ae9",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 69,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 73,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 31
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 76,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# string\n",
        "Line" : 77,
        "CharPositionInLine" : 33
      },
      "22" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 139,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 141,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Echo the command\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Run the command\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Delete the target file\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Note that this will remove all occurrences of -G.\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invocation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Generate the code\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 49
    },
    "cmake/FindFlake8.cmake" : {
      "ObjectId" : "b18225a011843fedb8cd149079a3f0c5e94cc03b",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Flake8\n\n# Find the Flake8 executable and extract the version number\n\n#\n\n# OUTPUT Variables\n\n#\n\n#   FLAKE8_FOUND\n\n#       True if the flake8 package was found\n\n#   FLAKE8_EXECUTABLE\n\n#       The flake8 executable location\n\n#   FLAKE8_VERSION\n\n#       A string denoting the version of flake8 that has been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindOpenVX.cmake" : {
      "ObjectId" : "6cba52717ce66b5cf5e0ef67bd1169b71553ad9d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPylint.cmake" : {
      "ObjectId" : "7e26fe246efb40954c74dbb371e5b47a4ae6583d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Pylint\n\n# Find the Pylint executable and extract the version number\n\n#\n\n# OUTPUT Variables\n\n#\n\n#   PYLINT_FOUND\n\n#       True if the pylint package was found\n\n#   PYLINT_EXECUTABLE\n\n#       The pylint executable location\n\n#   PYLINT_VERSION\n\n#       A string denoting the version of pylint that has been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindVulkan.cmake" : {
      "ObjectId" : "bf7a56418fd3496573a534089b70f2fd18b03f1d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Vulkan\n\n#\n\n# Vulkan_INCLUDE_DIRS\n\n# Vulkan_LIBRARIES\n\n# Vulkan_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/OpenCVCRTLinkage.cmake" : {
      "ObjectId" : "4916800211cdf8f213588bd33d71e4a2a8957710",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use statically or dynamically linked CRT?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Removing LNK4075 warnings for debug WinRT builds\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF' specification\"\n\n# \"LNK4075: ignoring '/INCREMENTAL' due to '/OPT:REF' specification\"\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Optional verification checks since we don't know existing contents of variables below\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Mandatory\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Ignore warning: This object file does not define any previously undefined public symbols, ...\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/OpenCVCompilerDefenses.cmake" : {
      "ObjectId" : "c4563ff0c11f6a6145492396484cb9c91d3f1808",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable build defense flags.\n\n# Performance may be affected.\n\n# More information:\n\n# - https://www.owasp.org/index.php/C-Based_Toolchain_Hardening\n\n# - https://wiki.debian.org/Hardening\n\n# - https://wiki.gentoo.org/wiki/Hardened/Toolchain\n\n# - https://docs.microsoft.com/en-us/cpp/build/reference/sdl-enable-additional-security-checks\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define flags\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These flags is added by general options: -Wformat -Wformat-security\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# TODO Check this\n",
        "Line" : 61,
        "CharPositionInLine" : 66
      },
      "4" : {
        "Text" : "# not supported\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/OpenCVCompilerOptimizations.cmake" : {
      "ObjectId" : "f82159ea3ab23ef288875f2d894a139de834d6ac",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# x86/x86-64 arch:\n\n# SSE / SSE2 (always available on 64-bit CPUs)\n\n# SSE3 / SSSE3\n\n# SSE4_1 / SSE4_2 / POPCNT\n\n# AVX / AVX2 / AVX_512F\n\n# FMA3\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ppc64le arch:\n\n# VSX  (always available on Power8)\n\n# VSX3 (always available on Power9)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CPU_{opt}_SUPPORTED=ON/OFF - compiler support (possibly with additional flag)\n\n# CPU_{opt}_IMPLIES=<list>\n\n# CPU_{opt}_FORCE=<list> - subset of \"implies\" list\n\n# CPU_{opt}_GROUP=<list> - similar to \"implies\" list, but additionally merges compiler flags\n\n# CPU_{opt}_FLAGS_ON=\"\"\n\n# CPU_{opt}_FEATURE_ALIAS - mapping to CV_CPU_* HWFeature enum\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables:\n\n# CPU_BASELINE=<list> - preferred list of baseline optimizations\n\n# CPU_DISPATCH=<list> - preferred list of dispatched optimizations\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Advanced input variables:\n\n# CPU_BASELINE_REQUIRE=<list> - list of required baseline optimizations\n\n# CPU_DISPATCH_REQUIRE=<list> - list of required dispatched optimizations\n\n# CPU_BASELINE_DISABLE=<list> - list of disabled baseline optimizations\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Output variables:\n\n# CPU_BASELINE_FINAL=<list> - final list of enabled compiler optimizations\n\n# CPU_DISPATCH_FINAL=<list> - final list of dispatched optimizations\n\n#\n\n# CPU_DISPATCH_FLAGS_${opt} - flags for source files compiled separately (<name>.avx2.cpp)\n\n#\n\n# CPU_{opt}_ENABLED_DEFAULT=ON/OFF - has compiler support without additional flag (CPU_BASELINE_DETECT=ON only)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# process legacy flags\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support GCC -march=native or Intel Compiler -xHost flags\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Don't force other optimizations\n",
        "Line" : 174,
        "CharPositionInLine" : 38
      },
      "9" : {
        "Text" : "# Don't force other optimizations\n",
        "Line" : 177,
        "CharPositionInLine" : 34
      },
      "10" : {
        "Text" : "# Don't force other optimizations\n",
        "Line" : 179,
        "CharPositionInLine" : 34
      },
      "11" : {
        "Text" : "# Don't force other optimizations\n",
        "Line" : 183,
        "CharPositionInLine" : 36
      },
      "12" : {
        "Text" : "# x64 compiler doesn't support /arch:sse\n",
        "Line" : 215,
        "CharPositionInLine" : 19
      },
      "13" : {
        "Text" : "# GCC >= 5.0\n",
        "Line" : 232,
        "CharPositionInLine" : 72
      },
      "14" : {
        "Text" : "# -mavx512f -mavx512pf -mavx512er -mavx512cd -mavx512vl -mavx512bw -mavx512dq -mavx512ifma -mavx512vbmi\n",
        "Line" : 233,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# 64-bit MSVC compiler uses SSE/SSE2 by default\n",
        "Line" : 245,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Other instruction sets are supported by default since MSVC 2008 at least\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# MacOS X has limited set of possible supported H/W, so compiler is configured well\n",
        "Line" : 269,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Helper values for cmake-gui\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Update CPU_BASELINE_DETECT flag\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Don't change compiler flags in 'detection' mode\n",
        "Line" : 468,
        "CharPositionInLine" : 42
      },
      "21" : {
        "Text" : "# nothing\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# OK\n",
        "Line" : 491,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# OK\n",
        "Line" : 501,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# OK\n",
        "Line" : 503,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#message(STATUS \"CPU_BASELINE_FINAL=${CPU_BASELINE_FINAL}\")\n\n#message(STATUS \"CPU_DISPATCH_FINAL=${CPU_DISPATCH_FINAL}\")\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#if(CPU_DISPATCH_FINAL AND NOT PYTHON_DEFAULT_EXECUTABLE)\n\n#  message(FATAL_ERROR \"Python is required for CPU dispatched optimization support\")\n\n#endif()\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#continue()\n",
        "Line" : 535,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# !! important - be on the same wave with x64 compilers\n",
        "Line" : 579,
        "CharPositionInLine" : 48
      },
      "29" : {
        "Text" : "# Generate Intrinsic Functions\n",
        "Line" : 587,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# !! important - be on the same wave with x64 compilers\n",
        "Line" : 591,
        "CharPositionInLine" : 63
      },
      "31" : {
        "Text" : "# don't touch files like filename.cuda.cpp\n",
        "Line" : 607,
        "CharPositionInLine" : 49
      },
      "32" : {
        "Text" : "#continue()\n",
        "Line" : 609,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "#continue()\n",
        "Line" : 613,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "#message(\"${fname} BASELINE-${OPT}\")\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#message(\"(${CPU_${OPT}_USAGE_COUNT})${fname} ${OPT}\")\n\n#message(\"    ${CPU_DISPATCH_${OPT}_INCLUDED}\")\n\n#message(\"    ${CPU_DISPATCH_DEFINITIONS_${OPT}}\")\n\n#message(\"    ${CPU_DISPATCH_FLAGS_${OPT}}\")\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#message(\"${OPT}: ${__result_${OPT}}\")\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# extra flags are added before common flags, so switching between optimizations doesn't work correctly\n\n# Also CMAKE_CXX_FLAGS doesn't work (it is directory-based, so add_subdirectory is required)\n",
        "Line" : 667,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "#list(APPEND __result_libs ${TARGET_BASE_NAME}_${OPT})\n",
        "Line" : 674,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "#message(STATUS \"${__file} contains same content\")\n",
        "Line" : 776,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "#message(STATUS \"${__file} contains up-to-date content\")\n",
        "Line" : 807,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "#message(STATUS \"${__file} contains up-to-date content\")\n",
        "Line" : 838,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# Workaround to support code which always require all code paths\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 43
    },
    "cmake/OpenCVCompilerOptions.cmake" : {
      "ObjectId" : "965dccf7089ab26f188fac1893c71f24e4bef7cf",
      "LastModified" : "2019-04-03T19:33:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: FIXIT Avoid setting of CMAKE_ variables\n",
        "Line" : 2,
        "CharPositionInLine" : 35
      },
      "1" : {
        "Text" : "# This works fine with Unix Makefiles and Ninja generators\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# NOTE: Actually this check doesn't work as expected.\n\n# \"RULE_LAUNCH_COMPILE\" is ignored by CMake during try_compile() step.\n\n# ocv_check_compiler_flag(CXX \"\" IS_CCACHE_WORKS)\n",
        "Line" : 21,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# PCH has no support for Clang\n",
        "Line" : 37,
        "CharPositionInLine" : 55
      },
      "4" : {
        "Text" : "# Gets environment variable and puts its value to the corresponding preprocessor definition\n\n# Useful for WINRT that has no access to environment variables\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# OpenCV fails some tests when 'char' is 'unsigned' by default\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# High level of warnings.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# clang-cl interprets -Wall as MSVC would: -Weverything, which is more than\n\n# we want.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# old GCC emits warnings for variables + methods combination\n",
        "Line" : 107,
        "CharPositionInLine" : 41
      },
      "9" : {
        "Text" : "# Issue appears when compiling surf.cpp from opencv_contrib/modules/xfeatures2d\n",
        "Line" : 134,
        "CharPositionInLine" : 54
      },
      "10" : {
        "Text" : "# GCC 4.x emits warnings about {}, fixed in GCC 5+\n",
        "Line" : 137,
        "CharPositionInLine" : 66
      },
      "11" : {
        "Text" : "# The -Wno-long-long is required in 64bit systems when including system headers.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# We need pthread's\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# TODO\n",
        "Line" : 148,
        "CharPositionInLine" : 56
      },
      "14" : {
        "Text" : "# Other optimizations\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Profiling?\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# turn off incompatible options\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# TODO: Clang/C2 is not supported\n",
        "Line" : 186,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# don't create separate sections for functions/data, reduce package size\n",
        "Line" : 188,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Remove unreferenced functions: function level linking\n",
        "Line" : 190,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# There are issues with VTK 6.0\n",
        "Line" : 215,
        "CharPositionInLine" : 22
      },
      "21" : {
        "Text" : "# https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html\n\n# '-g' is equal to '-g2', '-g1' produces minimal information, enough for making backtraces\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#TODO Code refactoring is required to resolve security warnings\n\n#if(NOT ENABLE_BUILD_HARDENING)\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#endif()\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Remove unreferenced functions: function level linking\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Adding additional using directory for WindowsPhone 8.0 to get Windows.winmd properly\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set default visibility to hidden\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# workaround gcc bug for aligned ld/st\n\n# https://github.com/opencv/opencv/issues/13211\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# validate inline asm with fixes register number and constraints wa, wd, wf\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# combine all \"extra\" options\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Enable 'extern \"C\"' and asynchronous (division by zero, access violation) exceptions\n",
        "Line" : 339,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# conditional expression is constant\n\n# class 'std::XXX' needs to have dll-interface to be used by clients of YYY\n\n# 'struct_name' : structure was padded due to __declspec(align())\n\n# non dll-interface class 'std::exception' used as base for dll-interface class 'cv::Exception'\n\n# Assignment operator could not be generated\n\n# Constructor of abstract class 'cv::ORB' ignores initializer for virtual base class 'cv::Algorithm'\n",
        "Line" : 350,
        "CharPositionInLine" : 50
      },
      "32" : {
        "Text" : "# PCH warning\n",
        "Line" : 362,
        "CharPositionInLine" : 54
      },
      "33" : {
        "Text" : "# Enable compiler options for OpenCV modules/apps/samples only (ignore 3rdparty)\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "cmake/OpenCVDetectApacheAnt.cmake" : {
      "ObjectId" : "2f8243838ecf3e1f709a12ad4a2c5121a8374040",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCVDetectCUDA.cmake" : {
      "ObjectId" : "050ee65e57f720eeaf3058972c50c189d110e464",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# requires https://gitlab.kitware.com/cmake/cmake/merge_requests/663\n",
        "Line" : 12,
        "CharPositionInLine" : 46
      },
      "1" : {
        "Text" : "# Use OpenCV's patched \"FindCUDA\" module\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#Workaround for VS cl.exe not being in the env. path\n",
        "Line" : 74,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "#Strip leading warning messages, if any\n",
        "Line" : 97,
        "CharPositionInLine" : 61
      },
      "4" : {
        "Text" : "#Strip leading warning messages, if any\n",
        "Line" : 115,
        "CharPositionInLine" : 63
      },
      "5" : {
        "Text" : "# Ckeck if user specified 1.0 compute capability: we don't support it\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# NVCC flags to be set\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# These vars will be passed into the templates\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# User explicitly specified PTX for the concrete BIN\n",
        "Line" : 160,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 165,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# These vars will be processed in other scripts\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# we remove -Winconsistent-missing-override and -Qunused-arguments\n\n# just in case we are compiling CUDA with gcc but OpenCV with clang\n",
        "Line" : 204,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# we remove /EHa as it generates warnings under windows\n",
        "Line" : 210,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# we remove -ggdb3 flag as it leads to preprocessor errors when compiling CUDA files (CUDA 4.1)\n",
        "Line" : 213,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# we remove -Wsign-promo as it generates warnings under linux\n",
        "Line" : 216,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# we remove -Wno-sign-promo as it generates warnings under linux\n",
        "Line" : 219,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# we remove -Wno-delete-non-virtual-dtor because it's used for C++ compiler\n\n# but NVCC uses C compiler by default\n",
        "Line" : 222,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# we remove -frtti because it's used for C++ compiler\n\n# but NVCC uses C compiler by default\n",
        "Line" : 226,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# cc1: warning: command line option '-Wsuggest-override' is valid for C++/ObjC++ but not for C\n",
        "Line" : 232,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# issue: #11552 (from OpenCVCompilerOptions.cmake)\n",
        "Line" : 235,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# removal of custom specified options\n",
        "Line" : 238,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# disabled because of multiple warnings during building nvcc auto generated files\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 24
    },
    "cmake/OpenCVDetectCXXCompiler.cmake" : {
      "ObjectId" : "0c79f42f39fd186b84651d8ba4228e343e3062e1",
      "LastModified" : "2019-04-15T17:00:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compilers:\n\n# - CV_GCC - GNU compiler (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n\n# - CV_CLANG - Clang-compatible compiler (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" - Clang or AppleClang, see CMP0025)\n\n# - CV_ICC - Intel compiler\n\n# - MSVC - Microsoft Visual Compiler (CMake variable)\n\n# - MSVC64 - additional flag, 64-bit\n\n# - MINGW / CYGWIN / CMAKE_COMPILER_IS_MINGW / CMAKE_COMPILER_IS_CYGWIN (CMake original variables)\n\n# - MINGW64 - 64-bit\n\n#\n\n# CPU Platforms:\n\n# - X86 / X86_64\n\n# - ARM - ARM CPU, not defined for AArch64\n\n# - AARCH64 - ARMv8+ (64-bit)\n\n# - PPC64 / PPC64LE - PowerPC\n\n#\n\n# OS:\n\n# - WIN32 - Windows | MINGW\n\n# - UNIX - Linux | MacOSX | ANDROID\n\n# - ANDROID\n\n# - IOS\n\n# - APPLE - MacOSX | iOS\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang or AppleClang (see CMP0025)\n",
        "Line" : 31,
        "CharPositionInLine" : 68
      },
      "2" : {
        "Text" : "# TODO next release: remove this\n\n# TODO next release: remove this\n",
        "Line" : 33,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# Detect Intel ICC compiler\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Workaround for 32-bit operating systems on 64-bit x86_64 processor\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Similar code exists in OpenCVConfig.cmake\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# look for global setting\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# custom overridden values\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# see Modules/CmakeGenericSystem.cmake\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Fix handling of duplicated files in the same static library:\n\n# https://public.kitware.com/Bug/view.php?id=14874\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# use -std=c++11 instead of -std=gnu++11\n",
        "Line" : 173,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 11
    },
    "cmake/OpenCVDetectDirectX.cmake" : {
      "ObjectId" : "fbe4a7118503d308769d9eb29302c42c01a74846",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCVDetectHalide.cmake" : {
      "ObjectId" : "790f69205662d001fa15ca238af4721983c2289d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try CMake-based config files\n",
        "Line" : 10,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "# Try manual search\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Unix\n\n# Win32\n",
        "Line" : 22,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : "# TODO try_compile\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/OpenCVDetectInferenceEngine.cmake" : {
      "ObjectId" : "a5c2b5d948ca985223d917052ee247eab4c7f5b6",
      "LastModified" : "2019-04-15T17:00:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The script detects Intel(R) Inference Engine installation\n\n#\n\n# Cache variables:\n\n# INF_ENGINE_RELEASE - a number reflecting IE source interface (linked with OpenVINO release)\n\n#\n\n# Detect parameters:\n\n# 1. Native cmake IE package:\n\n#    - enironment variable InferenceEngine_DIR is set to location of cmake module\n\n# 2. Custom location:\n\n#    - INF_ENGINE_INCLUDE_DIRS - headers search location\n\n#    - INF_ENGINE_LIB_DIRS     - library search location\n\n# 3. OpenVINO location:\n\n#    - environment variable INTEL_OPENVINO_DIR is set to location of OpenVINO installation dir\n\n#    - INF_ENGINE_PLATFORM - part of name of library directory representing its platform\n\n#\n\n# Result:\n\n# INF_ENGINE_TARGET - set to name of imported library target representing InferenceEngine\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ======================\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenVINO 2018.x\n",
        "Line" : 63,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "# Add more features to the target\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/OpenCVDetectOpenCL.cmake" : {
      "ObjectId" : "5349d12b690c283eb67cb2161aed93c3b4d8bed4",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check WITH_OPENCL_D3D11_NV is located in OpenCVDetectDirectX.cmake file\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/OpenCVDetectPython.cmake" : {
      "ObjectId" : "c3c467002ec595be5147c7a9dc7e2ed9e265e6e8",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find specified Python version\n\n# Arguments:\n\n#   preferred_version (value): Version to check for first\n\n#   min_version (value): Minimum supported version\n\n#   library_env (value): Name of Python library ENV variable to check\n\n#   include_dir_env (value): Name of Python include directory ENV variable to check\n\n#   found (variable): Set if interpreter found\n\n#   executable (variable): Output of executable found\n\n#   version_string (variable): Output of found version\n\n#   version_major (variable): Output of found major version\n\n#   version_minor (variable): Output of found minor version\n\n#   libs_found (variable): Set if libs found\n\n#   libs_version_string (variable): Output of found libs version\n\n#   libraries (variable): Output of found Python libraries\n\n#   library (variable): Output of found Python library\n\n#   debug_libraries (variable): Output of found Python debug libraries\n\n#   debug_library (variable): Output of found Python debug library\n\n#   include_path (variable): Output of found Python include path\n\n#   include_dir (variable): Output of found Python include dir\n\n#   include_dir2 (variable): Output of found Python include dir2\n\n#   packages_path (variable): Output of found Python packages path\n\n#   numpy_include_dirs (variable): Output of found Python Numpy include dirs\n\n#   numpy_version (variable): Output of found Python Numpy version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# deprecated\n",
        "Line" : 41,
        "CharPositionInLine" : 75
      },
      "2" : {
        "Text" : "# search for executable with the same bitness as resulting binaries\n\n# standard FindPythonInterp always prefers executable from system path\n\n# this is really important because we are using the interpreter for numpy search and for choosing the install location\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Check if python major version is correct\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Populate other variables\n",
        "Line" : 96,
        "CharPositionInLine" : 66
      },
      "5" : {
        "Text" : "# Copy outputs\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Clear find_host_package side effects\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# not using _version_string here, because it might not conform to the CMake version format\n",
        "Line" : 135,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# builder version can differ from target, matching base version (e.g. 2.7)\n",
        "Line" : 137,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Copy outputs\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Clear find_package side effects\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#debian based assumed, install to the dist-packages.\n",
        "Line" : 186,
        "CharPositionInLine" : 15
      },
      "12" : {
        "Text" : "# Attempt to discover the NumPy include directory. If this succeeds, then build python API with NumPy\n",
        "Line" : 222,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Export return values\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Use Python 2 as default Python interpreter\n",
        "Line" : 296,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Use Python 3 as fallback Python interpreter (if there is no Python 2)\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 16
    },
    "cmake/OpenCVDetectTBB.cmake" : {
      "ObjectId" : "a9afe7695067e48e2103430444dcfb0e1afe2d7d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Search TBB library (4.1 - 4.4, 2017)\n\n#\n\n# Own TBB (3rdparty/tbb):\n\n# - set cmake option BUILD_TBB to ON\n\n#\n\n# External TBB (from system):\n\n# - Fedora: install 'tbb-devel' package\n\n# - Ubuntu: install 'libtbb-dev' package\n\n#\n\n# External TBB (from official site):\n\n# - Linux/OSX:\n\n#   - in tbbvars.sh replace 'SUBSTITUTE_INSTALL_DIR_HERE' with absolute path to TBB dir\n\n#   - in terminal run 'source tbbvars.sh intel64 linux' ('source tbbvars.sh' in OSX)\n\n# - Windows:\n\n#   - in terminal run 'tbbvars.bat intel64 vs2015'\n\n#\n\n# Return:\n\n#   - HAVE_TBB set to TRUE\n\n#   - \"tbb\" target exists and added to OPENCV_LINKER_LIBS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check that library and include dir are inside TBBROOT location\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# workaround: system TBB library is used for linking instead of provided\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#=====================================================================\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# drop support of versions < 4.0\n",
        "Line" : 107,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 5
    },
    "cmake/OpenCVDetectTrace.cmake" : {
      "ObjectId" : "07a8f648a0a85675818115185168a424aa845062",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake/OpenCVDetectVTK.cmake" : {
      "ObjectId" : "0f2b9584e120ab239ecbfe18a87767d070cf3d96",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# VTK 6.x components\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#in vtk 7, the rendering backend is exported as a var.\n",
        "Line" : 4,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "# VTK 5.x components\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Don't support earlier VTKs\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Different Qt versions can't be linked together\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Different Qt versions can't be linked together. VTK 6.0.0 doesn't provide a way to get Qt version it was linked with\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Different Qt versions can't be linked together\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/OpenCVDetectVulkan.cmake" : {
      "ObjectId" : "2bb7cc1b5694210114bec1a86237db93cd827e78",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCVDownload.cmake" : {
      "ObjectId" : "cdc47ad2cbcaf79ceea1e9037977a75ca400e62d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  Download and optionally unpack a file\n\n#\n\n#  ocv_download(FILENAME p HASH h URL u1 [u2 ...] DESTINATION_DIR d [ID id] [STATUS s] [UNPACK] [RELATIVE_URL])\n\n#    FILENAME - filename\n\n#    HASH - MD5 hash\n\n#    URL - full download url (first nonempty value will be chosen)\n\n#    DESTINATION_DIR - file will be copied to this directory\n\n#    ID     - identifier for project/group of downloaded files\n\n#    STATUS - passed variable will be updated in parent scope,\n\n#             function will not fail the build in case of download problem if this option is provided,\n\n#             but will fail in case when other operations (copy, remove, etc.) failed\n\n#    UNPACK - downloaded file will be unpacked to DESTINATION_DIR\n\n#    RELATIVE_URL - if set, then URL is treated as a base, and FILENAME will be appended to it\n\n#  Note: uses OPENCV_DOWNLOAD_PATH folder as cache, default is <opencv>/.cache\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Init download cache directory and log file and helper scripts\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check CMake cache for already processed tasks\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#message(WARNING \"Download destination is not in CMAKE_BINARY_DIR=${CMAKE_BINARY_DIR}: ${DL_DESTINATION_DIR}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Select first non-empty url\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Append filename to url if needed\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Log all calls to file\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ... and to console\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Copy mode: check if copy destination exists and is correct\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check cache first\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Download\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# workaround problem with old CMake versions: \"Invalid escape sequence\"\n",
        "Line" : 162,
        "CharPositionInLine" : 44
      },
      "12" : {
        "Text" : "# write helper scripts for failed downloads\n",
        "Line" : 197,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Don't remove this code, because EXPECTED_MD5 parameter doesn't fail \"file(DOWNLOAD)\" step on wrong hash\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Unpack or copy\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "cmake/OpenCVExtraTargets.cmake" : {
      "ObjectId" : "e766f7a60375639e6ec143ce218cd2a3ee8d0765",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#   Uninstall target, for \"make uninstall\"\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# target building all OpenCV modules\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# targets building all tests\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Documentation\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Samples\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/OpenCVFindAtlas.cmake" : {
      "ObjectId" : "4fc7317749bd135ba883489e3a71837e58c792a4",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#COPYRIGHT\n\n#\n\n#All contributions by the University of California:\n\n#Copyright (c) 2014, 2015, The Regents of the University of California (Regents)\n\n#All rights reserved.\n\n#\n\n#All other contributions:\n\n#Copyright (c) 2014, 2015, the respective contributors\n\n#All rights reserved.\n\n#\n\n#Caffe uses a shared copyright model: each contributor holds copyright over\n\n#their contributions to Caffe. The project versioning records all such\n\n#contribution and copyright details. If a contributor wants to further mark\n\n#their specific copyright on a particular contribution, they should indicate\n\n#their copyright solely in the commit message of the change when it is\n\n#committed.\n\n#\n\n#LICENSE\n\n#\n\n#Redistribution and use in source and binary forms, with or without\n\n#modification, are permitted provided that the following conditions are met:\n\n#\n\n#1. Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#2. Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n#\n\n#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n#ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n#WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n\n#ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n#LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\n#ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#CONTRIBUTION AGREEMENT\n\n#\n\n#By contributing to the BVLC/caffe repository through pull-request, comment,\n\n#or otherwise, the contributor releases their content to the\n\n#license and copyright terms herein.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the Atlas (and Lapack) libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Atlas_ROOT_DIR:            Base directory where all Atlas components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  Atlas_FOUND\n\n#  Atlas_INCLUDE_DIRS\n\n#  Atlas_LIBRARIES\n\n#  Atlas_LIBRARYRARY_DIRS\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/OpenCVFindFrameworks.cmake" : {
      "ObjectId" : "9d673f2697ff7e46903c10bda45f062d2bdfbc04",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Detect frameworks that may be used by 3rd-party libraries as well as OpenCV\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --- HPX ---\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --- GCD ---\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --- Concurrency ---\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# --- OpenMP ---\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/OpenCVFindIPP.cmake" : {
      "ObjectId" : "7fa0bb0b64ee0d9c89467b54fb1004401df9540f",
      "LastModified" : "2019-04-03T19:33:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The script to detect Intel(R) Integrated Performance Primitives (IPP)\n\n# installation/package\n\n#\n\n# By default, ICV version will be used.\n\n# To use standalone IPP update cmake command line:\n\n# cmake ... -DIPPROOT=<path> ...\n\n#\n\n# Note: Backward compatibility is broken, IPPROOT environment path is ignored\n\n#\n\n#\n\n# On return this will define:\n\n#\n\n# HAVE_IPP            - True if Intel IPP found\n\n# HAVE_IPP_ICV        - True if Intel IPP ICV version is available\n\n# IPP_ROOT_DIR        - root of IPP installation\n\n# IPP_INCLUDE_DIRS    - IPP include folder\n\n# IPP_LIBRARIES       - IPP libraries that are used by OpenCV\n\n# IPP_VERSION_STR     - string with the newest detected IPP version\n\n# IPP_VERSION_MAJOR   - numbers of IPP version (MAJOR.MINOR.BUILD)\n\n# IPP_VERSION_MINOR\n\n# IPP_VERSION_BUILD\n\n#\n\n# Created: 30 Dec 2010 by Vladimir Dudnik (vladimir.dudnik@intel.com)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This function detects Intel IPP version by analyzing .h file\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# read Intel IPP version info from file\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# extract info and assign to variables\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# export info to parent scope\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This macro uses IPP_ROOT_DIR variable\n\n# TODO Cleanup code after ICV package stabilization\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# nothing\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# dynamic linking is only supported for standalone version of Intel IPP\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# When using dynamic libraries from standalone Intel IPP it is your responsibility to install those on the target system\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# CMake doesn't support \"install(TARGETS ${IPP_PREFIX}${name} \" command with imported targets\n",
        "Line" : 155,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# dynamic not threaded libs suffix Intel IPP 7.x\n",
        "Line" : 171,
        "CharPositionInLine" : 30
      },
      "11" : {
        "Text" : "# static not threaded libs suffix Intel IPP 7.x\n",
        "Line" : 173,
        "CharPositionInLine" : 30
      },
      "12" : {
        "Text" : "# dynamic not threaded libs suffix Intel IPP 8.x for Windows\n",
        "Line" : 178,
        "CharPositionInLine" : 30
      },
      "13" : {
        "Text" : "# static not threaded libs suffix Intel IPP 8.x for Windows\n",
        "Line" : 180,
        "CharPositionInLine" : 30
      },
      "14" : {
        "Text" : "# static not threaded libs suffix Intel IPP 8.x for Linux/OS X\n",
        "Line" : 183,
        "CharPositionInLine" : 30
      },
      "15" : {
        "Text" : "#message(STATUS \"Intel IPP libs: ${IPP_LIBRARIES}\")\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# OPENCV_IPP_PATH is an environment variable for internal usage only, do not use it\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Since Intel IPP built with Microsoft compiler and /GS option\n\n# ======================================================\n\n# From Windows SDK 7.1\n\n#   (usually in \"C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\lib\"),\n\n# to avoid undefined reference to __security_cookie and _chkstk:\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# To avoid undefined reference to _alldiv and _chkstk\n\n# ===================================================\n\n# NB: it may require a recompilation of w32api (after having modified\n\n#     the file ntdll.def) to export the required functions\n\n#     See http://code.opencv.org/issues/1906 for additional details\n",
        "Line" : 272,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 19
    },
    "cmake/OpenCVFindIPPIW.cmake" : {
      "ObjectId" : "bd3b0b84222367348d43c0348f48b07ff20f47da",
      "LastModified" : "2019-04-03T19:33:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The script to detect Intel(R) Integrated Performance Primitives Integration Wrappers (IPP Integration Wrappers)\n\n# installation/package\n\n#\n\n#\n\n# On return this will define:\n\n#\n\n# HAVE_IPP_IW       - True if Intel IPP Integration Wrappers found\n\n# HAVE_IPP_IW_LL    - True if Intel IPP Integration Wrappers found with Low Level API header\n\n# IPP_IW_PATH       - Root of Intel IPP Integration Wrappers directory\n\n# IPP_IW_LIBRARIES  - Intel IPP Integration Wrappers libraries\n\n# IPP_IW_INCLUDES   - Intel IPP Integration Wrappers include folder\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(IW_CONFIG_DEBUG 1)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This function detects Intel IPP Integration Wrappers version by analyzing .h file\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check sources\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# check if Intel IPP Integration Wrappers is OpenCV specific\n",
        "Line" : 80,
        "CharPositionInLine" : 49
      },
      "5" : {
        "Text" : "# check binaries\n",
        "Line" : 89,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# CMake doesn't support \"install(TARGETS ${name} ...)\" command with imported targets\n",
        "Line" : 107,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# check if Intel IPP Integration Wrappers is OpenCV specific\n",
        "Line" : 119,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "# check build options first\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# custom path\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# local sources\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Package sources\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# take Intel IPP Integration Wrappers from ICV package\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# custom binaries\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# check binaries in IPP folder\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# check binaries near IPP folder\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/OpenCVFindLAPACK.cmake" : {
      "ObjectId" : "684818027e6f931b78de6450858c3cb019bd3f60",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# fallback\n",
        "Line" : 7,
        "CharPositionInLine" : 28
      },
      "1" : {
        "Text" : "# adding proxy opencv_lapack.h header\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# update file contents (if required)\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#message(FATAL_ERROR \"LAPACK: check build log:\\n${TRY_OUT}\")\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "cmake/OpenCVFindLATEX.cmake" : {
      "ObjectId" : "fb324ce9b23be2d82bb6a9d0a6125e92ed030ec4",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Latex\n\n# This module finds if Latex is installed and determines where the\n\n# executables are. This code sets the following variables:\n\n#\n\n#  LATEX_COMPILER:       path to the LaTeX compiler\n\n#  PDFLATEX_COMPILER:    path to the PdfLaTeX compiler\n\n#  BIBTEX_COMPILER:      path to the BibTeX compiler\n\n#  MAKEINDEX_COMPILER:   path to the MakeIndex compiler\n\n#  DVIPS_CONVERTER:      path to the DVIPS converter\n\n#  PS2PDF_CONVERTER:     path to the PS2PDF converter\n\n#  LATEX2HTML_CONVERTER: path to the LaTeX2Html converter\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the MikTex binary path (look for its package manager).\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Try to find the GhostScript binary path (look for gswin32).\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/OpenCVFindLibsGUI.cmake" : {
      "ObjectId" : "fd4d0c0d6163d57d3be4cd495e4039e7ef949c50",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Detect 3rd-party GUI libraries\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- Win32 UI ---\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --- QT4 ---\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --- GTK ---\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# --- OpenGl ---\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# --- Cocoa ---\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/OpenCVFindLibsGrfmt.cmake" : {
      "ObjectId" : "91afcc4f12f081a854e497c1f01314b6d0148a9d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Detect 3rd-party image IO libraries\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --- zlib (required) ---\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --- libjpeg (optional) ---\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# no needed for strict platform check here, both files 64/32 should contain the same version\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# --- libtiff (optional, should be searched after zlib and libjpeg) ---\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# --- libwebp (optional) ---\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# --- Add libwebp to 3rdparty/libwebp and compile it if not available ---\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# --- libjasper (optional, should be searched after libjpeg) ---\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# --- libpng (optional, should be searched after zlib) ---\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# --- OpenEXR (optional) ---\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# --- GDAL (optional) ---\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include(${GDCM_USE_FILE})\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# GDCM does not set this variable for some reason\n",
        "Line" : 252,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 13
    },
    "cmake/OpenCVFindLibsPerf.cmake" : {
      "ObjectId" : "8b91a2d739b1ab55f54025eba5ce1b109b244824",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  Detect other 3rd-party performance and math libraries\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --- TBB ---\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --- IPP ---\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Details: #10229\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# --- CUDA ---\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# --- Eigen ---\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# --- Clp ---\n\n# Ubuntu: sudo apt-get install coinor-libclp-dev coinor-libcoinutils-dev\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/OpenCVFindLibsVideo.cmake" : {
      "ObjectId" : "5436c4cf48ee7f23a50d9b4d18175556cdea4d62",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- Extra HighGUI and VideoIO libs on Windows ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --- VA & VA_INTEL ---\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/OpenCVFindMKL.cmake" : {
      "ObjectId" : "5eee3f5daac7a5ecb5873a7a09382b5ecc154018",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The script to detect Intel(R) Math Kernel Library (MKL)\n\n# installation/package\n\n#\n\n# Parameters:\n\n# MKL_WITH_TBB\n\n#\n\n# On return this will define:\n\n#\n\n# HAVE_MKL          - True if Intel MKL found\n\n# MKL_ROOT_DIR      - root of MKL installation\n\n# MKL_INCLUDE_DIRS  - MKL include folder\n\n# MKL_LIBRARIES     - MKL libraries that are used by OpenCV\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# read MKL version info from file\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#file(STRINGS ${VERSION_FILE} STR4 REGEX \"INTEL_MKL_VERSION\")\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# extract info and assign to variables\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#ON IF WITH_TBB)\n",
        "Line" : 44,
        "CharPositionInLine" : 66
      },
      "5" : {
        "Text" : "#ON IF WITH_OPENMP)\n",
        "Line" : 45,
        "CharPositionInLine" : 72
      },
      "6" : {
        "Text" : "#check current MKL_ROOT_DIR\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#determine arch\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#it's ugly but helps to avoid cyclic lib problem\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cmake/OpenCVFindOpenBLAS.cmake" : {
      "ObjectId" : "ae2daaa194f9281fb337c2c2eec98ed5666ad2ee",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#COPYRIGHT\n\n#\n\n#All contributions by the University of California:\n\n#Copyright (c) 2014, 2015, The Regents of the University of California (Regents)\n\n#All rights reserved.\n\n#\n\n#All other contributions:\n\n#Copyright (c) 2014, 2015, the respective contributors\n\n#All rights reserved.\n\n#\n\n#Caffe uses a shared copyright model: each contributor holds copyright over\n\n#their contributions to Caffe. The project versioning records all such\n\n#contribution and copyright details. If a contributor wants to further mark\n\n#their specific copyright on a particular contribution, they should indicate\n\n#their copyright solely in the commit message of the change when it is\n\n#committed.\n\n#\n\n#LICENSE\n\n#\n\n#Redistribution and use in source and binary forms, with or without\n\n#modification, are permitted provided that the following conditions are met:\n\n#\n\n#1. Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#2. Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n#\n\n#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n#ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n#WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n\n#ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n#(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n#LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\n#ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n#(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#CONTRIBUTION AGREEMENT\n\n#\n\n#By contributing to the BVLC/caffe repository through pull-request, comment,\n\n#or otherwise, the contributor releases their content to the\n\n#license and copyright terms herein.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check include files\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    Check libraries\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/OpenCVFindOpenEXR.cmake" : {
      "ObjectId" : "c0a46806e1504ba1f91c80ff4ee593cac58e4fc8",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The script is taken from http://code.google.com/p/nvidia-texture-tools/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Try to find OpenEXR's libraries, and include path.\n\n# Once done this will define:\n\n#\n\n# OPENEXR_FOUND = OpenEXR found.\n\n# OPENEXR_INCLUDE_PATHS = OpenEXR include directories.\n\n# OPENEXR_LIBRARIES = libraries that are needed to use OpenEXR.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/OpenCVFindProtobuf.cmake" : {
      "ObjectId" : "98e1ce24062a220bf9749b95716d1a8e0178e4b8",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If protobuf is found - libprotobuf target is available\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Backwards compatibility\n\n# Define camel case versions of input variables\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# end of compatibility block\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/OpenCVFindVA.cmake" : {
      "ObjectId" : "37e916d1fd5a2d801e377f9eae0d1255a13f8742",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main variables:\n\n# HAVE_VA for conditional compilation OpenCV with/without libva\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/OpenCVFindVA_INTEL.cmake" : {
      "ObjectId" : "63d0f15a365bc83bf001f356e59049cb3164c6fe",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main variables:\n\n# VA_INTEL_IOCL_INCLUDE_DIR to use VA_INTEL\n\n# HAVE_VA_INTEL for conditional compilation OpenCV with/without VA_INTEL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VA_INTEL_IOCL_ROOT - root of Intel OCL installation\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/OpenCVFindWebP.cmake" : {
      "ObjectId" : "24f4f93efeeec7da84cba1af8d522a33e7517fcb",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Find WebP library\n\n#=============================================================================\n\n# Find the native WebP headers and libraries.\n\n#\n\n#  WEBP_INCLUDE_DIRS - where to find webp/decode.h, etc.\n\n#  WEBP_LIBRARIES    - List of libraries when using webp.\n\n#  WEBP_FOUND        - True if webp is found.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set WEBP_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/OpenCVFindXimea.cmake" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCVGenABI.cmake" : {
      "ObjectId" : "b321bd59f0d9a922d80dc93401274137c14807ab",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Headers\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libraries\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# opencv_contrib\n",
        "Line" : 28,
        "CharPositionInLine" : 102
      },
      "3" : {
        "Text" : "# headers\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# libraries\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# opencv_world\n",
        "Line" : 36,
        "CharPositionInLine" : 29
      },
      "6" : {
        "Text" : "# Options\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/OpenCVGenAndroidMK.cmake" : {
      "ObjectId" : "ebf25d72a66358d2d83179b2445f5961f2088210",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --------------------------------------------------------------------------------------------\n\n#  Installation for Android ndk-build makefile:  OpenCV.mk\n\n#  Part 1/2: ${BIN_DIR}/OpenCV.mk              -> For use *without* \"make install\"\n\n#  Part 2/2: ${BIN_DIR}/unix-install/OpenCV.mk -> For use with \"make install\"\n\n# -------------------------------------------------------------------------------------------\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# build type\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# build the list of opencv libs and dependencies for all modules\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# list -> string\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# replace 'opencv_<module>' -> '<module>''\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# -------------------------------------------------------------------------------------------\n\n#  Part 1/2: ${BIN_DIR}/OpenCV.mk              -> For use *without* \"make install\"\n\n# -------------------------------------------------------------------------------------------\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# -------------------------------------------------------------------------------------------\n\n#  Part 2/2: ${BIN_DIR}/unix-install/OpenCV.mk -> For use with \"make install\"\n\n# -------------------------------------------------------------------------------------------\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/OpenCVGenConfig.cmake" : {
      "ObjectId" : "f452678adb89253200519759db8111bf76146df9",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --------------------------------------------------------------------------------------------\n\n#  Installation for CMake Module:  OpenCVConfig.cmake\n\n#  Part 1/3: ${BIN_DIR}/OpenCVConfig.cmake              -> For use *without* \"make install\"\n\n#  Part 2/3: ${BIN_DIR}/unix-install/OpenCVConfig.cmake -> For use with \"make install\"\n\n#  Part 3/3: ${BIN_DIR}/win-install/OpenCVConfig.cmake  -> For use within binary installers/packages\n\n# -------------------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -------------------------------------------------------------------------------------------\n\n#  Part 1/3: ${BIN_DIR}/OpenCVConfig.cmake              -> For use *without* \"make install\"\n\n# -------------------------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#support for version checking when finding opencv. find_package(OpenCV 2.3.1 EXACT) should now work.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --------------------------------------------------------------------------------------------\n\n#  Part 2/3: ${BIN_DIR}/unix-install/OpenCVConfig.cmake -> For use *with* \"make install\"\n\n# -------------------------------------------------------------------------------------------\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Root config file\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# --------------------------------------------------------------------------------------------\n\n#  Part 3/3: ${BIN_DIR}/win-install/OpenCVConfig.cmake  -> For use within binary installers/packages\n\n# --------------------------------------------------------------------------------------------\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/OpenCVGenHeaders.cmake" : {
      "ObjectId" : "477b9105583043cd9e7c3a1f483bb66890398233",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# platform-specific config file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# platform-specific config file\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  opencv_modules.hpp based on actual modules list\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(OPENCV_MOD_LIST ${OPENCV_MODULES_DISABLED_USER} ${OPENCV_MODULES_DISABLED_AUTO} ${OPENCV_MODULES_DISABLED_FORCE})\n\n#ocv_list_sort(OPENCV_MOD_LIST)\n\n#foreach(m ${OPENCV_MOD_LIST})\n\n#  string(TOUPPER \"${m}\" m)\n\n#  set(OPENCV_MODULE_DEFINITIONS_CONFIGMAKE \"${OPENCV_MODULE_DEFINITIONS_CONFIGMAKE}#undef HAVE_${m}\\n\")\n\n#endforeach()\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/OpenCVGenInfoPlist.cmake" : {
      "ObjectId" : "6dbdc5b9e740318da6dbbf75063fd7a11062ee18",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCVGenPkgconfig.cmake" : {
      "ObjectId" : "43d6a87e749c9ec7ea80c34595e8d7f5991395da",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --------------------------------------------------------------------------------------------\n\n# according to man pkg-config\n\n#  The package name specified on the pkg-config command line is defined to\n\n#      be the name of the metadata file, minus the .pc extension. If a library\n\n#      can install multiple versions simultaneously, it must give each version\n\n#      its own name (for example, GTK 1.2 might have the package  name  \"gtk+\"\n\n#      while GTK 2.0 has \"gtk+-2.0\").\n\n#\n\n# ${BIN_DIR}/unix-install/opencv.pc -> For use *with* \"make install\"\n\n# -------------------------------------------------------------------------------------------\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MacOS framework (assume single entry \"-framework OpenCL\")\n",
        "Line" : 28,
        "CharPositionInLine" : 39
      },
      "2" : {
        "Text" : "# build the list of opencv libs and dependencies for all modules\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#build the list of components\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note:\n\n#   when linking against static libraries, if libfoo depends on libbar, then\n\n#   libfoo must come first in the linker flags.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# world is a special target whose library should come first,\n\n# especially for static link.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# =============================================================================\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DEFINED CMAKE_HELPER_SCRIPT\n",
        "Line" : 111,
        "CharPositionInLine" : 7
      },
      "8" : {
        "Text" : "#generate the .pc file\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DEFINED CMAKE_HELPER_SCRIPT\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 10
    },
    "cmake/OpenCVGenSetupVars.cmake" : {
      "ObjectId" : "2cf238714f3a330c91b3b70a3acb923699de7810",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##### build directory\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default\n",
        "Line" : 25,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# https://github.com/opencv/opencv/pull/12977\n",
        "Line" : 31,
        "CharPositionInLine" : 61
      },
      "3" : {
        "Text" : "##### install directory\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/OpenCVMinDepVersions.cmake" : {
      "ObjectId" : "d9627800ddac6f102ffebfff5a40bde9c4cb7d5e",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenCVModule.cmake" : {
      "ObjectId" : "3aef09af221ba9affe9b65186032f32b1c64469d",
      "LastModified" : "2019-04-03T19:33:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Local variables (set for each module):\n\n#\n\n# name       - short name in lower case i.e. core\n\n# the_module - full name in lower case i.e. opencv_core\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Global variables:\n\n#\n\n# OPENCV_MODULE_${the_module}_LOCATION\n\n# OPENCV_MODULE_${the_module}_BINARY_DIR\n\n# OPENCV_MODULE_${the_module}_DESCRIPTION\n\n# OPENCV_MODULE_${the_module}_CLASS - PUBLIC|INTERNAL|BINDINGS\n\n# OPENCV_MODULE_${the_module}_HEADERS\n\n# OPENCV_MODULE_${the_module}_SOURCES\n\n# OPENCV_MODULE_${the_module}_DEPS - final flattened set of module dependencies\n\n# OPENCV_MODULE_${the_module}_DEPS_TO_LINK - differs from above for world build only\n\n# OPENCV_MODULE_${the_module}_DEPS_EXT - non-module dependencies\n\n# OPENCV_MODULE_${the_module}_REQ_DEPS\n\n# OPENCV_MODULE_${the_module}_OPT_DEPS\n\n# OPENCV_MODULE_${the_module}_PRIVATE_REQ_DEPS\n\n# OPENCV_MODULE_${the_module}_PRIVATE_OPT_DEPS\n\n# OPENCV_MODULE_${the_module}_IS_PART_OF_WORLD\n\n# OPENCV_MODULE_${the_module}_CUDA_OBJECTS - compiled CUDA objects list\n\n# OPENCV_MODULE_${the_module}_WRAPPERS - list of wrappers supporting this module\n\n# HAVE_${the_module} - for fast check of module availability\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To control the setup of the module you could also set:\n\n# the_description - text to be used as current module description\n\n# the_label - label for current module\n\n# OPENCV_MODULE_TYPE - STATIC|SHARED - set to force override global settings for current module\n\n# OPENCV_MODULE_IS_PART_OF_WORLD - ON|OFF (default ON) - should the module be added to the opencv_world?\n\n# BUILD_${the_module}_INIT - ON|OFF (default ON) - initial value for BUILD_${the_module}\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The verbose template for OpenCV module:\n\n#\n\n#   ocv_add_module(modname <dependencies>)\n\n#   ocv_glob_module_sources(([EXCLUDE_CUDA] <extra sources&headers>)\n\n#                          or glob them manually and ocv_set_module_sources(...)\n\n#   ocv_module_include_directories(<extra include directories>)\n\n#   ocv_create_module()\n\n#   <add extra link dependencies, compiler options, etc>\n\n#   ocv_add_precompiled_headers(${the_module})\n\n#   <add extra installation rules>\n\n#   ocv_add_accuracy_tests(<extra dependencies>)\n\n#   ocv_add_perf_tests(<extra dependencies>)\n\n#   ocv_add_samples(<extra dependencies>)\n\n#\n\n#\n\n# If module have no \"extra\" then you can define it in one line:\n\n#\n\n#   ocv_define_module(modname <dependencies>)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# clean flags for modules enabled on previous cmake run\n\n# this is necessary to correctly handle modules removal\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# clean modules info which needs to be recalculated\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# adds dependencies to OpenCV module\n\n# Usage:\n\n#   add_dependencies(opencv_<name> [REQUIRED] [<list of dependencies>] [OPTIONAL <list of modules>] [WRAP <list of wrappers>])\n\n# Notes:\n\n# * <list of dependencies> - can include full names of modules or full paths to shared/static libraries or cmake targets\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#we don't clean the dependencies here to allow this macro several times for every module\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# hack for python\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# declare new OpenCV module in current folder\n\n# Usage:\n\n#   ocv_add_module(<name> [INTERNAL|BINDINGS] [REQUIRED] [<list of dependencies>] [OPTIONAL <list of optional dependencies>] [WRAP <list of wrappers>])\n\n# Example:\n\n#   ocv_add_module(yaom INTERNAL opencv_core opencv_highgui opencv_flann OPTIONAL opencv_cudev)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# the first pass - collect modules info, the second pass - create targets\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#guard against redefinition\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# create option to enable/disable this module\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# remember the module details\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# parse list of dependencies\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# add self to the world dependencies\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# add reverse wrapper dependencies\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# stop processing of current file\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# extra protection from redefinition\n",
        "Line" : 225,
        "CharPositionInLine" : 15
      },
      "19" : {
        "Text" : "# M_PI constant in MSVS\n",
        "Line" : 232,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# to use C libraries from C++ code (ffmpeg)\n",
        "Line" : 233,
        "CharPositionInLine" : 79
      },
      "21" : {
        "Text" : "# excludes module from current configuration\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# touch variable controlling build of the module to suppress \"unused variable\" CMake warning\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# leave the current folder\n",
        "Line" : 257,
        "CharPositionInLine" : 11
      },
      "24" : {
        "Text" : "# gather acceptable locations and generate names for them\n\n# if folder contains CMakeLists.txt - it is accepted,\n\n# otherwise all first-level subfolders containing CMakeLists.txt are accepted.\n\n# Usage: _glob_locations(<output paths list> <output names list> <folder> [<folder> ...])\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#message(STATUS \"Inspect: ${path}\")\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Either module itself\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Either flat collection of modules\n",
        "Line" : 276,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "#message(STATUS \"Inspect: ${path}/${subdir}\")\n",
        "Line" : 279,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# Return\n",
        "Line" : 291,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Calls 'add_subdirectory' for each location.\n\n# Note: both input lists should have same length.\n\n# Usage: _add_modules_1(<list with paths> <list with names>)\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#message(STATUS \"First pass: ${__name} => ${__path}\")\n",
        "Line" : 311,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Calls 'add_subdirectory' for each module name.\n\n# Usage: _add_modules_2([<module> ...])\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#message(STATUS \"Second pass: ${name} => ${OPENCV_MODULE_${m}_LOCATION}\")\n",
        "Line" : 332,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Check if list of input items is unique.\n\n# Usage: _assert_uniqueness(<failure message> <element> [<element> ...])\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# collect modules from specified directories\n\n# NB: must be called only once!\n\n# Usage: ocv_glob_modules(<main location> [<extra location> ...])\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# collect modules\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# resolve dependencies\n",
        "Line" : 382,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# create modules\n",
        "Line" : 385,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# disables OpenCV module with missing dependencies\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# sort modules by dependencies\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# check if module is in the result already\n",
        "Line" : 416,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# scan through module dependencies...\n",
        "Line" : 418,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# ... which are not already in the result and are enabled\n",
        "Line" : 421,
        "CharPositionInLine" : 10
      },
      "44" : {
        "Text" : "# check if all dependencies for this module has been resolved\n",
        "Line" : 427,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# check for infinite loop or unresolved dependencies\n",
        "Line" : 435,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# We can't do here something\n",
        "Line" : 442,
        "CharPositionInLine" : 10
      },
      "47" : {
        "Text" : "# resolve dependencies\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Whitelist feature\n",
        "Line" : 469,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Prepare the list\n",
        "Line" : 471,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Expand the list\n",
        "Line" : 480,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# Disable modules not in whitelist\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# disable MODULES with unresolved dependencies\n",
        "Line" : 504,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# TODO Remove this condition in the future and use HAVE_ variables only\n",
        "Line" : 514,
        "CharPositionInLine" : 35
      },
      "54" : {
        "Text" : "#  message(STATUS \"List of active modules: ${OPENCV_MODULES_BUILD}\")\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#    message(STATUS \"Initial deps of ${m} (w/o private deps): ${deps_${m}}\")\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# propagate dependencies\n",
        "Line" : 541,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# transfer deps of m2 to m\n",
        "Line" : 545,
        "CharPositionInLine" : 40
      },
      "58" : {
        "Text" : "#              message(STATUS \"  Transfer dependency ${d} from ${m2} to ${m}\")\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#                message(STATUS \"  Transfer dependency opencv_world alias ${m2} to ${m}\")\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# process private deps\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "#    message(STATUS \"FULL deps of ${m}: ${deps_${m}}\")\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# reorder dependencies\n",
        "Line" : 599,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# process world\n",
        "Line" : 605,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "#    message(STATUS \"  module deps of ${m}: ${OPENCV_MODULE_${m}_DEPS}\")\n\n#    message(STATUS \"  module link deps of ${m}: ${OPENCV_MODULE_${m}_DEPS_TO_LINK}\")\n\n#    message(STATUS \"  extra deps of ${m}: ${OPENCV_MODULE_${m}_DEPS_EXT}\")\n\n#    message(STATUS \"\")\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# setup include paths for the list of passed modules\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# same as previous but with dependencies\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# setup include paths for the list of passed modules\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# setup include paths for the list of passed modules and recursively add dependent modules\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# setup include path for OpenCV headers for specified module\n\n# ocv_module_include_directories(<extra include directories/extra include modules>)\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# for precompiled headers\n",
        "Line" : 708,
        "CharPositionInLine" : 36
      },
      "71" : {
        "Text" : "# sets header and source files for the current module\n\n# NB: all files specified as headers will be installed\n\n# Usage:\n\n# ocv_set_module_sources([HEADERS] <list of files> [SOURCES] <list of files>)\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# the hacky way to embed any files into the OpenCV without modification of its build system\n",
        "Line" : 732,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# TODO Update hooks above\n",
        "Line" : 741,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# use full paths for module to be independent from the module location\n",
        "Line" : 745,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# finds and sets headers and sources for the standard OpenCV module\n\n# Usage:\n\n# ocv_glob_module_sources([EXCLUDE_CUDA] [EXCLUDE_OPENCL] <extra sources&headers in the same format as used in ocv_set_module_sources>)\n",
        "Line" : 752,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# don't add .hpp file here to optimize build process\n",
        "Line" : 816,
        "CharPositionInLine" : 60
      },
      "77" : {
        "Text" : "# creates OpenCV module in current folder\n\n# creates new target, configures standard dependencies, compilers flags, install rules\n\n# Usage:\n\n#   ocv_create_module(<extra link dependencies>)\n\n#   ocv_create_module()\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# nothing\n",
        "Line" : 847,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# removing APPCONTAINER from modules to run from console\n\n# in case of usual starting of WinRT test apps output is missing\n\n# so starting of console version w/o APPCONTAINER is required to get test results\n\n# also this allows to use opencv_extra test data for these tests\n",
        "Line" : 855,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# copy required dll files; WinRT apps need these dlls that are usually substituted by Visual Studio\n\n# however they are not on path and need to be placed with executables to run from console w/o APPCONTAINER\n",
        "Line" : 866,
        "CharPositionInLine" : 6
      },
      "81" : {
        "Text" : "# The condition we ought to be testing here is whether ocv_add_precompiled_headers will\n\n# be called at some point in the future. We can't look into the future, though,\n\n# so this will have to do.\n",
        "Line" : 883,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# force exports from static modules too\n",
        "Line" : 969,
        "CharPositionInLine" : 26
      },
      "83" : {
        "Text" : "# For dynamic link numbering conventions\n",
        "Line" : 976,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Android SDK build scripts can include only .so files into final .apk\n\n# As result we should not set version properties for Android\n",
        "Line" : 978,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# only \"public\" headers need to be installed\n",
        "Line" : 1011,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "#message(\"Header file will be NOT installed: ${hdr}\")\n",
        "Line" : 1020,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "# opencv precompiled headers macro (can add pch to modules and tests)\n\n# this macro must be called after any \"add_definitions\" commands, otherwise precompiled headers will not work\n\n# Usage:\n\n# ocv_add_precompiled_headers(${the_module})\n",
        "Line" : 1031,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# short command for adding simple OpenCV module\n\n# see ocv_add_module for argument details\n\n# Usage:\n\n# ocv_define_module(module_name  [INTERNAL] [EXCLUDE_CUDA] [REQUIRED] [<list of dependencies>] [OPTIONAL <list of optional dependencies>] [WRAP <list of wrappers>])\n",
        "Line" : 1049,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# ensures that all passed modules are available\n\n# sets OCV_DEPENDENCIES_FOUND variable to TRUE/FALSE\n",
        "Line" : 1074,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# auxiliary macro to parse arguments of ocv_add_accuracy_tests and ocv_add_perf_tests commands\n",
        "Line" : 1086,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# spaces to avoid CMP0054\n",
        "Line" : 1103,
        "CharPositionInLine" : 90
      },
      "92" : {
        "Text" : "# this is a command for adding OpenCV performance tests to the module\n\n# ocv_add_perf_tests(<extra_dependencies>)\n",
        "Line" : 1114,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# opencv_imgcodecs is required for imread/imwrite\n",
        "Line" : 1127,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# project(${the_target})\n",
        "Line" : 1133,
        "CharPositionInLine" : 6
      },
      "95" : {
        "Text" : "# Additional target properties\n",
        "Line" : 1168,
        "CharPositionInLine" : 6
      },
      "96" : {
        "Text" : "# removing APPCONTAINER from tests to run from console\n\n# look for detailed description inside of ocv_create_module macro above\n",
        "Line" : 1178,
        "CharPositionInLine" : 8
      },
      "97" : {
        "Text" : "# TODO: warn about unsatisfied dependencies\n",
        "Line" : 1195,
        "CharPositionInLine" : 6
      },
      "98" : {
        "Text" : "# this is a command for adding OpenCV accuracy/regression tests to the module\n\n# ocv_add_accuracy_tests(<list of extra dependencies>)\n",
        "Line" : 1203,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# opencv_imgcodecs is required for imread/imwrite\n",
        "Line" : 1216,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# project(${the_target})\n",
        "Line" : 1221,
        "CharPositionInLine" : 6
      },
      "101" : {
        "Text" : "# Additional target properties\n",
        "Line" : 1262,
        "CharPositionInLine" : 6
      },
      "102" : {
        "Text" : "# TODO: warn about unsatisfied dependencies\n",
        "Line" : 1284,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# Add single target to build all samples for the module: 'make opencv_samples_bioinspired'\n",
        "Line" : 1327,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 104
    },
    "cmake/OpenCVPCHSupport.cmake" : {
      "ObjectId" : "59bc826ed0565f713d4801a7171c110ef7245264",
      "LastModified" : "2019-04-03T19:33:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# taken from http://public.kitware.com/Bug/view.php?id=1260 and slightly adjusted\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find precompiled headers support for GCC 3.4 and 4.x\n\n# Once done this will define:\n\n#\n\n# Variable:\n\n#   PCHSupport_FOUND\n\n#\n\n# Macro:\n\n#   ADD_PRECOMPILED_HEADER  _targetName _input  _dowarn\n\n#   ADD_PRECOMPILED_HEADER_TO_TARGET _targetName _input _pch_output_to_use _dowarn\n\n#   ADD_NATIVE_PRECOMPILED_HEADER _targetName _input _dowarn\n\n#   GET_NATIVE_PRECOMPILED_HEADER _targetName _input\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## TODO ... ? or does it work out of the box\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# workaround for GCC 6.x bug\n",
        "Line" : 79,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# workaround for GCC 6.x bug\n",
        "Line" : 92,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# remove leading space in compiler argument\n",
        "Line" : 133,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "#/out:${_output}\n",
        "Line" : 152,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# for use with distcc and gcc >4.0.1 if preprocessed files are accessible\n\n# on all remote machines set\n\n# PCH_ADDITIONAL_COMPILER_FLAGS to -fpch-preprocess\n\n# if you want warnings for invalid header files (which is very inconvenient\n\n# if you have different versions of the headers for different build types\n\n# you may set _pch_dowarn\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# to do: test whether compiler flags match between target  _targetName\n\n# and _pch_output_to_use\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#MESSAGE(\"Add flags ${_target_cflags} to ${_targetName} \" )\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#ocv_debug_message(\"Skip PCH, flags: ${oldProps} defines: ${oldProps2}, file: ${src}\")\n",
        "Line" : 220,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "#MESSAGE(\"_compile_FLAGS: ${_compile_FLAGS}\")\n\n#message(\"COMMAND ${CMAKE_CXX_COMPILER}\t${_compile_FLAGS} -x c++-header -o ${_output} ${_input}\")\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# ensure same directory! Required by gcc\n",
        "Line" : 300,
        "CharPositionInLine" : 103
      },
      "13" : {
        "Text" : "#message(\"_command  ${_input} ${_output}\")\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Generates the use of precompiled in a target,\n\n# without using dependency targets (2 extra for each target)\n\n# Using Visual, must also add ${_targetName}_pch to sources\n\n# Not needed by Xcode\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Auto include the precompile (useful for moc processing, since the use of\n\n# precompiled is specified at the target level\n\n# and I don't want to specify /F- for each moc/res/ui generated files (using Qt)\n",
        "Line" : 348,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#also include ${oldProps} to have the same compile options\n",
        "Line" : 366,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# For Xcode, cmake needs my patch to process\n\n# GCC_PREFIX_HEADER and GCC_PRECOMPILE_PREFIX_HEADER as target properties\n",
        "Line" : 384,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# When building out of the tree, precompiled may not be located\n\n# Use full path instead.\n",
        "Line" : 387,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "#Fallback to the \"old\" precompiled support\n\n#ADD_PRECOMPILED_HEADER(${_targetName} ${_input} ${_dowarn})\n",
        "Line" : 396,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 20
    },
    "cmake/OpenCVPackaging.cmake" : {
      "ObjectId" : "5db02e1e594cc8e4e5b8774654d8c1f6f85b2274",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#arch\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#rpm options\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#deb options\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#display names\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#depencencies\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/OpenCVPylint.cmake" : {
      "ObjectId" : "50da7309465c5135f75c07d32fe7ca9978d49484",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# dummy\n",
        "Line" : 11,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 1
    },
    "cmake/OpenCVUtils.cmake" : {
      "ObjectId" : "4ec4eede856a89e686da34b73461fad930c25453",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Debugging function\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# suppress deprecation warnings from variable_watch() guards\n",
        "Line" : 5,
        "CharPositionInLine" : 39
      },
      "2" : {
        "Text" : "#\n\n# CMake script hooks support\n\n#\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(STATUS \"Hook ${hook_name}: calling '${__hook}' ...\")\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#ocv_debug_message(\"Preserve old value for ${VAR}: ${${VAR}}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Search packages for the host system instead of packages for the target system\n\n# in case of cross compilation these macros should be defined by the toolchain file\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# assert macro\n\n# Note: it doesn't support lists in arguments\n\n# Usage samples:\n\n#   ocv_assert(MyLib_FOUND)\n\n#   ocv_assert(DEFINED MyLib_INCLUDE_DIRS)\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Assume that we receive paths\n",
        "Line" : 134,
        "CharPositionInLine" : 47
      },
      "8" : {
        "Text" : "#message(STATUS \"'${P1}' '${P2_}' => '${${result_var}}'\")\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Used to parse Android SDK 'source.properties' files\n\n# File lines format:\n\n# - '<var_name>=<value>' (with possible 'space' symbols around '=')\n\n# - '#<any comment>'\n\n# Parsed values are saved into CMake variables:\n\n# - '${var_prefix}_${var_name}'\n\n# Flags:\n\n# - 'CACHE_VAR <var1> <var2>' - put these properties into CMake internal cache\n\n# - 'MSG_PREFIX <msg>' - prefix string for emitted messages\n\n# - flag 'VALIDATE' - emit messages about missing values from required cached variables\n\n# - flag 'WARNING' - emit CMake WARNING instead of STATUS messages\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# rename modules target to world if needed\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# check if \"sub\" (file or dir) is below \"dir\"\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# adds include directories in such a way that directories from the OpenCV source tree go first\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# workaround for GCC 6.x bug\n",
        "Line" : 268,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#ocv_debug_message(\"ocv_append_dependant_targets(${target} ${ARGN})\")\n",
        "Line" : 287,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# adds include directories in such a way that directories from the OpenCV source tree go first\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#ocv_debug_message(\"ocv_target_include_directories(${target} ${ARGN})\")\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# workaround for GCC 6.x bug\n",
        "Line" : 299,
        "CharPositionInLine" : 13
      },
      "18" : {
        "Text" : "# clears all passed variables\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# GNU\n",
        "Line" : 362,
        "CharPositionInLine" : 65
      },
      "20" : {
        "Text" : "# GNU\n",
        "Line" : 363,
        "CharPositionInLine" : 59
      },
      "21" : {
        "Text" : "# GNU\n\n# Clang\n\n# MSVC\n\n# MSVC, any lang\n\n# Intel\n\n# HP\n\n# SunPro\n\n# XL\n",
        "Line" : 364,
        "CharPositionInLine" : 48
      },
      "22" : {
        "Text" : "# AIX (';' is replaced with ',')\n",
        "Line" : 372,
        "CharPositionInLine" : 57
      },
      "23" : {
        "Text" : "# PGI\n\n# Open64\n",
        "Line" : 373,
        "CharPositionInLine" : 48
      },
      "24" : {
        "Text" : "# nothing\n",
        "Line" : 381,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# CMP0056 do this on new CMake\n",
        "Line" : 417,
        "CharPositionInLine" : 75
      },
      "26" : {
        "Text" : "# CMP0056 do this on new CMake\n",
        "Line" : 491,
        "CharPositionInLine" : 71
      },
      "27" : {
        "Text" : "# turns off warnings\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Provides an option that the user can optionally select.\n\n# Can accept condition to control when option is available for user.\n\n# Usage:\n\n#   option(<option_variable>\n\n#          \"help string describing the option\"\n\n#          <initial value or boolean expression>\n\n#          [VISIBLE_IF <condition>]\n\n#          [VERIFY <condition>])\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# emit warnings about turned ON options only.\n",
        "Line" : 653,
        "CharPositionInLine" : 49
      },
      "30" : {
        "Text" : "# variable containing condition to verify\n",
        "Line" : 663,
        "CharPositionInLine" : 55
      },
      "31" : {
        "Text" : "# list of variable names (WITH_XXX;WITH_YYY;...)\n",
        "Line" : 664,
        "CharPositionInLine" : 52
      },
      "32" : {
        "Text" : "# Check that each variable stored in OPENCV_VERIFICATIONS list\n\n# is consistent with actual detection result (stored as condition in OPENCV_VERIFY_...) variables\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Usage: ocv_append_build_options(HIGHGUI FFMPEG)\n",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Usage is similar to CMake 'pkg_check_modules' command\n\n# It additionally controls HAVE_${define} and ${define}_${modname}_FOUND variables\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Macro that checks if module has been installed.\n\n# After it adds module to build and define\n\n# constants passed as second arg\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Guard CMake standalone invocations\n",
        "Line" : 779,
        "CharPositionInLine" : 27
      },
      "37" : {
        "Text" : "# Use this option carefully, CMake's install() will install symlinks instead of real files\n\n# It is fine for development, but should not be used by real installations\n",
        "Line" : 781,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# preprocessing is required for old CMake like 2.8.12\n",
        "Line" : 783,
        "CharPositionInLine" : 28
      },
      "39" : {
        "Text" : "# nothing\n",
        "Line" : 791,
        "CharPositionInLine" : 21
      },
      "40" : {
        "Text" : "#message(STATUS \"${OPENCV_BUILD_INFO_FILE} contains the same content\")\n",
        "Line" : 841,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Status report function.\n\n# Automatically align right column and selects text based on condition.\n\n# Usage:\n\n#   status(<text>)\n\n#   status(<heading> <value1> [<value2> ...])\n\n#   status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )\n",
        "Line" : 862,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# NOT DEFINED CMAKE_ARGC\n",
        "Line" : 917,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "#\n\n# Generate a list of enabled features basing on conditions:\n\n#   IF <cond> THEN <title>: check condition and append title to the result if it is true\n\n#   ELSE <title>: return provided value instead of empty result\n\n#   EXCLUSIVE: break after first successful condition\n\n#\n\n# Usage:\n\n#   ocv_build_features_string(out [EXCLUSIVE] [IF feature THEN title] ... [ELSE title])\n\n#\n",
        "Line" : 919,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# remove all matching elements from the list\n",
        "Line" : 964,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# filter matching elements from the list\n",
        "Line" : 973,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# stable & safe duplicates removal macro\n",
        "Line" : 989,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# safe list reversal macro\n",
        "Line" : 997,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# safe list sorting macro\n",
        "Line" : 1005,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# add prefix to each item in the list\n",
        "Line" : 1013,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# add suffix to each item in the list\n",
        "Line" : 1024,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# gets and removes the first element from the list\n",
        "Line" : 1035,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Get list of duplicates in the list of input items.\n\n# ocv_get_duplicates(<output list> <element> [<element> ...])\n",
        "Line" : 1045,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# simple regex escaping routine (does not cover all cases!!!)\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# convert list of paths to full paths\n",
        "Line" : 1069,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# convert list of paths to libraries names without lib prefix\n",
        "Line" : 1083,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# no defaults for static libs (modern CMake is required)\n",
        "Line" : 1094,
        "CharPositionInLine" : 32
      },
      "57" : {
        "Text" : "# add install command\n",
        "Line" : 1104,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# static libs\n",
        "Line" : 1138,
        "CharPositionInLine" : 37
      },
      "59" : {
        "Text" : "# shared libs (.DLL)\n",
        "Line" : 1141,
        "CharPositionInLine" : 39
      },
      "60" : {
        "Text" : "#      message(STATUS \"Process ${__target} dst=${__dst}...\")\n",
        "Line" : 1162,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#          message(STATUS \"Adding PDB file installation rule: target=${__target} dst=${__dst} component=${__pdb_install_component}\")\n",
        "Line" : 1178,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# There is no generator expression similar to TARGET_PDB_FILE and TARGET_PDB_FILE can't be used: https://gitlab.kitware.com/cmake/cmake/issues/16932\n\n# However we still want .pdb files like: 'lib/Debug/opencv_core341d.pdb' or '3rdparty/lib/zlibd.pdb'\n",
        "Line" : 1183,
        "CharPositionInLine" : 12
      },
      "63" : {
        "Text" : "# ocv_install_3rdparty_licenses(<library-name> <filename1> [<filename2> ..])\n",
        "Line" : 1200,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# read set of version defines from the header file\n",
        "Line" : 1217,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# read single version define from the header file\n",
        "Line" : 1258,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 1280,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "################################################################################################\n\n# short command to setup source group\n",
        "Line" : 1293,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# add '/'\n",
        "Line" : 1321,
        "CharPositionInLine" : 33
      },
      "69" : {
        "Text" : "# prevent \"link to itself\" warning (world problem)\n",
        "Line" : 1350,
        "CharPositionInLine" : 6
      },
      "70" : {
        "Text" : "# \"current version\" in semantic format in Mach-O binary file\n",
        "Line" : 1429,
        "CharPositionInLine" : 6
      },
      "71" : {
        "Text" : "# \"compatibility version\" in semantic format in Mach-O binary file\n",
        "Line" : 1431,
        "CharPositionInLine" : 6
      },
      "72" : {
        "Text" : "#PUBLIC_HEADER \"${OPENCV_CONFIG_FILE_INCLUDE_DIR}/cvconfig.h\"\n\n#XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"iPhone Developer\"\n",
        "Line" : 1438,
        "CharPositionInLine" : 6
      },
      "73" : {
        "Text" : "# libopencv_core.so.3.3 -> opencv_core\n",
        "Line" : 1449,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# MacOSX: libopencv_core.3.3.1.dylib -> opencv_core\n",
        "Line" : 1451,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# build the list of opencv libs and dependencies for all modules\n\n#  _modules - variable to hold list of all modules\n\n#  _extra - variable to hold list of extra dependencies\n\n#  _3rdparty - variable to hold list of prebuilt 3rdparty libraries\n",
        "Line" : 1456,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# nothing\n",
        "Line" : 1491,
        "CharPositionInLine" : 12
      },
      "77" : {
        "Text" : "# convert CMake lists to makefile literals\n",
        "Line" : 1526,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# required for add_custom_target() by ninja\n",
        "Line" : 1683,
        "CharPositionInLine" : 23
      },
      "79" : {
        "Text" : "# ninja warn about file(WRITE): \"${SRC_COPY_CONFIG_FILE}\"\n",
        "Line" : 1692,
        "CharPositionInLine" : 14
      },
      "80" : {
        "Text" : "# ninja warn about file(WRITE): \"${SRC_COPY_CONFIG_FILE}\"\n",
        "Line" : 1708,
        "CharPositionInLine" : 14
      },
      "81" : {
        "Text" : "# Needed by install(DIRECTORY ...)\n",
        "Line" : 1729,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# --exclude is not supported by 'git'\n",
        "Line" : 1754,
        "CharPositionInLine" : 34
      },
      "83" : {
        "Text" : "# match only tags with complete OpenCV versions (ignores -alpha/-beta/-rc suffixes)\n",
        "Line" : 1755,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# ocv_update_file(filepath content [VERBOSE])\n\n# - write content to file\n\n# - will not change modification time in case when file already exists and content has not changed\n",
        "Line" : 1774,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 85
    },
    "cmake/OpenCVVersion.cmake" : {
      "ObjectId" : "a2b4926cf0d2b6ae28f3a488fbceb1c13e5aced1",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create a dependency on the version file\n\n# we never use the output of the following command but cmake will rerun automatically if the version file changes\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/android/OpenCVDetectAndroidSDK.cmake" : {
      "ObjectId" : "3a4ffefa43dc275f4117c2ceb543eb7dfc0d3396",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# fixup for https://github.com/android-ndk/ndk/issues/596\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# fixup -g option: https://github.com/opencv/opencv/issues/8460#issuecomment-434249750\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# https://developer.android.com/studio/command-line/variables.html\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# https://developer.android.com/studio/releases/sdk-tools.html\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ocv_detect_android_sdk_tools\n",
        "Line" : 92,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# https://developer.android.com/studio/releases/build-tools.html\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ANDROID_SDK_BUILD_TOOLS\n",
        "Line" : 165,
        "CharPositionInLine" : 13
      },
      "7" : {
        "Text" : "# ANDROID_SDK_BUILD_TOOLS_VERSION\n",
        "Line" : 166,
        "CharPositionInLine" : 11
      },
      "8" : {
        "Text" : "# ocv_detect_android_sdk_build_tools\n",
        "Line" : 167,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# https://developer.android.com/studio/releases/gradle-plugin.html\n",
        "Line" : 184,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# BUILD_ANDROID_PROJECTS\n",
        "Line" : 217,
        "CharPositionInLine" : 9
      },
      "11" : {
        "Text" : "# TODO\n\n#include(${CMAKE_CURRENT_LIST_DIR}/android_disabled_projects.cmake)\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "cmake/android/android_ant_projects.cmake" : {
      "ObjectId" : "ed9ce43582e50c27c84ff677d255453b8d58e400",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clear ANDROID_SDK_TARGET if no target is provided by user\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# finds minimal installed SDK target compatible with provided names or API levels\n\n# usage:\n\n#   get_compatible_android_api_level(VARIABLE [level1] [level2] ...)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#find minimal level mathing to all provided levels\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#search for compatible levels\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#look for exact match\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#exact match was found\n",
        "Line" : 72,
        "CharPositionInLine" : 18
      },
      "6" : {
        "Text" : "# add_android_project(target_name ${path} NATIVE_DEPS opencv_core LIBRARY_DEPS ${OpenCV_BINARY_DIR} SDK_TARGET 11)\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# parse arguments\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# get compatible SDK target\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# check native dependencies\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# find if native_app_glue is used\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# project sources\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# process Android library dependencies\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# fix Android project\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# avoid warning about sub-projects\n",
        "Line" : 168,
        "CharPositionInLine" : 99
      },
      "15" : {
        "Text" : "# build native part\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# find local module name in Android.mk file to build native lib\n",
        "Line" : 182,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# build java part\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# needed because ant does not update the timestamp of updated apk\n",
        "Line" : 240,
        "CharPositionInLine" : 92
      },
      "19" : {
        "Text" : "# There is some strange problem with concurrent Android .APK builds:\n\n# <android-sdk>/tools/ant/build.xml:781: Problem reading <build_dir>/bin/classes.jar'\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# put the final .apk to the OpenCV's bin folder\n",
        "Line" : 257,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# apk\n",
        "Line" : 261,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# clear \"external\" project files (need to remove files generated by 'android' tool)\n",
        "Line" : 263,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "#java part\n",
        "Line" : 272,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "#jni part + eclipse files\n",
        "Line" : 276,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "#update proj\n",
        "Line" : 283,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# empty 'gen'\n",
        "Line" : 294,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 27
    },
    "cmake/android/android_gradle_projects.cmake" : {
      "ObjectId" : "ebad46a403a3a44a6373340f7c64feac52a9f3de",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# https://developer.android.com/studio/releases/gradle-plugin\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUG: Ninja generator generates broken targets with ANDROID_ABI_FILTER name (CMake 3.11.2)\n\n#set(__spaces \"                        \")\n\n#string(REPLACE \"\\n\" \"\\n${__spaces}\" ANDROID_ABI_FILTER \"${__spaces}${ANDROID_BUILD_ABI_FILTER}\")\n\n#string(REPLACE REGEX \"[ ]+$\" \"\" ANDROID_ABI_FILTER \"${ANDROID_ABI_FILTER}\")\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Build\n\n#\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# build apk\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# force rebuild after CMake run\n",
        "Line" : 119,
        "CharPositionInLine" : 62
      },
      "5" : {
        "Text" : "#\n\n# Install\n\n#\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/cl2cpp.cmake" : {
      "ObjectId" : "a9d1b6789d4c8764090c3f759269f401b55aac28",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message(\"${cl_filename}\")\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# multiline comments\n\n# single-line comments\n\n# single-line comments\n\n# empty lines & leading whitespace\n\n# leading new line\n",
        "Line" : 61,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : "# unneeded \" at the eof\n",
        "Line" : 71,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 3
    },
    "cmake/copy_files.cmake" : {
      "ObjectId" : "423f7fff9c87a1159eb167090d0f158a3b21b9f7",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message(\"Symlink failed, fallback to 'copy'\")\n",
        "Line" : 31,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# configure_file(COPYONLY) doesn't update timestamp sometimes\n",
        "Line" : 37,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "#message(\"${prefix}Up-to-date: '${dst_name}'\")\n",
        "Line" : 44,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#message(\"... COPY ${src} => ${dst}\")\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "1f0d7200844152d7ca33b256d72d987e7e0371ce",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "1d85d450bf58c75791ea73d9e1b77e7dfd046e9b",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Dependencies scheme (* - optional):\n\n#\n\n# javadoc* -> doxygen_javadoc* -> doxygen_cpp ---------> doxygen -> opencv_docs\n\n#    \\                               \\                     /        /\n\n#     \\                               -> doxygen_python* ->        /\n\n#      ---------------------------------------------------------->\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# not documented modules list\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# gathering headers\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# blacklist\n",
        "Line" : 49,
        "CharPositionInLine" : 20
      },
      "4" : {
        "Text" : "# include folder\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# doc folder\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# sample folder\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# tutorial folder\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# tutorial reference entry\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# HAL replacement file\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# BiBTeX file\n",
        "Line" : 107,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Reference entry\n",
        "Line" : 113,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# fix references\n\n# set(ref_header \"Module name | Folder\\n----------- | ------\")\n\n# if(refs_main)\n\n#    set(refs_main \"### Main modules\\n${ref_header}\\n${refs_main}\")\n\n# endif()\n\n# if(refs_extra)\n\n#   set(refs_extra \"### Extra modules\\n${ref_header}\\n${refs_extra}\")\n\n# endif()\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# additional config\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# set export variables\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# TODO: remove paths_doc from EXAMPLE_PATH after face module tutorials/samples moved to separate folders\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# list(APPEND CMAKE_DOXYGEN_HTML_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/mymath.sty\")\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# writing file\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# js tutorial assets\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# make sure the build directory exists\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# gather and copy specific files for js tutorials\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# copy haar cascade files\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Documentation post-processing tool requires BuautifulSoup Python package\n",
        "Line" : 227,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 23
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "25aa8e5a1f5257144c55c988a59b69e6c6a77ce1",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/CMakeLists.txt" : {
      "ObjectId" : "6a8004036b280f4482b6b75a7a20070d8368c620",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# build lists of modules to be documented\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/calib3d/CMakeLists.txt" : {
      "ObjectId" : "67ea078246273249a1e029cb4d429cc63459a142",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/core/CMakeLists.txt" : {
      "ObjectId" : "c12847e3e717250c6ef99fe5c531402eea254a20",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# dispatching for accuracy tests\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# generate data (samples data) config file\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/dnn/CMakeLists.txt" : {
      "ObjectId" : "7682257729ef833e21069ffa2bdac6efbbdaa4af",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LANG_CXX11 from protobuf files\n",
        "Line" : 36,
        "CharPositionInLine" : 52
      },
      "1" : {
        "Text" : "#suppress warnings in autogenerated caffe.pb.* files\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# potentially uninitialized local/pointer variable 'value' used\n\n# unreferenced local function has been removed\n",
        "Line" : 57,
        "CharPositionInLine" : 39
      },
      "3" : {
        "Text" : "# Apple Clang (attr_value.pb.cc)\n",
        "Line" : 60,
        "CharPositionInLine" : 39
      },
      "4" : {
        "Text" : "# required for tensorflow\n",
        "Line" : 65,
        "CharPositionInLine" : 44
      },
      "5" : {
        "Text" : "# GCC\n",
        "Line" : 84,
        "CharPositionInLine" : 81
      },
      "6" : {
        "Text" : "# Clang\n",
        "Line" : 86,
        "CharPositionInLine" : 94
      },
      "CommentCount" : 7
    },
    "modules/dnn/cmake/hooks/INIT_MODULE_SOURCES_opencv_dnn.cmake" : {
      "ObjectId" : "f19002d13aec29ac6fdf2f3a813b8e915a3bd631",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/features2d/CMakeLists.txt" : {
      "ObjectId" : "f18f69edb397574c392b410db20fe0fbfa02ab5c",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/flann/CMakeLists.txt" : {
      "ObjectId" : "78e041129b942881a3f6b97dbacdfed7466db468",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/gapi/CMakeLists.txt" : {
      "ObjectId" : "ae4d20c024f8715992e16ef90562676c1dfb50a4",
      "LastModified" : "2019-04-17T18:54:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Rework standalone build in more generic maner\n\n# (Restructure directories, add common pass, etc)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Remove CXX11 check after complete switch to OpenCV 4 branch\n\n# (CI, bundle, workloads, etc)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# can't build G-API because of the above reasons\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Front-end part\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Compiler part\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Executor\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# CPU Backend (currently built-in)\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Fluid Backend (also built-in, FIXME:move away)\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# OCL Backend (currently built-in)\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Compound\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# For IDE users\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Note `ade` is not a module name but link dependency for ${the_module}\n\n# (which is opencv_gapi)\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# FIXME: test binary is linked with ADE directly since ADE symbols\n\n# are not exported from libopencv_gapi.so in any form - thus\n\n# there're two copies of ADE code in memory when tests run (!)\n\n# src/ is specified to include dirs for INTERNAL tests only.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "modules/gapi/cmake/DownloadADE.cmake" : {
      "ObjectId" : "8b6f1176f321915f505d77c7576c99360a49660f",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Android build will be enabled separately\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "modules/gapi/cmake/init.cmake" : {
      "ObjectId" : "12e22120e1973a39076a3ffa847f49876c018a82",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if ade_DIR is set, use ADE-supplied CMake script\n\n# to set up variables to the prebuilt ADE\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# if ade_DIR is not set, try to use automatically\n\n# downloaded one (if there any)\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "modules/gapi/cmake/standalone.cmake" : {
      "ObjectId" : "9dd5540643135a644e98da13a00cae02a24817e3",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This preprocessor definition resolves symbol clash when\n\n# standalone fluid meets gapi ocv module in one application\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/highgui/CMakeLists.txt" : {
      "ObjectId" : "2dcd158145a6d385cbafc99a8c301782593a4e79",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for highgui. See root CMakeLists.txt\n\n#   Some parts taken from version of Hartmut Seichter, HIT Lab NZ.\n\n#   Jose Luis Blanco, 2008\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Removing WinRT API headers by default\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# \"Automoc\" doesn't work properly with opencv_world build, use QT5_WRAP_CPP() directly\n\n#set(CMAKE_AUTOMOC ON)\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Dependencies used by the implementation referenced\n\n# below are not available on WinRT 8.0.\n\n# Enabling it for WiRT 8.1+ only.\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# WinRT 8.1+ detected. Adding WinRT API header.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# libraries below are neither available nor required\n\n# on ARM devices and/or Windows Phone\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#these variables are set by CHECK_MODULE macro\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "modules/imgcodecs/CMakeLists.txt" : {
      "ObjectId" : "c7ff7e79754809b9684de6c696a672525d6141c9",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for imgcodecs. See root CMakeLists.txt\n\n#   Some parts taken from version of Hartmut Seichter, HIT Lab NZ.\n\n#   Jose Luis Blanco, 2008\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#these variables are set by CHECK_MODULE macro\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "modules/imgproc/CMakeLists.txt" : {
      "ObjectId" : "0c7b3268df62c44b1f2aff7ba11cbbcf31b330eb",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/java/CMakeLists.txt" : {
      "ObjectId" : "a477490d1456f4e7873dee75b1204dceb12bb809",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generator for JNI/JAR source code and documentation signatures\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# UTILITY: glob specific sources and append them to list (type is in H, CPP, JAVA, AIDL)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# UTILITY: copy common java test files and add them to _deps\n\n# copy_common_tests(<source-folder> <destination-folder> <variable-to-store-deps>)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# generates ${the_module} target (${the_module}_jni doesn't work properly with Android non-gradle samples)\n",
        "Line" : 58,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "# generates ${the_module}_android target\n",
        "Line" : 60,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# generates ${the_module}_jar target\n",
        "Line" : 62,
        "CharPositionInLine" : 25
      },
      "CommentCount" : 6
    },
    "modules/java/android_sdk/CMakeLists.txt" : {
      "ObjectId" : "c45251bd6852f5982c74b5cb96f1a76fad6b156a",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gradle\n",
        "Line" : 6,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# for OpenCV samples\n",
        "Line" : 9,
        "CharPositionInLine" : 68
      },
      "2" : {
        "Text" : "# calc default SDK Target\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# copy boilerplate\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# force rebuild after CMake run\n",
        "Line" : 48,
        "CharPositionInLine" : 70
      },
      "5" : {
        "Text" : "# generate Android library project\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# build.xml;local.properties;proguard-project.txt;project.properties\n",
        "Line" : 53,
        "CharPositionInLine" : 61
      },
      "7" : {
        "Text" : "# build jar\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# build the library project\n\n# normally we should do this after a native part, but for a library project we can build the java part first\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# empty 'gen' and 'res' folders\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# gradle build\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#\n\n# Android Gradle-based project\n\n#\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#TODO: INSTALL ONLY\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# copy boilerplate\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# force rebuild after CMake run\n",
        "Line" : 128,
        "CharPositionInLine" : 70
      },
      "15" : {
        "Text" : "# build jar\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# force rebuild after CMake run\n",
        "Line" : 143,
        "CharPositionInLine" : 58
      },
      "17" : {
        "Text" : "# gradle build\n",
        "Line" : 152,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 18
    },
    "modules/java/common.cmake" : {
      "ObjectId" : "31f5528997c4ec3dec85ffc938a110fa860a54e0",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get list of modules to wrap\n\n# message(STATUS \"Wrapped in java:\")\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS \"\\t${m}\")\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "modules/java/generator/CMakeLists.txt" : {
      "ObjectId" : "b8ae34023be0f3e18ab72a253256dd888cbf8a2c",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# force re-run after CMake\n",
        "Line" : 9,
        "CharPositionInLine" : 59
      },
      "1" : {
        "Text" : "# This file is included from a subdirectory\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# list of remapped \".in\" files (configure_file)\n",
        "Line" : 15,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "#continue()  # since CMake 3.2+\n",
        "Line" : 22,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# common files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# list of OpenCV modules\n",
        "Line" : 42,
        "CharPositionInLine" : 25
      },
      "6" : {
        "Text" : "# \"${OPENCV_JAVA_SIGNATURES_FILE}\"\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# don't, result of file(WRITE): \"${CMAKE_CURRENT_BINARY_DIR}/gen_java.json\"\n",
        "Line" : 95,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# not allowed (file(WRITE) result): \"${CONFIG_FILE}\"\n",
        "Line" : 97,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 9
    },
    "modules/java/jar/CMakeLists.txt" : {
      "ObjectId" : "0e16e3b5ebd9ddd48a71edc801c867bc578cf3b4",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# required for add_custom_target() by ninja\n",
        "Line" : 33,
        "CharPositionInLine" : 21
      },
      "1" : {
        "Text" : "# set to the cache to make it global\n",
        "Line" : 62,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 2
    },
    "modules/java/jni/CMakeLists.txt" : {
      "ObjectId" : "2a50ee238eb72f6481ef5d81836c9be820f910aa",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# grab C++ files from misc/java\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# samples link to libopencv_java\n",
        "Line" : 24,
        "CharPositionInLine" : 21
      },
      "2" : {
        "Text" : "# Java is not able to load .so files\n",
        "Line" : 26,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : "# don't add dummy module to target_link_libraries list\n",
        "Line" : 42,
        "CharPositionInLine" : 56
      },
      "4" : {
        "Text" : "# Additional target properties\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for Mat <=> Bitmap converters\n",
        "Line" : 75,
        "CharPositionInLine" : 67
      },
      "6" : {
        "Text" : "# force strip library after the build command\n\n# because samples and tests will make a copy of the library before install\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "modules/java/test/android_test/CMakeLists.txt" : {
      "ObjectId" : "b6e727f50ffd49a05f04e017b1542197fec8033d",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 1. gather and copy common test files (resources, utils, etc.)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 2. gather and copy tests from each module\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 3. gather and copy specific files for Android\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# fix Android project\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# build java part\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# needed because ant does not update the timestamp of updated apk\n",
        "Line" : 57,
        "CharPositionInLine" : 89
      },
      "6" : {
        "Text" : "# put the final .apk to the OpenCV's bin folder\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "modules/java/test/pure_test/CMakeLists.txt" : {
      "ObjectId" : "82972fd1476c85a8b0fe5b3e50aabccc46425adc",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# 1. gather and copy common test files (resources, utils, etc.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 2. gather and copy tests from each module\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 3. gather and copy specific files for pure java\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Copy the OpenCV jar after it has been generated.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "modules/java/test/pure_test/build.xml" : {
      "ObjectId" : "7729b41b2b9f970e7679b99a7f47ad8db7d8dfdd",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "modules/js/CMakeLists.txt" : {
      "ObjectId" : "e97042aab15ea59fa24fa83322ed99149f328cdb",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for js support\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# should be enabled explicitly (by build_js.py script)\n",
        "Line" : 6,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "# get list of modules to wrap\n\n# message(STATUS \"Wrapped in js:\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(STATUS \"\\t${m}\")\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# header blacklist\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Conditional compilation\n",
        "Line" : 59,
        "CharPositionInLine" : 73
      },
      "6" : {
        "Text" : "#(not needed - generated by CMake) DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/headers.txt\n",
        "Line" : 77,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# add UMD wrapper\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# message(STATUS \"${opencv_test_js_bin_dir}\")\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# make sure the build directory exists\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# gather and copy specific files for js test\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# message(STATUS \"copy ${test_dir}/${f} ${opencv_test_js_bin_dir}/${f}\")\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# copy test data\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "modules/ml/CMakeLists.txt" : {
      "ObjectId" : "1b64cc4f17b6989c3d149ee3b51e7283facfb7cd",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/objdetect/CMakeLists.txt" : {
      "ObjectId" : "414e5780999a8e97c8b8df1db9f9617fffc6addd",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/photo/CMakeLists.txt" : {
      "ObjectId" : "15de722f158bad77849d23a8b0d2a4f53ac0cbe4",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/python/CMakeLists.txt" : {
      "ObjectId" : "616f500c95185c91a618044863c806752f1e179a",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for python support\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenCV build\n",
        "Line" : 4,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# standalone build\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "modules/python/bindings/CMakeLists.txt" : {
      "ObjectId" : "d96d7e88ffaac8c4fc766fbc8c71199023012561",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included from a subdirectory\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get list of modules to wrap\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(STATUS \"\\t${m}\")\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# header blacklist\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Conditional compilation\n",
        "Line" : 47,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : "# not a real build dependency (file(WRITE) result): ${CMAKE_CURRENT_BINARY_DIR}/headers.txt\n",
        "Line" : 69,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Up-to-date\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#\n\n# Configuration for standalone build of Python bindings\n\n#\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "modules/python/common.cmake" : {
      "ObjectId" : "830e4cbc45e95c005ab0045071f392ee5dfcc1f6",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included from a subdirectory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try to use dynamic symbols linking with libpython.so\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't add dummy module to target_link_libraries list\n",
        "Line" : 39,
        "CharPositionInLine" : 58
      },
      "3" : {
        "Text" : "# prevent name conflict for python2/3 outputs\n",
        "Line" : 63,
        "CharPositionInLine" : 57
      },
      "4" : {
        "Text" : "#unreferenced formal parameter\n\n#conditional expression is constant\n\n#unreferenced local function has been removed\n",
        "Line" : 82,
        "CharPositionInLine" : 52
      },
      "5" : {
        "Text" : "# accurate guard via #pragma doesn't work (C++ preprocessor doesn't handle #pragma)\n",
        "Line" : 95,
        "CharPositionInLine" : 14
      },
      "6" : {
        "Text" : "# CMake status\n",
        "Line" : 158,
        "CharPositionInLine" : 83
      },
      "7" : {
        "Text" : "# TODO: CMAKE_BUILD_TYPE is not defined\n",
        "Line" : 183,
        "CharPositionInLine" : 88
      },
      "8" : {
        "Text" : "# NOT OPENCV_SKIP_PYTHON_LOADER\n",
        "Line" : 197,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 9
    },
    "modules/python/python2/CMakeLists.txt" : {
      "ObjectId" : "37e20fe33074d260182536846214f201039d2b0c",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Buildbot requires Python 2 to be in root lib dir\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/python/python3/CMakeLists.txt" : {
      "ObjectId" : "da86ba5c5eaec7a63e9313492ef0642dbf594154",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/python/python_loader.cmake" : {
      "ObjectId" : "663be5c824d38199cfa62ea2e613e6ba4617a344",
      "LastModified" : "2019-02-26T14:34:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ignore \"standalone\" builds of Python bindings\n",
        "Line" : 41,
        "CharPositionInLine" : 22
      },
      "1" : {
        "Text" : "# TODO: CMAKE_BUILD_TYPE is not defined\n",
        "Line" : 44,
        "CharPositionInLine" : 85
      },
      "2" : {
        "Text" : "# install\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "modules/python/standalone.cmake" : {
      "ObjectId" : "1188a02eb91535659a69ee38209789a797d1f377",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate python target\n",
        "Line" : 59,
        "CharPositionInLine" : 51
      },
      "1" : {
        "Text" : "# done, cleanup\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# remove from cache\n",
        "Line" : 62,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 3
    },
    "modules/python/test/CMakeLists.txt" : {
      "ObjectId" : "eced4ecf7786466c3510ff5b189f2ac81ff8ee4a",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get list of modules to wrap\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS \"\\t${m}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#\n\n# TODO: Install rules (with test data?)\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "modules/stitching/CMakeLists.txt" : {
      "ObjectId" : "03d550fb81d5fc97908c6984f98402f64595f322",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/ts/CMakeLists.txt" : {
      "ObjectId" : "f95bed0793837df87d1bbb00f704c55a53e18c76",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# WINRT doesn't have access to environment variables\n\n# so adding corresponding macros during CMake run\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# generate config file\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "modules/video/CMakeLists.txt" : {
      "ObjectId" : "015c95ca96a11f5aefec585ccfd75100b24a2d1e",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videoio/CMakeLists.txt" : {
      "ObjectId" : "38d59c225cd90443c7d664ea1a6ae40461e26d40",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# support comma-separated list (,) too\n",
        "Line" : 6,
        "CharPositionInLine" : 70
      },
      "1" : {
        "Text" : "# Make virtual opencv_videoio_plugins target\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Removing WinRT API headers by default\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Dependencies used by the implementation referenced\n\n# below are not available on WinRT 8.0.\n\n# Enabling it for WiRT 8.1+ only.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# WinRT detected. Adding WinRT API header\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Adding WinRT internal sources and headers\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# copy FFmpeg dll to the output folder\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "modules/videoio/cmake/detect_android_mediandk.cmake" : {
      "ObjectId" : "edfb4bbbc5c32b0f94af7516747175862e28e323",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if(ANDROID AND ANDROID_NATIVE_API_LEVEL GREATER_EQUAL 21)  <-- would be nicer but requires CMake 3.7 or later\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/videoio/cmake/detect_aravis.cmake" : {
      "ObjectId" : "9994df8339471cd20ca2aa4e6bb843790197bf24",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- Aravis SDK ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# informational\n",
        "Line" : 24,
        "CharPositionInLine" : 78
      },
      "CommentCount" : 2
    },
    "modules/videoio/cmake/detect_avfoundation.cmake" : {
      "ObjectId" : "a341f587a199108178eb58245e2f485bb6642e4c",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videoio/cmake/detect_dc1394.cmake" : {
      "ObjectId" : "ab1296458117d2f492fe063e0d96f9ca33853f59",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- Dc1394 ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# informational\n",
        "Line" : 5,
        "CharPositionInLine" : 61
      },
      "2" : {
        "Text" : "# informational\n",
        "Line" : 23,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 3
    },
    "modules/videoio/cmake/detect_dshow.cmake" : {
      "ObjectId" : "3f41b3fd34e29007bac17aeca53b67121dad50c9",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- VideoInput/DirectShow ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/videoio/cmake/detect_ffmpeg.cmake" : {
      "ObjectId" : "ea1295d820bfe0cf0d98b85806ee8811891e3a0b",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- FFMPEG ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Required components: AVCODEC AVFORMAT AVUTIL SWSCALE\n",
        "Line" : 6,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : "# info\n",
        "Line" : 17,
        "CharPositionInLine" : 77
      },
      "3" : {
        "Text" : "# info\n",
        "Line" : 18,
        "CharPositionInLine" : 79
      },
      "4" : {
        "Text" : "# info\n",
        "Line" : 19,
        "CharPositionInLine" : 75
      },
      "5" : {
        "Text" : "# info\n",
        "Line" : 20,
        "CharPositionInLine" : 77
      },
      "6" : {
        "Text" : "# info\n",
        "Line" : 21,
        "CharPositionInLine" : 83
      },
      "7" : {
        "Text" : "# optional\n",
        "Line" : 29,
        "CharPositionInLine" : 62
      },
      "8" : {
        "Text" : "# rewrite libraries to absolute paths\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#==================================\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# message(FATAL_ERROR \"FFMPEG: test check build log:\\n${TRY_OUT}\")\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#==================================\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "modules/videoio/cmake/detect_gphoto.cmake" : {
      "ObjectId" : "3837bef92e6c74929b9f58432105d642ba637679",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- gPhoto2 ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/videoio/cmake/detect_gstreamer.cmake" : {
      "ObjectId" : "1d7abaf1f2fa1f742902351192ca1a16b9ccddfb",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- GStreamer ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# informational\n",
        "Line" : 67,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : "# informational\n",
        "Line" : 91,
        "CharPositionInLine" : 66
      },
      "CommentCount" : 3
    },
    "modules/videoio/cmake/detect_ios.cmake" : {
      "ObjectId" : "c75426060b0b19aed39eaea0e99f122e1a35bbaf",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videoio/cmake/detect_msdk.cmake" : {
      "ObjectId" : "79b0599f1ad5fae66ba4d873756465c9d294fbe9",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# list(APPEND MFX_LIBRARIES \"-Wl,--exclude-libs=libmfx\")\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "modules/videoio/cmake/detect_msmf.cmake" : {
      "ObjectId" : "a1c91dab670a89f19daa0b4b1590dfc78e378dcd",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- VideoInput/Microsoft Media Foundation ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/videoio/cmake/detect_openni2.cmake" : {
      "ObjectId" : "76c31454da81d5a9d91360ee5e3c786d6107c6cc",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- OpenNI2 ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# From SDK\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# From system\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# informational\n",
        "Line" : 45,
        "CharPositionInLine" : 77
      },
      "CommentCount" : 4
    },
    "modules/videoio/cmake/detect_pvapi.cmake" : {
      "ObjectId" : "a0f4673fdc1d641492d1d8f4c506423a0651b38e",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- PvApi ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/videoio/cmake/detect_realsense.cmake" : {
      "ObjectId" : "32e5e02c9e7b9fe7ba973fa1be65c2a241886b42",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- Intel librealsense ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# informational\n",
        "Line" : 7,
        "CharPositionInLine" : 67
      },
      "2" : {
        "Text" : "# informational\n",
        "Line" : 23,
        "CharPositionInLine" : 84
      },
      "CommentCount" : 3
    },
    "modules/videoio/cmake/detect_v4l.cmake" : {
      "ObjectId" : "05b73b003c4fd4afd4b29c7bb3c73a9ce3590863",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --- V4L ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for check_include_file\n",
        "Line" : 3,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 2
    },
    "modules/videoio/cmake/detect_ximea.cmake" : {
      "ObjectId" : "5e0521b599421454ff914fb14d90f819374ec96f",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videoio/cmake/detect_xine.cmake" : {
      "ObjectId" : "14d61a4b3fb05f0c0f2ff09777652db68136a45b",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videoio/cmake/init.cmake" : {
      "ObjectId" : "bbf57bc3b03dcb8516f508a7b7c2a0617dd0459c",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videoio/cmake/plugin.cmake" : {
      "ObjectId" : "b3e2d8ab5d343aa1ab7df250b4226fef8f885140",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================\n\n# build with OpenCV\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================\n\n# standalone build\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fixes for build\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Hack for Windows\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "modules/videoio/misc/plugin_ffmpeg/CMakeLists.txt" : {
      "ObjectId" : "347b4da28cb1dfb1e4517b357d6d5d03ae4eb034",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/videoio/misc/plugin_gstreamer/CMakeLists.txt" : {
      "ObjectId" : "b95424c33cb1917d415b301f30a9a23d83806150",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/world/CMakeLists.txt" : {
      "ObjectId" : "20edbd5733822282bf82f6deeb7a7a5dcc929674",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Propagate warnings settings\n",
        "Line" : 15,
        "CharPositionInLine" : 36
      },
      "1" : {
        "Text" : "#add_subdirectory(\"${OPENCV_MODULE_${m}_LOCATION}\" ${CMAKE_CURRENT_BINARY_DIR}/${m})\n",
        "Line" : 31,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "#message(STATUS \"${OPENCV_MODULE_${the_module}_HEADERS}\")\n\n#message(STATUS \"${OPENCV_MODULE_${the_module}_SOURCES}\")\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "platforms/android/android.toolchain.cmake" : {
      "ObjectId" : "b37dea01ae57079fba4327ef5dfaaab30a7c91b0",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2014, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  Neither the name of the copyright holder nor the names of its\n\n#     contributors may be used to endorse or promote products derived from this\n\n#     software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r10d\n\n#  Requires cmake 2.6.3 or newer (2.8.9 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (and newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - ARMv5TE based CPU with software floating point operations\n\n#        \"armeabi-v7a\" - ARMv7 based devices with hardware FPU instructions\n\n#            this ABI target is used by default\n\n#        \"armeabi-v7a-hard with NEON\" - ARMv7 based devices with hardware FPU instructions and hardfp\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16)\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP\n\n#        \"x86\" - IA-32 instruction set\n\n#        \"mips\" - MIPS32 instruction set\n\n#\n\n#      64-bit ABIs for NDK r10 and newer:\n\n#        \"arm64-v8a\" - ARMv8 AArch64 instruction set\n\n#        \"x86_64\" - Intel64 instruction set (r1)\n\n#        \"mips64\" - MIPS64 instruction set (r6)\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#      Note: building for \"android-L\" requires explicit configuration.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.9 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r10c the possible values are:\n\n#\n\n#        * aarch64-linux-android-4.9\n\n#        * aarch64-linux-android-clang3.4\n\n#        * aarch64-linux-android-clang3.5\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-4.8\n\n#        * arm-linux-androideabi-4.9 (default)\n\n#        * arm-linux-androideabi-clang3.4\n\n#        * arm-linux-androideabi-clang3.5\n\n#        * mips64el-linux-android-4.9\n\n#        * mips64el-linux-android-clang3.4\n\n#        * mips64el-linux-android-clang3.5\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-4.8\n\n#        * mipsel-linux-android-4.9\n\n#        * mipsel-linux-android-clang3.4\n\n#        * mipsel-linux-android-clang3.5\n\n#        * x86-4.6\n\n#        * x86-4.8\n\n#        * x86-4.9\n\n#        * x86-clang3.4\n\n#        * x86-clang3.5\n\n#        * x86_64-4.9\n\n#        * x86_64-clang3.4\n\n#        * x86_64-clang3.5\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"armeabi-v6 with VFP\"\n\n#      (is forced to be ON) ABI.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#        c++_static     -> Use the LLVM libc++ runtime as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        c++_shared     -> Use the LLVM libc++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or ARMEABI_V7A_HARD or X86 or MIPS or ARM64_V8A or X86_64 or MIPS64\n\n#    will be set true, mutually exclusive. NEON option will be set true\n\n#    if VFP is set to NEON.\n\n#\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable to suppress \"unused variable\" warning\n",
        "Line" : 200,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# inherit settings in recursive loads\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this one is important\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# this one not so much\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# rpath makes low sense for Android\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NDK search paths\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# known ABIs\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# API level defaults\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# detect current host platform\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 398,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 402,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 416,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# remember found paths\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# try to detect change\n",
        "Line" : 444,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# android NDK layout\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 483,
        "CharPositionInLine" : 71
      },
      "23" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 488,
        "CharPositionInLine" : 71
      },
      "24" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 492,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 499,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#message(\"machine: !${__machine}!\\narch: !${__arch}!\\nversion: !${__version}!\\ntoolchain: !${__toolchain}!\\n\")\n",
        "Line" : 580,
        "CharPositionInLine" : 3
      },
      "28" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 601,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 614,
        "CharPositionInLine" : 39
      },
      "31" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# choose target ABI\n",
        "Line" : 645,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# set target ABI options\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 703,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 739,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# choose toolchain\n",
        "Line" : 752,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# choose native API level\n",
        "Line" : 801,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# adjust API level\n",
        "Line" : 805,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# validate\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# remember target ABI\n",
        "Line" : 844,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 924,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 934,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 944,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# clang\n",
        "Line" : 979,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 1003,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# do nothing\n",
        "Line" : 1014,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# before r7\n",
        "Line" : 1024,
        "CharPositionInLine" : 42
      },
      "50" : {
        "Text" : "# before r8d\n",
        "Line" : 1032,
        "CharPositionInLine" : 46
      },
      "51" : {
        "Text" : "# before r7\n",
        "Line" : 1037,
        "CharPositionInLine" : 42
      },
      "52" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1049,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1074,
        "CharPositionInLine" : 1
      },
      "54" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1076,
        "CharPositionInLine" : 137
      },
      "55" : {
        "Text" : "# r7-r8\n",
        "Line" : 1078,
        "CharPositionInLine" : 110
      },
      "56" : {
        "Text" : "# before r7\n",
        "Line" : 1080,
        "CharPositionInLine" : 36
      },
      "57" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1100,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# ccache support\n",
        "Line" : 1109,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1122,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Use gcc-ar if we have it for better LTO support.\n",
        "Line" : 1146,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1170,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1197,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1213,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1219,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1234,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# NDK flags\n",
        "Line" : 1241,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1258,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1285,
        "CharPositionInLine" : 62
      },
      "69" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1292,
        "CharPositionInLine" : 72
      },
      "70" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1295,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1316,
        "CharPositionInLine" : 91
      },
      "72" : {
        "Text" : "# STL\n",
        "Line" : 1331,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# C objects:\n",
        "Line" : 1342,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1360,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# before r7\n",
        "Line" : 1361,
        "CharPositionInLine" : 40
      },
      "76" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1362,
        "CharPositionInLine" : 1
      },
      "77" : {
        "Text" : "# linker flags\n",
        "Line" : 1382,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1386,
        "CharPositionInLine" : 1
      },
      "79" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1397,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# after r8b\n",
        "Line" : 1418,
        "CharPositionInLine" : 48
      },
      "81" : {
        "Text" : "# version 4.6\n",
        "Line" : 1426,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# cache flags\n",
        "Line" : 1448,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1459,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# finish flags\n",
        "Line" : 1465,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# pie/pic\n",
        "Line" : 1482,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# configure rtti\n",
        "Line" : 1492,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# configure exceptions\n",
        "Line" : 1501,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1512,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# avoid CMP0015 policy warning\n",
        "Line" : 1514,
        "CharPositionInLine" : 111
      },
      "90" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1519,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# setup output directories\n",
        "Line" : 1556,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# copy shaed stl library to build directory\n",
        "Line" : 1573,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1585,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1589,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# NDK16+\n",
        "Line" : 1594,
        "CharPositionInLine" : 30
      },
      "96" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1598,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1639,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1657,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1675,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1712,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1714,
        "CharPositionInLine" : 1
      },
      "102" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1716,
        "CharPositionInLine" : 37
      },
      "103" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1720,
        "CharPositionInLine" : 1
      },
      "104" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a-hard with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14,15,16,17,18,19,21 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK : path to your NDK install\n\n#   NDK_CCACHE : path to your ccache executable\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   ARMEABI_V7A_HARD : TRUE for arm v7a with hardfp\n\n#   ARM64_V8A : TRUE for arm64-v8a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   X86_64 : TRUE if configured for x86_64\n\n#   MIPS : TRUE if configured for mips\n\n#   MIPS64 : TRUE if configured for mips64\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"armeabi-v7a-hard\", \"x86\", \"mips\", \"arm64-v8a\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : from r5 to r10d; set only for NDK\n\n#   ANDROID_NDK_RELEASE_NUM : numeric ANDROID_NDK_RELEASE version (1000*major+minor)\n\n#   ANDROID_ARCH_NAME : \"arm\", \"x86\", \"mips\", \"arm64\", \"x86_64\", \"mips64\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   ANDROID_SYSROOT_INCLUDE : paths to system include paths\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used (not Clang version)\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1725,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 105
    },
    "platforms/android/service/CMakeLists.txt" : {
      "ObjectId" : "66e0c468a9d19881254f2a3474a4559ee51b8a54",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/android/service/engine/CMakeLists.txt" : {
      "ObjectId" : "a31790a9031648ff7bb42d2522c14a26a7886a62",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/android/service/engine/build.xml" : {
      "ObjectId" : "98ddc3eac178619430fc6e4134c1c1fd1a716d5c",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "platforms/ios/cmake/Modules/Platform/iOS.cmake" : {
      "ObjectId" : "5e2bbc56720d16f372bbe78a3c542b1ee5512b87",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Darwin versions:\n\n#   6.x == Mac OSX 10.2\n\n#   7.x == Mac OSX 10.3\n\n#   8.x == Mac OSX 10.4\n\n#   9.x == Mac OSX 10.5\n\n#  10.x == Mac OSX 10.6 (Snow Leopard)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do not use the \"-Wl,-search_paths_first\" flag with the OSX 10.2 compiler.\n\n# Done this way because it is too early to do a TRY_COMPILE.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# More desirable, but does not work:\n\n#INCLUDE(CheckCXXCompilerFlag)\n\n#CHECK_CXX_COMPILER_FLAG(\"-Wl,-search_paths_first\" HAVE_FLAG_SEARCH_PATHS_FIRST)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Additional flags for dynamic framework\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Setup iOS developer location\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Find installed iOS SDKs\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Find and use the most recent iOS sdk\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# set the architecture for iOS - this env var sets armv6,armv7 and appears to be XCode's standard. The other found is ARCHS_UNIVERSAL_IPHONE_OS but that is armv7 only\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Set the default based on this file and not the environment variable\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Enable shared library versioning.  This flag is not actually referenced\n\n# but the fact that the setting exists will cause the generators to support\n\n# soname computation.\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Xcode does not support -isystem yet.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Need to list dependent shared libraries on link line.  When building\n\n# with -isysroot (for universal binaries), the linker always looks for\n\n# dependent libraries under the sysroot.  Listing them on the link\n\n# line works around the problem.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add the install directory of the running cmake to the search directories\n\n# CMAKE_ROOT is CMAKE_INSTALL_PREFIX/share/cmake, so we need to go two levels up\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# List common installation prefixes.  These will be used for all search types\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Standard\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# CMake install location\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Project install destination.\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 23
    },
    "platforms/ios/cmake/Toolchains/Toolchain-iPhoneOS_Xcode.cmake" : {
      "ObjectId" : "ec8d4fadfbc573dd95f6552f09fdd3db692423f9",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/ios/cmake/Toolchains/Toolchain-iPhoneSimulator_Xcode.cmake" : {
      "ObjectId" : "4eb212d3753092ac8058cedc7669cc5abb1d9333",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/ios/cmake/Toolchains/common-ios-toolchain.cmake" : {
      "ObjectId" : "4da7d795425b357d34aa524057183cd5dd641c02",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# load settings in case of \"try compile\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Hack for \"try_compile\" commands with other binary directory\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# nothing\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# nothing\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#message(\"Update TOOLCHAIN config: ${__config}\")\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# IN_TRY_COMPILE\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# empty since CMake 3.10\n",
        "Line" : 104,
        "CharPositionInLine" : 40
      },
      "7" : {
        "Text" : "# Standard settings\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Apple Framework settings\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include extra modules for the iOS platform files\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Force the compilers to clang for iOS\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#CMAKE_FORCE_C_COMPILER (clang GNU)\n\n#CMAKE_FORCE_CXX_COMPILER (clang++ GNU)\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Search for programs in the build host directories\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#   for libraries and headers in the target directories\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "platforms/linux/aarch64-gnu.toolchain.cmake" : {
      "ObjectId" : "ae16337ce7a1b9dd3868530d7d05cd4e6330759c",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/linux/arm-gnueabi.toolchain.cmake" : {
      "ObjectId" : "90217f005dfee87a73ba14434aab972d4e6b21d6",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/linux/arm.toolchain.cmake" : {
      "ObjectId" : "184997fba5c8308a7db7c64a6a9cae3ef892412c",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prevent recursive call\n",
        "Line" : 2,
        "CharPositionInLine" : 11
      },
      "1" : {
        "Text" : "#message(\"CMAKE_SYSTEM_PROCESSOR=${CMAKE_SYSTEM_PROCESSOR}\")\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#message(WARNING \"CMAKE_C_COMPILER=${CMAKE_C_COMPILER} is defined\")\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#message(WARNING \"CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} is defined\")\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#message(WARNING \"CMAKE_LINKER=${CMAKE_LINKER} is defined\")\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#message(WARNING \"CMAKE_AR=${CMAKE_AR} is defined\")\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#message(WARNING \"CMAKE_CXX_FLAGS='${CMAKE_CXX_FLAGS}' is defined\")\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "platforms/linux/gnu.toolchain.cmake" : {
      "ObjectId" : "cba08e7fbbf4ecb605dda63baebd6237e0bf1ab6",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# load settings in case of \"try compile\"\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMAKE_BINARY_DIR is different\n",
        "Line" : 7,
        "CharPositionInLine" : 76
      },
      "2" : {
        "Text" : "# nothing\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# nothing\n",
        "Line" : 47,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#message(\"Update TOOLCHAIN config: ${__config}\")\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# IN_TRY_COMPILE\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "platforms/linux/ppc64-gnu.toolchain.cmake" : {
      "ObjectId" : "f6177c4f50c5944c6a202d881ff08897ec37ff82",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/linux/ppc64le-gnu.toolchain.cmake" : {
      "ObjectId" : "2266c345c898f0c508d0276f4168a09ff2b3b12f",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "platforms/linux/ppcat.toolchain.cmake" : {
      "ObjectId" : "86ece6b6e42b531d2c9616251410776fe2852d75",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prevent recursive call\n",
        "Line" : 2,
        "CharPositionInLine" : 11
      },
      "1" : {
        "Text" : "#get 64-bit dynamic linker path\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#RTLDLIST must contains 32 and 64 bit paths\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# what about ld.gold?\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "platforms/maven/opencv-it/pom.xml" : {
      "ObjectId" : "35f89df19b3ca874699fa2127da9486a2e7345d4",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "platforms/maven/opencv/pom.xml" : {
      "ObjectId" : "9c094067903faf5977d10181b5f9080971584dc3",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Optional packages should be placed BEFORE required ones\n                              in the following argument list. ",
        "Line" : 69,
        "CharPositionInLine" : 66
      },
      "CommentCount" : 1
    },
    "platforms/maven/pom.xml" : {
      "ObjectId" : "ad9d9c04ae1428d41edbc1b446249abead3b6d5a",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "samples/CMakeLists.txt" : {
      "ObjectId" : "15aff36c39fe5ff37a82e6b9d16ea361632785d9",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Utility function: adds sample executable target with name \"example_<group>_<file_name>\"\n\n# Usage:\n\n#   ocv_define_sample(<output target> <relative filename> <group>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add single target to build all samples in the group: 'make opencv_samples_cpp'\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#===================================================================================================\n\n#\n\n# Build as part of OpenCV\n\n#\n\n#===================================================================================================\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#===================================================================================================\n\n#\n\n#  Standalone mode\n\n#\n\n#===================================================================================================\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable C++11\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Assuming following installation folder structure (default for UNIX):\n\n# <install_root>/share/\n\n# └── OpenCV/  <-- OPENCV_CONFIG_INSTALL_PATH\n\n#     ├── OpenCVConfig.cmake  <-- file to be found by find_package\n\n#     ├── ...\n\n#     ├── samples/  <-- OPENCV_SAMPLES_SRC_INSTALL_PATH\n\n#     │   ├── CMakeLists.txt  <-- this file\n\n#     │   ├── cpp/\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# not used in this branch\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Avoid C-like legacy API\n",
        "Line" : 130,
        "CharPositionInLine" : 54
      },
      "8" : {
        "Text" : "# add_subdirectory(gpu)\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add_subdirectory(opengl)\n\n# add_subdirectory(openvx)\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add_subdirectory(va_intel)\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "samples/android/15-puzzle/CMakeLists.txt" : {
      "ObjectId" : "90a997f54144a2be119e455ded14ae422d31c985",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/CMakeLists.txt" : {
      "ObjectId" : "360f1aa2cb0a495ae804130f0681c0ad58a80cd4",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for Android samples. See root CMakeLists.txt\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/android/camera-calibration/CMakeLists.txt" : {
      "ObjectId" : "81483c6cc697b337c7b791612066a090bc7d8e0a",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/color-blob-detection/CMakeLists.txt" : {
      "ObjectId" : "3f59043104862a390ecce0085efa780d480f5172",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/face-detection/CMakeLists.txt" : {
      "ObjectId" : "bbcfa32f0830abed03f95fee63827bb01ba8bb49",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/face-detection/jni/CMakeLists.txt" : {
      "ObjectId" : "d395999ce0209b925f774afbe520a2f9c6afdd76",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable C++11\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/android/image-manipulations/CMakeLists.txt" : {
      "ObjectId" : "bbb4cbc85d646841aa09c016cbd7d0e54eb21a87",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/mobilenet-objdetect/CMakeLists.txt" : {
      "ObjectId" : "4e41ebfb28f42e30b00ad2e7f2fb780fdbf19649",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/tutorial-1-camerapreview/CMakeLists.txt" : {
      "ObjectId" : "8f8c25ae758a851677695dda56cf1ab5cde0eec2",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/tutorial-2-mixedprocessing/CMakeLists.txt" : {
      "ObjectId" : "c254dd8f9a7a879e6f552bd6598fb9a15bf99b9b",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/tutorial-2-mixedprocessing/jni/CMakeLists.txt" : {
      "ObjectId" : "2219121fde63b374f7ba9513d51fd9ef5a5f4171",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable C++11\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/android/tutorial-3-cameracontrol/CMakeLists.txt" : {
      "ObjectId" : "69100a61a250d45de2e1e9ca8357fa066b590ffb",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/tutorial-4-opencl/CMakeLists.txt" : {
      "ObjectId" : "94e955fe362add9357abc89613a4e6e8b217552a",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/android/tutorial-4-opencl/jni/CMakeLists.txt" : {
      "ObjectId" : "6b3f3a0940750c4bb529b4e004a89b3c77ade138",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable C++11\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/cpp/CMakeLists.txt" : {
      "ObjectId" : "71fe897527d17f7ff4aac691fbdab57eb647af94",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/cpp/example_cmake/CMakeLists.txt" : {
      "ObjectId" : "3a31cb87decc7c004b36bb952d89f7525b7cc76d",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake needs this line\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable C++11\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define project name\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find OpenCV, you may need to set OpenCV_DIR variable\n\n# to the absolute path to the directory containing OpenCVConfig.cmake file\n\n# via the command line or GUI\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If the package has been found, several variables will\n\n# be set, you can find the full list with descriptions\n\n# in the OpenCVConfig.cmake file.\n\n# Print some message showing some of them\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Declare the executable target built from your sources\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link your application with OpenCV libraries\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "samples/cpp/example_cmake/Makefile" : {
      "ObjectId" : "f72911571f3bffa80d2e32d88e2f8b28c2c4cf83",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "samples/cpp/tutorial_code/calib3d/real_time_pose_estimation/CMakeLists.txt" : {
      "ObjectId" : "b0ca6c0ff04a079f2bdd558b3c0fd0524925c7f6",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/cpp/tutorial_code/gpu/gpu-thrust-interop/CMakeLists.txt" : {
      "ObjectId" : "037d508569b3fd2f462d9dc705a3854351b4002e",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/directx/CMakeLists.txt" : {
      "ObjectId" : "391ea91af0b30422745edeefbead971b8f46a818",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/dnn/CMakeLists.txt" : {
      "ObjectId" : "4af6d40928ef961f0a920a1c35eb59be2113dcfb",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/gpu/CMakeLists.txt" : {
      "ObjectId" : "96fe897af313af3e8495251030df4f889cfa1305",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/hal/c_hal/CMakeLists.txt" : {
      "ObjectId" : "8502779e8438f5c8f55152853b9a60b65d9958ab",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/hal/c_hal/config.cmake" : {
      "ObjectId" : "d57b7efd11c9fdc065fb9e5337a0963c9ed66513",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/hal/slow_hal/CMakeLists.txt" : {
      "ObjectId" : "d42fb0b6fdab75fe6b480b5c7edb948c19cddfae",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/hal/slow_hal/config.cmake" : {
      "ObjectId" : "d57b7efd11c9fdc065fb9e5337a0963c9ed66513",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/java/ant/build.xml" : {
      "ObjectId" : "d817aa63ddeab50d51cfb0e2f342461b3af39ebd",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "samples/java/tutorial_code/CMakeLists.txt" : {
      "ObjectId" : "31424f956b7db735c7884289bf7c694e21e11e58",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n#  CMake file for Java tutorials compilation.\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/java/tutorial_code/build.xml" : {
      "ObjectId" : "4bba3c97f690b586ef0a46b23888fbff3a8008b5",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "samples/opencl/CMakeLists.txt" : {
      "ObjectId" : "a614bbe9ee3fd8294886819a9c996c9321b02770",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake 3.1 needed for find_package(OpenCL)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/opengl/CMakeLists.txt" : {
      "ObjectId" : "31a075c0cf88cd27f85e7ddac9c3420e9a729ad2",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/openvx/CMakeLists.txt" : {
      "ObjectId" : "fd9165bec9ac723dd062a345d9095f0111dff8bf",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/python/CMakeLists.txt" : {
      "ObjectId" : "31c2bd1893f7b2b9466aa1c506a782841131de27",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/tapi/CMakeLists.txt" : {
      "ObjectId" : "ba0ac69f9dc552113f9bdd8188efe940a3ef5335",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/va_intel/CMakeLists.txt" : {
      "ObjectId" : "04f2ea5fd4028902d7867945e1bf0244bfe9b890",
      "LastModified" : "2019-04-13T20:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 201,
    "MAKEFILE" : 1,
    "ANT" : 4,
    "MAVEN" : 3
  },
  "ElapsedTime" : 2197
}