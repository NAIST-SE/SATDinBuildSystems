{
  "Repository" : "9173392",
  "Revision" : "HEAD",
  "ObjectId" : "8971c4d3c9d7a806cb057ee907e81e3ece46879e",
  "CommitTime" : "2014-11-03T20:19:53Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "4a4068928048dd30268df415522cd48331b1cf67",
      "LastModified" : "2014-07-18T18:41:56Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Apps get installed on 'make install'\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Mark the root of the package repository\n",
        "Line" : 44,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "third_party/linenoise/Makefile" : {
      "ObjectId" : "a285410678fb0ee8773cab2eff4fa97531de9714",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "third_party/mongoose/Makefile" : {
      "ObjectId" : "490199dd1147d44944bbd67b8bb583f94268c727",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This file is part of Mongoose project, http://code.google.com/p/mongoose\n\n# $Id: Makefile 473 2009-09-02 11:20:06Z valenok $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Possible COPT values: (in brackets are rough numbers for 'gcc -O2' on i386)\n\n# -DHAVE_MD5\t\t- use system md5 library (-2kb)\n\n# -DNDEBUG\t\t- strip off all debug code (-5kb)\n\n# -DDEBUG\t\t- build debug version (very noisy) (+7kb)\n\n# -DNO_CGI\t\t- disable CGI support (-5kb)\n\n# -DNO_SSL\t\t- disable SSL functionality (-2kb)\n\n# -DCONFIG_FILE=\\\"file\\\" - use `file' as the default config file\n\n# -DHAVE_STRTOUI64\t- use system strtoui64() function for strtoull()\n\n# -DSSL_LIB=\\\"libssl.so.<version>\\\" - use system versioned SSL shared object\n\n# -DCRYPTO_LIB=\\\"libcrypto.so.<version>\\\" - use system versioned CRYPTO so\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n###                 UNIX build: linux, bsd, mac, rtems\n\n##########################################################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that the compiler flags come last in the compilation string.\n\n# If not so, this can break some on some Linux distros which use\n\n# \"-Wl,--as-needed\" turned on by default  in cc command.\n\n# Also, this is turned in many other distros in static linkage builds.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########################################################################\n\n###            WINDOWS build: Using Visual Studio or Mingw\n\n##########################################################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Using Visual Studio 6.0. To build Mongoose:\n\n#  o  Set VC variable below to where VS 6.0 is installed on your system\n\n#  o  Run \"PATH_TO_VC6\\bin\\nmake windows\"\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#DBG=\t/Zi /DDEBUG /Od\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build for Windows under MinGW\n\n#MINGWDBG= -DDEBUG -O0\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#MINGWOPT= -W -Wall -mthreads -Wl,--subsystem,console $(MINGWDBG) -DHAVE_STDINT\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##########################################################################\n\n###            Manuals, cleanup, test, release\n\n##########################################################################\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# \"TEST=unit make test\" - perform unit test only\n\n# \"TEST=embedded\" - test embedded API by building and testing test/embed.c\n\n# \"TEST=basic_tests\" - perform basic tests only (no CGI, SSI..)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11,
      "Errorlog" : "line 66:42 token recognition error at: '\\l'\nline 69:19 token recognition error at: '\\c'\nline 69:29 token recognition error at: '\\i'\nline 69:47 token recognition error at: '\\i'\nline 104:45 token recognition error at: '\\d'\nline 135:31 token recognition error at: '\\s'\nline 135:50 token recognition error at: '\\s'\nline 135:53 token recognition error at: '\"(\\S'\nline 135:59 token recognition error at: '\"/ and print $$1' mongoose.c`.tgz ; cd .. && tar --exclude \\*.hg --exclude \\*.svn --exclude \\*.swp --exclude \\*.nfs\\* -czf x mongoose && mv x mongoose/$$F\\n\\nclean:\\n\\trm -rf *.o *.core $(PROG) *.obj *.so $(PROG).txt *.dSYM *.tgz\\n\u0000'\n"
    },
    "third_party/websocketpp/CMakeLists.txt" : {
      "ObjectId" : "78a8beef1aa7d3b958eb6588fce441c0fef276c2",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############ Setup project and cmake\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project name\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Minimum cmake requirement. We should require a quite recent\n\n# cmake for the dependency find macros etc. to be up to date.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make relative paths absolute (needed later on)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set CMake library search policy\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Disable unnecessary build types\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include our cmake macros\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############ Paths\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# CMake install step prefix. I assume linux users want the prefix to\n\n# be the default /usr or /usr/local so this is only adjusted on Windows.\n\n# - Windows: Build the INSTALL project in your solution file.\n\n# - Linux/OSX: make install.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "############  Build customization\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Override from command line \"CMake -D<OPTION>=TRUE/FALSE/0/1/ON/OFF\"\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "############ Compiler specific setup\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# VC9 and C++11 reasoning\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Detect clang. Not officially reported by cmake.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# C++11 defines\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Visual studio\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# g++\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# todo: should we use CMAKE_C_FLAGS for these?\n",
        "Line" : 111,
        "CharPositionInLine" : 58
      },
      "18" : {
        "Text" : "# Try to detect version. Note: Not tested!\n",
        "Line" : 114,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# clang\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# todo: is libc++ really needed here?\n",
        "Line" : 131,
        "CharPositionInLine" : 77
      },
      "21" : {
        "Text" : "# todo: should we use CMAKE_C_FLAGS for these?\n",
        "Line" : 133,
        "CharPositionInLine" : 57
      },
      "22" : {
        "Text" : "# OSX, can override above.\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "############ Dependencies\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Set BOOST_ROOT env variable or pass with cmake -DBOOST_ROOT=path.\n\n# BOOST_ROOT can also be defined by a previous run from cmake cache.\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Scons documentation for BOOST_ROOT_CPP11:\n\n# \"look for optional second boostroot compiled with clang's libc++ STL library\n\n# this prevents warnings/errors when linking code built with two different\n\n# incompatible STL libraries.\"\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Cache BOOST_ROOT for runs that do not define $ENV{BOOST_ROOT}.\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# todo: someone who knows better spesify these!\n",
        "Line" : 180,
        "CharPositionInLine" : 99
      },
      "28" : {
        "Text" : "# Boost is a project wide global dependency.\n",
        "Line" : 185,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# Pretty print status\n",
        "Line" : 189,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "############ Add projects\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Add main library\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Add examples\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Add tests\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Install the websocketpp-config.cmake and websocketpp-configVersion.cmake\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "third_party/websocketpp/cmake/CMakeHelpers.cmake" : {
      "ObjectId" : "0a23905e8921f7c9fd995a6ad59f5b741c18d2eb",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Print build configuration\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adds the given folder_name into the source files of the current project. \n\n# Use this macro when your module contains .cpp and .h files in several subdirectories.\n\n# Your sources variable needs to be WSPP_SOURCE_FILES and headers variable WSPP_HEADER_FILES.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Initialize target.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include our own module path. This makes #include \"x.h\" \n\n# work in project subfolders to include the main directory headers.\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Build executable for executables\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Finalize target for all types\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# install headers, directly from current source dir and look for subfolders with headers\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "third_party/websocketpp/examples/CMakeLists.txt" : {
      "ObjectId" : "cb746662a6b32e5a0a757349829fc8325204ca3b",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/debug_server/CMakeLists.txt" : {
      "ObjectId" : "02f6dcf720a7dc1c772c67794934658a3db2d9e9",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/echo_server/CMakeLists.txt" : {
      "ObjectId" : "a82dfa792a71b52ddddc03da17c35e8b6975c45b",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/echo_server_both/CMakeLists.txt" : {
      "ObjectId" : "1bb194db277884686ee98f22ec9af48bc3f9e703",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/echo_server_tls/CMakeLists.txt" : {
      "ObjectId" : "b87cbb1f00daa84a1f7a2b22435565882cd5ec16",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/print_server/CMakeLists.txt" : {
      "ObjectId" : "dc34879b64aa9ec8e4b4a62d11942f0bce26aa54",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/sip_client/CMakeLists.txt" : {
      "ObjectId" : "65a90b01cbfc627a251b75e1c9c66b129ca4519f",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/telemetry_client/CMakeLists.txt" : {
      "ObjectId" : "5cf4964e9436394f0320d370df290cbfe33f3f73",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/testee_client/CMakeLists.txt" : {
      "ObjectId" : "a6ca6dd35f29e7706f0b5e0e619c479fad212680",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/examples/utility_client/CMakeLists.txt" : {
      "ObjectId" : "865a4c783dcdbe43c1cdf5e7ed0ea94443351b62",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third_party/websocketpp/websocketpp/CMakeLists.txt" : {
      "ObjectId" : "3ea8cc1c4e66a8bf34278d90c941f3f6cd06c2b0",
      "LastModified" : "2014-08-14T20:12:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 1784
}