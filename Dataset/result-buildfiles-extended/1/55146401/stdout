{
  "Repository" : "55146401",
  "Revision" : "HEAD",
  "ObjectId" : "08f5c05d60ab81d20d12ba27289bb73ae679526e",
  "CommitTime" : "2019-04-19T03:00:47Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f6a20cd88cd188096d55f1386dc9324abc723edd",
      "LastModified" : "2019-04-03T15:24:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmake_policy(SET CMP0022 NEW)\n\n#cmake_policy(SET CMP0023 NEW)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use compiler ID \"AppleClang\" instead of \"Clang\" for XCode.\n\n# Not setting this sometimes makes XCode C compiler gets detected as \"Clang\",\n\n# even when the C++ one is detected as \"AppleClang\".\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Project and semantic versioning.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# One variable that determines whether the current cmake process is being run\n\n# with the main Caffe2 library. This is useful for building modules - if\n\n# modules are built with the main Caffe2 library then one does not need to do\n\n# find caffe2 in the cmake script. One can usually guard it in some way like\n\n#    if (NOT CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO)\n\n#      find_package(Caffe2 REQUIRED)\n\n#    endif()\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Apple specific\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These lines are an attempt to make find_package(cuda) pick up\n\n# libcuda.dylib, and not cuda.framework.  It doesn't work all\n\n# the time, but it seems to help for some users.\n\n# TODO: replace this with a more robust fix\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Get clang version on macOS\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# RPATH stuff\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ---[ Options.\n\n# Note to developers: if you add an option below, make sure you also add it to\n\n# cmake/Summary.cmake so that the summary prints out the option values.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Used when building Caffe2 through setup.py\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# /Z7 override option\n\n# When generating debug symbols, CMake default to use the flag /Zi.\n\n# However, it is not compatible with sccache. So we rewrite it off.\n\n# But some users don't use sccache; this override is for them.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For MSVC,\n\n# 1. Replace /Zi and /ZI with /Z7\n\n# 2. Switch off incremental linking in debug builds\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ Utils\n\n# TODO: merge the following 3 files into cmake/public/utils.cmake.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ Version numbers for generated libraries\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# An empty string was specified so force version to the default\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ---[ CMake scripts + modules\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ CMake build directories\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ---[ Build variables set within the cmake tree\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set default build type\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ---[ Misc checks to cope with various compiler modes\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# External projects\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ---[ Dependencies\n\n# ---[ FBGEMM doesn't work on x86 32bit and CMAKE_SYSTEM_PROCESSOR thinks its 64bit\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ---[ Whitelist file if whitelist is specified\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ---[ Set link flag, handle additional deps for gcc 4.8 and above\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# ---[ Build flags\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Eigen fails to build with some versions, so convert this to a warning\n\n# Details at http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1459\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# These flags are not available in GCC-4.8.5. Set only when using clang.\n\n# Compared against https://gcc.gnu.org/onlinedocs/gcc-4.8.5/gcc/Option-Summary.html\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# /bigobj increases number of sections in .obj file, which is needed to link\n\n# against libaries in Python 2.7 under Windows\n",
        "Line" : 325,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Prefix path to Caffe2 headers.\n\n# If a directory containing installed Caffe2 headers was inadvertently\n\n# added to the list of include directories, prefixing\n\n# PROJECT_SOURCE_DIR means this source tree always takes precedence.\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Prefix path to generated Caffe2 headers.\n\n# These need to take precedence over their empty counterparts located\n\n# in PROJECT_SOURCE_DIR.\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# ---[ Main build\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# --[ Documentation\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# check if Doxygen is installed\n",
        "Line" : 382,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# ---[ CMake related files\n\n# Uninistall option.\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ---[ Make configuration files for cmake to allow dependent libraries\n\n# easier access to Caffe2.\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# TODO: check if we should include other cuda dependency libraries\n\n# to the interface as well.\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Note(jiayq): when building static libraries, all PRIVATE dependencies\n\n# will also become interface libraries, and as a result if there are any\n\n# dependency libraries that are not exported, the following install export\n\n# script will fail. As a result, we will only provide the targets cmake\n\n# files for shared lib installation. For more info, read:\n\n# https://cmake.org/pipermail/cmake/2016-May/063400.html\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ---[ Modules\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ---[ Binaries\n\n# Binaries will be built after the Caffe2 main libraries and the modules\n\n# are built. For the binaries, they will be linked to the Caffe2 main\n\n# libraries, as well as all the modules that are built with Caffe2 (the ones\n\n# built in the previous Modules section above).\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "Makefile" : {
      "ObjectId" : "13755ce544c6e003392a6ac7b70e56aed3c2aec6",
      "LastModified" : "2017-04-25T00:17:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This makefile does nothing but delegating the actual building to cmake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This will remove ALL build folders.\n",
        "Line" : 15,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 2
    },
    "aten/CMakeLists.txt" : {
      "ObjectId" : "88af4e5351fbbb70f064f8c8e961a2df2d3ea8f8",
      "LastModified" : "2019-01-30T01:29:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find modules\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the HIP package, set the HIP paths, load the HIP CMake.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we want to respect the standard, and we are bored of those **** .\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO: AT_HIP_ENABLED (change this once we represent HIP as HIP in\n\n# ATen proper)\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# we still parse THCUNN even if cuda is disabled to make sure to\n\n# install it\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Pass source, includes, and libs to parent\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "aten/src/ATen/CMakeLists.txt" : {
      "ObjectId" : "347e2c0b3560e0dbbc946245e520f0ae2c88bdaf",
      "LastModified" : "2019-04-11T15:47:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Can be compiled standalone\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this flag is used in Config but set externally, we must normalize it\n\n# to 0/1 otherwise `#if ON` will be evaluated to false.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Don't unconditionally generate CUDAConfig.h.in.  Unfortuantely,\n\n# this file generates AT_ROCM_ENABLED() which is required by the miopen\n\n# files, which are compiled even if we are doing a vanilla CUDA build.\n\n# Once we properly split CUDA and HIP in ATen, we can remove this code.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NB: If you edit these globs, you'll have to update setup.py package_data as well\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Codegen separate files for HIP and use those (s/cuda_generated_cpp/hip_generated_cpp)\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# TODO: When we have hip_generated_cpp\n\n#filter_list(hip_generated_h hip_generated_cpp \"\\\\.h$\")\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# so the build can find the generated header files\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Although Lapack provides CPU (and thus, one might expect that ATen_cuda\n\n# would not need this at all), some of our libraries (magma in particular)\n\n# backend to CPU BLAS/LAPACK implementations, and so it is very important\n\n# we get the *right* implementation, because even if the symbols are the\n\n# same, LAPACK implementions may have different calling conventions.\n\n# This caused https://github.com/pytorch/pytorch/issues/7353\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# It's not altogether clear that HIP behaves the same way, but it\n\n# seems safer to assume that it needs it too\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# https://github.com/libgit2/libgit2/issues/2128#issuecomment-35649830\n",
        "Line" : 163,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# cpuinfo is added below\n",
        "Line" : 199,
        "CharPositionInLine" : 59
      },
      "12" : {
        "Text" : "# Preserve values for the main build\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Unset our restrictive C++ flags here and reset them later.\n\n# Remove this once we use proper target_compile_options.\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Bump up optimization level for sleef to -O1, since at -O0 the compiler\n\n# excessively spills intermediate vector registers to the stack\n\n# and makes things run impossibly slowly\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set these back. TODO: Use SLEEF_ to pass these instead\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# CuFFT has a complicated static story (especially around CUDA < 9) because it has device callback support\n\n# we first have to build a fake lib that links with no device callbacks,\n\n# and then we link against this object file.\n\n# This was recommended by the CuFFT team at NVIDIA\n",
        "Line" : 248,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# build fake CuFFT lib in build dir\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# NB: We're relying on cmake/Dependencies.cmake to appropriately setup HIP dependencies.\n\n# In principle we could duplicate them, but handling the rocblas\n\n# dependency is nontrivial.  So better not to copy-paste.\n\n# Look for Note [rocblas cmake bug]\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Include CPU paths for CUDA/HIP as well\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# We have two libraries: libATen_cpu.so and libATen_cuda.so,\n\n# with libATen_cuda.so depending on libATen_cpu.so.  The CPU library\n\n# contains CPU code only.  libATen_cpu.so is invariant to the setting\n\n# of USE_CUDA (it always builds the same way); libATen_cuda.so is only\n\n# built when USE_CUDA=1 and CUDA is available.  (libATen_hip.so works\n\n# the same way as libATen_cuda.so)\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Source code can't be added to an interface library, so it is\n\n# passed back to be compiled into the containing library\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Set standard properties on the target\n",
        "Line" : 349,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Make sure these don't get built by parent\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Source code can't be added to an interface library, so it is\n\n# passed back to be compiled into the containing library\n",
        "Line" : 359,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Source code can't be added to an interface library, so it is\n\n# passed back to be compiled into the containing library\n",
        "Line" : 371,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# NB: Instead of adding it to this list, we add it by hand\n\n# to caffe2_hip, because it needs to be a PRIVATE dependency\n\n# list(APPEND ATen_HIP_DEPENDENCY_LIBS ATEN_CUDA_FILES_GEN_LIB)\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# https://stackoverflow.com/questions/11096471/how-can-i-install-a-hierarchy-of-files-using-cmake\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# TODO: Install hip_generated_h when we have it\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# NB: Assumed to be flat\n",
        "Line" : 425,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Pass source, includes, and libs to parent\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "aten/src/ATen/core/CMakeLists.txt" : {
      "ObjectId" : "0f5d86f2db1d17768ec17561ccf588a70cc384a6",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file solely exists to let Caffe2 Android build get at the list\n\n# of core files without having to trundle through all of ATen's CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add files needed from jit folders\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pass to parent\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is a little dodgy, because it means ALL ATen headers are made\n\n# visible.  Fortunately, you should just get a lot of undefined symbol\n\n# errors if you go outside core\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "aten/src/ATen/quantized/CMakeLists.txt" : {
      "ObjectId" : "162091972af39e6e720c8e768b550720e1590377",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pass to parent\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "aten/src/ATen/test/CMakeLists.txt" : {
      "ObjectId" : "20b643c521e451a491822b6185ae3fe1900a1900",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "aten/src/ATen/test/test_install/CMakeLists.txt" : {
      "ObjectId" : "a64c2cc25b5c20c9294ef9ad939ba93c03347d10",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++11\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "aten/src/TH/CMakeLists.txt" : {
      "ObjectId" : "823f3ba472a9ca5b0897e0f9225a407541d79f00",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# IF AVX FOUND\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remember that PARENT_SCOPE variables are not in the current scope\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# See Note [TH abstraction violation]\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "aten/src/THC/CMakeLists.txt" : {
      "ObjectId" : "56e759d5960db50b872d49a02e3356b9730adb9f",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# loop over all types\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# loop over files which need to be split between types (because of long compile times)\n",
        "Line" : 11,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# See Note [TH abstraction violation]\n",
        "Line" : 110,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 3
    },
    "aten/src/THCUNN/CMakeLists.txt" : {
      "ObjectId" : "a7222f531356a6df01fdf94c5efdb92142b22a1f",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "aten/src/THNN/CMakeLists.txt" : {
      "ObjectId" : "ab4bb755071cc2d75614cae8d4a034e5717edb10",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "binaries/CMakeLists.txt" : {
      "ObjectId" : "81320d21fb4c9e7da1c7c61fdd1013b20e727bcb",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Core overhead benchmark\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Core overhead benchmark\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ---[ tutorials\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "c10/CMakeLists.txt" : {
      "ObjectId" : "4ae588ed5e8ac4d7c5dc455c395356d53a98f40d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main build file for the C10 library.\n\n#\n\n# Note that the C10 library should maintain minimal dependencies - especially,\n\n# it should not depend on any library that is implementation specific or\n\n# backend specific. It should in particular NOT be dependent on any generated\n\n# protobuf header files, because protobuf header files will transitively force\n\n# one to link against a specific protobuf version.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Configure macro file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# used in cmake_macros.h.in\n",
        "Line" : 16,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# used in cmake_macros.h.in\n",
        "Line" : 17,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "# used in cmake_macros.h.in\n",
        "Line" : 18,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : "# used in cmake_macros.h.in\n",
        "Line" : 20,
        "CharPositionInLine" : 45
      },
      "6" : {
        "Text" : "# Note: if you want to add ANY dependency to the c10 library, make sure you\n\n# check with the core PyTorch developers as the dependendency will be\n\n# transitively passed on to all libraries dependent on PyTorch.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If building shared library, set dllimport/dllexport proper.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Enable hidden visibility if compiler supports it.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Dependency of c10\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# NB: This directory is generated by the HIPIFY script; it's\n\n# not checked in\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# ---[ Installation\n\n# Note: for now, we will put all export path into one single Caffe2Targets group\n\n# to deal with the cmake deployment need. Inside the Caffe2Targets set, the\n\n# individual libraries like libc10.so and libcaffe2.so are still self-contained.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "c10/cuda/CMakeLists.txt" : {
      "ObjectId" : "f72b8669b1a5f6fa33f90592214e3fe4867e7fc4",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build file for the C10 CUDA.\n\n#\n\n# C10 CUDA is a minimal library, but it does depend on CUDA.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Configure macro file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# used in cmake_macros.h.in\n",
        "Line" : 9,
        "CharPositionInLine" : 53
      },
      "3" : {
        "Text" : "# Probably have to do this :(\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note: if you want to add ANY dependency to the c10 library, make sure you\n\n# check with the core PyTorch developers as the dependendency will be\n\n# transitively passed on to all libraries dependent on PyTorch.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Note: if you add a new source file/header, you will need to update\n\n# tools/amd_build/pyHIPIFY/cuda_to_hip_mappings.py for new files\n\n# and headers you add\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If building shared library, set dllimport/dllexport proper.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Enable hidden visibility if compiler supports it.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Dependency of c10_cuda\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Installation\n\n# Note: for now, we will put all export path into one single Caffe2Targets group\n\n# to deal with the cmake deployment need. Inside the Caffe2Targets set, the\n\n# individual libraries like libc10.so and libcaffe2.so are still self-contained.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "c10/cuda/test/CMakeLists.txt" : {
      "ObjectId" : "97e5f818e9afa91112d0faf8351594c67d60aac3",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Test binaries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "c10/hip/CMakeLists.txt" : {
      "ObjectId" : "328d21470c2ff7a43c7f8caf61830921228b01e9",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build file for the C10 HIP.  This directory doesn't actually contain\n\n# any files; these files are copied over by the HIPIFY script in tools/amd_build\n\n#\n\n# At the moment, this cmake is NOT standalone\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Configure macro file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# used in cmake_macros.h.in\n",
        "Line" : 9,
        "CharPositionInLine" : 52
      },
      "3" : {
        "Text" : "# NB: All previous cu files are renamed into cc files.  This isn't tested at the\n\n# moment.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Mark the cc files as HIP files, so we call the compiler.  (They have to be\n\n# suffixed with cc, because the hcc compiler won't accept them otherwise.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Propagate HIP_CXX_FLAGS that were set from Dependencies.cmake\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# caffe2_hip adds a bunch of dependencies like rocsparse, but c10/hip is supposed to be\n\n# minimal.  I'm not sure if we need hip_hcc or not; for now leave it out\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If building shared library, set dllimport/dllexport proper.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Enable hidden visibility if compiler supports it.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Dependency of c10_hip\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ Installation\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "c10/test/CMakeLists.txt" : {
      "ObjectId" : "ec2183809933e408fbe0f36b96298059ff53a9c5",
      "LastModified" : "2019-04-18T09:04:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Test binaries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/CMakeLists.txt" : {
      "ObjectId" : "4e3f036f7f389bda13070fb55ec394a6e8dbff94",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Generate and install header and cpp files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Declare source file lists\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ ATen build\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate the headers wrapped by our operator\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add source, includes, and libs to lists\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Only add \"ATen Core\", a minimal, easy-to-compile fragment of ATen.\n\n# This codepath should only be exercised by the Android build.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# See cmake/Codegen.cmake for header installation\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ Torch build\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Caffe2 build\n\n# Note: the folders that are being commented out have not been properly\n\n# addressed yet.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add_subdirectory(experiments) # note, we may remove this folder at some point\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# add_subdirectory(test) # todo: use caffe2_gtest_main instead of gtest_main because we will need to call GlobalInit\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Advanced: if we have white list specified, we will do intersections for all\n\n# main lib srcs.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Debug messages - if you want to get a list of source files, enable the\n\n# following.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ List of libraries to link with\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If we are going to link protobuf locally inside caffe2 libraries, what we will do is\n\n# to create a helper static library that always contains libprotobuf source files, and\n\n# link the caffe2 related dependent libraries to it.\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Reason for this public dependency is as follows:\n\n# (1) Strictly speaking, we should not expose any Protobuf related functions. We should\n\n#     only use function interfaces wrapped with our own public API, and link protobuf\n\n#     locally.\n\n# (2) However, currently across the Caffe2 codebase, we have extensive use of protobuf\n\n#     functionalities. For example, not only libcaffe2.so uses it, but also other\n\n#     binaries such as python extensions etc. As a result, we will have to have a\n\n#     transitive dependency to libprotobuf.\n\n#\n\n# Good thing is that, if we specify CAFFE2_LINK_LOCAL_PROTOBUF, then we do not need to\n\n# separately deploy protobuf binaries - libcaffe2.so will contain all functionalities\n\n# one needs. One can verify this via ldd.\n\n#\n\n# TODO item in the future includes:\n\n# (1) Enable using lite protobuf\n\n# (2) Properly define public API that do not directly depend on protobuf itself.\n\n# (3) Expose the libprotobuf.a file for dependent libraries to link to.\n\n#\n\n# What it means for users/developers?\n\n# (1) Users: nothing affecting the users, other than the fact that CAFFE2_LINK_LOCAL_PROTOBUF\n\n#     avoids the need to deploy protobuf.\n\n# (2) Developers: if one simply uses core caffe2 functionality without using protobuf,\n\n#     nothing changes. If one has a dependent library that uses protobuf, then one needs to\n\n#     have the right protobuf version as well as linking to libprotobuf.a.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Compile exposed libraries.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set standard properties on the target\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Note [Supporting both static and dynamic libraries on Windows]\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# A Windows library may be distributed as either a static or dynamic\n\n# library.  The chosen distribution mechanism affects how you setup\n\n# the headers for the library: if you statically link a function,\n\n# all you need is an ordinary signature:\n\n#\n\n#     void f();\n\n#\n\n# But if you *dynamically* link it, then you must provide a __declspec\n\n# specifying that it should be imported from a DLL:\n\n#\n\n#     __declspec(dllimport) void f();\n\n#\n\n# Mixing the two situations will not work: if you specify dllimport\n\n# while statically linking, the linker will complain it cannot find\n\n# the __imp_f symbol (which serve as the DLL entrypoint); if you\n\n# fail to specify dllimport for a symbol that's coming from a DLL,\n\n# the linker will complain that it can't find f.  Joy!\n\n#\n\n# Most places on the Internet, you will find people have written\n\n# their headers under the assumption that the application will\n\n# only ever be dynamically linked, as they define a macro which\n\n# tags a function as __declspec(dllexport) if you are actually\n\n# building the library, and __declspec(dllimport) otherwise.  But\n\n# if you want these headers to also work if you are linking against\n\n# a static library, you need a way to avoid adding these __declspec's\n\n# at all.  And that \"mechanism\" needs to apply to any downstream\n\n# libraries/executables which are going to link against your library.\n\n#\n\n#   As an aside, why do we need to support both modes?\n\n#   For historical reasons, PyTorch ATen on Windows is built dynamically,\n\n#   while Caffe2 on Windows is built statically (mostly because if\n\n#   we build it dynamically, we are over the DLL exported symbol limit--and\n\n#   that is because Caffe2 hasn't comprehensively annotated all symbols\n\n#   which cross the DLL boundary with CAFFE_API).  So any code\n\n#   which is used by both PyTorch and Caffe2 needs to support both\n\n#   modes of linking.\n\n#\n\n# So, you have a macro (call it AT_CORE_STATIC_WINDOWS) which you need to have\n\n# set for any downstream library/executable that transitively includes your\n\n# headers.  How are you going to do this?  You have two options:\n\n#\n\n#   1. Write out a config.h header which stores whether or not\n\n#      you are linking statically or dynamically.\n\n#\n\n#   2. Force all of users to set the the macro themselves.  If they\n\n#      use cmake, you can set -DAT_CORE_STATIC_WINDOWS=1 as a PUBLIC\n\n#      compile option, in which case cmake will automatically\n\n#      add the macro for you.\n\n#\n\n# Which one is better? Well, it depends: they trade off implementor\n\n# ease versus user ease: (1) is more work for the library author\n\n# but the user doesn't have to worry about it; (2) requires the user\n\n# to set the macro themselves... but only if they don't use cmake.\n\n#\n\n# So, which is appropriate in our situation?  In my mind, here is\n\n# the distinguishing factor: it is more common to distribute\n\n# DLLs, since they don't require you to line up the CRT version\n\n# (/MD, /MDd, /MT, /MTd) and MSVC version at the use site.  So,\n\n# if a user is already in the business of static linkage, they're\n\n# already in \"expert user\" realm.  So, I've decided that at this\n\n# point in time, the simplicity of implementation of (2) wins out.\n\n#\n\n# NB: This must be target_compile_definitions, not target_compile_options,\n\n# as the latter is not respected by nvcc\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# ONNX is linked statically and needs to be exported from this library\n\n# to be used externally. Make sure that references match the export.\n",
        "Line" : 322,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Use -O2 for release builds (-O3 doesn't improve perf, and -Os results in perf regression)\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Install PDB files for MSVC builds\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ---[ CUDA library.\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# These public dependencies must go after the previous dependencies, as the\n\n# order of the libraries in the linker call matters here when statically\n\n# linking; libculibos and cublas must be last.\n",
        "Line" : 351,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# See Note [Supporting both static and dynamic libraries on Window]\n\n# TODO: I'm actually not sure why this is necessary, because caffe2_gpu\n\n# should depend on caffe2 (which itself would give us the necessary\n\n# macro definition).\n",
        "Line" : 357,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# NB: This must be target_compile_definitions, not target_compile_options,\n\n# as the latter is not respected by nvcc\n",
        "Line" : 365,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Set standard properties on the target\n",
        "Line" : 371,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Install PDB files for MSVC builds\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# ---[ Caffe2 HIP sources.\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Call again since Caffe2_HIP_INCLUDE is extended with ATen include dirs.\n\n# Get Compile Definitions from the directory (FindHIP.cmake bug)\n",
        "Line" : 386,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Call again since Caffe2_HIP_INCLUDE is extended with ATen include dirs.\n",
        "Line" : 395,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# FindHIP.CMake checks if the SHARED flag is set and adds extra logic accordingly.\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Since PyTorch files contain HIP headers, these flags are required for the necessary definitions to be added.\n",
        "Line" : 404,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# TODO: Cut this over to ATEN_HIP_FILES_GEN_LIB.  At the moment, we\n\n# only generate CUDA files\n\n# NB: This dependency must be PRIVATE, because we don't install\n\n# ATEN_CUDA_FILES_GEN_LIB (it's a synthetic target just to get the\n\n# correct dependency from generated files.)\n",
        "Line" : 409,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Since PyTorch files contain HIP headers, this is also needed to capture the includes.\n",
        "Line" : 418,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Set standard properties on the target\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# ---[ Check if warnings should be errors.\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ---[ Test binaries.\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Install PDB files for MSVC builds\n",
        "Line" : 449,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# Install PDB files for MSVC builds\n",
        "Line" : 466,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# For special tests that explicitly uses dependencies, we add them here\n",
        "Line" : 489,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Note: we only install the caffe2 python files if BUILD_CAFFE2_OPS is ON\n\n# This is because the build rules here written in such a way that they always\n\n# appear to need to be re-run generating >600 pieces of work during the pytorch\n\n# rebuild step. The long-term fix should be to clean up these rules so they\n\n# only rerun when needed.\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Python site-packages\n\n# Get canonical directory for python site packages (relative to install\n\n# location).  It varies from system to system.\n\n# We should pin the path separator to the forward slash on Windows.\n\n# More details can be seen at\n\n# https://github.com/pytorch/pytorch/tree/master/tools/build_pytorch_libs.bat#note-backslash-munging-on-windows\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# for Summary\n",
        "Line" : 516,
        "CharPositionInLine" : 65
      },
      "44" : {
        "Text" : "# ---[ Options.\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Python extension suffix\n\n# Try to get from python through sysconfig.get_env_var('EXT_SUFFIX') first,\n\n# fallback to \".pyd\" if windows and \".so\" for all others.\n",
        "Line" : 520,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Allow different install locations for libcaffe2\n\n# For setuptools installs (that all build Python), install libcaffe2 into\n\n# site-packages, alongside the torch libraries. The pybind11 library needs\n\n# an rpath to the torch library folder\n\n# For cmake installs, including c++ only installs, install libcaffe2 into\n\n# CMAKE_INSTALL_PREFIX/lib . The pybind11 library can have a hardcoded\n\n# rpath\n",
        "Line" : 536,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# site-packages/caffe2/python/caffe2_pybind11_state\n\n# site-packages/torch/lib\n",
        "Line" : 545,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Must also include `CMAKE_SHARED_LINKER_FLAGS` in linker flags for\n\n# `caffe2_pybind11_state_*` targets because paths to required libraries may\n\n# need to be found there (e.g., specifying path to `libiomp5` with `LDFLAGS`).\n",
        "Line" : 550,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# ---[ Python.\n",
        "Line" : 558,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Install caffe2_pybind11_state(_gpu|hip) in site-packages/caffe2/python,\n\n# so it needs an rpath to find libcaffe2\n",
        "Line" : 574,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Install with same rpath as non-gpu caffe2_pybind11_state\n",
        "Line" : 600,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Install with same rpath as non-hip caffe2_pybind11_state\n",
        "Line" : 625,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# If we are building under windows, we will copy the file from\n\n# build/caffe2/python/{Debug,Release}/caffe2_pybind11_state.pyd\n\n# to its parent folder so that we can do in-build execution.\n",
        "Line" : 634,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Finally, Copy all python files to build directory\n\n# Create a custom target that copies all python files.\n",
        "Line" : 662,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# generated pb files are copied from build/caffe2 to caffe2\n\n# if we copied them back to build this would create a build cycle\n\n# consider removing the need for globs\n",
        "Line" : 667,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Install commands\n\n# Pick up static python files\n",
        "Line" : 685,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Caffe proto files\n",
        "Line" : 689,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Caffe2 proto files\n",
        "Line" : 692,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Finally, set the Caffe2_MAIN_LIBS variable in the parent scope.\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 60
    },
    "caffe2/contrib/CMakeLists.txt" : {
      "ObjectId" : "ba981c8f21ec3c9f8385b1895f0674ac5c534825",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pass the src lists back to the parent\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU source, include, deps, test sources, binary sources\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GPU source, include, deps, test sources, binary sources\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# HIP source\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "caffe2/contrib/aten/CMakeLists.txt" : {
      "ObjectId" : "95e3b838ceebe56c05ee02704b517c2a1677ba2d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add source generated by Codegen.cmake and pass to parent\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "caffe2/contrib/gloo/CMakeLists.txt" : {
      "ObjectId" : "ff77e32a43a920a0a126ab624e70f3410455284f",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/ideep/CMakeLists.txt" : {
      "ObjectId" : "8e1f89d0a7e48cdc6142ef5ddebb886b8a332d90",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ---[ CPU test files - currently none but just to be safe\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "caffe2/contrib/nccl/CMakeLists.txt" : {
      "ObjectId" : "b2a0f9cebcc302ef57d75a972d153a2fc512eb96",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/opencl/CMakeLists.txt" : {
      "ObjectId" : "5d4a036acd0e7ac576494cfe7a7569f9ae4e549c",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/prof/CMakeLists.txt" : {
      "ObjectId" : "81fee952c1384d350d43c6b4779eb387a7ada09d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/shm_mutex/CMakeLists.txt" : {
      "ObjectId" : "3fd2e69b22307a2c442c01c3b65384382b4decb0",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/contrib/tensorrt/CMakeLists.txt" : {
      "ObjectId" : "bb5d2884a53c0d3728658fc8910300fd6616b686",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/core/CMakeLists.txt" : {
      "ObjectId" : "177cf2259b44ba9a9d251bbcf861261fa63e1b7e",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ general HIP files\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ------[ HIP sources\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# exclude test files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Manually remove the cudnn files since we might be using USE_CUDNN=OFF\n\n# TODO: when we move to explicit file list, this would not be needed.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ HIP test files\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "caffe2/core/nomnigraph/CMakeLists.txt" : {
      "ObjectId" : "8ac0a52871314bcf16d438a1620668dfbc6ef0ca",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/cuda_rtc/CMakeLists.txt" : {
      "ObjectId" : "6bb289b79d72001731da477dc7a38801075b1831",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/db/CMakeLists.txt" : {
      "ObjectId" : "9c9ceda597a1581749015196195fe2761592ab6d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common files that are always going to be included.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DB specific files\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/distributed/CMakeLists.txt" : {
      "ObjectId" : "41373ef2d503b5e62006b2651c808ce6c4728f7f",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common files that are always going to be included.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/ideep/CMakeLists.txt" : {
      "ObjectId" : "8e1f89d0a7e48cdc6142ef5ddebb886b8a332d90",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# ---[ CPU test files - currently none but just to be safe\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "caffe2/image/CMakeLists.txt" : {
      "ObjectId" : "023df8ebd0dfb2f4104dd3ca2d8c2a5e01229ed4",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ general GPU\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# exclude test files\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# ---[ HIP files\n\n# ------[ general HIP\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ------[ HIP sources\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# exclude test files\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ---[ HIP test files\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "caffe2/mobile/CMakeLists.txt" : {
      "ObjectId" : "08f11f1ef9b7bc84f289dc0f875b1126c36610e3",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/mobile/contrib/CMakeLists.txt" : {
      "ObjectId" : "617369f275e1e5bdd273700a2c773b778f049c4e",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/mobile/contrib/ios/CMakeLists.txt" : {
      "ObjectId" : "36a87f87511b3daaa5650f391b472ce3eb75f8c5",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: figure out conflict between contrib/nnpack/nnpack_ops.cc and mobile_nnpack.cc\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Basic ios srcs.\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# \"${CMAKE_CURRENT_SOURCE_DIR}/mobile_nnpack.cc\"\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# metal/mpscnn files\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "caffe2/mobile/contrib/ios/mpscnn/CMakeLists.txt" : {
      "ObjectId" : "f426e41904f9eec7995d6943d7122cbc865c3edd",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# exclude test files\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "caffe2/mobile/contrib/libopencl-stub/Makefile" : {
      "ObjectId" : "c578003d8cac1bea41d699b539e242bd6bb3063d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/nnapi/CMakeLists.txt" : {
      "ObjectId" : "403bbb8983e8198cf795e445b9559e1585ae6682",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mobile/contrib/snpe/CMakeLists.txt" : {
      "ObjectId" : "1f95801a81ddaea84a078ab06b1a6db72a48989e",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/mpi/CMakeLists.txt" : {
      "ObjectId" : "796b8f7450df192ebd29041d4e430de31f251f8d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: properly compile this together with python.\n\n# \"${CMAKE_CURRENT_SOURCE_DIR}/mpi_python.cc\"\n",
        "Line" : 5,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# pass up to calling script\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "caffe2/observers/CMakeLists.txt" : {
      "ObjectId" : "a1cbb07ddc4841d3b3de412746321d81830b95ed",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "caffe2/onnx/CMakeLists.txt" : {
      "ObjectId" : "7398f76675f454a849c4d4d09a7558202e08557b",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/onnx/torch_ops/CMakeLists.txt" : {
      "ObjectId" : "99443af4cc9bc60bd31a0c59fe6969826581cdf1",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Extra onnx files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/operators/CMakeLists.txt" : {
      "ObjectId" : "80db17fc4415aeb89ed51f03b3fb1d4b735c39f2",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ TensorRT\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Manually remove the cudnn files since we might be using USE_CUDNN=OFF\n\n# TODO: when we move to explicit file list, this would not be needed.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ------[ general HIP\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ------[ HIP sources\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# exclude test files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Manually remove the cudnn files since we might be using USE_CUDNN=OFF\n\n# TODO: when we move to explicit file list, this would not be needed.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add all files in experimental\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ GPU test files\n\n# ------[ cuDNN\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ---[ HIP test files\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Manually remove the cudnn files since we might be using USE_CUDNN=OFF\n\n# TODO: when we move to explicit file list, this would not be needed.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "caffe2/operators/quantized/CMakeLists.txt" : {
      "ObjectId" : "3c8f5aa00a35019dab36d29c7bcf5719af40f927",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files only\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe2/operators/rnn/CMakeLists.txt" : {
      "ObjectId" : "589090eecdbb8ccbf8450bea7bd1c5c9036efaf1",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ cuDNN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude test files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ------[ general HIP\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ------[ HIP sources\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# exclude test files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Manually remove the cudnn files since we might be using USE_CUDNN=OFF\n\n# TODO: when we move to explicit file list, this would not be needed.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ GPU test files\n\n# ------[ cuDNN\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ------[ general GPU\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ------[ HIP test files\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "caffe2/opt/CMakeLists.txt" : {
      "ObjectId" : "85f99c9dfb1428b26f43d3dcb46344ea43c73e90",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/perfkernels/CMakeLists.txt" : {
      "ObjectId" : "3ca9ae5a1b152b6e26a77272bb47080ad2f1c5d5",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# exclude avx, avx2, and avx512 srcs from common_srcs\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We will always build common srcs.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We will only build the perf kernel files if the compiler supports avx2\n\n# extensions.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO(jiayq): currently, we only implement the very base files for the\n\n# perfkernels. This is because to implement avx and avx2 files, we actually\n\n# need to set up different compilation units and this is a bit more involving\n\n# in terms of CMakefile changes. This is a stop-gap solution until we get a\n\n# more proper implementation.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "caffe2/predictor/CMakeLists.txt" : {
      "ObjectId" : "cbf4112fdd25bbd3c2137369b2a0881b6a972f8d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common files that are always going to be included.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/predictor/emulator/CMakeLists.txt" : {
      "ObjectId" : "690699040e61ffd706e7d704780eba20538d8184",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Common files that are always going to be included.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/proto/CMakeLists.txt" : {
      "ObjectId" : "7a84f1084895eebcab7c91604b520ab6f6dc4529",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/python/CMakeLists.txt" : {
      "ObjectId" : "ee910e831e8b096ffb4bbae0185d1eaab1335cfb",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ GPU files\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ HIP files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe2/quantization/CMakeLists.txt" : {
      "ObjectId" : "608bc2705b162d6f44d172eccc50539e2ffc298d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPU source, include, deps, test sources, binary sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe2/quantization/server/CMakeLists.txt" : {
      "ObjectId" : "e0aed79cfe47cfdb7d81a99cb79583dc201e0a05",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ AVX2 Ops\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ CPU files only\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Common sources\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ CPU test files\n\n# TODO: fc_fake_lowp_test.cc needs avx flags\n\n# sigmoid_test.cc doesn build; error: undefined Sigmoid and Compute\n\n#list(APPEND Caffe2_CPU_TEST_SRCS\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\"${CMAKE_CURRENT_SOURCE_DIR}/dynamic_histogram_test.cc\"\n\n#\"${CMAKE_CURRENT_SOURCE_DIR}/l2_minimization_test.cc\"\n\n#\"${CMAKE_CURRENT_SOURCE_DIR}/requantization_test.cc\")\n\n#\"${CMAKE_CURRENT_SOURCE_DIR}/sigmoid_test.cc\")\n\n#\"${CMAKE_CURRENT_SOURCE_DIR}/tanh_test.cc\")\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "caffe2/queue/CMakeLists.txt" : {
      "ObjectId" : "f50ef8f5601d523ca5985a9f1396a3cdf0b51323",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ general GPU\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# exclude test files\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------[ general HIP\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ HIP files.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# exclude test, gpu and hip files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ HI test files\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "caffe2/serialize/CMakeLists.txt" : {
      "ObjectId" : "bcda33cf11b670548d02435725cb6ad2fb491dc7",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/sgd/CMakeLists.txt" : {
      "ObjectId" : "7604e315a01f63d005b55e926a5012be1b3fbb11",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ general GPU\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# exclude test files\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------[ general HIP\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ HIP files\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# exclude test files\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ HIP test files\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "caffe2/share/CMakeLists.txt" : {
      "ObjectId" : "73fd22b0821d7023db6f26d2d94902c562996a24",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# There is a linking issue that happens in some of the Windows builds.\n\n# TODO(Yangqing): after the module redesing, enable this back.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe2/share/contrib/CMakeLists.txt" : {
      "ObjectId" : "0fc3a4186f018988de5bc38ae2d7a0e22a99acea",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CPU source, test sources, binary sources\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GPU source, test sources, binary sources\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/share/contrib/depthwise/CMakeLists.txt" : {
      "ObjectId" : "1a05864d2aa6a0d06f9557ff74eb24780be68dfa",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/share/contrib/nnpack/CMakeLists.txt" : {
      "ObjectId" : "a3ebf984f0f015ecb60c3772ccb6c93e80a6ff2f",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/share/contrib/zstd/CMakeLists.txt" : {
      "ObjectId" : "dbc170e14ec3de522021707a9135c6d644ba4be8",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe2/transforms/CMakeLists.txt" : {
      "ObjectId" : "48e61ec4f064e8b9e229d5dbbd032bb9b476193f",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Get non-tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# exclude test files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Get tests\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "caffe2/utils/CMakeLists.txt" : {
      "ObjectId" : "fd9c07ad8c694246e4f00578d306aae62e9ef3cb",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ threadpool/pthreadpool* is a local modification of the NNPACK\n\n# pthreadpool with a very similar interface. Neither NNPACK, nor this\n\n# thread pool supports Windows.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO Once all source files are defined inside the local c10_utils_xxx targets,\n\n# it should be the job of the parent CMakeLists.txt to decide what to do with the target (i.e. link it to caffe2)\n\n# instead of us locally adding it to Caffe2_xxx variables.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe2/video/CMakeLists.txt" : {
      "ObjectId" : "204f81616acbd94edca664350f5dbeb185f98360",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ GPU files\n\n# ------[ general GPU\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ------[ CUDA sources\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# exclude test files\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# ---[ CPU files.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# exclude test files and gpu files\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ---[ GPU test files\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ---[ CPU test files\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ Send the lists to the parent scope.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/BuildVariables.cmake" : {
      "ObjectId" : "7897f63cffa406abc32e360bfbc8d19e49bd3cd5",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Declare variables that we are going to use across the Caffe2 build.\n\n# This file defines common, Caffe2-wide variables that we use to collect\n\n# source files and other things. Each variable is annotated with their\n\n# intended uses.\n\n# Note that adding and / or deleting these variables usually involves\n\n# changing the whole build system, so make sure you send a PR early if you\n\n# want to change them.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Caffe2_{CPU,GPU}_SRCS is the list that will have all the related source\n\n# files for CPU and GPU respectively. They will be filled with the\n\n# CMakeLists.txt files under each folder respectively.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Caffe2_{CPU,GPU}_TEST_SRCS is the list that will have all the related source\n\n# files for CPU and GPU tests respectively.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Caffe2_{CPU,GPU}_INCLUDE is the list that will have all the include\n\n# directories for CPU and GPU respectively.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Caffe2_MAIN_LIBS is a list of the libraries that a dependent library should\n\n# depend on when it links against Caffe2.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists for Caffe2 dependency libraries, for CPU and CUDA respectively.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This variable contains dependency libraries of Caffe2 which requires whole\n\n# symbol linkage. One example is the onnx lib where we need all its schema\n\n# symbols. However, if the lib is whole linked in caffe2 lib, we don't want\n\n# it to be linked in binaries that will link caffe2 lib. Because if caffe2 lib\n\n# is built as dynamic library, it will result in two copied of symbols of\n\n# Caffe2_DEPENDENCY_WHOLE_LINK_LIBS existing in caffe2.so and the binary, which\n\n# will cause issues. Therefore Caffe2_DEPENDENCY_WHOLE_LINK_LIBS will only\n\n# be linked by caffe2 lib.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Lists for Caffe2 public dependency libraries. These libraries will be\n\n# transitive to any libraries that depends on Caffe2.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# List of modules that is built as part of the main Caffe2 build. For all\n\n# binary targets, such as Python and native binaries, they will be linked\n\n# automatically with these modules.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/Codegen.cmake" : {
      "ObjectId" : "996fb58a50a484deab2eb6ac978bf54f8408b4c3",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This ill-named file does a number of things:\n\n# - Installs Caffe2 header files (this has nothing to do with code generation)\n\n# - Configures caffe2/core/macros.h\n\n# - Creates an ATen target for its generated C++ files and adds it\n\n#   as a dependency\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Helper functions\n\n################################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Write the macros file\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Installing the header files\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ ATen specific\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create list of copies\n",
        "Line" : 121,
        "CharPositionInLine" : 56
      },
      "7" : {
        "Text" : "# these are files that are generated by the script and checked in -- the script checks\n\n# that they are equivalent so it must be a dependency of the script\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Generated headers used from a CUDA (.cu) file are\n\n# not tracked correctly in CMake. We make the libATen.so depend explicitly\n\n# on building the generated ATen files to workaround.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/Dependencies.cmake" : {
      "ObjectId" : "ebfc2db7e9c970fad8c7f031b8c160a94b5d5914",
      "LastModified" : "2019-04-18T09:04:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# RPATH stuff\n\n# see https://cmake.org/Wiki/CMake_RPATH_handling\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use separate rpaths during build and install phases\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Don't use the install-rpath during the build phase\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Automatically add all linked folders that are NOT in the build directory to\n\n# the rpath (per library?)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# UBSAN triggers when compiling protobuf, so we need to disable it.\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# ---[ Custom Protobuf\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For MSVC,\n\n# 1. Replace /Zi and /ZI with /Z7\n\n# 2. Switch off incremental linking in debug builds\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ Threads\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ protobuf\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ BLAS\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Eigen is header-only and we do not have any dependent libraries\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Directory where NNPACK and cpuinfo will download and build all dependencies\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ QNNPACK\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Directories for QNNPACK dependencies submoduled in Caffe2\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# We build static versions of QNNPACK and pthreadpool but link\n\n# them into a shared library for Caffe2, so they need PIC.\n",
        "Line" : 233,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# ---[ Caffe2 Int8 operators (enabled by USE_QNNPACK) depend on gemmlowp and neon2sse headers\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ NNPACK\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ---[ NNPACK is being built together with Caffe2: explicitly specify dependency\n",
        "Line" : 256,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# ---[ Caffe2 uses cpuinfo library in the thread pool\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# We build static version of cpuinfo but link\n\n# them into a shared library for Caffe2, so they need PIC.\n",
        "Line" : 290,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# ---[ gflags\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# ---[ Google-glog\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ---[ Googletest and benchmark\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Preserve build options.\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# We will build gtest as static libs and embed it directly into the binary.\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For gtest, we will simply embed it into our test binaries, so we won't\n\n# need to install it.\n",
        "Line" : 333,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# For Windows, we will check the runtime used is correctly passed in.\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Add googletest subdirectory but make sure our INCLUDE_DIRECTORIES\n\n# don't bleed into it. This is because libraries installed into the root conda\n\n# env (e.g. MKL) add a global /opt/conda/include directory, and if there's\n\n# gtest installed in conda, the third_party/googletest/**.cc source files\n\n# would try to include headers from /opt/conda/include/gtest/**.h instead of\n\n# its own. Once we have proper target-based include directories,\n\n# this shouldn't be necessary anymore.\n",
        "Line" : 342,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# We will not need to test benchmark lib itself.\n",
        "Line" : 357,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# We will not need to install benchmark since we link it statically.\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Recover build options.\n",
        "Line" : 364,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# ---[ FBGEMM\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# ---[ LMDB\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# ---[ LevelDB\n\n# ---[ Snappy\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ---[ NUMA\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ---[ ZMQ\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ---[ Redis\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ---[ OpenCV\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# OpenCV 4\n",
        "Line" : 489,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# OpenCV 3\n",
        "Line" : 492,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# OpenCV 2\n",
        "Line" : 495,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# ---[ FFMPEG\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# ---[ Caffe2 depends on FP16 library for half-precision conversions\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# ---[ EIGEN\n\n# Due to license considerations, we will only use the MPL2 parts of Eigen.\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# ---[ Python + Numpy\n",
        "Line" : 557,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# If not given a Python installation, then use the current active Python\n",
        "Line" : 559,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Check that Python works\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Seed PYTHON_INCLUDE_DIR and PYTHON_LIBRARY to be consistent with the\n\n# executable that we already found (if we didn't actually find an executable\n\n# then these will just use \"python\", but at least they'll be consistent with\n\n# each other).\n",
        "Line" : 581,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# distutils.sysconfig, if it's installed, is more accurate than sysconfig,\n\n# which sometimes outputs directories that do not exist\n",
        "Line" : 586,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# These should fill in the rest of the variables, like versions, but resepct\n\n# the variables we set above\n",
        "Line" : 613,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# When building pytorch, we pass this in directly from setup.py, and\n\n# don't want to overwrite it because we trust python more than cmake\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Observers are required in the python build\n",
        "Line" : 634,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# ---[ pybind11\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# ---[ MPI\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# ---[ OpenMP\n",
        "Line" : 688,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# OpenMP support?\n",
        "Line" : 690,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# macOS + GCC\n",
        "Line" : 693,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# OPENMP_FOUND is not cached in FindOpenMP.cmake (all other variables are cached)\n\n# see https://github.com/Kitware/CMake/blob/master/Modules/FindOpenMP.cmake\n",
        "Line" : 715,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# ---[ Android specific ones\n",
        "Line" : 736,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# ---[ CUDA\n",
        "Line" : 741,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# public/*.cmake uses CAFFE2_USE_*\n",
        "Line" : 743,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# A helper variable recording the list of Caffe2 dependent libraries\n\n# caffe2::cudart is dealt with separately, due to CUDA_ADD_LIBRARY\n\n# design reason (it adds CUDA_LIBRARIES itself).\n",
        "Line" : 750,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# When statically linking, this must be the order of the libraries\n",
        "Line" : 770,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# ---[ HIP\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Ask hcc to generate device code during compilation so we can use\n\n# host linker to link.\n",
        "Line" : 824,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# This is needed for library added by hip_add_library (same for hip_add_executable)\n",
        "Line" : 834,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Note [rocblas & rocfft cmake bug]\n\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# TODO: There is a bug in rocblas's & rocfft's cmake files that exports the wrong targets name in ${rocblas_LIBRARIES}\n\n# If you get this wrong, you'll get a complaint like 'ld: cannot find -lrocblas-targets'\n",
        "Line" : 840,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# ---[ NCCL\n",
        "Line" : 859,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# ---[ CUB\n",
        "Line" : 875,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Temporarily override variables to avoid building Gloo tests/benchmarks\n",
        "Line" : 896,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Here is a little bit hacky. We have to put PROJECT_BINARY_DIR in front\n\n# of PROJECT_SOURCE_DIR with/without conda system. The reason is that\n\n# gloo generates a new config.h in the binary diretory.\n",
        "Line" : 902,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Add explicit dependency if NCCL is built from third_party.\n\n# Without dependency, make -jN with N>1 can fail if the NCCL build\n\n# hasn't finished when CUDA targets are linked.\n",
        "Line" : 910,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Pick the right dependency depending on USE_CUDA\n",
        "Line" : 916,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# ---[ profiling\n",
        "Line" : 925,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# ---[ Onnx\n",
        "Line" : 977,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# If linking local protobuf, make sure ONNX has the same protobuf\n\n# patches as Caffe2 and Caffe proto. This forces some functions to\n\n# not be inline and instead route back to the statically-linked protobuf.\n",
        "Line" : 987,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# Set the ONNX_ML flag for ONNX submodule\n",
        "Line" : 993,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Add op schemas in \"ai.onnx.pytorch\" domain\n",
        "Line" : 1002,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# In mobile build we care about code size, and so we need drop\n\n# everything (e.g. checker, optimizer) in onnx but the pb definition.\n",
        "Line" : 1010,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Recover the build shared libs option.\n",
        "Line" : 1019,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# --[ TensorRT integration with onnx-trt\n",
        "Line" : 1024,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# --[ ATen checks\n",
        "Line" : 1036,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Top-level build config\n\n############################################\n\n# Flags\n\n# When using MSVC\n\n# Detect CUDA architecture and get best NVCC flags\n\n# finding cuda must be first because other things depend on the result\n\n#\n\n# NB: We MUST NOT run this find_package if NOT USE_CUDA is set, because upstream\n\n# FindCUDA has a bug where it will still attempt to make use of NOTFOUND\n\n# compiler variables to run various probe tests.  We could try to fix\n\n# this, but since FindCUDA upstream is subsumed by first-class support\n\n# for CUDA language, it seemed not worth fixing.\n",
        "Line" : 1042,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# we want to respect the standard, and we are bored of those **** .\n",
        "Line" : 1056,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# ARM specific flags\n",
        "Line" : 1135,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Check for a cpuid intrinsic\n",
        "Line" : 1154,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# checks AVX and AVX2\n",
        "Line" : 1185,
        "CharPositionInLine" : 20
      },
      "87" : {
        "Text" : "# we don't set -mavx and -mavx2 flags globally, but only for specific files\n\n# however, we want to enable the AVX codepaths, so we still need to\n\n# add USE_AVX and USE_AVX2 macro defines\n",
        "Line" : 1187,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# https://github.com/libgit2/libgit2/issues/2128#issuecomment-35649830\n",
        "Line" : 1319,
        "CharPositionInLine" : 5
      },
      "89" : {
        "Text" : "# done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html\n",
        "Line" : 1333,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# Is __thread supported?\n",
        "Line" : 1349,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "#\n\n# End ATen checks\n\n#\n",
        "Line" : 1362,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 92
    },
    "cmake/External/nccl.cmake" : {
      "ObjectId" : "cb20610fecb8a6609be91cabf3be4e2380e9f173",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if we have explicit paths passed from setup.py, use those\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# used by gloo cmake among others\n",
        "Line" : 7,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# this second replacement is needed when there are multiple archs\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# TODO: remove these flags when\n\n# https://github.com/pytorch/pytorch/issues/13362 is fixed\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# The following old-style variables are set so that other libs, such as Gloo,\n\n# can still use it.\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/External/nnpack.cmake" : {
      "ObjectId" : "f35c95542563c86ae2b9097ffd6685b13ee0dbd2",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# NNPACK is built together with Caffe2\n\n# By default, it builds code from third-party/NNPACK submodule.\n\n# Define NNPACK_SOURCE_DIR to build with a different version.\n\n##############################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# (1) MSVC - unsupported \n\n##############################################################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# (2) Anything but x86, x86-64, ARM, ARM64 - unsupported\n\n##############################################################################\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# (3) Android, iOS, Linux, macOS - supported\n\n##############################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Directories for NNPACK dependencies submoduled in Caffe2\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We build static versions of nnpack and pthreadpool but link\n\n# them into a shared library for Caffe2, so they need PIC.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "##############################################################################\n\n# (4) Catch-all: not supported.\n\n##############################################################################\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/MiscCheck.cmake" : {
      "ObjectId" : "aeb5a2bdcbff37c0aa57d595a04eccebe9927daf",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prevent Unknown CMake command \"check_function_exists\".\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# ---[ If running on Ubuntu, check system version and compiler version.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Check that our programs run.  This is different from the native CMake\n\n# compiler check, which just tests if the program compiles and links.  This is\n\n# important because with ASAN you might need to help the compiled library find\n\n# some dynamic libraries.\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Force cmake to retest next time around\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# ---[ Check if certain std functions are supported. Sometimes\n\n# _GLIBCXX_USE_C99 macro is not defined and some functions are missing.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Force cmake to retest next time around\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ---[ Check if std::exception_ptr is supported.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ Check for NUMA support\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Check if we want to turn off deprecated warning due to glog.\n\n# Note(jiayq): on ubuntu 14.04, the default glog install uses ext/hash_set that\n\n# is being deprecated. As a result, we will test if this is the environment we\n\n# are building under. If yes, we will turn off deprecation warning for a\n\n# cleaner build output.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Check if the compiler has AVX/AVX2 support. We only check AVX2.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Also see CMakeLists.txt under caffe2/perfkernels.\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# ---[ Check if the compiler has AVX512 support.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We could've used MSVC's hidden option /arch:AVX512 that defines __AVX512F__,\n\n# __AVX512DQ__, and __AVX512VL__, and /arch:AVX512F that defines __AVX512F__.\n\n# But, we chose not to do that not to rely on hidden options.\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# We only consider the case where all of avx512f, avx512dq, and avx512vl are\n\n# supported.\n\n# Platforms where avx512f is supported by not avx512dq and avx512vl as of\n\n# Jan 15 2019 : linux_manywheel_2.7mu_cpu_build and\n\n# linux_conda_3.7_cu100_build\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Also see CMakeLists.txt under caffe2/perfkernels.\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# ---[ Checks if compiler supports -fvisibility=hidden\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ Checks if linker supports -rdynamic. `-rdynamic` tells linker\n\n# -to add all (including unused) symbols into the dynamic symbol\n\n# -table. We need this to get symbols when generating backtrace at\n\n# -runtime.\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ---[ If we are using msvc, set no warning flags\n\n# Note(jiayq): if you are going to add a warning flag, check if this is\n\n# totally necessary, and only add when you see fit. If it is needed due to\n\n# a third party library (like Protobuf), mention it in the comment as\n\n# \"THIRD_PARTY_NAME related\"\n\n# From https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########################################\n\n# Protobuf related. Cannot remove.\n\n# This is directly copied from\n\n#     https://github.com/google/protobuf/blob/master/cmake/README.md\n\n##########################################\n",
        "Line" : 251,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# 'expression' : signed/unsigned mismatch\n\n# (3): switch with default but no case.\n\n# unary minus operator applied to unsigned type, result still unsigned\n\n# Conversion from 'type1' to 'type2', possible loss of data.\n\n# 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'\n\n# Conversion from 'size_t' to 'type', possible loss of data.\n\n# 'identifier' : truncation from 'type1' to 'type2'\n\n# 'this' : used in base member initializer list\n\n# (1): no definition for inline function. Protobuf related.\n\n# No suitable definition provided for explicit template instantiation request\n\n# 'type' : forcing value to bool 'true' or 'false' (performance warning)\n\n# 'function': was declared deprecated\n",
        "Line" : 256,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "##########################################\n\n# Third party related. Cannot remove.\n\n##########################################\n",
        "Line" : 268,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# (1): inline used twice. google benchmark related.\n\n# (1): decorated name length exceeded, name was truncated.\n\n#      Eigen related.\n\n# (3): check operator precedence for possible error.\n\n# Eigen related.\n\n# (1): Unsafe mix of types in gtest/gtest.h. Gtest related.\n",
        "Line" : 271,
        "CharPositionInLine" : 14
      },
      "22" : {
        "Text" : "##########################################\n\n# These are directly ATen related. However, several are covered by\n\n# the above now. We leave them here for documentation purposes only.\n\n#/wd4267 # Conversion from 'size_t' to 'type', possible loss of data.\n",
        "Line" : 277,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# (3): 'class' : multiple assignment operators specified\n\n# (1): conversion from 'type_1' to 'type_2' requires a\n\n#      narrowing conversion\n",
        "Line" : 281,
        "CharPositionInLine" : 14
      },
      "24" : {
        "Text" : "#/wd4305 # 'identifier' : truncation from 'type1' to 'type2'\n\n#/wd4244 # Conversion from 'type1' to 'type2', possible loss of data.\n",
        "Line" : 284,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# (1): 'identifier1' has C-linkage specified, but returns UDT\n\n#      'identifier2' which is incompatible with C\n\n# (3): 'identifier' : unreferenced local variable\n",
        "Line" : 286,
        "CharPositionInLine" : 14
      },
      "26" : {
        "Text" : "#/wd4996 # (3): Use of deprecated POSIX functions. Since we develop\n\n#        #      mainly on Linux, this is ignored.\n",
        "Line" : 289,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# (2): non - DLL-interface classkey 'identifier' used as\n\n#      base for DLL-interface classkey 'identifier'\n",
        "Line" : 291,
        "CharPositionInLine" : 14
      },
      "28" : {
        "Text" : "##########################################\n\n# These are directly Caffe2 related. However, several are covered by\n\n# protobuf now. We leave them here for documentation purposes only.\n\n##########################################\n\n#/wd4018 # (3): Signed/unsigned mismatch. We've used it in many places\n\n#        #      of the code and it would be hard to correct all.\n\n#/wd4244 # (2/3/4): Possible loss of precision. Various cases where we\n\n#        #      implicitly cast TIndex to int etc. Need cleaning.\n\n#/wd4267 # (3): Conversion of size_t to smaller type. Same as 4244.\n\n#/wd4996 # (3): Use of deprecated POSIX functions. Since we develop\n\n#        #      mainly on Linux, this is ignored.\n",
        "Line" : 293,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# (1): inconsistent dll linkage. This is related to the\n\n#      caffe2 FLAGS_* definition using dllimport in header and\n\n#      dllexport in cc file. The strategy is copied from gflags.\n",
        "Line" : 304,
        "CharPositionInLine" : 14
      },
      "30" : {
        "Text" : "# Make sure windef.h does not define max/min macros.\n\n# Required by ATen among others.\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Exception handing for compiler warining C4530, see\n\n# https://msdn.microsoft.com/en-us/library/2axwkyt4.aspx\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# ---[ If we are building on ios, or building with opengl support, we will\n\n# enable -mfpu=neon-fp16 for iOS Metal build. For Android, this fpu setting\n\n# is going to be done with android-cmake by setting\n\n#     -DANDROID_ABI=\"armeabi-v7a with NEON FP16\"\n\n# in the build command.\n\n# Also, we will turn off deprecated-declarations\n\n# due to protobuf.\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# ---[ If we use asan, turn on the flags.\n\n# TODO: This only works with new style gcc and clang (not the old -faddress-sanitizer).\n\n# Change if necessary on old platforms.\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ---[ Create CAFFE2_BUILD_SHARED_LIBS for macros.h.in usage.\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "cmake/Modules/FindARM.cmake" : {
      "ObjectId" : "2dcb2a24f208b56c1184736fceb96861b6ce0864",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check if the processor is an ARM and if Neon instruction are available on the machine where\n\n# the project is compiled.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#neon instruction can be found on the majority part of modern ARM processor\n",
        "Line" : 7,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# on ARMv8, neon is inherit and instead listed as 'asimd' in /proc/cpuinfo\n",
        "Line" : 16,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#Find the processor type (for now OMAP3 or OMAP4)\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#Find the processor type (for now OMAP3 or OMAP4)\n",
        "Line" : 34,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#neon instruction can be found on the majority part of modern ARM processor\n",
        "Line" : 47,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# TODO\n",
        "Line" : 57,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindAVX.cmake" : {
      "ObjectId" : "7d472eb662cf4d4e40d54ef547f52721e88be323",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindAtlas.cmake" : {
      "ObjectId" : "9c665a47bd58040c5fbce118ac13ee0ede7aac16",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Atlas (and Lapack) libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Atlas_ROOT_DIR:            Base directory where all Atlas components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  Atlas_FOUND\n\n#  Atlas_INCLUDE_DIRS\n\n#  Atlas_LIBRARIES\n\n#  Atlas_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindBLAS.cmake" : {
      "ObjectId" : "d6c03467397c9eaf39e2e94d3f53559070b62fba",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find BLAS library\n\n# This module finds an installed fortran library that implements the BLAS\n\n# linear-algebra interface (see http://www.netlib.org/blas/).\n\n# The list of libraries searched for is taken\n\n# from the autoconf macro file, acx_blas.m4 (distributed at\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\n\n#\n\n# This module sets the following variables:\n\n#  BLAS_FOUND - set to true if a library implementing the BLAS interface is found.\n\n#  BLAS_INFO - name of the detected BLAS library.\n\n#  BLAS_F2C - set to true if following the f2c return convention\n\n#  BLAS_LIBRARIES - list of libraries to link against to use BLAS\n\n#  BLAS_INCLUDE_DIR - include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing if BLAS was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Old FindBlas\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to NOTFOUND.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Intel MKL?\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Apple BLAS library?\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic BLAS library?\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Determine if blas was compiled with the f2c conventions\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# epilogue\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Do nothing is BLAS was found before\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/Modules/FindBenchmark.cmake" : {
      "ObjectId" : "e6420a5eced83f995ef74b5e419692d011bbfd20",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the Google Benchmark library and headers.\n\n#  Benchmark_FOUND        - system has benchmark lib\n\n#  Benchmark_INCLUDE_DIRS - the benchmark include directory\n\n#  Benchmark_LIBRARIES    - libraries needed to use benchmark\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCUB.cmake" : {
      "ObjectId" : "aff82aad4553f47d45f85564fd7dbf718b09c88b",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the CUB library and headers.\n\n#  CUB_FOUND        - system has CUB\n\n#  CUB_INCLUDE_DIRS - the CUB include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindFFmpeg.cmake" : {
      "ObjectId" : "ac5f3acd7fd5958587314d36b69a8a63f6bb32e2",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ffmpeg libraries\n\n#     (libavcodec, libavformat, libavutil, libswscale)\n\n# Once done this will define\n\n#\n\n# FFMPEG_FOUND - system has ffmpeg or libav\n\n# FFMPEG_INCLUDE_DIR - the ffmpeg include directory\n\n# FFMPEG_LIBRARIES - Link these to use ffmpeg\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGloo.cmake" : {
      "ObjectId" : "e965326e2e8a0ab006bfe79243a66292ba262b62",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the Gloo library and headers.\n\n#  Gloo_FOUND        - system has Gloo lib\n\n#  Gloo_INCLUDE_DIRS - the Gloo include directory\n\n#  Gloo_LIBRARY/Gloo_NATIVE_LIBRARY    - libraries needed to use Gloo\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use the CUDA library depending on the Gloo_USE_CUDA variable\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# else try to use the CUDA library if found\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindHiredis.cmake" : {
      "ObjectId" : "b9cb69b69a8db78c6ce4ca2fc573e7bb1b365f6d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Hiredis libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  HIREDIS_ROOT_DIR:    Base directory where all Hiredis components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  HIREDIS_FOUND\n\n#  Hiredis_INCLUDE_DIR\n\n#  Hiredis_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindLAPACK.cmake" : {
      "ObjectId" : "a92d3adab09be8cf0abf57af853b1badb896ca46",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LAPACK library\n\n# This module finds an installed fortran library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n#\n\n# The approach follows that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface is found\n\n#  LAPACK_LIBRARIES - list of libraries (using full path name) for LAPACK\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: I do not think it is a good idea to mixup different BLAS/LAPACK versions\n\n# Hence, this script wants to find a Lapack library matching your Blas library\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Old search lapack script\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Intel MKL\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Accelerate\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# vecLib\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# OpenBlas\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# GotoBlas\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# ACML\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generic LAPACK library?\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/Modules/FindLMDB.cmake" : {
      "ObjectId" : "2f0adb1b6d608025480a0b19130e0f68af43888a",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the LMBD libraries and headers\n\n#  LMDB_FOUND - system has LMDB lib\n\n#  LMDB_INCLUDE_DIR - the LMDB include directory\n\n#  LMDB_LIBRARIES - Libraries needed to use LMDB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCWD based on FindGMP by:\n\n# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adapted from FindCWD by:\n\n# Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>\n\n# Aug 31, 2013\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLevelDB.cmake" : {
      "ObjectId" : "320c246b5549cb2d2be2498814935cc29293109c",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LevelDB\n\n#\n\n#  LevelDB_INCLUDES  - List of LevelDB includes\n\n#  LevelDB_LIBRARIES - List of libraries when using LevelDB.\n\n#  LevelDB_FOUND     - True if LevelDB found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# caffe_clear_vars(__line __version_lines)\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindMAGMA.cmake" : {
      "ObjectId" : "2273c83108c6c3400e16bb80fc7682482085e249",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MAGMA library\n\n# This module finds an installed MAGMA library, a matrix algebra library\n\n# similar to LAPACK for GPU and multicore systems\n\n# (see http://icl.cs.utk.edu/magma/).\n\n#\n\n# This module will look for MAGMA library under /usr/local/magma by\n\n# default. To use a different installed version of the library set\n\n# environment variable MAGMA_HOME before running cmake (e.g.\n\n# MAGMA_HOME=${HOME}/lib/magma instead of default /usr/local/magma)\n\n#\n\n# This module sets the following variables:\n\n#  MAGMA_FOUND - set to true if the MAGMA library is found.\n\n#  MAGMA_LIBRARIES - list of libraries to link against to use MAGMA\n\n#  MAGMA_INCLUDE_DIR - include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindMIOpen.cmake" : {
      "ObjectId" : "8ed2888b174d92266eeb0cc8862707ab7a70e322",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find MIOpen\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  MIOPEN_ROOT_DIR:            Base directory where all MIOpen components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  MIOPEN_FOUND\n\n#  MIOPEN_INCLUDE_DIRS\n\n#  MIOPEN_LIBRARIES\n\n#  MIOPEN_LIBRARY_DIRS\n\n#\n\n# Borrowed from https://github.com/caffe2/caffe2/blob/master/cmake/Modules/FindCuDNN.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get MIOpen version\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Assemble MIOpen version\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindMKL.cmake" : {
      "ObjectId" : "3be472ca0f42ac3a8d39dab0a4a4e37f2128d6b7",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find INTEL MKL library\n\n#\n\n# This module sets the following variables:\n\n#  MKL_FOUND - set to true if a library implementing the CBLAS interface is found\n\n#  MKL_VERSION - best guess of the found mkl version\n\n#  MKL_INCLUDE_DIR - path to include dir.\n\n#  MKL_LIBRARIES - list of libraries for base mkl\n\n#  MKL_OPENMP_TYPE - OpenMP flavor that the found mkl uses: GNU or Intel\n\n#  MKL_OPENMP_LIBRARY - path to the OpenMP library the found mkl uses\n\n#  MKL_LAPACK_LIBRARIES - list of libraries to add for lapack\n\n#  MKL_SCALAPACK_LIBRARIES - list of libraries to add for scalapack\n\n#  MKL_SOLVER_LIBRARIES - list of libraries to add for the solvers\n\n#  MKL_CDFT_LIBRARIES - list of libraries to add for the solvers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Includes\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Intel Compiler Suite\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Checks\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Kernel libraries dynamically loaded\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Paths\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set default MKLRoot for Windows\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Change mklvers and iccvers when we are using MSVC instead of ICC\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# TODO: diagnostic if dir does not exist\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Try linking multiple libs\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This macro checks for the existence of the combination of libraries given by _list.\n\n# If the combination is found, this macro checks whether we can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# start checking\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Use FindOpenMP to find gomp\n",
        "Line" : 149,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Test that none of the found library names contains \"iomp\" (Intel\n\n# OpenMP). This doesn't necessarily mean that we have gomp... but it\n\n# is probably good enough since on gcc we should already have\n\n# OpenMP_CXX_FLAGS=\"-fopenmp\" and OpenMP_CXX_LIB_NAMES=\"\".\n",
        "Line" : 152,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Fin\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Check for version 10/11\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# First: search for parallelized ones with intel thread lib\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Second: search for sequential ones\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# First: search for parallelized ones with native pthread lib\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check for older versions\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Include files\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Other libraries\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# LibIRC: intel compiler always links this;\n\n# gcc does not; but mkl kernels sometimes need it.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Final\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# clear MKL_VERSION\n",
        "Line" : 336,
        "CharPositionInLine" : 20
      },
      "28" : {
        "Text" : "# Standard termination\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Do nothing if MKL_FOUND was set before!\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/Modules/FindMKLDNN.cmake" : {
      "ObjectId" : "27a0ed3cd34cf8cc0cd94ab3a5114ed747151505",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find MKLDNN\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  MKL_FOUND             : set to true if a library implementing the CBLAS interface is found\n\n#\n\n# The following are set after configuration is done:\n\n#  MKLDNN_FOUND          : set to true if mkl-dnn is found.\n\n#  MKLDNN_INCLUDE_DIR    : path to mkl-dnn include dir.\n\n#  MKLDNN_LIBRARIES      : list of libraries for mkl-dnn\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Append to mkldnn dependencies\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If we cannot find MKL, we will use the Intel MKL Small library\n\n# comes with ${MKLDNN_ROOT}/external\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# if user has multiple version under external/ then guess last\n\n# one alphabetically is \"latest\" and warn\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindMatlabMex.cmake" : {
      "ObjectId" : "28ae65e7cbbae0a28768323dcdd4d6984fca5643",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module looks for MatlabMex compiler\n\n# Defines variables:\n\n#    Matlab_DIR    - Matlab root dir\n\n#    Matlab_mex    - path to mex compiler\n\n#    Matlab_mexext - path to mexext\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress `readlink` warning if `which` returned nothing\n",
        "Line" : 29,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindNCCL.cmake" : {
      "ObjectId" : "0056b16e4d8d21639f3e921f5fb6e651e5b3ece7",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the nccl libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  NCCL_ROOT_DIR: Base directory where all NCCL components are found\n\n#  NCCL_INCLUDE_DIR: Directory where NCCL header is found\n\n#  NCCL_LIB_DIR: Directory where NCCL library is found\n\n#\n\n# The following are set after configuration is done:\n\n#  NCCL_FOUND\n\n#  NCCL_INCLUDE_DIRS\n\n#  NCCL_LIBRARIES\n\n#\n\n# The path hints include CUDA_TOOLKIT_ROOT_DIR seeing as some folks\n\n# install NCCL in the same location as the CUDA toolkit.\n\n# See https://github.com/caffe2/caffe2/issues/1601\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindNumPy.cmake" : {
      "ObjectId" : "a671494cababa39534b4ac1a8d506bbaba76d8b6",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\n\n# This module finds if NumPy is installed, and sets the following variables\n\n# indicating where it is.\n\n#\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\n\n#\n\n#  NUMPY_FOUND               - was NumPy found\n\n#  NUMPY_VERSION             - the version of NumPy found as a string\n\n#  NUMPY_VERSION_MAJOR       - the major version number of NumPy\n\n#  NUMPY_VERSION_MINOR       - the minor version number of NumPy\n\n#  NUMPY_VERSION_PATCH       - the patch version number of NumPy\n\n#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601\n\n#  NUMPY_INCLUDE_DIR         - path to the NumPy include files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindNuma.cmake" : {
      "ObjectId" : "63fbe9014c160454bcf284e286100eae4c11b698",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Numa libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  NUMA_ROOT_DIR:    Base directory where all Numa components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  NUMA_FOUND\n\n#  Numa_INCLUDE_DIR\n\n#  Numa_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindOpenBLAS.cmake" : {
      "ObjectId" : "70574ab95b0f07b58b25071b5f274cd1cf0311bb",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Check include files\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check libraries\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindOpenMP.cmake" : {
      "ObjectId" : "5aace851397cc51c0f40bfc1e08a463c27b2c43a",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindOpenMP\n\n# ----------\n\n#\n\n# Finds OpenMP support\n\n#\n\n# This module can be used to detect OpenMP support in a compiler.  If\n\n# the compiler supports OpenMP, the flags required to compile with\n\n# OpenMP support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support OpenMP.\n\n#\n\n# Variables\n\n# ^^^^^^^^^\n\n#\n\n# The module exposes the components ``C``, ``CXX``, and ``Fortran``.\n\n# Each of these controls the various languages to search OpenMP support for.\n\n#\n\n# Depending on the enabled components the following variables will be set:\n\n#\n\n# ``OpenMP_FOUND``\n\n#   Variable indicating that OpenMP flags for all requested languages have been found.\n\n#   If no components are specified, this is true if OpenMP settings for all enabled languages\n\n#   were detected.\n\n# ``OpenMP_VERSION``\n\n#   Minimal version of the OpenMP standard detected among the requested languages,\n\n#   or all enabled languages if no components were specified.\n\n#\n\n# This module will set the following variables per language in your\n\n# project, where ``<lang>`` is one of C, CXX, or Fortran:\n\n#\n\n# ``OpenMP_<lang>_FOUND``\n\n#   Variable indicating if OpenMP support for ``<lang>`` was detected.\n\n# ``OpenMP_<lang>_FLAGS``\n\n#   OpenMP compiler flags for ``<lang>``, separated by spaces.\n\n#\n\n# For linking with OpenMP code written in ``<lang>``, the following\n\n# variables are provided:\n\n#\n\n# ``OpenMP_<lang>_LIB_NAMES``\n\n#   :ref:`;-list <CMake Language Lists>` of libraries for OpenMP programs for ``<lang>``.\n\n# ``OpenMP_<libname>_LIBRARY``\n\n#   Location of the individual libraries needed for OpenMP support in ``<lang>``.\n\n# ``OpenMP_<lang>_LIBRARIES``\n\n#   A list of libraries needed to link with OpenMP code written in ``<lang>``.\n\n#\n\n# Additionally, the module provides :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``OpenMP::OpenMP_<lang>``\n\n#   Target for using OpenMP from ``<lang>``.\n\n#\n\n# Specifically for Fortran, the module sets the following variables:\n\n#\n\n# ``OpenMP_Fortran_HAVE_OMPLIB_HEADER``\n\n#   Boolean indicating if OpenMP is accessible through ``omp_lib.h``.\n\n# ``OpenMP_Fortran_HAVE_OMPLIB_MODULE``\n\n#   Boolean indicating if OpenMP is accessible through the ``omp_lib`` Fortran module.\n\n#\n\n# The module will also try to provide the OpenMP version variables:\n\n#\n\n# ``OpenMP_<lang>_SPEC_DATE``\n\n#   Date of the OpenMP specification implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION_MAJOR``\n\n#   Major version of OpenMP implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION_MINOR``\n\n#   Minor version of OpenMP implemented by the ``<lang>`` compiler.\n\n# ``OpenMP_<lang>_VERSION``\n\n#   OpenMP version implemented by the ``<lang>`` compiler.\n\n#\n\n# The specification date is formatted as given in the OpenMP standard:\n\n# ``yyyymm`` where ``yyyy`` and ``mm`` represents the year and month of\n\n# the OpenMP specification implemented by the ``<lang>`` compiler.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if() recognizes numbers and booleans\n\n# if() quoted variables not dereferenced\n\n# if IN_LIST\n",
        "Line" : 78,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "# AppleClang may need a header file, search for omp.h with hints to brew\n\n# default include dir\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Cray compiler activate OpenMP with -h omp, which is enabled by default.\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If we know the correct flags, use those\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Fall back to reasonable default tries otherwise\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# sample openmp source code to test\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# in Fortran, an implementation may provide an omp_lib.h header\n\n# or omp_lib module, or both (OpenMP standard, section 3.1)\n\n# Furthmore !$ is the Fortran equivalent of #ifdef _OPENMP (OpenMP standard, 2.2.2)\n\n# Without the conditional compilation, some compilers (e.g. PGI) might compile OpenMP code\n\n# while not actually enabling OpenMP, building code sequentially\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# NOTE [ Linking both MKL and OpenMP ]\n\n#\n\n# It is crucial not to link two `libomp` libraries together, even when they\n\n# are both Intel or GNU. Otherwise, you will end up with this nasty error,\n\n# and may get incorrect results.\n\n#\n\n#   OMP: Error #15: Initializing libomp.dylib, but found libiomp5.dylib\n\n#   already initialized.\n\n#\n\n#   OMP: Hint This means that multiple copies of the OpenMP runtime have\n\n#   been linked into the program. That is dangerous, since it can degrade\n\n#   performance or cause incorrect results. The best thing to do is to\n\n#   ensure that only a single OpenMP runtime is linked into the process,\n\n#   e.g. by avoiding static linking of the OpenMP runtime in any library. As\n\n#   an unsafe, unsupported, undocumented workaround you can set the\n\n#   environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to\n\n#   continue to execute, but that may cause crashes or silently produce\n\n#   incorrect results. For more information, please see\n\n#   http://openmp.llvm.org/\n\n#\n\n# So here, before we test each flag combination, we first try directly\n\n# linking against any `libomp` MKL has found (if any). This allows us to\n\n# do sensible things in tricky (yet common) conditions like:\n\n#   - using `clang` (so no native GNU OpenMP), and\n\n#   - having `brew` `libomp` installed at `/usr/local/`, and\n\n#   - having `conda` `mkl` installed at `$HOME/conda/`, with includes a copy\n\n#     of `libiomp5`.\n\n# Rather than blindly picking one, we pick what ever `FindMKL.cmake` choses\n\n# to avoid conflicts.\n\n#\n\n# Crucially, we only do so for non-GNU compilers. For GNU ones,\n\n# `FindMKL.cmake` calls `FindOpenMP.cmake` when trying to find `gomp` and\n\n# thus will cause infinite recursion if this is not taken care of. Moreover,\n\n# for them, since the compiler provices the OpenMP library, it is most\n\n# likely that only one viable gomp library can be found in search path by\n\n# `FindOpenMP.cmake`, so the chance of having conflicts is slow.\n\n#\n\n# TODO: refactor to solve this weird dependency where\n\n#         - for non-GNU, FindOpenMP.cmake replies on FindMKL.cmake to finish first, but\n\n#         - for GNU,     FindMKL.cmake replies on FindOpenMP.cmake to finish first.\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# If we already link OpenMP via MKL, use that. Otherwise at run-time\n\n# OpenMP will complain about being initialized twice (OMP: Error #15),\n\n# can may cause incorrect behavior.\n",
        "Line" : 242,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# We do not know how to extract implicit OpenMP libraries for this compiler.\n\n# Assume that it handles them automatically, e.g. the Intel Compiler on\n\n# Windows should put the dependency in its object files.\n",
        "Line" : 326,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# LLVM 3.7 supports OpenMP 3.1, and continues to add more features to\n\n# support newer OpenMP standards in new versions.\n\n# http://releases.llvm.org/3.7.0/tools/clang/docs/ReleaseNotes.html#openmp-support\n\n#\n\n# Apple Clang 7.0 is the first version based on LLVM 3.7 or later.\n\n# https://en.wikipedia.org/wiki/Xcode#Latest_versions\n\n#\n\n# Check for separate OpenMP library on AppleClang 7+\n",
        "Line" : 335,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Preview versions\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# OpenMP 5.0 preview 1\n",
        "Line" : 440,
        "CharPositionInLine" : 17
      },
      "15" : {
        "Text" : "# Combined versions, 2.5 onwards\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# C/C++ version 2.0\n",
        "Line" : 447,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Fortran version 2.0\n",
        "Line" : 449,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Fortran version 1.1\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# C/C++ version 1.0 (there's no 1.1 for C/C++)\n",
        "Line" : 453,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Fortran version 1.0\n",
        "Line" : 455,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 21
    },
    "cmake/Modules/FindRocksDB.cmake" : {
      "ObjectId" : "e33bcce2f85faddd987511222a2076ce31ab26bb",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the RocksDB libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  ROCKSDB_ROOT_DIR:    Base directory where all RocksDB components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  ROCKSDB_FOUND\n\n#  RocksDB_INCLUDE_DIR\n\n#  RocksDB_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindSnappy.cmake" : {
      "ObjectId" : "77fd32b85a710cd4ca6ef5862109d07c8bc4efc5",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Snappy libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  SNAPPY_ROOT_DIR:    Base directory where all Snappy components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  SNAPPY_FOUND\n\n#  Snappy_INCLUDE_DIR\n\n#  Snappy_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindZMQ.cmake" : {
      "ObjectId" : "5522190f50f2516d8cd3db57c5cf66e2f032f003",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the ZMQ libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  ZMQ_ROOT_DIR:    Base directory where all ZMQ components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  ZMQ_FOUND\n\n#  ZMQ_INCLUDE_DIR\n\n#  ZMQ_LIBRARIES\n\n#  ZMQ_VERSION_MAJOR \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/Findpybind11.cmake" : {
      "ObjectId" : "7ff71b80146c20f5b7b55770d6dd78103a5ef318",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the pybind11 library and headers.\n\n#  pybind11_FOUND        - system has pybind11\n\n#  pybind11_INCLUDE_DIRS - the pybind11 include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindvecLib.cmake" : {
      "ObjectId" : "460433673626320a366d9c8bd76d9c412094947d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the vecLib libraries as part of Accelerate.framework or as standalon framework\n\n#\n\n# The following are set after configuration is done:\n\n#  VECLIB_FOUND\n\n#  vecLib_INCLUDE_DIR\n\n#  vecLib_LINKER_LIBS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules_CUDA_fix/FindCUDA.cmake" : {
      "ObjectId" : "017ea59578fe34dbca4984d09862d2359361180a",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a wrapper of the upstream `./upstream/FindCUDA.cmake` that\n\n# automatically includes `./upstream/CMakeInitializeConfigs.cmake` before\n\n# `./upstream/FindCUDA.cmake`. The `CMakeInitializeConfigs.cmake`, which is\n\n# absent in old CMake versions, creates some necessary variables for the later\n\n# to run.\n\n# See ./README.md for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules_CUDA_fix/upstream/CMakeInitializeConfigs.cmake" : {
      "ObjectId" : "5517e8f0624b1e5538b761e1f4891227007d0045",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Present in upstream, but not supported on versions of cmake we need to support\n\n# include_guard(GLOBAL)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Initializes `<_PREFIX>_<CONFIG>` variables from the corresponding\n\n# `<_PREFIX>_<CONFIG>_INIT`, for the configurations currently used.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules_CUDA_fix/upstream/FindCUDA.cmake" : {
      "ObjectId" : "e57c231039a709228a7b659c2c63c17839c0dd88",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# .. note::\n\n#\n\n#   The FindCUDA module has been superseded by first-class support\n\n#   for the CUDA language in CMake.  It is no longer necessary to\n\n#   use this module or call ``find_package(CUDA)``.  This module\n\n#   now exists only for compatibility with projects that have not\n\n#   been ported.\n\n#\n\n#   Instead, list ``CUDA`` among the languages named in the top-level\n\n#   call to the :command:`project` command, or call the\n\n#   :command:`enable_language` command with ``CUDA``.\n\n#   Then one can add CUDA (``.cu``) sources to programs directly\n\n#   in calls to :command:`add_library` and :command:`add_executable`.\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on Linux,\n\n# Windows, and macOS and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard :command:`find_package` arguments of\n\n# ``<VERSION>``, ``REQUIRED`` and ``QUIET``.  ``CUDA_FOUND`` will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify ``CUDA_TOOLKIT_ROOT_DIR`` if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and ``REQUIRED`` is specified to :command:`find_package`.  To use\n\n# a different installed version of the toolkit set the environment variable\n\n# ``CUDA_BIN_PATH`` before running cmake (e.g.\n\n# ``CUDA_BIN_PATH=/usr/local/cuda1.0`` instead of the default\n\n# ``/usr/local/cuda``) or set ``CUDA_TOOLKIT_ROOT_DIR`` after configuring.  If\n\n# you change the value of ``CUDA_TOOLKIT_ROOT_DIR``, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set ``CUDA_TOOLKIT_ROOT_DIR`` manually on certain\n\n# platforms, or to use a CUDA runtime not installed in the default\n\n# location.  In newer versions of the toolkit the CUDA library is\n\n# included with the graphics driver -- be sure that the driver version\n\n# matches what is needed by the CUDA runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# ``CUDA_ADD_EXECUTABLE``, ``CUDA_ADD_LIBRARY``, ``CUDA_COMPILE``,\n\n# ``CUDA_COMPILE_PTX``, ``CUDA_COMPILE_FATBIN``, ``CUDA_COMPILE_CUBIN``\n\n# or ``CUDA_WRAP_SRCS``::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_LINK_LIBRARIES_KEYWORD (Default \"\")\n\n#    -- The <PRIVATE|PUBLIC|INTERFACE> keyword to use for internal\n\n#       target_link_libraries calls. The default is to use no keyword which\n\n#       uses the old \"plain\" form of target_link_libraries. Note that is matters\n\n#       because whatever is used inside the FindCUDA module must also be used\n\n#       outside - the two forms of target_link_libraries cannot be mixed.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets,\n\n#      the host compiler is constructed with one or more visual studio macros\n\n#      such as $(VCInstallDir), that expands out to the path when\n\n#      the command is run from within VS.\n\n#      If the CUDAHOSTCXX environment variable is set it will\n\n#      be used as the default.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS_BLACKLIST (Default \"\")\n\n#   -- A list containing the host flags that should not be propagated when\n\n#      CUDA_PROPAGATE_HOST_FLAGS is ON.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convenience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#      Note that this is a function instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cudadevrt_LIBRARY -- Device runtime library.\n\n#                             Required for separable compilation.\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5 - 8.0.\n\n#   CUDA_nppial_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppicom_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppidei_LIBRARY  -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppif_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppig_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppim_LIBRARY    -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppist_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppisu_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_nppitc_LIBRARY   -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 9.0.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 435,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 457,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 469,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 478,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 480,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 482,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 487,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 492,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 498,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 504,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 518,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 533,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 550,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 559,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# NVCC does not think it will work if it is passed clcache.exe or sccache.exe\n\n# as the host compiler, which means that builds with CC=cl.exe won't work.\n\n# Best to just feed it whatever the actual cl.exe is as the host compiler.\n",
        "Line" : 569,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Blacklisted flags to prevent propagation\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Single config generators like Makefiles or Ninja don't usually have\n\n# CMAKE_CONFIGURATION_TYPES defined (but note that it can be defined if set by\n\n# projects or developers). Even CMAKE_BUILD_TYPE might not be defined for\n\n# single config generators (and should not be defined for multi-config\n\n# generators). To ensure we get a complete superset of all possible\n\n# configurations, we combine CMAKE_CONFIGURATION_TYPES, CMAKE_BUILD_TYPE and\n\n# all of the standard configurations, then weed out duplicates with\n\n# list(REMOVE_DUPLICATES). Looping over the unique set then ensures we have\n\n# each configuration-specific set of nvcc flags defined and marked as advanced.\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 627,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 629,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n#  End of unset()\n\n#\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n#  Start looking for things\n\n#\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 675,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Now search default paths\n",
        "Line" : 687,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 697,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Support for NVPACK\n",
        "Line" : 714,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Support for arm cross compilation\n",
        "Line" : 717,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Support for aarch64 cross compilation\n",
        "Line" : 720,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\n",
        "Line" : 734,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\n",
        "Line" : 744,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 752,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 764,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Compute the version.\n",
        "Line" : 770,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 777,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 783,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 786,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 788,
        "CharPositionInLine" : 21
      },
      "58" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 805,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 811,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 815,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 827,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 848,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\n",
        "Line" : 862,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# If not available, silently disable the option.\n",
        "Line" : 865,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 882,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 888,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\n",
        "Line" : 905,
        "CharPositionInLine" : 6
      },
      "70" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 914,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 920,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 927,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 937,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 954,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 961,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 969,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 971,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 978,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# In CUDA 9.2 cublas_device was deprecated\n",
        "Line" : 987,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# In CUDA 9.0 NPP was nppi was removed\n",
        "Line" : 992,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# In CUDA 5.5 NPP was split into 3 separate libraries.\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 1016,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 1028,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 1054,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 1064,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 1067,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 1069,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 1073,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 1079,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 1094,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1119,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 1125,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "##############################################################################\n",
        "Line" : 1134,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 1140,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1164,
        "CharPositionInLine" : 8
      },
      "99" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1171,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1177,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1182,
        "CharPositionInLine" : 8
      },
      "102" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1193,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1212,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1238,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1242,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1253,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1256,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1258,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1260,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1262,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1265,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1271,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1274,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# Put optional arguments in list.\n",
        "Line" : 1292,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\n\n# remove it from the list.\n",
        "Line" : 1294,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1304,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1309,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1313,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Emulation.\n",
        "Line" : 1315,
        "CharPositionInLine" : 4
      },
      "121" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1318,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# various macros from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# _CUDA_MSVC_HOST_COMPILER\n",
        "Line" : 1344,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1354,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1364,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\n\n# cuda_compile_* functions), need to query directory properties to get include directories\n\n# and compile definitions.\n",
        "Line" : 1367,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\n\n# include dirs set by the user, whether via directory properties or target properties\n",
        "Line" : 1376,
        "CharPositionInLine" : 4
      },
      "127" : {
        "Text" : "# Do the same thing with compile definitions\n",
        "Line" : 1381,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1386,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1396,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1399,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# STATIC\n",
        "Line" : 1405,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1411,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1413,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1428,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1439,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1442,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1446,
        "CharPositionInLine" : 6
      },
      "138" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1466,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1472,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1489,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1492,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1495,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1497,
        "CharPositionInLine" : 4
      },
      "145" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1504,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1527,
        "CharPositionInLine" : 8
      },
      "147" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1535,
        "CharPositionInLine" : 6
      },
      "148" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1548,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1566,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1577,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1581,
        "CharPositionInLine" : 31
      },
      "152" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1585,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1597,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# Convenience string for output #########################################\n",
        "Line" : 1600,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1607,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1615,
        "CharPositionInLine" : 6
      },
      "157" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1622,
        "CharPositionInLine" : 6
      },
      "158" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1639,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1652,
        "CharPositionInLine" : 6
      },
      "160" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1655,
        "CharPositionInLine" : 8
      },
      "161" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1659,
        "CharPositionInLine" : 8
      },
      "162" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1673,
        "CharPositionInLine" : 6
      },
      "163" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1678,
        "CharPositionInLine" : 6
      },
      "164" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1686,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1701,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1707,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1719,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1725,
        "CharPositionInLine" : 27
      },
      "169" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1730,
        "CharPositionInLine" : 4
      },
      "170" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1738,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1742,
        "CharPositionInLine" : 6
      },
      "172" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1750,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1755,
        "CharPositionInLine" : 6
      },
      "174" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1765,
        "CharPositionInLine" : 4
      },
      "175" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1772,
        "CharPositionInLine" : 4
      },
      "176" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1777,
        "CharPositionInLine" : 4
      },
      "177" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1783,
        "CharPositionInLine" : 6
      },
      "178" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1817,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1826,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1829,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1834,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# Add the library.\n",
        "Line" : 1838,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1845,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1860,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1870,
        "CharPositionInLine" : 0
      },
      "186" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1879,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1881,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1884,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# Add the library.\n",
        "Line" : 1888,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1895,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1904,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1914,
        "CharPositionInLine" : 0
      },
      "193" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\n",
        "Line" : 1920,
        "CharPositionInLine" : 2
      },
      "194" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1931,
        "CharPositionInLine" : 2
      },
      "195" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1934,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1942,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1951,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1960,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1969,
        "CharPositionInLine" : 0
      },
      "200" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1979,
        "CharPositionInLine" : 0
      },
      "201" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1992,
        "CharPositionInLine" : 0
      },
      "202" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 2005,
        "CharPositionInLine" : 0
      },
      "203" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a\n\n# convenience target.  You should also make clean after running this target\n\n# to get the build system to generate all the code again.\n",
        "Line" : 2011,
        "CharPositionInLine" : 2
      },
      "204" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 2022,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 205
    },
    "cmake/Modules_CUDA_fix/upstream/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "580f24a400d8c5662ec572c4631db9e3e47645d9",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Extra output\n\n#\n\n# input_file:FILEPATH=<>   Path to dependency file in makefile format\n\n#\n\n# output_file:FILEPATH=<>  Path to file with dependencies in CMake readable variable\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we check to see if we have a file, before asking if it is not a directory.\n\n# if(NOT IS_DIRECTORY \"\") will return TRUE.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/Modules_CUDA_fix/upstream/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/Modules_CUDA_fix/upstream/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "6fc2439ad8d47846e27dfac976e2d078c7887562",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 64,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 66,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 67,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 71,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 74,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 77,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 78,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in lua quotes see #16510 ).\n",
        "Line" : 79,
        "CharPositionInLine" : 75
      },
      "22" : {
        "Text" : "# string\n",
        "Line" : 80,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\n",
        "Line" : 81,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 159,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Note that this will remove all occurrences of -G.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invocation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Generate the code\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 266,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 53
    },
    "cmake/Modules_CUDA_fix/upstream/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "f1f701a7dbe9373fdad590ebe54f14219a8cfe11",
      "LastModified" : "2019-04-18T14:03:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal Volta Turing\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2 7.0 7.2 7.5\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CUDA as a language\n",
        "Line" : 20,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# See: https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This list is used to filter CUDA archs when autodetecting\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CUDA as a language\n",
        "Line" : 90,
        "CharPositionInLine" : 35
      },
      "8" : {
        "Text" : "# CUDA as a language\n",
        "Line" : 113,
        "CharPositionInLine" : 35
      },
      "9" : {
        "Text" : "# Filter unrelated content out of the output.\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Filter based on CUDA version supported archs\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 194,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 253,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 257,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 20
    },
    "cmake/Modules_CUDA_fix/upstream/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "67f6bd6f2bcd1a0313078a28a07cc584df7b885b",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindPackageHandleStandardArgs\n-----------------------------\n\nThis module provides a function intended to be used in :ref:`Find Modules`\nimplementing :command:`find_package(<PackageName>)` calls.  It handles the\n``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.\nIt also sets the ``<PackageName>_FOUND`` variable.  The package is\nconsidered found if all variables listed contain valid results, e.g.\nvalid filepaths.\n\n.. command:: find_package_handle_standard_args\n\n  There are two signatures::\n\n    find_package_handle_standard_args(<PackageName>\n      (DEFAULT_MSG|<custom-failure-message>)\n      <required-var>...\n      )\n\n    find_package_handle_standard_args(<PackageName>\n      [FOUND_VAR <result-var>]\n      [REQUIRED_VARS <required-var>...]\n      [VERSION_VAR <version-var>]\n      [HANDLE_COMPONENTS]\n      [CONFIG_MODE]\n      [FAIL_MESSAGE <custom-failure-message>]\n      )\n\n  The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all\n  the variables ``<required-var>...`` are valid and any optional\n  constraints are satisfied, and ``FALSE`` otherwise.  A success or\n  failure message may be displayed based on the results and on\n  whether the ``REQUIRED`` and/or ``QUIET`` option was given to\n  the :command:`find_package` call.\n\n  The options are:\n\n  ``(DEFAULT_MSG|<custom-failure-message>)``\n    In the simple signature this specifies the failure message.\n    Use ``DEFAULT_MSG`` to ask for a default message to be computed\n    (recommended).  Not valid in the full signature.\n\n  ``FOUND_VAR <result-var>``\n    Obsolete.  Specifies either ``<PackageName>_FOUND`` or\n    ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only\n    for compatibility with older versions of CMake and is now ignored.\n    Result variables of both names are always set for compatibility.\n\n  ``REQUIRED_VARS <required-var>...``\n    Specify the variables which are required for this package.\n    These may be named in the generated failure message asking the\n    user to set the missing variable values.  Therefore these should\n    typically be cache entries such as ``FOO_LIBRARY`` and not output\n    variables like ``FOO_LIBRARIES``.\n\n  ``VERSION_VAR <version-var>``\n    Specify the name of a variable that holds the version of the package\n    that has been found.  This version will be checked against the\n    (potentially) specified required version given to the\n    :command:`find_package` call, including its ``EXACT`` option.\n    The default messages include information about the required\n    version and the version which has been actually found, both\n    if the version is ok or not.\n\n  ``HANDLE_COMPONENTS``\n    Enable handling of package components.  In this case, the command\n    will report which components have been found and which are missing,\n    and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``\n    if any of the required components (i.e. not the ones listed after\n    the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are\n    missing.\n\n  ``CONFIG_MODE``\n    Specify that the calling find module is a wrapper around a\n    call to ``find_package(<PackageName> NO_MODULE)``.  This implies\n    a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command\n    will automatically check whether the package configuration file\n    was found.\n\n  ``FAIL_MESSAGE <custom-failure-message>``\n    Specify a custom failure message instead of using the default\n    generated message.  Not recommended.\n\nExample for the simple signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibXml2 DEFAULT_MSG\n    LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\nThe ``LibXml2`` package is considered to be found if both\n``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.\nThen also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found\nand ``REQUIRED`` was used, it fails with a\n:command:`message(FATAL_ERROR)`, independent whether ``QUIET`` was\nused or not.  If it is found, success will be reported, including\nthe content of the first ``<required-var>``.  On repeated CMake runs,\nthe same message will not be printed again.\n\nExample for the full signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibArchive\n    REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\n    VERSION_VAR LibArchive_VERSION)\n\nIn this case, the ``LibArchive`` package is considered to be found if\nboth ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.\nAlso the version of ``LibArchive`` will be checked by using the version\ncontained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,\nthe default messages will be printed.\n\nAnother example for the full signature:\n\n.. code-block:: cmake\n\n  find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n  find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\nIn this case, a ``FindAutmoc4.cmake`` module wraps a call to\n``find_package(Automoc4 NO_MODULE)`` and adds an additional search\ndirectory for ``automoc4``.  Then the call to\n``find_package_handle_standard_args`` produces a proper success/failure\nmessage.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Set up the arguments for `cmake_parse_arguments`.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check whether we are in 'simple' or 'extended' mode:\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# component handling\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# version handling:\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# exact version required\n",
        "Line" : 298,
        "CharPositionInLine" : 44
      },
      "17" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 304,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 334,
        "CharPositionInLine" : 17
      },
      "21" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 345,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Check with DEFINED as the found version may be 0.\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# print the result:\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "cmake/Modules_CUDA_fix/upstream/FindPackageMessage.cmake" : {
      "ObjectId" : "6821cee4f77a9d84c74f2c140870a2163ae5a5f0",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/ProtoBuf.cmake" : {
      "ObjectId" : "dbf101e66d77aacf58740840fd02c90374742911",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Google Protocol Buffers library and compilers and extends\n\n# the standard cmake script with version and python generation support\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Protobuf generated files triggers a deprecated atomic operation warning\n\n# so we turn it off here.\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# If we are going to link protobuf locally, we will need to turn off\n\n# shared libs build for protobuf.\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# If we are building Caffe2 as shared libs, we will also build protobuf as\n\n# shared libs.\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# We will make sure that protobuf and caffe2 uses the same msvc runtime.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Protobuf \"namespaced\" target is only added post protobuf 3.5.1. As a\n\n# result, for older versions, we will manually add alias.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# There is link error when cross compiling protoc on mobile:\n\n# https://github.com/protocolbuffers/protobuf/issues/2719\n\n# And protoc is very unlikely needed for mobile builds.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Main entry for protobuf. If we are building on Android, iOS or we have hard\n\n# coded BUILD_CUSTOM_PROTOBUF, we will hard code the use of custom protobuf\n\n# in the submodule.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# There is link error when cross compiling protoc on mobile:\n\n# https://github.com/protocolbuffers/protobuf/issues/2719\n\n# And protoc is very unlikely needed for mobile builds.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# TODO(jiayq): enable this in the future, when Jenkins Mac support is\n\n# properly set up with protobuf installs.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# message(FATAL_ERROR\n\n#     \"Protobuf cannot be found. Caffe2 will have to build with libprotobuf. \"\n\n#     \"Please set the proper paths so that I can find protobuf correctly.\")\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Protobuf generated files use <> as inclusion path, so maybe we should use\n\n# SYSTEM inclusion path. But we need these include dirs to be found before\n\n# other protobuf include dirs in Anaconda\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If Protobuf_VERSION is known (true in most cases, false if we are building\n\n# local protobuf), then we will add a protobuf version check in\n\n# Caffe2Config.cmake.in.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Figure out which protoc to use.\n\n# If CAFFE2_CUSTOM_PROTOC_EXECUTABLE is set, we assume the user knows\n\n# what they're doing and we blindly use the specified protoc. This\n\n# is typically the case when cross-compiling where protoc must be\n\n# compiled for the host architecture and libprotobuf must be\n\n# compiled for the target architecture.\n\n# If CAFFE2_CUSTOM_PROTOC_EXECUTABLE is NOT set, we use the protoc\n\n# target that is built as part of including the protobuf project.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Modification of standard 'protobuf_generate_cpp()' with output dir parameter and python support\n\n# Usage:\n\n#   caffe2_protobuf_generate_cpp_py(<srcs_var> <hdrs_var> <python_var> <proto_files>)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add CAFFE2_API prefix to protobuf classes and methods in all cases\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Note: the following depends on PROTOBUF_PROTOC_EXECUTABLE. This\n\n# is done to make sure protoc is built before attempting to\n\n# generate sources if we're using protoc from the third_party\n\n# directory and are building it as part of the Caffe2 build. If\n\n# points to an existing path, it is a no-op.\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# We need to rewrite the pb.h files to route GetEmptyStringAlreadyInited\n\n# through our wrapper in proto_utils so the memory location test\n\n# is correct.\n",
        "Line" : 181,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# If we remove all reference to these pb.h files from external\n\n# libraries and binaries this rewrite can be removed.\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 19
    },
    "cmake/ProtoBufPatch.cmake" : {
      "ObjectId" : "dfe06e089cc4fe25860c603d5585787ff2ff4b7b",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake file to replace the string contents in ONNX, Caffe, and Caffe2 proto.\n\n# Usage example:\n\n#   cmake -DFILENAME=caffe2.pb.h -P ProtoBufPatch.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# https://github.com/protocolbuffers/protobuf/commit/0400cca3236de1ca303af38bf81eab332d042b7c\n\n# changes PROTOBUF_CONSTEXPR to constexpr, which breaks windows\n\n# build.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Insert \"const ::std::string& GetEmptyStringAlreadyInited();\" within\n\n# the namespace and make sure we only do it once in the file. Unfortunately\n\n# using string(REPLACE ...) doesn't work because it will replace at all\n\n# locations and there might be multiple declarations of the namespace\n\n# depending on how the proto is structured.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The moving constructor is defined in the header file, which will cause\n\n# a link error that claims that the vftable is not found. Luckily, we\n\n# could move the definition into the source file to solve the problem.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Summary.cmake" : {
      "ObjectId" : "0793526d64b30d137165b662b097d3bc1121e06c",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prints accumulated Caffe2 configuration summary\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "b0f931f11c9b3f563179b49249a7f9fe6fa984b0",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Exclude and prepend functionalities\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Clears variables from list\n\n# Usage:\n\n#   caffe_clear_vars(<variables_list>)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Prints list element per line\n\n# Usage:\n\n#   caffe_print_list(<list>)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Reads set of version defines from the header file\n\n# Usage:\n\n#   caffe_parse_header(<file> <define1> <define2> <define3> ..)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Reads single version define from the header file and parses it\n\n# Usage:\n\n#   caffe_parse_header_single_define(<library_name> <file> <define_name>)\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "################################################################################################\n\n# Parses a version string that might have values beyond major, minor, and patch\n\n# and set version variables for the library.\n\n# Usage:\n\n#   caffe2_parse_version_str(<library_name> <version_string>)\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###\n\n# Removes common indentation from a block of text to produce code suitable for\n\n# setting to `python -c`, or using with pycmd. This allows multiline code to be\n\n# nested nicely in the surrounding code structure.\n\n#\n\n# This function respsects PYTHON_EXECUTABLE if it defined, otherwise it uses\n\n# `python` and hopes for the best. An error will be thrown if it is not found.\n\n#\n\n# Args:\n\n#     outvar : variable that will hold the stdout of the python command\n\n#     text   : text to remove indentation from\n\n#\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use PYTHON_EXECUTABLE if it is defined, otherwise default to python\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Remove supurflous newlines (artifacts of print)\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Use PYTHON_EXECUTABLE if it is defined, otherwise default to python\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# run the actual command\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Remove supurflous newlines (artifacts of print)\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "###\n\n# Helper function to run `python -c \"<cmd>\"` and capture the results of stdout\n\n#\n\n# Runs a python command and populates an outvar with the result of stdout.\n\n# Common indentation in the text of `cmd` is removed before the command is\n\n# executed, so the caller does not need to worry about indentation issues.\n\n#\n\n# This function respsects PYTHON_EXECUTABLE if it defined, otherwise it uses\n\n# `python` and hopes for the best. An error will be thrown if it is not found.\n\n#\n\n# Args:\n\n#     outvar : variable that will hold the stdout of the python command\n\n#     cmd    : text representing a (possibly multiline) block of python code\n\n#\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Remove supurflous newlines (artifacts of print)\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "###\n\n# Helper function to print out everything that cmake knows about a target\n\n#\n\n# Copied from https://stackoverflow.com/questions/32183975/how-to-print-all-the-properties-of-a-target-in-cmake\n\n# This isn't called anywhere, but it's very useful when debugging cmake\n\n# NOTE: This doesn't work for INTERFACE_LIBRARY or INTERFACE_LINK_LIBRARY targets\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Get a list of all cmake properties TODO cache this lazily somehow\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cmake/Whitelist.cmake" : {
      "ObjectId" : "a283c151f4b477c2e03f558e85ce83f1e2d34da6",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First read the whitelist file and break it by line.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convert file contents into a CMake list\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/public/LoadHIP.cmake" : {
      "ObjectId" : "3314a1d58261b0251dbd684a04c0b3435a742b90",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HIP_PATH\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# HCC_PATH\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# HSA_PATH\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ROCBLAS_PATH\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ROCSPARSE_PATH\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ROCFFT_PATH\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# HIPSPARSE_PATH\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# THRUST_PATH\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# HIPRAND_PATH\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ROCRAND_PATH\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# MIOPENGEMM\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# MIOPEN_PATH\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add HIP to the CMAKE Module Path\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Disable Asserts In Code (Can't use asserts on HIP stack.)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Find the HIP Package\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "### Remove setting of Flags when FindHIP.CMake PR #558 is accepted.###\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#find_package_and_print_version(hipsparse REQUIRED)\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# TODO: hip_hcc has an interface include flag \"-hc\" which is only\n\n# recognizable by hcc, but not gcc and clang. Right now in our\n\n# setup, hcc is only used for linking, but it should be used to\n\n# compile the *_hip.cc files as well.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# TODO: miopen_LIBRARIES should return fullpath to the library file,\n\n# however currently it's just the lib name\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Necessary includes for building PyTorch since we include HIP headers that depend on hcc/hsa headers.\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 20
    },
    "cmake/public/cuda.cmake" : {
      "ObjectId" : "a4d87e9e2c46e6815475c8023e4adcf7a8affc97",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ cuda\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Poor man's include guard\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# sccache is only supported in CMake master and not in the newest official\n\n# release (3.11.3) yet. Hence we need our own Modules_CUDA_fix to enable sccache.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we dont want to statically link cudart, because we rely on it's dynamic linkage in\n\n# python (follow along torch/cuda/__init__.py and usage of cudaGetErrorName).\n\n# Technically, we can link cudart here statically, and link libtorch_python.so\n\n# to a dynamic libcudart.so, but that's just wasteful\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Find CUDA.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sometimes, we may mismatch nvcc with the CUDA headers we are\n\n# compiling with, e.g., if a ccache nvcc is fed to us by CUDA_NVCC_EXECUTABLE\n\n# but the PATH is not consistent with CUDA_HOME.  It's better safe\n\n# than sorry: make sure everything is consistent.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Force CUDA to be processed for again next time\n\n# TODO: I'm not sure if this counts as an implementation detail of\n\n# FindCUDA\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Not strictly necessary, but for good luck.\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Error out\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Find cuDNN.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Optionally, find TensorRT\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ Extract versions\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Get cuDNN version\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Assemble cuDNN version\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ---[ CUDA libraries wrapper\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# find libcuda.so and lbnvrtc.so\n\n# For libcuda.so, we will find it under lib, lib64, and then the\n\n# stubs folder, in case we are building on a system that does not\n\n# have cuda driver installed. On windows, we also search under the\n\n# folder lib/x64.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create new style imported libraries.\n\n# Several of these libraries have a hardcoded path if CAFFE2_STATIC_LINK_CUDA\n\n# is set. This path is where sane CUDA installations have their static\n\n# libraries installed. This flag should only be used for binary builds, so\n\n# end-users should never have this flag set.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# cuda\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# cudart. CUDA_LIBRARIES is actually a list, so we will make an interface\n\n# library.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# cudnn\n\n# static linking is handled by USE_STATIC_CUDNN environment variable\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# curand\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# cufft. CUDA_CUFFT_LIBRARIES is actually a list, so we will make an\n\n# interface library similar to cudart.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# TensorRT\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# cublas. CUDA_CUBLAS_LIBRARIES is actually a list, so we will make an\n\n# interface library similar to cudart.\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# nvrtc\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Note: in theory, we can add similar dependent library wrappers. For\n\n# now, Caffe2 only uses the above libraries, so we will only wrap\n\n# these.\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Special care for windows platform: we know that 32-bit windows does not\n\n# support cuda.\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# CUDA 7.x\n",
        "Line" : 302,
        "CharPositionInLine" : 30
      },
      "28" : {
        "Text" : "# CUDA 8.x\n",
        "Line" : 305,
        "CharPositionInLine" : 34
      },
      "29" : {
        "Text" : "# CUDA 8 may complain that sm_20 is no longer supported. Suppress the\n\n# warning for now.\n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Add onnx namepsace definition to nvcc\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# CUDA 9.0 & 9.1 require GCC version <= 5\n\n# Although they support GCC 6, but a bug that wasn't fixed until 9.2 prevents\n\n# them from compiling the std::tuple header of GCC 6.\n\n# See Sec. 2.2.1 of\n\n# https://developer.download.nvidia.com/compute/cuda/9.2/Prod/docs/sidebar/CUDA_Toolkit_Release_Notes.pdf\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# CUDA 8.0 requires GCC version <= 5\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# setting nvcc arch flags\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# disable some nvcc diagnostic that apears in boost, glog, glags, opencv, etc.\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Set C++11 support\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Debug and Release symbol support\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# -G enables device code debugging symbols\n",
        "Line" : 373,
        "CharPositionInLine" : 42
      },
      "38" : {
        "Text" : "# Set expt-relaxed-constexpr to suppress Eigen warnings\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Set expt-extended-lambda to support lambda on device\n",
        "Line" : 379,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 40
    },
    "cmake/public/gflags.cmake" : {
      "ObjectId" : "ac4002efc08884cb73040addcb6d555dd9897b04",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ gflags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We will try to use the config mode first, and then manual find.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# - Try to find GFLAGS in the legacy way.\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GFLAGS_ROOT_DIR: Base directory where all GFLAGS components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GFLAGS_FOUND\n\n#  GFLAGS_INCLUDE_DIRS\n\n#  GFLAGS_LIBRARIES\n\n#  GFLAGS_LIBRARYRARY_DIRS\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# After above, we should have the gflags target now.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/public/glog.cmake" : {
      "ObjectId" : "f719da3e1fab8e818ca9477bac2941144d8f9951",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ glog\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We will try to use the config mode first, and then manual find.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR: Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n\n#  GLOG_LIBRARYRARY_DIRS\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# After above, we should have the glog::glog target now.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/public/mkl.cmake" : {
      "ObjectId" : "2fd0406de5308c6864e73d22a3a9ae4d54c8935d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/public/mkldnn.cmake" : {
      "ObjectId" : "b11b523e79b388c7468ab9b95ba34acdc5b6a7a1",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/public/protobuf.cmake" : {
      "ObjectId" : "094d222b189d0fe7edaddacaef5c82c9d0e6f823",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Protobuf\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We will try to use the config mode first, and then manual find.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Hooray. This is the most ideal situation, meaning that you either have a\n\n# Protobuf config file installed (like on Windows), or you are using a\n\n# modern CMake that ships with a FindProtobuf.cmake file that produces\n\n# modern targets.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If the modern targets are not present, we will generate them for you for\n\n# backward compatibility. This is backported from CMake's new FindProtobuf.cmake\n\n# content.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# After above, we should have the protobuf related target now.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/public/threads.cmake" : {
      "ObjectId" : "f223f497c76f431f30ab5378b48136ee4f778005",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For newer CMake, Threads::Threads is already defined. Otherwise, we will\n\n# provide a backward compatible wrapper for Threads::Threads.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/public/utils.cmake" : {
      "ObjectId" : "00c62a89b222a36c0133009603e6809b9d3e4c40",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n# Macro to update cached options.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Add an interface library definition that is dependent on the source.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Depending on the nature of the source library as well as the compiler,\n\n# determine the needed compilation flags.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Depending on the type of the source library, we will set up the\n\n# link command for the specific SRC library.\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# In the case of static library, we will need to add whole-static flags.\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# In MSVC, we will add whole archive in default.\n",
        "Line" : 29,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Assume everything else is like gcc\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Link all interface link libraries of the src target as well.\n\n# For static library, we need to explicitly depend on all the libraries\n\n# that are the dependent library of the source library. Note that we cannot\n\n# use the populated INTERFACE_LINK_LIBRARIES property, because if one of the\n\n# dependent library is not a target, cmake creates a $<LINK_ONLY:src> wrapper\n\n# and then one is not able to find target \"src\". For more discussions, check\n\n#   https://gitlab.kitware.com/cmake/cmake/issues/15415\n\n#   https://cmake.org/pipermail/cmake-developers/2013-May/019019.html\n\n# Specifically the following quote\n\n#\n\n# \"\"\"\n\n# For STATIC libraries we can define that the PUBLIC/PRIVATE/INTERFACE keys\n\n# are ignored for linking and that it always populates both LINK_LIBRARIES\n\n# LINK_INTERFACE_LIBRARIES.  Note that for STATIC libraries the\n\n# LINK_LIBRARIES property will not be used for anything except build-order\n\n# dependencies.\n\n# \"\"\"\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Link all interface link libraries of the src target as well.\n\n# For shared libraries, we can simply depend on the INTERFACE_LINK_LIBRARIES\n\n# property of the target.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# For all other interface properties, manually inherit from the source target.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "##############################################################################\n\n# Creating a Caffe2 binary target with sources specified with relative path.\n\n# Usage:\n\n#   caffe2_binary_target(target_name_or_src <src1> [<src2>] [<src3>] ...)\n\n# If only target_name_or_src is specified, this target is build with one single\n\n# source file and the target name is autogen from the filename. Otherwise, the\n\n# target name is given by the first argument and the rest are the source files\n\n# to build the target.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# https://cmake.org/cmake/help/latest/command/function.html\n\n# Checking that ARGC is greater than # is the only way to ensure\n\n# that ARGV# was passed to the function as an extra argument.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# If we have Caffe2_MODULES defined, we will also link with the modules.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "##############################################################################\n\n# Multiplex between loading executables for CUDA versus HIP (AMD Software Stack).\n\n# Usage:\n\n#   torch_cuda_based_add_executable(cuda_target)\n\n#\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##############################################################################\n\n# Multiplex between adding libraries for CUDA versus HIP (AMD Software Stack).\n\n# Usage:\n\n#   torch_cuda_based_add_library(cuda_target)\n\n#\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##############################################################################\n\n# Get the NVCC arch flags specified by TORCH_CUDA_ARCH_LIST and CUDA_ARCH_NAME.\n\n# Usage:\n\n#   torch_cuda_get_nvcc_gencode_flag(variable_to_store_flags)\n\n#\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# setting nvcc arch flags\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Invoke cuda_select_nvcc_arch_flags from proper cmake FindCUDA.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "##############################################################################\n\n# Add standard compile options.\n\n# Usage:\n\n#   torch_compile_options(lib_name)\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##############################################################################\n\n# Set standard target properties.\n\n# Usage:\n\n#   torch_set_target_props(lib_name)\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "docs/Makefile" : {
      "ObjectId" : "61b80ae09e565600a8799b635fd33fa3ac3424e1",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Manually fix because Zeal doesn't deal well with `icon.png`-only at 2x resolution.\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# stable differs from `make html` in two ways:\n\n# 1) The stable logo is used instead of the unstable logo\n\n# 2) There will not be a link to the stable docs.\n\n# See conf.py for more details.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "docs/cpp/Makefile" : {
      "ObjectId" : "689743bbd4372e2d56428c708b748241dc48a4fa",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Clean up sphinx and doxygen build artifacts.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Clean up exhale generated api.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "modules/CMakeLists.txt" : {
      "ObjectId" : "9a5e7279ebe7877792a320e2c96b0372b35fb57e",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finally, set Caffe2_MODULES to parent scope.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "modules/detectron/CMakeLists.txt" : {
      "ObjectId" : "5d99b454ee7631c5c42e85e9da2bd0d278879320",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note(ilijar): Since Detectron ops currently have no\n\n# CPU implementation, we only build GPU ops for now.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "modules/module_test/CMakeLists.txt" : {
      "ObjectId" : "591875fcf21a62f3b21106cc78eefce2ce8cf72d",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we are building the standalone module, we set the proper cmake variables.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "modules/observers/CMakeLists.txt" : {
      "ObjectId" : "7c33fd7ebf64af303b0630f6cd98c0d50e153bd1",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "modules/rocksdb/CMakeLists.txt" : {
      "ObjectId" : "447d32845c4fbb788deb26708c421f9f8a82a336",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ RocksDB module\n\n# In addition to being a useful module itself, RocksDB is also an exemplar\n\n# case where show how one should built a Caffe2 module inside the Caffe2\n\n# repository.\n\n#\n\n# This cmake file achieves two build modes:\n\n# (1) If one is invoking the main Caffe2 build, we will check a USE_* option,\n\n#     in this case USE_ROCKSDB, to test if we want to build this module.\n\n# (2) if we are building it in a standalone way, we will find the preinstalled\n\n#     Caffe2 library, and then build the library and install it.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ First, determine if we are building with the main repo or not.\n\n# This is guarded by the CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO variable. It then\n\n# routes build to two paths:\n\n# (1) When we are building with the main repo, the caffe2_library is going to\n\n#     be already defined, and all related paths will be defined too. So we will\n\n#     simply test if the main repo build wants to build this module, in our\n\n#     case by the variable \"USE_ROCKSDB\".\n\n# (2) When we are not building with the main repo, we will need to do the usual\n\n#     cmake setup: version checks, project options, find dependent packages,\n\n#     etc.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Second, find dependencies.\n\n# This one should be similar to the standard dependency discovery in normal\n\n# cmake. Note that for modules that are located in the Caffe2 repository,\n\n# cmake related files, such as FindRocksDB in this case, should live in the\n\n# cmake/ folder under root.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Third, create the CMake target.\n\n# The key to note is that this library will need to depend on caffe2_library,\n\n# which is the main lib of Caffe2. If your library explicitly depends on cuda,\n\n# then you will need to depend on the caffe2_gpu_library as well.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Last, Append the library to Caffe2_MAIN_LIBS, if we are building with\n\n# the main repo.\n\n# The purpose of this is that, for all binaries built in the Caffe2 main repo,\n\n# they will be built with the first class modules that are built. As a result,\n\n# these binaries will not need to explicitly load these modules before using\n\n# them.\n\n# Note(jiayq): this also depends on a separate cmake move to reorg test builds\n\n# and binary builds after modules. When it is done, this note should be removed.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "test/cpp/api/CMakeLists.txt" : {
      "ObjectId" : "daf50e5d0cf5a3f45c459fb73d3e88493b5f0b59",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clang has an unfixed bug leading to spurious missing braces\n\n# warnings, see https://bugs.llvm.org/show_bug.cgi?id=21629\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# Considered to be flaky.  See the discussion at\n\n# https://github.com/pytorch/pytorch/pull/9608\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# gcc gives nonsensical warnings about variadic.h\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "test/cpp/jit/CMakeLists.txt" : {
      "ObjectId" : "66860ebef0ab81ea32924d794b1ec6dc72501a81",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/custom_operator/CMakeLists.txt" : {
      "ObjectId" : "65a4ac35a72ccb00371d0776b8d4e4e1f45121fa",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Basic CMake setup\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "torch/CMakeLists.txt" : {
      "ObjectId" : "4dc88415ed08c061342a8ccf74d2c2b4502a9c20",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# until they can be unified, keep these lists synced with setup.py\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Clang has an unfixed bug leading to spurious missing braces\n\n# warnings, see https://bugs.llvm.org/show_bug.cgi?id=21629\n",
        "Line" : 301,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Considered to be flaky.  See the discussion at\n\n# https://github.com/pytorch/pytorch/pull/9608\n",
        "Line" : 308,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# dense\n",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Prevent the unused functions being optimized away\n\n# Otherwise torch.dll will be linked without caffe2_gpu.dll\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake config for external projects.\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOTE: these are at the front, in case there's another cuDNN in\n\n# CUDA path.\n\n# Basically, this is the case where $CUDA_HOME/lib64 has an old or\n\n# incompatible libcudnn.so, which we can inadvertently link to if\n\n# we're not careful.\n",
        "Line" : 638,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# For Declarations.yaml dependency\n",
        "Line" : 703,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "torch/lib/THD/CMakeLists.txt" : {
      "ObjectId" : "3ef05d3d438cc4fda682ce6e901aa90e86616096",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(jiayq): once we have unified CMake entry, remove this module path.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Helper functions\n\n################################################################################\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A helper that excludes all files that contain dir_name in their file path\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "################################################################################\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Can be compiled standalone\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# provides \"ATen/TypeExtendedInterface.h\" to ATen.h\n",
        "Line" : 117,
        "CharPositionInLine" : 31
      },
      "6" : {
        "Text" : "# provides <TH/THGeneral.h> to THC.h\n",
        "Line" : 118,
        "CharPositionInLine" : 38
      },
      "7" : {
        "Text" : "# TODO we shouldn't need the USE_CUDA condition here. See https://github.com/pytorch/pytorch/issues/13101\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Test executables\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Prepare test names\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "torch/lib/c10d/CMakeLists.txt" : {
      "ObjectId" : "be049adf3ff55eb1710354079970bb6c3e1d48b0",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find modules.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# provides \"ATen/TypeExtendedInterface.h\" to ATen.h\n",
        "Line" : 103,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# provides <TH/THGeneral.h> to THC.h\n",
        "Line" : 104,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# For <c10d/...>\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For torch/csrc/utils/hash.h\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install all header files that were prepared in the build directory\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "torch/lib/c10d/example/CMakeLists.txt" : {
      "ObjectId" : "ba5f058148099ef2098b3785a56c1e92b70e4d71",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "torch/lib/c10d/test/CMakeLists.txt" : {
      "ObjectId" : "ea582ce281ba77f8b895abd5abcb114830033b4c",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "torch/lib/libshm/CMakeLists.txt" : {
      "ObjectId" : "4e437dd71f57d12b4edac12ce0f94bf27a7e66c6",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Flags\n\n# When using MSVC\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we want to respect the standard, and we are bored of those **** .\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# provides \"libshm/libshm.h\"\n",
        "Line" : 28,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : "# provides <TH/THGeneral.h> to THC.h\n",
        "Line" : 29,
        "CharPositionInLine" : 38
      },
      "4" : {
        "Text" : "### Torch packages supposes libraries prefix is \"lib\"\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# https://github.com/libgit2/libgit2/issues/2128#issuecomment-35649830\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Sometimes, rt won't be available unless you also link against\n\n# pthreads.  In this case, the NEED_LIBRT test will fail, because\n\n# check_library_exists isn't going to build the C file with the\n\n# pthread file, and the build will fail, setting NEED_LIBRT to\n\n# false (this is TOTALLY BOGUS, this situation should be an error\n\n# situation, not a \"oh, I guess rt is not supported\", but it's\n\n# not too easy to distinguish between the two situations).  So,\n\n# if it fails, we try again, but this time also with a dependency\n\n# on pthread.  If it succeeds this time, we know we not only need\n\n# an rt dependency, but we also need pthread.\n\n#\n\n# BTW, this test looks for shm_open, because that's what we\n\n# really care about (not clock_gettime).  I didn't change the\n\n# site above though in case there was a reason we were testing\n\n# against clock_gettime. In principle, the choice of symbol you\n\n# test for shouldn't matter.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "torch/lib/libshm_windows/CMakeLists.txt" : {
      "ObjectId" : "29736c4b6a6c7279f07f4ee95ff81091c155b67b",
      "LastModified" : "2019-04-18T08:03:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# provides \"libshm/libshm.h\"\n",
        "Line" : 14,
        "CharPositionInLine" : 26
      },
      "1" : {
        "Text" : "# provides <TH/THGeneral.h> to THC.h\n",
        "Line" : 15,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 137,
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 15305
}