{
  "Repository" : "10304094",
  "Revision" : "HEAD",
  "ObjectId" : "15efac96058b501082fe5f7c1acfbeb7ead95b62",
  "CommitTime" : "2016-11-03T10:25:28Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "87c70e6e56d0c7037fdb7d610227d4e671c4e0b3",
      "LastModified" : "2015-01-21T17:38:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#On new versions of Clang, MATLAB requires C++11.\n\n#I enable it on all Clangs\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#this should set explictly the option in xcode. Unfortunately it does not work.\n",
        "Line" : 10,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 2
    },
    "libraries/CMakeLists.txt" : {
      "ObjectId" : "8030799b276b13a5b809e3216d61a6692b65af3f",
      "LastModified" : "2015-12-30T17:21:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Jorhabib Eljaik\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MATLAB and YARP is searched before adding the different modules because they will be used by all of them\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fail if YARP is not compiled as shared library\n\n# see https://github.com/robotology/codyco-modules/issues/44\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#### Settings for rpath\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add the option to enable RPATH\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# import math symbols from standard cmath\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##if you export the mdl / slx library, remeber to call this command in matlab before saving it\n\n# set_param(gcs, 'EnableLBRepository','on');\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The following line is to properly configure the installation script of the toolbox\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install configuration files\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#if MAJOR >= 2014 && MINOR >= b\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "libraries/cmake/FindEigen3.cmake" : {
      "ObjectId" : "3519a6c152575de8608226a359952c7ed926a148",
      "LastModified" : "2016-05-25T07:48:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n\n#\n\n# This module reads hints about search locations from \n\n# the following enviroment variables:\n\n#\n\n# EIGEN3_ROOT\n\n# EIGEN3_ROOT_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "libraries/cmake/FindMatlab.cmake" : {
      "ObjectId" : "373aa38a3620c9d18984ce092890690fe57fa118",
      "LastModified" : "2016-11-03T10:25:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindMatlab\n\n# ----------\n\n#\n\n# Finds Matlab installations and provides Matlab tools and libraries to cmake.\n\n#\n\n# This package first intention is to find the libraries associated with Matlab\n\n# in order to be able to build Matlab extensions (mex files). It can also be\n\n# used:\n\n#\n\n# * run specific commands in Matlab\n\n# * declare Matlab unit test\n\n# * retrieve various information from Matlab (mex extensions, versions and\n\n#   release queries, ...)\n\n#\n\n# The module supports the following components:\n\n#\n\n# * ``MX_LIBRARY`` and ``ENG_LIBRARY`` respectively the MX and ENG libraries of\n\n#   Matlab\n\n# * ``MAIN_PROGRAM`` the Matlab binary program.\n\n#\n\n# .. note::\n\n#\n\n#   The version given to the :command:`find_package` directive is the Matlab\n\n#   **version**, which should not be confused with the Matlab *release* name\n\n#   (eg. `R2014`).\n\n#   The :command:`matlab_get_version_from_release_name` and\n\n#   :command:`matlab_get_release_name_from_version` allow a mapping\n\n#   from the release name to the version.\n\n#\n\n# The variable :variable:`Matlab_ROOT_DIR` may be specified in order to give\n\n# the path of the desired Matlab version. Otherwise, the behaviour is platform\n\n# specific:\n\n#\n\n# * Windows: The installed versions of Matlab are retrieved from the\n\n#   Windows registry\n\n# * OS X: The installed versions of Matlab are given by the MATLAB\n\n#   paths in ``/Application``. If no such application is found, it falls back\n\n#   to the one that might be accessible from the PATH.\n\n# * Unix: The desired Matlab should be accessible from the PATH.\n\n#\n\n# Additional information is provided when :variable:`MATLAB_FIND_DEBUG` is set.\n\n# When a Matlab binary is found automatically and the ``MATLAB_VERSION``\n\n# is not given, the version is queried from Matlab directly.\n\n# On Windows, it can make a window running Matlab appear.\n\n#\n\n# The mapping of the release names and the version of Matlab is performed by\n\n# defining pairs (name, version).  The variable\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS` may be provided before the call to\n\n# the :command:`find_package` in order to handle additional versions.\n\n#\n\n# A Matlab scripts can be added to the set of tests using the\n\n# :command:`matlab_add_unit_test`. By default, the Matlab unit test framework\n\n# will be used (>= 2013a) to run this script, but regular ``.m`` files\n\n# returning an exit code can be used as well (0 indicating a success).\n\n#\n\n# Module Input Variables\n\n# ^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Users or projects may set the following variables to configure the module\n\n# behaviour:\n\n#\n\n# :variable:`Matlab_ROOT_DIR`\n\n#   the root of the Matlab installation.\n\n# :variable:`MATLAB_FIND_DEBUG`\n\n#   outputs debug information\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS`\n\n#   additional versions of Matlab for the automatic retrieval of the installed\n\n#   versions.\n\n#\n\n# Variables defined by the module\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n#\n\n# Result variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_FOUND``\n\n#   ``TRUE`` if the Matlab installation is found, ``FALSE``\n\n#   otherwise. All variable below are defined if Matlab is found.\n\n# ``Matlab_ROOT_DIR``\n\n#   the final root of the Matlab installation determined by the FindMatlab\n\n#   module.\n\n# ``Matlab_MAIN_PROGRAM``\n\n#   the Matlab binary program. Available only if the component ``MAIN_PROGRAM``\n\n#   is given in the :command:`find_package` directive.\n\n# ``Matlab_INCLUDE_DIRS``\n\n#  the path of the Matlab libraries headers\n\n# ``Matlab_MEX_LIBRARY``\n\n#   library for mex, always available.\n\n# ``Matlab_MX_LIBRARY``\n\n#   mx library of Matlab (arrays). Available only if the component\n\n#   ``MX_LIBRARY`` has been requested.\n\n# ``Matlab_ENG_LIBRARY``\n\n#   Matlab engine library. Available only if the component ``ENG_LIBRARY``\n\n#   is requested.\n\n# ``Matlab_LIBRARIES``\n\n#   the whole set of libraries of Matlab\n\n# ``Matlab_MEX_COMPILER``\n\n#   the mex compiler of Matlab. Currently not used.\n\n#   Available only if the component ``MEX_COMPILER`` is asked\n\n#\n\n# Cached variables\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n#\n\n# ``Matlab_MEX_EXTENSION``\n\n#   the extension of the mex files for the current platform (given by Matlab).\n\n# ``Matlab_ROOT_DIR``\n\n#   the location of the root of the Matlab installation found. If this value\n\n#   is changed by the user, the result variables are recomputed.\n\n#\n\n# Provided macros\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_get_version_from_release_name`\n\n#   returns the version from the release name\n\n# :command:`matlab_get_release_name_from_version`\n\n#   returns the release name from the Matlab version\n\n#\n\n# Provided functions\n\n# ^^^^^^^^^^^^^^^^^^\n\n#\n\n# :command:`matlab_add_mex`\n\n#   adds a target compiling a MEX file.\n\n# :command:`matlab_add_unit_test`\n\n#   adds a Matlab unit test file as a test to the project.\n\n# :command:`matlab_extract_all_installed_versions_from_registry`\n\n#   parses the registry for all Matlab versions. Available on Windows only.\n\n#   The part of the registry parsed is dependent on the host processor\n\n# :command:`matlab_get_all_valid_matlab_roots_from_registry`\n\n#   returns all the possible Matlab paths, according to a previously\n\n#   given list. Only the existing/accessible paths are kept. This is mainly\n\n#   useful for the searching all possible Matlab installation.\n\n# :command:`matlab_get_mex_suffix`\n\n#   returns the suffix to be used for the mex files\n\n#   (platform/architecture dependant)\n\n# :command:`matlab_get_version_from_matlab_run`\n\n#   returns the version of Matlab, given the full directory of the Matlab\n\n#   program.\n\n#\n\n#\n\n# Known issues\n\n# ^^^^^^^^^^^^\n\n#\n\n# **Symbol clash in a MEX target**\n\n#   By default, every symbols inside a MEX\n\n#   file defined with the command :command:`matlab_add_mex` have hidden\n\n#   visibility, except for the entry point. This is the default behaviour of\n\n#   the MEX compiler, which lowers the risk of symbol collision between the\n\n#   libraries shipped with Matlab, and the libraries to which the MEX file is\n\n#   linking to. This is also the default on Windows platforms.\n\n#\n\n#   However, this is not sufficient in certain case, where for instance your\n\n#   MEX file is linking against libraries that are already loaded by Matlab,\n\n#   even if those libraries have different SONAMES.\n\n#   A possible solution is to hide the symbols of the libraries to which the\n\n#   MEX target is linking to. This can be achieved in GNU GCC compilers with\n\n#   the linker option ``-Wl,--exclude-libs,ALL``.\n\n#\n\n# **Tests using GPU resources**\n\n#   in case your MEX file is using the GPU and\n\n#   in order to be able to run unit tests on this MEX file, the GPU resources\n\n#   should be properly released by Matlab. A possible solution is to make\n\n#   Matlab aware of the use of the GPU resources in the session, which can be\n\n#   performed by a command such as ``D = gpuDevice()`` at the beginning of\n\n#   the test script (or via a fixture).\n\n#\n\n#\n\n# Reference\n\n# ^^^^^^^^^\n\n#\n\n# .. variable:: Matlab_ROOT_DIR\n\n#\n\n#    The root folder of the Matlab installation. If set before the call to\n\n#    :command:`find_package`, the module will look for the components in that\n\n#    path. If not set, then an automatic search of Matlab\n\n#    will be performed. If set, it should point to a valid version of Matlab.\n\n#\n\n# .. variable:: MATLAB_FIND_DEBUG\n\n#\n\n#    If set, the lookup of Matlab and the intermediate configuration steps are\n\n#    outputted to the console.\n\n#\n\n# .. variable:: MATLAB_ADDITIONAL_VERSIONS\n\n#\n\n#   If set, specifies additional versions of Matlab that may be looked for.\n\n#   The variable should be a list of strings, organised by pairs of release\n\n#   name and versions, such as follows::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"release_name1=corresponding_version1\"\n\n#         \"release_name2=corresponding_version2\"\n\n#         ...\n\n#         )\n\n#\n\n#   Example::\n\n#\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\n\n#         \"R2013b=8.2\"\n\n#         \"R2013a=8.1\"\n\n#         \"R2012b=8.0\")\n\n#\n\n#   The order of entries in this list matters when several versions of\n\n#   Matlab are installed. The priority is set according to the ordering in\n\n#   this list.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2014-2015 Raffi Enficiaud, Max Planck Society\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The currently supported versions. Other version can be added by the user by\n\n# providing MATLAB_ADDITIONAL_VERSIONS\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# temporary folder for all Matlab runs\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_release_name\n\n#\n\n#   Returns the version of Matlab (17.58) from a release name (R2017k)\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_release_name_from_version\n\n#\n\n#   Returns the release name (R2017k) from the version of Matlab (17.58)\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# extracts all the supported release names (R2017k...) of Matlab\n\n# internal use\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# extracts all the supported versions of Matlab\n\n# internal use\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_extract_all_installed_versions_from_registry\n\n#\n\n#   This function parses the registry and founds the Matlab versions that are\n\n#   installed. The found versions are returned in `matlab_versions`.\n\n#   Set `win64` to `TRUE` if the 64 bit version of Matlab should be looked for\n\n#   The returned list contains all versions under\n\n#   ``HKLM\\\\SOFTWARE\\\\Mathworks\\\\MATLAB`` or an empty list in case an error\n\n#   occurred (or nothing found).\n\n#\n\n#   .. note::\n\n#\n\n#     Only the versions are provided. No check is made over the existence of the\n\n#     installation referenced in the registry,\n\n#\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# /reg:64 should be added on 64 bits capable OSs in order to enable the\n\n# redirection of 64 bits applications\n",
        "Line" : 368,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# (internal)\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# get the supported versions\n",
        "Line" : 418,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# this is a manual population of the versions we want to look for\n\n# this can be done as is, but preferably with the call to\n\n# matlab_get_supported_versions and variable\n",
        "Line" : 423,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# populating the versions we want to look for\n\n# set(matlab_supported_versions)\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# # Matlab 7\n\n# set(matlab_major 7)\n\n# foreach(current_matlab_minor RANGE 4 20)\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# # Matlab 8\n\n# set(matlab_major 8)\n\n# foreach(current_matlab_minor RANGE 0 5)\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# endforeach(current_matlab_minor)\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# # taking into account the possible additional versions provided by the user\n\n# if(DEFINED MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# list(APPEND matlab_supported_versions MATLAB_ADDITIONAL_VERSIONS)\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# endif()\n",
        "Line" : 445,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# we order from more recent to older\n",
        "Line" : 448,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_all_valid_matlab_roots_from_registry\n\n#\n\n#   Populates the Matlab root with valid versions of Matlab.\n\n#   The returned matlab_roots is organized in pairs\n\n#   ``(version_number,matlab_root_path)``.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_all_valid_matlab_roots_from_registry(\n\n#         matlab_versions\n\n#         matlab_roots)\n\n#\n\n#   ``matlab_versions``\n\n#     the versions of each of the Matlab installations\n\n#   ``matlab_roots``\n\n#     the location of each of the Matlab installations\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The matlab_versions comes either from\n\n# extract_matlab_versions_from_registry_brute_force or\n\n# matlab_extract_all_installed_versions_from_registry.\n",
        "Line" : 483,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_mex_suffix\n\n#\n\n#   Returns the extension of the mex files (the suffixes).\n\n#   This function should not be called before the appropriate Matlab root has\n\n#   been found.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_mex_suffix(\n\n#         matlab_root\n\n#         mex_suffix)\n\n#\n\n#   ``matlab_root``\n\n#     the root of the Matlab installation\n\n#   ``mex_suffix``\n\n#     the variable name in which the suffix will be returned.\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# todo setup the extension properly. Currently I do not know if this is\n\n# sufficient for all win32 distributions.\n\n# there is also CMAKE_EXECUTABLE_SUFFIX that could be tweaked\n",
        "Line" : 524,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# we first try without suffix, since cmake does not understand a list with\n\n# one empty string element\n",
        "Line" : 532,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# this call should populate the cache automatically\n",
        "Line" : 544,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# the program has been found?\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_get_version_from_matlab_run\n\n#\n\n#   This function runs Matlab program specified on arguments and extracts its\n\n#   version.\n\n#\n\n#   ::\n\n#\n\n#     matlab_get_version_from_matlab_run(\n\n#         matlab_binary_path\n\n#         matlab_list_versions)\n\n#\n\n#   ``matlab_binary_path``\n\n#     the location of the `matlab` binary executable\n\n#   ``matlab_list_versions``\n\n#     the version extracted from Matlab\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# the log file is needed since on windows the command executes in a new\n\n# window and it is not possible to get back the answer of Matlab\n\n# the -wait command is needed on windows, otherwise the call returns\n\n# immediately after the program launches itself.\n",
        "Line" : 621,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# timeout set to 30 seconds, in case it does not start\n\n# note as said before OUTPUT_VARIABLE cannot be used in a platform\n\n# independent manner however, not setting it would flush the output of Matlab\n\n# in the current console (unix variant)\n",
        "Line" : 636,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# if successful, read back the log\n",
        "Line" : 663,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_unit_test\n\n#\n\n#   Adds a Matlab unit test to the test set of cmake/ctest.\n\n#   This command requires the component ``MAIN_PROGRAM``.\n\n#   The unit test uses the Matlab unittest framework (default, available\n\n#   starting Matlab 2013b+) except if the option ``NO_UNITTEST_FRAMEWORK``\n\n#   is given.\n\n#\n\n#   The function expects one Matlab test script file to be given.\n\n#   In the case ``NO_UNITTEST_FRAMEWORK`` is given, the unittest script file\n\n#   should contain the script to be run, plus an exit command with the exit\n\n#   value. This exit value will be passed to the ctest framework (0 success,\n\n#   non 0 failure). Additional arguments accepted by :command:`add_test` can be\n\n#   passed through ``TEST_ARGS`` (eg. ``CONFIGURATION <config> ...``).\n\n#\n\n#   ::\n\n#\n\n#     matlab_add_unit_test(\n\n#         NAME <name>\n\n#         UNITTEST_FILE matlab_file_containing_unittest.m\n\n#         [UNITTEST_PRECOMMAND matlab_command_to_run]\n\n#         [TIMEOUT timeout]\n\n#         [ADDITIONAL_PATH path1 [path2 ...]]\n\n#         [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]\n\n#         [TEST_ARGS arg1 [arg2 ...]]\n\n#         [NO_UNITTEST_FRAMEWORK]\n\n#         )\n\n#\n\n#   The function arguments are:\n\n#\n\n#   ``NAME``\n\n#     name of the unittest in ctest.\n\n#   ``UNITTEST_FILE``\n\n#     the matlab unittest file. Its path will be automatically\n\n#     added to the Matlab path.\n\n#   ``UNITTEST_PRECOMMAND``\n\n#     Matlab script command to be ran before the file\n\n#     containing the test (eg. GPU device initialisation based on CMake\n\n#     variables).\n\n#   ``TIMEOUT``\n\n#     the test timeout in seconds. Defaults to 180 seconds as the\n\n#     Matlab unit test may hang.\n\n#   ``ADDITIONAL_PATH``\n\n#     a list of paths to add to the Matlab path prior to\n\n#     running the unit test.\n\n#   ``MATLAB_ADDITIONAL_STARTUP_OPTIONS``\n\n#     a list of additional option in order\n\n#     to run Matlab from the command line.\n\n#   ``TEST_ARGS``\n\n#     Additional options provided to the add_test command. These\n\n#     options are added to the default options (eg. \"CONFIGURATIONS Release\")\n\n#   ``NO_UNITTEST_FRAMEWORK``\n\n#     when set, indicates that the test should not\n\n#     use the unittest framework of Matlab (available for versions >= R2013a).\n\n#\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#.rst:\n\n# .. command:: matlab_add_mex\n\n#\n\n#   Adds a Matlab MEX target.\n\n#   This commands compiles the given sources with the current tool-chain in\n\n#   order to produce a MEX file. The final name of the produced output may be\n\n#   specified, as well as additional link libraries, and a documentation entry\n\n#   for the MEX file. Remaining arguments of the call are passed to the\n\n#   :command:`add_library` command.\n\n#\n\n#   ::\n\n#\n\n#      matlab_add_mex(\n\n#          NAME <name>\n\n#          SRC src1 [src2 ...]\n\n#          [OUTPUT_NAME output_name]\n\n#          [DOCUMENTATION file.txt]\n\n#          [LINK_TO target1 target2 ...]\n\n#          [...]\n\n#      )\n\n#\n\n#   ``NAME``\n\n#     name of the target.\n\n#   ``SRC``\n\n#     list of tje source files.\n\n#   ``LINK_TO``\n\n#     a list of additional link dependencies.  The target links to ``libmex``\n\n#     by default. If ``Matlab_MX_LIBRARY`` is defined, it also\n\n#     links to ``libmx``.\n\n#   ``OUTPUT_NAME``\n\n#     if given, overrides the default name. The default name is\n\n#     the name of the target without any prefix and\n\n#     with ``Matlab_MEX_EXTENSION`` suffix.\n\n#   ``DOCUMENTATION``\n\n#     if given, the file ``file.txt`` will be considered as\n\n#     being the documentation file for the MEX file. This file is copied into\n\n#     the same folder without any processing, with the same name as the final\n\n#     mex file, and with extension `.m`. In that case, typing ``help <name>``\n\n#     in Matlab prints the documentation contained in this file.\n\n#\n\n#   The documentation file is not processed and should be in the following\n\n#   format:\n\n#\n\n#   ::\n\n#\n\n#     % This is the documentation\n\n#     function ret = mex_target_output_name(input1)\n\n#\n",
        "Line" : 791,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# we do not need all this on Windows\n\n# pthread options\n",
        "Line" : 842,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# we should use try_compile instead, the link flags are discarded from\n\n# this compiler_flag function.\n\n#check_cxx_compiler_flag(-Wl,--exclude-libs,ALL HAS_SYMBOL_HIDING_CAPABILITY)\n",
        "Line" : 845,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# documentation\n",
        "Line" : 884,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# documentation\n",
        "Line" : 893,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# entry point in the mex file + taking care of visibility and symbol clashes.\n",
        "Line" : 895,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Apparently, compiling with -pthread generated the proper link flags\n\n# and some defines at compilation\n",
        "Line" : 903,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# if we do not do that, the symbols linked from eg. boost remain weak and\n\n# then clash with the ones defined in the matlab process. So by default\n\n# the symbols are hidden.\n\n# This also means that for shared libraries (like MEX), the entry point\n\n# should be explicitly declared with default visibility, otherwise Matlab\n\n# cannot find the entry point.\n\n# Note that this is particularly meaningful if the MEX wrapper itself\n\n# contains symbols that are clashing with Matlab (that are compiled in the\n\n# MEX file). In order to propagate the visibility options to the libraries\n\n# to which the MEX file is linked against, the -Wl,--exclude-libs,ALL\n\n# option should also be specified.\n",
        "Line" : 909,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#  get_target_property(\n\n#    _previous_link_flags\n\n#    ${${prefix}_NAME}\n\n#    LINK_FLAGS)\n\n#  if(NOT _previous_link_flags)\n\n#    set(_previous_link_flags)\n\n#  endif()\n",
        "Line" : 928,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,--exclude-libs,ALL\"\n\n#        # -Wl,--version-script=${_FindMatlab_SELF_DIR}/MatlabLinuxVisibility.map\"\n\n#    )\n\n#  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\n\n#    # in this case, all other symbols become hidden.\n\n#    set_target_properties(${${prefix}_NAME}\n\n#      PROPERTIES\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,-exported_symbol,_mexFunction\"\n\n#        #-Wl,-exported_symbols_list,${_FindMatlab_SELF_DIR}/MatlabOSXVisilibity.map\"\n\n#    )\n\n#  endif()\n",
        "Line" : 936,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# (internal)\n\n# Used to get the version of matlab, using caching. This basically transforms the\n\n# output of the root list, with possible unknown version, to a version\n\n#\n",
        "Line" : 964,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# if the version is not trivial, we query matlab for that\n\n# we keep track of the location of matlab that induced this version\n\n#if(NOT DEFINED Matlab_PROG_VERSION_STRING_AUTO_DETECT)\n\n#  set(Matlab_PROG_VERSION_STRING_AUTO_DETECT \"\" CACHE INTERNAL \"internal matlab location for the discovered version\")\n\n#endif()\n",
        "Line" : 970,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# the version is known, we just return it\n",
        "Line" : 977,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#\n",
        "Line" : 983,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# do we already have a matlab program?\n",
        "Line" : 986,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# if not found, clear the dependent variables\n",
        "Line" : 1003,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# full real path for path comparison\n",
        "Line" : 1014,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# is it the same as the previous one?\n",
        "Line" : 1019,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# update the location of the program\n",
        "Line" : 1025,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# set the version into the cache\n",
        "Line" : 1033,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# warning, just in case several versions found (should not happen)\n",
        "Line" : 1036,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# return the updated value\n",
        "Line" : 1042,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# ###################################\n\n# Exploring the possible Matlab_ROOTS\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# this variable will get all Matlab installations found in the current system.\n",
        "Line" : 1056,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# if the user specifies a possible root, we keep this one\n",
        "Line" : 1062,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# if Matlab_ROOT_DIR specified but erroneous\n",
        "Line" : 1065,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# NOTFOUND indicates the code below to search for the version automatically\n",
        "Line" : 1070,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# empty version\n",
        "Line" : 1072,
        "CharPositionInLine" : 72
      },
      "64" : {
        "Text" : "# cached version\n",
        "Line" : 1074,
        "CharPositionInLine" : 95
      },
      "65" : {
        "Text" : "# if the user does not specify the possible installation root, we look for\n\n# one installation using the appropriate heuristics\n",
        "Line" : 1081,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# On WIN32, we look for Matlab installation in the registry\n\n# if unsuccessful, we look for all known revision and filter the existing\n\n# ones.\n",
        "Line" : 1086,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# testing if we are able to extract the needed information from the registry\n",
        "Line" : 1090,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# the returned list is empty, doing the search on all known versions\n",
        "Line" : 1094,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# filtering the results with the registry keys\n",
        "Line" : 1104,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# on mac, we look for the /Application paths\n\n# this corresponds to the behaviour on Windows. On Linux, we do not have\n\n# any other guess.\n",
        "Line" : 1110,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# if we have not found anything, we fall back on the PATH\n",
        "Line" : 1145,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# At this point, we have no other choice than trying to find it from PATH.\n\n# If set by the user, this wont change\n",
        "Line" : 1148,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# we then populate the list of roots, with empty version\n",
        "Line" : 1156,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# resolve symlinks\n",
        "Line" : 1161,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# get the directory (the command below has to be run twice)\n\n# this will be the matlab root\n",
        "Line" : 1164,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Matlab should be in bin\n",
        "Line" : 1167,
        "CharPositionInLine" : 93
      },
      "77" : {
        "Text" : "# take the first possible Matlab root\n",
        "Line" : 1190,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# adding a warning in case of ambiguity\n",
        "Line" : 1197,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# check if the root changed against the previous defined one, if so\n\n# clear all the cached variables\n",
        "Line" : 1205,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# internal\n",
        "Line" : 1219,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "#Matlab_PROG_VERSION_STRING_AUTO_DETECT\n",
        "Line" : 1222,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# Fix the version, in case this one is NOTFOUND\n",
        "Line" : 1236,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# i should be for intel\n",
        "Line" : 1263,
        "CharPositionInLine" : 32
      },
      "84" : {
        "Text" : "# This variable goes to the cache.\n",
        "Line" : 1305,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# internal\n\n# This small stub around find_library is to prevent any pollution of CMAKE_FIND_LIBRARY_PREFIXES in the global scope.\n\n# This is the function to be used below instead of the find_library directives.\n",
        "Line" : 1317,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# the MEX library/header are required\n",
        "Line" : 1329,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# the MEX extension is required\n",
        "Line" : 1349,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# the matlab root is required\n",
        "Line" : 1352,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# component Mex Compiler\n",
        "Line" : 1356,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# component Matlab program\n",
        "Line" : 1373,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Component MX library\n",
        "Line" : 1392,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Component ENG library\n",
        "Line" : 1410,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#Matlab_LIBRARIES\n",
        "Line" : 1453,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "#Matlab_ROOT_DIR\n\n#Matlab_VERSION_STRING\n",
        "Line" : 1459,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "#Matlab_MEX_EXTENSION\n",
        "Line" : 1462,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "#Matlab_BINARIES_DIR\n",
        "Line" : 1465,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 97
    },
    "libraries/minJerkGenerator/CMakeLists.txt" : {
      "ObjectId" : "20d442e4a5dbb3fe082314afd87f9a734aceb808",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Jorhabib Eljaik\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Include directories\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Specify preprocessor flag for MATLAB MEX FILES Compilation.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MATLAB_MEXFILE_EXT is generated by FindMatlab.cmake\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive\")\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Removing default dynamic library extensions (.dll for Windows, .so for UNIX) and prefixes (lib) otherwise automatically prepended to the mex file.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This seems to be the most reliable method to date to know installed Matlab arch \n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#In the following specific flags will be set to ensure compliance with the default settings of Matlab's mex compiler\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Setting Compiler Flags\n",
        "Line" : 66,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "#Setting Linker Flags\n",
        "Line" : 68,
        "CharPositionInLine" : 24
      },
      "11" : {
        "Text" : "#Changing some flags according to system/MATLAB version (32, 64 bits)\n",
        "Line" : 71,
        "CharPositionInLine" : 32
      },
      "12" : {
        "Text" : "# Linking Libraries\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "libraries/realTimeSynchronizer/CMakeLists.txt" : {
      "ObjectId" : "406637e370b243e2e636290cbce6096c7244f43d",
      "LastModified" : "2015-03-31T15:37:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Francesco Romano, Daniele Pucci\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#This is for the Yarp OS library\n",
        "Line" : 8,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "#Specific preprocessor flag for MATLAB MEX FILES compilation\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MATLAB_MEXFILE_EXT is generated by FindMatlab.cmake\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#link_directories(${CMAKE_BINARY_DIR})\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Removing default dynamic library extensions (.dll for Windows, .so for UNIX) and prefixes (lib) otherwise automatically prepended to the mex file.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This seems to be the most reliable method to date to know installed Matlab arch \n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#In the following specific flags will be set to ensure compliance with the default settings of Matlab's mex compiler\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Setting Compiler Flags\n",
        "Line" : 47,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "#Setting Linker Flags\n",
        "Line" : 49,
        "CharPositionInLine" : 24
      },
      "11" : {
        "Text" : "#Changing some flags according to system/MATLAB version (32, 64 bits)\n",
        "Line" : 52,
        "CharPositionInLine" : 32
      },
      "12" : {
        "Text" : "# Linking Libraries\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "libraries/wbInterface/CMakeLists.txt" : {
      "ObjectId" : "817ec8d3702ce79be7848f66053d824b930239e2",
      "LastModified" : "2015-03-31T14:55:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Jorhabib Eljaik\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Source and header files\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Some additional options\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Include directories\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Specify preprocessor flag for MATLAB MEX FILES Compilation.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#MATLAB_MEXFILE_EXT is generated by FindMatlab.cmake\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive\")\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Removing default dynamic library extensions (.dll for Windows, .so for UNIX) and prefixes (lib) otherwise automatically prepended to the mex file.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This seems to be the most reliable method to date to know installed Matlab arch \n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#In the following specific flags will be set to ensure compliance with the default settings of Matlab's mex compiler\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Setting Compiler Flags\n",
        "Line" : 82,
        "CharPositionInLine" : 24
      },
      "12" : {
        "Text" : "#Setting Linker Flags\n",
        "Line" : 84,
        "CharPositionInLine" : 24
      },
      "13" : {
        "Text" : "#Changing some flags according to system/MATLAB version (32, 64 bits)\n",
        "Line" : 87,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 14
    },
    "libraries/yRead/CMakeLists.txt" : {
      "ObjectId" : "d36860b68057cd8fc9c2b36fbd375ca552665869",
      "LastModified" : "2015-03-31T14:55:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Jorhabib Eljaik\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Specify preprocessor flag for MATLAB MEX FILES Compilation.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MATLAB_MEXFILE_EXT is generated by FindMatlab.cmake\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Removing default dynamic library extensions (.dll for Windows, .so for UNIX) and prefixes (lib) otherwise automatically prepended to the mex file.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This seems to be the most reliable method to date to know installed Matlab arch \n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#In the following specific flags will be set to ensure compliance with the default settings of Matlab's mex compiler\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Setting Compiler Flags\n",
        "Line" : 58,
        "CharPositionInLine" : 24
      },
      "9" : {
        "Text" : "#Setting Linker Flags\n",
        "Line" : 60,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "#Changing some flags according to system/MATLAB version (32, 64 bits)\n",
        "Line" : 63,
        "CharPositionInLine" : 32
      },
      "11" : {
        "Text" : "# Linking Libraries\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "libraries/ySynchronizer/CMakeLists.txt" : {
      "ObjectId" : "dbc35d3afbe3078b78c0622d158c896e3d4e636a",
      "LastModified" : "2015-03-31T14:55:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Jorhabib Eljaik\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(\"autogenerated\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Specify preprocessor flag for MATLAB MEX FILES Compilation.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#MATLAB_MEXFILE_EXT is generated by FindMatlab.cmake\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive\")\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Removing default dynamic library extensions (.dll for Windows, .so for UNIX) and prefixes (lib) otherwise automatically prepended to the mex file.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This seems to be the most reliable method to date to know installed Matlab arch \n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#In the following specific flags will be set to ensure compliance with the default settings of Matlab's mex compiler\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#Setting Compiler Flags\n",
        "Line" : 53,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "#Setting Linker Flags\n",
        "Line" : 55,
        "CharPositionInLine" : 24
      },
      "11" : {
        "Text" : "#Changing some flags according to system/MATLAB version (32, 64 bits)\n",
        "Line" : 58,
        "CharPositionInLine" : 32
      },
      "12" : {
        "Text" : "# Linking Libraries\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "libraries/ySynchronizer/autogenerated/thrift_clock_rpc_thrift.cmake" : {
      "ObjectId" : "644854e1530d3daffca8bfaf67fd8858ab7451f0",
      "LastModified" : "2015-03-31T14:55:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This is an automatically-generated file.\n\n## It could get re-generated if the ALLOW_IDL_GENERATION flag is on\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libraries/yWrite/CMakeLists.txt" : {
      "ObjectId" : "32a0070460949a31b08b40399e967a1ef2e51afd",
      "LastModified" : "2015-03-31T14:55:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Jorhabib Eljaik\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Specify preprocessor flag for MATLAB MEX FILES Compilation.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#MATLAB_MEXFILE_EXT is generated by FindMatlab.cmake\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Removing default dynamic library extensions (.dll for Windows, .so for UNIX) and prefixes (lib) otherwise automatically prepended to the mex file.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This seems to be the most reliable method to date to know installed Matlab arch \n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#In the following specific flags will be set to ensure compliance with the default settings of Matlab's mex compiler\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#Setting Compiler Flags\n",
        "Line" : 58,
        "CharPositionInLine" : 24
      },
      "9" : {
        "Text" : "#Setting Linker Flags\n",
        "Line" : 60,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "#Changing some flags according to system/MATLAB version (32, 64 bits)\n",
        "Line" : 63,
        "CharPositionInLine" : 32
      },
      "11" : {
        "Text" : "# Linking Libraries\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "libraries/yarpRead/CMakeLists.txt" : {
      "ObjectId" : "18a32bb8db16ff30777381d0f70a23b2ae7b5606",
      "LastModified" : "2015-04-10T18:42:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2013 CoDyCo\n\n# Author: Francesco Romano\n\n# CopyPolicy: Released under the terms of the GNU GPL v2.0.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Specify preprocessor flag for MATLAB MEX FILES Compilation.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Adding files used for the generation of the dynamic library\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Removing default dynamic library extensions (.dll for Windows, .so for UNIX) and prefixes (lib) otherwise automatically prepended to the mex file.\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# This seems to be the most reliable method to date to know installed Matlab arch \n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#In the following specific flags will be set to ensure compliance with the default settings of Matlab's mex compiler\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#Setting Compiler Flags\n",
        "Line" : 50,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : "#Setting Linker Flags\n",
        "Line" : 52,
        "CharPositionInLine" : 28
      },
      "9" : {
        "Text" : "#Changing some flags according to system/MATLAB version (32, 64 bits)\n",
        "Line" : 55,
        "CharPositionInLine" : 36
      },
      "10" : {
        "Text" : "# Linking Libraries\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    }
  },
  "FileTypes" : {
    "CMAKE" : 12
  },
  "ElapsedTime" : 1786
}