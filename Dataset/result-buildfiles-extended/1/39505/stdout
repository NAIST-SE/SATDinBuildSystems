{
  "Repository" : "39505",
  "Revision" : "HEAD",
  "ObjectId" : "fa9422521fb7d454c1651791a47b51f2c6e94756",
  "CommitTime" : "2019-04-18T16:01:12Z",
  "Files" : {
    "jOOQ-checker/pom.xml" : {
      "ObjectId" : "4c5316b13401b0fce1bcb1e255555dd143561de5",
      "LastModified" : "2019-02-14T11:17:44Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "jOOQ-codegen-maven/pom.xml" : {
      "ObjectId" : "0fafa36aec21cee8fbfd354043a878057b0ef1ef",
      "LastModified" : "2019-04-05T08:36:37Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " More details about this plugin can be found here:\n                 http://maven.apache.org/plugin-tools/maven-plugin-plugin/examples/using-annotations.html\n              ",
        "Line" : 36,
        "CharPositionInLine" : 18
      },
      "1" : {
        "Text" : " see http://jira.codehaus.org/browse/MNG-5346 ",
        "Line" : 43,
        "CharPositionInLine" : 74
      },
      "2" : {
        "Text" : " if you want to generate help goal ",
        "Line" : 54,
        "CharPositionInLine" : 63
      },
      "3" : {
        "Text" : " junit 4.8.2 sneaking in here ",
        "Line" : 95,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 4
    },
    "jOOQ-codegen/pom.xml" : {
      "ObjectId" : "9d7ff9d3193974e3ee0c0943291d90b4787e3b8a",
      "LastModified" : "2019-04-05T08:36:37Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "jOOQ-examples/jOOQ-academy/pom.xml" : {
      "ObjectId" : "2a55e9ab02d36c715fad2dbff42acff53667f663",
      "LastModified" : "2019-04-10T09:12:28Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 27,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Logging ",
        "Line" : 44,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " Testing ",
        "Line" : 51,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : " The resources element will replace available properties in all matching\n             resources. We use this to provide H2 connection configuration to various\n             configuration elements ",
        "Line" : 65,
        "CharPositionInLine" : 40
      },
      "4" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 91,
        "CharPositionInLine" : 99
      },
      "5" : {
        "Text" : " [#2413] Make compiler warnings a bit more visible\n                         But don't fail (yet) ",
        "Line" : 98,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 107,
        "CharPositionInLine" : 139
      },
      "7" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 127,
        "CharPositionInLine" : 55
      },
      "8" : {
        "Text" : " See http://stackoverflow.com/a/13082837/521799 ",
        "Line" : 151,
        "CharPositionInLine" : 84
      },
      "9" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 171,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 10
    },
    "jOOQ-examples/jOOQ-checker-framework-example/pom.xml" : {
      "ObjectId" : "bde20e16e120c128759c6154648545171abcbc93",
      "LastModified" : "2019-04-05T08:36:37Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 28,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " <annotationProcessor>org.jooq.checker.PlainSQLChecker</annotationProcessor> ",
        "Line" : 69,
        "CharPositionInLine" : 117
      },
      "2" : {
        "Text" : " Please refer to https://errorprone.info/docs/installation for details ",
        "Line" : 77,
        "CharPositionInLine" : 87
      },
      "CommentCount" : 3
    },
    "jOOQ-examples/jOOQ-flyway-example/pom.xml" : {
      "ObjectId" : "55b4f589cf0710b27833e334e15704103055c025",
      "LastModified" : "2019-04-10T09:12:28Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 32,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Logging ",
        "Line" : 44,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " Run Scala tests ",
        "Line" : 51,
        "CharPositionInLine" : 33
      },
      "3" : {
        "Text" : " Testing ",
        "Line" : 65,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 95,
        "CharPositionInLine" : 99
      },
      "5" : {
        "Text" : " The Scala compiler plugin ",
        "Line" : 104,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 6
    },
    "jOOQ-examples/jOOQ-javaee-example/pom.xml" : {
      "ObjectId" : "fe322f6d529be61c571fa37a7d8267868d17eb6f",
      "LastModified" : "2019-04-10T09:12:28Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " JBoss dependency versions ",
        "Line" : 26,
        "CharPositionInLine" : 43
      },
      "1" : {
        "Text" : " other plugin versions ",
        "Line" : 34,
        "CharPositionInLine" : 39
      },
      "2" : {
        "Text" : " Define the version of JBoss' Java EE 7 APIs we want to import.\n                Any dependencies from org.jboss.spec will have their version defined by this\n                BOM ",
        "Line" : 44,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : " JBoss distributes a complete set of Java EE 7 APIs including\n                a Bill of Materials (BOM). A BOM specifies the versions of a \"stack\" (or\n                a collection) of artifacts. We use this here so that we always get the correct\n                versions of artifacts. Here we use the jboss-javaee-7.0-with-tools stack\n                (you can read this as the JBoss stack of the Java EE 7 APIs, with some extras\n                tools for your project, such as Arquillian for testing) and the jboss-javaee-7.0-with-hibernate\n                stack you can read this as the JBoss stack of the Java EE 7 APIs, with extras\n                from the Hibernate family of projects) ",
        "Line" : 52,
        "CharPositionInLine" : 59
      },
      "4" : {
        "Text" : " Database access ",
        "Line" : 65,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : " Wildfly and JavaEE ",
        "Line" : 77,
        "CharPositionInLine" : 36
      },
      "6" : {
        "Text" : " Logging ",
        "Line" : 99,
        "CharPositionInLine" : 25
      },
      "7" : {
        "Text" : " Testing ",
        "Line" : 106,
        "CharPositionInLine" : 25
      },
      "8" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 133,
        "CharPositionInLine" : 99
      },
      "9" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 141,
        "CharPositionInLine" : 139
      },
      "10" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 161,
        "CharPositionInLine" : 55
      },
      "11" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 202,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 12
    },
    "jOOQ-examples/jOOQ-javafx-example/pom.xml" : {
      "ObjectId" : "cac55b3cc55df30d16a1e9ba2d9bfb1255b9919b",
      "LastModified" : "2019-04-10T09:12:28Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 28,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Logging ",
        "Line" : 40,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " Testing ",
        "Line" : 47,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : " The resources element will replace available properties in all matching\n             resources. We use this to provide H2 connection configuration to various\n             configuration elements ",
        "Line" : 61,
        "CharPositionInLine" : 40
      },
      "4" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 87,
        "CharPositionInLine" : 99
      },
      "5" : {
        "Text" : " [#2413] Make compiler warnings a bit more visible\n                         But don't fail (yet) ",
        "Line" : 94,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 103,
        "CharPositionInLine" : 139
      },
      "7" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 123,
        "CharPositionInLine" : 55
      },
      "8" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 164,
        "CharPositionInLine" : 52
      },
      "9" : {
        "Text" : " [#5881] Specify this if concrete target directories / packages are required ",
        "Line" : 189,
        "CharPositionInLine" : 117
      },
      "10" : {
        "Text" : "\n                                <target>\n                                    <packageName>org.jooq.example.db.h2</packageName>\n                                    <directory>target/generated-sources/jooq-h2</directory>\n                                </target>\n                                  ",
        "Line" : 195,
        "CharPositionInLine" : 38
      },
      "11" : {
        "Text" : " Run the JavaFX application right after building ",
        "Line" : 202,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 12
    },
    "jOOQ-examples/jOOQ-jpa-example-entities/pom.xml" : {
      "ObjectId" : "4a9b7955c338d831afac799967741e40504d91bd",
      "LastModified" : "2019-04-17T07:38:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 26,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 45,
        "CharPositionInLine" : 99
      },
      "2" : {
        "Text" : " How to properly set things up in JDK 9+\n                         https://stackoverflow.com/a/51409471/521799 ",
        "Line" : 50,
        "CharPositionInLine" : 73
      },
      "CommentCount" : 3
    },
    "jOOQ-examples/jOOQ-jpa-example/pom.xml" : {
      "ObjectId" : "b2923e612120008b8f6387b21f0898d66d5f6f1f",
      "LastModified" : "2019-04-17T07:38:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Entities ",
        "Line" : 29,
        "CharPositionInLine" : 26
      },
      "1" : {
        "Text" : " Database access ",
        "Line" : 36,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : " Logging ",
        "Line" : 75,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : " Testing ",
        "Line" : 82,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 107,
        "CharPositionInLine" : 99
      },
      "5" : {
        "Text" : " [#2413] Make compiler warnings a bit more visible\n                         But don't fail (yet) ",
        "Line" : 114,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 121,
        "CharPositionInLine" : 52
      },
      "7" : {
        "Text" : " This is needed for the JPADatabase ",
        "Line" : 161,
        "CharPositionInLine" : 64
      },
      "8" : {
        "Text" : " Run the JavaFX application right after building ",
        "Line" : 175,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 9
    },
    "jOOQ-examples/jOOQ-kotlin-example/pom.xml" : {
      "ObjectId" : "da96223ee436e44e61d7229aadad12b324c1daf0",
      "LastModified" : "2019-04-17T07:38:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 29,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Needed for mapping into Kotlin data classes ",
        "Line" : 47,
        "CharPositionInLine" : 61
      },
      "2" : {
        "Text" : " Testing ",
        "Line" : 54,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 81,
        "CharPositionInLine" : 139
      },
      "4" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 101,
        "CharPositionInLine" : 55
      },
      "5" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 141,
        "CharPositionInLine" : 52
      },
      "6" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 189,
        "CharPositionInLine" : 99
      },
      "7" : {
        "Text" : " Run the example application right after building\n                 (why isn't this working with Kotlin??)\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>exec-maven-plugin</artifactId>\n                <version>1.6.0</version>\n                <executions>\n                    <execution>\n                        <id>run-example</id>\n                        <phase>install</phase>\n                        <goals>\n                            <goal>java</goal>\n                        </goals>\n                        <configuration>\n                            <mainClass>org.jooq.example.kotlin.FunWithKotlinAndJOOQKt</mainClass>\n                            <classpathScope>test</classpathScope>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            ",
        "Line" : 252,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 8
    },
    "jOOQ-examples/jOOQ-oracle-example/pom.xml" : {
      "ObjectId" : "7b0e32341811baa14e122899886ce39a57744718",
      "LastModified" : "2019-04-05T09:52:34Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 27,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Logging ",
        "Line" : 41,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " Testing ",
        "Line" : 48,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 73,
        "CharPositionInLine" : 99
      },
      "4" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 84,
        "CharPositionInLine" : 139
      },
      "5" : {
        "Text" : " The Oracle test schema is loaded here ",
        "Line" : 104,
        "CharPositionInLine" : 59
      },
      "6" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 149,
        "CharPositionInLine" : 52
      },
      "7" : {
        "Text" : " Known issue with this type: https://github.com/jOOQ/jOOQ/issues/3709 ",
        "Line" : 180,
        "CharPositionInLine" : 114
      },
      "CommentCount" : 8
    },
    "jOOQ-examples/jOOQ-spark-chart-example/pom.xml" : {
      "ObjectId" : "4b440484c8c6c08cdde6f5ed060560b04d7b889f",
      "LastModified" : "2019-04-05T09:52:34Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 19,
        "CharPositionInLine" : 139
      },
      "1" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 48,
        "CharPositionInLine" : 99
      },
      "2" : {
        "Text" : " Run the Spark application right after building ",
        "Line" : 122,
        "CharPositionInLine" : 68
      },
      "CommentCount" : 3
    },
    "jOOQ-examples/jOOQ-spark-example/pom.xml" : {
      "ObjectId" : "3eabfbecbb7ad5337960448d68c978aa34fd8bc5",
      "LastModified" : "2019-04-17T07:38:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 28,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Spark framework ",
        "Line" : 45,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : " Logging ",
        "Line" : 52,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : " Testing ",
        "Line" : 59,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : " The resources element will replace available properties in all matching\n             resources. We use this to provide H2 connection configuration to various\n             configuration elements ",
        "Line" : 73,
        "CharPositionInLine" : 40
      },
      "5" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 99,
        "CharPositionInLine" : 99
      },
      "6" : {
        "Text" : " [#2413] Make compiler warnings a bit more visible\n                         But don't fail (yet) ",
        "Line" : 106,
        "CharPositionInLine" : 50
      },
      "7" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 115,
        "CharPositionInLine" : 139
      },
      "8" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 135,
        "CharPositionInLine" : 55
      },
      "9" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 176,
        "CharPositionInLine" : 52
      },
      "10" : {
        "Text" : " Run the JavaFX application right after building ",
        "Line" : 213,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 11
    },
    "jOOQ-examples/jOOQ-spring-boot-example/pom.xml" : {
      "ObjectId" : "1301e5a07799e11fc9ccfeaacfd9ee325943db69",
      "LastModified" : "2019-04-05T08:36:37Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 78,
        "CharPositionInLine" : 55
      },
      "1" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 120,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 2
    },
    "jOOQ-examples/jOOQ-spring-example/pom.xml" : {
      "ObjectId" : "51bbae7875c6ca41d7998727e7b5320e46a14c79",
      "LastModified" : "2019-04-17T07:38:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 28,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Logging ",
        "Line" : 45,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " Spring (transitive dependencies are not listed explicitly) ",
        "Line" : 52,
        "CharPositionInLine" : 76
      },
      "3" : {
        "Text" : " Testing ",
        "Line" : 64,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : " The resources element will replace available properties in all matching\n             resources. We use this to provide H2 connection configuration to various\n             configuration elements ",
        "Line" : 84,
        "CharPositionInLine" : 40
      },
      "5" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 109,
        "CharPositionInLine" : 99
      },
      "6" : {
        "Text" : " [#2413] Make compiler warnings a bit more visible\n                         But don't fail (yet) ",
        "Line" : 116,
        "CharPositionInLine" : 50
      },
      "7" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 125,
        "CharPositionInLine" : 139
      },
      "8" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 145,
        "CharPositionInLine" : 55
      },
      "9" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 186,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 10
    },
    "jOOQ-examples/jOOQ-spring-guice-example/pom.xml" : {
      "ObjectId" : "c0f819028ee8ed8aab52219078a11af5e737d3ea",
      "LastModified" : "2019-04-17T07:38:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Database access ",
        "Line" : 28,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " Logging ",
        "Line" : 45,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : " Guice dependency injection ",
        "Line" : 52,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : " Spring (transitive dependencies are not listed explicitly) ",
        "Line" : 59,
        "CharPositionInLine" : 76
      },
      "4" : {
        "Text" : " Testing ",
        "Line" : 71,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 96,
        "CharPositionInLine" : 99
      },
      "6" : {
        "Text" : " [#2413] Make compiler warnings a bit more visible\n                         But don't fail (yet) ",
        "Line" : 103,
        "CharPositionInLine" : 50
      },
      "7" : {
        "Text" : " We're using the properties plugin to load external properties into Maven.\n                 See this excellent blog post for an explanation:\n                 http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/ ",
        "Line" : 112,
        "CharPositionInLine" : 139
      },
      "8" : {
        "Text" : " The H2 test schema is loaded here ",
        "Line" : 132,
        "CharPositionInLine" : 55
      },
      "9" : {
        "Text" : " The jOOQ code generator plugin ",
        "Line" : 173,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 10
    },
    "jOOQ-meta-extensions/pom.xml" : {
      "ObjectId" : "7f4f80a0d23f85c30135f098e0e91f06c1a45ecb",
      "LastModified" : "2019-04-05T08:36:37Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "jOOQ-meta/pom.xml" : {
      "ObjectId" : "98ca9ca64a75cbd7a0999db42dbf8836e335fa72",
      "LastModified" : "2019-04-05T08:36:37Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "jOOQ-release/build.xml" : {
      "ObjectId" : "df49084c8e709a456fa696f7c0d6da04b7bd79c8",
      "LastModified" : "2019-04-05T09:52:34Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Run a full mvn clean package install deploy first before this ",
        "Line" : 8,
        "CharPositionInLine" : 75
      },
      "CommentCount" : 1
    },
    "jOOQ-scala_2.12/pom.xml" : {
      "ObjectId" : "c9d80d5b4be619ffde190a48587489fa6c553830",
      "LastModified" : "2019-04-05T09:52:34Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " The Scala compiler plugin ",
        "Line" : 131,
        "CharPositionInLine" : 47
      },
      "1" : {
        "Text" : " The jar plugin ",
        "Line" : 145,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 2
    },
    "jOOQ/pom.xml" : {
      "ObjectId" : "26c414b851bacf3aa140cc3baff2fbfefd319391",
      "LastModified" : "2019-04-05T08:36:37Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " From JDK 9 onwards, the JAXB dependency needs to be made explicit ",
        "Line" : 87,
        "CharPositionInLine" : 83
      },
      "1" : {
        "Text" : " The dependency can cause trouble in older JDKs, so it needs to be\n             excluded from pre-java-9 builds: https://github.com/jOOQ/jOOQ/issues/7649 ",
        "Line" : 89,
        "CharPositionInLine" : 91
      },
      "CommentCount" : 2
    },
    "pom.xml" : {
      "ObjectId" : "58d1de0dec6b9106354dd92bee6374c0ac96ca32",
      "LastModified" : "2019-04-17T07:38:27Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " H2 is used by jOOQ-meta-extensions and a variety of integration tests ",
        "Line" : 29,
        "CharPositionInLine" : 87
      },
      "1" : {
        "Text" : " From JDK 11 onwards, we need to depend on the JAXB API explicitly ",
        "Line" : 32,
        "CharPositionInLine" : 83
      },
      "2" : {
        "Text" : " DefaultRecordMapper and jOOQ-meta-extensions can read JPA annotations ",
        "Line" : 36,
        "CharPositionInLine" : 87
      },
      "3" : {
        "Text" : " From JDK 9 onwards, the JAXB dependency needs to be made explicit ",
        "Line" : 112,
        "CharPositionInLine" : 87
      },
      "4" : {
        "Text" : " The dependency can cause trouble in older JDKs, so it needs to be\n                 excluded from pre-java-9 builds: https://github.com/jOOQ/jOOQ/issues/7649 ",
        "Line" : 114,
        "CharPositionInLine" : 95
      },
      "5" : {
        "Text" : " Optional logging dependency ",
        "Line" : 139,
        "CharPositionInLine" : 49
      },
      "6" : {
        "Text" : " Optional JPA dependency ",
        "Line" : 148,
        "CharPositionInLine" : 45
      },
      "7" : {
        "Text" : " Some projects will need an H2 database for testing, or to create temporary in-memory databases ",
        "Line" : 184,
        "CharPositionInLine" : 116
      },
      "8" : {
        "Text" : " jooq-meta-extensions and integration tests have this dependency ",
        "Line" : 191,
        "CharPositionInLine" : 85
      },
      "9" : {
        "Text" : " checker framework and error prone dependency for use with jOOQ-checker ",
        "Line" : 203,
        "CharPositionInLine" : 92
      },
      "10" : {
        "Text" : " When compilers say false, they mean true ...\n                             https://issues.apache.org/jira/browse/MCOMPILER-209 ",
        "Line" : 242,
        "CharPositionInLine" : 85
      },
      "11" : {
        "Text" : " IntelliJ needs these https://youtrack.jetbrains.com/issue/IDEA-195472 ",
        "Line" : 252,
        "CharPositionInLine" : 103
      },
      "12" : {
        "Text" : " [#2413] Make compiler warnings a bit more visible\n                             But don't fail (yet) ",
        "Line" : 259,
        "CharPositionInLine" : 54
      },
      "13" : {
        "Text" : " Avoid running into Java 8's very restrictive doclint issues ",
        "Line" : 305,
        "CharPositionInLine" : 93
      },
      "14" : {
        "Text" : " This is required by Maven Central ",
        "Line" : 422,
        "CharPositionInLine" : 63
      },
      "CommentCount" : 15
    }
  },
  "FileTypes" : {
    "ANT" : 1,
    "MAVEN" : 22
  },
  "ElapsedTime" : 1930
}