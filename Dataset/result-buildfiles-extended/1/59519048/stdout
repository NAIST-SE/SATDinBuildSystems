{
  "Repository" : "59519048",
  "Revision" : "HEAD",
  "ObjectId" : "266d61b1534ad8db9143dc518dc11fed783019ea",
  "CommitTime" : "2019-04-10T09:11:13Z",
  "Files" : {
    "atlas-aapt/CMakeLists.txt" : {
      "ObjectId" : "49ca00b72294a714714a25344cc690ca3dad544d",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/Makefile" : {
      "ObjectId" : "6c8f7952e9cc029a8cf834762ae4fcbf9d4ab746",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "### DO NOT EDIT THIS FILE ###\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### DO NOT EDIT THIS FILE ###\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "atlas-aapt/external/compiler-rt/CMakeLists.txt" : {
      "ObjectId" : "5f8b4d1bd2692d922ae51c03c13e93f478463755",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build for CompilerRT.\n\n#\n\n# This build assumes that CompilerRT is checked out into the\n\n# 'projects/compiler-rt' inside of an LLVM tree.\n\n# Standalone build system for CompilerRT is not yet ready.\n\n#\n\n# An important constraint of the build is that it only produces libraries\n\n# based on the ability of the host toolchain to target various platforms.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if compiler-rt is built as a standalone project.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The CompilerRT build system requires CMake version 2.8.8 or higher in order\n\n# to use its support for building convenience \"libraries\" as a collection of\n\n# .o files. This is particularly useful in producing larger, more complex\n\n# runtime libraries.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Version 2.8.12.1 is required to build with Visual Studio 2013.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# FIXME: It may be removed when we use 2.8.12.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Invalidate a couple of keywords.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Use ${cmake_2_8_12_KEYWORD} intead of KEYWORD in target_link_libraries().\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# automatic when 2.8.12 is required\n",
        "Line" : 39,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "# Top level target used to build all compiler-rt libraries.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compute the Clang version from the LLVM version.\n\n# FIXME: We should be able to reuse CLANG_VERSION variable calculated\n\n#        in Clang cmake files, instead of copying the rules here.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Setup the paths where compiler-rt runtimes and headers should be stored.\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Use just-built Clang to compile/link tests on all platforms, except for\n\n# Windows where we need to use clang-cl instead.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Take output dir and install path from the user.\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Use a host compiler to compile/link tests.\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Make use of LLVM CMake modules.\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Get some LLVM variables from LLVMConfig.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Find Python interpreter.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Define default arguments to lit.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Backwards compatibility: this variable used to be called\n\n# COMPILER_RT_TEST_TARGET_TRIPLE.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Determine if test target triple is specified explicitly, and doesn't match the\n\n# default.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Add path for custom compiler-rt modules.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# We support running instrumented tests when we're not cross compiling\n\n# and target a UNIX-like system or Windows.\n\n# We can run tests on Android even when we are cross-compiling.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# COMPILER_RT_DEBUG_PYBOOL is used by lit.common.configured.in.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#================================\n\n# Setup Compiler Flags\n\n#================================\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Emulate C99 and C++11's __func__ for MSVC prior to 2013 CTP.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Provide some common commmandline flags for Sanitizer runtimes.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Replace the /M[DT][d] flags with /MT, and strip any definitions of _DEBUG,\n\n# which cause definition mismatches at link time.\n\n# FIXME: In fact, sanitizers should support both /MT and /MD, see PR20214.\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Build with optimization, unless we're in debug mode. If we're using MSVC,\n\n# always respect the optimization flags set by CMAKE_BUILD_TYPE instead.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Determine if we should restrict stack frame sizes.\n\n# Stack frames on PowerPC and Mips and in debug biuld can be much larger than\n\n# anticipated.\n\n# FIXME: Fix all sanitizers and add -Wframe-larger-than to\n\n# SANITIZER_COMMON_FLAGS\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Build sanitizer runtimes with debug info.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Turn off several warnings.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Mac OS X prior to 10.9 had problems with exporting symbols from\n\n# libc++/libc++abi.\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 32
    },
    "atlas-aapt/external/compiler-rt/Makefile" : {
      "ObjectId" : "ac3daac5fce38ef43b103d3cde6a439e63fb2dbf",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Set default rule before anything else.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If SRCROOT is defined, assume we are doing an Apple style build. We should be\n\n# able to use RC_XBS for this but that is unused during \"make installsrc\".\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure we don't build with a missing ProjObjRoot.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n# Rules\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###\n\n# Top level targets\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# FIXME: Document the available subtargets.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Provide default clean target which is extended by other templates.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Test\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###\n\n# Directory handling magic.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Create directories as needed, and timestamp their creation.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Remove directories\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###\n\n# Include child makefile fragments\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###\n\n# Define Platform Rules\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Top-Level Platform Target\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Per-Config Libraries\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Compute the library suffix.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Compute the archs to build, depending on whether this is a universal build or\n\n# not.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Copy or lipo to create the per-config library.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Per-Config Targets\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Per-Config-Arch Libraries\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Compute the library suffix.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Compute the object inputs for this library.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Per-Config-Arch Targets\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Per-Config-Arch-SubDir Objects\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Run templates.\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "###\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "atlas-aapt/external/compiler-rt/cmake/Modules/AddCompilerRT.cmake" : {
      "ObjectId" : "6f401b1fa0c4b35e76c5cdb7c7a6e1d0b76c8a59",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tries to add an \"object library\" target for a given list of OSs and/or\n\n# architectures with name \"<name>.<arch>\" for non-Darwin platforms if\n\n# architecture can be targeted, and \"<name>.<os>\" for Darwin platforms.\n\n# add_compiler_rt_object_libraries(<name>\n\n#                                  OS <os names>\n\n#                                  ARCHS <architectures>\n\n#                                  SOURCES <source files>\n\n#                                  CFLAGS <compile flags>\n\n#                                  DEFS <compile definitions>)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Takes a list of object library targets, and a suffix and appends the proper\n\n# TARGET_OBJECTS string to the output variable.\n\n# format_object_libs(<output> <suffix> ...)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adds static or shared runtime for a list of architectures and operating\n\n# systems and puts it in the proper directory in the build and install trees.\n\n# add_compiler_rt_runtime(<name>\n\n#                         {STATIC|SHARED}\n\n#                         ARCHS <architectures>\n\n#                         OS <os list>\n\n#                         SOURCES <source files>\n\n#                         CFLAGS <compile flags>\n\n#                         LINKFLAGS <linker flags>\n\n#                         DEFS <compile definitions>\n\n#                         LINK_LIBS <linked libraries> (only for shared library)\n\n#                         OBJECT_LIBS <object libraries to use as sources>\n\n#                         PARENT_TARGET <convenience parent target>)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Unittests support.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# clang doesn't support exceptions on Windows yet.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We should teach clang to understand \"#pragma intrinsic\", see PR19898.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Clang doesn't support SEH on Windows yet.\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# gtest use a lot of stuff marked as deprecated on Windows.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Visual Studio 2012 only supports up to 8 template parameters in\n\n# std::tr1::tuple by default, but gtest requires 10\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Link objects into a single executable with COMPILER_RT_TEST_COMPILER,\n\n# using specified link flags. Make executable a part of provided\n\n# test_suite.\n\n# add_compiler_rt_test(<test_suite> <test_name>\n\n#                      SUBDIR <subdirectory for binary>\n\n#                      OBJECTS <object files>\n\n#                      DEPS <deps (e.g. runtime libs)>\n\n#                      LINK_FLAGS <link flags>)\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Use host compiler in a standalone build, and just-built Clang otherwise.\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# If we're not on MSVC, include the linker flags from CMAKE but override them\n\n# with the provided link flags. This ensures that flags which are required to\n\n# link programs at all are included, but the changes needed for the test\n\n# trump. With MSVC we can't do that because CMake is set up to run link.exe\n\n# when linking, not the compiler. Here, we hack it to use the compiler\n\n# because we want to use -fsanitize flags.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Make the test suite depend on the binary.\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Install in Clang resource directory.\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Builds custom version of libc++ and installs it in <prefix>.\n\n# Can be used to build sanitized versions of libc++ for running unit tests.\n\n# add_custom_libcxx(<name> <prefix>\n\n#                   DEPS <list of build deps>\n\n#                   CFLAGS <list of compile flags>)\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "atlas-aapt/external/compiler-rt/cmake/Modules/CompilerRTCompile.cmake" : {
      "ObjectId" : "48f40bf4f7530a66c0c837d4840e075430e1df56",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On Windows, CMAKE_*_FLAGS are built for MSVC but we use the GCC clang.exe,\n\n# which uses completely different flags. Translate some common flag types, and\n\n# drop the rest.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Insert an empty string in the list to simplify processing.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Canonicalize /flag to -flag.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make space separated -D and -U flags into joined flags.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Pass through basic command line macro definitions (-DNDEBUG).\n",
        "Line" : 17,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Canonicalize normal optimization flags to -O2.\n",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Compile a source into an object file with COMPILER_RT_TEST_COMPILER using\n\n# a provided compile flags and dependenices.\n\n# clang_compile(<object> <source>\n\n#               CFLAGS <list of compile flags>\n\n#               DEPS <list of dependencies>)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ignore unknown warnings. CMAKE_CXX_FLAGS may contain GCC-specific options\n\n# which are not supported by Clang.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# On Darwin, there are no system-wide C++ headers and the just-built clang is\n\n# therefore not able to compile C++ files unless they are copied/symlinked into\n\n# ${LLVM_BINARY_DIR}/include/c++\n\n# The just-built clang is used to build compiler-rt unit tests. Let's detect\n\n# this before we try to build the tests and print out a suggestion how to fix\n\n# it.\n\n# On other platforms, this is currently not an issue.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "atlas-aapt/external/compiler-rt/cmake/Modules/CompilerRTDarwinUtils.cmake" : {
      "ObjectId" : "511361b49a7a903131da6c75f9e3b4bacb9560fd",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On OS X SDKs can be installed anywhere on the base system and xcode-select can\n\n# set the default Xcode to use. This function finds the SDKs that are present in\n\n# the current Xcode.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Let's first try the internal SDK, otherwise use the public SDK.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# There isn't a clear mapping of what architectures are supported with a given\n\n# target platform, but ld's version output does list the architectures it can\n\n# link for.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If auto-detecting fails, fall back to a default set\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This function takes an OS and a list of architectures and identifies the\n\n# subset of the architectures list that the installed toolchain can target.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The simple program will build for x86_64h on the simulator because it is \n\n# compatible with x86_64 libraries (mostly), but since x86_64h isn't actually\n\n# a valid or useful architecture for the iOS simulator we should drop it.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# This function checks the host cpusubtype to see if it is post-haswell. Haswell\n\n# and later machines can run x86_64h binaries. Haswell is cpusubtype 8.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Read and process the exclude file into a list of symbols\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# this function takes an OS, architecture and minimum version and provides a\n\n# list of builtin functions to exclude\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# adds a single builtin library for a single OS & ARCH\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Filter out generic versions of routines that are re-implemented in\n\n# architecture specific manner.  This prevents multiple definitions of the\n\n# same symbols, making the symbol selection non-deterministic.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generates builtin libraries for all operating systems specified in ARGN. Each\n\n# OS library is constructed by lipo-ing together single-architecture libraries.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Don't build cc_kext libraries for simulator platforms\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# By not specifying MIN_VERSION this only reads the OS and OS-arch lists.\n\n# We don't want to filter out the builtins that are present in libSystem\n\n# because kexts can't link libSystem.\n",
        "Line" : 309,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# In addition to the builtins cc_kext includes some profile sources\n",
        "Line" : 320,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# We put the x86 sim slices into the archives for their base OS\n",
        "Line" : 344,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# this is a hacky opt-out. If you can't target both intel and arm\n\n# architectures we bail here.\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# x86 targets are hard float by default, but the complain about the\n\n# float ABI flag, so don't pass it unless we're targeting arm.\n",
        "Line" : 430,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 18
    },
    "atlas-aapt/external/compiler-rt/cmake/Modules/CompilerRTLink.cmake" : {
      "ObjectId" : "bb96869844c103f43d10d455dc0c8d74ea06be58",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Link a shared library with COMPILER_RT_TEST_COMPILER.\n\n# clang_link_shared(<output.so>\n\n#                   OBJECTS <list of input objects>\n\n#                   LINKFLAGS <list of link flags>\n\n#                   DEPS <list of dependencies>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "atlas-aapt/external/compiler-rt/cmake/Modules/CompilerRTUtils.cmake" : {
      "ObjectId" : "cf690f4a33c523f04aa37ba753d6569cbdf1314b",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Because compiler-rt spends a lot of time setting up custom compile flags,\n\n# define a handy helper function for it. The compile flags setting in CMake\n\n# has serious issues that make its syntax challenging at best.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the variable var_PYBOOL to True if var holds a true-ish string,\n\n# otherwise set it to False.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Appends value to all lists in ARGN, if the condition is true.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Appends value to all strings in ARGN, if the condition is true.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "atlas-aapt/external/compiler-rt/cmake/Modules/SanitizerUtils.cmake" : {
      "ObjectId" : "3eb49c83f51cb8349b5f2206fc329c80d527476a",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a target \"<name>-<arch>-symbols\" that would generate the list of\n\n# symbols that need to be exported from sanitizer runtime \"<name>\". Function\n\n# interceptors are exported automatically, user can also provide files with\n\n# symbol names that should be exported as well.\n\n#   add_sanitizer_rt_symbols(<name>\n\n#                            ARCHS <architectures>\n\n#                            PARENT_TARGET <convenience parent target>\n\n#                            EXTRA <files with extra symbols to export>)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Per-config install location.\n",
        "Line" : 45,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Add target to check code style for sanitizer runtimes.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "atlas-aapt/external/compiler-rt/cmake/config-ix.cmake" : {
      "ObjectId" : "f91530bb4403121a4203441ce1a78c31abdec270",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CodeGen options.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MinGW warns if -fvisibility-inlines-hidden is used.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Debug info flags.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Warnings.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Symbols.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Libraries.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Linker flags.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Architectures.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# List of all architectures we can target.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Try to compile a very simple source file to ensure we can target the given\n\n# platform. We use the results of these tests to build only the various target\n\n# runtime libraries supported by our current compilers cross-compiling\n\n# abilities.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# test_target_arch(<arch> <def> <target flags...>)\n\n# Checks if architecture is supported: runs host compiler with provided\n\n# flags to verify that:\n\n#   1) <def> is defined (if non-empty)\n\n#   2) simple file can be successfully built.\n\n# If successful, saves target flags for this architecture.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Bail out if we cannot target the architecture we plan to test.\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add $arch as supported with no additional flags.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# must be checked before __MIPS\n",
        "Line" : 163,
        "CharPositionInLine" : 19
      },
      "14" : {
        "Text" : "# Detect whether the current target platform is 32-bit or 64-bit, and setup\n\n# the correct commandline flags needed to attempt to target 32-bit and 64-bit.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Generate the COMPILER_RT_SUPPORTED_ARCH list.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Examine compiler output to determine target architecture.\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Supported archs for Apple platforms are generated later\n",
        "Line" : 182,
        "CharPositionInLine" : 18
      },
      "18" : {
        "Text" : "# FIXME: We build runtimes for both i686 and i386, as \"clang -m32\" may\n\n# target different variant than \"$CMAKE_C_COMPILER -m32\". This part should\n\n# be gone after we resolve PR14109.\n",
        "Line" : 186,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Gcc doesn't accept -m32/-m64 so we do the next best thing and use\n\n# -mips32r2/-mips64r2. We don't use -mips1/-mips3 because we want to match\n\n# clang's default CPU's. In the 64-bit case, we must also specify the ABI\n\n# since the default ABI differs between gcc and clang.\n\n# FIXME: Ideally, we would build the N32 library too.\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Takes ${ARGN} and puts only supported architectures in @out_var list.\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Returns a list of architecture specific target cflags in @out_var list.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# This is only called in constructing cflags for tests executing on the\n\n# host. This will need to all be cleaned up to support building tests\n\n# for cross-targeted hardware (i.e. iOS).\n",
        "Line" : 248,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# On Darwin if /usr/include doesn't exist, the user probably has Xcode but not\n\n# the command line tools. If this is the case, we need to find the OS X\n\n# sysroot to pass to clang.\n",
        "Line" : 290,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Note: In order to target x86_64h on OS X the minimum deployment target must\n\n# be 10.8 or higher.\n",
        "Line" : 307,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# We're setting the flag manually for each target OS\n",
        "Line" : 328,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Figure out which arches to use for each OS\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Need to build a 10.4 compatible libclang_rt\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# don't include the Haswell slice in the 10.4 compatibility library\n",
        "Line" : 377,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# for list_union\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Architectures supported by compiler-rt libraries.\n",
        "Line" : 479,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# LSan and UBSan common files should be available on all architectures\n\n# supported by other sanitizers (even if they build into dummy object files).\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# TODO: Add builtins support.\n",
        "Line" : 538,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "atlas-aapt/external/compiler-rt/include/CMakeLists.txt" : {
      "ObjectId" : "ad1437ed15eca3d0829dac87090140fd773b3b9d",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy compiler-rt headers to the build tree.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install sanitizer headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "atlas-aapt/external/compiler-rt/lib/CMakeLists.txt" : {
      "ObjectId" : "4bc6f7a2d576e3861d91aaaefd552db5812b040a",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First, add the subdirectories which contain feature-based runtime libraries\n\n# and several convenience helper libraries.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "atlas-aapt/external/compiler-rt/lib/asan/CMakeLists.txt" : {
      "ObjectId" : "6716f48b22bd46466392fbb1c45a55ad7764dc0a",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the AddressSanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Android, -z global does not do what it is documented to do.\n\n# On Android, -z global moves the library ahead in the lookup order,\n\n# placing it right after the LD_PRELOADs. This is used to compensate for the fact\n\n# that Android linker does not look at the dependencies of the main executable\n\n# that aren't dependencies of the current DSO when resolving symbols from said DSO.\n\n# As a net result, this allows running ASan executables without LD_PRELOAD-ing the\n\n# ASan runtime library.\n\n# The above is applicable to L MR1 or newer.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compile ASan sources into an object library.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build ASan runtimes shipped with Clang.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build separate libraries for each target.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The only purpose of RTAsan_dynamic_version_script_dummy is to carry\n\n# a dependency of the shared runtime on the version script. With CMake\n\n# 3.1 or later it can be replaced with a straightforward\n\n# add_dependencies(clang_rt.asan-dynamic-${arch} clang_rt.asan-dynamic-${arch}-version-list)\n",
        "Line" : 179,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 6
    },
    "atlas-aapt/external/compiler-rt/lib/asan/scripts/CMakeLists.txt" : {
      "ObjectId" : "e5ab8ebed024211d4b8c18a367608d1ef1f4dd11",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/asan/tests/CMakeLists.txt" : {
      "ObjectId" : "9eeacd8960554c30d757d3588875b533e4d1cbac",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Testing rules for AddressSanitizer.\n\n#\n\n# These are broken into two buckets. One set of tests directly interacts with\n\n# the runtime library and checks its functionality. These are the\n\n# no-instrumentation tests.\n\n#\n\n# Another group of tests relies upon the ability to compile the test with\n\n# address sanitizer instrumentation pass. These tests form \"integration\" tests\n\n# and have some elements of version skew -- they test the *host* compiler's\n\n# instrumentation against the just-built runtime library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -gline-tables-only must be enough for ASan, so use it if possible.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use -D instead of definitions to please custom compile command.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disable exceptions on Windows until they work reliably.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# x86_64 FreeBSD 9.2 additionally requires libc++ to build the tests.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Unit tests on Mac depend on Foundation.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NDK r10 requires -latomic almost always.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO(eugenis): move all -l flags above to _LIBS?\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NDK r10 requires -latomic almost always.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compile source for the given architecture, using compiler\n\n# options in ${ARGN}, and add it to the object list.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Link ASan unit test for a given architecture from a set\n\n# of objects in with given linker flags.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Main AddressSanitizer unit tests.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# AddressSanitizer unit tests with dynamic runtime (on platforms where it's\n\n# not the default).\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ASan benchmarks (not actively used now).\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Adds ASan unit tests and benchmarks for architecture.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Instrumented tests.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Add Mac-specific helper.\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Add static ASan runtime that will be linked with uninstrumented tests.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Uninstrumented tests.\n",
        "Line" : 239,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Benchmarks.\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Test w/o ASan instrumentation. Link it with ASan statically.\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# FIXME: .arch?\n",
        "Line" : 274,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# Test with ASan instrumentation. Link with ASan dynamic runtime.\n",
        "Line" : 287,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Setup correct output directory and link flags.\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Add unit tests to the test suite.\n",
        "Line" : 298,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "atlas-aapt/external/compiler-rt/lib/builtins/CMakeLists.txt" : {
      "ObjectId" : "5ffad1d47b17507d8998153940b0906fbdcc4b9a",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This directory contains a large amount of C code which provides\n\n# generic implementations of the core runtime library along with optimized\n\n# architecture-specific code in various subdirectories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: Need to add a mechanism for logging errors when builtin source files are\n\n# added to a sub-directory and not this CMakeLists file.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: atomic.c may only be compiled if host compiler understands _Atomic\n\n# atomic.c\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# MSVC\n",
        "Line" : 217,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Use C versions of functions when building on MSVC\n\n# MSVC's assembler takes Intel syntax, not AT&T syntax\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# if (NOT MSVC)\n",
        "Line" : 228,
        "CharPositionInLine" : 9
      },
      "6" : {
        "Text" : "# macho_embedded archs\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Filter out generic versions of routines that are re-implemented in\n\n# architecture specific manner.  This prevents multiple definitions of the\n\n# same symbols, making the symbol selection non-deterministic.\n",
        "Line" : 367,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 8
    },
    "atlas-aapt/external/compiler-rt/lib/builtins/Darwin-excludes/CMakeLists.txt" : {
      "ObjectId" : "266e422152436475a5942ca47653a7640b1ce177",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/builtins/macho_embedded/CMakeLists.txt" : {
      "ObjectId" : "266e422152436475a5942ca47653a7640b1ce177",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/cfi/CMakeLists.txt" : {
      "ObjectId" : "24e51814cdab5ad308b363f6f3dfb9287dc35ac3",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/dfsan/CMakeLists.txt" : {
      "ObjectId" : "19a7909d0429f09a72039ff0b7fa94172d3c1e9f",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runtime library sources and build flags.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent clang from generating libc calls.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Static runtime library.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "atlas-aapt/external/compiler-rt/lib/interception/CMakeLists.txt" : {
      "ObjectId" : "16b41c976d6bc220ce442552f801e030532f50bd",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the runtime interception helper library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "atlas-aapt/external/compiler-rt/lib/lsan/CMakeLists.txt" : {
      "ObjectId" : "20e40932165c011e26c2499730735f2c53ccac37",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/msan/CMakeLists.txt" : {
      "ObjectId" : "1b48def462801adc097fccc91608c338b3e35ab9",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runtime library sources and build flags.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent clang from generating libc calls.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Static runtime library.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "atlas-aapt/external/compiler-rt/lib/msan/tests/CMakeLists.txt" : {
      "ObjectId" : "4bc8254815ec76427ed084aa7cf120195944a003",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unittest sources and build flags.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: we build libcxx without cxxabi and need libstdc++ to provide it.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Compile source for the given architecture, using compiler\n\n# options in ${ARGN}, and add it to the object list.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Main MemorySanitizer unit tests.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Adds MSan unit tests and benchmarks for architecture.\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build gtest instrumented with MSan.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Instrumented tests.\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Instrumented loadable module objects.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Instrumented loadable library tests.\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# We should only build MSan unit tests if we can build instrumented libcxx.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "atlas-aapt/external/compiler-rt/lib/profile/CMakeLists.txt" : {
      "ObjectId" : "1b10ade0eee615c1aad90c3e68d5de2adccc29a3",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/safestack/CMakeLists.txt" : {
      "ObjectId" : "9c11bb6f7e61040b91d0cd402d57eb8bb2e0d51a",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build universal binary on APPLE.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Otherwise, build separate libraries for each target.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "atlas-aapt/external/compiler-rt/lib/sanitizer_common/CMakeLists.txt" : {
      "ObjectId" : "6a20f025507a7ee80ef0c1eea7a74b229762cdfa",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build system for the common Sanitizer runtime support library components.\n\n# These components are shared between AddressSanitizer and ThreadSanitizer.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libc functions stubs. These sources should be linked instead of\n\n# SANITIZER_LIBCDEP_SOURCES when sanitizer_common library must not depend on\n\n# libc.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Explicitly list all sanitizer_common headers. Not all of these are\n\n# included in sanitizer_common source files, but we need to depend on\n\n# headers when building our custom unit tests.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Unit tests for common sanitizer runtime.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "atlas-aapt/external/compiler-rt/lib/sanitizer_common/tests/CMakeLists.txt" : {
      "ObjectId" : "540d506986e7db6e9ea2892b24546de616e84215",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: use SANITIZER_COMMON_SUPPORTED_ARCH here\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable exceptions on Windows until they work reliably.\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# -gline-tables-only must be enough for these tests, so use it if possible.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NDK r10 requires -latomic almost always.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# x86_64 FreeBSD 9.2 additionally requires libc++ to build the tests. Also,\n\n# 'libm' shall be specified explicitly to build i386 tests.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Adds static library which contains sanitizer_common object file\n\n# (universal binary on Mac and arch-specific object files on Linux).\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Sanitizer_common unit tests testsuite.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Adds sanitizer tests for architecture.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add unittest target.\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Test that the libc-independent part of sanitizer_common is indeed\n\n# independent of libc, by linking this binary without libc (here) and\n\n# executing it (unit test in sanitizer_nolibc_test.cc).\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# We use just-built clang to build sanitizer_common unittests, so we must\n\n# be sure that produced binaries would work.\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Setup correct output directory and link flags.\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add unit test to test suite.\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "atlas-aapt/external/compiler-rt/lib/tsan/CMakeLists.txt" : {
      "ObjectId" : "0e60cd3464d81406dfa494938a754c7eb2a81337",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the ThreadSanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SANITIZER_COMMON_CFLAGS contains -fPIC, but it's performance-critical for\n\n# TSan runtime to be built with -fPIE to reduce the number of register spills.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add extra debug information to TSan runtime. This configuration is rarely\n\n# used, but we need to support it so that debug output will not bitrot.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Assume Linux\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Xcode will try to compile this file as C ('clang -x c'), and that will fail.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Pass ASM file directly to the C++ compiler.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Build and check Go runtime.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Pass ASM file directly to the C++ compiler.\n",
        "Line" : 137,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Sanity check for Go runtime.\n",
        "Line" : 140,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Pass ASM file directly to the C++ compiler.\n",
        "Line" : 151,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Pass ASM file directly to the C++ compiler.\n",
        "Line" : 156,
        "CharPositionInLine" : 5
      },
      "11" : {
        "Text" : "# Make sure that non-platform-specific files don't include any system headers.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Build libcxx instrumented with TSan.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "atlas-aapt/external/compiler-rt/lib/tsan/dd/CMakeLists.txt" : {
      "ObjectId" : "6330bd9fbe7a5adb5e3f3fecb65de9fd892d9a54",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the experimental deadlock detector runtime library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Deadlock detector is currently supported on 64-bit Linux only.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "atlas-aapt/external/compiler-rt/lib/tsan/tests/CMakeLists.txt" : {
      "ObjectId" : "e0c3f8a1a6d8c8575da1b8ae09588b00992090ef",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tsan_compile(obj_list, source, arch, {headers})\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build unit tests only for 64-bit Linux.\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# FIXME: Looks like we should link TSan with just-built runtime,\n\n# and not rely on -fsanitize=thread, as these tests are essentially\n\n# unit tests.\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "atlas-aapt/external/compiler-rt/lib/tsan/tests/rtl/CMakeLists.txt" : {
      "ObjectId" : "989566d9e041f6f25c3980450409db2e31ad6cf6",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/tsan/tests/unit/CMakeLists.txt" : {
      "ObjectId" : "6898f641d6a005f0dcb322cefe5f09df1383e297",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/compiler-rt/lib/ubsan/CMakeLists.txt" : {
      "ObjectId" : "5ece9a62cfebfe15ca7744b8e2a1641cb041a0e6",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build for the undefined behavior sanitizer runtime support library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Common parts of UBSan runtime.\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Initializer of standalone UBSan runtime.\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Common parts of UBSan runtime.\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# C++-specific parts of UBSan runtime. Requires a C++ ABI library.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Initializer of standalone UBSan runtime.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Standalone UBSan runtimes.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "atlas-aapt/external/libcxx/CMakeLists.txt" : {
      "ObjectId" : "be6fbbe61fbd3454cc77585e6f9dc978fc93d03b",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See www/CMake.html for instructions on how to build libcxx with CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#===============================================================================\n\n# Setup Project\n\n#===============================================================================\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set MACOSX_RPATH=YES by default\n",
        "Line" : 9,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# Required when interacting with LLVM and Clang\n",
        "Line" : 12,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Require out of source build.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the LLVM sources and simulate LLVM CMake options.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#===============================================================================\n\n# Setup CMake Options\n\n#===============================================================================\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Basic options ---------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ABI Library options ---------------------------------------------------------\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build libc++abi with libunwind. We need this option to determine whether to\n\n# link with libunwind or libgcc_s while running the test cases.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Target options --------------------------------------------------------------\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Feature options -------------------------------------------------------------\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Misc options ----------------------------------------------------------------\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#===============================================================================\n\n# Check option configurations\n\n#===============================================================================\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Ensure LIBCXX_ENABLE_MONOTONIC_CLOCK is set to ON only when\n\n# LIBCXX_ENABLE_THREADS is on.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Ensure LLVM_USE_SANITIZER is not specified when LIBCXX_GENERATE_COVERAGE\n\n# is ON.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set LIBCXX_BUILD_32_BITS to (LIBCXX_BUILD_32_BITS OR LLVM_BUILD_32_BITS)\n\n# and check that we can build with 32 bits if requested.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Don't duplicate the output from LLVM\n",
        "Line" : 117,
        "CharPositionInLine" : 55
      },
      "19" : {
        "Text" : "# Check that this option is not enabled on Apple and emit a usage warning.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#===============================================================================\n\n# Configure System\n\n#===============================================================================\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Declare libc++ configuration variables.\n\n# They are intended for use as follows:\n\n# LIBCXX_CXX_FLAGS: General flags for both the compiler and linker.\n\n# LIBCXX_COMPILE_FLAGS: Compile only flags.\n\n# LIBCXX_LINK_FLAGS: Linker only flags.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Configure compiler.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Configure coverage options.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#===============================================================================\n\n# Setup Compiler Flags\n\n#===============================================================================\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Steup the ABI library flags\n",
        "Line" : 169,
        "CharPositionInLine" : 25
      },
      "26" : {
        "Text" : "# Include macros for adding and removing libc++ flags.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Remove flags that may have snuck in.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Required flags ==============================================================\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# On all systems the system c++ standard library headers need to be excluded.\n\n# MSVC only has -X, which disables all default includes; including the crt.\n\n# Thus, we do nothing and hope we don't accidentally include any of the C++\n\n# headers\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Target flags ================================================================\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Warning flags ===============================================================\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# TODO(EricWF) Remove this. We shouldn't be suppressing errors when -Werror is\n\n# added elsewhere.\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Exception flags =============================================================\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Catches C++ exceptions only and tells the compiler to assume that extern C\n\n# functions never throw a C++ exception.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# RTTI flags ==================================================================\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Assertion flags =============================================================\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# MSVC doesn't like _DEBUG on release builds. See PR 4379.\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Feature flags ===============================================================\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Sanitizer flags\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Configure for sanitizers. If LIBCXX_BUILT_STANDALONE then we have to do\n\n# the flag translation ourselves. Othewise LLVM's CMakeList.txt will handle it.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# NOTE: LLVM_USE_SANITIZER checks for a UNIX like system instead of MSVC.\n\n# But we don't have LLVM_ON_UNIX so checking for MSVC is the best we can do.\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#===============================================================================\n\n# Setup Source Code And Tests\n\n#===============================================================================\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 43
    },
    "atlas-aapt/external/libcxx/Makefile" : {
      "ObjectId" : "ab7b5b603a04d83bc8f10face76774c8635ad2d6",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n# libc++ Makefile\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The installheaders target is used by clang's runtime/libcxx makefile.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "atlas-aapt/external/libcxx/cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "addd10abdfe10301e047fa0614c4619f70d3b6a3",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/libcxx/cmake/Modules/HandleLibCXXABI.cmake" : {
      "ObjectId" : "4224882f4225580bb3a618b4c303a46f12d841bc",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===============================================================================\n\n# Add an ABI library if appropriate\n\n#===============================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# _setup_abi: Set up the build to use an ABI library\n\n#\n\n# Parameters:\n\n#   abidefines: A list of defines needed to compile libc++ with the ABI library\n\n#   abilib    : The ABI library to link against.\n\n#   abifiles  : A list of files (which may be relative paths) to copy into the\n\n#               libc++ build tree for the build.  These files will also be\n\n#               installed alongside the libc++ headers.\n\n#   abidirs   : A list of relative paths to create under an include directory\n\n#               in the libc++ build directory.\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setup the default options if LIBCXX_CXX_ABI is not specified.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure based on the selected ABI library.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link against just-built \"cxxabi\" target.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Assume c++abi is installed in the system, rely on -lc++abi link flag.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "atlas-aapt/external/libcxx/cmake/Modules/HandleLibcxxFlags.cmake" : {
      "ObjectId" : "223b7b7b8a6abb21ec0a48ed0520f59aaf70c86f",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HandleLibcxxFlags - A set of macros used to setup the flags used to compile\n\n# and link libc++. These macros add flags to the following CMake variables.\n\n# - LIBCXX_COMPILE_FLAGS: flags used to compile libc++\n\n# - LIBCXX_LINK_FLAGS: flags used to link libc++\n\n# - LIBCXX_LIBRARIES: libraries to link libc++ to.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mangle the name of a compiler flag into a valid CMake identifier.\n\n# Ex: --std=c++11 -> STD_EQ_CXX11\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove a list of flags from all CMake variables that affect compile flags.\n\n# This can be used to remove unwanted flags specified on the command line\n\n# or added in other parts of LLVM's cmake configuration.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add a macro definition if condition is true.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add a macro definition if condition is not true.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add a specified list of flags to both 'LIBCXX_COMPILE_FLAGS' and\n\n# 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the specified 'condition' is true then add a list of flags to both\n\n# 'LIBCXX_COMPILE_FLAGS' and 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add each flag in the list to LIBCXX_COMPILE_FLAGS and LIBCXX_LINK_FLAGS\n\n# if that flag is supported by the current compiler.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add a list of flags to 'LIBCXX_COMPILE_FLAGS'.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If 'condition' is true then add the specified list of flags to\n\n# 'LIBCXX_COMPILE_FLAGS'\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For each specified flag, add that flag to 'LIBCXX_COMPILE_FLAGS' if the\n\n# flag is supported by the C++ compiler.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add a list of flags to 'LIBCXX_LINK_FLAGS'.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If 'condition' is true then add the specified list of flags to\n\n# 'LIBCXX_LINK_FLAGS'\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For each specified flag, add that flag to 'LIBCXX_LINK_FLAGS' if the\n\n# flag is supported by the C++ compiler.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add a list of libraries or link flags to 'LIBCXX_LIBRARIES'.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if 'condition' is true then add the specified list of libraries and flags\n\n# to 'LIBCXX_LIBRARIES'.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Turn a comma separated CMake list into a space separated string.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "atlas-aapt/external/libcxx/cmake/Modules/HandleOutOfTreeLLVM.cmake" : {
      "ObjectId" : "bf629a927cf39dafa3e7cf03f137dae98848dc50",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# LLVM Options --------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Required LIT Configuration ------------------------------------------------\n\n# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make sure we can use the console pool for recent cmake and ninja > 1.5\n\n# Needed for add_lit_testsuite\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add LLVM Functions --------------------------------------------------------\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "atlas-aapt/external/libcxx/cmake/Modules/MacroEnsureOutOfSourceBuild.cmake" : {
      "ObjectId" : "a0669365bf99ca3c91fd25595a19d8d2f2f21365",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MACRO_ENSURE_OUT_OF_SOURCE_BUILD(<errorMessage>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "atlas-aapt/external/libcxx/cmake/config-ix.cmake" : {
      "ObjectId" : "ace7aca4b18383fb158b4da235ae3d10bbcbdca8",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check compiler flags\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "atlas-aapt/external/libcxx/include/CMakeLists.txt" : {
      "ObjectId" : "95206bfeeaff1809eee0b866afb34c64b0efbcaf",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/libcxx/lib/CMakeLists.txt" : {
      "ObjectId" : "26dee6765c7b41e1a77f94e5f0d8a4899e861119",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get sources\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add all the headers to the project for IDEs.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force them all into the headers dir on MSVC, otherwise they end up at\n\n# project scope because they don't have extensions.\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#if LIBCXX_CXX_ABI_LIBRARY_PATH is defined we want to add it to the search path.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate library list.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Setup flags.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "atlas-aapt/external/libcxxabi/CMakeLists.txt" : {
      "ObjectId" : "d77f7849ea5584051ce3f4c0aafb1a5295b1bb83",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===============================================================================\n\n# Setup Project\n\n#===============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set MACOSX_RPATH=YES by default\n",
        "Line" : 8,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : "# Rely on llvm-config.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Seek installed Lit.\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Define the default arguments to use with 'lit', and an option for the user\n\n# to override.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#===============================================================================\n\n# Setup CMake Options\n\n#===============================================================================\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Define options.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Default to building a shared library so that the default options still test\n\n# the libc++abi that is being built. There are two problems with testing a\n\n# static libc++abi. In the case of a standalone build, the tests will link the\n\n# system's libc++, which might not have been built against our libc++abi. In the\n\n# case of an in tree build, libc++ will prefer a dynamic libc++abi from the\n\n# system over a static libc++abi from the output directory.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#===============================================================================\n\n# Configure System\n\n#===============================================================================\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Configure compiler.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#===============================================================================\n\n# Setup Compiler Flags\n\n#===============================================================================\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Get required flags.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Remove -stdlib flags to prevent them from causing an unused flag warning.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Get warning flags\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Get feature flags.\n\n# Exceptions\n\n# Catches C++ exceptions only and tells the compiler to assume that extern C\n\n# functions never throw a C++ exception.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Assert\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# MSVC doesn't like _DEBUG on release builds. See PR 4379.\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# On Release builds cmake automatically defines NDEBUG, so we\n\n# explicitly undefine it:\n",
        "Line" : 259,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Static library\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# This is the _ONLY_ place where add_definitions is called.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Define LIBCXXABI_USE_LLVM_UNWINDER for conditional compilation.\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#===============================================================================\n\n# Setup Source Code\n\n#===============================================================================\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Add source code. This also contains all of the logic for deciding linker flags\n\n# soname, etc...\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# TODO: Fix the libc++ cmake files so that libc++abi can be statically linked.\n\n# As it is now, libc++ will prefer linking against a dynamic libc++abi in the\n\n# system library paths over a static libc++abi in the out directory. This\n\n# would test the system library rather than the one we just built, which isn't\n\n# very helpful.\n",
        "Line" : 342,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "atlas-aapt/external/libcxxabi/cmake/config-ix.cmake" : {
      "ObjectId" : "5405587554b5cbf0e01c9233d31138e3b9754f18",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check compiler flags\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check libraries\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "atlas-aapt/external/libcxxabi/src/CMakeLists.txt" : {
      "ObjectId" : "fda2d105f420f250598f1fbf9deb8953d986291e",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add all the headers to the project for IDEs.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force them all into the headers dir on MSVC, otherwise they end up at\n\n# project scope because they don't have extensions.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Generate library list.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setup flags.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add a object library that contains the compiled source files.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build the shared library.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build the static library.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add a meta-target for both libraries.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "atlas-aapt/external/libpng/CMakeLists.txt" : {
      "ObjectId" : "3afe2154e070830d9b22245f3f9e4a11214875e7",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2007,2009-2016 Glenn Randers-Pehrson\n\n# Written by Christian Ehrlicher, 2007\n\n# Revised by Roger Lowman, 2009-2010\n\n# Revised by Clifford Yapp, 2011-2012\n\n# Revised by Roger Leigh, 2016\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This code is released under the libpng license.\n\n# For conditions of distribution and use, see the disclaimer\n\n# and license in png.h\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set MacOSX @rpath usage globally.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use new variable expansion policy.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# needed packages\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# not needed on windows\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# COMMAND LINE OPTIONS\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Many more configuration options could be added here\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# SET LIBNAME\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# to distinguish between debug and release lib\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Check if LD supports linker scripts.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Find symbol prefix.  Likely obsolete and unnecessary with recent\n\n# toolchains (it's not done in many other projects).\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# No awk available to generate sources; use pre-built pnglibconf.h\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Dummy\n",
        "Line" : 152,
        "CharPositionInLine" : 30
      },
      "15" : {
        "Text" : "# Generate .chk from .out with awk\n\n# generate_chk(INPUT inputfile OUTPUT outputfile [DEPENDS dep1 [dep2...]])\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Generate .out from .c with awk\n\n# generate_out(INPUT inputfile OUTPUT outputfile [DEPENDS dep1 [dep2...]])\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Generate specific source file with awk\n\n# generate_source(OUTPUT outputfile [DEPENDS dep1 [dep2...]])\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Copy file\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Generate scripts/pnglibconf.h\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Generate pnglibconf.c\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Generate pnglibconf.h\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Generate pngprefix.h\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# A single target handles generation of all generated files.  If\n\n# they are dependend upon separately by multiple targets, this\n\n# confuses parallel make (it would require a separate top-level\n\n# target for each file to track the dependencies properly).\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# OUR SOURCES\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# NOW BUILD OUR TARGET\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# msvc does not append 'lib' - do it here to have consistent name\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# does not work without changing name\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# MSVC doesn't use a different file extension for shared vs. static\n\n# libs.  We are able to change OUTPUT_NAME to remove the _static\n\n# for all other platforms.\n",
        "Line" : 426,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# msvc does not append 'lib' - do it here to have consistent name\n",
        "Line" : 440,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# have generator expressions\n",
        "Line" : 492,
        "CharPositionInLine" : 36
      },
      "31" : {
        "Text" : "# old 2.x add_test; limited and won't work well on Windows\n",
        "Line" : 498,
        "CharPositionInLine" : 9
      },
      "32" : {
        "Text" : "# Note LIBPNG is a dummy value as there are no generator expressions\n",
        "Line" : 499,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Find test PNG files by globbing, but sort lists to ensure\n\n# consistency between different filesystems.\n",
        "Line" : 508,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Should already be sorted, but sort anyway to be certain.\n",
        "Line" : 600,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Ensure the CMAKE_LIBRARY_OUTPUT_DIRECTORY is set\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Set a variable with CMake code which:\n\n# Creates a symlink from src to dest (if possible) or alternatively\n\n# copies if different.\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Create source generation scripts.\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# libpng is a library so default to 'lib'\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# CREATE PKGCONFIG FILES\n\n# we use the same files like ./configure, so we have to set its vars\n\n# Only do this on Windows for Cygwin - the files don't make much sense outside\n\n# a UNIX look alike\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# SET UP LINKS\n",
        "Line" : 696,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#   VERSION 16.${PNGLIB_RELEASE}.1.6.22beta03\n",
        "Line" : 699,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# If CMake > 2.4.x, we set a variable used below to export\n\n# targets to an export file.\n\n# TODO: Use VERSION_GREATER after our cmake_minimum_required >= 2.6.2\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# future proof\n",
        "Line" : 710,
        "CharPositionInLine" : 38
      },
      "44" : {
        "Text" : "# INSTALL\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Create a symlink for libpng.dll.a => libpng16.dll.a on Cygwin\n",
        "Line" : 724,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Install man pages\n",
        "Line" : 768,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Install pkg-config files\n",
        "Line" : 774,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# On versions of CMake that support it, create an export file CMake\n\n# users can include() to import our targets\n",
        "Line" : 787,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# what's with libpng-manual.txt and all the extra files?\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# UNINSTALL\n\n# do we need this?\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# DIST\n\n# do we need this?\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# to create msvc import lib for mingw compiled shared lib\n\n# pexports libpng.dll > libpng.def\n\n# lib /def:libpng.def /machine:x86\n",
        "Line" : 801,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "atlas-aapt/external/libpng/Makefile.am" : {
      "ObjectId" : "73097dbccc9337bf6bd20571b69c2992ed0cd71f",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Makefile.am:\n\n#   Source file for Makefile.in (and hence Makefile)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# test programs - run on make check, make distcheck\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Utilities - installed\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This ensures that pnglibconf.h gets built at the start of 'make all' or\n\n# 'make check', but it does not add dependencies to the individual programs,\n\n# this is done below.\n\n#\n\n# IMPORTANT: always add the object modules of new programs to the list below\n\n# because otherwise the sequence 'configure; make new-program' will *sometimes*\n\n# result in the installed (system) pnglibconf.h being used and the result is\n\n# always wrong and always very confusing.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generally these are single line shell scripts to run a test with a particular\n\n# set of parameters:\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# man pages\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# generate the -config scripts if required\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# rules to build libpng, only build the old library on request\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# EXTRA_LTLIBRARIES= libpng.la\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#   Versioned symbols and restricted exports\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#   Only restricted exports when possible\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#distribute headers in /usr/include/libpng/*\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# pkg-config stuff, note that libpng.pc is always required in order\n\n# to get the correct library\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Extra source distribution files, '${srcdir}' is used below to stop build files\n\n# from those directories being included.  This only works if the configure is\n\n# not done in the source directory!\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# PNG_COPTS give extra options for the C compiler to be used on all compilation\n\n# steps (unless targe_CFLAGS is specified; that will take precedence over\n\n# AM_CFLAGS)\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# DFNCPP is normally just CPP - the C preprocessor - but on Solaris and maybe\n\n# other operating systems (NeXT?) the C preprocessor selected by configure\n\n# checks input tokens for validity - effectively it performs part of the ANSI-C\n\n# parsing - and therefore fails with the .df files.  configure.ac has special\n\n# checks for this and sets DFNCPP appropriately.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Rename functions in scripts/prefix.out with a PNG_PREFIX prefix.\n\n# Rename macros in scripts/macro.lst from PNG_PREFIXpng_ to PNG_ (the actual\n\n# implementation of the macro).\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# is empty\n",
        "Line" : 193,
        "CharPositionInLine" : 13
      },
      "18" : {
        "Text" : "# The following is necessary to ensure that the local pnglibconf.h is used, not\n\n# an installed one (this can happen immediately after on a clean system if\n\n# 'make test' is the first thing the user does.)  Only files which include\n\n# one of the png source files (typically png.h or pngpriv.h) need to be listed\n\n# here:\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# We must use -DPNG_NO_USE_READ_MACROS here even when the library may actually\n\n# be built with PNG_USE_READ_MACROS; this prevents the read macros from\n\n# interfering with the symbol file format.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The .c file for pnglibconf.h is machine generated\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Symbol checks (.def and .out files should match)\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# used on demand to regenerate the standard header, CPPFLAGS should\n\n# be empty - no non-standard defines\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Extra checks\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Don't distribute the generated script files\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Make links between installed files with release-specific names and the generic\n\n# file names.  If this install rule is run the generic names will be deleted and\n\n# recreated - this has obvious issues for systems with multiple installations.\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# EXT_LIST is a list of the possibly library directory extensions, this exists\n\n# because we can't find a good way of discovering the file extensions that are\n\n# actually installed on a given system, so instead we check for every extension\n\n# we have seen.\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# If --enable-unversioned-links is specified the header and lib file links\n\n# will be automatically made on a 'make install':\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Likewise, --install-pc causes libpng.pc to be constructed:\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# And --install-config:\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# The following addition ensures that 'make all' always builds the test programs\n\n# too.  It used to, but some change either in libpng or configure stopped this\n\n# working.\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "atlas-aapt/external/zlib/src/CMakeLists.txt" : {
      "ObjectId" : "0c0247cc516b4493bb9a9b66f743a6110139a2b5",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clear variable\n",
        "Line" : 47,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we're doing an out of source build and the user has a zconf.h\n\n# in their source tree...\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If present will override custom build rule below.\n",
        "Line" : 128,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This property causes shared libraries on Linux to have the full version\n\n# encoded into their final filename.  We disable this on Cygwin because\n\n# it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\n# seems to be the default.\n\n#\n\n# This has no effect with MSVC, on that platform the version info for\n\n# the DLL comes from the resource file win32/zlib1.rc\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# On unix-like platforms the library is almost always called libz\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Creates zlib1.dll when building shared library version\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#============================================================================\n\n# Example binaries\n\n#============================================================================\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "atlas-aapt/external/zlib/src/contrib/blast/Makefile" : {
      "ObjectId" : "9be80bafe050eed57029ef2e690f36677a3003c0",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/zlib/src/contrib/minizip/Makefile" : {
      "ObjectId" : "84eaad20d4fb19b00965268dd75d7e9b66c8cc21",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/zlib/src/contrib/minizip/Makefile.am" : {
      "ObjectId" : "d343011ebc3b3fd78d2bc3a29801a083c038cf0c",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/zlib/src/contrib/puff/Makefile" : {
      "ObjectId" : "0e2594c80885c0dbea13c6d22b2e60e9fb82b51f",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# puff full coverage test (should say 100%)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "atlas-aapt/external/zlib/src/contrib/untgz/Makefile" : {
      "ObjectId" : "b54266fba20a167a1d83b7afd503dfd2f849ca57",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "atlas-aapt/external/zlib/src/nintendods/Makefile" : {
      "ObjectId" : "21337d01ab2fe20743682125994666e20af6b7e7",
      "LastModified" : "2017-03-07T02:00:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# TARGET is the name of the output\n\n# BUILD is the directory where object files & intermediate files will be placed\n\n# SOURCES is a list of directories containing source code\n\n# DATA is a list of directories containing data files\n\n# INCLUDES is a list of directories containing header files\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# options for code generation\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# list of directories containing libraries, this must be the top level containing\n\n# include and lib\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# no real need to edit anything past this point unless you need to add additional\n\n# rules for different file extensions\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# use CXX for linking C++ projects, CC for standard C\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#---------------------------------------------------------------------------------\n\n# main targets\n\n#---------------------------------------------------------------------------------\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#---------------------------------------------------------------------------------\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#---------------------------------------------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#---------------------------------------------------------------------------------------\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "atlas-demo/AtlasDemo/activitygroupcompat/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2017-03-21T07:48:14Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/app/proguard-rules.pro" : {
      "ObjectId" : "22a075085bfed983e36a28ca61d2077b6a1eb564",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/databindbundle/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2017-04-27T02:55:40Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/databindinglibrary/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/firstbundle/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/middlewarelibrary/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/publicbundle/proguard-rules.pro" : {
      "ObjectId" : "f020ec9296c7d0d3efc13179004442acd947ef1b",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/remotebundle/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/secondbundle/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/secondbundlelibrary/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/AtlasDemo/splashscreen/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/multi-feature-module/proguard.pro" : {
      "ObjectId" : "dd56c60fc122889dde8bf572a0672331dbe076a3",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "atlas-demo/基于版本打包的demo/app/activitygroupdelegate/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/基于版本打包的demo/app/firstbundle/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/基于版本打包的demo/app/secondbundle/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/基于版本打包的demo/app/sharebundle/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "atlas-demo/基于版本打包的demo/app/sharedlibrary/proguard-rules.pro" : {
      "ObjectId" : "4aa71d80202e3882f95234d8e63b0ba779716101",
      "LastModified" : "2018-11-27T03:06:50Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Users/guanjie/Library/Android/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 47,
    "QMAKE" : 17,
    "MAKEFILE" : 8,
    "AUTOMAKE" : 2
  },
  "ElapsedTime" : 3205
}