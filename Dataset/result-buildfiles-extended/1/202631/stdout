{
  "Repository" : "202631",
  "Revision" : "HEAD",
  "ObjectId" : "487f77779afa6ebd85148c2ab981465e46fd280c",
  "CommitTime" : "2019-02-16T05:30:31Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "092fd2fcb457657fb61ad5f03333052b34d83ccf",
      "LastModified" : "2018-02-13T08:37:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# REQUIREMENTS: this script needs CMake 2.8 or higher. Downloads are available at http://www.cmake.org\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# How to build OCE using CMake under Unix (Linux, Darwin etc.)?\n\n# 1. Copy this file, as-is, to the top-level OCE folder\n\n# 2. Make a build directory somewhere outside the OCE source tree\n\n# 3. cmake \"relative/path/to/OCE\"\n\n# 4. make\n\n# 5. make install (or sudo make install)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# How to build OCE using CMake under Windows (Linux, Darwin etc.)?\n\n# 1. Copy this file, as-is, to the top-level folder\n\n# 2. Launch the cmake-gui, and select the top-level folder\n\n# 3. You can choose whatever you want as an install directory\n\n# 4. Click 'Configure'\n\n# 5. Choose your generator\n\n# 6. When configure is achived, you can change the variable with a red background\n\n# 7. Click 'Generate'\n\n# 8. From your IDE, open the generated makefile and run the compilation.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OCE_VERSION_PATCH is used for bugfixes releases only\n\n# (uncomment following line)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  Empty for official releases, set to -dev, -rc1, etc for development releases\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# bugfix release: add ${OCE_VERSION_PATCH} to OCE_VERSION\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the minimum version of cmake required to 2.6\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Policy CMP0043 introduced in cmake version 3.0 IGNORES the use of COMPILE_DEFINITIONS suffixed variables, e.g. COMPILE_DEFINITIONS_DEBUG\n\n# Set to OLD behavior until minimum cmake version >= 2.8.10 (version that COMPILE_DEFINITIONS can be set by generator expressions instead)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Policy CMP0042 introduced in cmake version 3.0 enables the use of @rpath in an install name via MACOSX_RPATH by default\n\n# Set to OLD behavior so that all versions use the same behavior, or until minimum cmake version >= 2.8.12 (version where @rpath is available)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Define helper macro option_with_default\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "############################\n\n# Check 32/64 bit platform #\n\n############################\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# It is 64bit, otherwise 32 bit systems match 4\n",
        "Line" : 61,
        "CharPositionInLine" : 40
      },
      "12" : {
        "Text" : "############################\n\n# Library name definitions #\n\n############################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Don't encode library versions on Windows systems\n",
        "Line" : 109,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# When building OCE as part of another application, it may be useful to copy\n\n# header files in a temporary location so that dependent applications can be built\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# By default, OSX uses X11 OpenGl implementation\n\n#\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The default for the OCCT_DEBUG define is ON for all the platforms , in debug mode.\n\n# In MSVC it is not desirable to have it ON by default, since users must\n\n# compile/use the OCE debug libraries to build it's own programs in DEBUG mode.\n\n# OCCT_DEBUG should be enabled by developers only, in this case\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# MSVC specific options\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#Use solution folders.\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#  Make OCE version visible to OCC_VERSION_STRING_EXT\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n\n# Check components dependencies\n\n#\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# AIS_Dimension.cxx uses this flag to remove font-dependent code\n",
        "Line" : 314,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# oce-win-bundle handling for MSVC and MINGW\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Try to find the required VTK components.\n",
        "Line" : 353,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Now that we know we have a VTK version available, we call find_package with the correct rendering backend.\n",
        "Line" : 356,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# In VTK 7, the rendering backend is exported in the variable VTK_RENDERING_BACKEND\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "## TKService requires OpenGL on Unix, see src/Xw/Xw_Window.cxx\n",
        "Line" : 438,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "## TKService requires FreeType\n",
        "Line" : 445,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "## GL2PS\n",
        "Line" : 489,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# under OSX-X11, should use a X11 based TCL/TK, for instance fink's implementation\n",
        "Line" : 555,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "###################################\n\n# Architecture-specific libraries #\n\n###################################\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "###################################################\n\n# Check required headers, functions and libraries #\n\n###################################################\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Check headers\n\n# I think these should all be check cxx headers, as I think there is no c\n\n# compilation anywhere in OCE\n",
        "Line" : 614,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Check library functions\n",
        "Line" : 623,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# TODO: check all headers/functions/libraries that are checked in configure.ac original OCC script\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#######################################################\n\n# Check compiler version - Determine Borland compiler #\n\n#######################################################\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# XE2 compiler?\n",
        "Line" : 663,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# XE compiler?\n",
        "Line" : 667,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# 2010 compiler?\n",
        "Line" : 671,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# TODO: 2009 compiler?\n\n# TODO: 2007 compiler?\n\n# 2006 compiler?\n",
        "Line" : 675,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "#TODO: Older compilers?\n",
        "Line" : 681,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#######################################################\n\n# Check platforms - Define specific compilation flags #\n\n#######################################################\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "######### MacOSX ###########\n",
        "Line" : 704,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "######### Unix/Linux ###########\n",
        "Line" : 708,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Disable meaningless remarks\n\n# remark #383 given when initializing from a literal, e.g. abc(\"123\")\n\n# remark #522 given when a function is defined inline but prototype is not\n\n# remark #858 given when a type qualifier is applied to a function return type\n\n# remark #981 \"operands are evaluated in unspecified order\", e.g. a = b() + c()\n",
        "Line" : 712,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "######### Windows ###########\n",
        "Line" : 723,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "######### Borland ###########\n",
        "Line" : 726,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# TODO: better detection of different Unices (Linux, Solaris etc.)\n\n# TODO: add CXX compiler flags for each platform\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Enable Extra warnings for each compiler\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#TODO\n",
        "Line" : 750,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# /MP is useless in nmake\n",
        "Line" : 758,
        "CharPositionInLine" : 26
      },
      "51" : {
        "Text" : "#  Detect build problems with duplicate types\n",
        "Line" : 763,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "################################################\n\n# Define output path for generated libraries:  #\n\n# platform/compiler-build_type-bits            #\n\n# for instance:                                #\n\n#     ./win32/bin/vc7.1-release-64             #\n\n#     ./win32/bin/vc9-debug-32                 #\n\n#     ./Unix/i386-debug-64                     #\n\n################################################\n",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# The compiler used is MSVC\n",
        "Line" : 781,
        "CharPositionInLine" : 10
      },
      "54" : {
        "Text" : "# TODO: under win32/64, dlls and libs should not be in the same path (non MSVC)\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#MinGW Specific Flags\n",
        "Line" : 799,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# For the file Message_MsgFile.cxx of TKernel we must additionally set the __TCollection_DLL define to resolve the needed HashCode() method\n",
        "Line" : 814,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# Define high enough WIN32 version\n",
        "Line" : 818,
        "CharPositionInLine" : 1
      },
      "58" : {
        "Text" : "# Disable secure CRT warnings and other MSVCRT specific things; disable bool conversion warning\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Libraries are installed by default in /usr/local/lib on UNIX\n\n# based platforms and c:/OCE-VERSION/Win[32|64]/lib on windows based\n\n# platforms\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Binaries\n",
        "Line" : 855,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Libraries\n",
        "Line" : 860,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# RPATHS\n",
        "Line" : 875,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Includes\n",
        "Line" : 888,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Scripts\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Data\n",
        "Line" : 898,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Absolute path, written into oce-config.h\n",
        "Line" : 906,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# CMake\n",
        "Line" : 913,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#  See http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:find_package\n\n#  and the definition of OCE_INSTALL_PREFIX at the beginning.\n\n#  CMake files are installed under INSTALL_PREFIX/INSTALL_CMAKE_DATA_DIR.\n",
        "Line" : 915,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# This relative path is written into OCEConfig.cmake to set OCE_INCLUDE_DIRS relative to OCEConfig.cmake\n\n# There is no need to prepend OCE_INSTALL_PREFIX, CMake convention is to use slashes.\n\n# The first part is required if -DOCE_INSTALL_CMAKE_DATA_DIR and -DOCE_INSTALL_INCLUDE_DIR are not both absolute paths.\n",
        "Line" : 931,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Now the relative path can be generated\n",
        "Line" : 944,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Install each header file individually to work around a 8192 character\n\n# argument limit on Visual Studio generators.\n",
        "Line" : 966,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#this is the header used to build OCE\n",
        "Line" : 976,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#installation paths are written into a separate file (which is not installed)\n\n#so that only few files have to be recompiled when installation paths are modified\n",
        "Line" : 983,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#this is the header that is installed on the system\n",
        "Line" : 989,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Version information\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "####################################################################################\n\n# Process modules of each ToolKit                                                  #\n\n####################################################################################\n\n# Foundation\n",
        "Line" : 1023,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Modeling Data\n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Modeling Algorithms\n",
        "Line" : 1034,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Visualisation\n",
        "Line" : 1039,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Application framework\n",
        "Line" : 1050,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Data exchange\n",
        "Line" : 1055,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# DRAWEXE application\n",
        "Line" : 1060,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "############\n\n# PostBuild Step\n\n############\n\n# In win32, dependent libraries are required to run tests.\n\n# Todo this works only with the bundle, all other libraries are not copied.\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Try to find TCL .dll filename\n",
        "Line" : 1087,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Post-build target. In reality it is not a post-build step\t, but it doesn't matter\n",
        "Line" : 1093,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# This loop copies the DLLs in each configuration binary dir.\n",
        "Line" : 1102,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "##############\n\n# Bundle AUTOINSTALL\n\n##############\n",
        "Line" : 1118,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# Note : these installs are optional because in multi-configuration types these may include\n\n# generator expressions and the EXISTS check fails in that case.\n",
        "Line" : 1123,
        "CharPositionInLine" : 1
      },
      "89" : {
        "Text" : "# Install TCL\n",
        "Line" : 1192,
        "CharPositionInLine" : 1
      },
      "90" : {
        "Text" : "# Install TBB libraries\n",
        "Line" : 1200,
        "CharPositionInLine" : 1
      },
      "91" : {
        "Text" : "###############\n\n# UnitTesting #\n\n###############\n",
        "Line" : 1252,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# build static libs, better coverage report\n",
        "Line" : 1262,
        "CharPositionInLine" : 1
      },
      "93" : {
        "Text" : "###############################################################################\n\n# OCE Packaging                                                               #\n\n# $make package                                                               #\n\n###############################################################################\n",
        "Line" : 1306,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# bugfix release: add ${OCE_VERSION_PATCH} to the package version\n\n# (uncomment following line)\n\n#set(CPACK_PACKAGE_VERSION_PATCH ${OCE_VERSION_PATCH})\n",
        "Line" : 1318,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "###############################################################################\n\n# Debian-specific CPack variables. Intended for quick-n-dirty dev packages,   #\n\n# not to replace the official (and superior) debian tools.                    #\n\n# to enable, run cmake with -DCPACK_GENERATOR=\"DEB\", or uncomment             #\n\n#set(CPACK_GENERATOR \"DEB\")                                                   #\n\n###############################################################################\n",
        "Line" : 1325,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# bug http://vtk.org/Bug/view.php?id=11020\n",
        "Line" : 1333,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# debian source packages aren't yet supported by cmake, but the following list will help anyone who is trying to figure out what to apt-get install before building.\n",
        "Line" : 1337,
        "CharPositionInLine" : 1
      },
      "98" : {
        "Text" : "###############################################################################\n\n# RPM-specific CPack variables.                                               #\n\n# to enable, run cmake with -DCPACK_GENERATOR=\"RPM\", or uncomment             #\n\n#set(CPACK_GENERATOR \"RPM\")                                                   #\n\n# For RPM, package names and versions are guesses and may need changed.       #\n\n#                                                                             #\n\n# As of cmake 2.8.4, RPM requires use of a variable that is also used for     #\n\n# DEB,so simultaneously building multiple package types (i.e.                 #\n\n# -DCPACK_GENERATOR=\"DEB;RPM\") doesn't work well. The RPM won't end up in the #\n\n# correct directory, and packages specified after RPM won't be built.         #\n\n###############################################################################\n",
        "Line" : 1358,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "#CPackRPM ignores CPACK_RPM_FILE_NAME. Must set two other vars instead, and they interfere\n",
        "Line" : 1378,
        "CharPositionInLine" : 1
      },
      "100" : {
        "Text" : "#this variable is used by other packagers, don't set it unless RPM is built by itself.\n",
        "Line" : 1383,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "########################################################################################\n\n# Uninstall code                                                                       #\n\n# From http://www.cmake.org/Wiki/CMake_FAQ#Can_I_do_.22make_uninstall.22_with_CMake.3F #\n\n# ######################################################################################\n",
        "Line" : 1390,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# Final bundle step for dependencies\n",
        "Line" : 1402,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 103
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "bd27ea88eb12fc842453877365f181d87afb95a1",
      "LastModified" : "2013-08-25T21:28:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/BuildToolkit.cmake" : {
      "ObjectId" : "1b70df9a1262ff8ad06c684f7efdf61c87de089b",
      "LastModified" : "2014-07-21T19:49:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Instructs the MSVC toolset to use the precompiled header PRECOMPILED_HEADER\n\n# for each source file given in the collection named by SOURCE_VARIABLE_NAME.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate precompiled header translation unit\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# A list of exclusions patterns. For the moment is global to the entire project\n",
        "Line" : 20,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# GCC requires an additional target to build the PCH file.\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# PCH output file\n\n#set(pch_output \"${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}.gch\")\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Detects compiler flags\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Include directories\n\n# (target property INCLUDE_DIRECTORIES was introduced in 2.8.8)\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#message(\"compiler flags :\" ${_compiler_FLAGS})\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Update properties of source files to use the precompiled header.\n\n# Additionally, force the inclusion of the precompiled header at beginning of each source file.\n",
        "Line" : 100,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Find if the file is on the exclusion list\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Finally, update the source file collection to contain the precompiled header translation unit\n",
        "Line" : 123,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "#set_source_files_properties(${pch_unity} PROPERTIES COMPILE_FLAGS \"/Yc\\\"${pch_abs}\\\"\") #this may be useful for nmake\n",
        "Line" : 126,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# add all .cxx/*.c files or each module\n",
        "Line" : 149,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# For compilers under Windows a define must be set per file to correctly set the export macro\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# append these source files to the list of source files of the toolkit\n",
        "Line" : 181,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# required include paths\n",
        "Line" : 183,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Version info\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Precompiled Headers\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#message(\"Using Precompiled.h\")\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Add the toolkit target\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#if cmake is new enough, set include directories per-target \n\n#to avoid accumulating unnecessary directories\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# TODO Add current toolkit header files into a source group?\n\n# Add target specific locations of *.lxx and *.ixx files\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Workaround for Cmake bug #0011240 (see http://public.kitware.com/Bug/view.php?id=11240)\n\n# Win64+MSVC+static libs = linker error\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set dependencies for thit ToolKit\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Only add the copy target if there are headers to copy.\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# Install all toolkit header files into the include subdirectory of the OCE\n\n# build directory so they are available at build time.\n\n#\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# With at least VS2012 and CMake 2.8.10.2, the -Dfiles_to_copy\n\n# command-line argument seemed to run into trouble when the length\n\n# of that argument was greater than 8192 (2^13).\n\n# The following breaks up the copy into multiple custom commands\n\n# to avoid exceeding max_argument_length.\n",
        "Line" : 272,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Add 5 because CMake separates files like so in Visual Studio:\n\n# -Dfiles_to_copy=one\";\"two\";\"three. 5 is a little more than 3\n\n# and that should hopefully cover complex escaping.\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Dump the current command\n",
        "Line" : 308,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# Reset data structures\n",
        "Line" : 311,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Add current file\n",
        "Line" : 315,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "###########\n\n# INSTALL #\n\n###########\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# PDB files are only supported for shared libraries\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "adm/cmake/CopyFiles.cmake" : {
      "ObjectId" : "2ff9c173766a8fc91b4f320b69a26e19c68baa71",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Script designed to be executed with 'cmake -P' that will copy a list of files\n\n# to an output location. Accepts two -D arguments:\n\n# - files_to_copy A list of files to copy\n\n# - destination_directory The directory to copy the files into.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the destination directory exists before we try the copy operation.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "adm/cmake/DRAWEXE/CMakeLists.txt" : {
      "ObjectId" : "82fae59039831d790908d5d5d3d2d6e04f05220f",
      "LastModified" : "2014-07-19T08:03:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add all .cxx/*.c files or each module\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#message(STATUS \"${source_files}\")\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# For compilers under Windows a define must be set per file to correctly set the export macro\n",
        "Line" : 33,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# append these source files to the list of source files of the toolkit\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# required include paths\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Version info\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#if cmake is new enough, set include directories per-target \n\n#to avoid accumulating unnecessary directories\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set dependencies for thit ToolKit\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  Those are private libraries\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "adm/cmake/FWOSPlugin/CMakeLists.txt" : {
      "ObjectId" : "db66547a8140c924171b782480be06929d8a9c95",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/PTKernel/CMakeLists.txt" : {
      "ObjectId" : "2ece00f6f9599f36c014d025a1fd568f5bad5bef",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKBO/CMakeLists.txt" : {
      "ObjectId" : "84cd449b008ea7e3acd45c2364402acef238b3df",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKBRep/CMakeLists.txt" : {
      "ObjectId" : "372931ecf33363587549c8366bcc26a70f1f4e5d",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKBin/CMakeLists.txt" : {
      "ObjectId" : "e40ad7751c119df54d945f48d73da02481a9a3f5",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKBinL/CMakeLists.txt" : {
      "ObjectId" : "b787ff87dc4e78a7f7979302a5a83d390fb500bd",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKBinTObj/CMakeLists.txt" : {
      "ObjectId" : "580c441d330a86a3a48c863fd546f24c2d3718b3",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKBinXCAF/CMakeLists.txt" : {
      "ObjectId" : "f285edd2fe28bbe4ab9f2c0f19ac4c690baa040d",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKBool/CMakeLists.txt" : {
      "ObjectId" : "64e49550cfd6f67db1d9449e221055b734553141",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKCAF/CMakeLists.txt" : {
      "ObjectId" : "26d017ece7a428b4d2457f0bd2e060e0bb97e82b",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKCDF/CMakeLists.txt" : {
      "ObjectId" : "9c9c9ad8f2b6328dca7420809417544331d9458d",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKDCAF/CMakeLists.txt" : {
      "ObjectId" : "663f7d42266e7f52eba183b06206947d7c5ea407",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKDraw/CMakeLists.txt" : {
      "ObjectId" : "f8f87cd0ba799ef34010d6b508a0615a590a95bb",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKFeat/CMakeLists.txt" : {
      "ObjectId" : "ed393fc06d3eb117bae5dc875137c9c4dd6769c3",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKFillet/CMakeLists.txt" : {
      "ObjectId" : "5a57ddb965837bc931c6a6f225c85175ce5f074a",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKG2d/CMakeLists.txt" : {
      "ObjectId" : "e2dfadb366c9d08139fc07ae108b628f7ddb4d46",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKG3d/CMakeLists.txt" : {
      "ObjectId" : "f36335a68b4a5f322a19f9542488f49eb213ae7c",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKGeomAlgo/CMakeLists.txt" : {
      "ObjectId" : "563f634f6f7aa2c1e0a2ac51eefbb8d2b57e6a0a",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKGeomBase/CMakeLists.txt" : {
      "ObjectId" : "6ae9792ab25b60a2da7631d1a4411b986eb45c56",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKHLR/CMakeLists.txt" : {
      "ObjectId" : "786ef417ff11b4904726c96416f56a270ea49e45",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKIGES/CMakeLists.txt" : {
      "ObjectId" : "114941f3d5e137bc1ddceeb6a2dbf354f6767bb7",
      "LastModified" : "2013-12-26T20:48:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKIVtk/CMakeLists.txt" : {
      "ObjectId" : "bdd2f62ee5ae76cf68696df6d16ae0221c435771",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKIVtkDraw/CMakeLists.txt" : {
      "ObjectId" : "fc0b17282390d1f927954012ae293ad364948682",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKLCAF/CMakeLists.txt" : {
      "ObjectId" : "9c66135c1789813ea020c71407ab16642296e60d",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKMath/CMakeLists.txt" : {
      "ObjectId" : "7d5821695b9e1064911a607dd9e25bdac4096e05",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKMesh/CMakeLists.txt" : {
      "ObjectId" : "b311caf192214160ce736606e22be115e2ea310a",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKMeshVS/CMakeLists.txt" : {
      "ObjectId" : "3dd741be837aecbb6788698e91f98840335e32c4",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKNIS/CMakeLists.txt" : {
      "ObjectId" : "1005dd738c9a88d758099a81ed4bb1489b638979",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKOffset/CMakeLists.txt" : {
      "ObjectId" : "d92cbb104b0c0a1dd492a7e7cd50db901480edbc",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKOpenGl/CMakeLists.txt" : {
      "ObjectId" : "f355c09c838c620073b8a84a8fd7b02afefa509a",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OpenGl_Workspace::Print is available only on Windows\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For bcc32 compiler v6.40 and up -x- compiler option must be passed as a compiler option\n\n# in stead of #pragma option -x- in code.\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "adm/cmake/TKPCAF/CMakeLists.txt" : {
      "ObjectId" : "b5b81b66a6289e9d17e3b2cd0f22ee5fba1a71b5",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKPLCAF/CMakeLists.txt" : {
      "ObjectId" : "faf35cb2169df21f3d290475a21c225aa5e883ab",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKPShape/CMakeLists.txt" : {
      "ObjectId" : "8b4b11dde39c5e49fcc7f0ff28e820e9ea40c5eb",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKPrim/CMakeLists.txt" : {
      "ObjectId" : "bd2b1b491e7835472c3db8c6a1bb83290542bd90",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKQADraw/CMakeLists.txt" : {
      "ObjectId" : "c61e3e7c35f8140d798c13fcb5752faea2e75e85",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKSTEP/CMakeLists.txt" : {
      "ObjectId" : "3ff523b132bf1569d86d73d54784418fdfaf8b42",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKSTEP209/CMakeLists.txt" : {
      "ObjectId" : "544ddba0574c33e0649aff7efc96cd56d30621fc",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKSTEPAttr/CMakeLists.txt" : {
      "ObjectId" : "dedd5491c952c15a2ed98a89288f2f6038ca22d0",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKSTEPBase/CMakeLists.txt" : {
      "ObjectId" : "44b1d22ad990a087c00639434fda9a94c0a22db2",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKSTL/CMakeLists.txt" : {
      "ObjectId" : "0c214d451c69bb3a5bbfa17d2848a61965d411b0",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKService/CMakeLists.txt" : {
      "ObjectId" : "d4d72c697bdfa4cb34410f0eff83c2063541190e",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKShHealing/CMakeLists.txt" : {
      "ObjectId" : "adeba7fe42ae29afe3e7d650d05e8f691a94be5d",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKShapeSchema/CMakeLists.txt" : {
      "ObjectId" : "918d9c4d27b38bf58685faf335d495b5d03ce95e",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKStdLSchema/CMakeLists.txt" : {
      "ObjectId" : "8283a047d73cf560835bdd7b11e12f4e16f959e4",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKStdSchema/CMakeLists.txt" : {
      "ObjectId" : "79001552adf04fb15f2eff779a505710b0bacfb0",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKTObj/CMakeLists.txt" : {
      "ObjectId" : "a29f3eaf0f5ee8b0ff4c86b799afa724a8f9f5d7",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKTObjDRAW/CMakeLists.txt" : {
      "ObjectId" : "112509f44364d303cd9a82fa13a7adcef5cb7b91",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKTopAlgo/CMakeLists.txt" : {
      "ObjectId" : "2f375ab5df1a499570ca41be2659607a6d4409a5",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKTopTest/CMakeLists.txt" : {
      "ObjectId" : "a9f562258c4e56afe7368390bdaedab5b6137b5a",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKV3d/CMakeLists.txt" : {
      "ObjectId" : "006b4e4f4645964610624a42eb488267acaf7f63",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKVRML/CMakeLists.txt" : {
      "ObjectId" : "22fdf200efe57e747949ebc944b3fecb693cf655",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKViewerTest/CMakeLists.txt" : {
      "ObjectId" : "b4ef305a7235620e2ec665898b1631f52ca2352d",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKVoxel/CMakeLists.txt" : {
      "ObjectId" : "c556020a7b0368b33fbe92f7c8acbf3f60550313",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXCAF/CMakeLists.txt" : {
      "ObjectId" : "50d4270344399081b51326483ede729ca4850315",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXCAFSchema/CMakeLists.txt" : {
      "ObjectId" : "4f69c6ebc68017b679206215867c0c0f749b43d1",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXDEDRAW/CMakeLists.txt" : {
      "ObjectId" : "f6d9ece4a98d84d66f3bfbcc46faaae3971d02ef",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXDEIGES/CMakeLists.txt" : {
      "ObjectId" : "81b27cbacb9014adb19e11e67d2d523e7898cc98",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXDESTEP/CMakeLists.txt" : {
      "ObjectId" : "f7f7f238a91529563cdc77353fdcedc2be6b5def",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXMesh/CMakeLists.txt" : {
      "ObjectId" : "480d0547be8c4958da09c6a622adf76bc9ba5dbc",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXSBase/CMakeLists.txt" : {
      "ObjectId" : "6e5f121c9bb1ab5b4a1ecf1cee19cc59108b8522",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXSDRAW/CMakeLists.txt" : {
      "ObjectId" : "937e68ddeee2b5aa36f33f574d5c78b3536943fa",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXml/CMakeLists.txt" : {
      "ObjectId" : "231dd2ce1b9462be15a7da48d7caec289cee64a1",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXmlL/CMakeLists.txt" : {
      "ObjectId" : "c788a5d4d26d507062ffab188438a9e43b08f6ee",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXmlTObj/CMakeLists.txt" : {
      "ObjectId" : "672e991243d3ff69187872e7143ce50e3128055c",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKXmlXCAF/CMakeLists.txt" : {
      "ObjectId" : "2f732a1072c5f622024dd7e46cbe015f8bafb5c7",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "adm/cmake/TKernel/CMakeLists.txt" : {
      "ObjectId" : "e5fde8493c7757724bc2ba24094771676fbbcc3e",
      "LastModified" : "2017-04-14T16:25:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# An implementation for macOS has been added in src/OSD/gettime_osx.h\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Adde-DHAVE_TBB in TKernel in order to benefit from Standard_MMgrTBBalloc\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Modules are dlopen'd by OSD_SharedLibrary::DlOpen.  ELF libraries may\n\n# contain either RPATH or RUNPATH sections to have default library paths.\n\n# RPATH is transitive, so DRAWEXE's RPATH will be used when loading modules.\n\n# But the new RUNPATH is not transitive, thus TKernel must contain a RUNPATH\n\n# section pointing to the right location.\n\n# The problem is that TKernel does not depend on any other built modules,\n\n# so CMake won't add it automatically.  We have to force CMake to add this\n\n# section, hence the BUILD_WITH_INSTALL_RPATH property.\n\n# This is harmless on non-ELF platforms.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "adm/cmake/config/Version.rc.cmake" : {
      "ObjectId" : "21850070ae8b97544be48cbdd2978fcbbe63c2ea",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include <winresrc.h>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cmakedefine OCE_VERSION_PATCH\n\n#define OCE_VERSION_PATCH_VAL @OCE_VERSION_PATCH@\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ifndef OCE_VERSION_PATCH\n\n#undef OCE_VERSION_PATCH_VAL\n\n#define OCE_VERSION_PATCH_VAL 0\n\n#endif\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#define QU(x) #x\n\n#define QUH(x) QU(x)\n\n#define OCE_VERSION_PATCH_STR QUH(OCE_VERSION_PATCH_VAL)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ifndef DEBUG\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#else\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#endif\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#cmakedefine OCE_BUILD_STATIC_LIB\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#ifdef OCE_VERSION_INFO_IS_EXE\n\n#ifdef OCE_BUILD_STATIC_LIB\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#else\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#endif\n\n#else\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#endif\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "adm/cmake/config/oce_build_config.h.cmake" : {
      "ObjectId" : "9e0e586cab0cbd800781a0e69da912d0e5333f73",
      "LastModified" : "2018-10-29T15:03:56Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/****************************************************************\n**\n**  File: oce_build_config.h.cmake, build-inc/oce-config.h\n**\n**  This configuration header is used to build OCE. It is\n**  installed along other header files in order to know which\n**  macros had been defined when compiling OCE, but it must\n**  NOT be included when compiling 3rd party programs.\n**\n****************************************************************/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Define to 1 if you have the <strings.h> header file. */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 if you have the <mm_malloc.h> header file. */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 if you have the <atomic.h> header file. */",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if you have the <xlocale.h> header file. */",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if the localtime_r function is available. */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to 1 if the clock_gettime function is available in libc. */",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define to 1 if the posix_memalign function is available. */",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define if your processor stores words with the most significant byte first\n   (like Motorola and SPARC, unlike Intel and VAX). */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Whether OCE is build as static lib */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define MACOSX_USE_GLX to use X11 OpenGL on OSX */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define if uint32_t and int are the same type */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Make OCE release number visible when displaying OCCT version number */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "adm/cmake/config/oce_build_paths.h.cmake" : {
      "ObjectId" : "b53a2161164cb087a509c0f6ced7c32b23d44d78",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/****************************************************************\n**\n**  File: oce_build_paths.h.cmake, build-inc/oce-paths.h\n**\n**  This configuration header is used to build OCE. It is\n**  not installed.\n**\n****************************************************************/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Location where resource files will be installed. */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Debug prefix, postfix and extension for DLLs */",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Debug postfix for DLLs */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "adm/cmake/config/oce_install_config.h.cmake" : {
      "ObjectId" : "71035c85bf1b0612cae97735ab95101deb23c470",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/****************************************************************\n**\n**  File: oce_install_config.h.cmake, oce-config.h\n**\n**  This configuration header is installed with OCE headers.\n**  It should NOT be used while building OCE.  It defines\n**  a subset of the macros configured by CMake. This subset is\n**  used by the installed OCE headers.\n**\n****************************************************************/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/find_package/CMakeLists.txt" : {
      "ObjectId" : "afb44e36493b41ef5aca33ce72819d4552b46d05",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This example shows how to use find_package(OCE).\n\n# If OCE is not found, try to find an OpenCascade installation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include files reside in ${OCE_INCLUDE_DIRS};\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We do not need library path, they will be automatically imported.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# OCE not found; either it is not found and user\n\n# has to set OCE_DIR to the directory containing\n\n# OCEConfig.cmake, or OCE is not installed and we\n\n# try to find OpenCascade files.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "examples/find_package_components/CMakeLists.txt" : {
      "ObjectId" : "62a1f1d3d304fe3029e1cca8dd28af9e06943f3c",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This example shows how to use find_package(OCE) by specifying\n\n# a list of toolkits.\n\n# If a toolkit is missing or if OCE is not found, try to find\n\n# an OpenCascade installation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include files reside in ${OCE_INCLUDE_DIRS};\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We do not need library path, they will be automatically imported.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# OCE not found; either it is not found and user\n\n# has to set OCE_DIR to the directory containing\n\n# OCEConfig.cmake, or OCE is not installed and we\n\n# try to find OpenCascade files.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "examples/find_package_oce/CMakeLists.txt" : {
      "ObjectId" : "93b36639e6e4c5bb25397829d1df88d506650352",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This example shows how to use find_package(OCE) by specifying\n\n# a list of toolkits.\n\n# If a toolkit is missing or if OCE is not found, a fatal error\n\n# is thrown, we do not try to find an Opencascade installation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include files reside in ${OCE_INCLUDE_DIRS};\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We do not need library path, they will be automatically imported.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "samples/qt/AndroidQt/AndroidQt.pro" : {
      "ObjectId" : "7ddc34b91d3b32f9ce7d1080928ad7abd5695853",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Additional import path used to resolve QML modules in Qt Creator's code model\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OCCT\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Default rules for deployment.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "samples/qt/AndroidQt/Deployment.pri" : {
      "ObjectId" : "5441b63dc855592018a104ca9f08a76f996f4b69",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "samples/qt/AndroidQt/OCCT.pri" : {
      "ObjectId" : "8771783b7e12b4229e24d69e06c2253458312563",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# IMPORTANT. load libraries in a proper order\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "samples/qt/IESample/IESample.pro" : {
      "ObjectId" : "b2127cd78ad7e4c87dc3e18a6f65387dd8fc0bb3",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#QMAKE_CXXFLAGS += /wd4996\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/qt/Tutorial/Tutorial.pro" : {
      "ObjectId" : "e0b4e2f3ed676d3cd8ee2ebdbac90ea5ab29fdb4",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "#QMAKE_CXXFLAGS += /wd4996\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/qt/VoxelDemo/VoxelDemo.pro" : {
      "ObjectId" : "f2f56f1c4f3e76b3754c75893348a20efd879fa4",
      "LastModified" : "2017-04-14T16:25:22Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/BRepAlgoAPI_test/CMakeLists.txt" : {
      "ObjectId" : "6000200cd0e1b50eb7c94a055482bbf210ff0d6d",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/BRepExtrema_test/CMakeLists.txt" : {
      "ObjectId" : "e614d32774b454b6322c51308c31edca5551291c",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/BRepGProp_test/CMakeLists.txt" : {
      "ObjectId" : "0c68381767f3027e8f373c4f857b1d32933332ca",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/BRepImport_test/BRepImport_test_config.h.cmake" : {
      "ObjectId" : "e2113a9dc90847a14b5dbb9e080cc094e8c8ed88",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "test/BRepImport_test/CMakeLists.txt" : {
      "ObjectId" : "b8240e11db0590563b76b44786272841ad575db7",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/BRepMesh_test/CMakeLists.txt" : {
      "ObjectId" : "2233830eb07d997945d9bd19804d867724154898",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/BRepOffsetAPI_test/CMakeLists.txt" : {
      "ObjectId" : "bbd78fdbed48c3f8dcd729634fcc5131619b87ff",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/BRepPrimAPI_test/CMakeLists.txt" : {
      "ObjectId" : "a4ec17aa43c31b5f21554b2315f7c42bf7c8272b",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "7f9629bac41eddb96e7186dbd2a11a9f7d8bc212",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# The OCE unittest framework use GoogleTest 1.7.0 (aka GTest)\n\n# The GTest source code is available in the /test/gtest-1.7.0 folder\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix for MSVC11\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copied from CMake\n\n# Thanks to Daniel Blezek <blezek@gmail.com> for the gtest_add_tests code\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/IGESImport_test/CMakeLists.txt" : {
      "ObjectId" : "03c1529b60b3861f4e2f219e0338e9d3f0c5a028",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/IGESImport_test/IGESImport_test_config.h.cmake" : {
      "ObjectId" : "176d2d1c15676f6424d13bf6f3c065dd5bb8a69a",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "test/OCAFExport_test/CMakeLists.txt" : {
      "ObjectId" : "8d9f6ad86c77f4a290fa9fefc763e529c7c11f7e",
      "LastModified" : "2018-10-29T15:03:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This test will dlopen FWOSPlugin and TKBin, we link against them to ensure that\n\n# libraries from the build tree are used.\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Semi-colon is a delimiter in SET_TESTS_PROPERTIES and have to be escaped\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "test/STEPImport_test/CMakeLists.txt" : {
      "ObjectId" : "6fd0346b04bbaedf0748ab4151d33ba4bfafc091",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/STEPImport_test/STEPImport_test_config.h.cmake" : {
      "ObjectId" : "41bb16fb85a9010ee94fbf778ab4b2ac1d8c9501",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "test/SortTools_test/CMakeLists.txt" : {
      "ObjectId" : "a97c0b0d9df90d910007bb858e2f048775357024",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/Standard_StdAllocator_test/CMakeLists.txt" : {
      "ObjectId" : "8a14a8cd5878f60460d4b10590c0514f80ea32ba",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/TCollection_test/CMakeLists.txt" : {
      "ObjectId" : "2a5675c3094e9f98e21f2ce50179931cab7a4874",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/TDataXtd_test/CMakeLists.txt" : {
      "ObjectId" : "1f5600783003b3c7fd381e1bc86b6398080663ea",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This test will dlopen FWOSPlugin, we link against it to ensure that\n\n# the library from the build tree is used.\n",
        "Line" : 2,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Semi-colon is a delimiter in SET_TESTS_PROPERTIES and have to be escaped\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "test/UnitsAPI_test/CMakeLists.txt" : {
      "ObjectId" : "1695d213a672479aeb83d5710433025545eaf6df",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/gp_test/CMakeLists.txt" : {
      "ObjectId" : "67c46469448999a78ebc2bfc4c0ac8bc3ee151d4",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/gtest-1.7.0/CMakeLists.txt" : {
      "ObjectId" : "57470c84f3af0772c411bbb8bbbb41b515747ecd",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "test/gtest-1.7.0/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "test/gtest-1.7.0/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "test/gtest-1.7.0/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "test/gtest-1.7.0/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "test/gtest_sandbox/CMakeLists.txt" : {
      "ObjectId" : "447af5439ecf6c7d6e0ff3e6a80ec646e19fbfad",
      "LastModified" : "2014-12-18T09:51:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 95,
    "CMAKESOURCE" : 6,
    "QMAKE" : 6,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 9733
}