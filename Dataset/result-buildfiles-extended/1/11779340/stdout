{
  "Repository" : "11779340",
  "Revision" : "HEAD",
  "ObjectId" : "bb346deccd238edd41dce9b547d258e34a5679a4",
  "CommitTime" : "2019-04-14T18:30:29Z",
  "Files" : {
    "3rdparty/CMakeLists.txt" : {
      "ObjectId" : "3cbda6ff221d2cd2ed355c881f4acc4a6a52d25d",
      "LastModified" : "2018-04-19T12:04:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable tests and install rules for glog\n\n# Enabled install rules will cause configuration failure\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not call find_package for gflags and pretend it exists\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make glog link to gflags target directly, cmake will handle the rest\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to ask CMake to compile gflags before compiling glog, so that\n\n# ${gflags_LIBRARIES} actually exists\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is a hack. We build libprotobuf (a STATIC library) with __dllexport\n\n# so that when we later link it into SHARED library artm.dll all protobuf\n\n# symbols would get exported and cause no linking errors when using the\n\n# library\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/gflags/CMakeLists.txt" : {
      "ObjectId" : "370907364e2ad00fcf08f3192b6702f331031035",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## CMake configuration file of gflags project\n\n##\n\n## This CMakeLists.txt defines some gflags specific configuration variables\n\n## using the \"gflags_define\" utility macro. The default values of these variables\n\n## can be overridden either on the CMake command-line using the -D option of\n\n## the cmake command or in a super-project which includes the gflags source\n\n## tree by setting the GFLAGS_<varname> CMake variables before adding the\n\n## gflags source directory via CMake's \"add_subdirectory\" command. Only when\n\n## the non-cached variable GFLAGS_IS_SUBPROJECT has a value equivalent to FALSE,\n\n## these configuration variables are added to the CMake cache so they can be\n\n## edited in the CMake GUI. By default, GFLAGS_IS_SUBPROJECT is set to TRUE when\n\n## the CMAKE_SOURCE_DIR is not identical to the directory of this CMakeLists.txt\n\n## file, i.e., the top-level directory of the gflags project source tree.\n\n##\n\n## When this project is a subproject (GFLAGS_IS_SUBPROJECT is TRUE), the default\n\n## settings are such that only the static single-threaded library is built without\n\n## installation of the gflags files. The \"gflags\" target is in this case an ALIAS\n\n## library target for the \"gflags_nothreads_static\" library target. Targets which\n\n## depend on the gflags library should link to the \"gflags\" library target.\n\n##\n\n## Example CMakeLists.txt of user project which requires separate gflags installation:\n\n##   cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\n\n##\n\n##   project(Foo)\n\n##\n\n##   find_package(gflags REQUIRED)\n\n##\n\n##   add_executable(foo src/foo.cc)\n\n##   target_link_libraries(foo gflags)\n\n##\n\n## Example CMakeLists.txt of user project which requires separate single-threaded static gflags installation:\n\n##   cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\n\n##\n\n##   project(Foo)\n\n##\n\n##   find_package(gflags COMPONENTS nothreads_static)\n\n##\n\n##   add_executable(foo src/foo.cc)\n\n##   target_link_libraries(foo gflags)\n\n##\n\n## Example CMakeLists.txt of super-project which contains gflags source tree:\n\n##   cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)\n\n##\n\n##   project(Foo)\n\n##\n\n##   add_subdirectory(gflags)\n\n##\n\n##   add_executable(foo src/foo.cc)\n\n##   target_link_libraries(foo gflags)\n\n##\n\n## Variables to configure the source files:\n\n## - GFLAGS_IS_A_DLL\n\n## - GFLAGS_NAMESPACE\n\n## - GFLAGS_ATTRIBUTE_UNUSED\n\n## - GFLAGS_INTTYPES_FORMAT\n\n##\n\n## Variables to configure the build:\n\n## - GFLAGS_SOVERSION\n\n## - GFLAGS_BUILD_SHARED_LIBS\n\n## - GFLAGS_BUILD_STATIC_LIBS\n\n## - GFLAGS_BUILD_gflags_LIB\n\n## - GFLAGS_BUILD_gflags_nothreads_LIB\n\n## - GFLAGS_BUILD_TESTING\n\n## - GFLAGS_BUILD_PACKAGING\n\n##\n\n## Variables to configure the installation:\n\n## - GFLAGS_INCLUDE_DIR\n\n## - GFLAGS_LIBRARY_INSTALL_DIR or LIB_INSTALL_DIR or LIB_SUFFIX\n\n## - GFLAGS_INSTALL_HEADERS\n\n## - GFLAGS_INSTALL_SHARED_LIBS\n\n## - GFLAGS_INSTALL_STATIC_LIBS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# includes\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# package information\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# C language still needed because the following required CMake modules\n\n# (or their dependencies, respectively) are not correctly handling\n\n# the case where only CXX is enabled\n\n# - CheckTypeSize.cmake (fixed in CMake 3.1, cf. https://cmake.org/Bug/view.php?id=14056)\n\n# - FindThreads.cmake   (fixed in CMake 3.4, cf. https://cmake.org/Bug/view.php?id=14905)\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# shared library ABI version number, can be overridden by package maintainers\n\n# using -DGFLAGS_SOVERSION=XXX on the command-line\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: Change default SOVERSION back to PACKAGE_VERSION_MAJOR with the\n\n#       next increase of major version number (i.e., 3.0.0 -> SOVERSION 3)\n\n#       The <major>.<minor> SOVERSION should be used for the 2.x releases\n\n#       versions only which temporarily broke the API by changing the default\n\n#       namespace from \"google\" to \"gflags\".\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# when gflags is included as subproject (e.g., as Git submodule/subtree) in the source\n\n# tree of a project that uses it, no variables should be added to the CMake cache;\n\n# users may set the non-cached variable GFLAGS_IS_SUBPROJECT before add_subdirectory(gflags)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# prefix for package variables in CMake configuration file\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# convert file path on Windows with back slashes to path with forward slashes\n\n# otherwise this causes an issue with the cmake_install.cmake script\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# options\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# maintain binary backwards compatibility with gflags library version <= 2.0,\n\n# but at the same time enable the use of the preferred new \"gflags\" namespace\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# cached build options when gflags is not a subproject, otherwise non-cached CMake variables\n\n# usage: gflags_define(BOOL <name> <doc> <default> [<subproject default>])\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# NOT GFLAGS_IS_SUBPROJECT\n",
        "Line" : 193,
        "CharPositionInLine" : 9
      },
      "13" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# system checks\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# used by CheckTypeSize module\n",
        "Line" : 227,
        "CharPositionInLine" : 27
      },
      "15" : {
        "Text" : "# used in #if directive\n",
        "Line" : 233,
        "CharPositionInLine" : 33
      },
      "16" : {
        "Text" : "# used in #if directive\n",
        "Line" : 239,
        "CharPositionInLine" : 35
      },
      "17" : {
        "Text" : "# the following are used in #if directives not #ifdef\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# use of special characters in strings to circumvent bug #0008226\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# source files - excluding root subdirectory and/or .in suffix\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# configure source files\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# whenever we build a shared library (DLL on Windows), configure the public\n\n# headers of the API for use of this shared library rather than the optionally\n\n# also build statically linked library; users can override GFLAGS_DLL_DECL\n\n# in particular, this done by setting the INTERFACE_COMPILE_DEFINITIONS of\n\n# static libraries to include an empty definition for GFLAGS_DLL_DECL\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# output directories\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# installation directories\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# The LIB_INSTALL_DIR and LIB_SUFFIX variables are used by the Fedora\n\n# package maintainers. Also package maintainers of other distribution\n\n# packages need to be able to specify the name of the library directory.\n",
        "Line" : 416,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# add library targets\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# static vs. shared\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# whether or not targets are a DLL\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# filename suffix for static libraries on Windows\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# multi-threaded vs. single-threaded\n",
        "Line" : 448,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# add convenience make target for build of both shared and static libraries\n",
        "Line" : 476,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# add ALIAS target for use in super-project, prefer static over shared, single-threaded over multi-threaded\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# installation rules\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# support direct use of build tree\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# testing - MUST follow the generation of the build tree config file\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# packaging\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# default package generators\n",
        "Line" : 594,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# used package generators\n",
        "Line" : 606,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# some package generators (e.g., PackageMaker) do not allow .md extension\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# common package information\n",
        "Line" : 614,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# RPM package information -- used in cmake/package.cmake.in also for DEB\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# system/architecture\n",
        "Line" : 643,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# source package settings\n",
        "Line" : 676,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# default binary package settings\n",
        "Line" : 681,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# generator specific configuration file\n\n#\n\n# allow package maintainers to use their own configuration file\n\n# $ cmake -DCPACK_PROJECT_CONFIG_FILE:FILE=/path/to/package/config\n",
        "Line" : 688,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# BUILD_PACKAGING\n",
        "Line" : 702,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 46
    },
    "3rdparty/gflags/cmake/execute_test.cmake" : {
      "ObjectId" : "df008cf465e442459f78817b4394890960d3f991",
      "LastModified" : "2014-09-16T21:38:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# sanitize string stored in variable for use in regular expression.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# script arguments\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# set a few environment variables (useful for --tryfromenv)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# execute test command\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# check test result\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/gflags/cmake/utils.cmake" : {
      "ObjectId" : "d039e5c88312e40e3eb089b0c10be9f3ebd5dc83",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Utility CMake functions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Convert boolean value to 0 or 1\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Extract version numbers from version string\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Determine if cache entry exists\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Add gflags configuration variable\n\n#\n\n# The default value of the (cached) configuration value can be overridden either\n\n# on the CMake command-line or the super-project by setting the GFLAGS_<varname>\n\n# variable. When gflags is a subproject of another project (GFLAGS_IS_SUBPROJECT),\n\n# the variable is not added to the CMake cache. Otherwise it is cached.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# note that ARGC must be expanded here, as it is not a \"real\" variable\n\n# (see the CMake documentation for the macro command)\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Set property of cached gflags configuration variable\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# note that property must be expanded here, as it is not a \"real\" variable\n\n# (see the CMake documentation for the macro command)\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Modify value of gflags configuration variable\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Configure public header files\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Configure source files with .in suffix\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## Add usage test\n\n#\n\n# Using PASS_REGULAR_EXPRESSION and FAIL_REGULAR_EXPRESSION would\n\n# do as well, but CMake/CTest does not allow us to specify an\n\n# expected exit status. Moreover, the execute_test.cmake script\n\n# sets environment variables needed by the --fromenv/--tryfromenv tests.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n## Register installed package with CMake\n\n#\n\n# This function adds an entry to the CMake registry for packages with the\n\n# path of the directory where the package configuration file of the installed\n\n# package is located in order to help CMake find the package in a custom\n\n# installation prefix. This differs from CMake's export(PACKAGE) command\n\n# which registers the build directory instead.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "3rdparty/gflags/test/CMakeLists.txt" : {
      "ObjectId" : "4cd1e69702a3b6e44659faf969280e6f1806f93a",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## gflags tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# output directories\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set working directory of test commands\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# common include directories and link libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# STRIP_FLAG_HELP\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure the --help output doesn't print the stripped text.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make sure the stripped text isn't in the binary at all.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# unit tests\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# First, just make sure the  gflags_unittest  works as-is\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# --help should show all flags, including flags from gflags_reporting\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Make sure that --help prints even very long helpstrings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Make sure --help reflects flag changes made before flag-parsing\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# And on the command-line, too\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# --nohelp and --help=false should be as if we didn't say anything\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# --helpfull is the same as help\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# --helpshort should show only flags from the  gflags_unittest  itself\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# --helpshort should show the tldflag we created in the  gflags_unittest  dir\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# --helpshort should work if the main source file is suffixed with [_-]main\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# --helpon needs an argument\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# --helpon argument indicates what file we'll show args from\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# another way of specifying the argument\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# test another argument\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# helpmatch is like helpon but takes substrings\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# if no flags are found with helpmatch or helpon, suggest --help\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# helppackage shows all the flags in the same dir as this unittest\n\n# --help should show all flags, including flags from google.cc\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# xml!\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# just print the version info and exit\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# --undefok is a fun flag...\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# If you say foo is ok to be undefined, we'll accept --nofoo as well\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# It's ok if the foo is in the middle\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# But the spelling has to be just right...\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# See if we can successfully load our flags from the flagfile\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Also try to load flags from the environment\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Here, the --version overrides the fromenv\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Make sure -- by itself stops argv processing\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# And we should die if the flag value doesn't pass the validator\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# And if locking in validators fails\n\n# TODO(andreas): Worked on Windows 7 Release configuration, but causes\n\n#                debugger abort() intervention in case of Debug configuration.\n\n#add_gflags_test(deadlock_if_cant_lock 0 \"PASS\" \"\"  gflags_unittest  --deadlock_if_cant_lock)\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# use gflags_declare.h\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# configure Python script which configures and builds a test project\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# negative compilation tests\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# build configuration test\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "3rdparty/gflags/test/gflags_strip_flags_test.cmake" : {
      "ObjectId" : "5bb5cc1a1fb12ea72944bb0a1b681ef7c16de8b0",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/gflags/test/nc/CMakeLists.txt" : {
      "ObjectId" : "d00b07d07dc5dec7c71adc3465d8124c94ba2c68",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## gflags negative compilation tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/glog/CMakeLists.txt" : {
      "ObjectId" : "7415eab3de3a482c4f30295181f3402dfd716f09",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE gcc does not fail if you pass a non-existent -Wno-* option as an\n\n# argument. However, it will happily fail if you pass the corresponding -W*\n\n# option. So, we check whether options that disable warnings exist by testing\n\n# the availability of the corresponding option that enables the warning. This\n\n# eliminates the need to check for compiler for several (mainly Clang) options.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Cannot use check_function_exists here since >=vc-14.0 can define\n\n# snprintf as an inline function\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set (ac_cv___attribute___noinline \"__declspec(noinline)\")\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Don't use __declspec(dllexport|dllimport) if this is a static build\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Unit testing\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "3rdparty/glog/cmake/DetermineGflagsNamespace.cmake" : {
      "ObjectId" : "e5e50ccd0f8998833987267b9b730dbf54176e34",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/glog/compiler.cmake" : {
      "ObjectId" : "0a6b044b86d86955a717b4a7656f6e99cf868a5d",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################\n\n#\n\n#\tBUILD/COMPILER.CMAKE\n\n#\n\n# \tThis file runs some tests for detecting\n\n#\tthe compiler environment and provides a\n\n#\tcrossplatform set of functions for setting\n\n# \tcompiler variables. If available features\n\n#\tfor c++0x will be enabled automatically\n\n#\n\n#\t(c) 2010-2012 Marius Zwicker\n\n#\n\n#\n\n# PROVIDED CMAKE VARIABLES\n\n# -----------------------\n\n# MZ_IS_VS true when the platform is MS Visual Studio\n\n# MZ_IS_GCC true when the compiler is gcc or compatible\n\n# MZ_IS_CLANG true when the compiler is clang\n\n# MZ_IS_XCODE true when configuring for the XCode IDE\n\n# MZ_IS_RELEASE true when building with CMAKE_BUILD_TYPE = \"Release\"\n\n# MZ_64BIT true when building for a 64bit system\n\n# MZ_32BIT true when building for a 32bit system\n\n# MZ_HAS_CXX0X see MZ_HAS_CXX11\n\n# MZ_HAS_CXX11 true when the compiler supports at least a\n\n#              (subset) of the upcoming C++11 standard\n\n# DARWIN true when building on OS X / iOS\n\n# IOS true when building for iOS\n\n# WINDOWS true when building on Windows\n\n# LINUX true when building on Linux\n\n# MZ_DATE_STRING a string containing day, date and time of the\n\n#                moment cmake was executed\n\n#                e.g. Mo, 27 Feb 2012 19:47:23 +0100\n\n#\n\n# PROVIDED MACROS\n\n# -----------------------\n\n# mz_add_definition <definition1> ...\n\n#\t\tadd the definition <definition> (and following)\n\n#       to the list of definitions passed to the compiler.\n\n#       Automatically switches between the syntax of msvc \n\n#       and gcc/clang\n\n#       Example: mz_add_definition(NO_DEBUG)\n\n#\n\n# mz_add_cxx_flag GCC|CLANG|VS|ALL <flag1> <flag2> ...\n\n# \t\tpass the given flag to the C++ compiler when\n\n#       the compiler matches the given platform\n\n#\n\n# mz_add_c_flag GCC|CLANG|VS|ALL <flag1> <flag2> ...\n\n# \t\tpass the given flag to the C compiler when\n\n#       the compiler matches the given platform\n\n#\n\n# mz_add_flag GCC|CLANG|VS|ALL <flag1> <flag2> ...\n\n# \t\tpass the given flag to the compiler, no matter\n\n#       wether compiling C or C++ files. The selected platform\n\n#       is still respected\n\n#\n\n# mz_use_default_compiler_settings\n\n#       resets all configured compiler flags back to the\n\n#       cmake default. This is especially useful when adding\n\n#       external libraries which might still have compiler warnings\n\n#\n\n# ENABLED COMPILER DEFINITIONS/OPTIONS\n\n# -----------------------\n\n# On all compilers supporting it, the option to treat warnings\n\n# will be set. Additionally the warn level of the compiler will\n\n# be decreased. See mz_use_default_compiler_settings whenever some\n\n# warnings have to be accepted\n\n#\n\n# Provided defines (defined to 1)\n\n#  WINDOWS / WIN32 on Windows\n\n#  LINUX on Linux\n\n#  DARWIN on Darwin / OS X / iOS\n\n#  IOS on iOS\n\n#  WIN32_VS on MSVC - note this is deprecated, it is recommended to use _MSC_VER\n\n#  WIN32_MINGW when using the mingw toolchain\n\n#  WIN32_MINGW64 when using the mingw-w64 toolchain\n\n#  MZ_HAS_CXX11 / MZ_HAS_CXX0X when subset of C++11 is available\n\n#\n\n########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################\n\n## no need to change anything beyond here\n\n########################################################################\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(MZ_MSG_DEBUG TRUE)\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#mz_debug_message(\"Compiler flags: ${${COMPILER_FLAGS}}\")\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# borrowed from find_boost\n\n#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# runs compiler with \"--version\" and searches for clang\n\n#\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we only run the very first time\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# cache the default compiler settings\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# compiler settings and defines depending on platform\n",
        "Line" : 210,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# clang is gcc compatible but still different\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# gnu compiler\n\n#message(\"IS_GCC ${CMAKE_COMPILER_IS_GNU_CC}\")\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# xcode?\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# detect compiler version\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# ms visual studio\n",
        "Line" : 266,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# currently unsupported\n",
        "Line" : 280,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# platform (32bit / 64bit)\n",
        "Line" : 285,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# configured build type\n\n# NOTE: This can be overriden e.g. on Visual Studio\n",
        "Line" : 294,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#MZ_COMPILER_TEST_HAS_RUN\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# determine current date and time\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Sun, 11 Dec 2011 12:07:00 +0200\n",
        "Line" : 306,
        "CharPositionInLine" : 7
      },
      "20" : {
        "Text" : "# optional C++0x/c++11 features on gcc (on vs2010 this is enabled by default)\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# AND NOT DARWIN)\n",
        "Line" : 312,
        "CharPositionInLine" : 31
      },
      "22" : {
        "Text" : "# compiler flags\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# On Windows, MS Visual Studio will ignore the\n\n# environment variables INCLUDE and LIB by default. This forces\n\n# them to be used\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "3rdparty/glog/global.cmake" : {
      "ObjectId" : "f3d805991effadbba09587a5c232024a787db7f0",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################\n\n#\n\n#\tBUILD/GLOBAL.CMAKE\n\n#\n\n# \tThis file is for providing a defined environment\n\n#\tof compiler definitions/macros and cmake functions\n\n#\tor variables throughout several projects. It can\n\n#\tbe included twice or more without any issues and\n\n#   will automatically included the utility files \n\n#   compiler.cmake and macros.cmake\n\n#\n\n#\t(c) 2009-2012 Marius Zwicker\n\n#\n\n##################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### CONFIGURATION SECTION\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMAKE_CURRENT_LIST_DIR is available after CMake 2.8.3 only\n\n# but we support 2.8.0 as well\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# path to the mz tools files\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### END OF CONFIGURATION SECTION\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# BOF: global.cmake\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# detect compiler\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# user info\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# macros\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# EOF: global.cmake\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "3rdparty/glog/macros.cmake" : {
      "ObjectId" : "6b356ec238bfc36f0540ab571e9eb638176f4250",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n#\n\n#\tBUILD/MACROS.CMAKE\n\n#\n\n# \tThis file provides some useful macros to\n\n#\tsimplify adding of componenents and other\n\n#\ttaskss\n\n#\t(c) 2009-2012 Marius Zwicker\n\n#\n\n# This file defines a whole bunch of macros\n\n# to add a subdirectory containing another\n\n# CMakeLists.txt as \"Subproject\". All these\n\n# Macros are not doing that much but giving\n\n# feedback to tell what kind of component was\n\n# added. In all cases NAME is the name of your\n\n# subproject and FOLDER is a relative path to\n\n# the folder containing a CMakeLists.txt\n\n#\n\n# mz_add_library <NAME> <FOLDER>\n\n#\t\tmacro for adding a new library\n\n#\n\n# mz_add_executable <NAME> <FOLDER>\n\n# \t\tmacro for adding a new executable\n\n#\n\n# mz_add_control <NAME> <FOLDER>\n\n#\t\tmacro for adding a new control\n\n#\n\n# mz_add_testtool <NAME> <FOLDER>\n\n#\t\tmacro for adding a folder containing testtools\n\n#\n\n# mz_add_external <NAME> <FOLDER>\n\n#\t\tmacro for adding an external library/tool dependancy\n\n#\n\n# mz_target_props <target>\n\n#\t\tautomatically add a \"D\" postfix when compiling in debug\n\n#       mode to the given target\n\n#\n\n# mz_auto_moc <mocced> ...\n\n#\t\tsearch all passed files in (...) for Q_OBJECT and if found\n\n#\t\trun moc on them via qt4_wrap_cpp. Assign the output files\n\n#\t\tto <mocced>. Improves the version provided by cmake by searching\n\n#       for Q_OBJECT first and thus reducing the needed calls to moc\n\n#\n\n# mz_find_include_library <name>  SYS <version> SRC <directory> <include_dir> <target>\n\n#       useful when providing a version of a library within the\n\n#       own sourcetree but prefer the system's library version over it.\n\n#       Will search for the given header in the system includes and when\n\n#       not found, it will include the given directory which should contain\n\n#       a cmake file defining the given target.\n\n#       After calling this macro the following variables will be declared:\n\n#           <name>_INCLUDE_DIRS The directory containing the header or \n\n#                              the passed include_dir if the lib was not \n\n#                              found on the system\n\n#           <name>_LIBRARIES The libs to link against - either lib or target\n\n#           <name>_FOUND true if the lib was found on the system\n\n#\n\n########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if global.cmake was not included yet, report it\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################\n\n## no need to change anything beyond here\n\n########################################################################\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#mz_debug_message(\"mz_auto_moc input: ${ARGN}\")\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# determine the required files\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#mz_debug_message(\"mz_auto_moc mocced: ${to_moc}\")\n",
        "Line" : 117,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "3rdparty/protobuf-3.0.0/BUILD" : {
      "ObjectId" : "0941d8c439309ba0b80cb1a420144628fa52084b",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Bazel (http://bazel.io/) BUILD file for Protobuf.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n# Protobuf Runtime Library\n################################################################################",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Android builds do not need to link in a separate pthread library.",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# AUTOGEN(protobuf_lite_srcs)",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# AUTOGEN(protobuf_srcs)",
        "Line" : 114,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# AUTOGEN(well_known_protos)",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "################################################################################\n# Protocol Buffers Compiler\n################################################################################",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# AUTOGEN(protoc_lib_srcs)",
        "Line" : 231,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "################################################################################\n# Tests\n################################################################################",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# AUTOGEN(lite_test_protos)",
        "Line" : 344,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# AUTOGEN(test_protos)",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# AUTOGEN(common_test_srcs)",
        "Line" : 409,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# AUTOGEN(test_plugin_srcs)",
        "Line" : 420,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# AUTOGEN(test_srcs)",
        "Line" : 435,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "################################################################################\n# Java support\n################################################################################",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################################\n# Python support\n################################################################################",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Copy the builtin proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly since they are all part of the same Python\n# package.",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python in srcs.",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Copy the test proto files from src/google/protobuf to\n# python/google/protobuf. This way, the generated Python sources will be in the\n# same directory as the Python runtime sources. This is necessary for the\n# modules to be imported correctly by the tests since they are all part of the\n# same Python package.",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# TODO(dzc): Remove this once py_proto_library can have labels in srcs, in\n# which case we can simply add :protos_python_test in srcs.",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "3rdparty/protobuf-3.0.0/Makefile.am" : {
      "ObjectId" : "ccbfd0655f2d0c0e610a2e7b45ba845b0a7b0370",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always include gmock in distributions.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build gmock before we build protobuf tests.  We don't add gmock to SUBDIRS\n\n# because then \"make check\" would also build and run all of gmock's own tests,\n\n# which takes a lot of time and is generally not useful to us.  Also, we don't\n\n# want \"make install\" to recurse into gmock since we don't want to overwrite\n\n# the installed version of gmock if there is one.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We would like to clean gmock when \"make clean\" is invoked.  But we have to\n\n# be careful because clean-local is also invoked during \"make distclean\", but\n\n# \"make distclean\" already recurses into gmock because it's listed among the\n\n# DIST_SUBDIRS.  distclean will delete gmock/Makefile, so if we then try to\n\n# cd to the directory again and \"make clean\" it will fail.  So, check that the\n\n# Makefile exists before recursing.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Deletes all the files generated by autogen.sh.\n",
        "Line" : 805,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/protobuf-3.0.0/benchmarks/Makefile.am" : {
      "ObjectId" : "f730afe576443fd4f7303bf0a130a9e041b9350b",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Explicit deps because BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n\n# See: https://www.gnu.org/software/automake/manual/html_node/Built-Sources-Example.html#Recording-Dependencies-manually\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/protobuf-3.0.0/cmake/CMakeLists.txt" : {
      "ObjectId" : "1645299a6d022b39e24986f00f04d1c59210511c",
      "LastModified" : "2018-04-19T12:04:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake policies\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Project\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Options\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we need to disable zlib\n",
        "Line" : 26,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "# User options\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Path to main configure script\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Parse configure script\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Description\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Version\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Contact\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Parse version tweaks\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Package version\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# FindZLIB module define ZLIB_INCLUDE_DIRS variable\n\n# Set ZLIB_INCLUDE_DIRECTORIES for compatible\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Using imported target if exists\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Explicitly set these to empty (override NOT_FOUND) so cmake doesn't\n\n# complain when we use them later.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Build with multiple processes\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Allow big object\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Add the \"lib\" prefix for generated .lib outputs.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# When building with \"make\", \"lib\" prefix will be added automatically by\n\n# the build tool.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#if (NOT MSVC)\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#endif()\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "3rdparty/protobuf-3.0.0/cmake/examples.cmake" : {
      "ObjectId" : "e5cad63f67650db353a1f3a0e8b349e8cf0db32f",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal utility function: Create a custom target representing a build of examples with custom options.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Skip\n",
        "Line" : 20,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Add examples as an external project.\n\n# sub_directory cannot be used because the find_package(protobuf) call would cause failures with redefined targets.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Build using the legacy compatibility module.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#Build using the installed library.\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#Build using the installed library in legacy compatibility mode.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "3rdparty/protobuf-3.0.0/cmake/install.cmake" : {
      "ObjectId" : "2966d36d68765a258bb5bcf9b6349fc691bce1f4",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Internal function for parsing auto tools scripts\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install well-known type proto files\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install configuration\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allows the build directory to be used as a find directory.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#install(EXPORT protobuf-targets\n\n#  DESTINATION \"${CMAKE_INSTALL_CMAKEDIR}\"\n\n#  NAMESPACE protobuf::\n\n#  COMPONENT protobuf-export)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#install(DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_CMAKEDIR}/\n\n#  DESTINATION \"${CMAKE_INSTALL_CMAKEDIR}\"\n\n#  COMPONENT protobuf-export\n\n#  PATTERN protobuf-targets.cmake EXCLUDE\n\n#)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/protobuf-3.0.0/cmake/libprotobuf-lite.cmake" : {
      "ObjectId" : "036b051707db291fd2978ab9d9f5893393669de7",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/protobuf-3.0.0/cmake/libprotobuf.cmake" : {
      "ObjectId" : "8930c1ca1ecfeb0811ea41e8f294131df1d1ebaa",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/protobuf-3.0.0/cmake/libprotoc.cmake" : {
      "ObjectId" : "8df8986a113346114e82b1730f0d484366df26b0",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/protobuf-3.0.0/cmake/protobuf-options.cmake" : {
      "ObjectId" : "47fb15825752e544fda411db01c8a4391ed4dd38",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Verbose output\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindProtobuf module compatibel\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "3rdparty/protobuf-3.0.0/cmake/protoc.cmake" : {
      "ObjectId" : "4f07c389c976777e7685beb8e321e7ffcb98fcff",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/protobuf-3.0.0/cmake/tests.cmake" : {
      "ObjectId" : "ec0d6030641136cf72f55ffa100e3d97924c62ef",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/protobuf-3.0.0/conformance/Makefile.am" : {
      "ObjectId" : "b76407eeade4924d3f99d6bc4f1a58a0940bf086",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# lite/com/google/protobuf/Any.java                            \\\n  # lite/com/google/protobuf/AnyOrBuilder.java                   \\\n  # lite/com/google/protobuf/AnyProto.java                       \\\n  # lite/com/google/protobuf/BoolValue.java                      \\\n  # lite/com/google/protobuf/BoolValueOrBuilder.java             \\\n  # lite/com/google/protobuf/BytesValue.java                     \\\n  # lite/com/google/protobuf/BytesValueOrBuilder.java            \\\n  # lite/com/google/protobuf/conformance/Conformance.java        \\\n  # lite/com/google/protobuf/DoubleValue.java                    \\\n  # lite/com/google/protobuf/DoubleValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Duration.java                       \\\n  # lite/com/google/protobuf/DurationOrBuilder.java              \\\n  # lite/com/google/protobuf/DurationProto.java                  \\\n  # lite/com/google/protobuf/FieldMask.java                      \\\n  # lite/com/google/protobuf/FieldMaskOrBuilder.java             \\\n  # lite/com/google/protobuf/FieldMaskProto.java                 \\\n  # lite/com/google/protobuf/FloatValue.java                     \\\n  # lite/com/google/protobuf/FloatValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int32Value.java                     \\\n  # lite/com/google/protobuf/Int32ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/Int64Value.java                     \\\n  # lite/com/google/protobuf/Int64ValueOrBuilder.java            \\\n  # lite/com/google/protobuf/ListValue.java                      \\\n  # lite/com/google/protobuf/ListValueOrBuilder.java             \\\n  # lite/com/google/protobuf/NullValue.java                      \\\n  # lite/com/google/protobuf/StringValue.java                    \\\n  # lite/com/google/protobuf/StringValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Struct.java                         \\\n  # lite/com/google/protobuf/StructOrBuilder.java                \\\n  # lite/com/google/protobuf/StructProto.java                    \\\n  # lite/com/google/protobuf/Timestamp.java                      \\\n  # lite/com/google/protobuf/TimestampOrBuilder.java             \\\n  # lite/com/google/protobuf/TimestampProto.java                 \\\n  # lite/com/google/protobuf/UInt32Value.java                    \\\n  # lite/com/google/protobuf/UInt32ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/UInt64Value.java                    \\\n  # lite/com/google/protobuf/UInt64ValueOrBuilder.java           \\\n  # lite/com/google/protobuf/Value.java                          \\\n  # lite/com/google/protobuf/ValueOrBuilder.java                 \\\n  # lite/com/google/protobuf/WrappersProto.java\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# All source files excepet C++/Objective-C ones should be explicitly listed\n\n# here because the autoconf tools don't include files of other languages\n\n# automatically.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Explicit deps beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_cpp\" could fail if parallel enough.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On travis, the build fails without the isysroot because whatever system\n\n# headers are being found don't include generics support for\n\n# NSArray/NSDictionary, the only guess is their image at one time had an odd\n\n# setup for Xcode and old frameworks are being found.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Explicit dep beacuse BUILT_SOURCES are only done before a \"make all/check\"\n\n# so a direct \"make test_objc\" could fail if parallel enough.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Some implementations include pre-generated versions of well-known types.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## $(PROTOC) -I$(srcdir) -I$(top_srcdir) --java_out=lite:lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs)\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## @mkdir -p lite\n\n## oldpwd=`pwd` && ( cd $(srcdir) && $$oldpwd/../src/protoc$(EXEEXT) -I. -I$(top_srcdir)/src --java_out=lite:$$oldpwd/lite $(conformance_protoc_inputs) $(well_known_type_protoc_inputs) )\n",
        "Line" : 206,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Currently the conformance code is alongside the rest of the C#\n\n# source, as it's easier to maintain there. We assume we've already\n\n# built that, so we just need a script to run it.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Targets for actually running tests.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# These depend on library paths being properly set up.  The easiest way to\n\n# run them is to just use \"tox\" from the python dir.\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "3rdparty/protobuf-3.0.0/examples/CMakeLists.txt" : {
      "ObjectId" : "12f540405e065d0333d46da397fb5d54717ab15c",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Minimum CMake required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Project\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find required protobuf package\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Code Generation\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#Legacy Support\n",
        "Line" : 21,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "#Executable setup\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#Legacy mode\n",
        "Line" : 45,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 7
    },
    "3rdparty/protobuf-3.0.0/examples/Makefile" : {
      "ObjectId" : "51f134267aae4a7832a7765242f6170796ed9041",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# See README.txt.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make directory for go package\n",
        "Line" : 29,
        "CharPositionInLine" : 16
      },
      "2" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 34,
        "CharPositionInLine" : 31
      },
      "3" : {
        "Text" : "# fails if protobuf is not installed\n",
        "Line" : 38,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 4
    },
    "3rdparty/protobuf-3.0.0/gmock/CMakeLists.txt" : {
      "ObjectId" : "572d0444bf14834b1fde7f3e7398638cf4e4b7ce",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 56,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 62,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 21
    },
    "3rdparty/protobuf-3.0.0/gmock/Makefile.am" : {
      "ObjectId" : "0eb7bd8f342e94ff8e8c74834d740cf7abd4add8",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "3rdparty/protobuf-3.0.0/gmock/gtest/CMakeLists.txt" : {
      "ObjectId" : "57470c84f3af0772c411bbb8bbbb41b515747ecd",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "3rdparty/protobuf-3.0.0/gmock/gtest/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "3rdparty/protobuf-3.0.0/gmock/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "8cb21894cebacd5bdfb598c8663a5be50325d70f",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 107,
        "CharPositionInLine" : 32
      },
      "17" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 31
    },
    "3rdparty/protobuf-3.0.0/gmock/gtest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "3rdparty/protobuf-3.0.0/gmock/gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "3rdparty/protobuf-3.0.0/gmock/make/Makefile" : {
      "ObjectId" : "c1cc0e90f172b9f6a48fa9f74d72342d1d2e2585",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building both Google Mock and Google Test and\n\n# using them in user tests.  This file is self-contained, so you don't\n\n# need to use the Makefile in Google Test's source tree.  Please tweak\n\n# it to suit your environment and project.  You may want to move it to\n\n# your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use\n\n# in your own targets but shouldn't modify.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file, or if you want to use\n\n# a copy of Google Test at a different location.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Points to the root of Google Mock, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test and Google Mock's header directories as system\n\n# directories, such that the compiler doesn't generate warnings in\n\n# these headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All Google Mock headers. Note that all Google Test headers are\n\n# included here too, as they are #included by Google Mock headers.\n\n# Usually you shouldn't change this definition.\t\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builds gmock.a and gmock_main.a.  These libraries contain both\n\n# Google Mock and Google Test.  A test should link with either gmock.a\n\n# or gmock_main.a, depending on whether it defines its own main()\n\n# function.  It's fine if your test only uses features from Google\n\n# Test (and not Google Mock).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For simplicity and to avoid depending on implementation details of\n\n# Google Mock and Google Test, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Mock and\n\n# Google Test compile fast and for ordinary users their source rarely\n\n# changes.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Builds a sample test.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "3rdparty/protobuf-3.0.0/protobuf.bzl" : {
      "ObjectId" : "c5555fde872ba0cc232aaa3020e056d9c9be0c99",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# -*- mode: python; -*- PYTHON-PREPROCESSING-REQUIRED",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "\"\"\"General implementation for generating protos\"\"\"",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "\"\"\"Bazel rule to create a C++ protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the cc_proto_library.\n    srcs: the .proto files of the cc_proto_library.\n    deps: a list of dependency labels; must be cc_proto_library.\n    cc_libs: a list of other cc_library targets depended by the generated\n        cc_library.\n    include: a string indicating the include path of the .proto files.\n    protoc: the label of the protocol compiler to generate the sources.\n    internal_bootstrap_hack: a flag indicate the cc_proto_library is used only\n        for bootstraping. When it is set to True, no files will be generated.\n        The rule will simply be a provider for .proto files, so that other\n        cc_proto_library can depend on it.\n    use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin\n        when processing the proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated cc_library target.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# For pre-checked-in generated files, we add the internal_bootstrap_hack\n# which will skip the codegen action.",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# An empty cc_library to make rule dependency consistent.",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "\"\"\"Bazel rule to generate the gen_well_known_protos_java genrule\n\n  Args:\n    srcs: the well known protos\n  \"\"\"",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "\"\"\"Macro to copy files to a different directory and then create a filegroup.\n\n  This is used by the //:protobuf_python py_proto_library target to work around\n  an issue caused by Python source files that are part of the same Python\n  package being in separate directories.\n\n  Args:\n    srcs: The source files to copy and add to the filegroup.\n    strip_prefix: Path to the root of the files to copy.\n    dest: The directory to copy the source files into.\n    **kwargs: extra arguments that will be passesd to the filegroup.\n  \"\"\"",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "\"\"\"Bazel rule to create a Python protobuf library from proto source files\n\n  NOTE: the rule is only an internal workaround to generate protos. The\n  interface may change and the rule may be removed when bazel has introduced\n  the native rule.\n\n  Args:\n    name: the name of the py_proto_library.\n    srcs: the .proto files of the py_proto_library.\n    deps: a list of dependency labels; must be py_proto_library.\n    py_libs: a list of other py_library targets depended by the generated\n        py_library.\n    py_extra_srcs: extra source files that will be added to the output\n        py_library. This attribute is used for internal bootstrapping.\n    include: a string indicating the include path of the .proto files.\n    default_runtime: the implicitly default runtime which will be depended on by\n        the generated py_library target.\n    protoc: the label of the protocol compiler to generate the sources.\n    **kargs: other keyword arguments that are passed to cc_library.\n\n  \"\"\"",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "\"\"\"Bazel rules to create batch tests for protobuf internal.\n\n  Args:\n    name: the name of the rule.\n    modules: a list of modules for tests. The macro will create a py_test for\n        each of the parameter with the source \"google/protobuf/%s.py\"\n    kargs: extra parameters that will be passed into the py_test.\n\n  \"\"\"",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "3rdparty/protobuf-3.0.0/src/Makefile.am" : {
      "ObjectId" : "524886eaf2efc0c0caa730bc64189a77e4e45e03",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Turn on all warnings except for sign comparison (we ignore sign comparison\n\n# in Google so our code base have tons of such warnings).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If I say \"dist_include_DATA\", automake complains that $(includedir) is not\n\n# a \"legitimate\" directory for DATA.  Screw you, automake.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Not sure why these don't get cleaned automatically.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tests ==============================================================\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We have to cd to $(srcdir) before executing protoc because $(protoc_inputs) is\n\n# relative to srcdir, which may not be the same as the current directory when\n\n# building out-of-tree.\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Disable optimization for tests unless the user explicitly asked for it,\n\n# since test_util.cc takes forever to compile with optimization (with GCC).\n\n# See configure.ac for more info.\n",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Run cpp_unittest again with PROTOBUF_TEST_NO_DESCRIPTORS defined.\n",
        "Line" : 770,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build lite_unittest separately, since it doesn't use gtest. It can't\n\n# depend on gtest because our internal version of gtest depend on proto\n\n# full runtime and we want to make sure this test builds without full\n\n# runtime.\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# lite_arena_unittest depends on gtest because teboring@ found that without\n\n# gtest when building the test internally our memory sanitizer doesn't detect\n\n# memory leaks (don't know why).\n",
        "Line" : 804,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Test plugin binary.\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This test target is to ensure all our public header files and generated\n\n# code is free from warnings. We have to be more pedantic about these\n\n# files because they are compiled by users with different compiler flags.\n",
        "Line" : 837,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "3rdparty/protobuf-3.0.0/util/python/BUILD" : {
      "ObjectId" : "3ac03856690e43bba992ea8e5a1047e6435eed61",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# This is a placeholder for python headers. Projects needing to use\n# fast cpp protos in protobuf's python interface should build with\n# --define=use_fast_cpp_protos=true, and in addition, provide\n# //external:python_headers dependency that in turn provides Python.h.\n#\n# Projects that include protobuf using a Bazel external repository will need to\n# add a workspace rule to their WORKSPACE files to add an external workspace\n# that includes the Python headers. For example, the protobuf WORKSPACE file\n# includes the following local_repository rule that points to this directory:\n#\n# new_local_repository(\n#   name = \"python\",\n#   path = __workspace_dir__ + \"/util/python\",\n# )",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "3d26a7ec7163daa3b6ead6abb0b591e55094bf07",
      "LastModified" : "2018-10-26T12:58:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake Policy 0060 (CMP0060) controls how CMake\n\n# adds library dependencies to linker\n\n# When this policy is disabled (turned to OLD),\n\n# CMake uses weird linker options (e.g. -Wl,-Bstatic -lfoo -Wl,-dynamic),\n\n# which can mess up linkage types of libraries\n\n# When this policy is enabled (turned to NEW),\n\n# CMake uses full path when linking libraries,\n\n# and this helps to avoid aforementioned linker options\n\n# The complete description of this policy can be found here:\n\n# https://cmake.org/cmake/help/latest/policy/CMP0060.html\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Describe necessary options for static version of `bigartm` executable\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# There is problem with some Linux distributions (e.g. Fedora),\n\n# which currently doesn't provide convenient way to obtain\n\n# static version of `libunwind` library (either via official or custom repos)\n\n# This library is autodetected by 3rdparty `glog` module.\n\n# That's why there may be some problems when user wants to build\n\n# static CLI `bigartm` on system with only shared version of `libunwind`.\n\n#\n\n# It sounds reasonable to disable autodetection of `libunwind` library\n\n# by `glog` while building static CLI executable.\n\n# One possible way to do this is to \"forge\" `glog` module that\n\n# there is no libunwind library (via CMake CACHE vairables).\n\n# A nice candidate to do is variable \"UNWIND_LIBRARY\" which is directly\n\n# related to autodetection in file 3rdparty/glog/CMakeLists.txt\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# set compiler flags\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find boost\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# gflags must be compiled without -std=c++11\n",
        "Line" : 155,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 6
    },
    "cmake_modules/FindProtobufPlugin.cmake" : {
      "ObjectId" : "da593741923dd957d5799becb8e53b6ef9aa9c21",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate and configure the Google Protocol Buffers library.\n\n#\n\n# The following variables can be set and are optional:\n\n#\n\n#   PROTOBUF_SRC_ROOT_FOLDER - When compiling with MSVC, if this cache variable is set\n\n#                              the protobuf-default VS project build locations\n\n#                              (vsprojects/Debug & vsprojects/Release) will be searched\n\n#                              for libraries and binaries.\n\n#\n\n# Defines the following variables:\n\n#\n\n#   PROTOBUF_FOUND - Found the Google Protocol Buffers library (libprotobuf & header files)\n\n#   PROTOBUF_INCLUDE_DIRS - Include directories for Google Protocol Buffers\n\n#   PROTOBUF_LIBRARIES - The protobuf libraries\n\n# [New in CMake 2.8.5]\n\n#   PROTOBUF_PROTOC_LIBRARIES - The protoc libraries\n\n#   PROTOBUF_LITE_LIBRARIES - The protobuf-lite libraries\n\n#\n\n# The following cache variables are also available to set or use:\n\n#   PROTOBUF_LIBRARY - The protobuf library\n\n#   PROTOBUF_PROTOC_LIBRARY   - The protoc library\n\n#   PROTOBUF_INCLUDE_DIR - The include directory for protocol buffers\n\n#   PROTOBUF_PROTOC_EXECUTABLE - The protoc compiler\n\n# [New in CMake 2.8.5]\n\n#   PROTOBUF_LIBRARY_DEBUG - The protobuf library (debug)\n\n#   PROTOBUF_PROTOC_LIBRARY_DEBUG   - The protoc library (debug)\n\n#   PROTOBUF_LITE_LIBRARY - The protobuf lite library\n\n#   PROTOBUF_LITE_LIBRARY_DEBUG - The protobuf lite library (debug)\n\n#\n\n#  ====================================================================\n\n#  Example:\n\n#\n\n#   find_package(Protobuf REQUIRED)\n\n#   include_directories(${PROTOBUF_INCLUDE_DIRS})\n\n#\n\n#   include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#   PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)\n\n#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})\n\n#   target_link_libraries(bar ${PROTOBUF_LIBRARIES})\n\n#\n\n# NOTE: You may need to link against pthreads, depending\n\n# on the platform.\n\n#  ====================================================================\n\n#\n\n# PROTOBUF_GENERATE_CPP (public function)\n\n#   SRCS = Variable to define with autogenerated\n\n#          source files\n\n#   HDRS = Variable to define with autogenerated\n\n#          header files\n\n#   ARGN = proto files\n\n#\n\n#  ====================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Propagate output variables to parent scope\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Internal function: search for normal library as well as a debug one\n\n#    if the debug one is specified also include debug/optimized keywords\n\n#    in *_LIBRARIES variable\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#find_library(${name}_LIBRARY\n\n#    NAMES ${filename}\n\n#    PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release)\n",
        "Line" : 173,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#find_library(${name}_LIBRARY_DEBUG\n\n#    NAMES ${filename}\n\n#    PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug)\n\n#mark_as_advanced(${name}_LIBRARY_DEBUG)\n",
        "Line" : 178,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# There is no debug library\n",
        "Line" : 184,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# There IS a debug library\n",
        "Line" : 188,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "#\n\n# Main.\n\n#\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc\n\n# for each directory where a proto file is referenced.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google's provided vcproj files generate libraries with a \"lib\"\n\n# prefix on Windows\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The Protobuf library\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#DOC \"The Google Protocol Buffers RELEASE Library\"\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The Protobuf Protoc Library\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Restore original find library prefixes\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find the include directory\n\n#find_path(PROTOBUF_INCLUDE_DIR\n\n#    google/protobuf/service.h\n\n#    PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/src\n\n#)\n\n#mark_as_advanced(PROTOBUF_INCLUDE_DIR)\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Find the protoc Executable\n\n#find_program(PROTOBUF_PROTOC_EXECUTABLE\n\n#    NAMES protoc\n\n#    DOC \"The Google Protocol Buffers Compiler\"\n\n#    PATHS\n\n#    ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release\n\n#    ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug\n\n#)\n\n#mark_as_advanced(PROTOBUF_PROTOC_EXECUTABLE)\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#include(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)\n\n#FIND_PACKAGE_HANDLE_STANDARD_ARGS(PROTOBUF DEFAULT_MSG\n\n#    PROTOBUF_LIBRARY PROTOBUF_INCLUDE_DIR)\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cmake_modules/FindZeroMQ.cmake" : {
      "ObjectId" : "e4a6cf31b2b76311b457f5a560403487699d25c5",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libzmq\n\n# Once done, this will define\n\n#\n\n#  ZeroMQ_FOUND - system has libzmq\n\n#  ZeroMQ_INCLUDE_DIRS - the libzmq include directories\n\n#  ZeroMQ_LIBRARIES - link these to use libzmq\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake_modules/LibFindMacros.cmake" : {
      "ObjectId" : "69975c51be3f9c5e0ff372a4424f8de3b580ee88",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "docs/Makefile" : {
      "ObjectId" : "514d09a92493e864d873b5be86f262055007aa09",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "95bc9c3cae7eb2c39e2e23260c4815d4776f7415",
      "LastModified" : "2018-04-19T12:04:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: set ts=2 sw=2:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# perform \"python setup.py build\" during executing make\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This file is generated, therefore needs to be specified without *\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "python/tests/CMakeLists.txt" : {
      "ObjectId" : "7e6ce43624c031b3289a5e5ac936edebd1f769f2",
      "LastModified" : "2017-12-06T19:50:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/tests/artm/CMakeLists.txt" : {
      "ObjectId" : "98f62c22612677d89d00c3fae7d879f0893ef093",
      "LastModified" : "2018-08-02T07:38:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "python/tests/wrapper/CMakeLists.txt" : {
      "ObjectId" : "bb833a1b065f0b38bd663ff10df27888943c82a1",
      "LastModified" : "2018-08-02T07:38:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "74d103fa936dd641f252795af246bcbfc92b1de2",
      "LastModified" : "2018-04-19T12:04:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find Protobuf\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/artm/CMakeLists.txt" : {
      "ObjectId" : "2c9d5f73b79c110284597c1a3fb3788c1ae40308",
      "LastModified" : "2019-02-08T12:41:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add custom command for creating from *.proto templates\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add custom target\n\n# to bind targets with *.proto dependencies and\n\n# *.proto generation\n\n# as a result, we specify the order\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The version number\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# configure a header file to pass some of the CMake settings\n\n# to the source code\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# make separate objective files for every 'external' *.pb.cc file\n\n# rationale - compiling every *.pb.cc file for different targets\n\n# is very computationaly intensive\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Static 'artm' library\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This library is needed for GetProcessMemoryInfo and is not linked by default on MinGW\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Shared 'artm' library\n\n# We need to rebuild these .cc files in order to get dllexports\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make protobuf export symbols from our shared library\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Using PRIVATE here so that consumers of the library do not link explicitly\n\n# to boost, etc. This should be handled by the linker via DT_NEEDED or similar\n\n# But we have to repeat include dir here for artm_export.h\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Support compiling with bundled protobuf headers from build-tree\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This ugly hack calls cmake install script for protobuf directly and\n\n# installs only its headers\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/artm/cmake/artm-config.cmake" : {
      "ObjectId" : "1e43c6be4ef13a92683ca171c6085c7bda09e2ee",
      "LastModified" : "2018-04-19T12:04:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/artm_tests/CMakeLists.txt" : {
      "ObjectId" : "5d6058cd5bc04a3c1a4c86253605efd08f82a541",
      "LastModified" : "2018-04-19T12:04:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add target for testing\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/bigartm/CMakeLists.txt" : {
      "ObjectId" : "89c4a0eb02cf0ba4efdc065696850b7688a28e30",
      "LastModified" : "2018-04-19T12:04:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To use static boost libraries, we need to re-find them\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# If we don't want static linkage, we can just use new approach with\n\n# imported targets like everywhere else in the project\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 38,
    "MAKEFILE" : 5,
    "AUTOMAKE" : 6,
    "BAZEL" : 3
  },
  "ElapsedTime" : 2831
}