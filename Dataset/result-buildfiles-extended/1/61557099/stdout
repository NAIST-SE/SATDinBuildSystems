{
  "Repository" : "61557099",
  "Revision" : "HEAD",
  "ObjectId" : "dd18309f9f9d6a7b3fa4b8513aef3c7e6e6ecae6",
  "CommitTime" : "2019-04-16T22:58:37Z",
  "Files" : {
    "worker/Makefile" : {
      "ObjectId" : "c16e92a9e8693a10c108c9f7f8c6a6baa23b393f",
      "LastModified" : "2019-03-17T22:22:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# make tasks for mediasoup-worker.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Best effort to get Python 2 executable and also allow custom PYTHON\n\n# environment variable set by the user.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "worker/deps/catch/.conan/test_package/CMakeLists.txt" : {
      "ObjectId" : "db05659904e4c55ea9ca233d4765995b9fc485c8",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/catch/CMake/FindGcov.cmake" : {
      "ObjectId" : "6ffd6eacb1f370bee3fc734b929aca2bbc2b04b9",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include required Modules\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for gcov binary.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Gcov evaluation is dependend on the used compiler. Check gcov support for\n\n# each compiler that is used. If gcov binary was already found for this\n\n# compiler, do not try to find it again.\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Some distributions like OSX (homebrew) ship gcov with the compiler\n\n# version appended as gcov-x. To find this binary we'll build the\n\n# suggested binary name with the compiler version.\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Some distributions like Debian ship llvm-cov with the compiler\n\n# version appended as llvm-cov-x.y. To find this binary we'll build\n\n# the suggested binary name with the compiler version.\n",
        "Line" : 39,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# llvm-cov prior version 3.5 seems to be not working with coverage\n\n# evaluation tools, but these versions are compatible with the gcc\n\n# gcov tool.\n",
        "Line" : 45,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# set additional parameters\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Fall back to gcov binary if llvm-cov was not found or is\n\n# incompatible. This is the default on OSX, but may crash on\n\n# recent Linux versions.\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add a new global target for all gcov targets. This target could be used to\n\n# generate the gcov files for the whole project instead of calling <TARGET>-gcov\n\n# for each target.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This function will add gcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# Gcov on any source file of <TNAME> once and store the gcov file in the same\n\n# directory.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# call gcov\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# add target for gcov evaluation of <TNAME>\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# add evaluation target to the global gcov target.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 16
    },
    "worker/deps/catch/CMake/FindLcov.cmake" : {
      "ObjectId" : "beb925ae06efb0de816b8a95c16782dbeffeef4a",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configuration\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for Gcov which is used by Lcov.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This function will add lcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# geninfo on any source file of <TNAME> once and store the info file in the same\n\n# directory.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# capture initial coverage data\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# capture coverage data after execution\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# include required Modules\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for required lcov binaries.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# enable genhtml C++ demangeling, if c++filt is found.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# enable no-external flag for lcov, if available.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If Lcov was not found, exit module now.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create directories to be used.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This function will merge lcov files to a single target file. Additional lcov\n\n# flags may be set with setting LCOV_EXTRA_FLAGS before calling this function.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Remove ${OUTFILE} from ${ARGV} and generate lcov parameters with files.\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Generate merged file.\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Add a new global target to generate initial coverage reports for all targets.\n\n# This target will be used to generate the global initial info file, which is\n\n# used to gather even empty report data.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This function will add initial capture of coverage data for target <TNAME>,\n\n# which is needed to get also data for objects, which were not loaded at\n\n# execution time. It will call geninfo for every source file of <TNAME> once and\n\n# store the info file in the same directory.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# generate empty coverage files\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 178,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add geninfo file generation to global lcov-geninfo target\n",
        "Line" : 184,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 196,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Add a new global target to generate coverage reports for all targets. This\n\n# target will be used to generate the global info file.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This function will add capture of coverage data for target <TNAME>, which is\n\n# needed to get also data for objects, which were not loaded at execution time.\n\n# It will call geninfo for every source file of <TNAME> once and store the info\n\n# file in the same directory.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 243,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Generate coverage files. If no .gcda file was generated during\n\n# execution, the empty coverage file will be used instead.\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 273,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# add geninfo file generation to global lcov-capture target\n",
        "Line" : 278,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Add target for generating html output for this target only.\n",
        "Line" : 284,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 301,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 307,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Add a new global target for all lcov targets. This target could be used to\n\n# generate the lcov html output for the whole project instead of calling\n\n# <TARGET>-geninfo and <TARGET>-genhtml for each target. It will also be\n\n# used to generate a html site for all project data together instead of one\n\n# for each target.\n",
        "Line" : 312,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Add a new global target to generate the lcov html report for the whole project\n\n# instead of calling <TARGET>-genhtml for each target (to create an own report\n\n# for each target). Instead of the lcov target it does not require geninfo for\n\n# all targets, so you have to call <TARGET>-geninfo to generate the info files\n\n# the targets you'd like to have in your report or lcov-geninfo for generating\n\n# info files for all targets before calling lcov-genhtml.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "worker/deps/catch/CMake/Findcodecov.cmake" : {
      "ObjectId" : "fa135fa8fd2d8916f170dbd68eb5a578f576372e",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add an option to choose, if coverage should be enabled or not. If enabled\n\n# marked targets will be build with coverage support and appropriate targets\n\n# will be added. If disabled coverage will be ignored for *ALL* targets.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gcc and clang\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# gcc and clang fallback\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation. If coverage is disabled or not supported, this function will\n\n# simply do nothing.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# only add coverage for target, if coverage is support and enabled.\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Add global target to gather coverage information after all targets have been\n\n# added. Other evaluation functions could be added here, after checks for the\n\n# specific module have been passed.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add lcov evaluation\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Exit this module, if coverage is disabled. add_coverage is defined before this\n\n# return, so this module can be exited now safely without breaking any build-\n\n# scripts.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Find the reuired flags foreach language.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Coverage flags are not dependend on language, but the used compiler. So\n\n# instead of searching flags foreach language, search flags foreach compiler\n\n# used.\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# CheckFortranCompilerFlag was introduced in CMake 3.x. To be\n\n# compatible with older Cmake versions, we will check if this\n\n# module is present before we use it. Otherwise we will define\n\n# Fortran coverage support as not available.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Helper function to get the language of a source file.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Helper function to get the relative path of the source file destination path.\n\n# This path is needed by FindGcov and FindLcov cmake files to locate the\n\n# captured data.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If expression was found, SOURCEFILE is a generator-expression for an\n\n# object library. Currently we found no way to call this function automatic\n\n# for the referenced target, so it must be called in the directoryso of the\n\n# object library definition.\n",
        "Line" : 159,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get the right path for file\n",
        "Line" : 174,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Check if all sources for target use the same compiler. If a target uses\n\n# e.g. C and Fortran mixed and uses different compilers (e.g. clang and\n\n# gfortran) this can trigger huge problems, because different compilers may\n\n# use different implementations for code coverage.\n",
        "Line" : 186,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# If expression was found, FILE is a generator-expression for an object\n\n# library. Object libraries will be ignored.\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# A warning has been printed before, so just return if flags for this\n\n# compiler aren't available.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# enable coverage for target\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Add gcov files generated by compiler to clean target.\n",
        "Line" : 237,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Include modules for parsing the collected data and output it in a readable\n\n# format (like gcov and lcov).\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "worker/deps/catch/CMake/MiscFunctions.cmake" : {
      "ObjectId" : "262f7cd8292afcef9f6612c337d2a931ede37c98",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#checks that the given hard-coded list contains all headers + sources in the given folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "worker/deps/catch/CMakeLists.txt" : {
      "ObjectId" : "6609104699629e01002fafe4ccf1e26afb7c21fb",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect if Catch is being bundled,\n\n# disable testsuite in that case\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provide path for scripts\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define some folders\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add catch as a 'linkable' target\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# depend on some obvious c++11 features so the dependency is transitively added dependents\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# provide a namespaced alias for clients to 'link' against if catch is included as a sub-project\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Only perform the installation steps when Catch is not being used as\n\n# a subproject via `add_subdirectory`, or the destinations will break,\n\n# see https://github.com/catchorg/Catch2/issues/1373\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# create and install an export set for catch target as Catch2::Catch\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# By default, FooConfigVersion is tied to architecture that it was\n\n# generated on. Because Catch2 is header-only, it is arch-independent\n\n# and thus Catch2ConfigVersion should not be tied to the architecture\n\n# it was generated on.\n\n#\n\n# CMake does not provide a direct customization point for this in\n\n# `write_basic_package_version_file`, but it can be accomplished\n\n# indirectly by temporarily undefining `CMAKE_SIZEOF_VOID_P`.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Install documentation\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Install CMake scripts\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Install debugger helpers\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## Provide some pkg-config integration\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "worker/deps/catch/contrib/Catch.cmake" : {
      "ObjectId" : "486e323318cb16a7a65bcf4e26244086d8497617",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nCatch\n-----\n\nThis module defines a function to help use the Catch test framework.\n\nThe :command:`catch_discover_tests` discovers tests by asking the compiled test\nexecutable to enumerate its tests.  This does not require CMake to be re-run\nwhen tests change.  However, it may not work in a cross-compiling environment,\nand setting test properties is less convenient.\n\nThis command is intended to replace use of :command:`add_test` to register\ntests, and will create a separate CTest test for each Catch test case.  Note\nthat this is in some cases less efficient, as common set-up and tear-down logic\ncannot be shared by multiple test cases executing in the same instance.\nHowever, it provides more fine-grained pass/fail information to CTest, which is\nusually considered as more beneficial.  By default, the CTest test name is the\nsame as the Catch name; see also ``TEST_PREFIX`` and ``TEST_SUFFIX``.\n\n.. command:: catch_discover_tests\n\n  Automatically add tests with CTest by querying the compiled test executable\n  for available tests::\n\n    catch_discover_tests(target\n                         [TEST_SPEC arg1...]\n                         [EXTRA_ARGS arg1...]\n                         [WORKING_DIRECTORY dir]\n                         [TEST_PREFIX prefix]\n                         [TEST_SUFFIX suffix]\n                         [PROPERTIES name1 value1...]\n                         [TEST_LIST var]\n    )\n\n  ``catch_discover_tests`` sets up a post-build command on the test executable\n  that generates the list of tests by parsing the output from running the test\n  with the ``--list-test-names-only`` argument.  This ensures that the full\n  list of tests is obtained.  Since test discovery occurs at build time, it is\n  not necessary to re-run CMake when the list of tests changes.\n  However, it requires that :prop_tgt:`CROSSCOMPILING_EMULATOR` is properly set\n  in order to function in a cross-compiling environment.\n\n  Additionally, setting properties on tests is somewhat less convenient, since\n  the tests are not available at CMake time.  Additional test properties may be\n  assigned to the set of tests as a whole using the ``PROPERTIES`` option.  If\n  more fine-grained test control is needed, custom content may be provided\n  through an external CTest script using the :prop_dir:`TEST_INCLUDE_FILES`\n  directory property.  The set of discovered tests is made accessible to such a\n  script via the ``<target>_TESTS`` variable.\n\n  The options are:\n\n  ``target``\n    Specifies the Catch executable, which must be a known CMake executable\n    target.  CMake will substitute the location of the built executable when\n    running the test.\n\n  ``TEST_SPEC arg1...``\n    Specifies test cases, wildcarded test cases, tags and tag expressions to\n    pass to the Catch executable with the ``--list-test-names-only`` argument.\n\n  ``EXTRA_ARGS arg1...``\n    Any extra arguments to pass on the command line to each test case.\n\n  ``WORKING_DIRECTORY dir``\n    Specifies the directory in which to run the discovered test cases.  If this\n    option is not provided, the current binary directory is used.\n\n  ``TEST_PREFIX prefix``\n    Specifies a ``prefix`` to be prepended to the name of each discovered test\n    case.  This can be useful when the same test executable is being used in\n    multiple calls to ``catch_discover_tests()`` but with different\n    ``TEST_SPEC`` or ``EXTRA_ARGS``.\n\n  ``TEST_SUFFIX suffix``\n    Similar to ``TEST_PREFIX`` except the ``suffix`` is appended to the name of\n    every discovered test case.  Both ``TEST_PREFIX`` and ``TEST_SUFFIX`` may\n    be specified.\n\n  ``PROPERTIES name1 value1...``\n    Specifies additional properties to be set on all tests discovered by this\n    invocation of ``catch_discover_tests``.\n\n  ``TEST_LIST var``\n    Make the list of tests available in the variable ``var``, rather than the\n    default ``<target>_TESTS``.  This can be useful when the same test\n    executable is being used in multiple calls to ``catch_discover_tests()``.\n    Note that this variable is only available in CTest.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Generate a unique name based on the extra arguments\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Define rule to generate test list for aforementioned test executable\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add discovered tests to directory TEST_INCLUDE_FILES\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add discovered tests as directory TEST_INCLUDE_FILE if possible\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "###############################################################################\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "worker/deps/catch/contrib/CatchAddTests.cmake" : {
      "ObjectId" : "2220ce3ac6b987b1e8b1ae82466a3f715916687c",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# form a bracket_argument\n",
        "Line" : 17,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : "# Run test executable to get list of available tests\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Catch --list-test-names-only reports the number of tests, so 0 is... surprising\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Parse output\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# use escape commas to handle properly test cases with commans inside the name\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ...and add to script\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Create a list of all discovered tests, which users may use to e.g. set\n\n# properties on the tests\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Write CTest script\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "worker/deps/catch/contrib/ParseAndAddCatchTests.cmake" : {
      "ObjectId" : "ff4fc66773172150eb78aa8a555b4009e1465b31",
      "LastModified" : "2019-03-17T22:22:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==================================================================================================#\n\n#  supported macros                                                                                #\n\n#    - TEST_CASE,                                                                                  #\n\n#    - SCENARIO,                                                                                   #\n\n#    - TEST_CASE_METHOD,                                                                           #\n\n#    - CATCH_TEST_CASE,                                                                            #\n\n#    - CATCH_SCENARIO,                                                                             #\n\n#    - CATCH_TEST_CASE_METHOD.                                                                     #\n\n#                                                                                                  #\n\n#  Usage                                                                                           #\n\n# 1. make sure this module is in the path or add this otherwise:                                   #\n\n#    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake.modules/\")              #\n\n# 2. make sure that you've enabled testing option for the project by the call:                     #\n\n#    enable_testing()                                                                              #\n\n# 3. add the lines to the script for testing target (sample CMakeLists.txt):                       #\n\n#        project(testing_target)                                                                   #\n\n#        set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake.modules/\")          #\n\n#        enable_testing()                                                                          #\n\n#                                                                                                  #\n\n#        find_path(CATCH_INCLUDE_DIR \"catch.hpp\")                                                  #\n\n#        include_directories(${INCLUDE_DIRECTORIES} ${CATCH_INCLUDE_DIR})                          #\n\n#                                                                                                  #\n\n#        file(GLOB SOURCE_FILES \"*.cpp\")                                                           #\n\n#        add_executable(${PROJECT_NAME} ${SOURCE_FILES})                                           #\n\n#                                                                                                  #\n\n#        include(ParseAndAddCatchTests)                                                            #\n\n#        ParseAndAddCatchTests(${PROJECT_NAME})                                                    #\n\n#                                                                                                  #\n\n# The following variables affect the behavior of the script:                                       #\n\n#                                                                                                  #\n\n#    PARSE_CATCH_TESTS_VERBOSE (Default OFF)                                                       #\n\n#    -- enables debug messages                                                                     #\n\n#    PARSE_CATCH_TESTS_NO_HIDDEN_TESTS (Default OFF)                                               #\n\n#    -- excludes tests marked with [!hide], [.] or [.foo] tags                                     #\n\n#    PARSE_CATCH_TESTS_ADD_FIXTURE_IN_TEST_NAME (Default ON)                                       #\n\n#    -- adds fixture class name to the test name                                                   #\n\n#    PARSE_CATCH_TESTS_ADD_TARGET_IN_TEST_NAME (Default ON)                                        #\n\n#    -- adds cmake target name to the test name                                                    #\n\n#    PARSE_CATCH_TESTS_ADD_TO_CONFIGURE_DEPENDS (Default OFF)                                      #\n\n#    -- causes CMake to rerun when file with tests changes so that new tests will be discovered    #\n\n#                                                                                                  #\n\n# One can also set (locally) the optional variable OptionalCatchTestLauncher to precise the way    #\n\n# a test should be run. For instance to use test MPI, one can write                                #\n\n#     set(OptionalCatchTestLauncher ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${NUMPROC})                 #\n\n# just before calling this ParseAndAddCatchTests function                                          #\n\n#                                                                                                  #\n\n#==================================================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This removes the contents between\n\n#  - block comments (i.e. /* ... */)\n\n#  - full line comments (i.e. // ... )\n\n# contents have been read into '${CppCode}'.\n\n# !keep partial line comments\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Worker function\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# According to CMake docs EXISTS behavior is well-defined only for full paths.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Remove block and fullline comments\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Find definition of test names\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Strip newlines\n",
        "Line" : 106,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Get test type and fixture if applicable\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Get string parts of test definition\n",
        "Line" : 114,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Strip wrapping quotation marks\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Validate that a test name and tags have been provided\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Assign name and tags\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# add target to labels to enable running all tests added from this target\n",
        "Line" : 140,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# remove target from labels if the test is hidden\n",
        "Line" : 145,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# unset tags variable from previous loop\n",
        "Line" : 152,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Escape commas in the test spec\n",
        "Line" : 175,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# Add the test and set its properties\n",
        "Line" : 178,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Old CMake versions do not document VERSION_GREATER_EQUAL, so we use VERSION_GREATER with 3.8 instead\n",
        "Line" : 180,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# entry point\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "worker/deps/catch/examples/CMakeLists.txt" : {
      "ObjectId" : "65dc5f54ace8426fef8aebd2097a6417eec0524b",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Build examples.\n\n#\n\n# Requires CATCH_BUILD_EXAMPLES to be defined 'true', see ../CMakeLists.txt.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define folders used:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# single-file sources:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# multiple-file modules:\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# main for idiomatic test sources:\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# sources to combine with 000-CatchMain.cpp:\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# main-s for reporter-specific test sources:\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# sources to combine with 200-Rpt-CatchMain{Reporter}.cpp:\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check if all sources are listed, warn if not:\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# create target names:\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# define program targets:\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_library( CatchMainAutomake OBJECT ${EXAMPLES_DIR}/200-Rpt-CatchMain.cpp ${HEADER_DIR}/catch2/catch.hpp )\n\n#add_library( CatchMainTap      OBJECT ${EXAMPLES_DIR}/200-Rpt-CatchMain.cpp ${HEADER_DIR}/catch2/catch.hpp )\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#target_compile_definitions( CatchMainAutomake PRIVATE CATCH_EXAMPLE_RPT_1=\\\"include/reporters/catch_reporter_automake.hpp\\\" )\n\n#target_compile_definitions( CatchMainTap      PRIVATE CATCH_EXAMPLE_RPT_1=\\\"include/reporters/catch_reporter_tap.hpp\\\" )\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#add_executable( 207-Rpt-AutomakeReporter ${EXAMPLES_DIR}/207-Rpt-AutomakeReporter.cpp $<TARGET_OBJECTS:CatchMainAutomake> ${HEADER_DIR}/catch2/catch.hpp )\n\n#add_executable( 207-Rpt-TapReporter      ${EXAMPLES_DIR}/207-Rpt-TapReporter.cpp      $<TARGET_OBJECTS:CatchMainTap>      ${HEADER_DIR}/catch2/catch.hpp )\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#foreach( name ${TARGETS_REPORTERS_TESTS} )\n\n#    add_executable( ${name} ${EXAMPLES_DIR}/${name}.cpp $<TARGET_OBJECTS:CatchMain> ${HEADER_DIR}/catch2/catch.hpp )\n\n#endforeach()\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add desired warnings\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Clang specific warning go here\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Actually keep these\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 18
    },
    "worker/deps/catch/misc/CMakeLists.txt" : {
      "ObjectId" : "bf80846cdc6484050d02486946e4a66cd976c404",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/catch/projects/CMakeLists.txt" : {
      "ObjectId" : "37b0865ae1c53a7068c5de26165f8c41b8de721e",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####\n\n# Temporary workaround for VS toolset changes in 2017\n\n# We need to disable <UseFullPaths> property, but CMake doesn't support it\n\n# until 3.13 (not yet released)\n\n####\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Temporary workaround\n",
        "Line" : 12,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# define the sources of the self test\n\n# Please keep these ordered alphabetically\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# A set of impl files that just #include a single header\n\n# Please keep these ordered alphabetically\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Specify the headers, too, so CLion recognises them as project files\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Provide some groupings for IDEs\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add per compiler options\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Clang specific options go here\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# override default warning level\n",
        "Line" : 313,
        "CharPositionInLine" : 77
      },
      "13" : {
        "Text" : "# Force MSVC to consider everything as encoded in utf-8\n",
        "Line" : 318,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# configure unit tests via CTest\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# AppVeyor has a Python 2.7 in path, but doesn't have .py files as autorunnable\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "worker/deps/catch/projects/ExtraTests/CMakeLists.txt" : {
      "ObjectId" : "c0dd82d8f07ab1087b712ff5db552238f6348ba9",
      "LastModified" : "2018-12-04T17:58:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Build extra tests.\n\n#\n\n# Requires CATCH_BUILD_EXTRA_TESTS to be defined 'true', see ../CMakeLists.txt.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define folders used:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The spaces are important -> They disambiguate between CATCH_REQUIRE\n\n# and REQUIRE without prefix.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#    $<$<CXX_COMPILER_ID:Clang>:-fno-exceptions>\n\n#    $<$<CXX_COMPILER_ID:GNU>:-fno-exceptions>\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Shared config\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "worker/deps/json/CMakeLists.txt" : {
      "ObjectId" : "9887657f03fd64a29c10332969a789bf6d6a3de2",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## PROJECT\n\n## name and version\n\n##\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## INCLUDE\n\n##\n\n##\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## OPTIONS\n\n##\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n\n## CONFIGURATION\n\n##\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n\n## TARGET\n\n## create target and add include path\n\n##\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## add debug view definition file for msvc (natvis)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##\n\n## TESTS\n\n## create and configure the unit test target\n\n##\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#adds option BUILD_TESTING (default ON)\n",
        "Line" : 79,
        "CharPositionInLine" : 15
      },
      "8" : {
        "Text" : "##\n\n## INSTALL\n\n## install header files, generate and install cmake config files for find_package()\n\n##\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "worker/deps/json/Makefile" : {
      "ObjectId" : "24c77f51b0235a544a4073ec71e9ba7f3d2255e7",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# directory to recent compiler binaries\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# main target\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# unit tests\n\n##########################################################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# build unit tests\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# run unit tests\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# clean up\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########################################################################\n\n# coverage\n\n##########################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########################################################################\n\n# documentation tests\n\n##########################################################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# compile example files and check output\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##########################################################################\n\n# warning detector\n\n##########################################################################\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# calling Clang with all warnings, except:\n\n# -Wno-documentation-unknown-command: code uses user-defined commands like @complexity\n\n# -Wno-exit-time-destructors: warning in Catch code\n\n# -Wno-keyword-macro: unit-tests use \"#define private public\"\n\n# -Wno-deprecated-declarations: the library deprecated some functions\n\n# -Wno-weak-vtables: exception class is defined inline, but has virtual method\n\n# -Wno-range-loop-analysis: items tests \"for(const auto i...)\"\n\n# -Wno-float-equal: not all comparisons in the tests can be replaced by Approx\n\n# -Wno-switch-enum -Wno-covered-switch-default: pedantic/contradicting warnings about switches\n\n# -Wno-c++2a-compat: u8 literals will behave differently in C++20...\n\n# -Wno-padded: padding is nothing to warn about\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# calling GCC with most warnings\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##########################################################################\n\n# benchmarks\n\n##########################################################################\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##########################################################################\n\n# fuzzing\n\n##########################################################################\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# the overall fuzz testing target\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##########################################################################\n\n# static analyzer\n\n##########################################################################\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# call cppcheck on the main header file\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# compile and check with Clang Static Analyzer\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# call cpplint (some errors expected due to false positives)\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########################################################################\n\n# maintainer targets\n\n##########################################################################\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# pretty printer\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# create single header file\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# check if single_include/nlohmann/json.hpp has been amalgamated from the nlohmann sources\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# check if every header in nlohmann includes sufficient headers to be compiled\n\n# individually\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########################################################################\n\n# changelog\n\n##########################################################################\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########################################################################\n\n# release\n\n##########################################################################\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "worker/deps/json/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "953b1cb8497d3bbc0d672d669cf1f7096fda8dab",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set compiler flags\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configure Google Benchmarks\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# header directories\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# copy test files to build folder\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# benchmark binary\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/CMakeLists.txt" : {
      "ObjectId" : "b1c1d3d5a90e4ff84b9c6b912ceda6ee626d6639",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n\n# Support no if() IN_LIST operator\n",
        "Line" : 6,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Allow unmet dependencies to be met using CMake's ExternalProject mechanics, which\n\n# may require downloading the source code.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This option can be used to disable building and running unit tests which depend on gtest\n\n# in cases where it is not possible to build or find a valid version of gtest.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME: The --coverage flag needs to be removed when building assembly\n\n# tests for this to work.\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# FIXME: Make these work on 32 bit builds\n",
        "Line" : 48,
        "CharPositionInLine" : 5
      },
      "6" : {
        "Text" : "# This option disables the building and running of the assembly verification tests\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 149,
        "CharPositionInLine" : 52
      },
      "17" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Coverage build type\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Set up directories\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Build the targets\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "d0d2099814402a3fc54ed2be2b61cd4f31d5c5f7",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add -Werror to ensure the compiler generates an error if the warning flag\n\n# doesn't exist.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "c4c4d660f1eba1a484fcd2c2c11f7e94115ace31",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "88cebe3a1caac022b39199870c09d8804d45409b",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/HandleGTest.cmake" : {
      "ObjectId" : "7ce1a633d65a2e7102ce8df365b7a2874f08e727",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Since 10/Feb/2017 the googletest trunk has had a bug where\n\n# -Werror=unused-function fires during the build on OS X. This is a temporary\n\n# workaround to keep our travis bots from failing. It should be removed\n\n# once gtest is fixed.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Use gmock_main instead of gtest_main because it initializes gtest as well.\n\n# Note: The libraries are listed in reverse order of their dependancies.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 2.8 and older don't respect INTERFACE_INCLUDE_DIRECTORIES, so we\n\n# have to add the paths ourselves.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# FIXME: We don't currently require the gmock library to build the tests,\n\n# and it's likely we won't find it, so we don't try. As long as we've\n\n# found the gmock/gmock.h header and gtest_main that should be good enough.\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/Modules/FindLLVMAr.cmake" : {
      "ObjectId" : "23469813cfab5946c86002cef85caa10e7165380",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/Modules/FindLLVMNm.cmake" : {
      "ObjectId" : "e56430a04f6e84629bb3e06ae511e6f14829319a",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/Modules/FindLLVMRanLib.cmake" : {
      "ObjectId" : "7b53e1a790590bdfc07adf41f0ae74b4a9b61ff0",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/llvm-toolchain.cmake" : {
      "ObjectId" : "fc119e52fd26a59786b3480f3e6c64c72b78ad8d",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/cmake/split_list.cmake" : {
      "ObjectId" : "67aed3fdc8579b7d9a6f06a73fa9b6844976e691",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/benchmarks/thirdparty/benchmark/src/CMakeLists.txt" : {
      "ObjectId" : "701804ba0e00fa1105e8aa7fc6b3480bb5540005",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need extra libraries on Solaris\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Benchmark main library\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "worker/deps/json/doc/Makefile" : {
      "ObjectId" : "c255f972655a1a96050dc151079b3956ec4be925",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########################################################################\n\n# example files\n\n##########################################################################\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# where are the example cpp files\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create output from a stand-alone example file\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# compare created output with current output of the example files\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# create links to try the code online\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# create output from all stand-alone example files\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check output of all stand-alone example files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########################################################################\n\n# Doxygen HTML documentation\n\n##########################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# create Doxygen documentation\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##########################################################################\n\n# docset\n\n##########################################################################\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# create docset for Dash\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "worker/deps/json/test/CMakeLists.txt" : {
      "ObjectId" : "5f253bffff99eb023ee1aec4600647f034f37bb6",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# enable profiling\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# from https://github.com/RWTH-HPC/CMake-codecov/blob/master/cmake/FindGcov.cmake\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# collect all source files from the chosen include dir\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add target to collect coverage information and generate HTML file\n\n# (filter script from https://stackoverflow.com/a/43726240/266378)\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#############################################################################\n\n# Catch library with the main function to speed up build\n\n#############################################################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# https://stackoverflow.com/questions/2368811/how-to-set-warning-level-in-cmake\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Force to always compile with W4\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Disable warning C4389: '==': signed/unsigned mismatch\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Disable warning C4309: 'static_cast': truncation of constant value\n\n# Disable warning C4566: character represented by universal-character-name '\\uFF01' cannot be represented in the current code page (1252)\n\n# Disable warning C4996: 'nlohmann::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::adl_serializer>::operator <<': was declared deprecated\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# https://github.com/nlohmann/json/issues/1114\n",
        "Line" : 89,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#############################################################################\n\n# one executable for each unit test file\n\n#############################################################################\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#############################################################################\n\n# Test the generated build configs\n\n#############################################################################\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "worker/deps/json/test/Makefile" : {
      "ObjectId" : "4f00cbc7af553837c200fd772b4a16ed48e6bd65",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########################################################################\n\n# unit tests\n\n##########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# additional flags\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# main rules\n\n##############################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# single test file\n\n##############################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n\n# individual test cases\n\n##############################################################################\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n\n# fuzzer\n\n##############################################################################\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "worker/deps/json/test/cmake_add_subdirectory/CMakeLists.txt" : {
      "ObjectId" : "ad04547e7d1c3943781a7e119c7372eaf74a1274",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/test/cmake_add_subdirectory/project/CMakeLists.txt" : {
      "ObjectId" : "21357b68579e1485d545ec331deaa0ad3992494f",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/test/cmake_import/CMakeLists.txt" : {
      "ObjectId" : "911c342c6ded16a057d16480e9a7c05eafb0cd23",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/test/cmake_import/project/CMakeLists.txt" : {
      "ObjectId" : "fe892fc1f67ff309e92e6a1507d461c8370e9282",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/test/cmake_import_minver/CMakeLists.txt" : {
      "ObjectId" : "8cef2fabb4c29198bf6791a0f86dc1a11cf6d7f8",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/test/cmake_import_minver/project/CMakeLists.txt" : {
      "ObjectId" : "29056bdc54601f760f957e4b01a2a7acce448656",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "worker/deps/json/test/thirdparty/Fuzzer/CMakeLists.txt" : {
      "ObjectId" : "70bd017bae6b6b5773f3c3bc41621571e4f358b9",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable the coverage and sanitizer instrumentation for the fuzzer itself.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "worker/deps/json/test/thirdparty/Fuzzer/test/CMakeLists.txt" : {
      "ObjectId" : "c0457746a0e76137a4957c6053d9813d8543e09c",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build all these tests with -O0, otherwise optimizations may merge some\n\n# basic blocks and we'll fail to discover the targets.\n\n# We change the flags for every build type because we might be doing\n\n# a multi-configuration build (e.g. Xcode) where CMAKE_BUILD_TYPE doesn't\n\n# mean anything.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Use of XX here is to avoid a CMake warning due to CMP0054\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Enable the coverage instrumentation (it is disabled for the Fuzzer lib).\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add_libfuzzer_test(<name>\n\n#   SOURCES source0.cpp [source1.cpp ...]\n\n#   )\n\n#\n\n#   Declares a LibFuzzer test executable with target name LLVMFuzzer-<name>.\n\n#\n\n#   One or more source files to be compiled into the binary must be declared\n\n#   after the SOURCES keyword.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Place binary where llvm-lit expects to find it\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Variable to keep track of all test targets\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n\n# Basic tests\n\n###############################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LeakSanitizer is not supported on OSX right now\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "###############################################################################\n\n# Unit tests\n\n###############################################################################\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "###############################################################################\n\n# Additional tests\n\n###############################################################################\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add_subdirectory(uninstrumented)\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###############################################################################\n\n# Configure lit to run the tests\n\n#\n\n# Note this is done after declaring all tests so we can inform lit if any tests\n\n# need to be disabled.\n\n###############################################################################\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "worker/deps/json/test/thirdparty/Fuzzer/test/no-coverage/CMakeLists.txt" : {
      "ObjectId" : "d2f6f438ad79d85ecda0d8053231a509c4b97cb0",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests are not instrumented with coverage,\n\n# but have coverage rt in the binary.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# AFL Driver test\n\n###############################################################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Propagate value into parent directory\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "worker/deps/json/test/thirdparty/Fuzzer/test/ubsan/CMakeLists.txt" : {
      "ObjectId" : "7a9eacdbe7df36e933f92d14e43a6ce87cc12f7c",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests are instrumented with ubsan in non-recovery mode.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Propagate value into parent directory\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "worker/deps/json/test/thirdparty/Fuzzer/test/uninstrumented/CMakeLists.txt" : {
      "ObjectId" : "29b66e6e586a6c8a30551bb563a91cdf5b2920fa",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These tests are not instrumented with coverage and don't\n\n# have coverage rt in the binary.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Propagate value into parent directory\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "worker/deps/lcov/Makefile" : {
      "ObjectId" : "5eb4d9b7cc3c77708083cf8cd88633fe80062520",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for LCOV\n\n#\n\n# Make targets:\n\n#   - install:   install LCOV tools and man pages on the system\n\n#   - uninstall: remove tools and man pages from the system\n\n#   - dist:      create files required for distribution, i.e. the lcov.tar.gz\n\n#                and the lcov.rpm file. Just make sure to adjust the VERSION\n\n#                and RELEASE variables below - both version and date strings\n\n#                will be updated in all necessary files.\n\n#   - clean:     remove all generated files\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "worker/deps/lcov/example/Makefile" : {
      "ObjectId" : "2f698a1b32f3186a9e7d093742141b9a478f39f9",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile for the LCOV example program.\n\n#\n\n# Make targets:\n\n#   - example: compile the example program\n\n#   - output:  run test cases on example program and create HTML output\n\n#   - clean:   clean up directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Depending on the presence of the GD.pm perl module, we can use the\n\n# special option '--frames' for genhtml\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "worker/deps/lcov/test/Makefile" : {
      "ObjectId" : "ecb96042aab0bb2aa802cb9316323e2f384e7929",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "worker/deps/lcov/test/genhtml_output/Makefile" : {
      "ObjectId" : "0fbd88267074b651e8bb94146136e8ed162dce13",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "worker/deps/lcov/test/lcov_add_files/Makefile" : {
      "ObjectId" : "87937a155845f676e6352fe5c161c5f4cb0d31ae",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Add single zero coverage file - output should be same as input\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Add two zero coverage files - output should be same as input\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add single 100% coverage file - output should be same as input\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Add two 100% coverage file and reduce counts to 1/2 - output should\n\n# be same as input\n",
        "Line" : 24,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Add single coverage file with random coverage rate - output should\n\n# be same as input\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Add two coverage files that were split from target file - output\n\n# should be same as target file\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Add coverage file that consists of 4 concatenation of target files \n\n# and reduce counts to 1/4 - output should be the same as input\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "worker/deps/lcov/test/lcov_diff/Makefile" : {
      "ObjectId" : "d2d4dd6621bd5b0c1b858ce811450385625fa8b5",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "worker/deps/lcov/test/lcov_diff/new/Makefile" : {
      "ObjectId" : "51005c71dd74b21133d48f5c64ee1998e2473d67",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "worker/deps/lcov/test/lcov_diff/old/Makefile" : {
      "ObjectId" : "51005c71dd74b21133d48f5c64ee1998e2473d67",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "worker/deps/lcov/test/lcov_misc/Makefile" : {
      "ObjectId" : "d3bcc4ab28582cd7a34a0fdc1a54aceaecf08ca0",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "worker/deps/lcov/test/lcov_summary/Makefile" : {
      "ObjectId" : "f48d0bc7667d759e2cf04597095ad012626ff647",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Compare output of lcov --summary with generated counts\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Compare output of lcov --summary with generated counts\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Compare output of lcov --summary with generated counts\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Compare output of lcov --summary with generated counts\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Compare output of lcov --summary with generated counts\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Compare output of lcov --summary with generated counts for a\n\n# concatenated coverage data file\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Compare output of lcov --summary with generated counts for a\n\n# concatenated coverage data file (part1+part2=target)\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "worker/deps/libuv/CMakeLists.txt" : {
      "ObjectId" : "7b25511939e62e6e77f100ac68bfe1de37e18f89",
      "LastModified" : "2019-04-15T16:02:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: determine CMAKE_SYSTEM_NAME on OS/390.  Currently assumes \"OS/390\".\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Android has pthread as part of its c library, not as a separate\n\n# libpthread.so.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Now for some gibbering horrors from beyond the stars...\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "worker/deps/libuv/Makefile.am" : {
      "ObjectId" : "22069625e328c43bd52e101fb9b9a180023a9b53",
      "LastModified" : "2019-04-15T16:02:39Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013, Ben Noordhuis <info@bnoordhuis.nl>\n\n#\n\n# Permission to use, copy, modify, and/or distribute this software for any\n\n# purpose with or without fee is hereby granted, provided that the above\n\n# copyright notice and this permission notice appear in all copies.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Can't be turned into a CC_CHECK_CFLAGS in configure.ac, it makes compilers\n\n# on other platforms complain that the argument is unused during compilation.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# WINNT\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# WINNT\n",
        "Line" : 116,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# Can't be turned into a CC_CHECK_CFLAGS in configure.ac, it makes compilers\n\n# on other platforms complain that the argument is unused during compilation.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "worker/deps/openssl/config/Makefile" : {
      "ObjectId" : "5de96ab84d1dbca671790c4e9d2fb9ebe838d71c",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This Makefile is confirmed to be run only on Linux (CentOS and\n\n# Ubuntu). perl5 and gas(>=2.26) are needed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Supported architecture list\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# no-comp: against CRIME attack\n\n# no-shared: openssl-cli needs static link\n\n# no-afalgeng: old Linux kernel < 4.0 does not support it\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# disable platform check in Configure\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Header files generated with Configure\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure and generate openssl asm files for each archs\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Confgure asm_avx2 and generate upto avx2 support\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Confgure no-asm and generate no-asm sources\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Replace and copy arch dependent headers\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "worker/deps/openssl/openssl/demos/bio/Makefile" : {
      "ObjectId" : "5a4e4a4ae2c14a843aa9d381b7a8b0e386c2546e",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Quick instruction:\n\n# To build against an OpenSSL built in the source tree, do this:\n\n#\n\n#    make OPENSSL_INCS_LOCATION=-I../../include OPENSSL_LIBS_LOCATION=-L../..\n\n#\n\n# To run the demos when linked with a shared library (default):\n\n#\n\n#    LD_LIBRARY_PATH=../.. ./server-arg\n\n#    LD_LIBRARY_PATH=../.. ./server-cmod\n\n#    LD_LIBRARY_PATH=../.. ./server-conf\n\n#    LD_LIBRARY_PATH=../.. ./client-arg\n\n#    LD_LIBRARY_PATH=../.. ./client-conf\n\n#    LD_LIBRARY_PATH=../.. ./saccept\n\n#    LD_LIBRARY_PATH=../.. ./sconnect\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "worker/deps/openssl/openssl/demos/evp/Makefile" : {
      "ObjectId" : "c2e10a1ded0ed8dbd8d27ac6e82393ce80d349a4",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Quick instruction:\n\n# To build against an OpenSSL built in the source tree, do this:\n\n#\n\n#    make OPENSSL_INCS_LOCATION=-I../../include OPENSSL_LIBS_LOCATION=-L../..\n\n#\n\n# To run the demos when linked with a shared library (default):\n\n#\n\n#    LD_LIBRARY_PATH=../.. ./aesccm\n\n#    LD_LIBRARY_PATH=../.. ./aesgcm\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "worker/deps/openssl/openssl/util/indent.pro" : {
      "ObjectId" : "3d3f747bf88325223f1a4fefff3b7dbd6645efa1",
      "LastModified" : "2019-04-09T11:40:44Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 39,
    "QMAKE" : 1,
    "MAKEFILE" : 17,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 3185
}