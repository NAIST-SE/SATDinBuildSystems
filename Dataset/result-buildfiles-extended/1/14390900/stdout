{
  "Repository" : "14390900",
  "Revision" : "HEAD",
  "ObjectId" : "7e844f268bb131a9ecfefaa6264a238fbe4cbd34",
  "CommitTime" : "2019-04-10T08:52:32Z",
  "Files" : {
    "api/pom.xml" : {
      "ObjectId" : "b52e1d1b07e884fda534be3d232f0fb78960ea17",
      "LastModified" : "2015-01-16T12:19:27Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "ecm-core/pom.xml" : {
      "ObjectId" : "7148c0b890658d96eb030f0875fa339dd0088462",
      "LastModified" : "2015-06-29T11:36:00Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " <scope>provided</scope> ",
        "Line" : 30,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 1
    },
    "ecm-linux/pom.xml" : {
      "ObjectId" : "dd419cdeff95d4698454fa248f98ff8b41234567",
      "LastModified" : "2014-12-23T10:55:01Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/AP/pom.xml" : {
      "ObjectId" : "4297b6f8a3304a3e5953d54d31e01f11f0104cee",
      "LastModified" : "2015-06-29T11:36:00Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/AdcPub/pom.xml" : {
      "ObjectId" : "1f2f58a4bc5db50bd4efa38225b713851bcf8911",
      "LastModified" : "2015-06-29T11:36:00Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/AllPub/pom.xml" : {
      "ObjectId" : "7d5fa3038dbba54a31db11cce566df3c105e860f",
      "LastModified" : "2015-10-14T07:31:45Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/AllSCU/pom.xml" : {
      "ObjectId" : "fa9a292fc28f8b3be906d9220ba3fadc19576285",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/AllVCU/pom.xml" : {
      "ObjectId" : "3d1639545a252634efd5c619f9c120a39ea7a66d",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/AutoBrake/pom.xml" : {
      "ObjectId" : "17c08cb486b9a892008dba7b762cc1feae16d251",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/BWPub/pom.xml" : {
      "ObjectId" : "b9e163f57144ac4a0aad4c32d4facaa4d3dec351",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/BurningWheels/pom.xml" : {
      "ObjectId" : "2b8e8763cc5d0de3e1ee18f7dcfdadfcc87175f2",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/CL/pom.xml" : {
      "ObjectId" : "2dd56b6ea8895e52689c170cc35f7b029a099f18",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Circle/pom.xml" : {
      "ObjectId" : "893d84264f9e5cfa936745b4ff12aca49f4f9af0",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/CirclePos/pom.xml" : {
      "ObjectId" : "e50acb59a0c647b8fa4c33c386a9f6f672e70047",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Comm1/pom.xml" : {
      "ObjectId" : "db8d4a6e0785d698469694a363cf9cf10bc52e74",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Comm2/pom.xml" : {
      "ObjectId" : "7569f463bff7b5a0c9990eacdb397429669bee4c",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/DistPub/pom.xml" : {
      "ObjectId" : "28811ae263a437bf155b58f7ffc73fdfad420a00",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/FWPub/pom.xml" : {
      "ObjectId" : "3a0fa44d03968bf2e4b7fb615b77c5bdd749d841",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/IMUPub/pom.xml" : {
      "ObjectId" : "793668b775e4f06d1eb10158246ee0f12c6dfa94",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/LEDLighter/pom.xml" : {
      "ObjectId" : "e7c50998cd0d55fb77470a31ea9cd8be60b139c3",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/MotorSpeed/pom.xml" : {
      "ObjectId" : "e4e87e79600a461f8ed4b2593b24fe799fd4a482",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Platoon/pom.xml" : {
      "ObjectId" : "d37cb62695b4b7ab1549cf904a6f636d2b263d42",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/PluginCreationTest/pom.xml" : {
      "ObjectId" : "7b5e5cb0ddbb02d9cfec4a6bb14ba9cbf8a895e0",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/PluginCreationTest2/pom.xml" : {
      "ObjectId" : "bba647e7d9f964f315b48456f80659c27323a937",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/PluginCreationTest3/pom.xml" : {
      "ObjectId" : "36e97599d2acf91ec3ae69fb72b7a6b3f76652e7",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/PosPub/pom.xml" : {
      "ObjectId" : "81981f645e6942ecbff4d6b854702447ebb6d6b9",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Position/pom.xml" : {
      "ObjectId" : "6e652b2c9001acebfca16f24f0ee6822dc3553d3",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Recv1/pom.xml" : {
      "ObjectId" : "d852a64a2a34bea502e42735876acb666d5ac333",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Recv2/pom.xml" : {
      "ObjectId" : "8e915e6fd336ada8c1ae6995206a67c714fc49fa",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Run/pom.xml" : {
      "ObjectId" : "c8ffb40b8e21aa0e923f3fdd9fa1ea5ed0b9e487",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/SCUtoVCU/pom.xml" : {
      "ObjectId" : "4aa57be726129c8d6befce7dd0678e0c1dd3180f",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/SemiAutomaticReverseParking/pom.xml" : {
      "ObjectId" : "6dc6aa6079627ada3f59431987060febedfd3201",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/SimpleSquare/pom.xml" : {
      "ObjectId" : "47471e070eea5f633b0919a480eda90774344956",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Slow/pom.xml" : {
      "ObjectId" : "17700d7d8807aaec0741bfb146f3c3d637e14e8c",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/SpeedBrake/pom.xml" : {
      "ObjectId" : "34ade6ab9e74d0c0681842c7466f354e9e2a2a5d",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Square/pom.xml" : {
      "ObjectId" : "a55e6ea3bf6d3d2939a7eb36704e120a988dab7f",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/Star/pom.xml" : {
      "ObjectId" : "b2b1aa8630d3b0946e80823849af3d6bfe10d75f",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/StarAndGo/pom.xml" : {
      "ObjectId" : "cc6545976d5f0af46662c9c7d23855878620a20b",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/UltraSonicReader/pom.xml" : {
      "ObjectId" : "94ce3ac71e3ac8e386db3b01cca576a4dc912327",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/VCUfromSCU/pom.xml" : {
      "ObjectId" : "48557869eca723997f87f9386273d7cfd1f2c9a5",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/ZigZag/pom.xml" : {
      "ObjectId" : "031110b58c7d61927bdbdd46f7bcd37b795d5127",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/pom.xml" : {
      "ObjectId" : "f0f7ef4e45ff8cafe7c2685eeff928498c097cc0",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "plugins/template/pom.xml" : {
      "ObjectId" : "cc8080f272c466859348cce4a9a41e7d96fe17c6",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "server/pom.xml" : {
      "ObjectId" : "d4f48c7f48222062ffc5af1cc11fdafd0bca8067",
      "LastModified" : "2017-05-31T13:44:02Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "packaging>war</packaging",
        "Line" : 6,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<version>5.1.23</version>\n\t\t</dependency",
        "Line" : 57,
        "CharPositionInLine" : 18
      },
      "2" : {
        "Text" : " cxf ",
        "Line" : 59,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-api</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-common-utilities</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-core</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-frontend-jaxws</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-bindings-soap</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-bindings-xml</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-databinding-jaxb</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-frontend-simple</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-transports-local</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-xerces-xsd-validation</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.cxf</groupId>\n\t\t\t<artifactId>cxf-rt-ws-addr</artifactId>\n\t\t\t<version>${cxf.version}</version>\n\t\t</dependency",
        "Line" : 114,
        "CharPositionInLine" : 18
      },
      "4" : {
        "Text" : " mina ",
        "Line" : 116,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : " dependency>\n\t\t\t<groupId>org.apache.mina</groupId>\n\t\t\t<artifactId>mina-integration-beans</artifactId>\n\t\t\t<version>2.0.7</version>\n\t\t</dependency",
        "Line" : 126,
        "CharPositionInLine" : 18
      },
      "6" : {
        "Text" : " plugin>\n\t\t\t\t<groupId>org.apache.felix</groupId>\n\t\t\t\t<artifactId>maven-bundle-plugin</artifactId>\n\t\t\t\t<extensions>true</extensions>\n\t\t\t</plugin",
        "Line" : 152,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 7
    },
    "simulator/pom.xml" : {
      "ObjectId" : "1017b113df60e8b99f857a68a3ee18bb535c24db",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "squawk/builder/build.xml" : {
      "ObjectId" : "b71f7b33191f6a89691111c87861ab4d092b155a",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-builder-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/cldc-native-declarations/build.xml" : {
      "ObjectId" : "7fc9daf4c52c1f035835f1c9e866d2c42018dc90",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"cldc-native-declarations-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/cldc/build.xml" : {
      "ObjectId" : "c439cc36c75cc9da9ce485a2ae14b93239da2057",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "squawk/debugger-proxy/build.xml" : {
      "ObjectId" : "406a80b59277d9a3c55a26f02b84671f8df14912",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-debugger-proxy-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/debugger/build.xml" : {
      "ObjectId" : "e4546bdf32468bd2c52052ddabfeb9b264febd02",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-debugger-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/hosted-support/build.xml" : {
      "ObjectId" : "2df0f088ce54f22edc5a3ae2336ac153a8b07bc8",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-hosted-support-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/imp/build.xml" : {
      "ObjectId" : "ed758e7d19bcc6ab94d89ca2ba61071abfc88240",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be\n    used for execution of your tasks. These targets are usually executed\n    before and after some main targets. They are:\n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported\n    nbproject/build-impl.xml file.\n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are:\n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project\n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-imp-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on\n    the compile target as the regular run target does. Again, for a list of available\n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file.\n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/mapper/build.xml" : {
      "ObjectId" : "83d2636fdc6634f144a27343ccc38da2f3d031ff",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-mapper-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/phoneme/midp/src/ams/ams_api/Makefile" : {
      "ObjectId" : "ae453d388efcddce1ed5061d26c0ea0aef03bd88",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#   \n\n#\n\n# Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.\n\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n\n# \n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License version\n\n# 2 only, as published by the Free Software Foundation.\n\n# \n\n# This program is distributed in the hope that it will be useful, but\n\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\n# General Public License version 2 for more details (a copy is\n\n# included at /legal/license.txt).\n\n# \n\n# You should have received a copy of the GNU General Public License\n\n# version 2 along with this work; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n\n# 02110-1301 USA\n\n# \n\n# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa\n\n# Clara, CA 95054 or visit www.sun.com if you need additional\n\n# information or have any questions.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "squawk/phoneme/midp/src/core/javautil/Makefile" : {
      "ObjectId" : "ae453d388efcddce1ed5061d26c0ea0aef03bd88",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#   \n\n#\n\n# Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.\n\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n\n# \n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License version\n\n# 2 only, as published by the Free Software Foundation.\n\n# \n\n# This program is distributed in the hope that it will be useful, but\n\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\n# General Public License version 2 for more details (a copy is\n\n# included at /legal/license.txt).\n\n# \n\n# You should have received a copy of the GNU General Public License\n\n# version 2 along with this work; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n\n# 02110-1301 USA\n\n# \n\n# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa\n\n# Clara, CA 95054 or visit www.sun.com if you need additional\n\n# information or have any questions.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "squawk/phoneme/midp/src/rms/rms_api/Makefile" : {
      "ObjectId" : "ae453d388efcddce1ed5061d26c0ea0aef03bd88",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#   \n\n#\n\n# Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.\n\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n\n# \n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License version\n\n# 2 only, as published by the Free Software Foundation.\n\n# \n\n# This program is distributed in the hope that it will be useful, but\n\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\n# General Public License version 2 for more details (a copy is\n\n# included at /legal/license.txt).\n\n# \n\n# You should have received a copy of the GNU General Public License\n\n# version 2 along with this work; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n\n# 02110-1301 USA\n\n# \n\n# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa\n\n# Clara, CA 95054 or visit www.sun.com if you need additional\n\n# information or have any questions.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "squawk/phoneme/midp/src/rms/rms_exc/Makefile" : {
      "ObjectId" : "ae453d388efcddce1ed5061d26c0ea0aef03bd88",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#   \n\n#\n\n# Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.\n\n# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER\n\n# \n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License version\n\n# 2 only, as published by the Free Software Foundation.\n\n# \n\n# This program is distributed in the hope that it will be useful, but\n\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\n# General Public License version 2 for more details (a copy is\n\n# included at /legal/license.txt).\n\n# \n\n# You should have received a copy of the GNU General Public License\n\n# version 2 along with this work; if not, write to the Free Software\n\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n\n# 02110-1301 USA\n\n# \n\n# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa\n\n# Clara, CA 95054 or visit www.sun.com if you need additional\n\n# information or have any questions.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "squawk/romizer/build.xml" : {
      "ObjectId" : "355b253d6c47df5bfcb86964e0c77ec9fbe260eb",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-romizer-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/tests/Simple/build.xml" : {
      "ObjectId" : "c8264e9c64ec18c4ea0879a3092a2c195c644a56",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"/Users/dw29446/squawk/small-fixes-new/tests/Simple-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/tests/SmokeTest/build.xml" : {
      "ObjectId" : "138f22d69680f3277fab9e06c45105120e92cda0",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"SmokeTest-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/tests/StaticsTest/build.xml" : {
      "ObjectId" : "edbe9d9e275535948bd534fff323adeb52f56f37",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n                Sun Public License Notice\n\nThe contents of this file are subject to the Sun Public License\nVersion 1.0 (the \"License\"). You may not use this file except in\ncompliance with the License. A copy of the License is available at\nhttp://www.sun.com/\n\nThe Original Code is NetBeans. The Initial Developer of the Original\nCode is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun\nMicrosystems, Inc. All Rights Reserved.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 17,
        "CharPositionInLine" : 71
      },
      "2" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 18,
        "CharPositionInLine" : 54
      },
      "3" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun Spot properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    The important targets that are defined within the master build file are:\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      compile-single:        (used by IDEs) compiles all files in ${javac.includes}\n      test:                  run the java classes on the emulator software\n      suite:                 builds a suite suitable for deployment\n      deploy:                deploy the application to a spot\n      debug-deploy:          deploy the debug version of your application\n      run:                   connect to a device and watch the application\n      debug:                 connect to a device and debug the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "squawk/tests/TestBlocking/build.xml" : {
      "ObjectId" : "d14a4990b38c6bb3845a28d6b88e6468ee9431b6",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "squawk/tests/TestEcho/build.xml" : {
      "ObjectId" : "93b4120c0a8f0d9f83c230a3cdc242ce4d0285e8",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "squawk/tests/TestFiles/build.xml" : {
      "ObjectId" : "0e448f92bf3a02bcbe503edcbad5030f81c95352",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"TestFiles-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/tests/TestRobot/build.xml" : {
      "ObjectId" : "a3a124d92b32927631bde491148e1cfc3e259c56",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 3,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 4,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "\n    \n    The master build file lives at: ${sunspot.home}/build.xml.\n\n    If you do not have a Sun SPOT properties file for some reason,\n    then you can set the sunspot.home property manually.\n\n        <property name=\"sunspot.home\" value=\"/opt/sunspot\"/>\n\n    The behavior of the build is also controled through properties.\n    For example, to use a different source directory, you can set\n    the property 'src.dir'.\n\n        <property name=\"src.dir\" value=\"mysrc\"/>\n\n    For a complete listing of properties that are used, and their\n    explanations, see the file ${sunspot.home}/default.properties.\n\n    ",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n\n    This file imports the master build file for compiling and deploying sunspot\n    applications.  This file provides hooks for the user build file, so that\n    you can accomplish almost anything without having to rewrite any of the\n    build procedures.  However, if need be, you can just look at the imported\n    build file to determine how exactly any step is accomplished.\n\n    Of course, another useful way to find out exactly what is happening is to\n    run the targets listed below with ant's 'verbose' flag (ant -v).  This will\n    display exactly what is happening at each step.\n\n    Some important targets that are defined within the master build file are:\n    (Do \"ant help\" to see the full list.)\n\n      init:                  initialize and check all properties\n      help:                  display useful a help message\n      environment            displays information about setting up your environment\n      sdk-info               displays information about the current SDK installation\n      find-spots             locate USB ports where SPOTs are connected\n      info                   displays information about the configuration of a SPOT\n      slots                  displays a list of the applications deployed on the SPOT\n\n      clean:                 delete all compiled/generated files\n      compile:               compiles java source files to classes\n      jar-app                Create a jar for this application\n      deploy                 deploy the application to a SPOT as an IMlet\n      jar-deploy             deploy an IMlet jar\n      run                    connect to a device and watch the application\n      debug-run              configure the SPOT ro run the debug agent and then start the debug proxy\n      debug-proxy-run        start the proxy for the high-level debugger\n\n    Some useful command line properties:\n              \t\n      -Dbasestation.addr=1234   set the address of the basestation\n      -DremoteId=1234           set the target for remote run/deploy/debug-proxy-run\n      -Dsquawk.startup.class=com.example.MyStartUp\n                                set an alternative startup class name\n      -Dspotport=COM2           set the port name for communicating with the SPOT\n      -Djar.file=example.jar    set the jar file for jar-app, jar-deploy and make-host-jar\n      -Dmidlet=2                select a midlet to run for selectapplication\n                                or deploy targets (defaults to 1)\n      -Dutility.jars=utils.jar  a classpath separator delimited list of jars to be \n              \t                included with the application\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are defined as follows:\n\n        For each target above (except help),\n\n        -pre-<target>:  called before the target\n        -post-<target>: called after the target\n\n    For example, inserting an echo statement after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <echo>Compile finished!</echo>\n        </target>    \n\n    For more information on using ant, see http://ant.apache.org.\n\n    ",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "\n    Below is an example target to create Javadoc for your project.\n\n    Note: you must manually edit the packagenames argument with\n          the packages that you wish to create Javadoc for.\n    ",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "squawk/tests/TestSockets/build.xml" : {
      "ObjectId" : "34bad08c28c0af9038cfcb1f3676bc18c5aebf87",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"TestSockets-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/tests/ThreadTest-DE/build.xml" : {
      "ObjectId" : "6e008a7bc262e4492dff284be7577a594dbd8ff6",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"ThreadTest-DE-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/tests/TimeIt/build.xml" : {
      "ObjectId" : "c9b73bdb36b7a259980a3b0f3913d29df1a54820",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"TimeIt-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/translator/build.xml" : {
      "ObjectId" : "65332de98b34a3a63b21bd77908abe77b56b3ca6",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-translator-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/vm2c/build.xml" : {
      "ObjectId" : "13d2b77bf5bea10de844b00d8ce99296cf3f1f23",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"Squawk-vm2c-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "squawk/vmcore/src/rts/cortex-m3/src/MbedTest/Makefile" : {
      "ObjectId" : "3395e99d2dfea458dcd55a40392faa3a4a029062",
      "LastModified" : "2016-06-29T12:22:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#  Project Name\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  List of the objects files to be compiled/assembled\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#LISTING = -ahls\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  Compiler Options\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#GCFLAGS += -Wcast-align -Wcast-qual -Wimplicit -Wpointer-arith -Wswitch\n\n#GCFLAGS += -Wredundant-decls -Wreturn-type -Wshadow -Wunused\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  Compiler/Assembler/Linker Paths\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#########################################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#########################################################################\n\n#  Default rules to compile .c and .cpp file to .o\n\n#  and assemble .s files to .o\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#########################################################################",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9,
      "Errorlog" : "line 17:17 token recognition error at: '\\C'\nline 17:30 token recognition error at: '\\S'\nline 17:46 token recognition error at: '\\a'\nline 17:60 token recognition error at: '\\l'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 5,
    "ANT" : 21,
    "MAVEN" : 45
  },
  "ElapsedTime" : 4044
}