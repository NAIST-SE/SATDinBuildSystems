{
  "Repository" : "19211822",
  "Revision" : "HEAD",
  "ObjectId" : "d7cf416d36555df09dc1b3947c59a5159cd4f504",
  "CommitTime" : "2019-04-11T01:33:56Z",
  "Files" : {
    "c_c++/cpp_examples/CMakeLists.txt" : {
      "ObjectId" : "c9f6a15ef4f8c0a7daeea3204cf7374f2def4271",
      "LastModified" : "2017-10-16T08:31:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_compile_options(-std=c++11)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_INSTALL_PREFIX /usr/local)\n\n#install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_PREFIX}/include)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "c_c++/cpp_examples/cpp_io/CMakeLists.txt" : {
      "ObjectId" : "692b35df735779070828945576ac0ac0eaade809",
      "LastModified" : "2017-10-16T08:31:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/cpp_examples/demo/CMakeLists.txt" : {
      "ObjectId" : "c4ebf1a9e4d1591b59690f055a0a3025772100e4",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/cpp_examples/io/CMakeLists.txt" : {
      "ObjectId" : "1e01f53717c7cb54f8eac3d3ae8b1090140ff5e6",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/cpp_examples/lua/CMakeLists.txt" : {
      "ObjectId" : "4fe93d1a1fbfc2d93d1ad203f8a73ca7f45a240f",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/cpp_examples/lua/src/CMakeLists.txt" : {
      "ObjectId" : "baa67d0822caab47e3f327dcae2b4ef8f868ae16",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/cpp_examples/md5/CMakeLists.txt" : {
      "ObjectId" : "f56734b11d646a150613e40e9b9314e5c6514b2f",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/cpp_examples/pcre/CMakeLists.txt" : {
      "ObjectId" : "48ba986ac05d5ed99dd7066ca281a19c61e36c96",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/demo-boost/CMakeLists.txt" : {
      "ObjectId" : "33eef4139b3b20ddeb940ae5c0a2ca26a0e54e4a",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/demo_json/CMakeLists.txt" : {
      "ObjectId" : "951302b5ea7bfe38eeec913756c7370b972fae48",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_compile_options(-std=c++11)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "c_c++/demo_json/src/CMakeLists.txt" : {
      "ObjectId" : "2c9ca280d450a1500e5a49d4244ae486db8cc65e",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(../include /usr/include /usr/local/include)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(DEMO_JSON_SRC_LIST cJSON.c test.c ../include/cJSON.h hello.cpp)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#link_directories(/usr/lib64/)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "c_c++/demo_pcap/CMakeLists.txt" : {
      "ObjectId" : "eea6defa0ca233ce0e509818cdd72b260eae27a1",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "c_c++/demo_pcap/src/CMakeLists.txt" : {
      "ObjectId" : "d8e980773c0b86dce59f592dbe34033aa0f933fe",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(CMAKE_C_COMPILER /usr/bin/clang)\n\n#SET(CMAKE_MODULE_PATH /usr/local/lyf/demo_pcap)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_package(PCAP)\n\n#if(PCAP_FOUND)\n\n#include_directories(${PCAP_INCLUDE_DIR})\n\n#target_link_libraries(demo_pcap_main ${PCAP_LIBRARY})\n\n#else(PCAP_FOUND)\n\n#message(FATAL_ERROR \"PCAP not found!\")\n\n#endif(PCAP_FOUND)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "c_c++/tdns-client-proxy/Makefile" : {
      "ObjectId" : "d56d469a8a7723547b82dce643f49bbf0b8a8c7a",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright (C) 2015 by the University of Southern California\n\n# $Id: Makefile 24652 2015-11-12 17:56:41Z liangzhu $\n\n#\n\n# This program is free software; you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License,\n\n# version 2, as published by the Free Software Foundation.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License along\n\n# with this program; if not, write to the Free Software Foundation, Inc.,\n\n# 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.  \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#%.o: %.c\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "java/demo-ninja/pom.xml" : {
      "ObjectId" : "2d796a23dff8f18b0501f39dc15d59717a3740c3",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " If you want to deploy to a war please ",
        "Line" : 7,
        "CharPositionInLine" : 51
      },
      "1" : {
        "Text" : " replace \"jar\" with \"war\" and ",
        "Line" : 8,
        "CharPositionInLine" : 42
      },
      "2" : {
        "Text" : " comment ninja-standalone dependency and  ",
        "Line" : 9,
        "CharPositionInLine" : 54
      },
      "3" : {
        "Text" : " uncomment the dependency for ninja-servlet ",
        "Line" : 10,
        "CharPositionInLine" : 56
      },
      "4" : {
        "Text" : " Allows you to run Ninja via the SuperDevMode. ",
        "Line" : 86,
        "CharPositionInLine" : 67
      },
      "5" : {
        "Text" : " run \"mvn ninja:run\" on the command line for the best ",
        "Line" : 87,
        "CharPositionInLine" : 74
      },
      "6" : {
        "Text" : " development experience. ",
        "Line" : 88,
        "CharPositionInLine" : 45
      },
      "7" : {
        "Text" : " If you want to deploy to a war please ",
        "Line" : 173,
        "CharPositionInLine" : 55
      },
      "8" : {
        "Text" : " comment ninja-standalone dependency and  ",
        "Line" : 174,
        "CharPositionInLine" : 58
      },
      "9" : {
        "Text" : " uncomment the dependency for ninja-servlet ",
        "Line" : 175,
        "CharPositionInLine" : 60
      },
      "10" : {
        "Text" : "\n        <dependency>\n            <groupId>org.ninjaframework</groupId>\n            <artifactId>ninja-servlet</artifactId>\n            <version>${ninja.version}</version>\n        </dependency>\n        ",
        "Line" : 182,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 11
    },
    "java/demo-vaadin/pom.xml" : {
      "ObjectId" : "8814a1a9a00bd848a90fdc9c3b37c1a80117cb9b",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " If there are no local customisations, this can also be \"fetch\" or \"cdn\" ",
        "Line" : 23,
        "CharPositionInLine" : 83
      },
      "1" : {
        "Text" : " Exclude an unnecessary file generated by the GWT compiler. ",
        "Line" : 79,
        "CharPositionInLine" : 73
      },
      "2" : {
        "Text" : " Comment out compile-theme goal to use on-the-fly theme compilation ",
        "Line" : 93,
        "CharPositionInLine" : 83
      },
      "3" : {
        "Text" : " Clean up also any pre-compiled themes ",
        "Line" : 103,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : " The Jetty plugin allows us to easily test the development build by\n\t\t\t\trunning jetty:run on the command line. ",
        "Line" : 118,
        "CharPositionInLine" : 47
      },
      "5" : {
        "Text" : " Vaadin pre-release repositories ",
        "Line" : 132,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 6
    },
    "java/foge-demo/pom.xml" : {
      "ObjectId" : "a6318e40556d144b710d688623d7696b702a07af",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/thrift-demo/pom.xml" : {
      "ObjectId" : "93e100c33280d90f462dcf3e116a1f845b210663",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " library version ",
        "Line" : 15,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 1
    },
    "java/vert.x-demo/build.xml" : {
      "ObjectId" : "f99c1fde86ee0c2cb8d49f647795ddd821f4a682",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"vert.x-demo-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "java/word-count-beam/pom.xml" : {
      "ObjectId" : "eaba62699a1a501295d323948be1addfff9dd117",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n    Licensed to the Apache Software Foundation (ASF) under one or more\n    contributor license agreements.  See the NOTICE file distributed with\n    this work for additional information regarding copyright ownership.\n    The ASF licenses this file to You under the Apache License, Version 2.0\n    (the \"License\"); you may not use this file except in compliance with\n    the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " Ensure that the Maven jar plugin runs before the Maven\n        shade plugin by listing the plugin higher within the file. ",
        "Line" : 96,
        "CharPositionInLine" : 71
      },
      "2" : {
        "Text" : "\n        Configures `mvn package` to produce a bundled jar (\"fat jar\") for runners\n        that require this for job submission to a cluster.\n      ",
        "Line" : 106,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : " Makes the DirectRunner available when running a pipeline. ",
        "Line" : 159,
        "CharPositionInLine" : 73
      },
      "4" : {
        "Text" : " Makes the ApexRunner available when running a pipeline. ",
        "Line" : 172,
        "CharPositionInLine" : 71
      },
      "5" : {
        "Text" : "\n          Apex depends on httpclient version 4.3.6, project has a transitive dependency to httpclient 4.0.1 from\n          google-http-client. Apex dependency version being specified explicitly so that it gets picked up. This\n          can be removed when the project no longer has a dependency on a different httpclient version.\n        ",
        "Line" : 184,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "\n          Apex 3.6 is built against YARN 2.6. Version in the fat jar has to match\n          what's on the cluster, hence we need to repeat the Apex Hadoop dependencies here.\n        ",
        "Line" : 200,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : " Makes the DataflowRunner available when running a pipeline. ",
        "Line" : 218,
        "CharPositionInLine" : 75
      },
      "8" : {
        "Text" : " Makes the FlinkRunner available when running a pipeline. ",
        "Line" : 231,
        "CharPositionInLine" : 72
      },
      "9" : {
        "Text" : " Makes the SparkRunner available when running a pipeline. Additionally,\n           overrides some Spark dependencies to Beam-compatible versions. ",
        "Line" : 245,
        "CharPositionInLine" : 78
      },
      "10" : {
        "Text" : " [BEAM-3519] GCP IO exposes netty on its API surface, causing conflicts with runners ",
        "Line" : 280,
        "CharPositionInLine" : 101
      },
      "11" : {
        "Text" : " Adds a dependency on the Beam SDK. ",
        "Line" : 312,
        "CharPositionInLine" : 48
      },
      "12" : {
        "Text" : " Adds a dependency on the Beam Google Cloud Platform IO module. ",
        "Line" : 319,
        "CharPositionInLine" : 76
      },
      "13" : {
        "Text" : " Dependencies below this line are specific dependencies needed by the examples code. ",
        "Line" : 326,
        "CharPositionInLine" : 97
      },
      "14" : {
        "Text" : " Exclude an old version of guava that is being pulled\n             in by a transitive dependency of google-api-client ",
        "Line" : 333,
        "CharPositionInLine" : 68
      },
      "15" : {
        "Text" : " Exclude an old version of guava that is being pulled\n             in by a transitive dependency of google-api-client ",
        "Line" : 347,
        "CharPositionInLine" : 68
      },
      "16" : {
        "Text" : " Exclude an old version of guava that is being pulled\n             in by a transitive dependency of google-api-client ",
        "Line" : 361,
        "CharPositionInLine" : 68
      },
      "17" : {
        "Text" : " Exclude an old version of guava that is being pulled\n             in by a transitive dependency of google-api-client ",
        "Line" : 375,
        "CharPositionInLine" : 68
      },
      "18" : {
        "Text" : " Add slf4j API frontend binding with JUL backend ",
        "Line" : 395,
        "CharPositionInLine" : 61
      },
      "19" : {
        "Text" : " When loaded at runtime this will wire up slf4j to the JUL backend ",
        "Line" : 406,
        "CharPositionInLine" : 81
      },
      "20" : {
        "Text" : " Hamcrest and JUnit are required dependencies of PAssert,\n         which is used in the main code of DebuggingWordCount example. ",
        "Line" : 411,
        "CharPositionInLine" : 75
      },
      "21" : {
        "Text" : " The DirectRunner is needed for unit tests. ",
        "Line" : 430,
        "CharPositionInLine" : 56
      },
      "CommentCount" : 22
    },
    "web/sea/static/hello/Makefile" : {
      "ObjectId" : "9cc04eb4208e9f2a14f66d3ce24ccfa98784da8b",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "web/sea/static/lucky/Makefile" : {
      "ObjectId" : "8966b7b61c4036d5a3e2c87f4f6c71cdfda57031",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "web/sea/static/ng-todo/Makefile" : {
      "ObjectId" : "e111b414857b7179b22dedb0151742502bb963f6",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "web/sea/static/todo/Makefile" : {
      "ObjectId" : "834257e0f82e741ab68bac5151f19d10d0b0494e",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "web/webpackii/pom.xml" : {
      "ObjectId" : "a0aaf121459051a5618fdf12312431fe4cfde731",
      "LastModified" : "2019-02-27T05:46:14Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "MAKEFILE" : 5,
    "ANT" : 1,
    "MAVEN" : 6
  },
  "ElapsedTime" : 3376
}