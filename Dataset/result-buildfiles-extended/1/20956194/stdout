{
  "Repository" : "20956194",
  "Revision" : "HEAD",
  "ObjectId" : "070ca10a7a0d0c2721f987cd3a121b6862d61e2a",
  "CommitTime" : "2019-04-15T10:28:13Z",
  "Files" : {
    "bk/bk_protsim/Makefile" : {
      "ObjectId" : "05de621e858db82f833158636204309122e2dfa5",
      "LastModified" : "2015-04-13T10:49:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  There exist several targets which are by default empty and which can be \n\n#  used for execution of your targets. These targets are usually executed \n\n#  before and after some main targets. They are: \n\n#\n\n#     .build-pre:              called before 'build' target\n\n#     .build-post:             called after 'build' target\n\n#     .clean-pre:              called before 'clean' target\n\n#     .clean-post:             called after 'clean' target\n\n#     .clobber-pre:            called before 'clobber' target\n\n#     .clobber-post:           called after 'clobber' target\n\n#     .all-pre:                called before 'all' target\n\n#     .all-post:               called after 'all' target\n\n#     .help-pre:               called before 'help' target\n\n#     .help-post:              called after 'help' target\n\n#\n\n#  Targets beginning with '.' are not intended to be called on their own.\n\n#\n\n#  Main targets can be executed directly, and they are:\n\n#  \n\n#     build                    build a specific configuration\n\n#     clean                    remove built files from a configuration\n\n#     clobber                  remove all built files\n\n#     all                      build all configurations\n\n#     help                     print help mesage\n\n#  \n\n#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and\n\n#  .help-impl are implemented in nbproject/makefile-impl.mk.\n\n#\n\n#  Available make variables:\n\n#\n\n#     CND_BASEDIR                base directory for relative paths\n\n#     CND_DISTDIR                default top distribution directory (build artifacts)\n\n#     CND_BUILDDIR               default top build directory (object files, ...)\n\n#     CONF                       name of current configuration\n\n#     CND_PLATFORM_${CONF}       platform name (current configuration)\n\n#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)\n\n#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)\n\n#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)\n\n#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)\n\n#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)\n\n#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)\n\n#\n\n# NOCDDL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Environment \n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add your pre 'build' code here...\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add your post 'build' code here...\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# clean\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add your pre 'clean' code here...\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add your post 'clean' code here...\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clobber\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add your pre 'clobber' code here...\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add your post 'clobber' code here...\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# all\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add your pre 'all' code here...\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add your post 'all' code here...\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# build tests\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add your pre 'build-tests' code here...\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add your post 'build-tests' code here...\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# run tests\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add your pre 'test' code here...\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add your post 'test' code here...\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# help\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add your pre 'help' code here...\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Add your post 'help' code here...\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# include project implementation makefile\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# include project make variables\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "graphletAnalyser/Makefile" : {
      "ObjectId" : "ec9de690e53a4d149efe22428359088b44605367",
      "LastModified" : "2015-06-09T11:48:59Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#  There exist several targets which are by default empty and which can be \n\n#  used for execution of your targets. These targets are usually executed \n\n#  before and after some main targets. They are: \n\n#\n\n#     .build-pre:              called before 'build' target\n\n#     .build-post:             called after 'build' target\n\n#     .clean-pre:              called before 'clean' target\n\n#     .clean-post:             called after 'clean' target\n\n#     .clobber-pre:            called before 'clobber' target\n\n#     .clobber-post:           called after 'clobber' target\n\n#     .all-pre:                called before 'all' target\n\n#     .all-post:               called after 'all' target\n\n#     .help-pre:               called before 'help' target\n\n#     .help-post:              called after 'help' target\n\n#\n\n#  Targets beginning with '.' are not intended to be called on their own.\n\n#\n\n#  Main targets can be executed directly, and they are:\n\n#  \n\n#     build                    build a specific configuration\n\n#     clean                    remove built files from a configuration\n\n#     clobber                  remove all built files\n\n#     all                      build all configurations\n\n#     help                     print help mesage\n\n#  \n\n#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and\n\n#  .help-impl are implemented in nbproject/makefile-impl.mk.\n\n#\n\n#  Available make variables:\n\n#\n\n#     CND_BASEDIR                base directory for relative paths\n\n#     CND_DISTDIR                default top distribution directory (build artifacts)\n\n#     CND_BUILDDIR               default top build directory (object files, ...)\n\n#     CONF                       name of current configuration\n\n#     CND_PLATFORM_${CONF}       platform name (current configuration)\n\n#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)\n\n#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)\n\n#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)\n\n#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)\n\n#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)\n\n#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)\n\n#\n\n# NOCDDL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Environment \n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add your pre 'build' code here...\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add your post 'build' code here...\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# clean\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add your pre 'clean' code here...\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add your post 'clean' code here...\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clobber\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add your pre 'clobber' code here...\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add your post 'clobber' code here...\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# all\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add your pre 'all' code here...\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Add your post 'all' code here...\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# build tests\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add your pre 'build-tests' code here...\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add your post 'build-tests' code here...\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# run tests\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add your pre 'test' code here...\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add your post 'test' code here...\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# help\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Add your pre 'help' code here...\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Add your post 'help' code here...\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# include project implementation makefile\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# include project make variables\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "plcc/build.xml" : {
      "ObjectId" : "1c64d4c580aaf6ae3b2506d7c728c1a75e77221e",
      "LastModified" : "2016-04-18T08:33:09Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : " Continuous Integration target added by TS for Jenkins. Builds and runs the tests. ",
        "Line" : 14,
        "CharPositionInLine" : 95
      },
      "9" : {
        "Text" : " This target packages all library JAR files into the plcc.jar JAR file. ",
        "Line" : 18,
        "CharPositionInLine" : 81
      },
      "10" : {
        "Text" : " Change the value of this property to be the name of your JAR,\n             minus the .jar extension. It should not have spaces.\n             <property name=\"store.jar.name\" value=\"MyJarName\"/>\n        ",
        "Line" : 24,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : " don't edit below this line ",
        "Line" : 28,
        "CharPositionInLine" : 44
      },
      "12" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"plcc-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 13
    },
    "splitpdb/build.xml" : {
      "ObjectId" : "71874331c95bb1b35cff47a57338e7db040f930b",
      "LastModified" : "2015-06-09T11:48:59Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"splitpdb-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "vpg/build.xml" : {
      "ObjectId" : "110f617fd43f384195c79d9fa45fb4e526dd398f",
      "LastModified" : "2015-06-09T11:48:59Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"vpg-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2,
    "ANT" : 3
  },
  "ElapsedTime" : 4825
}