{
  "Repository" : "28897",
  "Revision" : "HEAD",
  "ObjectId" : "dbbd6376393a2e28ff166029599101f5c7b141cb",
  "CommitTime" : "2017-01-27T16:41:05Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "eae2b887499081dc0d6a94aa8f3e62d87aaf7a7a",
      "LastModified" : "2017-01-27T15:23:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#################\n\n# Build options #\n\n#################\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############\n\n# Platform #\n\n############\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################\n\n# Bitness (word size) #\n\n#######################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############\n\n# Build Flags #\n\n###############\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We don't care about intdir, binary output path is set above\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Compiler flags common to C/C++ on all Unix platforms\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Clang-specific flags\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# GCC-specific flags\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Linux-specific GCC flags\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Mac-specific compiler flags\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Homebrew places installed libraries in /usr/local, but no major\n\n# Linux distro does that anymore (last time I checked...)\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# CMake multi-line strings are a pain to work with, so it's much easier to\n\n# define lists and then construct strings from them.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set compiler flags from shared & platform-specific lists\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "##################\n\n# Subdirectories #\n\n##################\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The vendor subdirectory must be defined first, since it sets some variables\n\n# that are referenced by CMake scripts in the other directories\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#############\n\n# Packaging #\n\n#############\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#################\n\n# Build summary #\n\n#################\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/BuildPackage.cmake" : {
      "ObjectId" : "5627d66589ada62ba5843c8365bd03fbe1455612",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ninja doesn't use configuration-specific subdirectories\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Older versions of CMake lack the --format=zip argument to tar, so create a zipfile\n\n# with the external command-line tool\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/ConfigureTarget.cmake" : {
      "ObjectId" : "1227811b9588cf1f30c3a94281f7f9f492079f72",
      "LastModified" : "2017-01-27T15:23:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure a target to set the correct properties for 32/64-bit builds\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "main/CMakeLists.txt" : {
      "ObjectId" : "9e5407d120b4c42b7750f9e38127e7e5b499ec65",
      "LastModified" : "2016-10-31T08:22:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "4341f7ae134875cf718592de9c71e8686673c4cf",
      "LastModified" : "2016-10-31T08:22:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########\n\n# Sources #\n\n###########\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Platform-specific sources\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#################\n\n# Source Groups #\n\n#################\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################\n\n# Build Configuration #\n\n#######################\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########\n\n# Target #\n\n##########\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "a2de8ce9f5c6dedd90584fa6d9d7ac171e17eb1d",
      "LastModified" : "2016-10-31T08:22:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########\n\n# Sources #\n\n###########\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################\n\n# Source Groups #\n\n#################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########\n\n# Target #\n\n##########\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The main executable must be built to run the integration tests\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "vendor/CMakeLists.txt" : {
      "ObjectId" : "dee89df1eb671e9f1c6dfd877336ac73bf85cd82",
      "LastModified" : "2016-12-21T08:48:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################\n\n# Updating Libraries #\n\n######################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some of the third-party libraries under the vendor directory are built with\n\n# autoconf (ie, ./configure scripts), which can be a bit tricky to integrate\n\n# with CMake, even with the ExternalProject module (and not to mention on\n\n# Windows, where mixing autoconf and VS builds is a nightmare).\n\n#\n\n# So instead, these libraries are built with CMake, which adds a bit of\n\n# maintainence to update but makes the build process much easier. The\n\n# procedure of updating to a newer version of a library goes like:\n\n#\n\n# 1. Update from upstream in teragonaudio's git fork/mirror of the repo\n\n# 2. Bump submodule in project\n\n# 3. Refresh file list below\n\n# 4. Comment out any ignored files\n\n# 5. Re-run ./configure\n\n# 6. Copy the generated config.h file to the platform-specific directory\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############\n\n# Audiofile #\n\n#############\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configured with:\n\n#\n\n#   ./configure --enable-flac --enable-static --disable-docs\n\n#\n\n# Also, the generated config.h file should be edited such that the definition\n\n# of ENABLE_FLAC is not hardcoded to 0/1, but rather to USE_FLAC (the value\n\n# set by our CMakeLists).\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ${audiofile_SRC_DIR}/modules/UT_RebufferModule.cpp (Ignored)\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "########\n\n# FLAC #\n\n########\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Configured for Linux with:\n\n#\n\n#   ./configure --disable-ogg --enable-static\n\n#\n\n# Configured for Mac with:\n\n#\n\n#   ./configure --disable-ogg --enable-static --disable-asm-optimizations\n\n#\n\n# TODO: Will a newer version of FLAC fix this?\n\n# See https://github.com/Homebrew/homebrew/issues/34589\n\n#\n\n# Windows shares the same config.h as Linux, but should be manually merged since\n\n# some special flags have been added there.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ${flac_SRC_DIR}/libFLAC/ogg_decoder_aspect.c (Ignored)\n\n# ${flac_SRC_DIR}/libFLAC/ogg_encoder_aspect.c (Ignored)\n\n# ${flac_SRC_DIR}/libFLAC/ogg_helper.c (Ignored)\n\n# ${flac_SRC_DIR}/libFLAC/ogg_mapping.c (Ignored)\n",
        "Line" : 282,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "###########\n\n# VST SDK #\n\n###########\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Due to licensing restrictions, the VST SDK source code can't be redistributed\n\n# in this project. However, we can download the zipfile from the web and extract\n\n# it to the build products directory.\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    }
  },
  "FileTypes" : {
    "CMAKE" : 7
  },
  "ElapsedTime" : 903
}