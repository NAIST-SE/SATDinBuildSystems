{
  "Repository" : "1881",
  "Revision" : "HEAD",
  "ObjectId" : "4043f71156a7149f8d4bafe15d3ac73c440fae7b",
  "CommitTime" : "2019-02-20T19:26:23Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "abb18a80093d9b8538b2c4c914367f2401acd01c",
      "LastModified" : "2019-02-19T09:16:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake's built-in Android support requires 3.7.0\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define a macro that helps defining an option\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# these options have to be set before CMake detects/configures the toolchain\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# determine whether to create a debug or release build\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Suppress Cygwin legacy warning\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Suppress Mac OS X RPATH warnings and adopt new related behaviors\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add some default value for some additional macOS variable\n\n# note that those variables are ignored on other systems\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# query the path to the default SDK, will fail on non-macOS, but it's okay.\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# project name\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# include the configuration file\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# setup version numbers\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# add an option for choosing the build type (shared or static)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add an option for building the examples\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add options to select which modules to build\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# add an option for building the API documentation\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# add an option for choosing the OpenGL implementation\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add an option for building the test suite\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# macOS specific options\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# add an option to build frameworks instead of dylibs (release only)\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# add an option to let the user specify a custom directory for external frameworks installation\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# add an option to automatically install Xcode templates\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# add an option to let the user specify a custom directory for external libraries installation\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# iOS specific options\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# At the moment the minimal deployement target version is 10.2 only because the externals for iOS were built with that requirement.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Android options\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# make sure there's the android library available\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# CMake doesn't support defining the STL to be used with Nsight Tegra, so warn the user\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# install everything in $NDK/sources/ because this path is appended by the NDK (convenient)\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# we install libs in a subdirectory named after the ABI (lib/mips/*.so)\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# pass shared STL configuration (if any)\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#    if(NOT CMAKE_ANDROID_STL_TYPE MATCHES \"c\\\\+\\\\+_shared\")\n\n#        message(\"Android: Using ${CMAKE_ANDROID_STL_TYPE} as STL. Set CMAKE_ANDROID_STL_TYPE to c++_shared, if there are any issues.\")\n\n#    endif()\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "#    message(WARNING \"Android: You're using a static STL (${CMAKE_ANDROID_STL_TYPE}). Set CMAKE_ANDROID_STL_TYPE to c++_shared, if there are any issues.\")\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# let the user switch ABIs\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# this is a workaround to compile sfml-activity without the stl library as a dependency\n\n# we save the original compilation command line to restore it later in Macro.cmake\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Install directories\n\n# For miscellaneous files\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# add an option to let the user specify a custom directory for doc, examples, licence, readme and other miscellaneous files\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# force building sfml-window, if sfml-graphics module is built\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# allow not using bundled dependencies with a switch\n\n# (except for stb_image)\n\n# yes this is horrible, but GLOB_RECURSE sucks\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Visual C++: remove warnings regarding SL security and algorithms on pointers\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# add an option to choose whether PDB debug symbols should be generated (defaults to true when possible)\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# define SFML_OPENGL_ES if needed\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# define an option for choosing between static and dynamic C runtime (Windows only)\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# the following combination of flags is not valid\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# for VC++, we can apply it globally by modifying the compiler flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# setup Mac OS X stuff\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# SFML_BUILD_FRAMEWORKS needs two things:\n\n# first, it's available only for release\n\n#    (because cmake currently doesn't allow specifying a custom framework name so XXX-d is not possible)\n\n# secondly, it works only with BUILD_SHARED_LIBS enabled\n",
        "Line" : 248,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# requirement #1\n",
        "Line" : 253,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# requirement #2\n",
        "Line" : 259,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# only the default architecture (i.e. 64-bit) is supported\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# configure Xcode templates\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# enable project folders\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# add the subdirectories\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# on Linux and BSD-like OS, install pkg-config files by default\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# setup the install rules\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# find only \"root\" headers\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# in fact we have to fool cmake to copy all the headers in subdirectories\n\n# to do that we have to add the \"root\" headers to the PUBLIC_HEADER\n\n# then we can run a post script to copy the remaining headers\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# we need a dummy file in order to compile the framework\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# create SFML.framework\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# set the target flags to use the appropriate C++ standard library\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# edit target properties\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# add the non-optional SFML headers\n",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# add window module headers if enabled\n",
        "Line" : 371,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# add network module headers if enabled\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# add graphics module headers if enabled\n",
        "Line" : 387,
        "CharPositionInLine" : 5
      },
      "64" : {
        "Text" : "# add audio module headers if enabled\n",
        "Line" : 395,
        "CharPositionInLine" : 5
      },
      "65" : {
        "Text" : "# adapt install directory to allow distributing dylibs/frameworks in user's frameworks/application bundle\n\n# NOTE: it's not required to link against SFML.framework\n",
        "Line" : 403,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# install rule\n",
        "Line" : 414,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# install 3rd-party libraries and tools\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# install the binaries of SFML dependencies\n",
        "Line" : 427,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# install extlibs dependencies only when used\n",
        "Line" : 450,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# install the Xcode templates if requested\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# configure the templates plist files\n",
        "Line" : 485,
        "CharPositionInLine" : 8
      },
      "72" : {
        "Text" : "# fix CMake install rules broken for iOS (see http://public.kitware.com/Bug/view.php?id=12506)\n",
        "Line" : 500,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# since the iOS libraries are built as static, we must install the SFML dependencies\n\n# too so that the end user can easily link them to its final application\n",
        "Line" : 504,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# install extlibs\n",
        "Line" : 521,
        "CharPositionInLine" : 8
      },
      "75" : {
        "Text" : "# install Android.mk so the NDK knows how to set up SFML\n",
        "Line" : 526,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 76
    },
    "cmake/Config.cmake" : {
      "ObjectId" : "0a286602ee07968b5caec184f37cb4fd62d1d2f0",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect the OS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# don't use the OpenGL ES implementation on Windows\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# detect the architecture (note: this test won't work for cross-compilation)\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# use the OpenGL ES implementation on Android\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# don't use the OpenGL ES implementation on Linux\n",
        "Line" : 27,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# don't use the OpenGL ES implementation on FreeBSD\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# don't use the OpenGL ES implementation on OpenBSD\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# use the OpenGL ES implementation on iOS\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# don't use the OpenGL ES implementation on Mac OS X\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# detect OS X version. (use '/usr/bin/sw_vers -productVersion' to extract V from '10.V.x'.)\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# use the OpenGL ES implementation on Android\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# comparing CMAKE_SYSTEM_NAME with \"CYGWIN\" generates a false warning depending on the CMake version\n\n# let's avoid it so the actual error is more visible\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# set pkgconfig install directory\n\n# this could be e.g. macports on mac or msys2 on windows etc.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# detect the compiler and its version\n\n# Note: on some platforms (OS X), CMAKE_COMPILER_IS_GNUCXX is true\n\n# even when CLANG is used, therefore the Clang test is done first\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# CMAKE_CXX_COMPILER_ID is an internal CMake variable subject to change,\n\n# but there is no other way to detect CLang at the moment\n",
        "Line" : 84,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 15
    },
    "cmake/Macros.cmake" : {
      "ObjectId" : "a966bc5b52c65fd290a161d140e99c15707507e4",
      "LastModified" : "2019-02-19T09:16:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This little macro lets you set any Xcode specific property\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the appropriate standard library on each platform for the given target\n\n# example: sfml_set_stdlib(sfml-system)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for gcc >= 4.0 on Windows, apply the SFML_USE_STATIC_STD_LIBS option if it is enabled\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# enable automatic reference counting on iOS\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Bare executables are not usable on iOS, only bundle applications\n",
        "Line" : 39,
        "CharPositionInLine" : 31
      },
      "5" : {
        "Text" : "# If missing, trying to launch an example in simulator will make Xcode < 9.3 crash\n",
        "Line" : 40,
        "CharPositionInLine" : 66
      },
      "6" : {
        "Text" : "# add a new target which is a SFML library\n\n# example: sfml_add_library(sfml-graphics\n\n#                           SOURCES sprite.cpp image.cpp ...\n\n#                           [STATIC]) # Always create a static library and ignore BUILD_SHARED_LIBS\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# parse the arguments\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# create the target\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# define the export symbol of the module\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# adjust the output file prefix/suffix to match our conventions\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# include the major version number in Windows shared library names (but not import library names)\n",
        "Line" : 74,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# on Windows/gcc get rid of \"lib\" prefix for shared libraries,\n\n# and transform the \".dll.a\" suffix into \".a\" for import libraries\n",
        "Line" : 81,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# set the version and soversion of the target (for compatible systems -- mostly Linuxes)\n\n# except for Android which strips soversion suffixes\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# set the target's folder (for IDEs that support it, e.g. Visual Studio)\n",
        "Line" : 100,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# set the target flags to use the appropriate C++ standard library\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# For Visual Studio on Windows, export debug symbols (PDB files) to lib directory\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# PDB files are only generated in Debug and RelWithDebInfo configurations, find out which one\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# DLLs export debug symbols in the linker PDB (the compiler PDB is an intermediate file)\n",
        "Line" : 116,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Static libraries have no linker PDBs, thus the compiler PDBs are relevant\n",
        "Line" : 121,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# if using gcc >= 4.0 or clang >= 3.0 on a non-Windows platform, we must hide public symbols by default\n\n# (exported ones are explicitly marked)\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# build frameworks or dylibs\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# adapt target to build frameworks instead of dylibs\n",
        "Line" : 137,
        "CharPositionInLine" : 12
      },
      "23" : {
        "Text" : "# adapt install directory to allow distributing dylibs/frameworks in user's frameworks/application bundle\n\n# but only if cmake rpath options aren't set\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# sfml-activity library is our bootstrap activity and must not depend on stlport_shared\n\n# (otherwise Android will fail to load it)\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# add the install rule\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# add <project>/include as public include directory\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# define SFML_STATIC if the build type is not set to 'shared'\n",
        "Line" : 194,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# add a new target which is a SFML example\n\n# example: sfml_add_example(ftp\n\n#                           SOURCES ftp.cpp ...\n\n#                           BUNDLE_RESOURCES MainMenu.nib ...    # Files to be added in target but not installed next to the executable\n\n#                           DEPENDS sfml-network\n\n#                           RESOURCES_DIR resources)             # A directory to install next to the executable and sources\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# parse the arguments\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# set a source group for the source files\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# check whether resources must be added in target\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# create the target\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# For iOS apps we need the launch screen storyboard,\n\n# and a custom info.plist to use it\n",
        "Line" : 227,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# set the debug suffix\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# set the target's folder (for IDEs that support it, e.g. Visual Studio)\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# set the target flags to use the appropriate C++ standard library\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# set the Visual Studio startup path for debugging\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# link the target to its SFML dependencies\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# add the install rule\n",
        "Line" : 275,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# install the example's source code\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# install the example's resources as well\n",
        "Line" : 287,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# add a new target which is a SFML test\n\n# example: sfml_add_test(sfml-test\n\n#                           ftp.cpp ...\n\n#                           sfml-network)\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# set a source group for the source files\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# create the target\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# set the target's folder (for IDEs that support it, e.g. Visual Studio)\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# link the target to its SFML dependencies\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Add the test\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# If building shared libs on windows we must copy the dependencies into the folder\n",
        "Line" : 323,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Create an interface library for an external dependency. This virtual target can provide\n\n# link specifications and include directories to be used by dependees.\n\n# The created INTERFACE library is tagged for export to be part of the generated SFMLConfig\n\n# Usage: sfml_add_external(target_name\n\n#                          [INCLUDE \"extlibs/include\"]\n\n#                          [LINK \"extlibs/libfoo/libfoo.a\"])\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Find the requested package and make an INTERFACE library from it\n\n# The created INTERFACE library is tagged for export to be part of the generated SFMLConfig\n\n# Usage: sfml_find_package(wanted_target_name\n\n#                          [INCLUDE \"OPENGL_INCLUDE_DIR\"]\n\n#                          [LINK \"OPENGL_gl_LIBRARY\"])\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Make sure to interpret the items in INCLUDE and LINK parameters. sfml_add_external()\n\n# does not interpret given items in order to also accept parameters that must not be interpreted\n",
        "Line" : 401,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Generate a SFMLConfig.cmake file (and associated files) from the targets registered against\n\n# the EXPORT name \"SFMLConfigExport\" (EXPORT parameter of install(TARGETS))\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# CMAKE_CURRENT_LIST_DIR or CMAKE_CURRENT_SOURCE_DIR not usable for files that are to be included like this one\n",
        "Line" : 423,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 54
    },
    "cmake/Modules/FindEGL.cmake" : {
      "ObjectId" : "cde632ae1d626e57ca679c46b2db6f38871f3dc9",
      "LastModified" : "2015-04-14T23:53:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find EGL library and include path.\n\n# Once done this will define\n\n#\n\n# EGL_FOUND\n\n# EGL_INCLUDE_PATH\n\n# EGL_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindFLAC.cmake" : {
      "ObjectId" : "e820cf9d78bdb8185e44d7141544231ea3ee27f4",
      "LastModified" : "2015-04-14T23:53:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find FLAC libraries and include paths.\n\n# Once done this will define\n\n#\n\n# FLAC_FOUND\n\n# FLAC_INCLUDE_DIR\n\n# FLAC_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindFreetype.cmake" : {
      "ObjectId" : "6e3f3f701f96d4cdaaa7ad3ce8454d505fe64d2c",
      "LastModified" : "2015-04-14T23:53:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindFreetype\n\n# ------------\n\n#\n\n# Locate FreeType library\n\n#\n\n# This module defines\n\n#\n\n# ::\n\n#\n\n#   FREETYPE_LIBRARIES, the library to link against\n\n#   FREETYPE_FOUND, if false, do not try to link to FREETYPE\n\n#   FREETYPE_INCLUDE_DIRS, where to find headers.\n\n#   FREETYPE_VERSION_STRING, the version of freetype found (since CMake 2.8.8)\n\n#   This is the concatenation of the paths:\n\n#   FREETYPE_INCLUDE_DIR_ft2build\n\n#   FREETYPE_INCLUDE_DIR_freetype2\n\n#\n\n#\n\n#\n\n# $FREETYPE_DIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$FREETYPE_DIR used in building FREETYPE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by Eric Wing.\n\n# Modifications by Alexander Neundorf.\n\n# This file has been renamed to \"FindFreetype.cmake\" instead of the correct\n\n# \"FindFreeType.cmake\" in order to be compatible with the one from KDE4, Alex.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ugh, FreeType seems to use some #include trickery which\n\n# makes this harder than it should be. It looks like they\n\n# put ft2build.h in a common/easier-to-find location which\n\n# then contains a #include to a more specific header in a\n\n# more specific location (#include <freetype/config/ftheader.h>).\n\n# Then from there, they need to set a bunch of #define's\n\n# so you can do something like:\n\n# #include FT_FREETYPE_H\n\n# Unfortunately, using CMake's mechanisms like include_directories()\n\n# wants explicit full paths and this trickery doesn't work too well.\n\n# I'm going to attempt to cut out the middleman and hope\n\n# everything still works.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set the user variables\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set FREETYPE_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindGLES.cmake" : {
      "ObjectId" : "f34f2cd0e8302f9b73c52274b1ae6c46dc495914",
      "LastModified" : "2015-04-14T23:53:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find GLES library and include path.\n\n# Once done this will define\n\n#\n\n# GLES_FOUND\n\n# GLES_INCLUDE_PATH\n\n# GLES_LIBRARY\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindUDev.cmake" : {
      "ObjectId" : "467bd6931d67f0274144afa0f5620394f2073cf1",
      "LastModified" : "2018-03-26T22:03:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure libudev environment\n\n#\n\n# UDEV_FOUND - system has a libudev\n\n# UDEV_INCLUDE_DIR - where to find header files\n\n# UDEV_LIBRARIES - the libraries to link against udev\n\n# UDEV_STABLE - it's true when is the version greater or equals to 143 - version when the libudev was stabilized in its API\n\n#\n\n# copyright (c) 2011 Petr Vanek <petr@scribus.info>\n\n# Redistribution and use of this file is allowed according to the terms of the BSD license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# retvale is 0 of the condition is \"true\" so we need to negate the value...\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindVorbis.cmake" : {
      "ObjectId" : "e285411a4d03f443de1df64ea4150eb6cc07cfdb",
      "LastModified" : "2018-03-26T22:03:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find Ogg/Vorbis libraries and include paths.\n\n# Once done this will define\n\n#\n\n# VORBIS_FOUND\n\n# VORBIS_INCLUDE_DIRS\n\n# VORBIS_LIBRARIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/toolchains/iOS.toolchain.cmake" : {
      "ObjectId" : "c697857fa5a92dbae88c904a225d5619366a9630",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2016, Bogdan Cristea <cristeab@gmail.com>\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86_64 arch.\n\n#\n\n# IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Macros:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE)\n\n#  A convenience macro for setting xcode specific properties on targets\n\n#  example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\")\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#  A macro used to find executable programs on the host system, not within the iOS environment.\n\n#  Thanks to the android-cmake project for providing the command\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Standard settings\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Required as of cmake 2.8.10\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determine the cmake host system version so we know where to find the iOS SDKs\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS \n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Setup iOS platform unless specified manually with IOS_PLATFORM\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 114,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# This causes the installers to properly locate the output libraries\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Setup iOS developer location unless specified manually with IOS_DEVELOPER_ROOT\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find and use the most recent iOS sdk unless specified manually with IOS_SDK_ROOT\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# set the architecture for iOS \n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This macro lets you find executable programs on the host system\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "123b44cf5a55893b764c23906038150f65ef1ec4",
      "LastModified" : "2018-03-26T22:03:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find doxygen\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add some path to search doxygen in more directories.\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# set the input and output documentation paths\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# see if we can generate the CHM documentation\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if HHC is found, we can generate the CHM (compressed HTML) output\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# configure the source Doxyfile by copying it and replacing all @variables@\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# copy the files needed by the documentation\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# target setup\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# setup install rules\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "2c9393f3db08cf0fa38285797f11815af588b365",
      "LastModified" : "2019-01-19T00:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CLI based examples\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GUI based examples\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/X11/CMakeLists.txt" : {
      "ObjectId" : "27509a62ea3306032f2349d93e8e5a02753ec720",
      "LastModified" : "2018-03-26T22:03:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the X11 target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/android/app/proguard-rules.pro" : {
      "ObjectId" : "f1b424510da51fd82143bc74a0a801ae5a1e2fcd",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# You can control the set of applied configuration files using the\n\n# proguardFiles setting in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Uncomment this to preserve the line number information for\n\n# debugging stack traces.\n\n#-keepattributes SourceFile,LineNumberTable\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If you keep the line number information, uncomment this to\n\n# hide the original source file name.\n\n#-renamesourcefileattribute SourceFile\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/cocoa/CMakeLists.txt" : {
      "ObjectId" : "dfa46be527c8ac72e7e88eb755b4b33cf803a67b",
      "LastModified" : "2018-08-27T12:36:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Usage: compile_xib(INPUT path/to/file.xib OUTPUT path/to/file.nib)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default args taken from Xcode 9 when it generates a nib from a xib\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# all source files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# all resource files\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define the cocoa target and customize it\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/ftp/CMakeLists.txt" : {
      "ObjectId" : "a65cb67e48eaa76b7a35778042be00ac1e141dd0",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the ftp target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/island/CMakeLists.txt" : {
      "ObjectId" : "3b063fb88d2e34015ad6de59da638ca9d200c943",
      "LastModified" : "2019-01-19T00:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the island target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/joystick/CMakeLists.txt" : {
      "ObjectId" : "8d92f03de84a1b97be395200deaf5ca202b7d739",
      "LastModified" : "2019-01-19T00:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the joystick target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/opengl/CMakeLists.txt" : {
      "ObjectId" : "1cdde0289c50bd61a5bf7f6154a03aeb7830d2d9",
      "LastModified" : "2019-01-19T00:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the opengl target\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/pong/CMakeLists.txt" : {
      "ObjectId" : "54e70c8babb5b7509c0eb596d802213c476f8b64",
      "LastModified" : "2019-01-19T00:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the pong target\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/shader/CMakeLists.txt" : {
      "ObjectId" : "600cb4d140e938f39a6a2026d93efa06411e80b9",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the shader target\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/sockets/CMakeLists.txt" : {
      "ObjectId" : "eebc91db5ecf34b0f0a94f35d2761b5faef22e1b",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the sockets target\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/sound/CMakeLists.txt" : {
      "ObjectId" : "d3875a6f7958f0ab6048593a59500df855dbab50",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the sound target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/sound_capture/CMakeLists.txt" : {
      "ObjectId" : "e2c457f851110043b2eff0bc27650fb3292512ec",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the sound-capture target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/voip/CMakeLists.txt" : {
      "ObjectId" : "66bc074751ec1ed8bc99ef570c410d7dd734505a",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the voip target\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/win32/CMakeLists.txt" : {
      "ObjectId" : "bd952c5e63ceee70740d716d2fdd8f15c41a8101",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the win32 target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/window/CMakeLists.txt" : {
      "ObjectId" : "b106c04355e22b8ecc289350df9f244302b84ba2",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the window target\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/SFML/Audio/CMakeLists.txt" : {
      "ObjectId" : "420e13b55cad696af135a8bb7eb1ad4725ae5edb",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# let CMake know about our additional audio libraries paths (on Windows and OSX)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find external libraries\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# avoids warnings in vorbisfile.h\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# define the sfml-audio target\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# setup dependencies\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/SFML/CMakeLists.txt" : {
      "ObjectId" : "25a5bb1c7d325cb7624f004bb4e9c937173fe6d6",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# include the SFML specific macros\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# let CMake know about our additional libraries paths\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the path of our additional CMake modules\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the output directory for SFML libraries\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add the modules subdirectories\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# sfml-system\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# sfml-main and sfml-activity\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# sfml-window\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# sfml-network\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# sfml-graphics\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# sfml-audio\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/SFML/Graphics/CMakeLists.txt" : {
      "ObjectId" : "9c0dcc3f89e391ceaf73ac0bbca5c5a7f25b5033",
      "LastModified" : "2019-01-19T00:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# drawables sources\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# render-texture sources\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define the sfml-graphics target\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# setup dependencies\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# stb_image sources\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# let CMake know about our additional graphics libraries paths\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# find external libraries\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Target OpenGL already defined for Window component so no sfml_find_package() here\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Target X11 already defined for Window component so no sfml_find_package() here\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# add preprocessor symbols\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ImageLoader.cpp must be compiled with the -fno-strict-aliasing\n\n# when gcc is used; otherwise saving PNGs may crash in stb_image_write\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/SFML/Main/CMakeLists.txt" : {
      "ObjectId" : "6542e591d384800971c39df0700067f0c04fe8d6",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sources\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define the sfml-main target\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# overwrite sfml-main suffix for backward compatibility with FindSFML.cmake\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# because of a current limitation on Android (which prevents one library\n\n# from depending on shared libraries), we need a boostrap activity which\n\n# will load our shared libraries manually\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/SFML/Network/CMakeLists.txt" : {
      "ObjectId" : "6626d73497bdfe5a2f0b8ce9697691b8c21fc9ef",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add platform specific sources\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the sfml-network target\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# setup dependencies\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/SFML/System/CMakeLists.txt" : {
      "ObjectId" : "d1b712d86fc604773c6473461a654ca29beb343d",
      "LastModified" : "2018-08-13T20:46:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add platform specific sources\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define the sfml-system target\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# setup dependencies\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/SFML/Window/CMakeLists.txt" : {
      "ObjectId" : "ecf35e14318aeb6872be32abbedcb49872497018",
      "LastModified" : "2019-01-19T00:29:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all source files\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add platform specific sources\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that we use the Unicode version of the Win API functions\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# define the sfml-window target\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# When static linking on macOS, we need to add this flag for objective C to work\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# find and setup usage for external libraries\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake 3.11 and later prefer to choose GLVND, but we choose legacy OpenGL for backward compability\n\n# (unless the OpenGL_GL_PREFERENCE was explicitly set)\n\n# See CMP0072 for more details (cmake --help-policy CMP0072)\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "9e9f6111aaef8c539c9c411eb672b9485c072625",
      "LastModified" : "2019-02-19T09:16:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# System is always built\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Automatically run the tests at the end of the build\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 34,
    "QMAKE" : 1
  },
  "ElapsedTime" : 994
}