{
  "Repository" : "69542",
  "Revision" : "HEAD",
  "ObjectId" : "b8219bd030d007559fc63a3988f44f140e889b96",
  "CommitTime" : "2019-04-18T17:15:49Z",
  "Files" : {
    "external/boost/lib/spirit/doc/refcard/Makefile" : {
      "ObjectId" : "1034b2539d9c88bfa3227af5d4c8e9a643706568",
      "LastModified" : "2017-12-29T05:28:22Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/CMakeLists.txt" : {
      "ObjectId" : "41a8f4e6c7b1dece8c54d2ce722799d14e8f11c8",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Eric Niebler 2014\n\n# Copyright Gonzalo Brito Gadeschi 2014, 2017\n\n# Copyright Louis Dionne 2015\n\n# Copyright Casey Carter 2016\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Export compilation data-base\n",
        "Line" : 14,
        "CharPositionInLine" : 38
      },
      "2" : {
        "Text" : "# invokes enable_testing() and defines BUILD_TESTING variable, defaulting to ON\n",
        "Line" : 25,
        "CharPositionInLine" : 15
      },
      "3" : {
        "Text" : "# Test for <thread>\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test for coroutine TS support\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Test all headers\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add header files as sources to fix MSVS 2017 not finding source during debugging\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Grab the range-v3 version numbers:\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Try to build a new version.hpp\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the new version.hpp is materially different from the one in the source\n\n# directory, update it, commit, and tag.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check that README.md and Version.cmake are the only changed file:\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "external/range-v3/0.4.0/Version.cmake" : {
      "ObjectId" : "437a34d3c69a98fd1ccec11e6bb482b0c2d18db5",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To update the range-v3 version, from a *CLEAN* working directory, update the version numbers below.\n\n# This makefile will generate a new version.hpp, *AMEND THE MOST RECENT COMMIT*, and git-tag the commit.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/range-v3/0.4.0/cmake/TestHeaders.cmake" : {
      "ObjectId" : "c05f10692b4474e090334ad0abb227135cf067bc",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2013-2016\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n#\n\n# This CMake module provides a function generating unit tests to make sure\n\n# that every public header can be included on its own.\n\n#\n\n# When a C++ library or application has many header files, it can happen that\n\n# a header does not include all the other headers it depends on. When this is\n\n# the case, it can happen that including that header file on its own will\n\n# break the compilation. This CMake module generates a dummy unit test for\n\n# each header file considered public: this unit test is just a program of\n\n# the form\n\n#\n\n#   #include <the/public/header.hpp>\n\n#   int main() { }\n\n#\n\n# If this succeeds to compile, it means that the header can be included on\n\n# its own, which is what clients expect. Otherwise, you have a problem.\n\n# Since writing these dumb unit tests by hand is tedious and repetitive,\n\n# you can use this CMake module to automate this task.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generates header-inclusion unit tests for all the specified headers.\n\n#\n\n# For each specified header with path `xxx/yyy/zzz.hpp`, a target named\n\n# `test.header.xxx.yyy.zzz` is created. This target builds the unit test\n\n# including `xxx/yyy/zzz.hpp`.\n\n#\n\n# Parameters\n\n# ----------\n\n# HEADERS headers:\n\n#   A list of header files to generate the inclusion tests for. All headers\n\n#   in this list must be represented as relative paths from the root of the\n\n#   include directory added to the compiler's header search path. In other\n\n#   words, it should be possible to include all headers in this list as\n\n#\n\n#       #include <${header}>\n\n#\n\n#   For example, for a library with the following structure:\n\n#\n\n#       project/\n\n#           doc/\n\n#           test/\n\n#           ...\n\n#           include/\n\n#               boost/\n\n#                   hana.hpp\n\n#                   hana/\n\n#                       transform.hpp\n\n#                       tuple.hpp\n\n#                       pair.hpp\n\n#                       ...\n\n#\n\n#   When building the unit tests for that library, we'll add `-I project/include'\n\n#   to the compiler's arguments. The list of public headers should therefore contain\n\n#\n\n#       boost/hana.hpp\n\n#       boost/hana/transform.hpp\n\n#       boost/hana/tuple.hpp\n\n#       boost/hana/pair.hpp\n\n#       ...\n\n#\n\n#   Usually, all the 'public' header files of a library should be tested for\n\n#   standalone inclusion. A header is considered 'public' if a client should\n\n#   be able to include that header on its own.\n\n#\n\n# [EXCLUDE excludes]:\n\n#   An optional list of headers or regexes for which no unit test should be\n\n#   generated. Basically, any header in the list specified by the `HEADERS`\n\n#   argument that matches anything in `EXCLUDE` will be skipped.\n\n#\n\n# [MASTER_TARGET target]:\n\n#   An optional target name that will be made a dependent of all the generated\n\n#   targets. This can be used to create a target that will build all the\n\n#   header-inclusion tests.\n\n#\n\n# [LINK_LIBRARIES libraries]:\n\n#   An optional list of libraries that should be linked into each generated\n\n#   executable. The libraries are linked into the target using the usual\n\n#   `target_link_libraries`.\n\n#\n\n# [EXCLUDE_FROM_ALL]:\n\n#   If set to true, the generated targets are excluded from the 'all' target.\n\n#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# options\n\n# 1 value args\n\n# multivalued args\n",
        "Line" : 87,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 3
    },
    "external/range-v3/0.4.0/cmake/ranges_diagnostics.cmake" : {
      "ObjectId" : "c8f8a519b701cdc552f792ee9bded0a015734873",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2015\n\n# Copyright Gonzalo Brito Gadeschi 2015\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n# Setup compiler flags (more can be set on a per-target basis or in\n\n# subdirectories)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable all warnings:\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Selectively disable those warnings that are not worth it:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/range-v3/0.4.0/cmake/ranges_env.cmake" : {
      "ObjectId" : "630888b7c016f9218dca1b2df8903ea3d4e1f49f",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Gonzalo Brito Gadeschi 2015\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n# Detects the C++ compiler, system, build-type, etc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang-CL will blow up with various parts of the standard library\n\n# if compiling with -std less than c++14.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build type\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find Valgrind\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "external/range-v3/0.4.0/cmake/ranges_flags.cmake" : {
      "ObjectId" : "cdfb823b3d3120835e0403535dab7ef574426679",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Louis Dionne 2015\n\n# Copyright Gonzalo Brito Gadeschi 2015\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n# Setup compiler flags (more can be set on a per-target basis or in\n\n# subdirectories)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compilation flags\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# All compilation flags\n\n# Language flag: version of the C++ standard to use\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enable \"normal\" warnings and make them errors:\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On linux libc++ re-exports the system math headers. The ones from libstdc++\n\n# use the GCC __extern_always_inline intrinsic which is not supported by clang\n\n# versions 3.6, 3.7, 3.8, 3.9, 4.0, and current trunk 5.0 (as of 2017.04.13).\n\n#\n\n# This works around it by replacing __extern_always_inline with inline using a\n\n# macro:\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Template diagnostic flags\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Clang modules support\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Sanitizer support: detect incompatible sanitizer combinations\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# AddressSanitizer support\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This policy enables passing the linker flags to the linker when trying to\n\n# test the features, which is required to successfully link ASan binaries\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# LeakSanitizer not supported on MacOSX\n",
        "Line" : 82,
        "CharPositionInLine" : 25
      },
      "11" : {
        "Text" : "#ASAN flags must be passed to the linker:\n",
        "Line" : 92,
        "CharPositionInLine" : 23
      },
      "12" : {
        "Text" : "# MemorySanitizer support\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# This policy enables passing the linker flags to the linker when trying to\n\n# compile the examples, which is required to successfully link MSan binaries\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Build types:\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Clang can generate debug info tuned for LLDB or GDB\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# The quality of ASan and MSan error messages suffers if we disable the\n\n# frame pointer, so leave it enabled when compiling with either of them:\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Sized deallocation is not available in MacOSX:\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 18
    },
    "external/range-v3/0.4.0/cmake/ranges_options.cmake" : {
      "ObjectId" : "6bd208dc7565eac2275b955b48586bbe7b620b8c",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright Gonzalo Brito Gadeschi 2015\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)\n\n#\n\n# CMake options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable verbose configure when passing -Wdev to CMake\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/range-v3/0.4.0/doc/CMakeLists.txt" : {
      "ObjectId" : "5e6fdb907917938f4ebbe414c70a7f7555935856",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================\n\n# Setup the documentation\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if (NOT TARGET benchmarks)\n\n#     message(STATUS\n\n#         \"The 'benchmarks' target is not available; the 'doc' and \"\n\n#         \"'gh-pages.{clean,copy,update}' targets will be unavailable. \"\n\n#         \"The 'doc.check' target can still be used to generate the \"\n\n#         \"documentation to check for errors/warnings.\")\n\n#     return()\n\n# endif()\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#     DEPENDS benchmarks\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/range-v3/0.4.0/doc/clean-gh-pages.cmake" : {
      "ObjectId" : "8fb22f4875a9d5c1d93fd46cb228a37fc44986e7",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/example/CMakeLists.txt" : {
      "ObjectId" : "9c5152362e5c4b3848e13b9939f11c9338230f0d",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# examples use a less draconian set of compiler warnings\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_executable(fibonacci fibonacci.cpp)\n\n# target_link_libraries(fibonacci range-v3)\n\n# add_test(example.fibonacci, fibonacci)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Guarded with a variable because the calendar example causes gcc to puke.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/range-v3/0.4.0/perf/CMakeLists.txt" : {
      "ObjectId" : "d30671b842ca209ebe9721dd8fe7b773709f34f9",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/CMakeLists.txt" : {
      "ObjectId" : "31c9ef2393aca4af657df01776c8e712319a2fac",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/action/CMakeLists.txt" : {
      "ObjectId" : "fa2b11b0469605195f649a170a1ca3af5b53c88d",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/algorithm/CMakeLists.txt" : {
      "ObjectId" : "920c4bf25e9b61e63186cb5203b18e1f478a1a63",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/experimental/CMakeLists.txt" : {
      "ObjectId" : "70759e90daa992dcce074f6d16ea88d07d540709",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/experimental/utility/CMakeLists.txt" : {
      "ObjectId" : "7ff4f3138ac7d9bf2ebc57cbf1769b30b7c17361",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/experimental/view/CMakeLists.txt" : {
      "ObjectId" : "8d73c859b0b36e29b4db9381fa5b0b983f414929",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/numeric/CMakeLists.txt" : {
      "ObjectId" : "61926bb93cca62f427f38c7aa670893f9f022ae1",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/utility/CMakeLists.txt" : {
      "ObjectId" : "b999634f0b0b8438d8f92d50ad7b59dff3a326dc",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test/view/CMakeLists.txt" : {
      "ObjectId" : "f67064bfc73dd5871921329e8bb3f59146c3a860",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/range-v3/0.4.0/test_package/CMakeLists.txt" : {
      "ObjectId" : "ade620948dabf5a265448658d12da55a13d1d08a",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Range v3 library\n\n#\n\n#  Copyright Luis Martinez de Bartolome Izquierdo 2016\n\n#\n\n#  Use, modification and distribution is subject to the\n\n#  Boost Software License, Version 1.0. (See accompanying\n\n#  file LICENSE_1_0.txt or copy at\n\n#  http://www.boost.org/LICENSE_1_0.txt)\n\n#\n\n# Project home: https://github.com/ericniebler/range-v3\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/Makefile" : {
      "ObjectId" : "e17ed23d1b6fbfdac0552ac841452210bc75aa0b",
      "LastModified" : "2019-02-18T23:20:33Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 21,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 2849
}