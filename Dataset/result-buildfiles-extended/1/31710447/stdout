{
  "Repository" : "31710447",
  "Revision" : "HEAD",
  "ObjectId" : "bc2b3ecf75ec1ce2d2fa29bd5f55e08e7e2c9019",
  "CommitTime" : "2018-12-13T19:20:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "eb24ef9704dc4f1af500cd630a76dea1808ac448",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Add capability to create visual studio solution folders\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#options to be used while running cmake\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Variables designating where the output files go\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Compiler flags for release mode applied to all projects\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Set up dependencies\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#{\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Variable to indicate where most external dependencies live\n\n#set(DEPS_DIR C:/opt/polarisdeps) %%%RLW\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#Variable to indicate where boost lives\n\n#Variable to indicate where boost lives\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# boost\n",
        "Line" : 88,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#set (Boost_USE_STATIC_LIBS OFF CACHE BOOL \"use static libraries from Boost\")\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#TC_Malloc include and library dependencies\n\n#if (UNIX)\n\n#\tinclude_directories(${DEPS_DIR}/gperftools-2.1/src)\n\n#\tfind_library(libtcmalloc NAMES libtcmalloc_minimal libtcmalloc_minimal.a  HINT \"/usr/lib/\" ${DEPS_DIR}/gperftools-2.1/Release)\n\n#\tmessage(STATUS \"\" ${libtcmalloc})\n\n#endif()\n",
        "Line" : 109,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#if (MSVC)\n\n#\tadd_definitions(/Zi)\n\n#\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /DEBUG\")\n\n#\tinclude_directories(${DEPS_DIR}/gperftools-2.1/src)\n\n#\tfind_library(libtcmalloc-r NAMES libtcmalloc_minimal  HINTS ${DEPS_DIR}/gperftools-2.1/Release)\n\n#\tfind_library(libtcmalloc-d NAMES libtcmalloc_minimal-debug  HINTS ${DEPS_DIR}/gperftools-2.1/Debug)\n\n#\tset(libtcmalloc optimized ${libtcmalloc-r} debug ${libtcmalloc-d})\n\n#endif()\n",
        "Line" : 116,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#Google Testing Framework include and library dependencies\n\n#include_directories(${DEPS_DIR}/gtest-1.7.0/include)\n\n#find_library(gtest NAMES gtest  HINTS ${DEPS_DIR}/gtest-1.7.0/msvc/gtest-md/Release)\n\n#enable_testing()\n\n#if (UNIX)\n\n#\tfind_package(GTest REQUIRED)\n\n#\tinclude_directories(${GTEST_INCLUDE_DIR})\n\n#\tset(gtest ${GTEST_LIBRARIES})\n\n#endif()\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#if (UNIX)\n\n#\tfind_package(GTest REQUIRED)\n\n#\tinclude_directories(${GTEST_INCLUDE_DIR})\n\n#\tset(gtest ${GTEST_LIBRARIES})\n\n#endif()\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "#ODB include dependencies\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#ODB include dependencies\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#ODB library dependencies\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#set(sqlite3 ${DEPS_DIR}/libodb-2.4.0/libodb-sqlite-2.4.0/etc/sqlite/lib64/sqlite3.lib)\n\n#set(sqlite3-d ${DEPS_DIR}/libodb-2.4.0/libodb-sqlite-2.4.0/etc/sqlite/lib64/sqlite3-d.lib)\n\n# set(iolibs Io ${odb} ${sqlite3} ${odb_sqlite})\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "#ODB include dependencies\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "#ODB library dependencies\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# set(iolibs Io ${odb} ${sqlite3} ${odb_sqlite})\n",
        "Line" : 170,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "#ODB library dependencies\n",
        "Line" : 177,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# set(iolibs Io ${odb} ${sqlite3} ${odb_sqlite})\n",
        "Line" : 184,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "#}\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#Allow Access to Project-level Directories\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# %%%RLW include_directories(libs/scenario_manager)\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#Apply CMake over POLARIS library project structure\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#ADD_DEFINITIONS( -DGLEW_STATIC )\n",
        "Line" : 264,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "#add_subdirectory (apps/fixed_demand_simulator) \n\n#add_subdirectory (apps/integrated_abm)\n\n#add_subdirectory (apps/test)\n",
        "Line" : 279,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "#Apply CMake over POLARIS application project structure\n",
        "Line" : 286,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "#add_subdirectory (libs/spatial) \n\n#add_subdirectory (libs/routing) \n\n#add_subdirectory (libs/traffic_simulator)\n",
        "Line" : 293,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#add_subdirectory (apps/assignment_analyzer)\n",
        "Line" : 297,
        "CharPositionInLine" : 16
      },
      "32" : {
        "Text" : "#add_subdirectory (apps/batch_router) \n\n#add_subdirectory (apps/io_demo) \n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#\tadd_subdirectory (apps/test) \n\n#\tadd_subdirectory (apps/integrated_abm)\n\n#\tadd_subdirectory (apps/randy_test)\n\n#\tadd_subdirectory (apps/integrated_capacity_based_model)\n\n#\tadd_subdirectory (apps/atomic_test)\n",
        "Line" : 300,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "#add_subdirectory (apps/dee-test)\n\n#add_subdirectory (apps/network_validator)\n",
        "Line" : 305,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#\tadd_subdirectory (apps/Output_Visualizer)\n",
        "Line" : 307,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "#add_subdirectory (apps/population_synthesizer)\n\n#add_subdirectory (libs/traffic_simulator)\n\n#add_subdirectory (libs/spatial) \n\n#add_subdirectory (libs/routing) \n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#Apply CMake over POLARIS tests project structure\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "#Apply CMake over POLARIS tests project structure\n",
        "Line" : 342,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#Google Testing Framework include and library dependencies\n",
        "Line" : 354,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "#Apply CMake over POLARIS tests project structure\n",
        "Line" : 369,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "#Unittests\n",
        "Line" : 371,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 42
    },
    "apps/ILSTDM/CMakeLists.txt" : {
      "ObjectId" : "7c8b6d9f6b242940404dbf72d788f252652a4588",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/Output_Visualizer/CMakeLists.txt" : {
      "ObjectId" : "2eac90fd537eb2a3cecc70bb1cb612571833b12f",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/assignment_analyzer/CMakeLists.txt" : {
      "ObjectId" : "209a870066a025cbb4bdb86fea114e016354ea34",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/batch_router/CMakeLists.txt" : {
      "ObjectId" : "059f9f4493a901a00423409b4dfc44a9cf7044a8",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/demo/CMakeLists.txt" : {
      "ObjectId" : "db00dcd3cfbd829ff379dd7f9404d6f57c8def64",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/fixed_demand_simulator/CMakeLists.txt" : {
      "ObjectId" : "0919cd2b401d7aa4b47acdc6deca2ac721856a28",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/hello_world/CMakeLists.txt" : {
      "ObjectId" : "5e229a3ba8a2cbb7845c7ae39c4c1ac493a9aed1",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/integrated_abm/CMakeLists.txt" : {
      "ObjectId" : "1222c8b0182703e79abdd618f37b0a4115cbe424",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/io_demo/CMakeLists.txt" : {
      "ObjectId" : "18e492f5a174ccd7c0e7abd1223bf11c29ce64ea",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/network_validator/CMakeLists.txt" : {
      "ObjectId" : "11c22a174daa8ebb88b279abcfb46cc734ebeba3",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/population_synthesizer/CMakeLists.txt" : {
      "ObjectId" : "ba7d743bb8890a36300ac2f7a2966c328d23999f",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/randy_test/CMakeLists.txt" : {
      "ObjectId" : "450e401da4414edef0897d2f7d8e0406d89a3173",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(${MODULE_NAME} ${libtcmalloc} ${iolibs} Scenario_Manager Core Routing ${antareslibs})\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/test/CMakeLists.txt" : {
      "ObjectId" : "f182f7446ec49bbe0232b1a5d7f1880438d1a937",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_link_libraries(Test_Application ${libtcmalloc} ${iolibs} Scenario_Manager Core Routing ${antareslibs})\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindTBB.cmake" : {
      "ObjectId" : "a1131aad75f2b1e7dd5593fb4bed9468235a555e",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The MIT License (MIT)\n\n#\n\n# Copyright (c) 2015 Justus Calvin\n\n# \n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to deal\n\n# in the Software without restriction, including without limitation the rights\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n# \n\n# The above copyright notice and this permission notice shall be included in all\n\n# copies or substantial portions of the Software.\n\n# \n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# FindTBB\n\n# -------\n\n#\n\n# Find TBB include directories and libraries.\n\n#\n\n# Usage:\n\n#\n\n#  find_package(TBB [major[.minor]] [EXACT]\n\n#               [QUIET] [REQUIRED]\n\n#               [[COMPONENTS] [components...]]\n\n#               [OPTIONAL_COMPONENTS components...]) \n\n#\n\n# where the allowed components are tbbmalloc and tbb_preview. Users may modify \n\n# the behavior of this module with the following variables:\n\n#\n\n# * TBB_ROOT_DIR          - The base directory the of TBB installation.\n\n# * TBB_INCLUDE_DIR       - The directory that contains the TBB headers files.\n\n# * TBB_LIBRARY           - The directory that contains the TBB library files.\n\n# * TBB_<library>_LIBRARY - The path of the TBB the corresponding TBB library. \n\n#                           These libraries, if specified, override the \n\n#                           corresponding library search results, where <library>\n\n#                           may be tbb, tbb_debug, tbbmalloc, tbbmalloc_debug,\n\n#                           tbb_preview, or tbb_preview_debug.\n\n# * TBB_USE_DEBUG_BUILD   - The debug version of tbb libraries, if present, will\n\n#                           be used instead of the release version.\n\n#\n\n# Users may modify the behavior of this module with the following environment\n\n# variables:\n\n#\n\n# * TBB_INSTALL_DIR \n\n# * TBBROOT\n\n# * LIBRARY_PATH\n\n#\n\n# This module will set the following variables:\n\n#\n\n# * TBB_FOUND             - Set to false, or undefined, if we haven’t found, or\n\n#                           don’t want to use TBB.\n\n# * TBB_<component>_FOUND - If False, optional <component> part of TBB sytem is\n\n#                           not available.\n\n# * TBB_VERSION           - The full version string\n\n# * TBB_VERSION_MAJOR     - The major version\n\n# * TBB_VERSION_MINOR     - The minor version\n\n# * TBB_INTERFACE_VERSION - The interface version number defined in \n\n#                           tbb/tbb_stddef.h.\n\n# * TBB_<library>_LIBRARY_RELEASE - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n# * TBB_<library>_LIBRARY_DEGUG - The path of the TBB release version of \n\n#                           <library>, where <library> may be tbb, tbb_debug,\n\n#                           tbbmalloc, tbbmalloc_debug, tbb_preview, or \n\n#                           tbb_preview_debug.\n\n#\n\n# The following varibles should be used to build and link with TBB:\n\n#\n\n# * TBB_INCLUDE_DIRS        - The include directory for TBB.\n\n# * TBB_LIBRARIES           - The libraries to link against to use TBB.\n\n# * TBB_LIBRARIES_RELEASE   - The release libraries to link against to use TBB.\n\n# * TBB_LIBRARIES_DEBUG     - The debug libraries to link against to use TBB.\n\n# * TBB_DEFINITIONS         - Definitions to use when compiling code that uses\n\n#                             TBB.\n\n# * TBB_DEFINITIONS_RELEASE - Definitions to use when compiling release code that\n\n#                             uses TBB.\n\n# * TBB_DEFINITIONS_DEBUG   - Definitions to use when compiling debug code that\n\n#                             uses TBB.\n\n#\n\n# This module will also create the \"tbb\" target that may be used when building\n\n# executables and libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##################################\n\n# Check the build type\n\n##################################\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##################################\n\n# Set the TBB search directories\n\n##################################\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Define search paths based on user input and environment variables\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Define the search directories based on the current platform\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set the target architecture\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Set the TBB search library path search suffix based on the version of VC\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add the library path search suffix for the VC independent version of TBB\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# OS X\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# TODO: Check to see which C++ library is being used by the compiler.\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# The default C++ library on OS X 10.9 and later is libc++\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Linux\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# TODO: Check compiler version to see the suffix should be <arch>/gcc4.1 or\n\n#       <arch>/gcc4.1. For now, assume that the compiler is more recent than\n\n#       gcc 4.4.x or later.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "##################################\n\n# Find the TBB include dir\n\n##################################\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "##################################\n\n# Set version strings\n\n##################################\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "##################################\n\n# Find TBB components\n\n##################################\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Find each component\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Search for the libraries\n",
        "Line" : 211,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Mark internal variables as advanced\n",
        "Line" : 238,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "##################################\n\n# Set compile flags\n\n##################################\n",
        "Line" : 248,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "##################################\n\n# Create targets\n\n##################################\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "libs/activity_simulator/CMakeLists.txt" : {
      "ObjectId" : "e0521c649c22950e7252a7e04fd6ed33356daff5",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/antares/CMakeLists.txt" : {
      "ObjectId" : "a0511145cd3ec99a7c68348528d220abc4fa4185",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/core/CMakeLists.txt" : {
      "ObjectId" : "2b4a3e974c7f56e4f7779c7eb7e61987c2ca6b61",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/io/CMakeLists.txt" : {
      "ObjectId" : "795d679d699311b1b69642d3df953762c4ce1210",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(odb_path /mnt/lustre/app/polaris/bin/odb)\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# set(odb_path c:/opt/polarisdeps/odb-2.2.0-i686-windows/bin/odb) %%%RLW\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#file(GLOB headerfiles *.h)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#list(APPEND headerfiles ${headerfile})\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "libs/its_simulator/CMakeLists.txt" : {
      "ObjectId" : "7d5a870f2043ce1f6188cd5d832a9c58db3d6142",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/population_synthesis/CMakeLists.txt" : {
      "ObjectId" : "717dd68edde6dd2521c52ee3d57464cc45f466c8",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/repository/CMakeLists.txt" : {
      "ObjectId" : "391393b0a5576d45eb06585d3f1649fd24932b15",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/routing/CMakeLists.txt" : {
      "ObjectId" : "bcc0bb111fa595c0bc26dd622ed2de2c64e2e70b",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/scenario_manager/CMakeLists.txt" : {
      "ObjectId" : "84554c3a8e084e34f5e365384fa88ab386696c23",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/spatial/CMakeLists.txt" : {
      "ObjectId" : "2eef9c718fd5f565359096b779a0ddfed500c984",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/traffic_simulator/CMakeLists.txt" : {
      "ObjectId" : "28ea8e5db627847fd70b71946117ffbc98989e84",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/traveler_simulator/CMakeLists.txt" : {
      "ObjectId" : "05a51ec9ab4d0a1b1155a1673547afff95e64b3b",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libs/visual_traffic_simulator/CMakeLists.txt" : {
      "ObjectId" : "5d583fc414143e5ea517584454de63606acf3bbe",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "polarisdeps/FindwxWidgets.cmake" : {
      "ObjectId" : "8c07e6cf86491234f42559ba873ebe28b8850493",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindwxWidgets\n\n# -------------\n\n#\n\n# Find a wxWidgets (a.k.a., wxWindows) installation.\n\n#\n\n# This module finds if wxWidgets is installed and selects a default\n\n# configuration to use.  wxWidgets is a modular library.  To specify the\n\n# modules that you will use, you need to name them as components to the\n\n# package:\n\n#\n\n# find_package(wxWidgets COMPONENTS core base ...)\n\n#\n\n# There are two search branches: a windows style and a unix style.  For\n\n# windows, the following variables are searched for and set to defaults\n\n# in case of multiple choices.  Change them if the defaults are not\n\n# desired (i.e., these are the only variables you should change to\n\n# select a configuration):\n\n#\n\n# ::\n\n#\n\n#   wxWidgets_ROOT_DIR      - Base wxWidgets directory\n\n#                             (e.g., C:/wxWidgets-2.6.3).\n\n#   wxWidgets_LIB_DIR       - Path to wxWidgets libraries\n\n#                             (e.g., C:/wxWidgets-2.6.3/lib/vc_lib).\n\n#   wxWidgets_CONFIGURATION - Configuration to use\n\n#                             (e.g., msw, mswd, mswu, mswunivud, etc.)\n\n#   wxWidgets_EXCLUDE_COMMON_LIBRARIES\n\n#                           - Set to TRUE to exclude linking of\n\n#                             commonly required libs (e.g., png tiff\n\n#                             jpeg zlib regex expat).\n\n#\n\n#\n\n#\n\n# For unix style it uses the wx-config utility.  You can select between\n\n# debug/release, unicode/ansi, universal/non-universal, and\n\n# static/shared in the QtDialog or ccmake interfaces by turning ON/OFF\n\n# the following variables:\n\n#\n\n# ::\n\n#\n\n#   wxWidgets_USE_DEBUG\n\n#   wxWidgets_USE_UNICODE\n\n#   wxWidgets_USE_UNIVERSAL\n\n#   wxWidgets_USE_STATIC\n\n#\n\n#\n\n#\n\n# There is also a wxWidgets_CONFIG_OPTIONS variable for all other\n\n# options that need to be passed to the wx-config utility.  For example,\n\n# to use the base toolkit found in the /usr/local path, set the variable\n\n# (before calling the FIND_PACKAGE command) as such:\n\n#\n\n# ::\n\n#\n\n#   set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)\n\n#\n\n#\n\n#\n\n# The following are set after the configuration is done for both windows\n\n# and unix style:\n\n#\n\n# ::\n\n#\n\n#   wxWidgets_FOUND            - Set to TRUE if wxWidgets was found.\n\n#   wxWidgets_INCLUDE_DIRS     - Include directories for WIN32\n\n#                                i.e., where to find \"wx/wx.h\" and\n\n#                                \"wx/setup.h\"; possibly empty for unices.\n\n#   wxWidgets_LIBRARIES        - Path to the wxWidgets libraries.\n\n#   wxWidgets_LIBRARY_DIRS     - compile time link dirs, useful for\n\n#                                rpath on UNIX. Typically an empty string\n\n#                                in WIN32 environment.\n\n#   wxWidgets_DEFINITIONS      - Contains defines required to compile/link\n\n#                                against WX, e.g. WXUSINGDLL\n\n#   wxWidgets_DEFINITIONS_DEBUG- Contains defines required to compile/link\n\n#                                against WX debug builds, e.g. __WXDEBUG__\n\n#   wxWidgets_CXX_FLAGS        - Include dirs and compiler flags for\n\n#                                unices, empty on WIN32. Essentially\n\n#                                \"`wx-config --cxxflags`\".\n\n#   wxWidgets_USE_FILE         - Convenience include file.\n\n#\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    # Note that for MinGW users the order of libs is important!\n\n#    find_package(wxWidgets COMPONENTS net gl core base)\n\n#    if(wxWidgets_FOUND)\n\n#      include(${wxWidgets_USE_FILE})\n\n#      # and for each of your dependent executable/library targets:\n\n#      target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\n\n#    endif()\n\n#\n\n#\n\n#\n\n# If wxWidgets is required (i.e., not an optional part):\n\n#\n\n# ::\n\n#\n\n#    find_package(wxWidgets REQUIRED net gl core base)\n\n#    include(${wxWidgets_USE_FILE})\n\n#    # and for each of your dependent executable/library targets:\n\n#    target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n# Copyright 2007-2009 Miguel A. Figueroa-Villanueva <miguelf at ieee dot org>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# FIXME: check this and provide a correct sample usage...\n\n#        Remember to connect back to the upper text.\n\n# Sample usage with monolithic wx build:\n\n#\n\n#   find_package(wxWidgets COMPONENTS mono)\n\n#   ...\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTES\n\n#\n\n# This module has been tested on the WIN32 platform with wxWidgets\n\n# 2.6.2, 2.6.3, and 2.5.3. However, it has been designed to\n\n# easily extend support to all possible builds, e.g., static/shared,\n\n# debug/release, unicode, universal, multilib/monolithic, etc..\n\n#\n\n# If you want to use the module and your build type is not supported\n\n# out-of-the-box, please contact me to exchange information on how\n\n# your system is setup and I'll try to add support for it.\n\n#\n\n# AUTHOR\n\n#\n\n# Miguel A. Figueroa-Villanueva (miguelf at ieee dot org).\n\n# Jan Woetzel (jw at mip.informatik.uni-kiel.de).\n\n#\n\n# Based on previous works of:\n\n# Jan Woetzel (FindwxWindows.cmake),\n\n# Jorgen Bodde and Jerry Fath (FindwxWin.cmake).\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO/ideas\n\n#\n\n# (1) Option/Setting to use all available wx libs\n\n# In contrast to expert developer who lists the\n\n# minimal set of required libs in wxWidgets_USE_LIBS\n\n# there is the newbie user:\n\n#   - who just wants to link against WX with more 'magic'\n\n#   - doesn't know the internal structure of WX or how it was built,\n\n#     in particular if it is monolithic or not\n\n#   - want to link against all available WX libs\n\n# Basically, the intent here is to mimic what wx-config would do by\n\n# default (i.e., `wx-config --libs`).\n\n#\n\n# Possible solution:\n\n#   Add a reserved keyword \"std\" that initializes to what wx-config\n\n# would default to. If the user has not set the wxWidgets_USE_LIBS,\n\n# default to \"std\" instead of \"base core\" as it is now. To implement\n\n# \"std\" will basically boil down to a FOR_EACH lib-FOUND, but maybe\n\n# checking whether a minimal set was found.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FIXME: This and all the DBG_MSG calls should be removed after the\n\n# module stabilizes.\n\n#\n\n# Helper macro to control the debugging output globally. There are\n\n# two versions for controlling how verbose your output should be.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  message(STATUS\n\n#    \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  message(STATUS\n\n#    \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Clear return values in case the module is loaded more than once.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DEPRECATED: This is a patch to support the DEPRECATED use of\n\n# wxWidgets_USE_LIBS.\n\n#\n\n# If wxWidgets_USE_LIBS is set:\n\n# - if using <components>, then override wxWidgets_USE_LIBS\n\n# - else set wxWidgets_FIND_COMPONENTS to wxWidgets_USE_LIBS\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add the convenience use file if available.\n\n#\n\n# Get dir of this file which may reside in:\n\n# - CMAKE_MAKE_ROOT/Modules on CMake installation\n\n# - CMAKE_MODULE_PATH if user prefers his own specialized version\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Prefer an existing customized version, but the user might override\n\n# the FindwxWidgets module and not the UsewxWidgets one.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#=====================================================================\n\n# Determine whether unix or win32 paths should be used\n\n#=====================================================================\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#=====================================================================\n\n# WIN32_FIND_STYLE\n\n#=====================================================================\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Useful common wx libs needed by almost all components.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# DEPRECATED: Use find_package(wxWidgets COMPONENTS mono) instead.\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# this is default\n",
        "Line" : 240,
        "CharPositionInLine" : 47
      },
      "17" : {
        "Text" : "# Add the common (usually required libs) unless\n\n# wxWidgets_EXCLUDE_COMMON_LIBRARIES has been set.\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#-------------------------------------------------------------------\n\n# WIN32: Helper MACROS\n\n#-------------------------------------------------------------------\n\n#\n\n# Get filename components for a configuration. For example,\n\n#   if _CONFIGURATION = mswunivud, then _UNV=univ, _UCD=u _DBG=d\n\n#   if _CONFIGURATION = mswu,      then _UNV=\"\",   _UCD=u _DBG=\"\"\n\n#\n",
        "Line" : 251,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#\n\n# Find libraries associated to a configuration.\n\n#\n",
        "Line" : 268,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# FIXME: What if both regex libs are available. regex should be\n\n# found outside the loop and only wx${LIB}${_UCD}${_DBG}.\n\n# Find wxWidgets common libraries.\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# for regex\n",
        "Line" : 282,
        "CharPositionInLine" : 31
      },
      "22" : {
        "Text" : "# Find wxWidgets multilib base libraries.\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Find wxWidgets monolithic library.\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Find wxWidgets multilib libraries.\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#\n\n# Clear all library paths, so that FIND_LIBRARY refinds them.\n\n#\n\n# Clear a lib, reset its found flag, and mark as advanced.\n",
        "Line" : 354,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clear all debug or release library paths (arguments are \"d\" or \"\").\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Clear wxWidgets common libraries.\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Clear wxWidgets multilib base libraries.\n",
        "Line" : 370,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Clear wxWidgets monolithic library.\n",
        "Line" : 376,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Clear wxWidgets multilib libraries.\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Clear all wxWidgets debug libraries.\n",
        "Line" : 385,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Clear all wxWidgets release libraries.\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#\n\n# Set the wxWidgets_LIBRARIES variable.\n\n# Also, Sets output variable wxWidgets_FOUND to FALSE if it fails.\n\n#\n",
        "Line" : 394,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#-------------------------------------------------------------------\n\n# WIN32: Start actual work.\n\n#-------------------------------------------------------------------\n",
        "Line" : 440,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Look for an installation tree.\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# WX 2.6.x\n",
        "Line" : 450,
        "CharPositionInLine" : 123
      },
      "37" : {
        "Text" : "# If wxWidgets_ROOT_DIR changed, clear lib dir.\n",
        "Line" : 492,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Select one default tree inside the already determined wx tree.\n\n# Prefer static/shared order usually consistent with build\n\n# settings.\n",
        "Line" : 501,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# prefer shared\n",
        "Line" : 523,
        "CharPositionInLine" : 54
      },
      "40" : {
        "Text" : "# prefer static\n",
        "Line" : 540,
        "CharPositionInLine" : 54
      },
      "41" : {
        "Text" : "# If wxWidgets_LIB_DIR changed, clear all libraries.\n",
        "Line" : 547,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# If building shared libs, define WXUSINGDLL to use dllimport.\n",
        "Line" : 555,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Search for available configuration types.\n",
        "Line" : 561,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# If the selected configuration wasn't found force the default\n\n# one. Otherwise, use it but still force a refresh for\n\n# updating the doc string with the current list of available\n\n# configurations.\n",
        "Line" : 575,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# If release config selected, and both release/debug exist.\n",
        "Line" : 587,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# If the option exists (already in cache), force it false.\n",
        "Line" : 593,
        "CharPositionInLine" : 10
      },
      "47" : {
        "Text" : "# Get configuration parameters from the name.\n",
        "Line" : 601,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# Set wxWidgets lib setup include directory.\n",
        "Line" : 604,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# Set wxWidgets main include directory.\n",
        "Line" : 613,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# Find wxWidgets libraries.\n",
        "Line" : 621,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# Settings for requested libs (i.e., include dir, libraries, etc.).\n",
        "Line" : 627,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# Add necessary definitions for unicode builds\n",
        "Line" : 630,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# Add necessary definitions for debug builds\n",
        "Line" : 635,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "#=====================================================================\n\n# UNIX_FIND_STYLE\n\n#=====================================================================\n",
        "Line" : 642,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#-----------------------------------------------------------------\n\n# UNIX: Helper MACROS\n\n#-----------------------------------------------------------------\n\n#\n\n# Set the default values based on \"wx-config --selected-config\".\n\n#\n",
        "Line" : 647,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "#\n\n# Query a boolean configuration option to determine if the system\n\n# has both builds available. If so, provide the selection option\n\n# to the user.\n\n#\n",
        "Line" : 677,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# If option exists (already in cache), force to available one.\n",
        "Line" : 702,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "#\n\n# Set wxWidgets_SELECT_OPTIONS to wx-config options for selecting\n\n# among multiple builds.\n\n#\n",
        "Line" : 713,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "#-----------------------------------------------------------------\n\n# UNIX: Start actual work.\n\n#-----------------------------------------------------------------\n\n# Support cross-compiling, only search in the target platform.\n",
        "Line" : 731,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# get defaults based on \"wx-config --selected-config\"\n",
        "Line" : 744,
        "CharPositionInLine" : 6
      },
      "61" : {
        "Text" : "# for each option: if both builds are available, provide option\n",
        "Line" : 747,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : "# process selection to set wxWidgets_SELECT_OPTIONS\n",
        "Line" : 753,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# run the wx-config program to get cxxflags\n",
        "Line" : 757,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# parse definitions from cxxflags;\n\n#   drop -D* from CXXFLAGS and the -D prefix\n",
        "Line" : 771,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "# parse include dirs from cxxflags; drop -I prefix\n",
        "Line" : 782,
        "CharPositionInLine" : 8
      },
      "66" : {
        "Text" : "# run the wx-config program to get the libs\n\n# - NOTE: wx-config doesn't verify that the libs requested exist\n\n#         it just produces the names. Maybe a TRY_COMPILE would\n\n#         be useful here...\n",
        "Line" : 800,
        "CharPositionInLine" : 6
      },
      "67" : {
        "Text" : "# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)\n",
        "Line" : 823,
        "CharPositionInLine" : 8
      },
      "68" : {
        "Text" : "# When using wx-config in MSYS, the include paths are UNIX style paths which may or may\n\n# not work correctly depending on you MSYS/MinGW configuration.  CMake expects native\n\n# paths internally.\n",
        "Line" : 838,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "#=====================================================================\n\n# Neither UNIX_FIND_STYLE, nor WIN32_FIND_STYLE\n\n#=====================================================================\n",
        "Line" : 868,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Check if a specfic version was requested by find_package().\n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Debug output:\n",
        "Line" : 904,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#=====================================================================\n\n#=====================================================================\n",
        "Line" : 912,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#=====================================================================\n\n# Macros for use in wxWidgets apps.\n\n# - This module will not fail to find wxWidgets based on the code\n\n#   below. Hence, it's required to check for validity of:\n\n#\n\n# wxWidgets_wxrc_EXECUTABLE\n\n#=====================================================================\n",
        "Line" : 922,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Resource file compiler.\n",
        "Line" : 930,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "#\n\n# WX_SPLIT_ARGUMENTS_ON(<keyword> <left> <right> <arg1> <arg2> ...)\n\n#\n\n# Sets <left> and <right> to contain arguments to the left and right,\n\n# respectively, of <keyword>.\n\n#\n\n# Example usage:\n\n#  function(WXWIDGETS_ADD_RESOURCES outfiles)\n\n#    WX_SPLIT_ARGUMENTS_ON(OPTIONS wxrc_files wxrc_options ${ARGN})\n\n#    ...\n\n#  endfunction()\n\n#\n\n#  WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o file.C)\n\n#\n\n# NOTE: This is a generic piece of code that should be renamed to\n\n# SPLIT_ARGUMENTS_ON and put in a file serving the same purpose as\n\n# FindPackageStandardArgs.cmake. At the time of this writing\n\n# FindQt4.cmake has a QT4_EXTRACT_OPTIONS, which I basically copied\n\n# here a bit more generalized. So, there are already two find modules\n\n# using this approach.\n\n#\n",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# FIXME: Document that the input variables will be cleared.\n\n#list(APPEND ${_leftvar}  \"\")\n\n#list(APPEND ${_rightvar} \"\")\n",
        "Line" : 958,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "#\n\n# WX_GET_DEPENDENCIES_FROM_XML(\n\n#   <depends>\n\n#   <match_pattern>\n\n#   <clean_pattern>\n\n#   <xml_contents>\n\n#   <depends_path>\n\n#   )\n\n#\n\n# FIXME: Add documentation here...\n\n#\n",
        "Line" : 981,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# make the file have an absolute path\n",
        "Line" : 1008,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# append file to dependency list\n",
        "Line" : 1013,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "#\n\n# WXWIDGETS_ADD_RESOURCES(<sources> <xrc_files>\n\n#                         OPTIONS <options> [NO_CPP_CODE])\n\n#\n\n# Adds a custom command for resource file compilation of the\n\n# <xrc_files> and appends the output files to <sources>.\n\n#\n\n# Example usages:\n\n#   WXWIDGETS_ADD_RESOURCES(sources xrc/main_frame.xrc)\n\n#   WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o altname.cxx)\n\n#\n",
        "Line" : 1020,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Parse files for dependencies.\n",
        "Line" : 1034,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# All files have absolute paths or paths relative to the location\n\n# of the rc file.\n",
        "Line" : 1043,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# get bitmap/bitmap2 files\n",
        "Line" : 1047,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# get url files\n",
        "Line" : 1056,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# get wxIcon files\n",
        "Line" : 1065,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "#\n\n# Parse options.\n\n#\n\n# If NO_CPP_CODE option specified, then produce .xrs file rather\n\n# than a .cpp file (i.e., don't add the default --cpp-code option).\n",
        "Line" : 1075,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# wxrc's default output filename for cpp code.\n",
        "Line" : 1083,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# wxrc's default output filename for xrs file.\n",
        "Line" : 1087,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# Get output name for use in ADD_CUSTOM_COMMAND.\n\n# - short option scanning\n",
        "Line" : 1091,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "#list(REMOVE_AT rc_options ${index} ${filename_index})\n",
        "Line" : 1097,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# - long option scanning\n",
        "Line" : 1099,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "#string(REGEX REPLACE \"--output=[^;]*;?\" \"\" rc_options \"${rc_options}\")\n\n#string(REGEX REPLACE \";$\" \"\" rc_options \"${rc_options}\")\n",
        "Line" : 1104,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Add generated header to output file list.\n",
        "Line" : 1116,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Add generated file to output file list.\n",
        "Line" : 1128,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 95
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "0ea868a566991e591bf9983de4ced73aa1155927",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory (all_tests)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/all_tests/CMakeLists.txt" : {
      "ObjectId" : "a8f62bff3de529ca867f5c3b1efd0ce4d203b529",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/core_tests/CMakeLists.txt" : {
      "ObjectId" : "0b9c8e702635785e36bff73c62aca15f4e33e8b6",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/router/CMakeLists.txt" : {
      "ObjectId" : "65d58252fd33f078a43d4633e3b15a60b4d0b766",
      "LastModified" : "2018-10-30T22:39:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 33
  },
  "ElapsedTime" : 667
}