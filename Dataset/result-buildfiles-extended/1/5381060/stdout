{
  "Repository" : "5381060",
  "Revision" : "HEAD",
  "ObjectId" : "abf0f0f809e54e665634520bc950380f66fe0bd4",
  "CommitTime" : "2019-02-08T10:09:53Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "54a56fe5bb647ef0b60795f7ce95ee4d6e7396d4",
      "LastModified" : "2019-02-08T02:05:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This makefile 'compiles' WebODF using various tools, instruments the code and\n\n# builds and packages programs that use WebODF.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# WebODF is mostly a JavaScript project. CMake needs to know about the C++ parts\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Require separate build dir\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tools must be obtained to work with:\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# At this point, the version number that is used throughout is defined\n\n# The version number is gotten from either the git repository or the name of the\n\n# folder. If the current folder has a name that matches \"webodf-\\d+.\\d+.\\d+\"\n\n# then that version number is used. If not, the folder should be a git folder\n\n# and have ability to get a tag.\n\n# The third option is to accept the version as cmake-parameter from the\n\n# outside, which overwrites the other two alternatives.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get version number from git\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# check version number from git\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#########################################################\n\n## Find installed dependencies\n\n#########################################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# java runtime is needed for Closure Compiler\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Node.js will be downloaded on Windows systems, so check for installed version is below\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#########################################################\n\n## Download stuff that is not commonly installed/packaged\n\n#########################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# allow specification of a directory with pre-downloaded\n\n# requirements by evaluating environment variable\n\n# $WEBODF_DOWNLOAD_DIR\n\n# defaults to \"./downloads\" in the build directory.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Closure Compiler\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Rhino\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# JSDoc\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Node.js\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# On windows, it is significantly faster and more reliable to download\n\n# a pre-built 32-bit binary\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Debian uses nodejs as binary name, due to conflict with node package (Amateur Packet Radio Node Program)\n\n# https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# fail if NodeJS version requirement is not satisfied\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# copy node_modules directory from source to build\n\n# (this is needed if a module is required in there)\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Node's search path for node_modules starts from the main package and works up towards the root.\n\n# In order to see these node modules, they need to be somewhere in this path\n\n# See http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders for more detail\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Android\n\n# If android sdk is properly installed, cmake only needs to know where to find\n\n# the executable 'android'.\n\n# The variable ANDROID_SDK_DIR can be provided if a specific android sdk version\n\n# is desired or if the android executable is not in the path.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# JSCoverage\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# JSCoverage only builds with Cygwin/MiniGW\n\n# Rather than force a dependency on a specific compiler, download binaries\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Dojo\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Dojo requires a patch on windows\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##############################\n\n## Define custom macros\n\n##############################\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# COPY_FILES (varname srcdir tgtdir files)\n\n# Creates a target that copies the listed files from the srcdir to the tgtdir,\n\n# preserving their relative path.\n\n# Absolute files will be copied into the root of tgtdir without any additional subdirs\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#############################\n\n## Define some files and dirs\n\n#############################\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# HEADERCOMPILED_FILE defines the file to use as header for the compiled WebODF library file.\n\n# Per default that is webodf/lib/HeaderCompiled.js\n\n# For release builds it can be overwritten by passing -DHEADERCOMPILED_FILE=/path/to/file\n\n# to cmake.\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "####################\n\n## WORKAROUND HELPER\n\n####################\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# cmake -E touch truncates time to seconds in older versions\n\n# see http://www.cmake.org/Bug/view.php?id=14020\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#############################\n\n## Build Library and programs\n\n#############################\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# the lib\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# the programs/components\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# vim:expandtab\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "attic/CMakeLists.txt" : {
      "ObjectId" : "4be50f553b48c7ef6fcfcd8700761010398a3b5f",
      "LastModified" : "2014-05-23T11:45:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "attic/programs/CMakeLists.txt" : {
      "ObjectId" : "2fbfeb11423c17301ee49606bb3ef56291b54ef5",
      "LastModified" : "2014-05-23T11:45:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "attic/programs/nativeQtClient/CMakeLists.txt" : {
      "ObjectId" : "dd72fad52abf662ebafcbeb3f798d5ed54a7d775",
      "LastModified" : "2014-05-23T11:45:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# creates a copy of the compiled webodf.js in the nativeQtClient build dir\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "attic/programs/playbook/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2014-05-23T11:45:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/CMakeLists.txt" : {
      "ObjectId" : "79ecd77440a5216acf6ae645055bc36d490a6d38",
      "LastModified" : "2015-04-21T14:57:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/benchmark/CMakeLists.txt" : {
      "ObjectId" : "b87976aa9453763150d3660db7ba066f2249f9c4",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# from webodf.js target (DEPENDS webodf.js)\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "programs/cordova/CMakeLists.txt" : {
      "ObjectId" : "2e8e3cfce722ded142e2f18fc682495523b6c924",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CORDOVA_FILES WebODF/config.xml)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install cordova in the top level node_modules directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create a project folder for WebODF cordova\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add the desired plugins\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add the android platforms to the WebODF cordova folder\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the firefoxos platforms to the WebODF cordova folder\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# build the android apk\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# build the firefoxos package\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "programs/docnosis/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/editor/CMakeLists.txt" : {
      "ObjectId" : "2ac508d2343037d3dafd1db146f33dfc57ddfa48",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# creates a copy of the compiled webodf.js in the editor build dir\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "####################\n\n## Dojo amalgamation\n\n####################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# from our sources\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# from dojo download (DEPENDS Dojo)\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# now do the dojo magic...\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# cleanup\n\n# COMMAND ${CMAKE_COMMAND} -E remove_directory dojo-deps/dist\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "####################\n\n## Dojo amalgamation\n\n####################\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##################\n\n## Wodo.TextEditor\n\n##################\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clean up output dir\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# dojo compiled\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# more dojo (data) files\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# package wodotexteditor\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# zip using javascript code running in node.js\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "###########################\n\n## Wodo.CollabTextEditor\n\n###########################\n\n# Needs more thinking still, interface not yet done\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# clean up output dir\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# dojo compiled\n",
        "Line" : 247,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# more dojo (data) files\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# package wodotexteditor\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# zip using javascript code running in node.js\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "################\n\n## Collab editor\n\n################\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# intermediate solution until session-based editor component and backends are sorted out\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "programs/firefoxextension/CMakeLists.txt" : {
      "ObjectId" : "29a40da5137efbff3045418197b38750802f9ffd",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the files that go into the extension\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# write webodf.js into viewer.html\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "programs/qtjsruntime/CMakeLists.txt" : {
      "ObjectId" : "da5f77f98b2cf119799ed61fe1e5e8c42fb13fed",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/touchui/CMakeLists.txt" : {
      "ObjectId" : "edfc1b10d0d217799059b3958dd947417ff5e078",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "webodf/CMakeLists.txt" : {
      "ObjectId" : "a3deff67d19430c8ee92f1bc188000abeaa9a4b8",
      "LastModified" : "2019-02-08T02:05:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# update the list of needed files\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Windows has a command-line limit of around 8,000 chars, so files to be compiled are supplied to CC using the --flagfile\n\n# option to help keep the length of the compilation command as small as possible.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    \"--new_type_inf\"\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# copy the flagfile for some targets which require the test files to be passed into CC\n\n# this requires a separate file as other targets don't want to compile the test files\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# nonStandardJsDocs is not used because we use @licstart @licend and @source\n\n# ideally we would enable --jscomp_error reportUnknownTypes\n\n# -XX:+TieredCompilation reduces compilation time by about 30%\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do quick syntax check on javascript files of webodf lib and webodf tests.\n\n# This compile uses no optimization and runs simple syntax tests. That is why\n\n# this target is mentioned early in the list of dependencies.\n\n# The result of this compilation is used in running tests with Node and Rhino.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# in WHITESPACE_ONLY mode, it is not possible to define IS_COMPILED_CODE\n\n# so the value for IS_COMPILED_CODE is set by find and replace in the code\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Compile code and tests with more strict settings.\n\n# This reports more syntax issues with the code and tests but cannot be used\n\n# to actually run the tests because the strong compilation gives broken code.\n\n# One of the things that break is that many more function and member names are\n\n# shortened. This is a problem in the tests where test status is determined\n\n# from code in strings.\n\n# See https://developers.google.com/closure/compiler/docs/limitations\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compile the optimized production version of WebODF.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include non-Closure Compiler compatible libraries with no further recompilation\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Compile the debug version of WebODF. This is also published as a product.\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# in WHITESPACE_ONLY mode, it is not possible to define IS_COMPILED_CODE\n\n# so the value for IS_COMPILED_CODE is set by find and replace in the code\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Include non-Closure Compiler compatible libraries with no further recompilation\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# rhino tests are disabled for now: rhino runtime lacks (wrappers for)\n\n# essential necessities such as Uint8Array, Node and NodeFilter\n\n# RHINOTEST is only defined here and hence undefined to disable rhinotest\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# clear working dir\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# API docs\n",
        "Line" : 347,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# webodf.js\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# zip using javascript code running in Node.js\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# vim:expandtab\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "webodf/tests/CMakeLists.txt" : {
      "ObjectId" : "1a88ce5e0fb7e5ea7c76991fdb1d099bf86a6d22",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create copy of list with path relative to this folder\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "webodf/tools/set_IS_COMPILED_CODE.cmake" : {
      "ObjectId" : "376e0d0d98b61197b7b599bbcfe4310ae67e542f",
      "LastModified" : "2015-06-01T06:58:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 16
  },
  "ElapsedTime" : 2057
}