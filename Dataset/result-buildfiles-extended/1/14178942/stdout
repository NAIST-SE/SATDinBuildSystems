{
  "Repository" : "14178942",
  "Revision" : "HEAD",
  "ObjectId" : "5b04ab52cdb03f710eff836e84f695446282848d",
  "CommitTime" : "2017-12-23T00:51:09Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4bfe3af8a60497e2f906f0752b0a6ad30e953ff0",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# requires a rather new version of cmake to correctly handle target_include_directories when compiling .cu files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "EagleEye/CMakeLists.txt" : {
      "ObjectId" : "ae9a2127a5cf319fcf5632e4a855c96681f0749b",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/BundleAdjustment/CMakeLists.txt" : {
      "ObjectId" : "ccfa54909346cd84a8aee0cf584f4ee254e65b5f",
      "LastModified" : "2017-03-09T05:05:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/CMakeLists.txt" : {
      "ObjectId" : "697e32426b0358a2425686ea20138859430ffa9e",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Caffe/CMakeLists.txt" : {
      "ObjectId" : "de759621c214e199ac0356e3280f1d820326ec69",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Core/CMakeLists.txt" : {
      "ObjectId" : "60aa25f8c5b571d2c5003e63ebd9d2194a058c8f",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Plugins/Dev/CMakeLists.txt" : {
      "ObjectId" : "087b58a93d6fdce06e7cfa7216d4ad36b1a58567",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Plugins/Flann/CMakeLists.txt" : {
      "ObjectId" : "583f6e7e74bb0a63f818a01f88b22bb4d39fb2f4",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set_target_properties(${OpenCV_LIBS} PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "Plugins/Flann/cmake/FindFlann.cmake" : {
      "ObjectId" : "49edbf0a83d57886c382114e24b4c6d17d2dee02",
      "LastModified" : "2017-03-09T05:05:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# Find Flann\n\n#\n\n# This sets the following variables:\n\n# FLANN_FOUND - True if FLANN was found.\n\n# FLANN_INCLUDE_DIRS - Directories containing the FLANN include files.\n\n# FLANN_LIBRARIES - Libraries needed to use FLANN.\n\n# FLANN_DEFINITIONS - Compiler flags for FLANN.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Plugins/GStreamer/CMakeLists.txt" : {
      "ObjectId" : "e368fdae36b6395a1f18f6e64aeec2adf1e1bab4",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_DEFINITIONS(-DPROJECT_INCLUDES=\"${PROJECT_INCLUDES}\")\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "Plugins/ML/CMakeLists.txt" : {
      "ObjectId" : "0de73511876ca6db607295a883526c3080e606e5",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Plugins/MXnet/CMakeLists.txt" : {
      "ObjectId" : "b8c6fa51db381848f7161b5da0da4cee91bb78ee",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/MXnet/cmake/FindOpenBLAS.cmake" : {
      "ObjectId" : "09210ec92ca81aa89db0ce42eeaaded3e98a4dc5",
      "LastModified" : "2017-03-10T16:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Check include files\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check libraries\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Plugins/MXnet/cmake/Findmxnet.cmake" : {
      "ObjectId" : "ca030b21105d1685b70b544e348127f24eb17bf9",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if debug not found, link to release build in debug config\n",
        "Line" : 135,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 1
    },
    "Plugins/Plotting/CMakeLists.txt" : {
      "ObjectId" : "aff02f9a2ccc5a7f406e347712541dc1a39967b8",
      "LastModified" : "2017-05-24T02:00:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Plotting/qcustomplot/CMakeLists.txt" : {
      "ObjectId" : "908a322dee2ca035f55b9ffb6b9e741a7d8b504c",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/PluginTemplate.cmake" : {
      "ObjectId" : "c6b1d2a472b141602e8d88eb12306dca834bd060",
      "LastModified" : "2017-08-19T15:16:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# return code of 0 if success\n",
        "Line" : 95,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : "# check if it's an SVN repoo\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# return code is 0 if success\n",
        "Line" : 136,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : "# ============= Write out a file containing external include info\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# wndows link libs\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "Plugins/ROS/CMakeLists.txt" : {
      "ObjectId" : "c0dabcdae9516bffa510cdc6591a23851d58349f",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/SLAM/CMakeLists.txt" : {
      "ObjectId" : "1ea399980fb198f66444223602a53fd8becb7416",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Plugins/Segmentation/CMakeLists.txt" : {
      "ObjectId" : "d2d08605a09ace1f3de13dc2a10767a9982c6083",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Plugins/VLC/CMakeLists.txt" : {
      "ObjectId" : "14b111290a1a854a60c98e7936a43225ffce4a06",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "Plugins/cntk/CMakeLists.txt" : {
      "ObjectId" : "c6575ce0cbff8de126616ad18b6c1f7f6b12cc38",
      "LastModified" : "2017-06-04T17:42:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##### find cntk\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##### end find cntk\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Plugins/darknet/CMakeLists.txt" : {
      "ObjectId" : "e03796d91feccc541e2f6a3b701f3d084af7f020",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/frame_grabber_openni2/CMakeLists.txt" : {
      "ObjectId" : "d5e08b505ff062efeeaee77db1608ffa4d116fa3",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/frame_grabber_openni2/cmake/FindOpenNI2.cmake" : {
      "ObjectId" : "1827050d37e06eb51af0e54f6931e815044fe11b",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Main variables:\n\n# OPENNI2_LIBRARY and OPENNI2_INCLUDES to link OpenCV modules with OpenNI2\n\n# HAVE_OPENNI2 for conditional compilation OpenCV with/without OpenNI2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#unset(OPENNI2_INCLUDES CACHE)\n\n#unset(OPENNI2_INCLUDE_DIR CACHE)\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#if(OPENNI2_LIBRARY AND OPENNI2_INCLUDES)\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "Plugins/frame_grabbers/CMakeLists.txt" : {
      "ObjectId" : "044e8bc5734518f209d087b365d2c11e370a444a",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ------------- tests\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Plugins/frame_grabbers/tests/CMakeLists.txt" : {
      "ObjectId" : "abe24964d7881c3dc1bf774e1caff7b72deda596",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/freenect/CMakeLists.txt" : {
      "ObjectId" : "115c76af1943c22e1b6df7ea5e6eef8d496f0404",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(BOOST_REQUIRED_MODULES system filesystem thread date_time iostreams chrono)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "Plugins/freenect/cmake/Findlibfreenect.cmake" : {
      "ObjectId" : "f6cab495fb1fbed1984aee3a0e2c4736a6bf4f7a",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  Adapted from cmake-modules Google Code project\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  (Changes for libfreenect) Copyright (c) 2011 Yannis Gravezas <wizgrav@infrael.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n#\n\n# CMake-Modules Project New BSD License\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the name of the CMake-Modules Project nor the names of its\n\n#   contributors may be used to endorse or promote products derived from this\n\n#   software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the LIBFREENECT_INCLUDE_DIRS and LIBFREENECT_LIBRARIES variables only in the advanced view\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "Plugins/freenect/cmake/Findlibusb-1.0.cmake" : {
      "ObjectId" : "ec40055af8a4acb3c983e9fcfecf7960d0ab2461",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libusb-1.0\n\n# Once done this will define\n\n#\n\n#  LIBUSB_1_FOUND - system has libusb\n\n#  LIBUSB_1_INCLUDE_DIRS - the libusb include directory\n\n#  LIBUSB_1_LIBRARIES - Link these to use libusb\n\n#  LIBUSB_1_DEFINITIONS - Compiler switches required for using libusb\n\n#\n\n#  Adapted from cmake-modules Google Code project\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  (Changes for libusb) Copyright (c) 2008 Kyle Machulis <kyle@nonpolynomial.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n#\n\n# CMake-Modules Project New BSD License\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the name of the CMake-Modules Project nor the names of its\n\n#   contributors may be used to endorse or promote products derived from this\n\n#   software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the LIBUSB_1_INCLUDE_DIRS and LIBUSB_1_LIBRARIES variables only in the advanced view\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "Plugins/point_clouds/CMakeLists.txt" : {
      "ObjectId" : "2e4ba6b154345a1a8c5d2ec613f91f31a520c5ee",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${VTK_LIBRARIES}\n\n#${VTK_LIBS}\n",
        "Line" : 19,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "Plugins/video/CMakeLists.txt" : {
      "ObjectId" : "2fb1889feec3643aef78f703e5be8e5e38a2f457",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INCLUDE(../PluginTemplate.cmake)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Plugins/vtkRendering/CMakeLists.txt" : {
      "ObjectId" : "6df530172ea246abae9ae31761415ab868287ef9",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add precompiled header to SourcesVar\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake/FindCUDNN.cmake" : {
      "ObjectId" : "753d915cf26c164f1abaa8f94fb3521e141cc6c2",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGStreamer_0_10.cmake" : {
      "ObjectId" : "a70727bccb923e84b455b5b50f54416b20f19858",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GStreamer\n\n# Once done this will define\n\n#\n\n#  GSTREAMER_0_10_FOUND - system has GStreamer\n\n#  GSTREAMER_0_10_INCLUDE_DIRS - the GStreamer include directory\n\n#  GSTREAMER_0_10_LIBRARIES - the libraries needed to use GStreamer\n\n#  GSTREAMER_0_10_DEFINITIONS - Compiler switches required for using GStreamer\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Tim Beaulen <tbscope@gmail.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Other versions --> GSTREAMER_X_Y_FOUND (Example: GSTREAMER_0_8_FOUND and GSTREAMER_0_10_FOUND etc)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# in cache already\n",
        "Line" : 17,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 24,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: GStreamer include directory = ${GSTREAMER_0_10_INCLUDE_DIRSS}\")\n\n#MESSAGE(STATUS \"DEBUG: GStreamer link directory = ${GSTREAMER_0_10_LIBRARY_DIRS}\")\n\n#MESSAGE(STATUS \"DEBUG: GStreamer CFlags = ${GSTREAMER_0_10_CFLAGS_OTHER}\") \n",
        "Line" : 28,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#PATH_SUFFIXES gst\n",
        "Line" : 38,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: Found GStreamer include dir: ${GSTREAMER_0_10_INCLUDE_DIRS}\")\n",
        "Line" : 69,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: Found GStreamer library: ${GSTREAMER_0_10_LIBRARIES}\")\n",
        "Line" : 75,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#MESSAGE(STATUS \"DEBUG: Found GStreamer interface library: ${GSTREAMER_0_10_INTERFACE_LIBRARY}\")\n",
        "Line" : 81,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 10
    },
    "cmake/FindGStreamer_1_0.cmake" : {
      "ObjectId" : "abdd178b2ddaefafb4d2f25459248944f0c2b880",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Gstreamer and its plugins\n\n# Once done, this will define\n\n#\n\n#  GSTREAMER_1_0_FOUND - system has Gstreamer\n\n#  GSTREAMER_1_0_INCLUDE_DIRS - the Gstreamer include directories\n\n#  GSTREAMER_1_0_LIBRARIES - link these to use Gstreamer\n\n#\n\n# Additionally, gstreamer-base is always looked for and required, and\n\n# the following related variables are defined:\n\n#\n\n#  GSTREAMER_1_0_BASE_INCLUDE_DIRS - gstreamer-base's include directory\n\n#  GSTREAMER_1_0_BASE_LIBRARIES - link to these to use gstreamer-base\n\n#\n\n# Optionally, the COMPONENTS keyword can be passed to find_package()\n\n# and Gstreamer plugins can be looked for.  Currently, the following\n\n# plugins can be searched, and they define the following variables if\n\n# found:\n\n#\n\n#  gstreamer-app:        GSTREAMER_1_0_APP_INCLUDE_DIRS and GSTREAMER_1_0_APP_LIBRARIES\n\n#  gstreamer-audio:      GSTREAMER_1_0_AUDIO_INCLUDE_DIRS and GSTREAMER_1_0_AUDIO_LIBRARIES\n\n#  gstreamer-fft:        GSTREAMER_1_0_FFT_INCLUDE_DIRS and GSTREAMER_1_0_FFT_LIBRARIES\n\n#  gstreamer-pbutils:    GSTREAMER_1_0_PBUTILS_INCLUDE_DIRS and GSTREAMER_1_0_PBUTILS_LIBRARIES\n\n#  gstreamer-video:      GSTREAMER_1_0_VIDEO_INCLUDE_DIRS and GSTREAMER_1_0_VIDEO_LIBRARIES\n\n#\n\n# Copyright (C) 2012 Raphael Kubo da Costa <rakuco@webkit.org>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1.  Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n# 2.  Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS\n\n# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The minimum Gstreamer version we support.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Helper macro to find a Gstreamer plugin (or Gstreamer itself)\n\n#   _component_prefix is prepended to the _INCLUDE_DIRS and _LIBRARIES variables (eg. \"GSTREAMER_1_0_AUDIO\")\n\n#   _pkgconfig_name is the component's pkg-config name (eg. \"gstreamer-1.0\", or \"gstreamer-video-1.0\").\n\n#   _header is the component's header, relative to the gstreamer-1.0 directory (eg. \"gst/gst.h\").\n\n#   _library is the component's library name (eg. \"gstreamer-1.0\" or \"gstvideo-1.0\")\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME: The QUIET keyword can be used once we require CMake 2.8.2.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# ------------------------\n\n# 1. Find Gstreamer itself\n\n# ------------------------\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# 1.1. Find headers and libraries\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 1.2. Check Gstreamer version\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# FIXME: With CMake 2.8.3 we can just pass GSTREAMER_1_0_VERSION to FIND_PACKAGE_HANDLE_STANDARD_ARGS as VERSION_VAR\n\n#        and remove the version check here (GSTREAMER_1_0_MINIMUM_VERSION would be passed to FIND_PACKAGE).\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# -------------------------\n\n# 2. Find Gstreamer plugins\n\n# -------------------------\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ------------------------------------------------\n\n# 3. Process the COMPONENTS passed to FIND_PACKAGE\n\n# ------------------------------------------------\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindGlib.cmake" : {
      "ObjectId" : "79e0ff2d14b94dccbb681a4e212710257b699044",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glib-2.0 (with gobject)\n\n# Once done, this will define\n\n#\n\n#  Glib_FOUND - system has Glib\n\n#  Glib_INCLUDE_DIRS - the Glib include directories\n\n#  Glib_LIBRARIES - link these to use Glib\n\n#\n\n#  GLIB_ROOT_DIR - Primary search directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use pkg-config to get hints about paths\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Main include dir\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Glib-related libraries also use a separate config header, which is relative to lib dir\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindGstreamer.cmake" : {
      "ObjectId" : "35473abb9a1c93bd4fd9f75007980b4b0f9f1aef",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindGstreamerWindows.cmake" : {
      "ObjectId" : "c6ec26097fcdd70d4cd06170fe6c7dab9be90439",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FIND_LIBRARY(GSTREAMER_gstdataprotocol_LIBRARY NAMES gstdataprotocol libgstdataprotocol-1.0 gstdataprotocol-1.0\n\n#                                               PATHS ${GSTREAMER_DIR}/bin ${GSTREAMER_DIR}/lib ${GSTREAMER_DIR}/win32/bin ${GSTREAMER_DIR}/bin/bin C:/gstreamer/bin ${GSTREAMER_DIR}/lib ${GSTREAMER_DIR}/win32/lib /usr/local/lib /usr/lib\n\n#                                               ENV LIB\n\n#                                               DOC \"gstdataprotocol library to link with\"\n\n#                                               NO_SYSTEM_ENVIRONMENT_PATH)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FIND_LIBRARY(GSTREAMER_gstinterfaces_LIBRARY NAMES gstinterfaces libgstinterfaces-1.0 gstinterfaces-1.0\n\n#                                             PATHS ${GSTREAMER_DIR}/bin ${GSTREAMER_DIR}/lib ${GSTREAMER_DIR}/win32/bin ${GSTREAMER_DIR}/bin/bin C:/gstreamer/bin ${GSTREAMER_DIR}/lib ${GSTREAMER_DIR}/win32/lib /usr/local/lib /usr/lib\n\n#                                             ENV LIB\n\n#                                             DOC \"gstinterfaces library to link with\"\n\n#                                             NO_SYSTEM_ENVIRONMENT_PATH)\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FIND_LIBRARY(GSTREAMER_gstnetbuffer_LIBRARY NAMES gstnetbuffer libgstnetbuffer-1.0 gstnetbuffer-1.0\n\n#                                            PATHS ${GSTREAMER_DIR}/bin ${GSTREAMER_DIR}/lib ${GSTREAMER_DIR}/win32/bin ${GSTREAMER_DIR}/bin/bin C:/gstreamer/bin ${GSTREAMER_DIR}/lib ${GSTREAMER_DIR}/win32/lib /usr/local/lib /usr/lib\n\n#                                            ENV LIB\n\n#                                            DOC \"gstnetbuffer library to link with\"\n\n#                                            NO_SYSTEM_ENVIRONMENT_PATH)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindLibVLC.cmake" : {
      "ObjectId" : "8fa60b8b29f66617fccb031dfee90aa32c3fe413",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake module to search for LIBVLC (VLC library)\n\n# Authors: Rohit Yadav <rohityadav89@gmail.com>\n\n#          Harald Sitter <apachelogger@ubuntu.com>\n\n#\n\n# If it's found it sets LIBVLC_FOUND to TRUE\n\n# and following variables are set:\n\n#    LIBVLC_INCLUDE_DIR\n\n#    LIBVLC_LIBRARY\n\n#    LIBVLC_VERSION\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find_path and find_library normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Put here path to custom location\n\n#example: /home/user/vlc/include etc..\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#mingw\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Put here path to custom location\n\n#example: /home/user/vlc/lib etc..\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: implement means to detect version on windows (vlc --version && regex? ... ultimately we would get it from a header though...)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: only activate once version detection can be garunteed (which is currently not the case on windows)\n\n#     set(LIBVLC_FOUND FALSE)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindNVToolsExt.cmake" : {
      "ObjectId" : "d7464bbb0e8cb41d0cc00dfcfadb073286e9b068",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindTensorFlow.cmake" : {
      "ObjectId" : "9e3bd7dc2af90cc94d30a64340a4ccf2eb060689",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locates the tensorFlow library and include directories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#third_party\n",
        "Line" : 12,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# set TensorFlow_FOUND\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set external variables for usage in CMakeLists.txt\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# hide locals from GUI\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindWt.cmake" : {
      "ObjectId" : "93ba88ee3d0c74f910ff4ac7606f81fa19efafc5",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Wt includes and libraries\n\n#\n\n# This script sets the following variables:\n\n#\n\n#  Wt_INCLUDE_DIR\n\n#  Wt_LIBRARIES  - Release libraries\n\n#  Wt_FOUND  - True if release libraries found\n\n#  Wt_DEBUG_LIBRARIES  - Debug libraries\n\n#  Wt_DEBUG_FOUND  - True if debug libraries found\n\n#\n\n# To direct the script to a particular Wt installation, use the\n\n# standard cmake variables CMAKE_INCLUDE_PATH and CMAKE_LIBRARY_PATH\n\n#\n\n# To use this script to find Wt, when using the new style for include files:\n\n#   #include <Wt/WLineEdit>\n\n#   #include <Wt/Ext/LineEdit>\n\n#   #include <Wt/Chart/WPieChart>\n\n#\n\n# include the following CMake snippet in your project:\n\n#\n\n#  FIND_PACKAGE( Wt REQUIRED )\n\n#  INCLUDE_DIRECTORIES( ${Wt_INCLUDE_DIR} )\n\n#  TARGET_LINK_LIBRARIES( yourexe\n\n#    ${Wt_DEBUG_LIBRARY}        # or {Wt_LIBRARY}\n\n#    ${Wt_HTTP_DEBUG_LIBRARY}   # or {Wt_HTTP_LIBRARY}\n\n#    ${Wt_EXT_DEBUG_LIBRARY}    # or {Wt_EXT_LIBRARY}\n\n#  )\n\n#\n\n# To use this script to find Wt, when using the old include style:\n\n#   #include <WLineEdit>\n\n#   #include <Ext/LineEdit>\n\n#   #include <Chart/WPieChart>\n\n# style of include files, change the INCLUDE_DIRECTORIES statement to:\n\n#   INCLUDE_DIRECTORIES( ${Wt_INCLUDE_DIR} ${Wt_INCLUDE_DIR}/Wt )\n\n#\n\n#\n\n#\n\n#\n\n# Copyright (c) 2007, Pau Garcia i Quiles, <pgquiles@elpauer.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/LibFindMacros.cmake" : {
      "ObjectId" : "6252ec767178857f1c6de252fba1a0e4ce4975bd",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Breaks up a string in the form n1.n2.n3 into three parts and stores\n\n# them in major, minor, and patch.\tversion should be a value, not a\n\n# variable, while major, minor and patch should be variables.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/Utils.cmake" : {
      "ObjectId" : "0fcd187d97884becda62adb3d01bc221a1286199",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/cotire.cmake" : {
      "ObjectId" : "d63b290e9aad7deb857438993882b2410ba1ed89",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2015 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Compiler id for Apple Clang is now AppleClang\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disallow use of the LOCATION target property\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 95,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 129,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 204,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 214,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# remove from head\n",
        "Line" : 327,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# process transitive libraries\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with separate argument\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# remember option\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# option with joined argument\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# flush remembered option\n",
        "Line" : 369,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 394,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# add target compile flags\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# target compile options\n",
        "Line" : 416,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 423,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# handle language standard properties\n",
        "Line" : 434,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 455,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# handle visibility target properties\n",
        "Line" : 467,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# platform specific flags\n",
        "Line" : 478,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# default include dirs\n",
        "Line" : 513,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 520,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# parse additional system include directories from target compile flags\n",
        "Line" : 532,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# target include directories\n",
        "Line" : 544,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 556,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 626,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# target export define symbol\n",
        "Line" : 630,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 635,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# target compile definitions\n",
        "Line" : 644,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 653,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 662,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 678,
        "CharPositionInLine" : 1
      },
      "48" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 911,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 955,
        "CharPositionInLine" : 3
      },
      "50" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 963,
        "CharPositionInLine" : 1
      },
      "51" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 966,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# header is outside\n",
        "Line" : 980,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 991,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# check header file extension\n",
        "Line" : 1001,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 1014,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 1019,
        "CharPositionInLine" : 3
      },
      "57" : {
        "Text" : "# GCC like output\n",
        "Line" : 1028,
        "CharPositionInLine" : 3
      },
      "58" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 1044,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# canonize slashes\n",
        "Line" : 1047,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 1049,
        "CharPositionInLine" : 1
      },
      "61" : {
        "Text" : "# then separate lines\n",
        "Line" : 1051,
        "CharPositionInLine" : 1
      },
      "62" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 1054,
        "CharPositionInLine" : 1
      },
      "63" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 1072,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# update stack\n",
        "Line" : 1082,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 1098,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 1100,
        "CharPositionInLine" : 5
      },
      "67" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1107,
        "CharPositionInLine" : 5
      },
      "68" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1116,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1128,
        "CharPositionInLine" : 5
      },
      "70" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1166,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1182,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1330,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# create empty log file\n",
        "Line" : 1371,
        "CharPositionInLine" : 3
      },
      "74" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1387,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1421,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# append to list\n",
        "Line" : 1430,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1433,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1437,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# append to list\n",
        "Line" : 1442,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1448,
        "CharPositionInLine" : 3
      },
      "81" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1455,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# append to list\n",
        "Line" : 1460,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1463,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1468,
        "CharPositionInLine" : 3
      },
      "85" : {
        "Text" : "# append to list\n",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1480,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1484,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# append to list\n",
        "Line" : 1489,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1495,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1514,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# append to list\n",
        "Line" : 1525,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1532,
        "CharPositionInLine" : 3
      },
      "93" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1539,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# append to list\n",
        "Line" : 1548,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1551,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1559,
        "CharPositionInLine" : 3
      },
      "97" : {
        "Text" : "# append to list\n",
        "Line" : 1571,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1578,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1585,
        "CharPositionInLine" : 3
      },
      "100" : {
        "Text" : "# append to list\n",
        "Line" : 1596,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1605,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1622,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# append to list\n",
        "Line" : 1630,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1636,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1643,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# append to list\n",
        "Line" : 1645,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1648,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1653,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# append to list\n",
        "Line" : 1658,
        "CharPositionInLine" : 3
      },
      "110" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1661,
        "CharPositionInLine" : 3
      },
      "111" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1665,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# append to list\n",
        "Line" : 1671,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1674,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1680,
        "CharPositionInLine" : 3
      },
      "115" : {
        "Text" : "# append to list\n",
        "Line" : 1688,
        "CharPositionInLine" : 5
      },
      "116" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1694,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1701,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# append to list\n",
        "Line" : 1703,
        "CharPositionInLine" : 5
      },
      "119" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1706,
        "CharPositionInLine" : 5
      },
      "120" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1711,
        "CharPositionInLine" : 3
      },
      "121" : {
        "Text" : "# append to list\n",
        "Line" : 1720,
        "CharPositionInLine" : 5
      },
      "122" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1726,
        "CharPositionInLine" : 5
      },
      "123" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1733,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# append to list\n",
        "Line" : 1735,
        "CharPositionInLine" : 5
      },
      "125" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1738,
        "CharPositionInLine" : 5
      },
      "126" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1775,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1791,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1795,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1802,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1805,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1822,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1841,
        "CharPositionInLine" : 1
      },
      "133" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1884,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1895,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1898,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1969,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1974,
        "CharPositionInLine" : 4
      },
      "138" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 1977,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1980,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 1983,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 2015,
        "CharPositionInLine" : 1
      },
      "142" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 2019,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 2024,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 2041,
        "CharPositionInLine" : 1
      },
      "145" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 2054,
        "CharPositionInLine" : 1
      },
      "146" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 2078,
        "CharPositionInLine" : 1
      },
      "147" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 2083,
        "CharPositionInLine" : 3
      },
      "148" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 2090,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "# omit COTIRE_*_INIT variables\n",
        "Line" : 2093,
        "CharPositionInLine" : 1
      },
      "150" : {
        "Text" : "# omit COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2098,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "# generate target script file\n",
        "Line" : 2121,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2126,
        "CharPositionInLine" : 2
      },
      "153" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2140,
        "CharPositionInLine" : 2
      },
      "154" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2149,
        "CharPositionInLine" : 3
      },
      "155" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2151,
        "CharPositionInLine" : 3
      },
      "156" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2155,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2178,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2183,
        "CharPositionInLine" : 3
      },
      "159" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2190,
        "CharPositionInLine" : 3
      },
      "160" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2196,
        "CharPositionInLine" : 3
      },
      "161" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2203,
        "CharPositionInLine" : 3
      },
      "162" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2206,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2213,
        "CharPositionInLine" : 1
      },
      "164" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2220,
        "CharPositionInLine" : 1
      },
      "165" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2222,
        "CharPositionInLine" : 1
      },
      "166" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2282,
        "CharPositionInLine" : 2
      },
      "167" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2293,
        "CharPositionInLine" : 3
      },
      "168" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2304,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2312,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2316,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2320,
        "CharPositionInLine" : 3
      },
      "172" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2342,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2348,
        "CharPositionInLine" : 3
      },
      "174" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2357,
        "CharPositionInLine" : 3
      },
      "175" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2365,
        "CharPositionInLine" : 3
      },
      "176" : {
        "Text" : "# prevent pre-processing errors upon generating the prefix header when a target's generated include file does not yet exist\n\n# we do not add a file-level dependency for the target's generated files though, because we only want to depend on their existence\n\n# thus we make the prefix header generation depend on a custom helper target which triggers the generation of the files\n",
        "Line" : 2401,
        "CharPositionInLine" : 1
      },
      "177" : {
        "Text" : "# custom helper target has already been generated while processing a different language\n",
        "Line" : 2406,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2431,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2440,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2449,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2456,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2629,
        "CharPositionInLine" : 3
      },
      "183" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2633,
        "CharPositionInLine" : 3
      },
      "184" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2647,
        "CharPositionInLine" : 3
      },
      "185" : {
        "Text" : "# use all available cores\n",
        "Line" : 2667,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2692,
        "CharPositionInLine" : 1
      },
      "187" : {
        "Text" : "# set up unity files for parallel compilation\n",
        "Line" : 2699,
        "CharPositionInLine" : 1
      },
      "188" : {
        "Text" : "# set up single unity file for prefix header generation\n",
        "Line" : 2709,
        "CharPositionInLine" : 1
      },
      "189" : {
        "Text" : "# set up prefix header\n",
        "Line" : 2714,
        "CharPositionInLine" : 1
      },
      "190" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2716,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2725,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2735,
        "CharPositionInLine" : 4
      },
      "193" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2742,
        "CharPositionInLine" : 3
      },
      "194" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2746,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2774,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2779,
        "CharPositionInLine" : 4
      },
      "197" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2794,
        "CharPositionInLine" : 2
      },
      "198" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2805,
        "CharPositionInLine" : 3
      },
      "199" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2813,
        "CharPositionInLine" : 3
      },
      "200" : {
        "Text" : "# user provided prefix header must be included unconditionally by unity sources\n",
        "Line" : 2827,
        "CharPositionInLine" : 4
      },
      "201" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2839,
        "CharPositionInLine" : 1
      },
      "202" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2849,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2852,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2857,
        "CharPositionInLine" : 2
      },
      "205" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2862,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# generate unity target\n",
        "Line" : 2869,
        "CharPositionInLine" : 1
      },
      "207" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2876,
        "CharPositionInLine" : 2
      },
      "208" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2879,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2889,
        "CharPositionInLine" : 3
      },
      "210" : {
        "Text" : "# copy output name\n",
        "Line" : 2914,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2922,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# copy compile features\n",
        "Line" : 2933,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2938,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2946,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2956,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 2959,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 2964,
        "CharPositionInLine" : 1
      },
      "218" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 2978,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2986,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2991,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# trivial checks\n",
        "Line" : 3015,
        "CharPositionInLine" : 1
      },
      "222" : {
        "Text" : "# resolve alias\n",
        "Line" : 3021,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 3029,
        "CharPositionInLine" : 1
      },
      "224" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 3045,
        "CharPositionInLine" : 1
      },
      "225" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 3050,
        "CharPositionInLine" : 1
      },
      "226" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 3084,
        "CharPositionInLine" : 3
      },
      "227" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 3133,
        "CharPositionInLine" : 1
      },
      "228" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3220,
        "CharPositionInLine" : 1
      },
      "229" : {
        "Text" : "# include target script if available\n",
        "Line" : 3232,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3234,
        "CharPositionInLine" : 2
      },
      "231" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3250,
        "CharPositionInLine" : 1
      },
      "232" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3270,
        "CharPositionInLine" : 3
      },
      "233" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3273,
        "CharPositionInLine" : 3
      },
      "234" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3292,
        "CharPositionInLine" : 3
      },
      "235" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3295,
        "CharPositionInLine" : 3
      },
      "236" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3361,
        "CharPositionInLine" : 3
      },
      "237" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3364,
        "CharPositionInLine" : 3
      },
      "238" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3387,
        "CharPositionInLine" : 1
      },
      "239" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3424,
        "CharPositionInLine" : 3
      },
      "240" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 170 percent (128 MB)\n",
        "Line" : 3458,
        "CharPositionInLine" : 2
      },
      "241" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3472,
        "CharPositionInLine" : 3
      },
      "242" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3479,
        "CharPositionInLine" : 1
      },
      "243" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3532,
        "CharPositionInLine" : 1
      },
      "244" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3604,
        "CharPositionInLine" : 1
      },
      "245" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3768,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 246
    },
    "samples/CMakeLists.txt" : {
      "ObjectId" : "4538826bc35f1af10ee1c1b18ee8b80593bd88d7",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(WebUi)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "samples/PythonInteractive/CMakeLists.txt" : {
      "ObjectId" : "92dedde9330a258597052ac07591bd287fb09fc4",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(CAFFE_RELEASE \"${Caffe_DIR}/../../bin\" CACHE PATH \"\")\n\n#SET(CAFFE_DEBUG \"${Caffe_DIR}/../../bin\" CACHE PATH \"\")\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "samples/SimpleConsole/CMakeLists.txt" : {
      "ObjectId" : "efdcb1588e4886902221aad0335dcd64888e92af",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/WebUi/CMakeLists.txt" : {
      "ObjectId" : "bcd5e296e054807b3fda8bdec909393c668a0bde",
      "LastModified" : "2017-08-10T23:22:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "c93886550cc90d5330a9f2fa89149aa1cada616c",
      "LastModified" : "2017-12-23T00:51:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 51
  },
  "ElapsedTime" : 1283
}