{
  "Repository" : "100022",
  "Revision" : "HEAD",
  "ObjectId" : "e03507f69b7d919856a123d97be898116bc7ea74",
  "CommitTime" : "2018-06-09T21:42:32Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "d3429e3be053d0b79e3229c952dc38d7963ae197",
      "LastModified" : "2014-06-24T16:06:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "automation/Makefile" : {
      "ObjectId" : "76c7dd992685b9166386fb4d11e2757a3d201b1c",
      "LastModified" : "2017-03-30T17:08:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "libaegisub/Makefile" : {
      "ObjectId" : "76fc8d6e4f813d6b794d2b50b7c00b46b5d80afc",
      "LastModified" : "2018-03-05T17:28:29Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "packages/desktop/Makefile" : {
      "ObjectId" : "47a21a63af2c140410bc1187a67278f395c881a3",
      "LastModified" : "2017-03-30T17:08:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "po/Makefile" : {
      "ObjectId" : "4c7832b6aa5ea33e2f1de600f0017cff55a0efb3",
      "LastModified" : "2014-06-17T18:37:20Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Makefile" : {
      "ObjectId" : "38a809c06763e90817596e93de6b04987e899734",
      "LastModified" : "2018-03-05T17:28:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###############\n\n# AUDIO PLAYERS\n\n###############\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#######################\n\n# AUDIO / VIDEO SUPPORT\n\n#######################\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############\n\n# MISCELLANOUS\n\n##############\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#####################\n\n# SOURCE-LEVEL CFLAGS\n\n#####################\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/libresrc/Makefile" : {
      "ObjectId" : "8b6d19595c98d1f11e67ef5699691c3db14afbb9",
      "LastModified" : "2017-03-30T17:08:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tests/Makefile" : {
      "ObjectId" : "137430854889a855dcd0eb9d18c0c5736c8eaa01",
      "LastModified" : "2018-03-05T17:28:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This bit of goofiness is to make it only try to build the tests if google\n\n# test can be found and silently skip it if not, by using $(wildcard) to check\n\n# for file existence\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/Makefile" : {
      "ObjectId" : "de6166a1eaf4202ee58c0b7602683eb7ce4aff91",
      "LastModified" : "2017-03-30T17:08:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "vendor/csri/Makefile.am" : {
      "ObjectId" : "1c0752cc5e59a880c759612ff5a0bf7c4b0f1466",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/ac/Makefile.am" : {
      "ObjectId" : "c8c87da1a3518a1f228ad30adb8f0047e79e5484",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/backends/Makefile.am" : {
      "ObjectId" : "514d9a69d3cb5f0876fc26eaab3a1c8984b43f21",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/backends/libass/Makefile.am" : {
      "ObjectId" : "9ec4801fbfa0c5875ed1274b4dfc4561565fa6dc",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/frontends/Makefile.am" : {
      "ObjectId" : "9676881c32c859c4e85c7e3d53840ed3ad334872",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/frontends/avisynth25/Makefile.am" : {
      "ObjectId" : "b5977f0a71ee3de7b509360c978f4e671696b20a",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/frontends/cmdline/Makefile.am" : {
      "ObjectId" : "10a3845637287d9552c6d2a083b05b6f1587149a",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/include/Makefile.am" : {
      "ObjectId" : "7ed1e0f9172179f85aa707de7f3a0ae3c8872f11",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/lib/Makefile.am" : {
      "ObjectId" : "7bea258d35bef1320090725a19a5759c739a2d7b",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/csri/subhelp/Makefile.am" : {
      "ObjectId" : "449853cd6f7ae1ccb11c2389107ab422e61abcf1",
      "LastModified" : "2014-03-11T19:14:57Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "vendor/luabins/Makefile" : {
      "ObjectId" : "b4b01036e3132cd8d365bf44cdf1c8b10e6e2d84",
      "LastModified" : "2018-03-05T17:28:29Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "vendor/luajit/Makefile" : {
      "ObjectId" : "67c67f727519264e2aaa8024fb483c4ba83b942a",
      "LastModified" : "2017-03-30T17:08:30Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "vendor/luajit/src/Makefile" : {
      "ObjectId" : "37c7da8ecf2c5dc32c854d3ad8eacdfa18f2a3e3",
      "LastModified" : "2017-03-30T17:08:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT Makefile. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Also works with MinGW and Cygwin on Windows.\n\n# Please check msvcbuild.bat for building with MSVC on Windows.\n\n#\n\n# Copyright (C) 2005-2015 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#############################  COMPILER OPTIONS  #############################\n\n##############################################################################\n\n# These options mainly affect the speed of the JIT compiler itself, not the\n\n# speed of the JIT-compiled code. Turn any of the optional settings on by\n\n# removing the '#' in front of them. Make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\" if you change any options.\n\n#\n\n# LuaJIT builds as a native 32 or 64 bit binary by default.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Use this if you want to force a 32 bit build on a 64 bit multilib OS.\n\n#CC= gcc -m32\n\n#\n\n# Since the assembler part does NOT maintain a frame pointer, it's pointless\n\n# to slow down the C part by not omitting it. Debugging, tracebacks and\n\n# unwinding are not affected -- the assembler part has frame unwind\n\n# information and GCC emits it where needed (x64) or with -g (see CCDEBUG).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use this if you want to generate a smaller binary (but it's slower):\n\n#CCOPT= -Os -fomit-frame-pointer\n\n# Note: it's no longer recommended to use -O3 with GCC 4.x.\n\n# The I-Cache bloat usually outweighs the benefits from aggressive inlining.\n\n#\n\n# Target-specific compiler options:\n\n#\n\n# x86 only: it's recommended to compile at least for i686. Better yet,\n\n# compile for an architecture that has SSE2, too (-msse -msse2).\n\n#\n\n# x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute\n\n# the binaries to a different machine you could also use: -march=native\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n#CCDEBUG=\n\n# Uncomment the next line to generate debug information:\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Uncomment the next line to enable more warnings:\n\n#CCWARN+= -Wextra -Wdeclaration-after-statement -Wredundant-decls -Wshadow -Wpointer-arith\n\n#\n\n##############################################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##############################################################################\n\n################################  BUILD MODE  ################################\n\n##############################################################################\n\n# The default build mode is mixed mode on POSIX. On Windows this is the same\n\n# as dynamic mode.\n\n#\n\n# Mixed mode creates a static + dynamic library and a statically linked luajit.\n\n#BUILDMODE= mixed\n\n#\n\n# Static mode creates a static library and a statically linked luajit.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Dynamic mode creates a dynamic library and a dynamically linked luajit.\n\n# Note: this executable will only run when the library is installed!\n\n#BUILDMODE= dynamic\n\n#\n\n##############################################################################\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##############################################################################\n\n#################################  FEATURES  #################################\n\n##############################################################################\n\n# Enable/disable these features as needed, but make sure you force a full\n\n# recompile with \"make clean\", followed by \"make\".\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Permanently disable the FFI extension to reduce the size of the LuaJIT\n\n# executable. But please consider that the FFI library is compiled-in,\n\n# but NOT loaded by default. It only allocates any memory, if you actually\n\n# make use of it.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_FFI\n\n#\n\n# Features from Lua 5.2 that are unlikely to break existing code are\n\n# enabled by default. Some other features that *might* break some existing\n\n# code (e.g. __pairs or os.execute() return values) can be enabled here.\n\n# Note: this does not provide full compatibility with Lua 5.2 at this time.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_JIT\n\n#\n\n# Some architectures (e.g. PPC) can use either single-number (1) or\n\n# dual-number (2) mode. Uncomment one of these lines to override the\n\n# default mode. Please see LJ_ARCH_NUMMODE in lj_arch.h for details.\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=1\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=2\n\n#\n\n##############################################################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n############################  DEBUGGING SUPPORT  #############################\n\n##############################################################################\n\n# Enable these options as needed, but make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\".\n\n# Note that most of these are NOT suitable for benchmarking or release mode!\n\n#\n\n# Use the system provided memory allocator (realloc) instead of the\n\n# bundled memory allocator. This is slower, but sometimes helpful for\n\n# debugging. This option cannot be enabled on x64, since realloc usually\n\n# doesn't return addresses in the right address range.\n\n# OTOH this option is mandatory for Valgrind's memcheck tool on x64 and\n\n# the only way to get useful results from it for all other architectures.\n\n#XCFLAGS+= -DLUAJIT_USE_SYSMALLOC\n\n#\n\n# This define is required to run LuaJIT under Valgrind. The Valgrind\n\n# header files must be installed. You should enable debug information, too.\n\n# Use --suppressions=lj.supp to avoid some false positives.\n\n#XCFLAGS+= -DLUAJIT_USE_VALGRIND\n\n#\n\n# This is the client for the GDB JIT API. GDB 7.0 or higher is required\n\n# to make use of it. See lj_gdbjit.c for details. Enabling this causes\n\n# a non-negligible overhead, even when not running under GDB.\n\n#XCFLAGS+= -DLUAJIT_USE_GDBJIT\n\n#\n\n# Turn on assertions for the Lua/C API to debug problems with lua_* calls.\n\n# This is rather slow -- use only while developing C libraries/embeddings.\n\n#XCFLAGS+= -DLUA_USE_APICHECK\n\n#\n\n# Turn on assertions for the whole LuaJIT VM. This significantly slows down\n\n# everything. Use only if you suspect a problem with LuaJIT itself.\n\n#XCFLAGS+= -DLUA_USE_ASSERT\n\n#\n\n##############################################################################\n\n# You probably don't need to change anything below this line!\n\n##############################################################################\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##############################################################################\n\n# Flags and options for host and target.\n\n##############################################################################\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# You can override the following variables at the make command line:\n\n#   CC       HOST_CC       STATIC_CC       DYNAMIC_CC\n\n#   CFLAGS   HOST_CFLAGS   TARGET_CFLAGS\n\n#   LDFLAGS  HOST_LDFLAGS  TARGET_LDFLAGS  TARGET_SHLDFLAGS\n\n#   LIBS     HOST_LIBS     TARGET_LIBS\n\n#   CROSS    HOST_SYS      TARGET_SYS      TARGET_FLAGS\n\n#\n\n# Cross-compilation examples:\n\n#   make HOST_CC=\"gcc -m32\" CROSS=i586-mingw32msvc- TARGET_SYS=Windows\n\n#   make HOST_CC=\"gcc -m32\" CROSS=powerpc-linux-gnu-\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If left blank, minilua is built and used. You can supply an installed\n\n# copy of (plain) Lua 5.1 or 5.2, plus Lua BitOp. E.g. with: HOST_LUA=lua\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#TARGET_LIBPATH= $(or $(PREFIX),/usr/local)/$(or $(MULTILIB),lib)\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#TARGET_DYLIBNAME= libluajit-$(ABIVER).$(MAJVER).dylib\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##############################################################################\n\n# System detection.\n\n##############################################################################\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##############################################################################\n\n# Files and pathnames.\n\n##############################################################################\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##############################################################################\n\n# Build mode handling.\n\n##############################################################################\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Mixed mode defaults.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Mixed mode is not supported on Windows. And static mode doesn't work well.\n\n# C modules cannot be loaded, because they bind to lua51.dll.\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# -dead_strip breaks LuaJIT, but we really want it for everything else, so we\n\n# have to dynamically link it\n",
        "Line" : 516,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "##############################################################################\n\n# Make targets.\n\n##############################################################################\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25,
      "Errorlog" : "line 534:19 token recognition error at: '\\m'\nline 535:19 token recognition error at: '\\b'\nline 590:10 token recognition error at: '\"s| [^ ]*/dasm_\\S'\nline 591:29 token recognition error at: '\\1'\nline 592:24 token recognition error at: '\\S'\nline 593:22 token recognition error at: '\\S'\nline 594:21 token recognition error at: '\\S'\nline 692:42 token recognition error at: '\"\\n\\n##############################################################################\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 12,
    "AUTOMAKE" : 10
  },
  "ElapsedTime" : 2334
}