{
  "Repository" : "57143574",
  "Revision" : "HEAD",
  "ObjectId" : "db25d7c7109d31f30e4234c51ac784938f620138",
  "CommitTime" : "2019-04-16T21:15:38Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "7e6aa9578e542ede07887ca49c8f9ad4bcda459b",
      "LastModified" : "2019-04-16T21:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2016 Carnegie Mellon University, NVIDIA Corporation\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###### Config options #####\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###### Setup #########\n\n# Verify C++11 support\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if(COMPILER_SUPPORTS_CXX11)\n\n#   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include our custom cmake modules for finding packages\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###### Project code #######\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make init files so python code can import from subdirectories\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Dependencies.cmake" : {
      "ObjectId" : "acea305e22efb13b553205c6938973c26532b6da",
      "LastModified" : "2019-04-16T21:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###### Parse dependency file #######\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Strip leading spaces\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find variable name\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Find the value\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Set the variable\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Disable cuda if nvidia-smi was not detected\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###### Optional Dependencies #######\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###### Required Dependencies #######\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# for protobuf generated files\n",
        "Line" : 104,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 9
    },
    "cmake/Modules/FindDoxygen.cmake" : {
      "ObjectId" : "83fafbe3f81bdcde37aa1d37f0700f679297fd8c",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindDoxygen\n-----------\n\nDoxygen is a documentation generation tool (see http://www.doxygen.org).\nThis module looks for Doxygen and some optional tools it supports. These\ntools are enabled as components in the :command:`find_package` command:\n\n``dot``\n  `Graphviz <http://graphviz.org>`_ ``dot`` utility used to render various\n  graphs.\n``mscgen``\n  `Message Chart Generator <http://www.mcternan.me.uk/mscgen/>`_ utility used\n  by Doxygen's ``\\msc`` and ``\\mscfile`` commands.\n``dia``\n  `Dia <https://wiki.gnome.org/Apps/Dia>`_ the diagram editor used by Doxygen's\n  ``\\diafile`` command.\n\nExamples:\n\n.. code-block:: cmake\n\n  # Require dot, treat the other components as optional\n  find_package(Doxygen\n               REQUIRED dot\n               OPTIONAL_COMPONENTS mscgen dia)\n\nThe following variables are defined by this module:\n\n.. variable:: DOXYGEN_FOUND\n\n  True if the ``doxygen`` executable was found.\n\n.. variable:: DOXYGEN_VERSION\n\n  The version reported by ``doxygen --version``.\n\nThe module defines ``IMPORTED`` targets for Doxygen and each component found.\nThese can be used as part of custom commands, etc. and should be preferred over\nold-style (and now deprecated) variables like ``DOXYGEN_EXECUTABLE``. The\nfollowing import targets are defined if their corresponding executable could be\nfound (the component import targets will only be defined if that component was\nrequested):\n\n::\n\n  Doxygen::doxygen\n  Doxygen::dot\n  Doxygen::mscgen\n  Doxygen::dia\n\n\nFunctions\n^^^^^^^^^\n\n.. command:: doxygen_add_docs\n\n  This function is intended as a convenience for adding a target for generating\n  documentation with Doxygen. It aims to provide sensible defaults so that\n  projects can generally just provide the input files and directories and that\n  will be sufficient to give sensible results. The function supports the\n  ability to customize the Doxygen configuration used to build the\n  documentation.\n\n  ::\n\n    doxygen_add_docs(targetName\n        [filesOrDirs...]\n        [WORKING_DIRECTORY dir]\n        [COMMENT comment])\n\n  The function constructs a ``Doxyfile`` and defines a custom target that runs\n  Doxygen on that generated file. The listed files and directories are used as\n  the ``INPUT`` of the generated ``Doxyfile`` and they can contain wildcards.\n  Any files that are listed explicitly will also be added as ``SOURCES`` of the\n  custom target so they will show up in an IDE project's source list.\n\n  So that relative input paths work as expected, by default the working\n  directory of the Doxygen command will be the current source directory (i.e.\n  :variable:`CMAKE_CURRENT_SOURCE_DIR`). This can be overridden with the\n  ``WORKING_DIRECTORY`` option to change the directory used as the relative\n  base point. Note also that Doxygen's default behavior is to strip the working\n  directory from relative paths in the generated documentation (see the\n  ``STRIP_FROM_PATH`` `Doxygen config option\n  <http://www.doxygen.org/manual/config.html>`_ for details).\n\n  If provided, the optional ``comment`` will be passed as the ``COMMENT`` for\n  the :command:`add_custom_target` command used to create the custom target\n  internally.\n\n  The contents of the generated ``Doxyfile`` can be customized by setting CMake\n  variables before calling ``doxygen_add_docs()``. Any variable with a name of\n  the form ``DOXYGEN_<tag>`` will have its value substituted for the\n  corresponding ``<tag>`` configuration option in the ``Doxyfile``. See the\n  `Doxygen documentation <http://www.doxygen.org/manual/config.html>`_ for the\n  full list of supported configuration options.\n\n  Some of Doxygen's defaults are overridden to provide more appropriate\n  behavior for a CMake project. Each of the following will be explicitly set\n  unless the variable already has a value before ``doxygen_add_docs()`` is\n  called (with some exceptions noted):\n\n  .. variable:: DOXYGEN_HAVE_DOT\n\n    Set to ``YES`` if the ``dot`` component was requested and it was found,\n    ``NO`` otherwise. Any existing value of ``DOXYGEN_HAVE_DOT`` is ignored.\n\n  .. variable:: DOXYGEN_DOT_MULTI_TARGETS\n\n    Set to ``YES`` by this module (note that this requires a ``dot`` version\n    newer than 1.8.10). This option is only meaningful if ``DOXYGEN_HAVE_DOT``\n    is also set to ``YES``.\n\n  .. variable:: DOXYGEN_GENERATE_LATEX\n\n    Set to ``NO`` by this module.\n\n  .. variable:: DOXYGEN_WARN_FORMAT\n\n    For Visual Studio based generators, this is set to the form recognized by\n    the Visual Studio IDE: ``$file($line) : $text``. For all other generators,\n    Doxygen's default value is not overridden.\n\n  .. variable:: DOXYGEN_PROJECT_NAME\n\n    Populated with the name of the current project (i.e.\n    :variable:`PROJECT_NAME`).\n\n  .. variable:: DOXYGEN_PROJECT_NUMBER\n\n    Populated with the version of the current project (i.e.\n    :variable:`PROJECT_VERSION`).\n\n  .. variable:: DOXYGEN_PROJECT_BRIEF\n\n    Populated with the description of the current project (i.e.\n    :variable:`PROJECT_DESCRIPTION`).\n\n  .. variable:: DOXYGEN_INPUT\n\n    Projects should not set this variable. It will be populated with the set of\n    files and directories passed to ``doxygen_add_docs()``, thereby providing\n    consistent behavior with the other built-in commands like\n    :command:`add_executable`, :command:`add_library` and\n    :command:`add_custom_target`. If a variable named ``DOXYGEN_INPUT`` is set\n    by the project, it will be ignored and a warning will be issued.\n\n  .. variable:: DOXYGEN_RECURSIVE\n\n    Set to ``YES`` by this module.\n\n  .. variable:: DOXYGEN_EXCLUDE_PATTERNS\n\n    If the set of inputs includes directories, this variable will specify\n    patterns used to exclude files from them. The following patterns are added\n    by ``doxygen_add_docs()`` to ensure CMake-specific files and directories\n    are not included in the input. If the project sets\n    ``DOXYGEN_EXCLUDE_PATTERNS``, those contents are merged with these\n    additional patterns rather than replacing them:\n\n    ::\n\n      */.git/*\n      */.svn/*\n      */.hg/*\n      */CMakeFiles/*\n      */_CPack_Packages/*\n      DartConfiguration.tcl\n      CMakeLists.txt\n      CMakeCache.txt\n\n  .. variable:: DOXYGEN_OUTPUT_DIRECTORY\n\n    Set to :variable:`CMAKE_CURRENT_BINARY_DIR` by this module. Note that if\n    the project provides its own value for this and it is a relative path, it\n    will be converted to an absolute path relative to the current binary\n    directory. This is necessary because doxygen will normally be run from a\n    directory within the source tree so that relative source paths work as\n    expected. If this directory does not exist, it will be recursively created\n    prior to executing the doxygen commands.\n\nTo change any of these defaults or override any other Doxygen config option,\nset relevant variables before calling ``doxygen_add_docs()``. For example:\n\n  .. code-block:: cmake\n\n    set(DOXYGEN_GENERATE_HTML NO)\n    set(DOXYGEN_GENERATE_MAN YES)\n\n    doxygen_add_docs(\n        doxygen\n        ${PROJECT_SOURCE_DIR}\n        COMMENT \"Generate man pages\"\n    )\n\nA number of Doxygen config options accept lists of values, but Doxygen requires\nthem to be separated by whitespace. CMake variables hold lists as a string with\nitems separated by semi-colons, so a conversion needs to be performed. The\n``doxygen_add_docs()`` command specifically checks the following Doxygen config\noptions and will convert their associated CMake variable's contents into the\nrequired form if set.\n\n::\n\n  ABBREVIATE_BRIEF\n  ALIASES\n  CITE_BIB_FILES\n  DIAFILE_DIRS\n  DOTFILE_DIRS\n  DOT_FONTPATH\n  ENABLED_SECTIONS\n  EXAMPLE_PATH\n  EXAMPLE_PATTERNS\n  EXCLUDE\n  EXCLUDE_PATTERNS\n  EXCLUDE_SYMBOLS\n  EXPAND_AS_DEFINED\n  EXTENSION_MAPPING\n  EXTRA_PACKAGES\n  EXTRA_SEARCH_MAPPINGS\n  FILE_PATTERNS\n  FILTER_PATTERNS\n  FILTER_SOURCE_PATTERNS\n  HTML_EXTRA_FILES\n  HTML_EXTRA_STYLESHEET\n  IGNORE_PREFIX\n  IMAGE_PATH\n  INCLUDE_FILE_PATTERNS\n  INCLUDE_PATH\n  INPUT\n  LATEX_EXTRA_FILES\n  LATEX_EXTRA_STYLESHEET\n  MATHJAX_EXTENSIONS\n  MSCFILE_DIRS\n  PLANTUML_INCLUDE_PATH\n  PREDEFINED\n  QHP_CUST_FILTER_ATTRS\n  QHP_SECT_FILTER_ATTRS\n  STRIP_FROM_INC_PATH\n  STRIP_FROM_PATH\n  TAGFILES\n  TCL_SUBST\n\nThe following single value Doxygen options would be quoted automatically\nif they contain at least one space:\n\n::\n\n  CHM_FILE\n  DIA_PATH\n  DOCBOOK_OUTPUT\n  DOCSET_FEEDNAME\n  DOCSET_PUBLISHER_NAME\n  DOT_FONTNAME\n  DOT_PATH\n  EXTERNAL_SEARCH_ID\n  FILE_VERSION_FILTER\n  GENERATE_TAGFILE\n  HHC_LOCATION\n  HTML_FOOTER\n  HTML_HEADER\n  HTML_OUTPUT\n  HTML_STYLESHEET\n  INPUT_FILTER\n  LATEX_FOOTER\n  LATEX_HEADER\n  LATEX_OUTPUT\n  LAYOUT_FILE\n  MAN_OUTPUT\n  MAN_SUBDIR\n  MATHJAX_CODEFILE\n  MSCGEN_PATH\n  OUTPUT_DIRECTORY\n  PERL_PATH\n  PLANTUML_JAR_PATH\n  PROJECT_BRIEF\n  PROJECT_LOGO\n  PROJECT_NAME\n  QCH_FILE\n  QHG_LOCATION\n  QHP_CUST_FILTER_NAME\n  QHP_VIRTUAL_FOLDER\n  RTF_EXTENSIONS_FILE\n  RTF_OUTPUT\n  RTF_STYLESHEET_FILE\n  SEARCHDATA_FILE\n  USE_MDFILE_AS_MAINPAGE\n  WARN_FORMAT\n  WARN_LOGFILE\n  XML_OUTPUT\n\nDeprecated Result Variables\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor compatibility with previous versions of CMake, the following variables\nare also defined but they are deprecated and should no longer be used:\n\n.. variable:: DOXYGEN_EXECUTABLE\n\n  The path to the ``doxygen`` command. If projects need to refer to the\n  ``doxygen`` executable directly, they should use the ``Doxygen::doxygen``\n  import target instead.\n\n.. variable:: DOXYGEN_DOT_FOUND\n\n  True if the ``dot`` executable was found.\n\n.. variable:: DOXYGEN_DOT_EXECUTABLE\n\n  The path to the ``dot`` command. If projects need to refer to the ``dot``\n  executable directly, they should use the ``Doxygen::dot`` import target\n  instead.\n\n.. variable:: DOXYGEN_DOT_PATH\n\n  The path to the directory containing the ``dot`` executable as reported in\n  ``DOXYGEN_DOT_EXECUTABLE``. The path may have forward slashes even on Windows\n  and is not suitable for direct substitution into a ``Doxyfile.in`` template.\n  If you need this value, get the :prop_tgt:`IMPORTED_LOCATION` property of the\n  ``Doxygen::dot`` target and use :command:`get_filename_component` to extract\n  the directory part of that path. You may also want to consider using\n  :command:`file(TO_NATIVE_PATH)` to prepare the path for a Doxygen\n  configuration file.\n\n\nDeprecated Hint Variables\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. variable:: DOXYGEN_SKIP_DOT\n\n  This variable has no any effect for component form of ``find_package``.\n  In backward compatibility mode (i.e. without components list) it prevents\n  the finder module from searching for Graphviz's ``dot`` utility.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For backwards compatibility support\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ===== Rationale for OS X AppBundle mods below =====\n\n#  With the OS X GUI version, Doxygen likes to be installed to /Applications\n\n#  and it contains the doxygen executable in the bundle. In the versions I've\n\n#  seen, it is located in Resources, but in general, more often binaries are\n\n#  located in MacOS.\n\n#\n\n#  NOTE: The official Doxygen.app distributed for OS X uses non-standard\n\n#  conventions. Instead of the command-line \"doxygen\" tool being placed in\n\n#  Doxygen.app/Contents/MacOS, \"Doxywizard\" is placed there instead and\n\n#  \"doxygen\" is placed in Contents/Resources.  This is most likely done\n\n#  so that something happens when people double-click on the Doxygen.app\n\n#  package. Unfortunately, CMake gets confused by this as when it sees the\n\n#  bundle it uses \"Doxywizard\" as the executable to use instead of\n\n#  \"doxygen\". Therefore to work-around this issue we temporarily disable\n\n#  the app-bundle feature, just for this CMake module:\n\n#\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Save the old setting\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Disable the App-bundle detection feature\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FYI:\n\n# In older versions of OS X Doxygen, dot was included with the Doxygen bundle,\n\n# but newer versions require you to download Graphviz.app which contains \"dot\"\n\n# or use something like homebrew.\n\n# ============== End OSX stuff ================\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Find Doxygen...\n\n#\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create an imported target for Doxygen\n",
        "Line" : 399,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#\n\n# Find Diagram Editor...\n\n#\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The Doxyfile wants the path to the utility, not the entire path\n\n# including file name\n",
        "Line" : 425,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Create an imported target for component\n",
        "Line" : 434,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "#\n\n# Find Graphviz Dot...\n\n#\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The Doxyfile wants the path to the utility, not the entire path\n\n# including file name\n",
        "Line" : 472,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Create an imported target for component\n",
        "Line" : 481,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "#\n\n# Find Message Sequence Chart...\n\n#\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The Doxyfile wants the path to the utility, not the entire path\n\n# including file name\n",
        "Line" : 510,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Create an imported target for component\n",
        "Line" : 519,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Make sure `doxygen` is one of the components to find\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Search at least for `doxygen` executable\n",
        "Line" : 534,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Preserve backward compatibility:\n\n# search for `dot` also if `DOXYGEN_SKIP_DOT` is not explicitly disable this.\n",
        "Line" : 536,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#\n\n# Find all requested components of Doxygen...\n\n#\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Verify find results\n\n#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n\n#find_package_handle_standard_args(\n\n#    Doxygen\n\n#    REQUIRED_VARS DOXYGEN_EXECUTABLE\n\n#    VERSION_VAR DOXYGEN_VERSION\n\n#    HANDLE_COMPONENTS\n\n#)\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# Backwards compatibility...\n\n#\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Restore the old app-bundle setting\n",
        "Line" : 585,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Maintain the _FOUND variables as \"YES\" or \"NO\" for backwards\n\n# compatibility. This allows people to substitute them directly into\n\n# Doxyfile with configure_file().\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# For backwards compatibility support for even older CMake versions\n",
        "Line" : 604,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# No need to keep any backward compatibility for `DOXYGEN_MSCGEN_XXX`\n\n# and `DOXYGEN_DIA_XXX` since they were not supported before component\n\n# support was added\n",
        "Line" : 608,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "#\n\n# Allow full control of Doxygen from CMakeLists.txt\n\n#\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Prepare a template Doxyfile and Doxygen's default values CMake file\n",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# If doxygen was found, use it to generate a minimal default Doxyfile.\n\n# We will delete this file after we have finished using it below to\n\n# generate the other files that doxygen_add_docs() will use.\n",
        "Line" : 620,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Write a do-not-edit header to files we are going to generate...\n",
        "Line" : 637,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# We only need one copy of these across the whole build, since their\n\n# content is only dependent on the version of Doxygen being used. Therefore\n\n# we always put them at the top of the build tree so that they are in a\n\n# predictable location.\n",
        "Line" : 646,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Get strings containing a configuration key from the template Doxyfile\n\n# we obtained from this version of Doxygen. Because some options are split\n\n# across multiple lines by ending lines with backslashes, we cannot just\n\n# use file(STRINGS...) with a REGEX. Instead, read lines without a REGEX\n\n# so that file(STRINGS...) handles the trailing backslash as a line\n\n# continuation. It stores multi-lines as lists, so we then have to replace\n\n# the \";\" list separator with backslashed newlines again so that we get the\n\n# original content stored back as the value part.\n",
        "Line" : 656,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Build up a Doxyfile that provides @configVar@ substitutions for each\n\n# Doxygen config option as well as a separate CMake script which provides\n\n# the default value for each of those options if the project doesn't supply\n\n# them. Each config option will support substitution of a CMake variable\n\n# of the same name except with DOXYGEN_ prepended.\n",
        "Line" : 675,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Ok, this is a config key with a value\n",
        "Line" : 682,
        "CharPositionInLine" : 12
      },
      "36" : {
        "Text" : "# Remove the backslashes we had to preserve to handle newlines\n",
        "Line" : 686,
        "CharPositionInLine" : 16
      },
      "37" : {
        "Text" : "# Ok, this is a config key with empty default value\n",
        "Line" : 693,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# Ok, dumped defaults are not needed anymore...\n",
        "Line" : 707,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Quote a value of the given variable if:\n\n# - variable parameter was really given\n\n# - a variable it points is defined\n\n# - a value doesn't quoted already\n\n# - and it has spaces\n",
        "Line" : 718,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# If not already defined, set some relevant defaults based on the\n\n# assumption that the documentation is for the whole project. Details\n\n# specified in the project() command will be used to populate a number of\n\n# these defaults.\n",
        "Line" : 772,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# The PROJECT_NAME tag is a single word (or a sequence of words\n\n# surrounded by double-quotes, unless you are using Doxywizard) that\n\n# should identify the project for which the documentation is generated.\n\n# This name is used in the title of most generated pages and in a few\n\n# other places. The default value is: My Project.\n",
        "Line" : 778,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# The PROJECT_NUMBER tag can be used to enter a project or revision\n\n# number. This could be handy for archiving the generated documentation\n\n# or if some version control system is used.\n",
        "Line" : 787,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Using the PROJECT_BRIEF tag one can provide an optional one line\n\n# description for a project that appears at the top of each page and\n\n# should give viewer a quick idea about the purpose of the project.\n\n# Keep the description short.\n",
        "Line" : 794,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# The RECURSIVE tag can be used to specify whether or not\n\n# subdirectories should be searched for input files as well. CMake\n\n# projects generally evolve to span multiple directories, so it makes\n\n# more sense for this to be on by default. Doxygen's default value\n\n# has this setting turned off, so we override it.\n",
        "Line" : 802,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# The OUTPUT_DIRECTORY tag is used to specify the (relative or\n\n# absolute) path into which the generated documentation will be\n\n# written. If a relative path is used, Doxygen will interpret it as\n\n# being relative to the location where doxygen was started, but we need\n\n# to run Doxygen in the source tree so that relative input paths work\n\n# intuitively. Therefore, we ensure that the output directory is always\n\n# an absolute path and if the project provided a relative path, we\n\n# treat it as relative to the current BINARY directory so that output\n\n# is not generated inside the source tree.\n",
        "Line" : 811,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# If you set the HAVE_DOT tag to YES then doxygen will assume the dot\n\n# tool is available from the path. This tool is part of Graphviz (see:\n\n# http://www.graphviz.org/), a graph visualization toolkit from AT&T\n\n# and Lucent Bell Labs. The other options in this section have no\n\n# effect if this option is set to NO.\n\n# Doxygen's default value is: NO.\n",
        "Line" : 829,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# Set the DOT_MULTI_TARGETS tag to YES to allow dot to generate\n\n# multiple output files in one run (i.e. multiple -o and -T options on\n\n# the command line). This makes dot run faster, but since only newer\n\n# versions of dot (>1.8.10) support this, Doxygen disables this feature\n\n# by default.\n\n# This tag requires that the tag HAVE_DOT is set to YES.\n",
        "Line" : 839,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# If the GENERATE_LATEX tag is set to YES, doxygen will generate LaTeX\n\n# output. We only want the HTML output enabled by default, so we turn\n\n# this off if the project hasn't specified it.\n",
        "Line" : 849,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# The WARN_FORMAT tag determines the format of the warning messages\n\n# that doxygen can produce. The string should contain the $file,\n\n# $line and $text tags, which will be replaced by the file and line\n\n# number from which the warning originated and the warning text.\n\n# Optionally, the format may contain $version, which will be\n\n# replaced by the version of the file (if it could be obtained via\n\n# FILE_VERSION_FILTER).\n\n# Doxygen's default value is: $file:$line: $text\n",
        "Line" : 857,
        "CharPositionInLine" : 12
      },
      "50" : {
        "Text" : "# The WARN_LOGFILE tag can be used to specify a file to which warning and error\n\n# messages should be written. If left blank the output is written to standard\n\n# error (stderr).\n",
        "Line" : 870,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# Any files from the INPUT that match any of the EXCLUDE_PATTERNS will be\n\n# excluded from the set of input files. We provide some additional patterns\n\n# to prevent commonly unwanted things from CMake builds being pulled in.\n\n#\n\n# Note that the wildcards are matched against the file with absolute path,\n\n# so to exclude all test directories for example use the pattern */test/*\n",
        "Line" : 879,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Now bring in Doxgen's defaults for those things the project has not\n\n# already set and we have not provided above\n",
        "Line" : 898,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Cleanup built HTMLs on \"make clean\"\n\n# TODO Any other dirs?\n",
        "Line" : 902,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Build up a list of files we can identify from the inputs so we can list\n\n# them as SOURCES in the custom target (makes them display in IDEs). We\n\n# must do this before we transform the various DOXYGEN_... variables below\n\n# because we need to process DOXYGEN_INPUT as a list first.\n",
        "Line" : 915,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Transform known list type options into space separated strings.\n",
        "Line" : 933,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Transform known single value variables which may contain spaces, such as\n\n# paths or description strings.\n",
        "Line" : 978,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Store the unmodified value of DOXYGEN_OUTPUT_DIRECTORY prior to invoking\n\n# doxygen_quote_value() below. This will mutate the string specifically for\n\n# consumption by Doxygen's config file, which we do not want when we use it\n\n# later in the custom target's commands.\n",
        "Line" : 1025,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Prepare doxygen configuration file\n",
        "Line" : 1035,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Add the target\n",
        "Line" : 1040,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 60
    },
    "cmake/Modules/FindEigen.cmake" : {
      "ObjectId" : "49d68c98e3b121fd5626dc3e495b39f748a606a4",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  EIGEN_ROOT_DIR:       Base directory where all Eigen components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  EIGEN_FOUND\n\n#  EIGEN_INCLUDE_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindFFmpeg.cmake" : {
      "ObjectId" : "b22691965193991f2d50352113c2fb79b9a2f188",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find ffmpeg libraries (libavcodec, libavformat and libavutil)\n\n# Once done this will define\n\n#\n\n# FFMPEG_FOUND - system has ffmpeg or libav\n\n# FFMPEG_INCLUDE_DIR - the ffmpeg include directory\n\n# FFMPEG_LIBRARIES - Link these to use ffmpeg\n\n# FFMPEG_LIBAVCODEC\n\n# FFMPEG_LIBAVFORMAT\n\n# FFMPEG_LIBAVUTIL\n\n#\n\n# Copyright (c) 2008 Andreas Schneider <mail@cynapses.org>\n\n# Modified for other libraries by Lasse Kärkkäinen <tronic>\n\n# Modified for Hedgewars by Stepik777\n\n#\n\n# Redistribution and use is allowed according to the terms of the New\n\n# BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindFolly.cmake" : {
      "ObjectId" : "4caecf52f9cf7b7e43338acc5927ca400234edfc",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Folly\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  FOLLY_ROOT_DIR:   Base directory where all folly components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  FOLLY_FOUND\n\n#  FOLLY_INCLUDE_DIRS\n\n#  FOLLY_LIBRARIES\n\n#  FOLLY_LIBRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGFlags.cmake" : {
      "ObjectId" : "89491b089e1c14d76e6277e0e93d66b767503e68",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GFLAGS\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GFLAGS_ROOT_DIR:            Base directory where all GFLAGS components are found\n\n#\n\n# The following are set after configuration is done: \n\n#  GFLAGS_FOUND\n\n#  GFLAGS_INCLUDE_DIRS\n\n#  GFLAGS_LIBRARIES\n\n#  GFLAGS_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGRPC.cmake" : {
      "ObjectId" : "cb81971177fede174478a0da785384d66329ea7d",
      "LastModified" : "2019-04-16T21:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find grpc library\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GRPC_DIR:   Base directory where all components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GRPC_FOUND\n\n#  GRPC_INCLUDE_DIRS\n\n#  GRPC_LIBRARIES\n\n#  GRPC_LIBRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get GRPC version info\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindGipuma.cmake" : {
      "ObjectId" : "8615d225e1ca793b1358cc07bc636bd6dc4590e4",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Gipuma\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GIPUMA_ROOT_DIR:       Base directory where all Gipuma components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GIPUMA_FOUND\n\n#  GIPUMA_INCLUDE_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGlog.cmake" : {
      "ObjectId" : "f4ca0e301601887a29b63b82e8ee3bee85b2e230",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done: \n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGoogleTest.cmake" : {
      "ObjectId" : "276bf78308e989040c269af67494a9396756d41a",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find googletest library\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GOOGLETEST_ROOT_DIR:   Base directory where all Storage components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GOOGLETEST_FOUND\n\n#  GOOGLETEST_INCLUDE_DIRS\n\n#  GOOGLETEST_LIBRARIES\n\n#  GOOGLETEST_LIBRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindHalide.cmake" : {
      "ObjectId" : "8d8509d092ea7d809e12bc332fd093dc91d69877",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindHalide.cmake\n\n# ... shamelessly based on FindJeMalloc.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindHwang.cmake" : {
      "ObjectId" : "abf30cd00453f1501c22b696e036a545a0d8fa6f",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindHwang.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindIconv.cmake" : {
      "ObjectId" : "24cdae340dc72073c8481b34feb513d0cd35d696",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Iconv \n\n# Once done this will define \n\n# \n\n#  ICONV_FOUND - system has Iconv \n\n#  ICONV_INCLUDE_DIR - the Iconv include directory \n\n#  ICONV_LIBRARIES - Link these to use Iconv \n\n#  ICONV_SECOND_ARGUMENT_IS_CONST - the second argument for iconv() is const\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindMFX.cmake" : {
      "ObjectId" : "101c70013249f9adba6183d4826f94e04e5217b8",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##******************************************************************************\n\n##  Copyright(C) 2012-2015 Intel Corporation. All Rights Reserved.\n\n##  \n\n##  The source code, information  and  material (\"Material\") contained herein is\n\n##  owned  by Intel Corporation or its suppliers or licensors, and title to such\n\n##  Material remains  with Intel Corporation  or its suppliers or licensors. The\n\n##  Material  contains proprietary information  of  Intel or  its  suppliers and\n\n##  licensors. The  Material is protected by worldwide copyright laws and treaty\n\n##  provisions. No  part  of  the  Material  may  be  used,  copied, reproduced,\n\n##  modified, published, uploaded, posted, transmitted, distributed or disclosed\n\n##  in any way  without Intel's  prior  express written  permission. No  license\n\n##  under  any patent, copyright  or  other intellectual property rights  in the\n\n##  Material  is  granted  to  or  conferred  upon  you,  either  expressly,  by\n\n##  implication, inducement,  estoppel or  otherwise.  Any  license  under  such\n\n##  intellectual  property  rights must  be express  and  approved  by  Intel in\n\n##  writing.\n\n##\n\n##  *Third Party trademarks are the property of their respective owners.\n\n##\n\n##  Unless otherwise  agreed  by Intel  in writing, you may not remove  or alter\n\n##  this  notice or  any other notice embedded  in Materials by Intel or Intel's\n\n##  suppliers or licensors in any way.\n\n##\n\n##******************************************************************************\n\n##  Content: Intel(R) Media SDK Samples projects creation and build\n\n##******************************************************************************\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# required:\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindNVCUVID.cmake" : {
      "ObjectId" : "868e5288bcdda6920454a9cb1e2378ff32754a7b",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find NVCUVID\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  NVCUVID_DIR:       Base directory where NVCUVID can be found\n\n#\n\n# The following are set after configuration is done:\n\n#  NVCUVID_FOUND\n\n#  NVCUVID_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindProxygen.cmake" : {
      "ObjectId" : "d6c4bec135b41cc74fafab0c901e0cab72e8c4cb",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Proxygen\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  PROXYGEN_ROOT_DIR:   Base directory where all proxygen components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  PROXYGEN_FOUND\n\n#  PROXYGEN_INCLUDE_DIRS\n\n#  PROXYGEN_LIBRARIES\n\n#  PROXYGEN_LIBRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindSaneProtobuf.cmake" : {
      "ObjectId" : "5df49fd3392ae65aed9ecce4d6dab1b9568fb295",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSaneProtobuf\n\n# ------------\n\n#\n\n# Locate and configure the Google Protocol Buffers library.\n\n#\n\n# The following variables can be set and are optional:\n\n#\n\n# ``PROTOBUF_SRC_ROOT_FOLDER``\n\n#   When compiling with MSVC, if this cache variable is set\n\n#   the protobuf-default VS project build locations\n\n#   (vsprojects/Debug and vsprojects/Release\n\n#   or vsprojects/x64/Debug and vsprojects/x64/Release)\n\n#   will be searched for libraries and binaries.\n\n# ``PROTOBUF_IMPORT_DIRS``\n\n#   List of additional directories to be searched for\n\n#   imported .proto files.\n\n#\n\n# Defines the following variables:\n\n#\n\n# ``PROTOBUF_FOUND``\n\n#   Found the Google Protocol Buffers library\n\n#   (libprotobuf & header files)\n\n# ``PROTOBUF_INCLUDE_DIRS``\n\n#   Include directories for Google Protocol Buffers\n\n# ``PROTOBUF_LIBRARIES``\n\n#   The protobuf libraries\n\n# ``PROTOBUF_PROTOC_LIBRARIES``\n\n#   The protoc libraries\n\n# ``PROTOBUF_LITE_LIBRARIES``\n\n#   The protobuf-lite libraries\n\n#\n\n# The following cache variables are also available to set or use:\n\n#\n\n# ``PROTOBUF_LIBRARY``\n\n#   The protobuf library\n\n# ``PROTOBUF_PROTOC_LIBRARY``\n\n#   The protoc library\n\n# ``PROTOBUF_INCLUDE_DIR``\n\n#   The include directory for protocol buffers\n\n# ``PROTOBUF_PROTOC_EXECUTABLE``\n\n#   The protoc compiler\n\n# ``PROTOBUF_LIBRARY_DEBUG``\n\n#   The protobuf library (debug)\n\n# ``PROTOBUF_PROTOC_LIBRARY_DEBUG``\n\n#   The protoc library (debug)\n\n# ``PROTOBUF_LITE_LIBRARY``\n\n#   The protobuf lite library\n\n# ``PROTOBUF_LITE_LIBRARY_DEBUG``\n\n#   The protobuf lite library (debug)\n\n#\n\n# Example:\n\n#\n\n# .. code-block:: cmake\n\n#\n\n#   find_package(Protobuf REQUIRED)\n\n#   include_directories(${PROTOBUF_INCLUDE_DIRS})\n\n#   include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#   protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS foo.proto)\n\n#   protobuf_generate_python(PROTO_PY foo.proto)\n\n#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})\n\n#   target_link_libraries(bar ${PROTOBUF_LIBRARIES})\n\n#\n\n# .. note::\n\n#   The ``protobuf_generate_cpp`` and ``protobuf_generate_python``\n\n#   functions and :command:`add_executable` or :command:`add_library`\n\n#   calls only work properly within the same directory.\n\n#\n\n# .. command:: protobuf_generate_cpp\n\n#\n\n#   Add custom commands to process ``.proto`` files to C++::\n\n#\n\n#     protobuf_generate_cpp (<SRCS> <HDRS> [<ARGN>...])\n\n#\n\n#   ``SRCS``\n\n#     Variable to define with autogenerated source files\n\n#   ``HDRS``\n\n#     Variable to define with autogenerated header files\n\n#   ``ARGN``\n\n#     ``.proto`` files\n\n#\n\n# .. command:: protobuf_generate_python\n\n#\n\n#   Add custom commands to process ``.proto`` files to Python::\n\n#\n\n#     protobuf_generate_python (<PY> [<ARGN>...])\n\n#\n\n#   ``PY``\n\n#     Variable to define with autogenerated Python files\n\n#   ``ARGN``\n\n#     ``.proto`` filess\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>\n\n# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Internal function: search for normal library as well as a debug one\n\n#    if the debug one is specified also include debug/optimized keywords\n\n#    in *_LIBRARIES variable\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# There is no debug library\n",
        "Line" : 259,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# There IS a debug library\n",
        "Line" : 263,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Internal function: find threads library\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Main.\n\n#\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc\n\n# for each directory where a proto file is referenced.\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Google's provided vcproj files generate libraries with a \"lib\"\n\n# prefix on Windows\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The Protobuf library\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#DOC \"The Google Protocol Buffers RELEASE Library\"\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The Protobuf Protoc Library\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Restore original find library prefixes\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Find the include directory\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find the protoc Executable\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/Modules/FindStruck.cmake" : {
      "ObjectId" : "78033c00b3fd3a7128d55371b015e0a1e72d90f4",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Struck\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  STRUCK_ROOT_DIR:       Base directory where all Struck components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  STRUCK_FOUND\n\n#  STRUCK_INCLUDE_DIRS\n\n#  STRUCK_LIBRARIES\n\n#  STRUCK_LIBRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindTinyToml.cmake" : {
      "ObjectId" : "755c47dda0c9b1f030d927bee0b9f56bc356006e",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find tinytoml library\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  TINYTOML_ROOT_DIR:   Base directory where all Storage components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  TINYTOML_FOUND\n\n#  TINYTOML_INCLUDE_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Util/Op.cmake" : {
      "ObjectId" : "b32cb0b747beed5693fca45b218533fb2ccc576e",
      "LastModified" : "2019-04-16T21:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Op.cmake should be included by a CMake script that will build a custom Scanner\n\n# op. It sets a few default flags and exposes a function build_op for simplifying\n\n# the build process. See examples/tutorial/04_custom_op.py for an example usage.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build protobuf files if they exist\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Note: this has to be done even if the library doesn't use protobuf, since when you include\n\n# Scanner, if you have multiple protobuf installations on your machine, you'll get pointed to\n\n# the wrong one and including Scanner's protobuf files will fail.\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Explictly link libscanner.so\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "docs/Makefile" : {
      "ObjectId" : "2e761a09baab8e07d0028d04a56615b17cde4518",
      "LastModified" : "2019-04-16T21:14:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/how-tos/halide/CMakeLists.txt" : {
      "ObjectId" : "638a25c44aa2d917347814e5456b01faf304a33e",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Uncomment the line below and change the Scanner path to the repo you cloned:\n\n# set(SCANNER_PATH /path/to/scanner)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/tutorials/resize_op/CMakeLists.txt" : {
      "ObjectId" : "8253f771eb0553ee87a97f2b41402474adeaac9d",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To build your custom op, you can either use our CMake convenience methods\n\n# or do it the slightly harder way in normal Make (see the Makefile).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build_op will create a shared library called lib${LIB_NAME}.so that builds\n\n# from all of the CPP_SRCS. You can also optionally specify a PROTO_SRC that\n\n# points to a Protobuf file and will generate the C++ and Python bindings.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The library specified in build_op is a normal CMake target, so you can use all\n\n# the normal CMake functions with it.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/tutorials/resize_op/Makefile" : {
      "ObjectId" : "f445919ba28e36af6b026c0d9a3ab139668704bf",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Scanner outputs build flags that add Scanner to your library and include paths\n\n# as well as cover common flags for building a shared library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Change this to wherever you installed deps.sh to\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# protoc generates the Python and C++ bindings for the ResizeArgs class.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# g++ builds the op library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "scanner/CMakeLists.txt" : {
      "ObjectId" : "ea69f105da47be4265dca0e8e042d28f9d95e417",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scanner/api/CMakeLists.txt" : {
      "ObjectId" : "2481f3a42c7002530211dee13a5c88889978d231",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scanner/engine/CMakeLists.txt" : {
      "ObjectId" : "7593b9809d708a9305f3c1a040e5917414722e46",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scanner/util/CMakeLists.txt" : {
      "ObjectId" : "7d8b76254f71aeeb856e1e682a0968993cc0088c",
      "LastModified" : "2019-04-16T21:14:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright 2016 Carnegie Mellon University, NVIDIA Corporation\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "scanner/video/CMakeLists.txt" : {
      "ObjectId" : "d3ec8538ad26ece99b3e5fb57d8bd844e83a35b5",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(apoms): fix since change in decoder API\n\n# add_executable(DecoderAutomataTest decoder_automata_test.cpp)\n\n# target_link_libraries(DecoderAutomataTest\n\n#   ${GTEST_LIBRARIES} ${GTEST_LIB_MAIN}\n\n#   scanner)\n\n# add_test(DecoderAutomataTest DecoderAutomataTest)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "scanner/video/intel/CMakeLists.txt" : {
      "ObjectId" : "a95c792ed73ec2ebe1d5e6eb968408a117a7a8f4",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scanner/video/nvidia/CMakeLists.txt" : {
      "ObjectId" : "2c60ff15ac38e5f8a75c0f1b7a3ed9e02423dd6b",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scanner/video/software/CMakeLists.txt" : {
      "ObjectId" : "974182853457bc90ed91faeaed391f38f73fa98f",
      "LastModified" : "2019-03-27T20:52:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "3dbf95b3773753179eaad18f39f6f97ad72d1f18",
      "LastModified" : "2019-04-16T21:14:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 32,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1745
}