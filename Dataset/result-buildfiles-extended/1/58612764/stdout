{
  "Repository" : "58612764",
  "Revision" : "HEAD",
  "ObjectId" : "fafdccc9a83dc293db1c0b678f859aa8a067b296",
  "CommitTime" : "2019-04-17T17:01:04Z",
  "Files" : {
    "SetupBLT.cmake" : {
      "ObjectId" : "45dc3f7d5dafe779c5b81a14b013230ade2d118b",
      "LastModified" : "2019-02-23T00:12:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if an explicit build dir was not specified, set a default.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "################################\n\n# Prevent in-source builds\n\n################################\n\n# Fail if someone tries to config an in-source build.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#################################\n\n# Show CMake info right out of the gate\n\n################################\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "################################\n\n# Setup build options and their default values\n\n################################\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "################################\n\n# CMP0057 New is required by blt_setup_target()\n\n# in order to support the IN_LIST if() operator\n\n################################\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "################################\n\n# Invoke CMake Fortran setup\n\n# if ENABLE_FORTRAN == ON\n\n################################\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "################################\n\n# Enable ctest support\n\n################################\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "################################\n\n# Enable cmake generator folder feature\n\n################################\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "################################\n\n# Enable cmake compilation database feature\n\n################################\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "################################\n\n# Macros\n\n################################\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "################################\n\n# Standard TPL support\n\n################################\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "################################\n\n# Git related Macros\n\n################################\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "################################\n\n# Setup docs targets\n\n################################\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "################################\n\n# Setup source checks\n\n################################\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "################################\n\n# Standard Build Layout\n\n################################\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set the path where all the libraries will be stored\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Set the path where all the installed executables will go\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Set the path were all test executables will go\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Set the path were all example test executables will go\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Set the Fortran module directory\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Mark as advanced\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "################################\n\n# Global variables needed by BLT\n\n#\n\n################################\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "################################\n\n# Setup compiler options\n\n# (must be included after HEADER_INCLUDES_DIRECTORY and MPI variables are set)\n\n################################\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "################################\n\n# Setup code metrics -\n\n# profiling, code coverage, etc.\n\n# (must be included after SetupCompilerOptions)\n\n################################\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "################################\n\n# builtin third party libs used by BLT\n\n################################\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "################################\n\n# BLT smoke tests\n\n################################\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# only load BLT once!\n",
        "Line" : 191,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 28
    },
    "cmake/BLTGitMacros.cmake" : {
      "ObjectId" : "9812e6bcce0b73eb5a9b4eb596f41687f521ba1e",
      "LastModified" : "2019-02-23T00:12:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_git( SOURCE_DIR <dir>\n\n##          GIT_COMMAND <command>\n\n##          OUTPUT_VARIABLE <out>\n\n##          RETURN_CODE <rc>\n\n##          [QUIET] )\n\n##\n\n## Runs the supplied git command on the given Git repository.\n\n##\n\n## This macro runs the user-supplied Git command, given by GIT_COMMAND, on the\n\n## given Git repository corresponding to SOURCE_DIR. The supplied GIT_COMMAND\n\n## is just a string consisting of the Git command and its arguments. The\n\n## resulting output is returned to the supplied CMake variable provided by\n\n## the OUTPUT_VARIABLE argument.\n\n##\n\n## A return code for the Git command is returned to the caller via the CMake\n\n## variable provided with the RETURN_CODE argument. A non-zero return code\n\n## indicates that an error has occured.\n\n##\n\n## Note, this macro assumes FindGit() was invoked and was successful. It relies\n\n## on the following variables set by FindGit():\n\n##   - Git_FOUND flag that indicates if git is found\n\n##   - GIT_EXECUTABLE points to the Git binary\n\n##\n\n## If Git_FOUND is \"false\" this macro will throw a FATAL_ERROR message.\n\n##\n\n## Usage Example:\n\n##\n\n##    blt_git( SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}\n\n##             GIT_COMMAND describe --tags master\n\n##             OUTPUT_VARIABLE axom_tag\n\n##             RETURN_CODE rc\n\n##             )\n\n##\n\n##    if (NOT ${rc} EQUAL 0)\n\n##      message( FATAL_ERROR \"blt_git failed!\" )\n\n##    endif()\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## parse macro arguments\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "## ensure required arguments are supplied\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "## check arguments\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "## assemble the Git command\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "## run it\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_is_git_repo( OUTPUT_STATE <state>\n\n##                  [SOURCE_DIR <dir>]\n\n##                  )\n\n##\n\n## Checks if we are working with a valid Git repository.\n\n##\n\n## This macro checks if the corresponding source directory is a valid Git repo.\n\n## Nominally, the corresponding source directory that is used is set to\n\n## ${CMAKE_CURRENT_SOURCE_DIR}. A different source directory may be optionally\n\n## specified using the SOURCE_DIR argument.\n\n##\n\n## The resulting state is stored in the CMake variable specified by the caller\n\n## using the OUTPUT_STATE parameter.\n\n##\n\n## Usage Example:\n\n##\n\n##    blt_is_git_repo( OUTTPUT_STATE is_git_repo )\n\n##    if ( ${is_git_repo} )\n\n##      message(STATUS \"Pointing to a valid Git repo!\")\n\n##    else()\n\n##      message(STATUS \"Not a Git repo!\")\n\n##    endif()\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## parse macro arguments\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "## ensure required variables are supplied\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "## check if SOURCE_DIR was supplied\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## rev-parse failed, this is not a git repo\n",
        "Line" : 152,
        "CharPositionInLine" : 7
      },
      "12" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_git_tag( OUTPUT_TAG <tag>\n\n##              RETURN_CODE <rc>\n\n##              [SOURCE_DIR <dir>]\n\n##              [ON_BRANCH <branch>]\n\n##              )\n\n##\n\n## Returns the latest tag on a corresponding Git repository.\n\n##\n\n## This macro gets the latest tag from a Git repository that can be specified\n\n## via the SOURCE_DIR argument. If SOURCE_DIR is not supplied, the macro will\n\n## use ${CMAKE_CURRENT_SOURCE_DIR}. By default the macro will return the latest\n\n## tag on the branch that is currently checked out. A particular branch may be\n\n## specified using the ON_BRANCH option.\n\n##\n\n## The tag is stored in the CMake variable specified by the caller using the\n\n## the OUTPUT_TAG parameter.\n\n##\n\n## A return code for the Git command is returned to the caller via the CMake\n\n## variable provided with the RETURN_CODE argument. A non-zero return code\n\n## indicates that an error has occured.\n\n##\n\n## Usage Example:\n\n##\n\n##    blt_git_tag( OUTPUT_TAG tag RETURN_CODE rc ON_BRANCH master )\n\n##\n\n##    if ( NOT ${rc} EQUAL 0 )\n\n##      message( FATAL_ERROR \"blt_git_tag failed!\" )\n\n##    endif()\n\n##\n\n##    message( STATUS \"tag=${tag}\" )\n\n##------------------------------------------------------------------------------\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## parse macro arguments\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "## ensure required arguments are supplied\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "## git command to execute\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "## set working directory\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_git_branch( BRANCH_NAME <branch>\n\n##                 RETURN_CODE <rc>\n\n##                 [SOURCE_DIR <dir>]\n\n##                 )\n\n##\n\n## Returns the name of the active branch in the checkout space.\n\n##\n\n## This macro gets the name of the current active branch in the checkout space\n\n## that can be specified using the SOURCE_DIR argument. If SOURCE_DIR is not\n\n## supplied by the caller, this macro will point to the checkout space\n\n## corresponding to ${CMAKE_CURRENT_SOURCE_DIR}.\n\n##\n\n## A return code for the Git command is returned to the caller via the CMake\n\n## variable provided with the RETURN_CODE argument. A non-zero return code\n\n## indicates that an error has occured.\n\n##\n\n## Usage Example:\n\n##\n\n##    blt_git_branch( BRANCH_NAME active_branch RETURN_CODE rc )\n\n##\n\n##    if ( NOT ${rc} EQUAL 0 )\n\n##      message( FATAL_ERROR \"blt_git_tag failed!\" )\n\n##    endif()\n\n##\n\n##    message( STATUS \"active_branch=${active_branch}\" )\n\n##------------------------------------------------------------------------------\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## parse macro arguments\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "## ensure required arguments are supplied\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "## set set working directory\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_git_hashcode( HASHCODE <hc>\n\n##                   RETURN_CODE <rc>\n\n##                   [SOURCE_DIR <dir>]\n\n##                   [ON_BRANCH <branch>]\n\n##                   )\n\n##\n\n## Returns the SHA-1 hashcode at the tip of a branch.\n\n##\n\n## This macro returns the SHA-1 hashcode at the tip of a branch that may be\n\n## specified with the ON_BRANCH argument. If the ON_BRANCH argument is not\n\n## supplied, the macro will return the SHA-1 hash at the tip of the current\n\n## branch. In addition, the caller may specify the target Git repository using\n\n## the SOURCE_DIR argument. Otherwise, if SOURCE_DIR is not specified, the\n\n## macro will use ${CMAKE_CURRENT_SOURCE_DIR}.\n\n##\n\n## A return code for the Git command is returned to the caller via the CMake\n\n## variable provided with the RETURN_CODE argument. A non-zero return code\n\n## indicates that an error has occured.\n\n##\n\n## Usage Example:\n\n##\n\n##    blt_git_hashcode( HASHCODE sha1 RETURN_CODE rc )\n\n##    if ( NOT ${rc} EQUAL 0 )\n\n##      message( FATAL_ERROR \"blt_git_hashcode failed!\" )\n\n##    endif()\n\n##\n\n##    message( STATUS \"sha1=${sha1}\" )\n\n##------------------------------------------------------------------------------\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## parse macro arguments\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "## ensure required arguments are supplied\n",
        "Line" : 333,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "## set working directory\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "## set target ref\n",
        "Line" : 349,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "cmake/BLTMacros.cmake" : {
      "ObjectId" : "2c40fed18b7343f0c1af5570adf87940cb7bb0d7",
      "LastModified" : "2019-04-05T13:32:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_list_append( TO <list> ELEMENTS [ <element>...] IF <bool> )\n\n##\n\n## Appends elements to a list if the specified bool evaluates to true.\n\n##\n\n## This macro is essentially a wrapper around CMake's `list(APPEND ...)`\n\n## command which allows inlining a conditional check within the same call\n\n## for clarity and convenience.\n\n##\n\n## This macro requires specifying:\n\n##   (1) The target list to append to by passing TO <list>\n\n##   (2) A condition to check by passing IF <bool>\n\n##   (3) The list of elements to append by passing ELEMENTS [<element>...]\n\n##\n\n## Note, the argument passed to the IF option has to be a single boolean value\n\n## and cannot be a boolean expression since CMake cannot evaluate those inline.\n\n##\n\n## Usage Example:\n\n##\n\n##  set(mylist A B)\n\n##  blt_list_append( TO mylist ELEMENTS C IF ${ENABLE_C} )\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# parse macro arguments\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# sanity checks\n",
        "Line" : 41,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# append if\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_target_definitions(TO <target> TARGET_DEFINITIONS [FOO [BAR ...]])\n\n##\n\n## Adds pre-processor definitions to the given target.\n\n##\n\n## Adds pre-processor definitions to a particular target. This macro provides very\n\n## similar functionality to cmake's native \"add_definitions\" command, but,\n\n## it provides more fine-grained scoping for the compile definitions on a\n\n## per target basis. Given a list of definitions, e.g., FOO and BAR, this macro\n\n## adds compiler definitions to the compiler command for the given target, i.e.,\n\n## it will pass -DFOO and -DBAR.\n\n##\n\n## The supplied target must be added via add_executable() or add_library() or\n\n## with the corresponding blt_add_executable() and blt_add_library() macros.\n\n##\n\n## Note, the target definitions can either include or omit the \"-D\" characters. \n\n## E.g. the following are all valid ways to add two compile definitions \n\n## (A=1 and B) to target 'foo'\n\n##\n\n##   blt_add_target_definitions(TO foo TARGET_DEFINITIONS A=1 B)\n\n##   blt_add_target_definitions(TO foo TARGET_DEFINITIONS -DA=1 -DB)\n\n##   blt_add_target_definitions(TO foo TARGET_DEFINITIONS \"A=1;-DB\")\n\n##   blt_add_target_definitions(TO foo TARGET_DEFINITIONS \" \" -DA=1;B\")\n\n##------------------------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Parse the arguments to the macro\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "## check that the passed in parameter TO is actually a target\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "## only add the flag if it is not empty\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_target_compile_flags (TO <target> FLAGS [FOO [BAR ...]])\n\n##\n\n## Adds compiler flags to a target (library, executable or interface) by \n\n## appending to the target's existing flags.\n\n##\n\n## The TO argument (required) specifies a cmake target.\n\n##\n\n## The FLAGS argument contains a list of compiler flags to add to the target. \n\n## This macro will strip away leading and trailing whitespace from each flag.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## check that the passed in parameter TO is actually a target\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## only add the flag if it is not empty\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_set_target_folder (TARGET <target> FOLDER <folder>)\n\n##\n\n## Sets the folder property of cmake target <target> to <folder>.\n\n##\n\n## This feature is only available when blt's ENABLE_FOLDERS option is ON and \n\n## in cmake generators that support folders (but is safe to call regardless\n\n## of the generator or value of ENABLE_FOLDERS).\n\n##\n\n## Note: Do not use this macro on header-only (INTERFACE) library targets, since \n\n## this will generate a cmake configuration error.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "## check for required arguments\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "## set the folder property for this target\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_target_link_flags (TO <target> FLAGS [FOO [BAR ...]])\n\n##\n\n## Adds linker flags to a target by appending to the target's existing flags.\n\n##\n\n## The flags argument contains a ;-list of linker flags to add to the target.\n\n## This list is converted to a string internally and any ; characters will be\n\n## removed.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# get prev flags\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# append new flag\n",
        "Line" : 225,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Convert _LINK_FLAGS from a CMake ;-list to a string\n",
        "Line" : 227,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_register_library( NAME <libname>\n\n##                       DEPENDS_ON [dep1 [dep2 ...]]\n\n##                       INCLUDES [include1 [include2 ...]]\n\n##                       TREAT_INCLUDES_AS_SYSTEM [ON|OFF]\n\n##                       FORTRAN_MODULES [ path1 [ path2 ..]]\n\n##                       LIBRARIES [lib1 [lib2 ...]]\n\n##                       COMPILE_FLAGS [ flag1 [ flag2 ..]]\n\n##                       LINK_FLAGS [ flag1 [ flag2 ..]]\n\n##                       DEFINES [def1 [def2 ...]] )\n\n##\n\n## Registers a library to the project to ease use in other blt macro calls.\n\n##\n\n## Stores information about a library in a specific way that is easily recalled\n\n## in other macros.  For example, after registering gtest, you can add gtest to\n\n## the DEPENDS_ON in your blt_add_executable call and it will add the INCLUDES\n\n## and LIBRARIES to that executable.\n\n##\n\n## TREAT_INCLUDES_AS_SYSTEM informs the compiler to treat this library's include paths\n\n## as system headers.  Only some compilers support this. This is useful if the headers\n\n## generate warnings you want to not have them reported in your build. This defaults\n\n## to OFF.\n\n##\n\n## This does not actually build the library.  This is strictly to ease use after\n\n## discovering it on your system or building it yourself inside your project.\n\n##\n\n## Note: The OBJECT parameter is for internal BLT support for object libraries\n\n## and is not for users.  Object libraries are created using blt_add_library().\n\n##\n\n## Output variables (name = \"foo\"):\n\n##  BLT_FOO_IS_REGISTERED_LIBRARY\n\n##  BLT_FOO_IS_OBJECT_LIBRARY\n\n##  BLT_FOO_DEPENDS_ON\n\n##  BLT_FOO_INCLUDES\n\n##  BLT_FOO_TREAT_INCLUDES_AS_SYSTEM\n\n##  BLT_FOO_FORTRAN_MODULES\n\n##  BLT_FOO_LIBRARIES\n\n##  BLT_FOO_COMPILE_FLAGS\n\n##  BLT_FOO_LINK_FLAGS\n\n##  BLT_FOO_DEFINES\n\n##------------------------------------------------------------------------------\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## parse the arguments\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# This prevents cmake from falling back on adding -l<library name>\n\n# to the command line for BLT registered libraries which are not\n\n# actual CMake targets\n",
        "Line" : 328,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_library( NAME         <libname>\n\n##                  SOURCES      [source1 [source2 ...]]\n\n##                  HEADERS      [header1 [header2 ...]]\n\n##                  INCLUDES     [dir1 [dir2 ...]]\n\n##                  DEFINES      [define1 [define2 ...]]\n\n##                  DEPENDS_ON   [dep1 ...] \n\n##                  OUTPUT_NAME  [name]\n\n##                  OUTPUT_DIR   [dir]\n\n##                  SHARED       [TRUE | FALSE]\n\n##                  OBJECT       [TRUE | FALSE]\n\n##                  CLEAR_PREFIX [TRUE | FALSE]\n\n##                  FOLDER       [name]\n\n##                 )\n\n##\n\n## Adds a library target, called <libname>, to be built from the given sources.\n\n## This macro uses the BUILD_SHARED_LIBS, which is defaulted to OFF, to determine\n\n## whether the library will be build as shared or static. The optional boolean\n\n## SHARED argument can be used to override this choice.\n\n##\n\n## The OBJECT argument creates a CMake object library. Basically it is a collection\n\n## of compiled source files that are not archived or linked. Unlike regular CMake\n\n## object libraries you do not have to use the $<TARGET_OBJECTS:<libname>> syntax,\n\n## you can just use <libname>.\n\n##    Note: Object libraries do not follow CMake's transitivity rules until 3.12.\n\n##          BLT will add the various information provided in this macro and its\n\n##          dependencies in the order you provide them to help.\n\n##\n\n## The INCLUDES argument allows you to define what include directories are\n\n## needed by any target that is dependent on this library.  These will\n\n## be inherited by CMake's target dependency rules.\n\n##\n\n## The DEFINES argument allows you to add needed compiler definitions that are\n\n## needed by any target that is dependent on this library.  These will\n\n## be inherited by CMake's target dependency rules.\n\n##\n\n## If given a DEPENDS_ON argument, it will add the necessary includes and \n\n## libraries if they are already registered with blt_register_library.  If \n\n## not it will add them as a CMake target dependency.\n\n##\n\n## In addition, this macro will add the associated dependencies to the given\n\n## library target. Specifically, it will add the dependency for the CMake target\n\n## and for copying the headers for that target as well.\n\n##\n\n## The OUTPUT_DIR is used to control the build output directory of this \n\n## library. This is used to overwrite the default lib directory.\n\n##\n\n## OUTPUT_NAME is the name of the output file; the default is NAME.\n\n## It's useful when multiple libraries with the same name need to be created\n\n## by different targets. NAME is the target name, OUTPUT_NAME is the library name.\n\n##\n\n## CLEAR_PREFIX allows you to remove the automatically appended \"lib\" prefix\n\n## from your built library.  The created library will be foo.a instead of libfoo.a.\n\n##\n\n## FOLDER is an optional keyword to organize the target into a folder in an IDE.\n\n## This is available when ENABLE_FOLDERS is ON and when the cmake generator\n\n## supports this feature and will otherwise be ignored. \n\n##    Note: Do not use with header-only (INTERFACE)libraries, as this will generate \n\n##          a cmake configuration error.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# parse the arguments\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# sanity checks\n",
        "Line" : 423,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Determine type of library to build. STATIC by default and OBJECT takes\n\n# precedence over global BUILD_SHARED_LIBS variable.\n",
        "Line" : 443,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "#\n\n#  Header-only library support\n\n#\n",
        "Line" : 481,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Determine build location of headers\n",
        "Line" : 488,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# Determine install location of headers\n",
        "Line" : 491,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "#Note: This only works if both libraries are handled in the same directory,\n\n#  otherwise just don't include non-header files in your source list.\n",
        "Line" : 495,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Clear value of _have_fortran from previous calls\n",
        "Line" : 504,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Must tell fortran where to look for modules\n\n# CMAKE_Fortran_MODULE_DIRECTORY is the location of generated modules\n",
        "Line" : 507,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Handle optional FOLDER keyword for this target\n",
        "Line" : 546,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Don't clean header-only libraries because you would have to handle\n\n# the white-list of properties that are allowed\n",
        "Line" : 554,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_executable( NAME <name>\n\n##                     SOURCES [source1 [source2 ...]]\n\n##                     INCLUDES [dir1 [dir2 ...]]\n\n##                     DEFINES [define1 [define2 ...]]\n\n##                     DEPENDS_ON [dep1 [dep2 ...]]\n\n##                     OUTPUT_DIR [dir]\n\n##                     FOLDER [name])\n\n##\n\n## Adds an executable target, called <name>.\n\n##\n\n## The INCLUDES argument allows you to define what include directories are\n\n## needed to compile this executable.\n\n##\n\n## The DEFINES argument allows you to add needed compiler definitions that are\n\n## needed to compile this executable.\n\n##\n\n## If given a DEPENDS_ON argument, it will add the necessary includes and \n\n## libraries if they are already registered with blt_register_library.  If\n\n## not it will add them as a cmake target dependency.\n\n##\n\n## The OUTPUT_DIR is used to control the build output directory of this \n\n## executable. This is used to overwrite the default bin directory.\n\n##\n\n## If the first entry in SOURCES is a Fortran source file, the fortran linker \n\n## is used. (via setting the CMake target property LINKER_LANGUAGE to Fortran )\n\n##\n\n## FOLDER is an optional keyword to organize the target into a folder in an IDE.\n\n## This is available when ENABLE_FOLDERS is ON and when using a cmake generator\n\n## that supports this feature and will otherwise be ignored.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 562,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Parse the arguments to the macro\n",
        "Line" : 599,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# sanity checks\n",
        "Line" : 603,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# CMake wants to load with C++ if any of the libraries are C++.\n\n# Force to load with Fortran if the first file is Fortran.\n",
        "Line" : 627,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# when using shared libs on windows, all runtime targets\n\n# (dlls and exes) must live in the same dir\n\n# so we do not set runtime_output_dir in this case\n",
        "Line" : 650,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Handle optional FOLDER keyword for this target\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_test( NAME [name] COMMAND [command] NUM_MPI_TASKS [n] )\n\n##\n\n## Adds a CMake test to the project.\n\n##\n\n## NAME is used for the name that CTest reports with.\n\n##\n\n## COMMAND is the command line that will be used to run the test. This will\n\n## have the RUNTIME_OUTPUT_DIRECTORY prepended to it to fully qualify the path.\n\n##\n\n## NUM_MPI_TASKS indicates this is an MPI test and how many tasks to use. The\n\n## command line will use MPIEXEC, MPIEXEC_NUMPROC_FLAG, and BLT_MPI_COMMAND_APPEND\n\n## to create the MPI run line.\n\n##\n\n## MPIEXEC and MPIEXEC_NUMPROC_FLAG are filled in by CMake's FindMPI.cmake but can\n\n## be overwritten in your host-config specific to your platform. BLT_MPI_COMMAND_APPEND\n\n## is useful on machines that require extra arguments to MPIEXEC.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 670,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Parse the arguments to the macro\n",
        "Line" : 694,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Extract test directory and executable from arg_NAME and arg_COMMAND\n",
        "Line" : 706,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Handle cases where multiple tests are run against one executable\n\n# the NAME will not be the target\n",
        "Line" : 708,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# Append the test_directory to the test argument, accounting for multi-config generators\n",
        "Line" : 717,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# If configuration option ENABLE_WRAP_ALL_TESTS_WITH_MPIEXEC is set, \n\n# ensure NUM_MPI_TASKS is at least one. This invokes the test \n\n# through MPIEXEC.\n",
        "Line" : 726,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Handle MPI\n",
        "Line" : 733,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_benchmark( NAME [name] COMMAND [command]  )\n\n##\n\n## Adds a (google) benchmark test to the project.\n\n##\n\n## NAME is used for the name that CTest reports and should include the string 'benchmark'.\n\n##\n\n## COMMAND is the command line that will be used to run the test and can include arguments.  \n\n## This will have the RUNTIME_OUTPUT_DIRECTORY prepended to it to fully qualify the path.\n\n##\n\n## The underlying executable (added with blt_add_executable) should include gbenchmark\n\n## as one of its dependencies.\n\n##\n\n##  Example\n\n##    blt_add_executable(NAME component_benchmark ... DEPENDS gbenchmark)\n\n##    blt_add_benchmark( \n\n##          NAME component_benchmark\n\n##          COMMAND component_benchmark \"--benchmark_min_time=0.0 --v=3 --benchmark_format=json\"\n\n##          )\n\n##------------------------------------------------------------------------------\n",
        "Line" : 745,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 773,
        "CharPositionInLine" : 6
      },
      "52" : {
        "Text" : "# Generate command\n",
        "Line" : 785,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "# Handle case of running multiple tests against one executable, \n\n# the NAME will not be the target\n",
        "Line" : 787,
        "CharPositionInLine" : 10
      },
      "54" : {
        "Text" : "# Note: No MPI handling for now.  If desired, see how this is handled in blt_add_test macro\n",
        "Line" : 796,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "# The 'CONFIGURATIONS Benchmark' line excludes benchmarks \n\n# from the general list of tests\n",
        "Line" : 798,
        "CharPositionInLine" : 6
      },
      "56" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_append_custom_compiler_flag( \n\n##                    FLAGS_VAR  flagsVar       (required)\n\n##                    DEFAULT    defaultFlag    (optional)\n\n##                    GNU        gnuFlag        (optional)\n\n##                    CLANG      clangFlag      (optional)\n\n##                    HCC        hccFlag        (optional)\n\n##                    INTEL      intelFlag      (optional)\n\n##                    XL         xlFlag         (optional)\n\n##                    MSVC       msvcFlag       (optional)\n\n##                    MSVC_INTEL msvcIntelFlag  (optional)\n\n##                    PGI        pgiFlag        (optional)\n\n## )\n\n##\n\n## Appends compiler-specific flags to a given variable of flags\n\n##\n\n## If a custom flag is given for the current compiler, we use that.\n\n## Otherwise, we will use the DEFAULT flag (if present)\n\n## If ENABLE_FORTRAN is On, any flagsVar with \"fortran\" (any capitalization)\n\n## in its name will pick the compiler family (GNU,CLANG, INTEL, etc) based on\n\n## the fortran compiler family type. This allows mixing C and Fortran compiler\n\n## families, e.g. using Intel fortran compilers with clang C compilers. \n\n## When using the Intel toolchain within visual studio, we use the \n\n## MSVC_INTEL flag, when provided, with a fallback to the MSVC flag.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 844,
        "CharPositionInLine" : 3
      },
      "58" : {
        "Text" : "# Sanity check for required keywords\n",
        "Line" : 848,
        "CharPositionInLine" : 3
      },
      "59" : {
        "Text" : "# Set the desired flags based on the compiler family   \n\n# MSVC COMPILER FAMILY applies to C/C++ and Fortran\n",
        "Line" : 853,
        "CharPositionInLine" : 3
      },
      "60" : {
        "Text" : "#else, if we are setting a fortran flag, check against the fortran compiler family\n",
        "Line" : 861,
        "CharPositionInLine" : 3
      },
      "61" : {
        "Text" : "#else, we are setting a non MSVC C/C++ flag, check against the C family. \n",
        "Line" : 877,
        "CharPositionInLine" : 3
      },
      "62" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_find_libraries( FOUND_LIBS <FOUND_LIBS variable name>\n\n##                     NAMES [libname1 [libname2 ...]]\n\n##                     REQUIRED [TRUE (default) | FALSE ]\n\n##                     PATHS [path1 [path2 ...]] )\n\n##\n\n## This command is used to find a list of libraries.\n\n## \n\n## If the libraries are found the results are appended to the given FOUND_LIBS variable name.\n\n##\n\n## NAMES lists the names of the libraries that will be searched for in the given PATHS.\n\n##\n\n## If REQUIRED is set to TRUE, BLT will produce an error message if any of the\n\n## given libraries are not found.  The default value is TRUE.\n\n##\n\n## PATH lists the paths in which to search for NAMES. No system paths will be searched.\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 898,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "## parse the arguments\n",
        "Line" : 922,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_combine_static_libraries( NAME <libname>\n\n##                               SOURCE_LIBS [lib1 ...] \n\n##                               LIB_TYPE [STATIC,SHARED]\n\n##                               LINK_PREPEND []\n\n##                               LINK_POSTPEND []\n\n##                             )\n\n##\n\n## Adds a library target, called <libname>, to be built from the set of \n\n## static libraries given in SOURCE_LIBS.\n\n## \n\n## The LINK_PREPEND argument will be prepended to the library on the link line,\n\n## while the LINK_POSTPEND will be appended to the library on the link line.\n\n## These values are defaulted to the appropriate values for CMAKE_HOST_APPLE and \n\n## CMAKE_HOST_UNIX.\n\n##\n\n## Note: This macro does not currently work for Windows\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 961,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# sanity checks\n",
        "Line" : 989,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Default linker flags if not given\n",
        "Line" : 1002,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# This used to work. Needs to be fixed\n\n# set( _link_prepend \"-WHOLEARCHIVE:\" )\n",
        "Line" : 1009,
        "CharPositionInLine" : 12
      },
      "68" : {
        "Text" : "# Create link line that has all the libraries to combine on it\n",
        "Line" : 1033,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Decide if the created library is static or shared\n",
        "Line" : 1043,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Create new library with empty source file\n",
        "Line" : 1052,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Add the combined link line flag\n",
        "Line" : 1056,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Add the includes that should be inherited from themselves and their dependencies\n",
        "Line" : 1059,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Get all includes from the dependencies of the libraries to be combined\n",
        "Line" : 1081,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "# Filter out non-CMake targets\n",
        "Line" : 1084,
        "CharPositionInLine" : 12
      },
      "75" : {
        "Text" : "# Add any shared libraries that were added by file name\n",
        "Line" : 1111,
        "CharPositionInLine" : 16
      },
      "76" : {
        "Text" : "# Remove duplicates from the includes\n",
        "Line" : 1117,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# Remove any system includes from the regular includes\n",
        "Line" : 1121,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_print_target_properties (TARGET <target> )\n\n##\n\n## Prints out all properties of the given target.\n\n##\n\n## The required target parameteter must either be a valid cmake target \n\n## or was registered via blt_register_library.\n\n##\n\n## Output is of the form:\n\n##     [<target> property] <property>: <value>\n\n## for each property\n\n##------------------------------------------------------------------------------\n",
        "Line" : 1145,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 1163,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "## check for required arguments\n",
        "Line" : 1167,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "## check if this is a valid cmake target of blt_registered target\n",
        "Line" : 1172,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "## Solution adapted from https://stackoverflow.com/q/32183975\n\n## Create list of cmake properties\n",
        "Line" : 1193,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "## For interface targets, filter against whitelist of valid properties\n",
        "Line" : 1202,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "## Print all such properties that have been SET\n",
        "Line" : 1210,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "## Additionally, output variables generated via blt_register_target of the form \"BLT_<target>_*\"\n",
        "Line" : 1223,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "## Filter to get variables of the form BLT_<target>_ and print\n",
        "Line" : 1227,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 87
    },
    "cmake/BLTOptions.cmake" : {
      "ObjectId" : "4fc41f7bcdf28f2dc4e1717817bf031ffe893a70",
      "LastModified" : "2019-04-05T13:32:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################\n\n# Build Targets\n\n################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################\n\n# TPL Executable Options\n\n################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################\n\n# Build Options\n\n################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Options that control if Google Test, Google Mock, and Fruit are built \n\n# and available for use. \n\n#\n\n# If ENABLE_TESTS=OFF, no testing support is built and these option are ignored.\n\n#\n\n# Google Mock requires and always builds Google Test, so ENABLE_GMOCK=ON\n\n# implies ENABLE_GTEST=ON.\n\n#\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################\n\n# Compiler Options\n\n################################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################\n\n# Generator Options\n\n################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################\n\n# Advanced configuration options\n\n################################\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All advanced options should be marked as advanced\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/BLTPrivateMacros.cmake" : {
      "ObjectId" : "de1b2ed3da4cc866d3799ba2cfb628bcd231f47c",
      "LastModified" : "2019-04-05T13:32:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Internal BLT CMake Macros\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##-----------------------------------------------------------------------------\n\n## blt_error_if_target_exists()\n\n##\n\n## Checks if target already exists in CMake project and errors out with given\n\n## error_msg.\n\n##-----------------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##-----------------------------------------------------------------------------\n\n## blt_find_executable(NAME         <name of program to find>\n\n##                     EXECUTABLES  [exe1 [exe2 ...]])\n\n##\n\n## This macro attempts to find the given executable via either a previously defined\n\n## <UPPERCASE_NAME>_EXECUTABLE or using find_program with the given EXECUTABLES.\n\n## if EXECUTABLES is left empty, then NAME is used.\n\n##\n\n## If successful the following variables will be defined:\n\n## <UPPERCASE_NAME>_FOUND\n\n## <UPPERCASE_NAME>_EXECUTABLE\n\n##-----------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Check arguments\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Handle REQUIRED and QUIET arguments\n\n# this will also set ${_ucname}_FOUND to true if ${_ucname}_EXECUTABLE exists\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_inherit_target_info( TO       <target>\n\n##                          FROM     <target>\n\n##                          OBJECT   [TRUE|FALSE])\n\n##\n\n##  The purpose of this macro is if you want to grab all the inheritable info\n\n##  from the FROM target but don't want to make the TO target depend on it.\n\n##  Which is useful if you don't want to export the FROM target.\n\n##\n\n##  The OBJECT parameter is because object libraries can only inherit certain\n\n##  properties.\n\n##\n\n##  This inherits the following properties:\n\n##    INTERFACE_COMPILE_DEFINITIONS\n\n##    INTERFACE_INCLUDE_DIRECTORIES\n\n##    INTERFACE_LINK_DIRECTORIES\n\n##    INTERFACE_LINK_LIBRARIES\n\n##    INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\n\n##------------------------------------------------------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check arguments\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_setup_target( NAME       [name] \n\n##                   DEPENDS_ON [dep1 ...] \n\n##                   OBJECT     [TRUE | FALSE])\n\n##------------------------------------------------------------------------------\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Check arguments\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Expand dependency list\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Add dependency's information\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# We want object libraries to inherit the vital info but not call\n\n# target_link_libraries() otherwise you have to install the object\n\n# files associated with the object library which noone wants.\n",
        "Line" : 212,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# This prevents cmake from adding -l<library name> to the\n\n# command line for BLT registered libraries which are not\n\n# actual CMake targets\n",
        "Line" : 221,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_setup_cuda_target(NAME <name of target>\n\n##                       SOURCES <list of sources>\n\n##                       DEPENDS_ON <list of dependencies>\n\n##                       LIBRARY_TYPE <STATIC, SHARED, OBJECT, or blank for executables>)\n\n##------------------------------------------------------------------------------\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Check arguments\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Determine if cuda or cuda_runtime are in DEPENDS_ON\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# if cuda is in depends_on, flag each file's language as CUDA\n\n# instead of leaving it up to CMake to decide\n\n# Note: we don't do this when depending on just 'cuda_runtime'\n",
        "Line" : 297,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_hip_library(NAME         <libname>\n\n##                     SOURCES      [source1 [source2 ...]]\n\n##                     HEADERS      [header1 [header2 ...]]\n\n##                     DEPENDS_ON   [dep1 ...]\n\n##                     LIBRARY_TYPE <STATIC, SHARED, or OBJECT>\n\n##------------------------------------------------------------------------------\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 341,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Check arguments\n",
        "Line" : 345,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Determine if hip or hip_runtime are in DEPENDS_ON\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# if hip is in depends_on, flag each file's language as HIP\n\n# instead of leaving it up to CMake to decide\n\n# Note: we don't do this when depending on just 'hip_runtime'\n",
        "Line" : 367,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_hip_executable(NAME         <libname>\n\n##                        SOURCES      [source1 [source2 ...]]\n\n##                        DEPENDS_ON   [dep1 ...]\n\n##------------------------------------------------------------------------------\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Check arguments\n",
        "Line" : 402,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Determine if hip or hip_runtime are in DEPENDS_ON\n",
        "Line" : 411,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# if hip is in depends_on, flag each file's language as HIP\n\n# instead of leaving it up to CMake to decide\n\n# Note: we don't do this when depending on just 'hip_runtime'\n",
        "Line" : 424,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_split_source_list_by_language( SOURCES <sources>\n\n##                                    C_LIST <list name>\n\n##                                    Fortran_LIST <list name>)\n\n##------------------------------------------------------------------------------\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 455,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Check arguments\n",
        "Line" : 459,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Generate source lists based on language\n",
        "Line" : 464,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_update_project_sources( TARGET_SOURCES <sources> )\n\n##------------------------------------------------------------------------------\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Parse the arguments\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Check arguments\n",
        "Line" : 498,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "## append the target source to the all project sources\n",
        "Line" : 503,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_filter_list( TO <list_var> REGEX <string> OPERATION <string> )\n\n##\n\n## This macro provides the same functionality as cmake's list(FILTER )\n\n## which is only available in cmake-3.6+.\n\n##\n\n## The TO argument (required) is the name of a list variable.\n\n## The REGEX argument (required) is a string containing a regex.\n\n## The OPERATION argument (required) is a string that defines the macro's operation.\n\n## Supported values are \"include\" and \"exclude\"\n\n##\n\n## The filter is applied to the input list, which is modified in place.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Parse arguments\n",
        "Line" : 539,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Check arguments\n",
        "Line" : 543,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Ensure OPERATION argument is provided with value \"include\" or \"exclude\"\n",
        "Line" : 552,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Filter the list\n",
        "Line" : 566,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Copy result back to input list variable\n",
        "Line" : 580,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_clean_target( TARGET <target name> )\n\n##\n\n## This macro removes duplicates in a small subset of target properties that are\n\n## safe to do so.\n\n##------------------------------------------------------------------------------\n",
        "Line" : 588,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Parse arguments\n",
        "Line" : 600,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Properties to remove duplicates from\n",
        "Line" : 604,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 49
    },
    "cmake/SetupCodeChecks.cmake" : {
      "ObjectId" : "d44eea9f29fb92900f9571dec370ffd1c4f69208",
      "LastModified" : "2019-02-23T00:12:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Targets related to source code checks (formatting, static analysis, etc)\n\n###############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# targets for verifying formatting\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# targets for modifying formatting\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# targets for verifying formatting\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# targets for modifying formatting\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# note: interactive_clang_query_check \n\n# is for the use of code developers who\n\n# want to check specific attributes of\n\n# specific targets, and does not make \n\n# sense as a dependency of check\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Code check targets should only be run on demand\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_code_checks( PREFIX              <Base name used for created targets>\n\n##                      SOURCES             [source1 [source2 ...]]\n\n##                      UNCRUSTIFY_CFG_FILE <path to uncrustify config file>\n\n##                      ASTYLE_CFG_FILE     <path to astyle config file>)\n\n##\n\n## This macro adds all enabled code check targets for the given SOURCES. It\n\n## filters based on file extensions.\n\n##\n\n## PREFIX is used in the creation of all the underlying targets. For example:\n\n## <PREFIX>_uncrustify_check.\n\n##\n\n## Sources are filtered based on file extensions for use in these code checks.  If you need\n\n## additional file extensions defined add them to BLT_C_FILE_EXTS and BLT_Fortran_FILE_EXTS.\n\n##\n\n## This macro supports formatting with either Uncrustify or AStyle (but not both) using\n\n## the following parameters:\n\n##\n\n## * UNCRUSTIFY_CFG_FILE is the configuration file for Uncrustify. If UNCRUSTIFY_EXECUTABLE\n\n##   is defined, found, and UNCRUSTIFY_CFG_FILE is provided it will create both check and\n\n##   style function for the given C/C++ files.\n\n##\n\n## * ASTYLE_CFG_FILE is the configuration file for AStyle. If ASTYLE_EXECUTABLE\n\n##   is defined, found, and ASTYLE_CFG_FILE is provided it will create both check and\n\n##   style function for the given C/C++ files.\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Make the sources relative to the bin directory\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Get full path\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Generate source lists based on language\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Check that at most one formatting config file was supplied\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Add code checks\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "##-----------------------------------------------------------------------------\n\n## blt_add_clang_query_target( NAME             <Created Target Name>\n\n##                          WORKING_DIRECTORY   <Working Directory>\n\n##                          COMMENT             <Additional Comment for Target Invocation>\n\n##                          CHECKERS            <If specified, requires a specific set of checkers>\n\n##                          DIE_ON_MATCH        <If true, matches stop the build>\n\n##                          SRC_FILES           [FILE1 [FILE2 ...]] )\n\n##\n\n## Creates a new target with the given NAME for running clang_query over the given SRC_FILES\n\n##\n\n## COMMENT is prepended to the commented outputted by CMake.\n\n##\n\n## WORKING_DIRECTORY is the directory that clang_query will be ran.  It defaults to the directory\n\n## where this macro is called.\n\n##\n\n## DIE_ON_MATCH This will make a match cause the build to fail, useful if you're using this in\n\n##              CI to enforce rules about your code\n\n##\n\n## CHECKERS are the static analysis passes to specifically run on the target. Options\n\n##              (no value)          : run all available static analysis checks found\n\n##              (checker1:checker2) : run checker1 and checker2\n\n##              (interpreter)       : run the clang-query interpeter to interactively develop queries\n\n##\n\n## SRC_FILES is a list of source files that clang_query will be run on.\n\n##-----------------------------------------------------------------------------\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 222,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Check required parameters\n",
        "Line" : 230,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#DEFINED CHECKERS\n",
        "Line" : 259,
        "CharPositionInLine" : 15
      },
      "18" : {
        "Text" : "# hook our new target into the proper dependency chain\n",
        "Line" : 271,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Code check targets should only be run on demand\n",
        "Line" : 275,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "##-----------------------------------------------------------------------------\n\n## blt_add_cppcheck_target( NAME                <Created Target Name>\n\n##                          WORKING_DIRECTORY   <Working Directory>\n\n##                          PREPEND_FLAGS       <additional flags for cppcheck>\n\n##                          APPEND_FLAGS        <additional flags for cppcheck>\n\n##                          COMMENT             <Additional Comment for Target Invocation>\n\n##                          SRC_FILES           [FILE1 [FILE2 ...]] )\n\n##\n\n## Creates a new target with the given NAME for running cppcheck over the given SRC_FILES\n\n##\n\n## PREPEND_FLAGS are additional flags added to the front of the cppcheck flags.\n\n##\n\n## APPEND_FLAGS are additional flags added to the end of the cppcheck flags.\n\n##\n\n## COMMENT is prepended to the commented outputted by CMake.\n\n##\n\n## WORKING_DIRECTORY is the directory that cppcheck will be ran.  It defaults to the directory\n\n## where this macro is called.\n\n##\n\n## SRC_FILES is a list of source files that cppcheck will be run on.\n\n##-----------------------------------------------------------------------------\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Check required parameters\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# hook our new target into the proper dependency chain\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Code check targets should only be run on demand\n",
        "Line" : 338,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_uncrustify_target( NAME              <Created Target Name>\n\n##                            MODIFY_FILES      [TRUE | FALSE (default)]\n\n##                            CFG_FILE          <Uncrustify Configuration File> \n\n##                            PREPEND_FLAGS     <Additional Flags to Uncrustify>\n\n##                            APPEND_FLAGS      <Additional Flags to Uncrustify>\n\n##                            COMMENT           <Additional Comment for Target Invocation>\n\n##                            WORKING_DIRECTORY <Working Directory>\n\n##                            SRC_FILES         [FILE1 [FILE2 ...]] )\n\n##\n\n## Creates a new target with the given NAME for running uncrustify over the given SRC_FILES.\n\n##\n\n## MODIFY_FILES, if set to TRUE, modifies the files in place and adds the created target to\n\n## the style target.  Otherwise the files are not modified and the created target is added\n\n## to the check target.\n\n## Note: Setting MODIFY_FILES to FALSE is only supported in Uncrustify v0.61 or greater.\n\n##\n\n## CFG_FILE defines the uncrustify settings.\n\n##\n\n## PREPEND_FLAGS are additional flags added to the front of the uncrustify flags.\n\n##\n\n## APPEND_FLAGS are additional flags added to the end of the uncrustify flags.\n\n##\n\n## COMMENT is prepended to CMake's output for this target.\n\n##\n\n## WORKING_DIRECTORY is the directory in which uncrustify will be run.  It defaults \n\n## to the directory where this macro is called.\n\n##\n\n## SRC_FILES is a list of source files to style/check with uncrustify.\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 377,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Check/Set required parameters\n",
        "Line" : 385,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Check the version -- output is of the form \"uncrustify X.Y.Z\"\n",
        "Line" : 415,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# Skip 'check' target if version is not high enough \n",
        "Line" : 422,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# hook our new target into the proper dependency chain\n",
        "Line" : 439,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# Code formatting targets should only be run on demand\n",
        "Line" : 446,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## blt_add_astyle_target( NAME              <Created Target Name>\n\n##                        MODIFY_FILES      [TRUE | FALSE (default)]\n\n##                        CFG_FILE          <AStyle Configuration File> \n\n##                        PREPEND_FLAGS     <Additional Flags to AStyle>\n\n##                        APPEND_FLAGS      <Additional Flags to AStyle>\n\n##                        COMMENT           <Additional Comment for Target Invocation>\n\n##                        WORKING_DIRECTORY <Working Directory>\n\n##                        SRC_FILES         [FILE1 [FILE2 ...]] )\n\n##\n\n## Creates a new target with the given NAME for running astyle over the given SRC_FILES.\n\n##\n\n## MODIFY_FILES, if set to TRUE, modifies the files in place and adds the created target to\n\n## the style target. Otherwise the files are not modified and the created target is added\n\n## to the check target.  \n\n## Note: Setting MODIFY_FILES to FALSE is only supported in AStyle v2.05 or greater.\n\n##\n\n## CFG_FILE defines the astyle settings.\n\n##\n\n## PREPEND_FLAGS are additional flags added to the front of the astyle flags.\n\n##\n\n## APPEND_FLAGS are additional flags added to the end of the astyle flags.\n\n##\n\n## COMMENT is prepended to CMake's output for this target.\n\n##\n\n## WORKING_DIRECTORY is the directory in which astyle will be run. It defaults to \n\n## the directory where this macro is called.\n\n##\n\n## SRC_FILES is a list of source files to style/check with astyle.\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "## parse the arguments to the macro\n",
        "Line" : 486,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Check/Set required parameters\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Check the version -- output is of the form \"Artistic Style Version X.Y.Z\"\n",
        "Line" : 524,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# Skip 'check' target if version is not high enough \n",
        "Line" : 531,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# AStyle doesn't report failure when there are files that require formatting.\n\n# Fix this with a wrapper script that parses the output.\n",
        "Line" : 543,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# Hook our new target into the proper dependency chain\n",
        "Line" : 558,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# Code formatting targets should only be run on demand\n",
        "Line" : 565,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 40
    },
    "cmake/SetupCodeCoverageReports.cmake" : {
      "ObjectId" : "996037222a08f63b7acb862466f6c1ad99e93d45",
      "LastModified" : "2019-02-23T00:12:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Soderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# (Original LCOV + GENHTML CMake Macro) from Lars Bilke + Joakim Soderberg\n\n#\n\n# 2015-07-06, Aaron Black\n\n# - Modified for use by BLT.\n\n#\n\n# 2016-04-04, Kenny Weiss\n\n# - Removed support for clang; simplified flags\n\n#\n\n# 2017-07-25, Cyrus Harrison\n\n# - Refactored to only include report gen logic, not coverage flags\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for lcov\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for genthml\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check for gcov\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "######################################################################\n\n# Function that adds target that generates code coverage reports\n\n#####################################################################\n\n# Param _targetname     The name of new the custom make target and output file name.\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#                        MUST return ZERO always, even on errors.\n\n#                        If not, no coverage report will be created!\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Setup target\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Run tests\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Capture lcov counters and generating report\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Add code coverage target\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "cmake/SetupCodeMetrics.cmake" : {
      "ObjectId" : "ab43000fdf1ad407f1ef1a3c2d1aeb2ba3bbbc0a",
      "LastModified" : "2019-02-23T00:12:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n\n#################################################\n\n# Setup code metrics - coverage, profiling, etc\n\n#################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################\n\n# Enable code coverage via gcov\n\n# Note: Only supported for gnu or clang.\n\n########################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# Setup coverage compiler flags \n\n##########################################################################\n\n# Set the actual flags for coverage in the COVERAGE_FLAGS variable \n\n# Note: For gcc '--coverage' is equivalent to \n\n# '-fprofile-arcs -ftest-coverage' for compiling and '-lgcov' for linking\n\n# Additional flags that might be useful: \n\n#       \" -fno-inline -fno-inline-small-functions -fno-default-inline\"\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "######################################\n\n# Setup Code Coverage Report Targets\n\n######################################\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/SetupCompilerOptions.cmake" : {
      "ObjectId" : "f0451ec7d4a34b6826573735d4534437f68d1b2c",
      "LastModified" : "2019-04-17T01:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "############################\n\n# Setup compiler options\n\n############################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####################################################\n\n# Set some variables to simplify determining compiler\n\n# Compiler string list from: \n\n#   https://cmake.org/cmake/help/v3.0/variable/CMAKE_LANG_COMPILER_ID.html\n\n####################################################3\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# use CMAKE_BUILD_TOOL to identify visual studio\n\n# and CMAKE_CXX_COMPILER_ID for all other cases\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Determine C/C++ compiler family. \n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# For Clang or AppleClang\n",
        "Line" : 33,
        "CharPositionInLine" : 55
      },
      "6" : {
        "Text" : "# Determine Fortran compiler family \n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# For Clang or AppleClang\n",
        "Line" : 57,
        "CharPositionInLine" : 59
      },
      "8" : {
        "Text" : "################################################\n\n# Support for extra compiler flags and defines\n\n################################################\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "####################################################\n\n# create relocatable static libs by default\n\n####################################################\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##############################################\n\n# Support extra definitions for all targets\n\n##############################################\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Visual studio can give a warning that /bigobj is required due to the size of some object files\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "##########################################\n\n# If set, BLT_<LANG>_FLAGS are added to \n\n# all targets that use <LANG>-Compiler\n\n##########################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##########################################\n\n# Support extra flags for the C compiler.\n\n##########################################\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#############################################\n\n# Support extra flags for the C++ compiler.\n\n#############################################\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################\n\n# Support extra flags for the Fortran compiler.\n\n################################################\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "############################################################\n\n# Map Legacy FindCUDA variables to native cmake variables\n\n# Note - we are intentionally breaking the semicolon delimited \n\n# list that FindCUDA demanded of CUDA_NVCC_FLAGS so users\n\n# are forced to clean up their host configs.\n\n############################################################\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# quirk of ordering means that one needs to define -std=c++11 in CMAKE_CUDA_FLAGS if\n\n# --expt-extended-lambda is being used so cmake can get past the compiler check, \n\n# but the CMAKE_CUDA_STANDARD stuff adds another definition in which breaks things. \n\n# So we rip it out here, but it ends up being inserted in the final build rule by cmake. \n",
        "Line" : 144,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "################################################\n\n# Support extra linker flags\n\n################################################\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "###############################################################\n\n# Support extra flags based on CMake configuration type\n\n###############################################################\n\n#\n\n# We guard this approach to avoid issues with CMake generators\n\n# that support multiple configurations, like Visual Studio.\n\n#\n\n###############################################################\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# flags for the C compiler\n",
        "Line" : 176,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# flags for the C++ compiler\n",
        "Line" : 183,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# flags for the Fortran compiler\n",
        "Line" : 190,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "################################\n\n# RPath Settings\n\n################################\n\n# only apply rpath settings for builds using shared libs\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 211,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "################################\n\n# Enable C++11/14\n\n################################\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "##################################################################\n\n# Additional compiler warnings and treatment of warnings as errors\n\n##################################################################\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Additional  possibilities for clang include: \n\n#       \"-Wdocumentation -Wdeprecated -Weverything\"\n",
        "Line" : 275,
        "CharPositionInLine" : 23
      },
      "31" : {
        "Text" : "# Additional  possibilities for visual studio include:\n\n# \"/Wall /wd4619 /wd4668 /wd4820 /wd4571 /wd4710\"\n\n# qinfo=<grp> produces additional messages on XL\n\n# qflag=<x>:<x> defines min severity level to produce messages on XL\n\n#     where x is i info, w warning, e error, s severe; default is: \n\n# (default is  qflag=i:i)\n",
        "Line" : 280,
        "CharPositionInLine" : 23
      },
      "32" : {
        "Text" : "# Additional  possibilities for clang include: \n\n#       \"-Wdocumentation -Wdeprecated -Weverything\"\n",
        "Line" : 292,
        "CharPositionInLine" : 23
      },
      "33" : {
        "Text" : "# Additional  possibilities for visual studio include:\n\n# \"/Wall /wd4619 /wd4668 /wd4820 /wd4571 /wd4710\"\n\n# qinfo=<grp> produces additional messages on XL\n\n# qflag=<x>:<x> defines min severity level to produce messages on XL\n\n#     where x is i info, w warning, e error, s severe; default is: \n\n# (default is  qflag=i:i)\n",
        "Line" : 297,
        "CharPositionInLine" : 23
      },
      "34" : {
        "Text" : "#\n\n# Modify flags to avoid static linking runtime issues on windows.\n\n# (adapted from RAJA)\n\n#\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "################################\n\n# Enable Fortran\n\n################################\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# if enabled but no fortran compiler, halt the configure\n",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "###################################\n\n# Output compiler and linker flags \n\n###################################\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "cmake/SetupDocs.cmake" : {
      "ObjectId" : "813a0784170983805e175617bb1527d1f4cf1846",
      "LastModified" : "2019-03-21T17:35:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## - Macro for invoking doxygen to generate docs\n\n##\n\n##  blt_add_doxygen_target(doxygen_target_name)\n\n##\n\n##  Expects to find a Doxyfile.in in the directory the macro is called in. \n\n##  \n\n##  This macro sets up the doxygen paths so that the doc builds happen \n\n##  out of source. For a make install, this will place the resulting docs in \n\n##  docs/doxygen/`doxygen_target_name`\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "##------------------------------------------------------------------------------\n\n## - Macro for invoking sphinx to generate docs\n\n##\n\n##  blt_add_sphinx_target(sphinx_target_name)\n\n##\n\n##  Expects to find a conf.py or conf.py.in in the directory the macro is \n\n##  called in. \n\n##  \n\n##\n\n##  If conf.py is found, it is directly used as input to sphinx.\n\n##\n\n##  If conf.py.in is found, this macro uses CMake's configure_file() command\n\n##  to generate a conf.py, which is then used as input to sphinx.\n\n##\n\n##  This macro sets up the sphinx paths so that the doc builds happen \n\n##  out of source. For a make install, this will place the resulting docs in \n\n##  docs/sphinx/`sphinx_target_name`\n\n##\n\n##------------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# configured documentation tools and intermediate build results\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Sphinx cache with pickled ReST documents\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# HTML output directory\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# support both direct use of a conf.py file and a cmake-configured\n\n# sphinx input file (conf.py.in). The cmake-configured input file is\n\n# preferred when both exist.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#-W disable warn on error for now, while our sphinx env is still in flux\n",
        "Line" : 91,
        "CharPositionInLine" : 26
      },
      "9" : {
        "Text" : "#-W disable warn on error for now, while our sphinx env is still in flux\n",
        "Line" : 102,
        "CharPositionInLine" : 26
      },
      "10" : {
        "Text" : "# hook our new target into the docs dependency chain\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "######\n\n# This snippet makes sure if we do a make install w/o the optional \"docs\"\n\n# target built, it will be built during the install process.\n\n######\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "cmake/thirdparty/FindHIP.cmake" : {
      "ObjectId" : "942a20b2c9bf78e539ce01624d90c756e48c1599",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n#\n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# FindHIP.cmake\n\n###############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# SET: Variable defaults\n\n###############################################################################\n\n# User defined flags\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################\n\n# Set HIP CMAKE Flags\n\n###############################################################################\n\n# Copy the invocation styles from CXX to HIP\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CMAKE_SHARED_LIBRARY_LINK_HIP_FLAGS ${CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS})\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the CMake Flags to use the HCC Compilier.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n\n# FIND: HIP and associated helper binaries\n\n###############################################################################\n\n# HIP is supported on Linux only\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for HIP installation\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Search in user specified path first\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Now search in default path\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Check if we found HIP installation\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# If so, fix the path\n",
        "Line" : 83,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# And push it back to the cache\n",
        "Line" : 85,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Find HIPCC executable\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Now search in default paths\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Find HIPCONFIG executable\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Now search in default paths\n",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Find HIPCC_CMAKE_LINKER_HELPER executable\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Now search in default paths\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Compute the version\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Compute the platform\n",
        "Line" : 179,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "###############################################################################\n\n# MACRO: Locate helper files\n\n###############################################################################\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "###############################################################################\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "###############################################################################\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###############################################################################\n\n# MACRO: Reset compiler flags\n\n###############################################################################\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "###############################################################################\n\n# MACRO: Separate the options from the sources\n\n###############################################################################\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 282,
        "CharPositionInLine" : 16
      },
      "28" : {
        "Text" : "###############################################################################\n\n# MACRO: Add include directories to pass to the hipcc command\n\n###############################################################################\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "###############################################################################\n\n# FUNCTION: Helper to avoid clashes of files with the same basename but different paths\n\n###############################################################################\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Convert to cmake style paths\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Remove leading /\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 316,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 318,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 320,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Strip off the filename\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "###############################################################################\n\n# MACRO: Parse OPTIONS from ARGN & set variables prefixed by _option_prefix\n\n###############################################################################\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Determine if we are dealing with a per-configuration flag\n",
        "Line" : 334,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# Clear arg to prevent it from being processed anymore\n",
        "Line" : 339,
        "CharPositionInLine" : 16
      },
      "39" : {
        "Text" : "###############################################################################\n\n# MACRO: Try and include dependency file if it exists\n\n###############################################################################\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Create the dependency file if it doesn't exist\n",
        "Line" : 356,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Include the dependency file\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Verify the existence of all the included files\n",
        "Line" : 363,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# If they aren't there, regenerate the file again\n",
        "Line" : 367,
        "CharPositionInLine" : 16
      },
      "44" : {
        "Text" : "# No dependencies, so regenerate the file\n",
        "Line" : 372,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# Regenerate the dependency file if needed\n",
        "Line" : 376,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "###############################################################################\n\n# MACRO: Prepare cmake commands for the target\n\n###############################################################################\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Initialize list of includes with those specified by the user. Append with\n\n# ones specified to cmake directly.\n",
        "Line" : 396,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Add the include directories\n",
        "Line" : 400,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Add the compile definitions\n",
        "Line" : 417,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Check if we are building shared library.\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# If we are building a shared library, add extra flags to HIP_HIPCC_FLAGS\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Set host compiler\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Set compiler flags\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 455,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Iterate over all arguments and create custom commands for all source files\n",
        "Line" : 459,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 461,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "# Allow per source file overrides of the format. Also allows compiling non .cu files.\n",
        "Line" : 463,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "# Determine output directory\n",
        "Line" : 472,
        "CharPositionInLine" : 12
      },
      "59" : {
        "Text" : "# Set file names\n",
        "Line" : 480,
        "CharPositionInLine" : 12
      },
      "60" : {
        "Text" : "# Set properties for object files\n",
        "Line" : 486,
        "CharPositionInLine" : 12
      },
      "61" : {
        "Text" : "# This is an object file not to be compiled, but only be linked\n",
        "Line" : 489,
        "CharPositionInLine" : 37
      },
      "62" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path\n",
        "Line" : 492,
        "CharPositionInLine" : 12
      },
      "63" : {
        "Text" : "# Bring in the dependencies\n",
        "Line" : 500,
        "CharPositionInLine" : 12
      },
      "64" : {
        "Text" : "# Configure the build script\n",
        "Line" : 503,
        "CharPositionInLine" : 12
      },
      "65" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 518,
        "CharPositionInLine" : 12
      },
      "66" : {
        "Text" : "# Build the generated file and dependency file\n",
        "Line" : 522,
        "CharPositionInLine" : 12
      },
      "67" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 525,
        "CharPositionInLine" : 16
      },
      "68" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 529,
        "CharPositionInLine" : 16
      },
      "69" : {
        "Text" : "# Make sure the build system knows the file is generated\n",
        "Line" : 540,
        "CharPositionInLine" : 12
      },
      "70" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 547,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "###############################################################################\n\n# HIP_ADD_EXECUTABLE\n\n###############################################################################\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 556,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "###############################################################################\n\n# HIP_ADD_LIBRARY\n\n###############################################################################\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 574,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 75
    },
    "cmake/thirdparty/FindHIP/run_hipcc.cmake" : {
      "ObjectId" : "05356c99312a59937b36bba09b0357a64c9a320e",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n#\n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Runs commands using HIPCC\n\n###############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# This file runs the hipcc commands to produce the desired output file\n\n# along with the dependency file needed by CMake to compute dependencies.\n\n#\n\n# Input variables:\n\n#\n\n# verbose:BOOL=<>               OFF: Be as quiet as possible (default)\n\n#                               ON : Describe each step\n\n# build_configuration:STRING=<> Build configuration. Defaults to Debug.\n\n# generated_file:STRING=<>      File to generate. Mandatory argument.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# path\n",
        "Line" : 29,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : "#path\n",
        "Line" : 30,
        "CharPositionInLine" : 59
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 31,
        "CharPositionInLine" : 45
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 32,
        "CharPositionInLine" : 37
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 33,
        "CharPositionInLine" : 47
      },
      "9" : {
        "Text" : "#path\n",
        "Line" : 34,
        "CharPositionInLine" : 27
      },
      "10" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly)\n",
        "Line" : 40,
        "CharPositionInLine" : 55
      },
      "11" : {
        "Text" : "# path\n",
        "Line" : 42,
        "CharPositionInLine" : 53
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 43,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# bool\n",
        "Line" : 44,
        "CharPositionInLine" : 29
      },
      "14" : {
        "Text" : "# Determine compiler and compiler flags\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# hip_execute_process - Executes a command with optional command echo and status message.\n\n#   status     - Status message to print if verbose is true\n\n#   command    - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN       - Remaining arguments are the command with arguments\n\n#   HIP_result - Return value from running the command\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Build command string to print\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Escape quotes if any\n",
        "Line" : 79,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Surround args with spaces with quotes\n",
        "Line" : 81,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Echo the command\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Run the command\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Delete the target file\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Generate the output file\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Make sure that we delete the output file\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# vim: ts=4:sw=4:expandtab:smartindent\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "cmake/thirdparty/FindHIP/run_make2cmake.cmake" : {
      "ObjectId" : "22c9790e3a90c4c822e18ffc945e4dba7811dca5",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n#\n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Computes dependencies using HIPCC\n\n###############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# This file converts dependency files generated using hipcc to a format that\n\n# cmake can understand.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables:\n\n#\n\n# input_file:STRING=<> Dependency file to parse. Required argument\n\n# output_file:STRING=<> Output file to generate. Required argument\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# vim: ts=4:sw=4:expandtab:smartindent\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/thirdparty/FindROCm.cmake" : {
      "ObjectId" : "56b5deb9fa5d652eca2a650f97664b0bd86dd733",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chip Freitag @ Advanced Micro Devices, Inc.\n\n# Date: February 14, 2018\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/thirdparty/SetupCUDA.cmake" : {
      "ObjectId" : "105661821997dcb2bcc6b03e21e6581f2791c144",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################\n\n# Sanity Checks\n\n################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Rare case of two flags being incompatible\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CUDA_HOST_COMPILER was changed in 3.9.0 to CMAKE_CUDA_HOST_COMPILER and\n\n# needs to be set prior to enabling the CUDA language\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "############################################################\n\n# Basics\n\n############################################################\n\n# language check fails when using clang-cuda\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############################################################\n\n# Map Legacy FindCUDA variables to native cmake variables\n\n############################################################\n\n# if we are linking with NVCC, define the link rule here\n\n# Note that some mpi wrappers might have things like -Wl,-rpath defined, which when using \n\n# FindMPI can break nvcc. In that case, you should set ENABLE_FIND_MPI to Off and control\n\n# the link using CMAKE_CUDA_LINK_FLAGS. -Wl,-rpath, equivalent would be -Xlinker -rpath -Xlinker\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# do a no-op for the device links - for some reason the device link library dependencies are only a subset of the \n\n# executable link dependencies so the device link fails if there are any missing CUDA library dependencies. Since\n\n# we are doing a link with the nvcc compiler, the device link step is unnecessary .\n\n# Frustratingly, nvcc-link errors out if you pass it an empty file, so we have to first compile the empty file. \n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# don't propagate host flags - too easy to break stuff!\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# depend on 'cuda', if you need to use cuda\n\n# headers, link to cuda libs, and need to compile your\n\n# source files with the cuda compiler (nvcc) instead of\n\n# leaving it to the default source file language.\n\n# This logic is handled in the blt_add_library/executable\n\n# macros\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# same as 'cuda' but we don't flag your source files as\n\n# CUDA language.  This causes your source files to use \n\n# the regular C/CXX compiler. This is separate from \n\n# linking with nvcc.\n\n# This logic is handled in the blt_add_library/executable\n\n# macros\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/thirdparty/SetupHCC.cmake" : {
      "ObjectId" : "f82524d9a116c15ea2fada6d400fedda344db9b9",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################\n\n# ROCM\n\n################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# register ROCM with blt\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/thirdparty/SetupHIP.cmake" : {
      "ObjectId" : "7abc5b5a65f34192fba254f419d8687d2a590576",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n#\n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Noel Chalmers @ Advanced Micro Devices, Inc.\n\n# Date: March 11, 2019\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################\n\n# HIP\n\n################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(STATUS \"HIP Include Path: ${HIP_INCLUDE_DIRS}\")\n\n#message(STATUS \"HIP Libraries:    ${HIP_LIBRARIES}\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set(HIP_RUNTIME_LIBRARIES \"${HIP_ROOT_DIR}/hcc/lib\")\n\n# set(HIP_RUNTIME_LIBRARIES \"${HIP_ROOT_DIR}/hcc/lib\")\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# depend on 'hip', if you need to use hip\n\n# headers, link to hip libs, and need to run your source\n\n# through a hip compiler (hipcc)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# depend on 'hip_runtime', if you only need to use hip\n\n# headers or link to hip libs, but don't need to run your source\n\n# through a hip compiler (hipcc)\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/thirdparty/SetupMPI.cmake" : {
      "ObjectId" : "088cc162a726eb2b8e4d7acf2670a9e0a4c362d3",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################\n\n# MPI\n\n################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Determine if we should use fortran mpif.h header or fortran mpi module\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# register MPI with blt\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/thirdparty/SetupOpenMP.cmake" : {
      "ObjectId" : "65ae0a9091b576ec1ce60425d8050c312665bf42",
      "LastModified" : "2019-04-17T01:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################\n\n# OpenMP\n\n# (OpenMP support is provided by the compiler)\n\n#################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# avoid generator expressions if possible, as generator expressions can be \n\n# passed as flags to downstream projects that might not be using the same\n\n# languages. See https://github.com/LLNL/blt/issues/205\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Allow user to override\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/thirdparty/SetupThirdParty.cmake" : {
      "ObjectId" : "34fe5b9a0e9a217c52b7ed06762685bd66f1083d",
      "LastModified" : "2019-04-17T01:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------\n\n# Git\n\n#------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------\n\n# MPI\n\n#------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------\n\n# OpenMP\n\n#------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------\n\n# CUDA\n\n#------------------------------------\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#------------------------------------\n\n# HIP\n\n#------------------------------------\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------\n\n# HCC\n\n#------------------------------------\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------\n\n# Documentation Packages\n\n#------------------------------------\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------\n\n# Valgrind\n\n#------------------------------------\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#------------------------------------\n\n# linting\n\n#------------------------------------\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#------------------------------------\n\n# Static analysis via Cppcheck\n\n#------------------------------------\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#------------------------------------\n\n# Static analysis via clang-query\n\n#------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "2d70ebc48c08f2ae8315931bf1b5370754b4d4f1",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Setup BLT\n\n###############################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "docs/tutorial/blank_project/CMakeLists.txt" : {
      "ObjectId" : "14ad666ff344c5d4501b26e665917354a61b68d0",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n#\n\n# BLT Tutorial Example: Blank Project.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Setup BLT\n\n###############################################################################\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support having a shared BLT outside of the repository if given a BLT_SOURCE_DIR\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use internal BLT if no BLT_SOURCE_DIR is given\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "docs/tutorial/calc_pi/CMakeLists.txt" : {
      "ObjectId" : "36b6e4bd784557a639a7e93d979552cdc4e15741",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# ****** WARNING - CHANGES IN THIS FILE NEED TO BE REFLECTED IN SPHINX DOCS\n\n# BLT Tutorial Example: Calc Pi.\n\n#\n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# Setup BLT\n\n###############################################################################\n\n# Set BLT_SOURCE_DIR to default location, if not set by user \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# Example 1: Creating a simple executable.\n\n###############################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###############################################################################\n\n# Example 2: Creating a library and an executable using our library.\n\n###############################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###############################################################################\n\n# Test 1: Creating an executable using gtest, using the executable via ctest.\n\n###############################################################################\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n#\n\n# Test 2: Add mpi version of calc_pi, and expand test 1 to also test \n\n# the mpi version.\n\n#\n\n###############################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# number of mpi tasks to use\n",
        "Line" : 73,
        "CharPositionInLine" : 35
      },
      "7" : {
        "Text" : "###############################################################################\n\n#\n\n# Test 3: Add cuda version of calc_pi, and expand test 1 to also test \n\n# the cuda version.\n\n#\n\n###############################################################################\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# avoid warnings about sm_20 deprecated\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "###############################################################################\n\n# Add Documentation Examples\n\n###############################################################################\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "docs/tutorial/calc_pi/docs/CMakeLists.txt" : {
      "ObjectId" : "7ce16d7172fbc5ce612418e8207c267dca945f0d",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#########################\n\n# documentation targets\n\n#########################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/tutorial/calc_pi/docs/doxygen/CMakeLists.txt" : {
      "ObjectId" : "7dc4eff9515ef072cde80b1ec0a444b2018abcef",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#######################################################\n\n# add a target to generate documentation with Doxygen\n\n#######################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "docs/tutorial/calc_pi/docs/sphinx/CMakeLists.txt" : {
      "ObjectId" : "0ad620fa7b498251a7e3f1fa15c094a0be8aab3f",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#######################################################\n\n# add a target to generate documentation with sphinx\n\n#######################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "host-configs/hcc.cmake" : {
      "ObjectId" : "15469bd2483cbf6969f4a6376c6dc8b501a97c3e",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The CMake command line to use this host config file must have certain\n\n# defines enabled.  Here is an example script for an out-of-place build of the\n\n# tutorial blank project template:\n\n## hcc.sh\n\n##!/bin/bash\n\n#rm -rf build-hcc-release 2>/dev/null\n\n#mkdir build-hcc-release && cd build-hcc-release\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#BLT_DIR=$(git rev-parse --show-toplevel)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#cmake \\\n\n#  -DCMAKE_BUILD_TYPE=Release \\\n\n#  -DENABLE_HCC=ON -DBLT_SOURCE_DIR=${BLT_DIR} \\\n\n#  -DROCM_ARCH=gfx900 \\\n\n#  -C ${BLT_DIR}/host-configs/hcc.cmake \\\n\n#  -DCMAKE_INSTALL_PREFIX=../install-hcc-release \\\n\n#  \"$@\" \\\n\n#  ${BLT_DIR}/docs/tutorial/blank_project\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########################################################\n\n# standard ROCm HCC compiler\n\n###########################################################\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########################################################\n\n# specify the target architecture\n\n#  Default with ROCm 1.7 is gfx803 (Fiji)\n\n#  Other options:\n\n#    gfx700  Hawaii\n\n#    gfx803  Polaris (RX580)\n\n#    gfx900  Vega\n\n#    gfx901  \n\n###########################################################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########################################################\n\n# get compile/link flags from hcc-config\n\n###########################################################\n\n# execute_process(COMMAND ${ROCM_ROOT_DIR}/hcc/bin/hcc-config --cxxflags OUTPUT_VARIABLE ROCM_CXX_COMPILE_FLAGS)\n\n# execute_process(COMMAND ${ROCM_ROOT_DIR}/hcc/bin/hcc-config --ldflags OUTPUT_VARIABLE ROCM_CXX_LINK_FLAGS)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###########################################################\n\n# set CMake cache variables\n\n###########################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# set(BLT_CXX_FLAGS \"${ROCM_CXX_COMPILE_FLAGS}\" CACHE STRING \"HCC compiler flags\")\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "host-configs/hip.cmake" : {
      "ObjectId" : "21d2537b5f63a7f1ccae66d14c662967776935f1",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The CMake command line to use this host config file must have certain\n\n# defines enabled.  Here is an example script for an out-of-place build of the\n\n# tutorial blank project template:\n\n## hip.sh\n\n##!/bin/bash\n\n#rm -rf build-hip-release 2>/dev/null\n\n#mkdir build-hip-release && cd build-hip-release\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#BLT_DIR=$(git rev-parse --show-toplevel)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#cmake \\\n\n#  -DCMAKE_BUILD_TYPE=Release \\\n\n#  -DENABLE_HIP=ON -DBLT_SOURCE_DIR=${BLT_DIR} \\\n\n#  -C ${BLT_DIR}/host-configs/hip.cmake \\\n\n#  -DCMAKE_INSTALL_PREFIX=../install-hip-release \\\n\n#  \"$@\" \\\n\n#  ${BLT_DIR}/docs/tutorial/blank_project\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########################################################\n\n# standard ROCm HIP compiler\n\n###########################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "host-configs/llnl-bgq-clang@4.0.0_xlf.cmake" : {
      "ObjectId" : "4d24224b190c2b4b93ae1beb3c2d3e2131b9499d",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Example host-config file for clang C/C++ compiler \n\n# paired with xlf Fortran compiler on LLNL's bgq machine\n\n#------------------------------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set Fortran compiler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Extra options and flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use clang's libc++ instead of libstdc++\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Converts C-style comments to Fortran style in preprocessed files\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# MPI Support\n\n# Note: On BGQ, CMake uses the wrong linker flags when using FindMPI.\n\n# Disable FindMPI to use LLNL wrapper scripts via CMake compiler variables.\n\n#------------------------------------------------------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Pass in an explicit path to help find mpif.h\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Ensures that tests will be wrapped with srun to run on the backend nodes\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "host-configs/llnl-naples-darwin-10.11-clang@7.3.0.cmake" : {
      "ObjectId" : "995ecbfb0631e5822db8e1e68366f5ba1e187a75",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################\n\n# host-config for naples\n\n########################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########################################################################\n\n# Dependencies were built with spack (https://github.com/llnl/spack)\n\n########################################################################\n\n# spack install  cmake@3.8.2\n\n# spack install  mpich \n\n# spack install  py-sphinx\n\n# spack activate py-sphinx\n\n# spack install  doxygen\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "########################################################################\n\n# cmake path\n\n########################################################################\n\n# /Users/harrison37/Work/blt_tutorial/tpls/spack/opt/spack/darwin-elcapitan-x86_64/clang-7.3.0-apple/cmake-3.8.2-n2i4ijlet37i3jhmjfhzms2wo3b4ybcm/bin/cmake\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n# mpi from spack\n\n########################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################################################\n\n# Cuda Support (standard osx cuda toolkit install)\n\n########################################################################\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "########################################################################\n\n# sphinx from spack\n\n########################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################\n\n# doxygen from spack\n\n########################################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "host-configs/llnl-quartz-toss3-clang@4.0.0-libcxx.cmake" : {
      "ObjectId" : "84aa0b46e3b3da6a829e234c2fdcd0c35c879d43",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Example host-config file for the quartz cluster at LLNL\n\n#------------------------------------------------------------------------------\n\n#\n\n# This file provides CMake with paths / details for:\n\n#  C,C++, & Fortran compilers + MPI\n\n#------------------------------------------------------------------------------\n\n# clang-4.0.0 / gfortran@4.9.3 compilers\n\n# Uses clang's 'libc++' instead of 'libstdc++'\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# c compiler\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cpp compiler\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# fortran support\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# fortran compiler\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Extra flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use clang's libc++ instead of libstdc++\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# MPI Support\n\n#------------------------------------------------------------------------------\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "host-configs/llnl-quartz-toss3-clang@6.0.0-static-analysis.cmake" : {
      "ObjectId" : "9b99699367a7cbc39310868993f850f320092485",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Example host-config file for the quartz cluster at LLNL\n\n#------------------------------------------------------------------------------\n\n#\n\n# This file provides CMake with paths / details for:\n\n#  C,C++, & Fortran compilers + MPI\n\n#------------------------------------------------------------------------------\n\n# clang-4.0.0 / gfortran@4.9.3 compilers\n\n# Uses clang's 'libc++' instead of 'libstdc++'\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# c compiler\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cpp compiler\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# fortran support\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# fortran compiler\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Extra flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use clang's libc++ instead of libstdc++\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Static Analysis Support\n\n#------------------------------------------------------------------------------\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# MPI Support\n\n#------------------------------------------------------------------------------\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "host-configs/llnl-quartz-toss3-gcc@4.9.3.cmake" : {
      "ObjectId" : "0c1344da881cd393e5b979e87614fb34527d6a17",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###########################################################\n\n# Example host-config file for the quartz cluster at LLNL\n\n###########################################################\n\n#\n\n# This file provides CMake with paths / details for:\n\n#  C,C++, & Fortran compilers + MPI\n\n# \n\n###########################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########################################################\n\n# gcc@4.9.3 compilers\n\n###########################################################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# c compiler\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# cpp compiler\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# fortran support\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# fortran compiler\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###########################################################\n\n# MPI Support\n\n###########################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "host-configs/llnl-quartz-toss3-pgi@18.5.cmake" : {
      "ObjectId" : "336c3c11ddc4310c2d3dc3c4344fcc0d2829caf5",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Example pgi@18.5 host-config for LLNL toss3 machines\n\n#------------------------------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# c compiler\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# cpp compiler\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# fortran support\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# fortran support\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Extra options and flags\n\n#------------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# MPI Support\n\n#------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "host-configs/llnl-ray-blue_os-clang-coral@2018.08.08.cmake" : {
      "ObjectId" : "4ca095eb6165f87a1455f4ed75f6ef623d2b600c",
      "LastModified" : "2019-04-17T01:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Example host-config file for the blue_os ray cluster at LLNL\n\n#------------------------------------------------------------------------------\n\n#\n\n# This file provides CMake with paths / details for:\n\n#  C/C++, OpenMP, MPI, and Cuda\n\n# \n\n#------------------------------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Compilers\n\n#------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# MPI Support\n\n#------------------------------------------------------------------------------\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# OpenMP support\n\n#------------------------------------------------------------------------------\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Override default link flags because linking with nvcc\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# CUDA support\n\n#------------------------------------------------------------------------------\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# set the link flags manually since nvcc will link (and not have the wrappers knowledge)\n\n# on ray - can figure out your equivalant flags by doing mpicc -vvvv\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# nvcc does not like gtest's 'pthreads' flag\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "host-configs/llnl-sqa-uno-windows-msvc@15.cmake" : {
      "ObjectId" : "efbafd33978af7063941847ac372ee960e5ec209",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Example host-config file for 'sqa-uno` windows machine at LLNL\n\n#------------------------------------------------------------------------------\n\n#\n\n# This file provides CMake with paths / details for:\n\n# The Microsoft Visual Studio 15 compiler + MPI\n\n#\n\n# Run the following from a build dir for a 32-bit configuration\n\n#   cmake -G \"Visual Studio 15 2017\"                         \\\n\n#         -C ..\\host-configs\\llnl-sqa-uno-windows-msvc@15.cmake  \\\n\n#         <path-to-blt-project>\n\n#\n\n# Run the following from a build dir for a 64-bit configuration\n\n#   cmake -G \"Visual Studio 15 2017 Win64\"                   \\\n\n#         -C ..\\host-configs\\llnl-sqa-uno-windows-msvc@15.cmake  \\\n\n#         <path-to-blt-project>\n\n#\n\n# Build the code from the command line as follows \n\n# (use -m for parallel build in msbuild, if desired):\n\n#   cmake --build . --config {Release,Debug,RelWithDebInfo} [-- /m:8]\n\n#\n\n# Test the code as follows (use -j for parallel testing):\n\n#   ctest -j8 -C {Release,Debug,RelWithDebInfo}\n\n# \n\n# Install the code from the command line as follows:\n\n#   cmake --build . --config {Release,Debug,RelWithDebInfo} --target install\n\n#\n\n#------------------------------------------------------------------------------\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the HOME variable (%USERPROFILE% in Windows)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup MPI -- assumes MPI is installed in default location\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Set some additional options\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "host-configs/llnl-surface-chaos_5_x86_64_ib-gcc@4.9.3.cmake" : {
      "ObjectId" : "8337203e0378471c6e0d33968936b0e62bb211cc",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###########################################################\n\n# Example host-config file for the surface cluster at LLNL\n\n###########################################################\n\n#\n\n# This file provides CMake with paths / details for:\n\n#  C,C++, & Fortran compilers + MPI & CUDA\n\n###########################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########################################################\n\n# gcc@4.9.3 compilers\n\n###########################################################\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# c compiler\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# cpp compiler\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# fortran support\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# fortran compiler\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###########################################################\n\n# MPI Support\n\n###########################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "###########################################################\n\n# CUDA support\n\n###########################################################\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tests/internal/CMakeLists.txt" : {
      "ObjectId" : "db052eab6f08fdc8570b497d6080baa737064c88",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################\n\n# BLT Internal Testing Project\n\n################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################################################\n\n# Setup BLT\n\n###############################################################################\n\n# Set BLT_SOURCE_DIR to default location, if not set by user \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################\n\n# Project options\n\n################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################\n\n# Add a library\n\n################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################\n\n# Add an executable\n\n# (which happens to be a test)\n\n################################\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "################################\n\n# Register our test w/ ctest\n\n################################\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "####################\n\n#  Header-only test\n\n####################\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# This executable depends on the header-only library\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "####################################################\n\n# Tests blt_combine_static_libs macro\n\n# Note: Does not currently work on Windows or BGQ\n\n####################################################\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "####################\n\n# Git Macros test\n\n####################\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## get the latest tag from the master branch\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "## get the name of the current (i.e., checked out) branch\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "## get sha1 at the tip of the current branch\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# endif is_git_repo\n",
        "Line" : 152,
        "CharPositionInLine" : 14
      },
      "15" : {
        "Text" : "# endif Git_FOUND\n",
        "Line" : 154,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "################\n\n# CUDA tests\n\n#################\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "########################################################\n\n# Tests blt_add_target_definitions macro\n\n# Four variants of a test with a list of two definitions\n\n########################################################\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# neither use '-D'\n\n# both uses '-D'\n\n# list passed in as string\n\n# list can contain empty strings\n",
        "Line" : 167,
        "CharPositionInLine" : 34
      },
      "19" : {
        "Text" : "# endif ENABLE_GTEST\n",
        "Line" : 189,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 20
    },
    "tests/internal/src/combine_static_library_test/CMakeLists.txt" : {
      "ObjectId" : "8c097da3f3a5a5053b70dbb490a8f9e9995e8b8a",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n#\n\n# Simple example that uses the blt_combine_static_libraries macro\n\n#\n\n###############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/internal/src/object_library_test/CMakeLists.txt" : {
      "ObjectId" : "f370b1e2202b8e9f0f764cecccfc38501bf91fee",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n#\n\n# Simple test that uses the blt_add_library macro with object libraries\n\n#\n\n###############################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/internal/src/object_library_test/inherited_base/CMakeLists.txt" : {
      "ObjectId" : "c9add8f5b1a3a73cc1fadf2fccfe6bbb47ab55e4",
      "LastModified" : "2019-04-05T13:32:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/internal/src/static_analysis/CMakeLists.txt" : {
      "ObjectId" : "fc457bb1b53cdecb920d8a60bd8bc8458795287c",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#####################################\n\n# Test clang-query static analysis\n\n# Clang Query needs to be enabled, with appropriate Flags set up for building and running\n\n# your code\n\n#####################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/internal/src/test_cuda_device_call_from_kernel/CMakeLists.txt" : {
      "ObjectId" : "752c676e1731fa1371298b03b9b35aa26f6897cb",
      "LastModified" : "2019-04-17T01:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#####################################\n\n# Test CUDA virtual device method call from kernels across library boundary\n\n# CUDA needs to be enabled, with appropriate Flags set up for building and running\n\n# on your current GPU architecture. \n\n#####################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/smoke/CMakeLists.txt" : {
      "ObjectId" : "d3f133c34fa7065eaae8e5c1ffcded66591b1bc3",
      "LastModified" : "2019-04-17T01:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Smoke tests for BLT TPLs\n\n#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################\n\n# gtest test\n\n################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################\n\n# gmock test\n\n################\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################\n\n# gbenchmark test\n\n################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################\n\n# fruit test\n\n################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################\n\n# OpenMP test\n\n################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# _blt_tutorial_openmp_executable_start\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# _blt_tutorial_openmp_executable_end\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "################\n\n#  MPI test\n\n################\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################\n\n#  CUDA test\n\n################\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################\n\n#  HCC test\n\n################\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################\n\n#  HIP test\n\n################\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "thirdparty_builtin/CMakeLists.txt" : {
      "ObjectId" : "c92c38bbcb189aa9f996d7e3441bd735983ead11",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and\n\n# other BLT Project Developers. See the top-level COPYRIGHT file for details\n\n# \n\n# SPDX-License-Identifier: (BSD-3-Clause)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tracks names of enabled tpl targets\n",
        "Line" : 6,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "# Note: Users can pass extra compiler flags to gtest \n\n#       with the 'gtest_extra_flags' variable and extra \n\n#       compile definitions with the 'gtest_defines' variable.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The following flag should be added to gtest's dependents, \n\n# but not to gtest in shared Windows builds\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Explicitly enable/disable death tests\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n# Use BLT's ENABLE_GMOCK option to set the build options for \n\n# gtest's cmake project\n\n#\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# In BLT ENABLE_GMOCK implies ENABLE_GTEST,\n\n# IF ENABLE_GTEST is OFF, force to ON\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#\n\n# Guard of googletest w/ ENABLE_GTEST\n\n# In BLT, ENABLE_GTEST is also required when using ENABLE_GMOCK\n\n#\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#\n\n# gtest 1.8 emits many warnings related to dll-interface \n\n# issues on windows, so we add flags to work around these\n\n# warnings, so they don't mask warnings we care about\n\n#\n\n# For more info see: https://github.com/LLNL/blt/issues/79\n\n# \n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Enable builtin google test \n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Enable Fruit (FortRan UnIT testing) support\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## google benchmark support\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# This sets up a target to run the benchmarks\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Set the folder property of the blt thirdparty libraries \n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "thirdparty_builtin/fruit-3.4.1/CMakeLists.txt" : {
      "ObjectId" : "6d06a9f99989fb1965046eb1c398c9187b57b29b",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Fortran unit test framework\n\n#\n\n# http://sourceforge.net/projects/fortranxunit\n\n# http://www.software.ac.uk/blog/2014-07-22-look-fortran-unit-test-frameworks\n\n# \n\n# Modules will be installed into CMAKE_Fortran_MODULE_DIRECTORY\n\n#  defined in CMakeBasics.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty_builtin/gbenchmark-master-2017-05-19/CMakeLists.txt" : {
      "ObjectId" : "1b6cfa4c6489624f54dcb4d004490806ffdfc5db",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##########################################################\n\n# BLT FIX:\n\n# Add policy setting to avoid warnings for project command\n\n# without VERSION argument\n\n##########################################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n",
        "Line" : 15,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 111,
        "CharPositionInLine" : 52
      },
      "12" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Coverage build type\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Set up directories\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Build the targets\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "thirdparty_builtin/gbenchmark-master-2017-05-19/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "0b176ba27f1f7043b8d6c0a10e365bd199fb9ec7",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty_builtin/gbenchmark-master-2017-05-19/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "6efe6a84ee4936867167774654743159ad61e18a",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty_builtin/gbenchmark-master-2017-05-19/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "8dd948004597acda5a70464ac01bf810747f55ff",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "thirdparty_builtin/gbenchmark-master-2017-05-19/src/CMakeLists.txt" : {
      "ObjectId" : "7707773930c5ddfe96f8c3a6f2d41caba9f79adc",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "thirdparty_builtin/gbenchmark-master-2017-05-19/test/CMakeLists.txt" : {
      "ObjectId" : "d89135aab3d2353c1336388703edc896255c3143",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable the tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Some tests use `<cassert>` to perform the test. Therefore we must\n\n# strip -DNDEBUG from the default CMake flags in DEBUG mode.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also remove /D NDEBUG to avoid MSVC warnings about conflicting defines.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: These flags must be added after find_package(Threads REQUIRED) otherwise\n\n# they will break the configuration check.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Demonstration executable\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Attempt to work around flaky test failures when running on Appveyor servers.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the coverage command(s)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "thirdparty_builtin/googletest-master-2018-02-01/CMakeLists.txt" : {
      "ObjectId" : "f8a97faaeb8a843e76b3664d73fa0f5d91345143",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty_builtin/googletest-master-2018-02-01/Makefile.am" : {
      "ObjectId" : "433eefeb08026fa46e702db9e853e8a4efdfc989",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## Process this file with automake to produce Makefile.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build . before src so that our all-local and clean-local hooks kicks in at\n\n# the right time.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googlemock/CMakeLists.txt" : {
      "ObjectId" : "bac2e3bf90c28e3ea5ad59aeefcb6a93875ba910",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 61,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 67,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# configure and install pkgconfig files\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 194,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 195,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googlemock/Makefile.am" : {
      "ObjectId" : "9adbc5163dd7191a14a887a384fb5d6d2956b44d",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Script for diagnosing compiler errors in programs that use Google\n\n# Mock.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googlemock/make/Makefile" : {
      "ObjectId" : "7c13e05fa961dd3a37ee05def12de08ce0e86a88",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building both Google Mock and Google Test and\n\n# using them in user tests.  This file is self-contained, so you don't\n\n# need to use the Makefile in Google Test's source tree.  Please tweak\n\n# it to suit your environment and project.  You may want to move it to\n\n# your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use\n\n# in your own targets but shouldn't modify.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file, or if you want to use\n\n# a copy of Google Test at a different location.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Points to the root of Google Mock, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test and Google Mock's header directories as system\n\n# directories, such that the compiler doesn't generate warnings in\n\n# these headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All Google Mock headers. Note that all Google Test headers are\n\n# included here too, as they are #included by Google Mock headers.\n\n# Usually you shouldn't change this definition.\t\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builds gmock.a and gmock_main.a.  These libraries contain both\n\n# Google Mock and Google Test.  A test should link with either gmock.a\n\n# or gmock_main.a, depending on whether it defines its own main()\n\n# function.  It's fine if your test only uses features from Google\n\n# Test (and not Google Mock).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For simplicity and to avoid depending on implementation details of\n\n# Google Mock and Google Test, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Mock and\n\n# Google Test compile fast and for ordinary users their source rarely\n\n# changes.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Builds a sample test.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googletest/CMakeLists.txt" : {
      "ObjectId" : "e3827d78c895ebc728e91e93b8af45146f22a04c",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# BLT FIX - This causes global issues where it adds 'd' to the end of library names when\n\n#  building debug libraries.  It has been fixed in the newer gtest\n\n#set(CMAKE_DEBUG_POSTFIX \"d\" CACHE STRING \"Generate debug library name with a postfix.\")\n\n# END BLT FIX\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Visibility\n",
        "Line" : 60,
        "CharPositionInLine" : 20
      },
      "8" : {
        "Text" : "# MACOSX_RPATH behavior\n",
        "Line" : 64,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 80,
        "CharPositionInLine" : 30
      },
      "11" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n\n# VS 2015     14           1900            std::tuple\n\n# VS 2017     15           >= 1910         std::tuple\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# configure and install pkgconfig files\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 243,
        "CharPositionInLine" : 43
      },
      "25" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 244,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 264,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 265,
        "CharPositionInLine" : 46
      },
      "29" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 30
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googletest/Makefile.am" : {
      "ObjectId" : "b6c7232dd4cf4f096b85c0b2d465110558c3ef80",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Build rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Also verify that libgtest works by itself.\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "2c978332b50d24e30eab6c64ee908d4ba20172b1",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 66,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 76,
        "CharPositionInLine" : 33
      },
      "14" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 85,
        "CharPositionInLine" : 39
      },
      "16" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 189,
        "CharPositionInLine" : 48
      },
      "30" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 250,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 258,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 266,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 40
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googletest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "thirdparty_builtin/googletest-master-2018-02-01/googletest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2019-03-27T17:42:31Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    }
  },
  "FileTypes" : {
    "CMAKE" : 56,
    "MAKEFILE" : 3,
    "AUTOMAKE" : 3
  },
  "ElapsedTime" : 957
}