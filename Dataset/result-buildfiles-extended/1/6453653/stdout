{
  "Repository" : "6453653",
  "Revision" : "HEAD",
  "ObjectId" : "8e0dcf90695eda77fa06f0499073388feb94d16d",
  "CommitTime" : "2019-03-22T12:57:47Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b5a673d951423096165eedb6b0293152f250ce29",
      "LastModified" : "2018-12-17T22:22:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMP0069 NEW\n",
        "Line" : 1,
        "CharPositionInLine" : 37
      },
      "1" : {
        "Text" : "# We define a series of variables for the user. They can be combined in order\n\n# to build exactly what is needed:\n\n#\n\n# MAKE_ALL:      Builds all there is to build in the project\n\n# MAKE_LIB:      Builds the core C++ library\n\n# MAKE_MDP:      Builds the core C++ MDP library\n\n# MAKE_FMDP:     Builds the core C++ Factored MDP and MDP library\n\n# MAKE_POMDP:    Builds the core C++ POMDP and MDP library\n\n# MAKE_PYTHON:   Builds Python bindings for the compiled core library\n\n# MAKE_TESTS:    Builds the library's tests for the compiled core library\n\n# MAKE_EXAMPLES: Builds the library's examples using the compiled core library\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE TO COMPILE ON WINDOWS:\n\n#\n\n# On Windows it is generally much less practical to actually look here for\n\n# folders and things we need, so you WILL probably need to pass paths to the\n\n# CMake call manually, and possibly even touch this script a bit.\n\n#\n\n# Some settings I found useful when compiling on Windows:\n\n#\n\n# -DCMAKE_GENERATOR_PLATFORM=x64\n\n# -DBOOST_LIBRARYDIR\n\n#\n\n# You may also want to force Boost to compile statically; you can change that\n\n# by uncommenting two lines in this script that you can find below (grep for\n\n# Boost and static).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################\n\n##  CMake helper functions  ##\n\n##############################\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################\n\n## Compiler/Linker Settings ##\n\n##############################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set default cmake build type to release\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check for Link Time Optimizations with this compiler\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##############################\n\n##     Project Settings     ##\n\n##############################\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Default is to build everything\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check whether to enable logging\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For additional Find library scripts\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Print what we're actually doing\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################\n\n##       Dependencies       ##\n\n##############################\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Optional to force Boost to use static libraries. Can be useful on Windows.\n\n#\n\n# set(Boost_USE_STATIC_LIBS ON)\n\n# add_definitions(-DBOOST_PYTHON_STATIC_LIB)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Try to find out which version of Python we should be targeting depending\n\n# on which interpreter is found. If the version has been selected\n\n# explicitly we search for it directly.\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# WARNING: The COMPONENTS parts of Boost here may need to be changed\n\n# depending on your system. For example, you may need to rename `python3` to\n\n# `python37`, depending on how your libraries are made.\n\n# This setup works for Ubuntu, but feel free to change it in Windows.\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "##############################\n\n##      Project Start       ##\n\n##############################\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add library directories\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If enabled, add tests\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# If enabled, add Python bindings\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/Modules/FindEigen3.cmake" : {
      "ObjectId" : "d16ec10521e2ece1a838a0035ab0dd1710ebd9ed",
      "LastModified" : "2015-06-30T23:28:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindLpSolve.cmake" : {
      "ObjectId" : "d320dc088d06cebf08bcea10c915383e5b03df62",
      "LastModified" : "2018-11-17T00:42:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################################################\n\n## From the Ball Project http://www.ball-project.org/                       ##\n\n## https://bitbucket.org/ball/ball/src/b4bdcec12ee5/cmake/FindLPSolve.cmake ##\n\n##                                                                          ##\n\n## Some modifications have been done here to make it work better on Windows ##\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Detect lpsolve\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Try to find out if lpsolve can link standalone\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "## Try to find out if lpsolve can link with some extra libs\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "c46ed50e821043a72658beb4482d024d247b402a",
      "LastModified" : "2018-09-03T18:35:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMP0069 NEW\n",
        "Line" : 1,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "585931beeec940ad1f76a85c41029fe3a68fd040",
      "LastModified" : "2019-03-22T12:57:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMP0069 NEW\n",
        "Line" : 1,
        "CharPositionInLine" : 36
      },
      "1" : {
        "Text" : "# Wrappers -- if unused macros will skip them\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Python Utilities\n",
        "Line" : 108,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Bandits\n",
        "Line" : 115,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# MDP\n",
        "Line" : 125,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# This may need to be added to FMDP too if we port FactoredLP to Python.\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "8267306cf929c255e375408f6196542de4965a30",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMP0069 NEW\n",
        "Line" : 1,
        "CharPositionInLine" : 36
      },
      "1" : {
        "Text" : "# Disable Python tests if no Python interpreter was found or we are using\n\n# Python 3 since the tests are written in Python 2\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Here we have surely passed in the MDP Python test branch, so we know\n\n# we have everything we need.\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 6
  },
  "ElapsedTime" : 1004
}