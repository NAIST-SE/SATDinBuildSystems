{
  "Repository" : "12581948",
  "Revision" : "HEAD",
  "ObjectId" : "432f095107e55cfedb95f39883fec1f09b26a00a",
  "CommitTime" : "2018-08-21T09:26:21Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "97702230bd809e4962cc94d5f96f8c03da06a900",
      "LastModified" : "2018-08-20T18:00:36Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# *DOCUMENTATION*\n\n# To see a list of typical targets execute \"make help\"\n\n# More info can be located in ./README\n\n# Comments in this file are targeted only to the developer, do not\n\n# expect to learn how to build the kernel reading this file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# o Do not use make's built-in rules and variables\n\n#   (this increases performance and avoids hard-to-debug behaviour);\n\n# o Look for make include files relative to root of kernel src\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid funny character set dependencies\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Avoid interference with shell env settings\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We are using a recursive build, so we need to do a little thinking\n\n# to get the ordering right.\n\n#\n\n# Most importantly: sub-Makefiles should only ever modify files in\n\n# their own directory. If in some directory we have a dependency on\n\n# a file in another dir (which doesn't happen often, but it's often\n\n# unavoidable when linking the built-in.o targets which finally\n\n# turn into libarch), we will call a sub make in that other dir, and\n\n# after that we are sure that everything which is in that other dir\n\n# is now up to date.\n\n#\n\n# The only cases where we need to modify files which have global\n\n# effects are thus separated out and done before the recursive\n\n# descending is started. They are now explicitly listed as the\n\n# prepare rule.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Beautify output\n\n# ---------------------------------------------------------------------------\n\n#\n\n# Normally, we echo the whole command before executing it. By making\n\n# that echo $($(quiet)$(cmd)), we now have the possibility to set\n\n# $(quiet) to choose other forms of output instead, e.g.\n\n#\n\n#         quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@\n\n#         cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<\n\n#\n\n# If $(quiet) is empty, the whole command will be printed.\n\n# If it is set to \"quiet_\", only the short version will be printed.\n\n# If it is set to \"silent_\", nothing will be printed at all, since\n\n# the variable $(silent_cmd_cc_o_c) doesn't exist.\n\n#\n\n# A simple variant is to prefix commands with $(Q) - that's useful\n\n# for commands that shall be hidden in non-verbose mode.\n\n#\n\n#\t$(Q)ln $@ :<\n\n#\n\n# If KBUILD_VERBOSE equals 0 then the above command will be hidden.\n\n# If KBUILD_VERBOSE equals 1 then the above command is displayed.\n\n#\n\n# To put more focus on warnings, be less verbose as default\n\n# Use 'make V=1' to see the full commands\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If the user is running make -s (silent mode), suppress echoing of\n\n# commands\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# make-4\n",
        "Line" : 92,
        "CharPositionInLine" : 39
      },
      "8" : {
        "Text" : "# make-3.8x\n",
        "Line" : 96,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# kbuild supports saving output files in a separate directory.\n\n# To locate output files in a separate directory two syntaxes are supported.\n\n# In both cases the working directory must be the root of the kernel src.\n\n# 1) O=\n\n# Use \"make O=dir/to/store/output/files/\"\n\n#\n\n# 2) Set KBUILD_OUTPUT\n\n# Set the environment variable KBUILD_OUTPUT to point to the directory\n\n# where the output files shall be placed.\n\n# export KBUILD_OUTPUT=dir/to/store/output/files/\n\n# make\n\n#\n\n# The O= assignment takes precedence over the KBUILD_OUTPUT environment\n\n# variable.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# KBUILD_SRC is set on invocation of make in OBJ directory\n\n# KBUILD_SRC is not intended to be used by the regular user (for now)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# OK, Make called in directory where kernel src resides\n\n# Do we want to locate output files in a separate directory?\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# That's our default target when none is given on the command line\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Cancel implicit rules on top Makefile\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Invoke a second make in the output directory, passing relevant variables\n\n# check that the output directory actually exists\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Leave processing to above invocation of make\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ifneq ($(KBUILD_OUTPUT),)\n\n# ifeq ($(KBUILD_SRC),)\n",
        "Line" : 156,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# We process the rest of the Makefile if this is the final invocation of make\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Do not print \"Entering directory ...\",\n\n# but we want to display it when entering to the output directory\n\n# so that IDEs/editors are able to understand relative filenames.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Call a source code checker (by default, \"sparse\") as part of the\n\n# C compilation.\n\n#\n\n# Use 'make C=1' to enable checking of only re-compiled files.\n\n# Use 'make C=2' to enable checking of *all* source files, regardless\n\n# of whether they are re-compiled or not.\n\n#\n\n# See the file \"Documentation/sparse.txt\" for more details, including\n\n# where to get the \"sparse\" utility.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Use make M=dir to specify directory of external module to build\n\n# Old syntax make ... SUBDIRS=$PWD is still supported\n\n# Setting the environment variable KBUILD_EXTMOD take precedence\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# If building an external module we do not care about the all: rule\n\n# but instead _all depend on modules\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# building in the source tree\n",
        "Line" : 205,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# building in a subdirectory of the source tree\n",
        "Line" : 209,
        "CharPositionInLine" : 16
      },
      "24" : {
        "Text" : "# SUBARCH tells the usermode build what the underlying arch is.  That is set\n\n# first, and if a usermode build is happening, the \"ARCH=um\" on the command\n\n# line overrides the setting of ARCH below.  If a native build is happening,\n\n# then ARCH is assigned, getting whatever value it gets normally, and\n\n# SUBARCH is subsequently ignored.\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Cross compiling and selecting different set of gcc/bin-utils\n\n# ---------------------------------------------------------------------------\n\n#\n\n# When performing cross compilation for other architectures ARCH shall be set\n\n# to the target architecture. (See arch/* for the possibilities).\n\n# ARCH can be set during invocation of make:\n\n# make ARCH=ia64\n\n# Another way is to have ARCH set in the environment.\n\n# The default ARCH is the host where make is executed.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# CROSS_COMPILE specify the prefix used for all executables used\n\n# during compilation. Only gcc and related bin-utils executables\n\n# are prefixed with $(CROSS_COMPILE).\n\n# CROSS_COMPILE can be set on the command line\n\n# make CROSS_COMPILE=ia64-linux-\n\n# Alternatively CROSS_COMPILE can be set in the environment.\n\n# A third alternative is to store a setting in .config so that plain\n\n# \"make\" in the configured kernel build directory always uses that.\n\n# Default value for CROSS_COMPILE is not to prefix executables\n\n# Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Architecture as present in compile.h\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Additional ARCH settings for x86\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Additional ARCH settings for sparc\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Additional ARCH settings for tile\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Where to locate arch specific headers\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# SHELL used by kbuild\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#HOSTCFLAGS  += -Wno-unused-value -Wno-unused-parameter \n\n#\t\t-Wno-missing-field-initializers -fno-delete-null-pointer-checks\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Decide whether to build built-in, modular, or both.\n\n# Normally, just do built-in.\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# If we have only \"make modules\", don't compile built-in objects.\n\n# When we're building modules with modversions, we need to consider\n\n# the built-in objects during the descend as well, in order to\n\n# make sure the checksums are up to date before we record them.\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# If we have \"make <whatever> modules\", compile modules\n\n# in addition to whatever we do anyway.\n\n# Just \"make\" or \"make all\" shall build modules as well\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# We need some generic definitions (do not try to remake the file).\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Make variables (CC, etc...)\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Use LINUXINCLUDE when you must reference the include/ directory.\n\n# Needed to be compatible with the O= option\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# -Werror-implicit-function-declaration \\\n\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#KBUILD_CFLAGS   += -I/usr/aarch64-linux-gnu/include -Wl,-L/usr/aarch64-linux-gnu/sys-root/lib\n\n#LDFLAGS += -L/usr/aarch64-linux-gnu/sys-root/lib\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#KBUILD_CFLAGS   += -Dalloca\\(x\\)=__builtin_alloca\\(\\(x\\)\\)\n\n#KBUILD_CFLAGS   += -Dlog2\\(x\\)=\\(log\\(x\\)*1.4426950408889634\\)\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Read PACKAGERELEASE from include/config/package.release (if it exists)\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# When compiling out-of-tree modules, put MODVERDIR in the module\n\n# tree rather than in the kernel tree. The kernel tree might\n\n# even be read-only.\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Files to ignore in find ... statements\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Create a fake .config as present in the kernel tree                           \n\n# # But if it exists leave it alone                                               \n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# ===========================================================================\n\n# Rules shared between *config targets and build targets\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Basic helpers built in scripts/\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# To avoid any implicit rule to kick in, define an empty command.\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# outputmakefile generates a Makefile in the output directory, if using a\n\n# separate output directory. This allows convenient use of make in the\n\n# output directory.\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Support for using generic headers in asm-generic\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# To make sure we do not include .config for any of the *config targets\n\n# catch them early, and hand them over to scripts/kconfig/Makefile\n\n# It is allowed to specify more targets when calling make, including\n\n# mixing *config targets and build targets.\n\n# For example 'make oldconfig all'.\n\n# Detect when mixed targets is specified, and make a second invocation\n\n# of make so .config is not included in this case either (for *config).\n",
        "Line" : 519,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# ===========================================================================\n\n# We're called with mixed targets (*config and build targets).\n\n# Handle them one by one.\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# ===========================================================================\n\n# *config targets only - make sure prerequisites are updated, and descend\n\n# in scripts/kconfig to make the *config target\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.\n\n# KBUILD_DEFCONFIG may point out an alternative default configuration\n\n# used for 'make defconfig'\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# ===========================================================================\n\n# Build targets only - this includes libarch, arch specific targets, clean\n\n# targets and others. In general all targets except *config targets.\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Additional helpers built in scripts/\n\n# Carefully list dependencies so we do not try to build scripts twice\n\n# in parallel\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Objects we will link into libarch / subdirs we need to visit\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# KBUILD_EXTMOD\n",
        "Line" : 603,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# Read in config\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Read in dependencies to all Kconfig* files, make sure to run\n\n# oldconfig if changes are detected.\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# To avoid any implicit rule to kick in, define an empty command\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# If .config is newer than include/config/auto.conf, someone tinkered\n\n# with it and forgot to run make oldconfig.\n\n# if auto.conf.cmd is missing then we are probably in a cleaned tree so\n\n# we execute the config step to be sure to catch updated Kconfig files\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# external modules needs include/generated/autoconf.h and include/config/auto.conf\n\n# but do not care if they are up-to-date. Use auto.conf to trigger the test\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# KBUILD_EXTMOD\n",
        "Line" : 637,
        "CharPositionInLine" : 6
      },
      "66" : {
        "Text" : "# Dummy target needed, because used as prerequisite\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# $(dot-config)\n",
        "Line" : 642,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "#KBUILD_CFLAGS\t+= $(call cc-option,-fno-delete-null-pointer-checks,)\n",
        "Line" : 666,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Tell gcc to never replace conditional load with a non-conditional one\n\n#KBUILD_CFLAGS\t+= $(call cc-option,--param=allow-store-data-races=0)\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Disable optimizations that make assembler listings hard to read.\n\n# reorder blocks reorders the control in the function\n\n# ipa clone creates specialized cloned functions\n\n# partial inlining inlines only parts of functions\n",
        "Line" : 687,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "#KBUILD_CFLAGS += $(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Handle stack protector mode.\n\n#\n\n# Since kbuild can potentially perform two passes (first with the old\n\n# .config values and then with updated .config values), we cannot error out\n\n# if a desired compiler option is unsupported. If we were to error, kbuild\n\n# could never get to the second pass and actually notice that we changed\n\n# the option to something that was supported.\n\n#\n\n# Additionally, we don't want to fallback and/or silently change which compiler\n\n# flags will be used, since that leads to producing kernels with different\n\n# security feature characteristics depending on the compiler used. (\"But I\n\n# selected CC_STACKPROTECTOR_STRONG! Why did it build with _REGULAR?!\")\n\n#\n\n# The middle ground is to warn here so that the failed option is obvious, but\n\n# to let the build fail with bad compiler flags so that we can't produce a\n\n# kernel when there is a CONFIG and compiler mismatch.\n\n#\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Force off for distro compilers that enable stack protector by default.\n",
        "Line" : 731,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "#KBUILD_CPPFLAGS += $(call cc-option,-Qunused-arguments,)\n\n#KBUILD_CPPFLAGS += $(call cc-option,-Wno-unknown-warning-option,)\n\n#KBUILD_CFLAGS += $(call cc-disable-warning, unused-variable)\n\n#KBUILD_CFLAGS += $(call cc-disable-warning, format-invalid-specifier)\n\n#KBUILD_CFLAGS += $(call cc-disable-warning, gnu)\n\n# Quiet clang warning: comparison of unsigned expression < 0 is always false\n\n#KBUILD_CFLAGS += $(call cc-disable-warning, tautological-compare)\n\n# CLANG uses a _MergedGlobals as optimization, but this breaks modpost, as the\n\n# source of a reference will be _MergedGlobals and not on of the whitelisted names.\n\n# See modpost pattern 2\n\n#KBUILD_CFLAGS += $(call cc-option, -mno-global-merge,)\n\n#KBUILD_CFLAGS += $(call cc-option, -fcatch-undefined-behavior)\n\n#KBUILD_CFLAGS += $(call cc-option, -fsanitize=undefined-trap -fsanitize-undefined-trap-on-error)\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# This warning generated too much noise in a regular build.\n\n# Use make W=1 to enable this warning (see scripts/Makefile.build)\n\n#KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)\n",
        "Line" : 753,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Some targets (ARM with Thumb2, for example), can't be built with frame\n\n# pointers.  For those, we don't have FUNCTION_TRACER automatically\n\n# select FRAME_POINTER.  However, FUNCTION_TRACER adds -pg, and this is\n\n# incompatible with -fomit-frame-pointer with current GCC, so we don't use\n\n# -fomit-frame-pointer with FUNCTION_TRACER.\n",
        "Line" : 761,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#KBUILD_CFLAGS   += $(call cc-option, -fno-var-tracking-assignments)\n",
        "Line" : 771,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#else\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# We trigger additional mismatches with less inlining\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# arch Makefile may override CC so keep this after arch Makefile is included\n\n#NOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)\n",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# warn about C99 declaration after statement\n\n#KBUILD_CFLAGS += $(call cc-option,-Wdeclaration-after-statement,)\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# disable pointer signed / unsigned warnings in gcc 4.0\n",
        "Line" : 825,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# disable invalid \"can't wrap\" optimizations for signed / pointers\n",
        "Line" : 828,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# conserve stack if available\n\n#KBUILD_CFLAGS   += $(call cc-option,-fconserve-stack)\n",
        "Line" : 831,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# disallow errors like 'EXPORT_GPL(foo);' with missing header\n",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# require functions to have arguments in prototypes, not empty 'int foo()'\n",
        "Line" : 837,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Prohibit date/time macros, which would make the build non-deterministic\n\n#KBUILD_CFLAGS   += $(call cc-option,-Werror=date-time)\n",
        "Line" : 840,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# use the deterministic mode of AR if available\n",
        "Line" : 843,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# check for 'asm goto'\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments\n",
        "Line" : 854,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Use --build-id when available.\n",
        "Line" : 859,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#\n\n# INSTALL_PATH specifies where to place the updated kernel and system map\n\n# images. Default is /boot, but you can set it to other values\n",
        "Line" : 869,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#\n\n# INSTALL_DTBS_PATH specifies a prefix for relocations required by build roots.\n\n# Like INSTALL_MOD_PATH, it isn't defined in the Makefile, but can be passed as\n\n# an argument if needed. Otherwise it defaults to the kernel install path\n\n#\n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "#\n\n# INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory\n\n# relocations required by build roots.  This is not defined in the\n\n# makefile but the argument can be passed to make if needed.\n\n#\n",
        "Line" : 889,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "#MODLIB = $(INSTALL_MOD_PATH)/$(PACKAGERELEASE)\n",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "#\n\n# INSTALL_MOD_STRIP, if defined, will cause modules to be\n\n# stripped after they are installed.  If INSTALL_MOD_STRIP is '1', then\n\n# the default option --strip-debug will be used.  Otherwise,\n\n# INSTALL_MOD_STRIP value will be used as the options to the strip command.\n",
        "Line" : 898,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# INSTALL_MOD_STRIP=1\n",
        "Line" : 909,
        "CharPositionInLine" : 6
      },
      "98" : {
        "Text" : "# INSTALL_MOD_STRIP\n",
        "Line" : 912,
        "CharPositionInLine" : 6
      },
      "99" : {
        "Text" : "# CONFIG_MODULE_COMPRESS, if defined, will cause module to be compressed\n\n# after they are installed in agreement with CONFIG_MODULE_COMPRESS_GZIP\n\n# or CONFIG_MODULE_COMPRESS_XZ.\n",
        "Line" : 915,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# CONFIG_MODULE_COMPRESS_GZIP\n",
        "Line" : 923,
        "CharPositionInLine" : 8
      },
      "101" : {
        "Text" : "# CONFIG_MODULE_COMPRESS_XZ\n",
        "Line" : 926,
        "CharPositionInLine" : 8
      },
      "102" : {
        "Text" : "# CONFIG_MODULE_COMPRESS\n",
        "Line" : 927,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# used by scripts/pacmage/Makefile\n",
        "Line" : 941,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# Store (new) PACKAGERELEASE string in include/config/package.release\n",
        "Line" : 960,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# Things we need to do before we recursively start building the kernel\n\n# or the modules are listed in \"prepare\".\n\n# A multi level approach is used. prepareN is processed before prepareN-1.\n\n# archprepare is used in arch Makefiles and when processed asm symlink,\n\n# version.h and scripts_basic is processed / created.\n",
        "Line" : 972,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# Listed in dependency order\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# prepare3 is used to check if we are building in a separate output directory,\n\n# and if so do:\n\n# 1) Check that make has not been executed in the kernel src $(srctree)\n",
        "Line" : 981,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "#\t@$(kecho) '  Using $(srctree) as source for build'\n",
        "Line" : 986,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# prepare2 creates a makefile if using a separate output directory\n",
        "Line" : 994,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# All the preparing..\n",
        "Line" : 1006,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# Generate some files\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1009,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# PACKAGERELEASE can change from a few different places, meaning version.h\n\n# needs to be updated, so this check is forced on all builds\n",
        "Line" : 1012,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "#Default location for installed headers\n",
        "Line" : 1042,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# If we do an all arch process set dst to asm-$(hdr-arch)\n",
        "Line" : 1045,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# Kernel selftest\n",
        "Line" : 1078,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# Modules\n",
        "Line" : 1084,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# By default, build modules as well\n",
        "Line" : 1093,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "# Location for installation\n",
        "Line" : 1096,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# Build modules\n\n#\n\n# A module can be listed more than once in obj-m resulting in\n\n# duplicate lines in modules.order files.  Those are removed\n\n# using awk while concatenating to the final file.\n",
        "Line" : 1109,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "#\t@$(kecho) '  Building modules, stage 2.';\n\n#\t$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost\n",
        "Line" : 1118,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "# Target to prepare building external modules\n",
        "Line" : 1127,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# Target to install modules\n",
        "Line" : 1131,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# This depmod is only for convenience to give the initial\n\n# boot a modules.dep even before / is mounted read-write.  However the\n\n# boot script depmod is the master version.\n",
        "Line" : 1149,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "#\t$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modinst\n",
        "Line" : 1154,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "# CONFIG_MODULES\n",
        "Line" : 1163,
        "CharPositionInLine" : 5
      },
      "126" : {
        "Text" : "#modules\n",
        "Line" : 1167,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "# Modules not configured\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1169,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "#modules \n",
        "Line" : 1172,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# CONFIG_MODULES\n",
        "Line" : 1181,
        "CharPositionInLine" : 6
      },
      "130" : {
        "Text" : "###\n\n# Cleaning is done on three levels.\n\n# make clean     Delete most generated files\n\n#                Leave enough to build external modules\n\n# make mrproper  Delete the current configuration, and all generated files\n\n# make distclean Remove editor backup files, patch leftover files and the like\n",
        "Line" : 1183,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "# Directories & files removed with 'make clean'\n",
        "Line" : 1190,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "# Directories & files removed with 'make mrproper'\n",
        "Line" : 1193,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "# clean - Delete most, but leave enough to build external modules\n\n#\n",
        "Line" : 1202,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "#clean-dirs      := $(addprefix _clean_, . $(package-dirs) samples)\n",
        "Line" : 1206,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "# mrproper - Delete all generated files, including .config\n\n#\n",
        "Line" : 1217,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "# distclean\n\n#\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "# Packaging of the to various formats\n\n# ---------------------------------------------------------------------------\n\n# rpm target kept for backward compatibility\n",
        "Line" : 1247,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "# Brief documentation of the typical targets used\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1260,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "#@$(MAKE) -f $(srctree)/scripts/Makefile.help checker-help\n",
        "Line" : 1306,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "#@$(MAKE) -f $(srctree)/scripts/doc/DocBook/Makefile dochelp\n",
        "Line" : 1315,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "# Documentation targets\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1361,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "# KBUILD_EXTMOD\n",
        "Line" : 1367,
        "CharPositionInLine" : 5
      },
      "143" : {
        "Text" : "###\n\n# External module support.\n\n# When building external modules the kernel used as basis is considered\n\n# read-only, and no consistency checks are made and the make\n\n# system is not used on the basis kernel. If updates are required\n\n# in the basis kernel ordinary make commands (without M=...) must\n\n# be used.\n\n#\n\n# The following are the only valid targets when building external\n\n# modules.\n\n# make M=dir clean     Delete all automatically generated files\n\n# make M=dir modules   Make all modules in specified dir\n\n# make M=dir\t       Same as 'make M=dir modules'\n\n# make M=dir modules_install\n\n#                      Install the modules built in the module directory\n\n#                      Assumes install directory is already created\n",
        "Line" : 1369,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "# We are always building modules\n",
        "Line" : 1386,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "#\t$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost\n",
        "Line" : 1407,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "# Location for installation\n",
        "Line" : 1424,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "# Dummies...\n",
        "Line" : 1455,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "# KBUILD_EXTMOD\n",
        "Line" : 1459,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# Generate tags for editors\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1473,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "# Scripts to check various things for consistency\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1481,
        "CharPositionInLine" : 0
      },
      "151" : {
        "Text" : "#ifeq ($(config-targets),1)\n\n#ifeq ($(mixed-targets),1)\n",
        "Line" : 1505,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# UML needs a little special treatment here.  It wants to use the host\n\n# toolchain, so needs $(SUBARCH) passed to checkstack.pl.  Everyone\n\n# else wants $(ARCH), including people doing cross-builds, which means\n\n# that $(SUBARCH) doesn't work here.\n",
        "Line" : 1510,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "# Clear a bunch of variables before executing the submake\n\n#tools/: FORCE\n\n#\t$(Q)mkdir -p $(objtree)/tools\n\n#\t$(Q)$(MAKE) LDFLAGS= MAKEFLAGS=\"$(filter --j% -j,$(MAKEFLAGS))\" O=$(objtree) subdir=tools -C $(src)/tools/\n",
        "Line" : 1532,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "#tools/%: FORCE\n\n#\t$(Q)mkdir -p $(objtree)/tools\n\n#\t$(Q)$(MAKE) LDFLAGS= MAKEFLAGS=\"$(filter --j% -j,$(MAKEFLAGS))\" O=$(objtree) subdir=tools -C $(src)/tools/ $*\n",
        "Line" : 1537,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "# Single targets\n\n# ---------------------------------------------------------------------------\n\n# Single targets are compatible with:\n\n# - build with mixed source and output\n\n# - build with separate output dir 'make O=...'\n\n# - external modules\n\n#\n\n#  target-dir => where to store outputfile\n\n#  build-dir  => directory in kernel source tree to use\n",
        "Line" : 1541,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "# Modules\n",
        "Line" : 1575,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "# Make sure the latest headers are built for Documentation\n",
        "Line" : 1580,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "#\t$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost\n",
        "Line" : 1590,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "# FIXME Should go into a make.lib or something\n\n# ===========================================================================\n",
        "Line" : 1592,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "# Run depmod only if we have System.map and depmod is executable\n",
        "Line" : 1601,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "# Create temporary dir for module support files\n\n# clean it up only when building all modules\n",
        "Line" : 1606,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "# read all saved command lines\n",
        "Line" : 1611,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "# Do not try to update included dependency files\n",
        "Line" : 1617,
        "CharPositionInLine" : 18
      },
      "164" : {
        "Text" : "# skip-makefile\n",
        "Line" : 1621,
        "CharPositionInLine" : 6
      },
      "165" : {
        "Text" : "# Declare the contents of the .PHONY variable as phony.  We keep that\n\n# information in a variable so we can use it in if_changed and friends.\n",
        "Line" : 1626,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 166
    },
    "arch/Makefile" : {
      "ObjectId" : "985227cbbd1bd797546c36099dcd7cc17c0efc4f",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# arch/arm/Makefile\n\n#\n\n# This file is included by the global makefile so that you can add your own\n\n# architecture-specific flags and dependencies.\n\n#\n\n# This file is subject to the terms and conditions of the GNU General Public\n\n# License.  See the file \"COPYING\" in the main directory of this archive\n\n# for more details.\n\n#\n\n# Copyright (C) 1995-2001 by Russell King\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Ensure linker flags are correct\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#KBUILD_CFLAGS\t+=-pipe\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Never generate .eh_frame\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Do not use arch/arm/defconfig - it's always outdated.\n\n# Select a platform tht is kept up-to-date\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# defines filename extension depending memory management type.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This selects which instruction set is used.\n\n# Note that GCC does not numerically define an architecture version\n\n# macro, but instead defines a whole series of macros which makes\n\n# testing for a specific architecture or later rather impossible.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Only override the compiler option if ARMv6. The ARMv6K extensions are\n\n# always available in ARMv7\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Evaluate arch cc-option calls now\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This selects how we optimise for the processor.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Evaluate tune cc-option calls now\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Work around buggy relocation from gas if requested:\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Need -Uarm for gcc < 3.x\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#Default value\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Text offset. This list is sorted numerically by address in order to\n\n# provide a means to avoid/resolve conflicts in multi-arch kernels.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# We don't want the htc bootloader to corrupt kernel during resume\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# SA1111 DMA bug: we don't want the kernel to live in precious DMA-able memory\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Machine directory name.  This list is sorted alphanumerically\n\n# by CONFIG_* macro name.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Platform directory name.  This list is sorted alphanumerically\n\n# by CONFIG_* macro name.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This is what happens if you forget the IOCS16 line.\n\n# PCMCIA cards stop working.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The byte offset of the kernel image in RAM from the start of RAM.\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The first directory contains additional information for the boot setup code\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Do we have FASTFPE?\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# If we have a machine-specific directory, then include it in the build.\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Default target when executing plain make\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Build the DT binary blobs if we have OF configured\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Convert bzImage to zImage\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We use MRPROPER_FILES and CLEAN_FILES now\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# My testing targets (bypasses dependencies)\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "arch/arm/Makefile" : {
      "ObjectId" : "086ca3331101b3501d63f3fb406716ba83a69f05",
      "LastModified" : "2016-06-26T07:55:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# testing for a specific architecture or later rather impossible.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only override the compiler option if ARMv6. The ARMv6K extensions are\n\n# always available in ARMv7\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Evaluate arch cc-option calls now\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This selects how we optimise for the processor.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Evaluate tune cc-option calls now\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#CFLAGS_ABI\t:=-mabi=aapcs-linux -mno-thumb-interwork -mfpu=vfp\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#CFLAGS_ABI\t:=$(call cc-option,-mapcs-32,-mabi=apcs-gnu) $(call cc-option,-mno-thumb-interwork,)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#CFLAGS_ABI\t+=-funwind-tables\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# by CONFIG_* macro name.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Platform directory name.  This list is sorted alphanumerically\n\n# by CONFIG_* macro name.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "arch/arm/mem/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "arch/powerpc/Makefile" : {
      "ObjectId" : "b5b9605372023b2b0975114fccf748cc0fad2771",
      "LastModified" : "2017-08-14T01:28:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This file is included by the global makefile so that you can add your own\n\n# architecture-specific flags and dependencies. Remember to do have actions\n\n# for \"archclean\" and \"archdep\" for cleaning up and making dependencies for\n\n# this architecture.\n\n#\n\n# This file is subject to the terms and conditions of the GNU General Public\n\n# License.  See the file \"COPYING\" in the main directory of this archive\n\n# for more details.\n\n#\n\n# Copyright (C) 1994 by Linus Torvalds\n\n# Changes for PPC by Gary Thomas\n\n# Rewritten by Cort Dougan and Paul Mackerras\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default 32 bits cross compilers for vdso and boot wrapper\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#KBUILD_DEFCONFIG := $(shell uname -m)_defconfig\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# It seems there are times we use this Makefile without\n\n# including the config file, but this replicates the old behaviour\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#override LD\t+= -EB\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# -mcmodel=medium breaks modules because it uses 32bit offsets from\n\n# the TOC pointer to create pointers where possible. Pointers into the\n\n# percpu data area are created by this method.\n\n#\n\n# The kernel module loader relocates the percpu data section from the\n\n# original location (starting with 0xd...) to somewhere in the base\n\n# kernel percpu data space (starting with 0xc...). We need a full\n\n# 64bit relocation for this to work, hence -mcmodel=large.\n",
        "Line" : 106,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Altivec option not allowed with e500mc64 in GCC.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#asinstr := $(call as-instr,lis 9$(comma)foo@high,-DHAVE_AS_ATHIGH=1)\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#KBUILD_CPPFLAGS\t+= -Iarch/$(ARCH) $(asinstr)\n\n#KBUILD_AFLAGS\t+= -Iarch/$(ARCH) $(AFLAGS-y)\n\n#KBUILD_CFLAGS\t+= $(call cc-option,-msoft-float)\n\n#KBUILD_CFLAGS\t+= -pipe -Iarch/$(ARCH) $(CFLAGS-y)\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# No AltiVec or VSX instructions when building kernel\n\n#KBUILD_CFLAGS += $(call cc-option,-mno-altivec)\n\n#KBUILD_CFLAGS += $(call cc-option,-mno-vsx)\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# No SPE instruction when building kernel\n\n# (We use all available options to help semi-broken compilers)\n\n#KBUILD_CFLAGS += $(call cc-option,-mno-spe)\n\n#KBUILD_CFLAGS += $(call cc-option,-mspe=no)\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Enable unit-at-a-time mode when possible. It shrinks the\n\n# kernel considerably.\n\n#KBUILD_CFLAGS += $(call cc-option,-funit-at-a-time)\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# FIXME: the module load should be taught about the additional relocs\n\n# generated by this.\n\n# revert to pre-gcc-4.4 behaviour of .eh_frame\n\n#KBUILD_CFLAGS\t+= $(call cc-option,-fno-dwarf2-cfi-asm)\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Never use string load/store instructions as they are\n\n# often slow when they are implemented at all\n\n#KBUILD_CFLAGS\t\t+= $(call cc-option,-mno-string)\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Work around a gcc code-gen bug with -fno-omit-frame-pointer.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#KBUILD_AFLAGS += $(cpu-as-y)\n\n#KBUILD_CFLAGS += $(cpu-as-y)\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Used to create 'merged defconfigs'\n\n# To use it $(call) it with the first argument as the base defconfig\n\n# and the second argument as a space separated list of .config files to merge,\n\n# without the .config suffix.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "arch/powerpc/platforms/Makefile" : {
      "ObjectId" : "469ef170d218e24fadc665623787e70a7dbd39f8",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "arch/s390/Makefile" : {
      "ObjectId" : "69d2ecb8690b54dae0808c10038ef0de0145ea7a",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# s390/Makefile\n\n#\n\n# This file is included by the global makefile so that you can add your own\n\n# architecture-specific flags and dependencies. Remember to do have actions\n\n# for \"archclean\" and \"archdep\" for cleaning up and making dependencies for\n\n# this architecture\n\n#\n\n# This file is subject to the terms and conditions of the GNU General Public\n\n# License.  See the file \"COPYING\" in the main directory of this archive\n\n# for more details.\n\n#\n\n# Copyright (C) 1994 by Linus Torvalds\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#LDFLAGS\t\t:= -m elf_s390\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#LD_BFD\t\t:= elf64-s390\n\n#LDFLAGS\t\t:= -m elf64_s390\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#KBUILD_IMAGE is necessary for make rpm\n\n#KBUILD_IMAGE\t:=arch/s390/boot/image\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Prevent tail-call optimizations, to get clearer backtraces:\n\n#\n\n#cflags-$(CONFIG_FRAME_POINTER) += -fno-optimize-sibling-calls\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# old style option for packed stacks\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#cflags-$(CONFIG_PACK_STACK)  += -mkernel-backchain -D__PACK_STACK\n\n#aflags-$(CONFIG_PACK_STACK)  += -D__PACK_STACK\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# new style option for packed stacks\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#cflags-$(CONFIG_PACK_STACK)  += -mpacked-stack -D__PACK_STACK\n\n#aflags-$(CONFIG_PACK_STACK)  += -D__PACK_STACK\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#cflags-$(CONFIG_CHECK_STACK) += -mstack-size=$(STACK_SIZE)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#cflags-$(CONFIG_CHECK_STACK) += -mstack-guard=$(CONFIG_STACK_GUARD)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#cflags-$(CONFIG_WARN_DYNAMIC_STACK) += -mwarn-dynamicstack\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# make use of hotpatch feature if the compiler supports it\n\n#cc_hotpatch\t:= -mhotpatch=0,3\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#KBUILD_AFLAGS\t+= -DCC_USING_HOTPATCH\n\n#KBUILD_CFLAGS\t+= -DCC_USING_HOTPATCH\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# /usr/lib/gcc-lib/s390-ibm-linux/2.95.3/collect2 -m elf_s390 -dynamic-linker /lib/ld.so.1 /usr/lib/crt1.o /usr/lib/crti.o /usr/lib/gcc-lib/s390-ibm-linux/2.95.3/crtbegin.o -L/usr/lib/gcc-lib/s390-ibm-linux/2.95.3 bad3.o -lg\n\n# cc -lc -lgcc /usr/lib/gcc-lib/s390-ibm-linux/2.95.3/crtend.o /usr/lib/crtn.o\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#LDFLAGS += -L /usr/s390x-linux-gnu/lib/ \n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#EXE_LDFLAGS += -e main\n\n#EXE_LDFLAGS += -e main -L /usr/s390x-linux-gnu/lib/ \\\n               -dynamic-linker /usr/s390x-linux-gnu/lib/ld-2.23.so \\\n               -L /usr/s390x-linux-gnu/lib/ \\\n\t       /usr/s390x-linux-gnu/lib/gcrt1.o \\\n\t       /usr/s390x-linux-gnu/lib/crti.o \\\n\t       /usr/s390x-linux-gnu/lib/crtn.o \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#-nostartfiles\n\n#KBUILD_CFLAGS += -fPIC \n\n#LDFLAGS += -lc\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#KBUILD_CFLAGS\t+= -mbackchain -msoft-float $(cflags-y)\n\n#KBUILD_CFLAGS\t+= -pipe -fno-strength-reduce -Wno-sign-compare\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Don't use tabs in echo arguments\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "arch/s390/mem/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "arch/x86/Makefile" : {
      "ObjectId" : "67e89e117d86460691ee4f4808a64f7e896a3c60",
      "LastModified" : "2017-08-14T01:28:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Unified Makefile for i386 and x86_64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# select defconfig based on actual architecture\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# How to compile the 16-bit code.  Note we always compile for -march=i386;\n\n# that way we can complain to the user if the CPU is insufficient.\n\n#\n\n# The -m16 option is supported by GCC >= 4.9 and clang >= 3.5. For\n\n# older versions of GCC, include an *assembly* header to make sure that\n\n# gcc doesn't play any games behind our back.\n\n#CODE16GCC_CFLAGS := -m32 -Wa,$(srctree)/arch/x86/boot/code16gcc.h\n\n#M16_CFLAGS\t := $(call cc-option, -m16, $(CODE16GCC_CFLAGS))\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#REALMODE_CFLAGS\t:= $(M16_CFLAGS) -g -Os -D__KERNEL__ \\\n#\t\t   -DDISABLE_BRANCH_PROFILING \\\n#\t\t   -Wall -Wstrict-prototypes -march=i386 -mregparm=3 \\\n#\t\t   -fno-strict-aliasing -fomit-frame-pointer -fno-pic \\\n#\t\t   -mno-mmx -mno-sse \\\n#\t\t   $(call cc-option, -ffreestanding) \\\n#\t\t   $(call cc-option, -fno-stack-protector) \\\n#\t\t   $(call cc-option, -mpreferred-stack-boundary=2)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# BITS is used as extension for files which are available in a 32 bit\n\n# and a 64 bit version to simplify shared Makefiles.\n\n# e.g.: obj-y += foo_$(BITS).o\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#        KBUILD_CFLAGS += -msoft-float -mregparm=3 -freg-struct-return\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Never want PIC in a 32-bit kernel, prevent breakage with GCC built\n\n# with nonstandard options\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# prevent gcc from keeping the stack 16 byte aligned\n\n#KBUILD_CFLAGS += $(call cc-option,-mpreferred-stack-boundary=2)\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Disable unit-at-a-time mode on pre-gcc-4.0 compilers, it makes gcc use\n\n# a lot more stack due to the lack of sharing of stacklots:\n\n#KBUILD_CFLAGS += $(call cc-ifversion, -lt, 0400, \\\n\t\t\t\t$(call cc-option,-fno-unit-at-a-time))\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# CPU-specific tuning. Anything which can be shared with UML should go here.\n\n#include $(srctree)/arch/x86/Makefile_32.cpu\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# temporary until string.h is fixed\n\n#KBUILD_CFLAGS += -ffreestanding\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#        biarch := -m64\n\n#        KBUILD_AFLAGS += -m64\n\n#        KBUILD_CFLAGS += -m64\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Don't autogenerate traditional x87 instructions\n\n#KBUILD_CFLAGS += $(call cc-option,-mno-80387)\n\n#KBUILD_CFLAGS += $(call cc-option,-mno-fp-ret-in-387)\n",
        "Line" : 80,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Use -mpreferred-stack-boundary=3 if supported.\n\n#KBUILD_CFLAGS += $(call cc-option,-mpreferred-stack-boundary=3)\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# FIXME - should be integrated in Makefile.cpu (Makefile_32.cpu)\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "#KBUILD_CFLAGS += -mno-red-zone\n\n#KBUILD_CFLAGS += -mcmodel=kernel\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# -funit-at-a-time shrinks the kernel .text considerably\n\n# unfortunately it makes reading oopses harder.\n\n#KBUILD_CFLAGS += $(call cc-option,-funit-at-a-time)\n",
        "Line" : 101,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# this works around some issues with generating unwind tables in older gccs\n\n# newer gccs do it by default\n\n#KBUILD_CFLAGS += $(call cc-option,-maccumulate-outgoing-args)\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Make sure compiler does not have buggy stack-protector support.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Don't unroll struct assignments with kmemcheck enabled\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Stackpointer is addressed different for 32 bit and 64 bit x86\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# do binutils support CFI?\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# is .cfi_signal_frame supported too?\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# does binutils support specific instructions?\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#LDFLAGS := -m elf_$(UTS_MACHINE)\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Speed up the build\n\n#KBUILD_CFLAGS += -pipe\n\n# Workaround for a gcc prelease that unfortunately was shipped in a suse release\n\n#KBUILD_CFLAGS += -Wno-sign-compare\n\n#\n\n#KBUILD_CFLAGS += -fno-asynchronous-unwind-tables\n\n# prevent gcc from generating any FP code by mistake\n\n#KBUILD_CFLAGS += -mno-sse -mno-mmx -mno-sse2 -mno-3dnow\n\n#KBUILD_CFLAGS += $(call cc-option,-mno-avx,)\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#archscripts: scripts_basic\n\n#\t$(Q)$(MAKE) $(build)=arch/x86/tools relocs\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "###\n\n# Syscall table generation\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#archheaders:\n\n#\t$(Q)$(MAKE) $(build)=arch/x86/syscalls all\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#archprepare:\n\n#ifeq ($(CONFIG_KEXEC_FILE),y)\n\n#\t$(Q)$(MAKE) $(build)=arch/x86/purgatory arch/x86/purgatory/kexec-purgatory.c\n\n#endif\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###\n\n# Kernel objects\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#head-y := arch/x86/kernel/head_$(BITS).o\n\n#head-y += arch/x86/kernel/head$(BITS).o\n\n#head-y += arch/x86/kernel/head.o\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#libs-y  += arch/x86/lib/\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# See arch/x86/Kbuild for content of core part of the kernel\n\n#core-y += arch/x86/\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# drivers-y are linked after core-y\n\n#drivers-$(CONFIG_MATH_EMULATION) += arch/x86/math-emu/\n\n#drivers-$(CONFIG_PCI)            += arch/x86/pci/\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# must be linked after kernel/\n\n#drivers-$(CONFIG_OPROFILE) += arch/x86/oprofile/\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# suspend and hibernation support\n\n#drivers-$(CONFIG_PM) += arch/x86/power/\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#drivers-$(CONFIG_FB) += arch/x86/video/\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "####\n\n# boot loader support. Several targets are kept for legacy purposes\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#boot := arch/x86/boot\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Default kernel to build\n\n#all: bzImage\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# KBUILD_IMAGE specify target image being built\n\n#KBUILD_IMAGE := $(boot)/bzImage\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#bzImage: vmlinux\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\t$(Q)$(MAKE) $(build)=arch/x86/tools posttest\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\t$(Q)$(MAKE) $(build)=$(boot) $(KBUILD_IMAGE)\n\n#\t$(Q)mkdir -p $(objtree)/arch/$(UTS_MACHINE)/boot\n\n#\t$(Q)ln -fsn ../../x86/boot/bzImage $(objtree)/arch/$(UTS_MACHINE)/boot/$@\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#install:\n\n#\t$(Q)$(MAKE) $(build)=$(boot) $@\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46
    },
    "modules/Makefile" : {
      "ObjectId" : "d63612674b22eec78e7c2289966f0a63413ab382",
      "LastModified" : "2018-07-23T07:52:16Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/Makefile" : {
      "ObjectId" : "27230dd42c6e860e1f8cb9d14e9072051a6c8955",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###\n\n# scripts contains sources for various helper programs used throughout\n\n# the kernel for the build process.\n\n# ---------------------------------------------------------------------------\n\n# kallsyms:      Find all symbols in vmlinux\n\n# pnmttologo:    Convert pnm files to logo files\n\n# conmakehash:   Create chartable\n\n# conmakehash:\t Create arrays for initializing the kernel console tables\n\n# docproc:       Used in Documentation/DocBook\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#HOSTCFLAGS_sortextable.o = -I$(srctree)/tools/include\n\n#HOSTCFLAGS_asn1_compiler.o = -I$(srctree)/include\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The following hostprogs-y programs are only build on demand\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These targets are used internally to avoid \"is up to date\" messages\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#subdir-$(CONFIG_MODVERSIONS) += genksyms\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#subdir-$(CONFIG_SECURITY_SELINUX) += selinux\n\n#subdir-$(CONFIG_DTC)         += dtc\n\n#subdir-$(CONFIG_GDB_SCRIPTS) += gdb\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Let clean descend into subdirs\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "scripts/basic/Makefile" : {
      "ObjectId" : "ec10d9345bc2d9b978d8cae4d85bf2fd89ab121c",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###\n\n# Makefile.basic lists the most basic programs used during the build process.\n\n# The programs listed herein are what are needed to do the basic stuff,\n\n# such as fix file dependencies.\n\n# This initial step is needed to avoid files to be recompiled\n\n# when kernel configuration changes (which is what happens when\n\n# .config is included by main Makefile.\n\n# ---------------------------------------------------------------------------\n\n# fixdep: \t Used to generate dependency information during build process\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# fixdep is needed to compile other host programs\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "scripts/doc/DocBook/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/doc/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/gdb/Makefile" : {
      "ObjectId" : "62f5f65becfd0075ca438a671f7d72a2a02b99ab",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/gdb/linux/Makefile" : {
      "ObjectId" : "6cf1ecf610579e692075251d3f7cf52806c559b4",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/kconfig/Makefile" : {
      "ObjectId" : "2ef36146bf534cbfed25b5074b1e451436ceb9ad",
      "LastModified" : "2017-08-14T01:28:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ===========================================================================\n\n# Kernel configuration targets\n\n# These targets are used from top-level makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need this, in case the user has it in its environment\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create new linux.pot file\n\n# Adjust charset to UTF-8 in .po file to accept UTF-8 in Kconfig files\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# oldnoconfig is an alias of olddefconfig, because people already are dependent\n\n# on its behavior(sets new symbols to their default value but not 'n') with the\n\n# counter-intuitive name.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Help text used by make help\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# lxdialog stuff\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use recursively expanded variables so we do not call gcc unless\n\n# we really need to do so. (Do not call gcc as part of make mrproper)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ===========================================================================\n\n# Shared Makefile for the various kconfig executables:\n\n# conf:\t  Used for defconfig, oldconfig and related targets\n\n# nconf:  Used for the nconfig target.\n\n#         Utilizes ncurses\n\n# mconf:  Used for the menuconfig target\n\n#         Utilizes the lxdialog package\n\n# qconf:  Used for the xconfig target\n\n#         Based on QT which needs to be installed to compile it\n\n# gconf:  Used for the gconfig target\n\n#         Based on GTK which needs to be installed to compile it\n\n# object files used by all kconfig flavours\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# systems without getopt_long\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check that we have the required ncurses stuff installed for lxdialog (menuconfig)\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add environment specific flags\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# generated files seem to need this to find local include files\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# QT needs some extra effort...\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# GTK needs some extra effort, too...\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Extract gconf menu items for I18N support\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "scripts/mod/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/package/Makefile" : {
      "ObjectId" : "7147583076be5b4532c7faa816657c81be3d89e1",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for the different targets used to generate full packages of a kernel\n\n# It uses the generic clean infrastructure of kbuild\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# RPM target\n\n# ---------------------------------------------------------------------------\n\n# The rpm target generates two rpm files:\n\n# /usr/src/packages/SRPMS/kernel-2.6.7rc2-1.src.rpm\n\n# /usr/src/packages/RPMS/i386/kernel-2.6.7rc2-1.<arch>.rpm\n\n# The src.rpm files includes all source for the kernel being built\n\n# The <arch>.rpm includes kernel configuration, modules etc.\n\n#\n\n# Process to create the rpm files\n\n# a) clean the kernel\n\n# b) Generate .spec file\n\n# c) Build a tar ball, using symlink to make kernel version\n\n#    first entry in the path\n\n# d) and pack the result to a tar.gz file\n\n# e) generate the rpm files, based on kernel.spec\n\n# - Use /. to avoid tar packing just the symlink\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that the rpm-pkg target cannot be used with KBUILD_OUTPUT,\n\n# but the binrpm-pkg target can; for some reason O= gets ignored.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Do we have rpmbuild, otherwise fall back to the older rpm\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Remove hyphens since they have special meaning in RPM filenames\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include only those top-level files that are needed by make, plus the GPL copy\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rpm-pkg\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# binrpm-pkg\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Deb target\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# tarball targets\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# perf-pkg - generate a source tarball with perf source\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Help text displayed when executing 'make help'\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "sys/exec/mach/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "sys/exec/pe/Makefile" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2017-01-08T17:20:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 21
  },
  "ElapsedTime" : 1485
}