{
  "Repository" : "4304960",
  "Revision" : "HEAD",
  "ObjectId" : "5fdbfb209069276e95e1765093df9855d2cf2c38",
  "CommitTime" : "2019-04-05T23:50:17Z",
  "Files" : {
    "build.xml" : {
      "ObjectId" : "1089f1b3b5e6866962cde99db94b55c58cb83d07",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " JavaNLP core build file ",
        "Line" : 1,
        "CharPositionInLine" : 33
      },
      "1" : {
        "Text" : " included tasks may use project.core as a property name ",
        "Line" : 12,
        "CharPositionInLine" : 66
      },
      "2" : {
        "Text" : " <compilerarg value=\"-Xmaxerrs\"/>\n           <compilerarg value=\"20\"/> ",
        "Line" : 106,
        "CharPositionInLine" : 41
      },
      "3" : {
        "Text" : "\n        <compilerarg value=\"-Xlint:deprecation\"/>\n        <compilerarg value=\"-Xlint:dep-ann\"/>\n        <compilerarg value=\"-Xlint:fallthrough\"/>\n        <compilerarg value=\"-Xlint:options\"/>\n        <compilerarg value=\"-Xlint:overrides\"/>\n        <compilerarg value=\"-Xlint:processing\"/>\n        <compilerarg value=\"-Xlint:rawtypes\"/>\n        <compilerarg value=\"-Xlint:serial\"/>\n        <compilerarg value=\"-Xlint:static\"/>\n        <compilerarg value=\"-Xlint:unchecked\"/>\n        <compilerarg value=\"-Xlint:varargs\"/>\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "    <compilerarg value=\"-Xlint:all\"/>\n        <compilerarg value=\"-Xmaxwarns\"/>\n        <compilerarg value=\"10000\"/>  ",
        "Line" : 129,
        "CharPositionInLine" : 42
      },
      "5" : {
        "Text" : " This file contains the .jsp build target ",
        "Line" : 308,
        "CharPositionInLine" : 52
      },
      "6" : {
        "Text" : " This runs the specified class, using a separate Java VM ",
        "Line" : 311,
        "CharPositionInLine" : 67
      },
      "7" : {
        "Text" : " Specify class to run via \"run.class,\" arg, i.e., ",
        "Line" : 312,
        "CharPositionInLine" : 60
      },
      "8" : {
        "Text" : "       ant run -Drun.class=edu.stanford.nlp.tagger.maxent.MaxentTaggerGUI ",
        "Line" : 313,
        "CharPositionInLine" : 84
      },
      "9" : {
        "Text" : " Use \"jvmarg\" to pass arguments to the VM, use \"arg\" to pass cmdline args to the class ",
        "Line" : 314,
        "CharPositionInLine" : 97
      },
      "10" : {
        "Text" : " Same as \"run,\" except causes the VM to wait until debugger is attached ",
        "Line" : 326,
        "CharPositionInLine" : 82
      },
      "11" : {
        "Text" : " See http://nlp.stanford.edu/javanlp/did_you_know/eclipse_debug.html for example ",
        "Line" : 327,
        "CharPositionInLine" : 91
      },
      "12" : {
        "Text" : " Following args should cause this to freeze and wait for debug attach ",
        "Line" : 331,
        "CharPositionInLine" : 84
      },
      "13" : {
        "Text" : " I wrote this for a side project, so if you one day see it in a\n       build file of mine, you can't sue me for taking it from\n       Stanford. -jab ",
        "Line" : 351,
        "CharPositionInLine" : 26
      },
      "14" : {
        "Text" : " This macro builds a .war for a jsp, configured by several\n       attributes which say which .jar file to use as a base library,\n       which other libraries are needed, which data files to grab,\n       etc.  In order to verify that the .jsp will work, it\n       precompiles it before building the .war. ",
        "Line" : 356,
        "CharPositionInLine" : 52
      },
      "15" : {
        "Text" : " where to find the .jsp files ",
        "Line" : 358,
        "CharPositionInLine" : 76
      },
      "16" : {
        "Text" : " name of the .war to produce ",
        "Line" : 359,
        "CharPositionInLine" : 75
      },
      "17" : {
        "Text" : " probably javanlp-core.jar ",
        "Line" : 360,
        "CharPositionInLine" : 73
      },
      "18" : {
        "Text" : " libs to include ",
        "Line" : 361,
        "CharPositionInLine" : 63
      },
      "19" : {
        "Text" : " data files to include ",
        "Line" : 362,
        "CharPositionInLine" : 69
      },
      "20" : {
        "Text" : " This tool turns .jsp into .java ",
        "Line" : 365,
        "CharPositionInLine" : 47
      },
      "21" : {
        "Text" : " First, compile the .jsp into .java ",
        "Line" : 373,
        "CharPositionInLine" : 50
      },
      "22" : {
        "Text" : " Then compile the .java into .class ",
        "Line" : 383,
        "CharPositionInLine" : 50
      },
      "23" : {
        "Text" : " Now, build a .war out of the compiled java and all of the\n           specified libraries. ",
        "Line" : 399,
        "CharPositionInLine" : 36
      },
      "24" : {
        "Text" : " This is built from a java servlet, not a jsp. ",
        "Line" : 515,
        "CharPositionInLine" : 59
      },
      "25" : {
        "Text" : " The class needed for the results page will already be in\n         javanlp-core.jar ",
        "Line" : 517,
        "CharPositionInLine" : 30
      },
      "26" : {
        "Text" : " This is built from a java servlet, not a jsp. ",
        "Line" : 545,
        "CharPositionInLine" : 59
      },
      "27" : {
        "Text" : " The class needed for the results page will already be in\n         javanlp-core.jar ",
        "Line" : 547,
        "CharPositionInLine" : 30
      },
      "28" : {
        "Text" : " note for John: c:/Users/John Bauer/nlp/stanford-releases ",
        "Line" : 560,
        "CharPositionInLine" : 72
      },
      "CommentCount" : 29
    },
    "doc/classify/Makefile" : {
      "ObjectId" : "71c190b17193dadec4321631f884099173a1db25",
      "LastModified" : "2013-06-27T21:44:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This is a rudimentary Makefile for rebuilding the classifier.\n\n# We actually use ant (q.v.) or a Java IDE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/classify/build.xml" : {
      "ObjectId" : "4057f23d7e16209bd112ba23c9fe6546dcf4d1e8",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for JavaNLP ",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : " Before using this, unjar the sources' jar file into the src/ directory! ",
        "Line" : 3,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 22,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 51,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "8" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 80,
        "CharPositionInLine" : 80
      },
      "10" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 94,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 113,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : " Copy application resources ",
        "Line" : 116,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 126,
        "CharPositionInLine" : 80
      },
      "16" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 153,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 157,
        "CharPositionInLine" : 50
      },
      "19" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 172,
        "CharPositionInLine" : 80
      },
      "20" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : " Create build directories as needed ",
        "Line" : 187,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 22
    },
    "doc/corenlp/Makefile" : {
      "ObjectId" : "2c23e8eb85428ae21b33726cfd1f7725b2d7f41b",
      "LastModified" : "2013-06-27T21:44:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This is a rudimentary Makefile for rebuilding Stanford CoreNLP.\n\n# We actually use ant (q.v.) or a Java IDE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Builds the classes' jar file\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Before making, unjar the source jar file in the 'src' directory\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "doc/corenlp/build.xml" : {
      "ObjectId" : "fe50ea40b7f71414a6a0924e42fd1677064f9c77",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for Stanford CoreNLP ",
        "Line" : 1,
        "CharPositionInLine" : 53
      },
      "1" : {
        "Text" : " Before using this, unjar the sources' jar file into the src/ directory! ",
        "Line" : 3,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 22,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 51,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "8" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 80,
        "CharPositionInLine" : 80
      },
      "10" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 94,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 113,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : " Copy application resources ",
        "Line" : 116,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 126,
        "CharPositionInLine" : 80
      },
      "16" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 153,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 157,
        "CharPositionInLine" : 50
      },
      "19" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 172,
        "CharPositionInLine" : 80
      },
      "20" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : " Create build directories as needed ",
        "Line" : 187,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 22
    },
    "doc/lexparser/Makefile" : {
      "ObjectId" : "dd547ffe6be1e87244958c5ae7a8a926bccf757e",
      "LastModified" : "2013-06-27T21:44:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This is a rudimentary Makefile for rebuilding the parser.\n\n# We actually use ant (q.v.) or a Java IDE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/lexparser/build.xml" : {
      "ObjectId" : "d02aa642e14d26779cc3dac884167dcf83196279",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for JavaNLP ",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 20,
        "CharPositionInLine" : 80
      },
      "3" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 49,
        "CharPositionInLine" : 80
      },
      "5" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 63,
        "CharPositionInLine" : 80
      },
      "7" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 78,
        "CharPositionInLine" : 80
      },
      "9" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 92,
        "CharPositionInLine" : 47
      },
      "11" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 111,
        "CharPositionInLine" : 45
      },
      "12" : {
        "Text" : " Copy application resources ",
        "Line" : 114,
        "CharPositionInLine" : 40
      },
      "13" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 124,
        "CharPositionInLine" : 80
      },
      "15" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 151,
        "CharPositionInLine" : 63
      },
      "17" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 155,
        "CharPositionInLine" : 50
      },
      "18" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 170,
        "CharPositionInLine" : 80
      },
      "19" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : " Create build directories as needed ",
        "Line" : 185,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 21
    },
    "doc/lexparser/pom.xml" : {
      "ObjectId" : "adc2d2c2caab30290be3b6a39abfc9daf6cb0a3f",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "doc/ner/Makefile" : {
      "ObjectId" : "2f8d594980c94977aa30c9abf7f60e61b392c5bd",
      "LastModified" : "2013-06-27T21:44:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This is a rudimentary Makefile for rebuilding the CRF NER distribution.\n\n# We actually use ant (q.v.) or a Java IDE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/ner/build.xml" : {
      "ObjectId" : "a45bc1733ecdec5b398f19bb98438abb7b4af4a5",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for JavaNLP ",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : " Before using this, unjar the sources' jar file into the src/ directory! ",
        "Line" : 3,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 22,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 51,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "8" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 80,
        "CharPositionInLine" : 80
      },
      "10" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 94,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 113,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : " Copy application resources ",
        "Line" : 116,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 126,
        "CharPositionInLine" : 80
      },
      "16" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 153,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 157,
        "CharPositionInLine" : 50
      },
      "19" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 172,
        "CharPositionInLine" : 80
      },
      "20" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : " Create build directories as needed ",
        "Line" : 187,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 22
    },
    "doc/openie/build.xml" : {
      "ObjectId" : "9e049733a9cea9d0a83599fd7745c1aa934e07a8",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for JavaNLP ",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : " Before using this, unjar the sources' jar file into the src/ directory! ",
        "Line" : 3,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 22,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 51,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "8" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 80,
        "CharPositionInLine" : 80
      },
      "10" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 94,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 113,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : " Copy application resources ",
        "Line" : 116,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : " ==================== Jar Target ================================== ",
        "Line" : 126,
        "CharPositionInLine" : 76
      },
      "16" : {
        "Text" : "\n  The \"jar\" target recreates the jar file, which you may want to do if\n  you take apart the source jar and change something.\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 145,
        "CharPositionInLine" : 80
      },
      "18" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 172,
        "CharPositionInLine" : 63
      },
      "20" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 176,
        "CharPositionInLine" : 50
      },
      "21" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 191,
        "CharPositionInLine" : 80
      },
      "22" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : " Create build directories as needed ",
        "Line" : 206,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 24
    },
    "doc/segmenter/build.xml" : {
      "ObjectId" : "4057f23d7e16209bd112ba23c9fe6546dcf4d1e8",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for JavaNLP ",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : " Before using this, unjar the sources' jar file into the src/ directory! ",
        "Line" : 3,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 22,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 51,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "8" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 80,
        "CharPositionInLine" : 80
      },
      "10" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 94,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 113,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : " Copy application resources ",
        "Line" : 116,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 126,
        "CharPositionInLine" : 80
      },
      "16" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 153,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 157,
        "CharPositionInLine" : 50
      },
      "19" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 172,
        "CharPositionInLine" : 80
      },
      "20" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : " Create build directories as needed ",
        "Line" : 187,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 22
    },
    "doc/tagger/build.xml" : {
      "ObjectId" : "7ac4873546357e3eb88614ac470ebeb169639934",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for JavaNLP ",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : " Before using this, unjar the sources' jar file into the src/ directory! ",
        "Line" : 3,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 22,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 51,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "8" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 80,
        "CharPositionInLine" : 80
      },
      "10" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 94,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 107,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : " Copy application resources ",
        "Line" : 110,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : " ==================== Jar Target ================================== ",
        "Line" : 120,
        "CharPositionInLine" : 76
      },
      "16" : {
        "Text" : "\n  The \"jar\" target recreates the jar file, which you may want to do if\n  you take apart the source jar and change something.\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 139,
        "CharPositionInLine" : 80
      },
      "18" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 166,
        "CharPositionInLine" : 63
      },
      "20" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 170,
        "CharPositionInLine" : 50
      },
      "21" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 181,
        "CharPositionInLine" : 80
      },
      "22" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : " Create build directories as needed ",
        "Line" : 196,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 24
    },
    "doc/tregex/Makefile" : {
      "ObjectId" : "0ddf2f544649a2f2de71012b59de4ec535015484",
      "LastModified" : "2013-06-27T21:44:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This is a rudimentary Makefile for rebuilding the tregex distribution.\n\n# We actually use ant (q.v.) or a Java IDE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/tregex/build.xml" : {
      "ObjectId" : "a45bc1733ecdec5b398f19bb98438abb7b4af4a5",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " build.xml file for ant for JavaNLP ",
        "Line" : 1,
        "CharPositionInLine" : 44
      },
      "1" : {
        "Text" : " Before using this, unjar the sources' jar file into the src/ directory! ",
        "Line" : 3,
        "CharPositionInLine" : 81
      },
      "2" : {
        "Text" : " A \"project\" describes a set of targets that may be requested\n     when Ant is executed.  The \"default\" attribute defines the\n     target which is executed if no specific target is requested,\n     and the \"basedir\" attribute defines the current working directory\n     from which Ant executes the requested task.  This is normally\n     set to the current working directory.\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "  ==================== Compilation Control Options ==================== ",
        "Line" : 22,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : "\n\n  These properties control option settings on the Javac compiler when it\n  is invoked using the <javac> task.\n\n  compile.debug        Should compilation include the debug option?\n\n  compile.deprecation  Should compilation include the deprecation option?\n\n  compile.optimize     Should compilation include the optimize option?\n\n  compile.source       Source version compatibility\n\n  compile.target       Target class version compatibility\n\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : " ==================== All Target ====================================== ",
        "Line" : 51,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : "\n\n  The \"all\" target is a shortcut for running the \"clean\" target followed\n  by the \"compile\" target, to force a complete recompile.\n\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : " ==================== Clean Target ==================================== ",
        "Line" : 65,
        "CharPositionInLine" : 80
      },
      "8" : {
        "Text" : "\n\n  The \"clean\" target deletes any previous \"build\" and \"dist\" directory,\n  so that you can be ensured the application can be built from scratch.\n\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : " ==================== Compile Target ================================== ",
        "Line" : 80,
        "CharPositionInLine" : 80
      },
      "10" : {
        "Text" : "\n\n  The \"compile\" target transforms source files (from your \"src\" directory)\n  into object files in the appropriate location in the build directory.\n  This example assumes that you will be including your classes in an\n  unpacked directory hierarchy under \"/WEB-INF/classes\".\n\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : " Compile Java classes as necessary ",
        "Line" : 94,
        "CharPositionInLine" : 47
      },
      "12" : {
        "Text" : " <compilerarg value=\"-Xlint\"/> ",
        "Line" : 113,
        "CharPositionInLine" : 45
      },
      "13" : {
        "Text" : " Copy application resources ",
        "Line" : 116,
        "CharPositionInLine" : 40
      },
      "14" : {
        "Text" : "\n    <copy  todir=\"${build.home}/WEB-INF/classes\">\n      <fileset dir=\"${src.home}\" excludes=\"**/*.java\"/>\n    </copy>\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : " ==================== Javadoc Target ================================== ",
        "Line" : 126,
        "CharPositionInLine" : 80
      },
      "16" : {
        "Text" : "\n\n  The \"javadoc\" target creates Javadoc API documentation for the Java\n  classes included in your application.  Normally, this is only required\n  when preparing a distribution release, but is available as a separate\n  target in case the developer wants to create Javadocs independently.\n\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : " Allow @generated, @modifiable and @ordered tags ",
        "Line" : 153,
        "CharPositionInLine" : 63
      },
      "18" : {
        "Text" : " Depends on lib and classes folders ",
        "Line" : 157,
        "CharPositionInLine" : 50
      },
      "19" : {
        "Text" : " ==================== Prepare Target ================================== ",
        "Line" : 172,
        "CharPositionInLine" : 80
      },
      "20" : {
        "Text" : "\n\n  The \"prepare\" target is used to create the \"build\" destination directory,\n  and copy the static contents of your web application to it.  If you need\n  to copy static files from external dependencies, you can customize the\n  contents of this task.\n\n  Normally, this task is executed indirectly when needed.\n\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : " Create build directories as needed ",
        "Line" : 187,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 22
    },
    "examples/sample-maven-project/pom.xml" : {
      "ObjectId" : "025de00e21f8f5e0b38cea5c2d45e68d4ce1abd1",
      "LastModified" : "2018-10-18T22:32:49Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "pom.xml" : {
      "ObjectId" : "09332942dc125cb4f0b67c2456aa51c5e5ec44a0",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "scripts/chinese-segmenter/Makefile" : {
      "ObjectId" : "25493ac7fb2ddfddfeb92679e669309dc9e1a38f",
      "LastModified" : "2018-10-18T22:32:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Same as for chris5, currently\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Special prerelease segmentation data from Bolt.  Do not release publicly!\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# train and test on Sighan 2006 data. No serialized model will be produced\n\n# Revision: 20267..\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# train & test\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# eval\n",
        "Line" : 40,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# train on all CTB6, with all external lexicons, without training lexicon\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# train on all CTB6, with all external lexicons, without training lexicon\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# train on all CTB7, with all external lexicons, without training lexicon\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# train on train CTB7, with all external lexicons, without training lexicon\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# train on all CTB7, with all external lexicons, without training lexicon\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "scripts/ner/Makefile" : {
      "ObjectId" : "4a2da69aba7c65a123a2f29bdfec7286d0b64888",
      "LastModified" : "2019-01-18T06:50:41Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# We are No longer building/distributing deWAC model. The data for distributional similarity classes wasn't clean and can't be recovered.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# currently we exclude enp_DE.sbb.io, as the data has too many issues, but we could work to include it....\n\n# ,/u/nlp/data/german/ner/2016/Europeana-Newspapers-data/ner-corpora/enp_DE.sbb.bio/enp_DE.sbb.io\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We are No longer building/distributing deWAC model. The data for distributional similarity classes wasn't clean and can't be recovered.\n\n# german.dewac_175m_600.crf.ser.gz:\n\n#\tjava -mx10g edu.stanford.nlp.ie.crf.CRFClassifier -prop german.dewac_175m_600.prop > german.dewac_175m_600.out 2>&1\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "scripts/nndep/Makefile" : {
      "ObjectId" : "9ba428eb6a33bb33eba1f3a789da9960b403d621",
      "LastModified" : "2018-10-18T22:32:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/pos-tagger/Makefile" : {
      "ObjectId" : "da5d3dc2b77f6ef9dc6c0cf5bdcc4e27ae0d6111",
      "LastModified" : "2018-10-18T22:32:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# TODO: is there some way to make all of the targets use the same command?\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we release an arabic model trained on everything, with a\n\n# corresponding model on train only for testing purposes\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tjava -mx6g edu.stanford.nlp.tagger.maxent.MaxentTagger -model $@ -testFile $(SPANISH_TEST) -verboseResults false >> $@.out 2>&1\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "scripts/srparser/Makefile" : {
      "ObjectId" : "c82207b0358c097d4df1d8fa4f282eb101f68125",
      "LastModified" : "2018-10-18T22:32:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "scripts/truecase/Makefile" : {
      "ObjectId" : "7d3b575cad3036de56ab8a78d731bbfd1bc7a588",
      "LastModified" : "2018-10-18T22:32:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/edu/stanford/nlp/ie/pascal/Makefile" : {
      "ObjectId" : "f9ffc387f67fe06ca957b056c82546ff2888bc47",
      "LastModified" : "2018-10-18T22:32:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 12,
    "ANT" : 9,
    "MAVEN" : 3
  },
  "ElapsedTime" : 8948
}