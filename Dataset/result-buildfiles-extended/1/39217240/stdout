{
  "Repository" : "39217240",
  "Revision" : "HEAD",
  "ObjectId" : "f0e078fa2c54cb542169c7f08f069339623e9c40",
  "CommitTime" : "2019-03-28T21:29:39Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "51ee04907d92e706c808aaf1690e2b20e92e1a54",
      "LastModified" : "2019-03-17T17:23:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  top-level cmake file for deltafs\n\n# 16-Jun-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# deltafs is ... XXX\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# configuration/build:\n\n#   - choose a build directory and \"cd\" to it\n\n#   - cmake [flags] directory\n\n#   - make\n\n#\n\n#  where directory is the top-level source directory where this file resides.\n\n#\n\n#  general cmake flags:\n\n#    -DCMAKE_INSTALL_PREFIX=/usr/local     -- the prefix for installing\n\n#    -DCMAKE_BUILD_TYPE=type               -- type can be DEBUG, RELEASE, ...\n\n#    -DCMAKE_PREFIX_PATH=/dir              -- external packages\n\n#    -DBUILD_SHARED_LIBS=OFF               -- turn ON for shared libs\n\n#    -DBUILD_TESTS=OFF                     -- turn ON to build tests\n\n#\n\n#     note that CMAKE_PREFIX_PATH can be a list of directories:\n\n#      -DCMAKE_PREFIX_PATH='/dir1;/dir2;/dir3'\n\n#\n\n# general PDLFS config compile time options flags:\n\n#   -DPDLFS_GFLAGS=ON                      -- use gflags for arg parsing\n\n#     - GFLAGS_INCLUDE_DIR: optional hint for finding gflags/gflags.h\n\n#     - GFLAGS_LIBRARY_DIR: optional hint for finding gflags lib\n\n#   -DPDLFS_GLOG=ON                        -- use glog for logging\n\n#   -DPDLFS_MARGO_RPC=ON                   -- compile in margo rpc code\n\n#   -DPDLFS_MERCURY_RPC=ON                 -- compile in mercury rpc code\n\n#   -DPDLFS_RADOS=ON                       -- compile in RADOS env\n\n#     - RADOS_INCLUDE_DIR: optional hint for finding rado/librados.h\n\n#     - RADOS_LIBRARY_DIR: optional hint for finding rados lib\n\n#   -DPDLFS_SNAPPY=ON                      -- compile in snappy compression\n\n#     - SNAPPY_INCLUDE_DIR: optional hint for finding snappy.h\n\n#     - SNAPPY_LIBRARY_DIR: optional hint for finding snappy lib\n\n#   -DPDLFS_VERBOSE=1                      -- set max log verbose level\n\n#\n\n# DELTAFS specific compile time options flags:\n\n#   -DDELTAFS_CXX_STANDARD=11              -- CXX stardard to request\n\n#   -DDELTAFS_CXX_STANDARD_REQUIRED=OFF    -- if CXX stardard must be met\n\n#   -DDELTAFS_BENCHMARKS=ON                -- build our MPI-based benchmarks\n\n#   -DDELTAFS_COMMON_INTREE=OFF            -- in-tree common lib (for devel)\n\n#   -DDELTAFS_MPI=ON                       -- enable MPI in deltafs\n\n#\n\n#    If you want to force a particular MPI compiler other than what we\n\n#    autodetect (e.g. if you want to compile regular stuff with GNU and\n\n#    parallel stuff with Intel), you can set your favorite\n\n#    MPI_<lang>_COMPILER explicitly).\n\n#\n\n#\n\n# note: package config files for external packages must be preinstalled in\n\n#       CMAKE_INSTALL_PATH or on CMAKE_PREFIX_PATH, except as noted.\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# note: cmake 2.8.12 is considered stale, and will be deprecated.\n\n# yet cmake 2.8.12.2 is shipped by ubuntu14.04. ubuntu14.04 won't be end of\n\n# life until Apr 2019, though cmake 3 was later backported to ubuntu14.04\n\n# as cmake3 (use ``sudo apt-get install cmake3'' to install).\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add pdlfs-common cmake module directory to the path\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# we compile everything with -DDELTAFS by attaching it as a property of\n\n# the common lib.  we also set the common library's name to deltafs-common\n\n# (since we may add deltafs-specific code to it)  we request (but don't\n\n# require) C++ 11 standard for possible performance improvements due it\n\n# its move semantics.\n\n#\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# note: CMAKE_CXX_STANDARD is not defined until cmake 3.1, and will be\n\n# ignored by cmake 3.0 and before.\n\n#\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# pull in pdlfs handling of generic cmake config\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# handle all the common PDLFS options using cmake/pdlfs-options.cmake\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# user hooks to configure deltafs\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# external packages\n\n#\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# XXX: avoid issues when MPI_CXX_COMPILE_FLAGS contains leading spaces\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#\n\n# we build the in-tree pdlfs-common if DELTAFS_COMMON_INTREE is set,\n\n# otherwise we look for one already built in our install or prefix path.\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# XXXCDC\n",
        "Line" : 152,
        "CharPositionInLine" : 42
      },
      "CommentCount" : 15
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "97491e6850302ca5637f206ee29a0de997c932fb",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  cmake file for top benchmarks directory\n\n# 30-Oct-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# first build a small static helper library \"io_client\" with common code in it.\n\n# this library will have a dependency on MPI (causes all io_client users to\n\n# also get MPI).\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# plug in MPI\n\n# mpich on ub14 gives a leading space that we need to trim off\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# XXX: have to do this one dir at a time otherwise\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# plug in threads\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# now build and install the benchmarks binaries\n\n#\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# large_dir\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# vpic_io\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "external/pdlfs-common/CMakeLists.txt" : {
      "ObjectId" : "a0b23436f65c6784190cd9f9d571366cabe54b05",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  top-level cmake file for the pdlfs-common library\n\n# 26-May-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# pdlfs-common is a lower-level utility library that is shared among\n\n# pdlfs projects.  it can be compiled stand-alone or as a git subrepo\n\n# within another git repository by adding \"src\" as a subdirectory.\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# configuration/build:\n\n#   - choose a build directory and \"cd\" to it\n\n#   - cmake [flags] directory\n\n#   - make\n\n#\n\n#  where directory is the top-level source directory where this file resides.\n\n#\n\n#  general cmake flags:\n\n#    -DCMAKE_INSTALL_PREFIX=/usr/local     -- the prefix for installing\n\n#    -DCMAKE_BUILD_TYPE=type               -- type can be DEBUG, RELEASE, ...\n\n#    -DCMAKE_PREFIX_PATH=/dir              -- external packages\n\n#    -DBUILD_SHARED_LIBS=OFF               -- turn ON for shared libs\n\n#\n\n#     note that CMAKE_PREFIX_PATH can be a list of directories:\n\n#      -DCMAKE_PREFIX_PATH='/dir1;/dir2;/dir3'\n\n#\n\n# pdlfs-common config flags:\n\n#   -DPDLFS_PLATFORM=POSIX                 -- platform (currently only posix)\n\n#   -DPDLFS_OS=Linux                       -- \"uname -s\" for target\n\n#   -DPDLFS_COMMON_LIBNAME=pdlfs-common    -- name for binary lib files\n\n#   -DPDLFS_COMMON_DEFINES='D1;D2'         -- add -DD1/-DD2 to compile options\n\n#\n\n# pdlfs-common config compile time options flags:\n\n#   -DPDLFS_GFLAGS=ON                      -- use gflags for arg parsing\n\n#     - GFLAGS_INCLUDE_DIR: optional hint for finding gflags/gflags.h\n\n#     - GFLAGS_LIBRARY_DIR: optional hint for finding gflags lib\n\n#   -DPDLFS_GLOG=ON                        -- use glog for logging\n\n#   -DPDLFS_MARGO_RPC=ON                   -- compile in margo rpc code\n\n#   -DPDLFS_MERCURY_RPC=ON                 -- compile in mercury rpc code\n\n#   -DPDLFS_RADOS=ON                       -- compile in RADOS env\n\n#     - RADOS_INCLUDE_DIR: optional hint for finding rado/librados.h\n\n#     - RADOS_LIBRARY_DIR: optional hint for finding rados lib\n\n#   -DPDLFS_SNAPPY=ON                      -- compile in snappy compression\n\n#     - SNAPPY_INCLUDE_DIR: optional hint for finding snappy.h\n\n#     - SNAPPY_LIBRARY_DIR: optional hint for finding snappy lib\n\n#\n\n#\n\n# note: package config files for external packages must be preinstalled in\n\n#       CMAKE_INSTALL_PATH or on CMAKE_PREFIX_PATH, except as noted.\n\n#\n\n# pdlfs-common extras:\n\n#   -DPDLFS_EXAMPLES=ON                    -- build example programs\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# PDLFS_COMMON_LIBNAME allows clients to do custom compile-time configuration\n\n# of the library and install the customized version under an alternate name\n\n# (e.g. lib/libdeltafs-common.a instead of lib/pdlfs-common.a).  note that\n\n# the include files are still shared under include/pdlfs-common.\n\n#\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# uses target_include_directories from 2.8\n",
        "Line" : 75,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# add our cmake module directory to the path\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# turn on -std=c++11 if possible\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# pull in pdlfs handling of generic cmake config\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# handle all the common PDLFS options using cmake/pdlfs-options.cmake\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# local options\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "external/pdlfs-common/cmake/FindRADOS.cmake" : {
      "ObjectId" : "1cadc71d7a229b8fdd3c914f936ae4055bef414d",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# find RADOS library and set up an imported target for it since\n\n# RADOS don't provide this for us...\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# \n\n# inputs:\n\n#   - RADOS_INCLUDE_DIR: hint for finding rado/librados.h\n\n#   - RADOS_LIBRARY_DIR: hint for finding rados lib\n\n#\n\n# output:\n\n#   - \"rados\" library target \n\n#   - RADOS_FOUND  (set if found)\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/pdlfs-common/cmake/FindSnappy.cmake" : {
      "ObjectId" : "8b2ea688261ed9865fd99666b38c3887df362b68",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# find snappy library and set up an imported target for it since\n\n# snappy doesn't provide this for us...\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# \n\n# inputs:\n\n#   - SNAPPY_INCLUDE_DIR: hint for finding snappy.h\n\n#   - SNAPPY_LIBRARY_DIR: hint for finding snappy lib\n\n#\n\n# output:\n\n#   - \"snappy\" library target \n\n#   - SNAPPY_FOUND  (set if found)\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/pdlfs-common/cmake/Findgflags.cmake" : {
      "ObjectId" : "228de87aaec6e19fb6c3a896e451967a27c4e19b",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# find gflags library and setup an imported target for it.\n\n# this is a bit complicated because old installs of gflags\n\n# do not provide cmake config files for gflags, but new of\n\n# gflags versions do (and provide extra targets like \"gflags_shared\"\n\n# that we normally would not provide).\n\n#\n\n# since cmake looks for Find*.cmake MODULE packages first,\n\n# we may hit the case where Findgflags.cmake gets included\n\n# on a system where a gflags CONFIG-style package is provided.\n\n# if you have a package like glog that uses the CONFIG-style\n\n# cmake package and this MODULE package gets found first, then\n\n# you get undefined link errors when linking the shared lib\n\n# (e.g. lib \"-lgflags_shared\" not found).\n\n#\n\n# what to do?   we'll have this MODULE config file check\n\n# for a CONFIG-style cmake package first, before doing anything\n\n# else.  if we detect a CONFIG-style cmake package, we always\n\n# yield control to that.   hopefully that solves most problem\n\n# cases...\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# inputs (for the MODULE config):\n\n#   - GFLAGS_INCLUDE_DIR: hint for finding gflags/gflags.h\n\n#   - GFLAGS_LIBRARY_DIR: hint for finding gflags lib\n\n#\n\n# output:\n\n#   - \"gflags\" library target\n\n#   - gflags_FOUND / GFLAGS_FOUND  (set if found)\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# probe for CONFIG-style module first\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# no CONFIG-style module present... do MODULE stuff instead...\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "external/pdlfs-common/cmake/cmake-options.cmake" : {
      "ObjectId" : "c1755683c4c15669334fdbd4532ae2a45c7275bb",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# cmake-options.cmake  handle generic pdlfs/cmake config\n\n# 27-Oct-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# generic cmake setup and config we use for pdlfs.  note we assume \n\n# that pdlfs-common/cmake is on CMAKE_MODULE_PATH so we can include\n\n# files from that directory (e.g. xpkg-import).\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  general cmake flags:\n\n#    -DCMAKE_INSTALL_PREFIX=/usr/local     -- the prefix for installing\n\n#    -DCMAKE_BUILD_TYPE=type               -- type can be DEBUG, RELEASE, ...\n\n#    -DCMAKE_PREFIX_PATH=/dir              -- external packages\n\n#    -DBUILD_SHARED_LIBS=OFF               -- turn ON for shared libs\n\n#    -DBUILD_TESTS=OFF                     -- turn ON to build unit tests\n\n#\n\n#     note that CMAKE_PREFIX_PATH can be a list of directories:\n\n#      -DCMAKE_PREFIX_PATH='/dir1;/dir2;/dir3'\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# link shared lib with full rpath. on some modern platforms, the newer\n\n# runpath will be used instead of rpath.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# quiet CMP0042 warning  (not needed if cmake >=3.0)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# setup cache variables for ccmake\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# sanitizer config (only used in debug builds)\n\n#\n\n### set (as_flags \"-fsanitize=address,leak -O1 -fno-omit-frame-pointer\")\n\n#\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# use O2 (not O3) when it comes to either Intel or Cray compilers. O2 is\n\n# the default optimization level for these compilers and are often\n\n# equivalent as O3 in common compilers such as GNU and Clang.\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "external/pdlfs-common/cmake/pdlfs-options.cmake" : {
      "ObjectId" : "28bacb99757e573e386a84a03dfb19eef683317a",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# pdlfs-options.cmake  handle standard pdlfs-common options\n\n# 27-Oct-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# this file handles the standard PDLFS options (i.e. setting up the \n\n# cache variables, creating library targets, etc.).   note we assume \n\n# that pdlfs-common/cmake is on CMAKE_MODULE_PATH so we can include\n\n# files from that directory (e.g. xpkg-import).\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# pdlfs-common config flags:\n\n#   -DPDLFS_PLATFORM=POSIX                 -- platform (currently only posix)\n\n#   -DPDLFS_TARGET_OS=Linux                -- target os name (cross compile)\n\n#   -DPDLFS_TARGET_OS_VERSION=4.4.0        -- target os vers. (cross compile)\n\n#   -DPDLFS_HOST_OS=Linux                  -- \"uname -s\" on host os\n\n#   -DPDLFS_HOST_OS_VERSION=4.4.0          -- \"uname -r\" on host os\n\n#   -DPDLFS_COMMON_LIBNAME=pdlfs-common    -- name for binary lib files\n\n#   -DPDLFS_COMMON_DEFINES='D1;D2'         -- add -DD1/-DD2 to compile options\n\n#\n\n# pdlfs-common config compile time options flags:\n\n#   -DPDLFS_GFLAGS=ON                      -- use gflags for arg parsing\n\n#     - GFLAGS_INCLUDE_DIR: optional hint for finding gflags/gflags.h\n\n#     - GFLAGS_LIBRARY_DIR: optional hint for finding gflags lib\n\n#   -DPDLFS_GLOG=ON                        -- use glog for logging\n\n#   -DPDLFS_MARGO_RPC=ON                   -- compile in margo rpc code\n\n#   -DPDLFS_MERCURY_RPC=ON                 -- compile in mercury rpc code\n\n#   -DPDLFS_RADOS=ON                       -- compile in RADOS env\n\n#     - RADOS_INCLUDE_DIR: optional hint for finding rado/librados.h\n\n#     - RADOS_LIBRARY_DIR: optional hint for finding rados lib\n\n#   -DPDLFS_SNAPPY=ON                      -- compile in snappy compression\n\n#     - SNAPPY_INCLUDE_DIR: optional hint for finding snappy.h\n\n#     - SNAPPY_LIBRARY_DIR: optional hint for finding snappy lib\n\n#   -DPDLFS_VERBOSE=1                      -- set max log verbose level\n\n#\n\n# output variables:\n\n#    PDLFS_COMPONENT_CFG                   -- list of requested components\n\n#\n\n# note: package config files for external packages must be preinstalled in \n\n#       CMAKE_INSTALL_PATH or on CMAKE_PREFIX_PATH, except as noted.\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# tests... we EXCLUDE_FROM_ALL the tests and add a custom target\n\n# \"pdl-build-tests\" to build tests (we prefix with \"pdl-\" since\n\n# custom targets must be globally unique).   if the top-level\n\n# CMakeLists.txt calls enable_testing (), then you can \"make pdl-build-tests\"\n\n# and then \"make test\" (or run ctest directly).\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# can only define it once\n",
        "Line" : 64,
        "CharPositionInLine" : 42
      },
      "6" : {
        "Text" : "#\n\n# PDLFS_COMMON_LIBNAME allows clients to do custom compile-time configuration\n\n# of the library and install the customized version under an alternate name\n\n# (e.g. lib/libdeltafs-common.a instead of lib/pdlfs-common.a).  note that\n\n# the include files are still shared under include/pdlfs-common.  This is\n\n# handled in pdlfs-common/src/CMakeLists.txt\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# setup cached variables with default values and documentation strings\n\n# for ccmake...\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ensure correct log verbose level\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# library naming variables...\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# handle third party package configuration\n\n#\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# now start pulling the parts in.  currently we set find_package to\n\n# REQUIRED (so cmake will fail if the package is missing).  we could\n\n# remove that and print a (more meaningful?) custom error with a\n\n# message FATAL_ERROR ...   we also set a ${PDLFS_COMPONENT_CFG}\n\n# variable list for users to use.\n\n#\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "external/pdlfs-common/cmake/xpkg-import.cmake" : {
      "ObjectId" : "ffb561b1692090e90292cc0c9ddbaabae96cd8b7",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# xpkg-import.cmake  cmake import for \"pkg-config\" based packages\n\n# 11-Aug-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# have PkgConfig use CMAKE_PREFIX_PATH for searching for pkg config files.\n\n# this is the default for cmake 3.1 and above, on some older versions\n\n# you can turn it on.   otherwise you'll have to manually set PKG_CONFIG_PATH\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# PkgConfig in newer versions of cmake (>= cmake 3.6) supports imported\n\n# targets, but older versions do not.  if we have 3.6 or better, use\n\n# the builtin imported target unless ${OLD_XPKGIMPORT} is defined.\n\n# otherwise use the Sam Thursfield code below...\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# can also set on cmdline -DOLD_XPKGIMPORT=1\n",
        "Line" : 35,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "#\n\n# xpkg_import_module(name args)\n\n#\n\n# create an imported target named \"name\" from a pkg-config module.\n\n# all remaining args are passed through to pkg_check_module().\n\n#\n\n# example:\n\n#    xpkg_import_module(glog::glog REQUIRED libglog>=3.0)\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# PkgConfig only adds PREFIX_PATH to PKG_CONFIG_PATH.\n\n# seems like it should add INSTALL_PREFIX too, so we do it here.\n\n# (this doesn't impact the parent variable scope.)\n",
        "Line" : 52,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# generate a namespace to put results of pkg_check_modules in.\n\n# newer versions of PkgConfig don't like this to have \":\" in it,\n\n# so filter them out...\n",
        "Line" : 59,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "#\n\n# BEGIN:\n\n# pkg-config stuff adapted from https://cmake.org/Bug/view.php?id=15804\n\n# by Sam Thursfield <sam.thursfield@codethink.co.uk>\n\n#\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#.rst:\n\n# PkgImportModule\n\n# ---------------\n\n#\n\n# CMake commands to create imported targets from pkg-config modules.\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#=========================================================================\n\n# Copyright 2016 Lautsprecher Teufel GmbH\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=========================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# ::\n\n#\n\n#     xpkg_import_module(<name> args)\n\n#\n\n# Creates an imported target named <name> from a pkg-config module. All\n\n# remaining arguments are passed through to pkg_check_module(). See the\n\n# documentation of the FindPkgConfig module for information.\n\n#\n\n# Example usage:\n\n#\n\n#   xpkg_import_module(Archive::Archive REQUIRED libarchive>=3.0)\n\n#   xpkg_import_module(Avahi::GObject REQUIRED avahi-gobject)\n\n#\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# PkgConfig only adds PREFIX_PATH to PKG_CONFIG_PATH.\n\n# seems like it should add INSTALL_PREFIX too, so we append\n\n# it here (doesn't impact parent scope).\n",
        "Line" : 119,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# generate a namespace to put results of pkg_check_modules in.\n\n# newer versions of PkgConfig don't like this to have \":\" in it,\n\n# so filter them out...\n",
        "Line" : 126,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "#\n\n# create imported target using info from pkg_check_modules\n\n#\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# We must pass in the absolute paths to the libraries, otherwise, when\n\n# the library is installed in a non-standard prefix the linker won't be\n\n# able to find the libraries. CMake doesn't provide a way for us to keep\n\n# track of the library search path for a specific target, so we have to\n\n# do it this way.\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# unix guess\n",
        "Line" : 161,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "#\n\n# XXXCDC\n\n# static libs do not contain their depends, so we need to fetch\n\n# them again for additional libs that are in ${staticlibraries}.\n\n# we do this by calling _xpkg_import_module_find_libraries() again.\n\n# libs found in the previous call should already be in the cache\n\n# due to earlier calls to find_library() so this should not slow\n\n# us down that much... (this call will update\n\n# ${libraries_full_paths})\n\n#\n",
        "Line" : 163,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# FIXME: we should really detect whether it's SHARED or STATIC,\n\n# instead of assuming SHARED. We can't just use UNKNOWN because\n\n# nothing can link against it then.\n",
        "Line" : 176,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "#\n\n# gen INTERFACE_LINK_LIBRARIES, it doesn't need the first entry on\n\n# the list since that is already in ${imported_location}\n\n#\n",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# remove item 0 from list\n",
        "Line" : 189,
        "CharPositionInLine" : 46
      },
      "21" : {
        "Text" : "#\n\n# convert list of lib names and dirs into list of library files using\n\n# find_library()\n\n#\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# find_library stores its result in the cache, so we must pass\n\n# a unique variable name for each library that we look for.\n",
        "Line" : 206,
        "CharPositionInLine" : 12
      },
      "23" : {
        "Text" : "# ::\n\n#\n\n#    xadd_object_library_dependencies(<name> <dep1> [<dep2> ...])\n\n#\n\n# This is a workaround for <http://public.kitware.com/Bug/view.php?id=14778>.\n\n# It should be possible to delete this function and use target_link_libraries()\n\n# as normal once that is fixed.\n\n#\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# pkg-config stuff adapted from https://cmake.org/Bug/view.php?id=15804\n\n# by Sam Thursfield <sam.thursfield@codethink.co.uk>\n\n# END\n\n#\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#\n\n# some of the packages we want to import come with either \"pkg-config\"\n\n# .pc files or with cmake config files, depending on how they were\n\n# installed.   for example, glog installed with \"apt-get install\" on\n\n# \"libgoogle-glog-dev\" puts in a \"libglog.pc\" while installing glog\n\n# from source via github installs a cmake config file for glog.\n\n#\n\n# this is complicated by the fact that the pkg-config .pc file names\n\n# the package \"libglog\" while the cmake config file from github defines\n\n# a library target \"glog::glog\" that you load with find_package(glog).\n\n#\n\n# we'd like to be able to use either mechanism to find glog, and we'd\n\n# like the resulting target name to match between the two mechanisms\n\n# (i.e. we just want to use \"glog::glog\" for both cases).\n\n#\n\n# to address this we add a wrapper function that trys both way.\n\n# we first use \"find_package()\" in hopes of picking up a cmake config.\n\n# if that fails, we fall back to \"xpkg_import_module()\"...\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n#     xdual_import(names)\n\n#\n\n# Where \"names\" is: target-name,find-package-name,xpkg-names\n\n#\n\n# names can be omitted (target-name will be used)\n\n#\n\n# Example usage:\n\n#\n\n#   xdual_import (foo REQUIRED)\n\n#   xdual_import (glog::glog,glog,libglog REQUIRED)\n\n#\n\n#\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# parse spec\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# try to find it both ways\n",
        "Line" : 313,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 29
    },
    "external/pdlfs-common/examples/CMakeLists.txt" : {
      "ObjectId" : "8b5f16f464b9091e0a0a078a4251e89ab7bbd155",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  cmake file for the pdlfs-common examples\n\n# 09-Nov-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# XXX: example example, just add_executable with a target link to pdlfs-common\n\n# add_executable (foo foo.c)\n\n# target_link_libraries (foo pdlfs-common)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/pdlfs-common/src/CMakeLists.txt" : {
      "ObjectId" : "f9f6fb849825dc817a1e8c23e87467a96f4c5773",
      "LastModified" : "2019-03-23T04:32:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  cmake file for src directory\n\n# 26-May-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# this file is either included from ../CMakeLists.txt or some other\n\n# file if we are being embedded within another project.\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# list of source files and tests\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# main directory sources and tests\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# leveldb directory sources and tests\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# mercury (note that margo uses the mercury rpc class)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# margo\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# rados directory and tests\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# configure/load in standard modules we plan to use and probe the enviroment\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# note: cmake 3.1 and newer define a Threads::Threads imported target\n\n# that we should switch too when we are ready to require 3.1 or better.\n\n# cmake 3.1 was released late 2014.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# for *-config.cmake\n\n# for build\n",
        "Line" : 94,
        "CharPositionInLine" : 52
      },
      "12" : {
        "Text" : "# for *-config.cmake\n\n# for build\n",
        "Line" : 99,
        "CharPositionInLine" : 52
      },
      "13" : {
        "Text" : "#\n\n# we allow the library binary to be installed and \"find_package\"'d\n\n# under an alternate name (though header files are still under pdlfs-common).\n\n# we set \"PDLFS_NAME\" to the name we are going to use.\n\n#\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# user specified name\n",
        "Line" : 131,
        "CharPositionInLine" : 52
      },
      "15" : {
        "Text" : "# default name\n",
        "Line" : 133,
        "CharPositionInLine" : 52
      },
      "16" : {
        "Text" : "# where to install files for \"find_package\"\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# library version set here (e.g. for shared libs).  we allow our container\n\n# to choose the version, or it can just take the default.\n\n#\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# provide reasonable defaults for platform/os\n\n#\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# upper case and edit PDLFS_OS to match the old build system uses\n\n# (since some of the code still expects it... XXX: cleanup later)\n\n#\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# XXX should switch MACOSX to DARWIN\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# XXX should switch SOLARIS to SUNOS\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# yuck, inherited it from leveldb\n",
        "Line" : 176,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "#\n\n# setup and configure pdlfs_config_expand.h.in and pdlfs_platform.h.in\n\n#\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# prepend the subdir name to files that live in subdirs (e.g. leveldb/)\n\n#\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# generate complete list of files and tests from the parts\n\n#\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# additional compiler flags to be applied for this directory\n\n# (must come before any add_library/add_executable calls)\n\n#\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# directory property\n",
        "Line" : 226,
        "CharPositionInLine" : 41
      },
      "28" : {
        "Text" : "#\n\n# create the library target (user can specify shared vs. static\n\n# using BUILD_SHARED_LIBS).   arrange for users of our lib to\n\n# get the correct -Is for our include directories.  (for building\n\n# we need a -I pointing to the build dir for the expanded *.h.in files)\n\n#\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# XXX: for mercury\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\n\n# here's the compiler/machine/os dependent stuff...\n\n#\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# XXX: leveldb build_detect_platform complains about gcc 4.4.3 memcmp\n\n# XXX: we duplicate the behavior, but assume that this isn't a problem\n\n# XXX: with newer compilers\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# we checked for \"-pthread\" earlier (before add_library).\n\n# \"-pthread\" should take care of all thread related options.\n\n# but if we don't have it, fall back to -D_REENTRANT\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# XXX: untested solaris, does it need \"-mt\"?\n\n# XXX: leveldb also added \"-lrt\" .. but is that really needed?\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\n\n# end of the compiler/machine/os dependent stuff!\n\n#\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\n\n# installation stuff (packaging and install commands)\n\n#\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# generate our config file for find_package()\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#\n\n# \"make install\" rules\n\n#\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n# tests: use \"pdl-build-tests\" custom target defined in pdlfs-options.cmake\n\n#\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# use basename as test name\n",
        "Line" : 333,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# mercury test also directly uses mercury API... add that to test target\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "external/pdlfs-common/tools/CMakeLists.txt" : {
      "ObjectId" : "62ecf39f5a31ead1b371e64947b108db153e35b4",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  cmake file for the pdlfs-common tools\n\n# 10-Nov-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# pdlfs_db_bench: the level db benchmarking program\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "4f2fa5c26080890401a8092bffa7e958dd247bb7",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  top-level cmake file for deltafs/src\n\n# 22-Jun-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# set some general deltafs compile options (this is a directory property)\n\n#\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cmds/CMakeLists.txt" : {
      "ObjectId" : "0b9d8c4bb1c59c2a8dc455cd0bde229fca7fce4b",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  cmake file for cmds directory\n\n# 02-Sep-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# \"make install\" rules\n\n#\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/libdeltafs/CMakeLists.txt" : {
      "ObjectId" : "d9b1c12fe435be5cfda78bb43999185ccb8fbce3",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  cmake file for libdeltafs directory\n\n# 16-Jun-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# this file is either included from ../CMakeLists.txt or some other\n\n# file if we are being embedded within another project.\n\n#\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# list of source files and tests\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# main directory sources and tests\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# configure/load in standard modules we plan to use\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# note: cmake 3.1 and newer define a Threads::Threads imported target\n\n# that we should switch to when we are ready to require 3.1 or better.\n\n# cmake 3.1 was released late 2014.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# common lib is always required\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# include MPI if requested\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MPI isn't a normal imported target, so sadly it requires special\n\n# handling...  see below.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# where the cmake package files get installed (for find_package)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# library version set here (e.g. for generating shared libs if we want\n\n#\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# setup and configure deltafs_config.h.in\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# generate complete list of files and tests from the parts\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# create the library target (user can specify shared vs. static\n\n# using BUILD_SHARED_LIBS).   arrange for users of our lib to\n\n# get the correct -Is for our include directories.  (for building\n\n# we need a -I pointing to the build dir for pdlfs_config_expand.h)\n\n#\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# special handling for MPI, where the config comes in via MPI_<lang>_ vars.\n\n# we only add to the build interface so that we don't put hardcoded paths\n\n# in the config files.\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# XXX: have to do this one dir at a time otherwise, otherwise I get\n\n# error: target 'deltafs' INTERFACE_INCLUDE_DIRECTORIES contains path\n\n#         prefixed in the source directory\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# XXX: this doesn't propagate to lib users, is that a problem?\n\n# XXX: prob ok.\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#\n\n#\n\n# here's the compiler/machine/os dependent stuff...\n\n# this likely isn't that useful (carryover from leveldb)\n\n#\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# \"-pthread\" should take care of all thread related options.\n\n# but if we don't have it, fall back to -D_REENTRANT\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# XXX: untested solaris, does it need \"-mt\"?\n\n# XXX: leveldb also added \"-lrt\" .. but is that really needed?\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# end of the compiler/machine/os dependent stuff!\n\n#\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# installation stuff (packaging and install commands)\n\n#\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# generate our config file for find_package()\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# \"make install\" rules...\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# tests... we EXCLUDE_FROM_ALL the tests and use pdlfs-options.cmake's\n\n# pdl-build-tests target for building.\n\n#\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# use basename as test name\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 27
    },
    "src/server/CMakeLists.txt" : {
      "ObjectId" : "f509273a3be1ac28edc592506e30737caf4ae241",
      "LastModified" : "2019-03-15T02:25:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2019 Carnegie Mellon University,\n\n# Copyright (c) 2019 Triad National Security, LLC, as operator of\n\n#     Los Alamos National Laboratory.\n\n#\n\n# All rights reserved.\n\n#\n\n# Use of this source code is governed by a BSD-style license that can be\n\n# found in the LICENSE file. See the AUTHORS file for names of contributors.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMakeLists.txt  cmake file for server directory\n\n# 16-Jun-2016  chuck@ece.cmu.edu\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# \"make install\" rules\n\n#\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 16
  },
  "ElapsedTime" : 1272
}