{
  "Repository" : "20325829",
  "Revision" : "HEAD",
  "ObjectId" : "21869f9f643406140a05ec6e058c5460069d0e69",
  "CommitTime" : "2019-04-08T19:29:04Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0ac2ffa61d2510b538f1ad9d4420f7aa4acfd94f",
      "LastModified" : "2019-01-18T21:25:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# All OBJECT libraries below are later consumed by a shared library so\n\n# the following is OK. Saves on setting it as a per target property.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Check for restrict keyword\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for inline keyword\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CHECK_FUNCTION_EXISTS( _aligned_malloc HAVE__ALIGNED_MALLOC )\n\n#CHECK_FUNCTION_EXISTS( posix_memalign HAVE_POSIX_MEMALIGN )\n\n#CHECK_FUNCTION_EXISTS( aligned_alloc HAVE_ALIGNED_ALLOC )\n\n#CHECK_FUNCTION_EXISTS( memalign HAVE_MEMALIGN )\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#CHECK_FUNCTION_EXISTS( filelength HAVE_FILELENGTH )\n\n#CHECK_FUNCTION_EXISTS( GetSystemTimeAsFileTime HAVE_GETSYSTEMTIMEASFILETIME )\n\n#CHECK_FUNCTION_EXISTS( SetUnhandledExceptionFilter HAVE_SETUNHANDLEDEXCEPTIONFILTER )\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Disable C4244 (implicit integer truncation) warning on MSVC builds\n\n# because there are too many caused by the 64-bit wide integer\n\n# versions of the alignment functions.\n",
        "Line" : 918,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# check for monotonic\n",
        "Line" : 987,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# check for realtime\n",
        "Line" : 1004,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# there must be an easier way to do this\n",
        "Line" : 1146,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "Makefile.am" : {
      "ObjectId" : "72293572c32d2b55b420566b4959c66d10169362",
      "LastModified" : "2019-01-18T21:25:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# fix internal am__is_gnu_make for automake < 1.15\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################\n\n# core sources\n\n#################\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#################\n\n# vector memory\n\n#################\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#################\n\n# serial methods\n\n#################\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################\n\n# parallel methods\n\n###################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# parallel scan methods\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# parallel diag methods\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# parallel striped methods\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# parallel blocked methods\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#########################\n\n# parallel stats methods\n\n#########################\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# parallel scan methods\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# parallel diag methods\n",
        "Line" : 607,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# parallel striped methods\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#########################\n\n# parallel trace methods\n\n#########################\n",
        "Line" : 771,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# parallel scan methods\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# parallel diag methods\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# parallel striped methods\n",
        "Line" : 939,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#########################\n\n# library magic\n\n#########################\n",
        "Line" : 1021,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# alias for 'make check' using 'make test'\n",
        "Line" : 1463,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Meson files\n",
        "Line" : 1466,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cmake/FindAVX2.cmake" : {
      "ObjectId" : "d998b069f8a00abb20171fc994ea8cd5aad95a08",
      "LastModified" : "2017-12-18T20:53:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindAVX2\n\n# --------\n\n#\n\n# Finds AVX2 support\n\n#\n\n# This module can be used to detect AVX2 support in a C compiler.  If\n\n# the compiler supports AVX2, the flags required to compile with\n\n# AVX2 support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support AVX2.\n\n#\n\n# The following variables are set:\n\n#\n\n# ::\n\n#\n\n#    AVX2_C_FLAGS - flags to add to the C compiler for AVX2 support\n\n#    AVX2_FOUND - true if AVX2 is detected\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sample AVX2 source code to test\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if these are set then do not try to find them again,\n\n# by avoiding any try_compiles for the flags\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MSVC can compile AVX intrinsics without the arch flag, however it\n\n# will detect that AVX code is found and \"consider using /arch:AVX\".\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Empty, if compiler automatically accepts AVX2\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#GNU, Intel\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#clang\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# begin tests for AVX2 specfic features\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/FindAltiVec.cmake" : {
      "ObjectId" : "97ad40ca735f303d890cb804a0778d7285f15d06",
      "LastModified" : "2017-12-18T20:53:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindAltiVec\n\n# --------\n\n#\n\n# Finds AltiVec support\n\n#\n\n# This module can be used to detect AltiVec support in a C compiler.  If\n\n# the compiler supports AltiVec, the flags required to compile with\n\n# AltiVec support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support AltiVec.\n\n#\n\n# The following variables are set:\n\n#\n\n# ::\n\n#\n\n#    ALTIVEC_C_FLAGS - flags to add to the C compiler for AltiVec support\n\n#    ALTIVEC_FOUND - true if AltiVec is detected\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sample AltiVec source code to test\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if these are set then do not try to find them again,\n\n# by avoiding any try_compiles for the flags\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Empty, if compiler automatically accepts AltiVec\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#Empty, if compiler automatically accepts AltiVec\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/FindNEON.cmake" : {
      "ObjectId" : "0e6ee179c4a352eacbcdc68509f04a51c54a4b12",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindNEON\n\n# --------\n\n#\n\n# Finds NEON support\n\n#\n\n# This module can be used to detect NEON support in a C compiler.  If\n\n# the compiler supports NEON, the flags required to compile with\n\n# NEON support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support NEON.\n\n#\n\n# The following variables are set:\n\n#\n\n# ::\n\n#\n\n#    NEON_C_FLAGS - flags to add to the C compiler for NEON support\n\n#    NEON_FOUND - true if NEON is detected\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sample NEON source code to test\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if these are set then do not try to find them again,\n\n# by avoiding any try_compiles for the flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Empty, if compiler automatically accepts NEON\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#Empty, if compiler automatically accepts NEON\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/FindSSE2.cmake" : {
      "ObjectId" : "4065af0ef9b789285bbb8671156bd524046bb851",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSSE2\n\n# --------\n\n#\n\n# Finds SSE2 support\n\n#\n\n# This module can be used to detect SSE2 support in a C compiler.  If\n\n# the compiler supports SSE2, the flags required to compile with\n\n# SSE2 support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support SSE2.\n\n#\n\n# The following variables are set:\n\n#\n\n# ::\n\n#\n\n#    SSE2_C_FLAGS - flags to add to the C compiler for SSE2 support\n\n#    SSE2_FOUND - true if SSE2 is detected\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sample SSE2 source code to test\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if these are set then do not try to find them again,\n\n# by avoiding any try_compiles for the flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Empty, if compiler automatically accepts SSE2\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#Empty, if compiler automatically accepts SSE2\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#GNU, Intel\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#clang\n",
        "Line" : 57,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 7
    },
    "cmake/FindSSE41.cmake" : {
      "ObjectId" : "ad1968d54db59964aa4906804509cea9880a46ac",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSSE41\n\n# ---------\n\n#\n\n# Finds SSE41 support\n\n#\n\n# This module can be used to detect SSE41 support in a C compiler.  If\n\n# the compiler supports SSE41, the flags required to compile with\n\n# SSE41 support are returned in variables for the different languages.\n\n# The variables may be empty if the compiler does not need a special\n\n# flag to support SSE41.\n\n#\n\n# The following variables are set:\n\n#\n\n# ::\n\n#\n\n#    SSE41_C_FLAGS - flags to add to the C compiler for SSE41 support\n\n#    SSE41_FOUND - true if SSE41 is detected\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sample SSE41 source code to test\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if these are set then do not try to find them again,\n\n# by avoiding any try_compiles for the flags\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Empty, if compiler automatically accepts SSE41\n",
        "Line" : 48,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#Empty, if compiler automatically accepts SSE41\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#GNU, Intel\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#clang\n",
        "Line" : 57,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#GNU 4.4.7 ?\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# begin tests for SSE4.1 specfic features\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/Findxgetbv.cmake" : {
      "ObjectId" : "49140e0b4d0591253fa594077abcfd93680ee8e5",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# Findxgetbv\n\n# --------\n\n#\n\n# Finds xgetbv support\n\n#\n\n# This module can be used to detect xgetbv support in a C compiler.\n\n#\n\n# The following variables are set:\n\n#\n\n# ::\n\n#\n\n#    HAVE_XGETBV - true if xgetbv is detected\n\n#\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sample xgetbv source code to test\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/toolchain-arm-linux-gnueabi.cmake" : {
      "ObjectId" : "59d66953134c6364870809b0841d3b9d7af19ec5",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/sais-lite-lcp/Makefile" : {
      "ObjectId" : "694d070ef9e4644d31fcc1a60fc915fe328e1189",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for suftest and test\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# options\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#CXX\t\t\t\t\t\t= g++\n\n#OUTPUT_OPTION\t= -o $@\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CFLAGS\t\t\t\t= -O3 -fomit-frame-pointer -funroll-loops\n\n#CXXFLAGS\t\t\t= -O3 -fomit-frame-pointer\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#CPPFLAGS\t\t\t= -Wall\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#TARGET_ARCH\t\t=\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# targets\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# dependencies\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "contrib/simde/test/CMakeLists.txt" : {
      "ObjectId" : "3d028a98b0de6b5ac695db9600566e4ba3daf8e2",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/simde/test/cmake/AddCompilerFlags.cmake" : {
      "ObjectId" : "3a94161d9bdede4acda2d4aa20e97a8c7a276f79",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module provides a convenient way to add C/C++ compiler flags if\n\n# the compiler supports them.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Depending on the settings, some compilers will accept unknown flags.\n\n# We try to disable this behavior by also passing these flags when we\n\n# check if a flag is supported.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n# Set a variable to different flags, depending on which compiler is in\n\n# use.\n\n#\n\n# Example:\n\n#   set_compiler_specific_flags(VARIABLE varname MSVC /wd666 INTEL /wd1729)\n\n#\n\n#   This will set varname to /wd666 if the compiler is MSVC, and /wd1729\n\n#   if it is Intel.\n\n#\n\n# Possible compilers:\n\n#  - GCC: GNU C Compiler\n\n#  - GCCISH: A compiler that (tries to) be GCC-compatible on the CLI\n\n#    (i.e., anything but MSVC).\n\n#  - CLANG: clang\n\n#  - MSVC: Microsoft Visual C++ compiler\n\n#  - INTEL: Intel C Compiler\n\n#  - PGI: PGI C Compiler\n\n#\n\n# Note: the compiler is determined based on the value of the\n\n# CMAKE_C_COMPILER_ID variable, not CMAKE_CXX_COMPILER_ID.\n\n##\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Because https://gcc.gnu.org/wiki/FAQ#wnowarning\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# global_add_compiler_flags (flag1 [flag2 [flag3 ...]]):\n\n#\n\n# This just adds the requested compiler flags to\n\n# CMAKE_C/CXX_FLAGS variable if they work with the compiler.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Because https://gcc.gnu.org/wiki/FAQ#wnowarning\n",
        "Line" : 144,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "contrib/simde/test/cmake/ExtraWarningFlags.cmake" : {
      "ObjectId" : "c7418490f9298aae3c081e25684dc6122fc39322",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is basically supposed to be the CMake equivalent of\n\n# https://git.gnome.org/browse/gnome-common/tree/macros2/gnome-compiler-flags.m4\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "contrib/simde/test/cmake/toolchain-aarch64-linux-gnu.cmake" : {
      "ObjectId" : "b14adf62a4917010dba0dc7ccc88442e68587783",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/simde/test/cmake/toolchain-arm-linux-gnueabihf.cmake" : {
      "ObjectId" : "8f8bb2f41a7076444d5535c8bc58b3d24b571dd6",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/wingetopt/CMakeLists.txt" : {
      "ObjectId" : "499db79f1ad1d85a31efb40715491e873fd4cea4",
      "LastModified" : "2018-07-10T16:50:55Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 14,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1939
}