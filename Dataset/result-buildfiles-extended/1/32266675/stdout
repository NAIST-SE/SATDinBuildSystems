{
  "Repository" : "32266675",
  "Revision" : "HEAD",
  "ObjectId" : "129992fd04e20f6423b10d51e966e6fdeb7bdb19",
  "CommitTime" : "2019-04-16T19:45:16Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "9e829d5444bd2e6c4dff7bf8ae5fa263028b936c",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define GNU standard installation directories.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set a better default install location for Windows only if the user did not provide one.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find Vulkan Headers, Loader, and ValidationLayers\n\n# Search order:\n\n#  User-supplied CMAKE_PREFIX_PATH containing paths to the header and/or loader install dirs\n\n#  CMake options VULKAN_HEADERS_INSTALL_DIR, VULKAN_LOADER_INSTALL_DIR, and/or VULKAN_VALIDATIONLAYERS_INSTALL_DIR\n\n#  Env vars VULKAN_HEADERS_INSTALL_DIR, VULKAN_LOADER_INSTALL_DIR, and/or VULKAN_VALIDATIONLAYERS_INSTALL_DIR\n\n#  Fallback to FindVulkan operation using SDK install or system installed components.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Cmake command line option overrides environment variable\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cmake command line option overrides environment variable\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Cmake command line option overrides environment variable\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Enable cmake folders\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOTE: jsoncpp is located in SUBPROJECTS_DIR.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Header file for CMake settings\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The vulkan loader search is:\n\n#     User-supplied setting of CMAKE_PREFIX_PATH\n\n#     VULKAN_LOADER_INSTALL_DIR defined via cmake option\n\n#     VULKAN_LOADER_INSTALL_DIR defined via environment variable\n\n#     Default findVulkan operation if the VULKAN_SDK environment variable is defined\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Define macro used for building vkxml generated files\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# uninstall target\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "build-android/cmake/layerlib/CMakeLists.txt" : {
      "ObjectId" : "e7a5f76edb7cca5d630b97639d3ac1d688953a2f",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Validation layers could be built with code from\n\n#    github repo   OR\n\n#    ndk's snapshot\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NDK directory structure:\n\n#  $ANDROID_NDK/sources/third_party/\n\n#        vulkan/src\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# github directory structure:\n\n#   ${SRC_DIR}\n\n#   ${SRC_DIR}/build-android/external\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build core_validation layers\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "build-android/cmake/layerlib/proguard-rules.pro" : {
      "ObjectId" : "b41fe70c70577274434bd0cee86a8e2f9a2e2241",
      "LastModified" : "2017-05-23T17:46:55Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in ${ANDROID_SDK}/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindPthreadStubs.cmake" : {
      "ObjectId" : "9fc33d56b3fb1838128d210a506adaa408a037f9",
      "LastModified" : "2017-05-24T14:54:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - FindPthreadStubs\n\n#\n\n# Copyright (C) 2015-2016 Valve Corporation\n\n# Copyright (C) 2015-2016 LunarG, Inc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindValgrind.cmake" : {
      "ObjectId" : "fdc4d7a0aa4b40514c5921ff0b5da264fe12cc1b",
      "LastModified" : "2017-05-24T14:54:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - FindValgrind\n\n#\n\n# Copyright (C) 2015-2016 Valve Corporation\n\n# Copyright (C) 2015-2016 LunarG, Inc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindVulkan.cmake" : {
      "ObjectId" : "41496a63eb5995d933a1f165ebd4ae7049b805ce",
      "LastModified" : "2018-05-21T17:35:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindVulkan\n\n# ----------\n\n#\n\n# Try to find Vulkan\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines :prop_tgt:`IMPORTED` target ``Vulkan::Vulkan``, if\n\n# Vulkan has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables::\n\n#\n\n#   Vulkan_FOUND          - True if Vulkan was found\n\n#   Vulkan_INCLUDE_DIRS   - include directories for Vulkan\n\n#   Vulkan_LIBRARIES      - link against this library to use Vulkan\n\n#\n\n# The module will also define two cache variables::\n\n#\n\n#   Vulkan_INCLUDE_DIR    - the Vulkan include directory\n\n#   Vulkan_LIBRARY        - the path to the Vulkan library\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindVulkanHeaders.cmake" : {
      "ObjectId" : "31790745c8d07d2fb81e53905fa97a0f7c314122",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindVulkanHeaders\n\n# -----------------\n\n#\n\n# Try to find Vulkan Headers and Registry.\n\n#\n\n# This module is intended to be used by projects that build Vulkan\n\n# \"system\" components such as the loader and layers.\n\n# Vulkan applications should instead use the FindVulkan (or similar)\n\n# find module that locates the headers and the loader library.\n\n#\n\n# When using this find module to locate the headers and registry\n\n# in a Vulkan-Headers repository, the Vulkan-Headers repository\n\n# should be built with 'install' target and the following environment\n\n# or CMake variable set to the location of the install directory.\n\n#\n\n#    VULKAN_HEADERS_INSTALL_DIR\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines no IMPORTED targets\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables::\n\n#\n\n#   VulkanHeaders_FOUND          - True if VulkanHeaders was found\n\n#   VulkanHeaders_INCLUDE_DIRS   - include directories for VulkanHeaders\n\n#\n\n#   VulkanRegistry_FOUND         - True if VulkanRegistry was found\n\n#   VulkanRegistry_DIRS          - directories for VulkanRegistry\n\n#   VulkanHeaders_VERSION_MAJOR  - The Major API version of the latest version\n\n#                                  contained in the Vulkan header\n\n#   VulkanHeaders_VERSION_MINOR  - The Minor API version of the latest version\n\n#                                  contained in the Vulkan header\n\n#   VulkanHeaders_VERSION_PATCH  - The Patch API version of the latest version\n\n#                                  contained in the Vulkan header\n\n#\n\n# The module will also define two cache variables::\n\n#\n\n#   VulkanHeaders_INCLUDE_DIR    - the VulkanHeaders include directory\n\n#   VulkanRegistry_DIR           - the VulkanRegistry directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use HINTS instead of PATH to search these locations before\n\n# searching system environment variables like $PATH that may\n\n# contain SDK directories.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Determine the major/minor/patch version from the vulkan header\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find all lines in the header file that contain any version we may be interested in\n\n#  NOTE: They start with #define and then have other keywords\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# First, handle the case where we have a major/minor version\n\n#   Format is:\n\n#        #define VK_API_VERSION_X_Y VK_MAKE_VERSION(X, Y, 0)\n\n#   We grab the major version (X) and minor version (Y) out of the parentheses\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Second, handle the case where we have the patch version\n\n#   Format is:\n\n#      #define VK_HEADER_VERSION Z\n\n#   Where Z is the patch version which we just grab off the end\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/FindWayland.cmake" : {
      "ObjectId" : "f93218b8739e66a50678a4b6965231438b87692f",
      "LastModified" : "2018-05-21T17:35:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Wayland on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   WAYLAND_FOUND       - True if Wayland is found\n\n#   WAYLAND_LIBRARIES   - Link these to use Wayland\n\n#   WAYLAND_INCLUDE_DIR - Include directory for Wayland\n\n#   WAYLAND_DEFINITIONS - Compiler flags for using Wayland\n\n#\n\n# In addition the following more fine grained variables will be defined:\n\n#\n\n#   WAYLAND_CLIENT_FOUND  WAYLAND_CLIENT_INCLUDE_DIR  WAYLAND_CLIENT_LIBRARIES\n\n#   WAYLAND_SERVER_FOUND  WAYLAND_SERVER_INCLUDE_DIR  WAYLAND_SERVER_LIBRARIES\n\n#   WAYLAND_EGL_FOUND     WAYLAND_EGL_INCLUDE_DIR     WAYLAND_EGL_LIBRARIES\n\n#\n\n# Copyright (c) 2013 Martin Gräßlin <mgraesslin@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In the cache already\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/FindX11_XCB.cmake" : {
      "ObjectId" : "956bf89d7715fdc9c25354ea693c90c47053f31c",
      "LastModified" : "2018-05-21T17:35:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libX11-xcb\n\n# Once done this will define\n\n#\n\n# X11_XCB_FOUND - system has libX11-xcb\n\n# X11_XCB_LIBRARIES - Link these to use libX11-xcb\n\n# X11_XCB_INCLUDE_DIR - the libX11-xcb include dir\n\n# X11_XCB_DEFINITIONS - compiler switches required for using libX11-xcb\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2011 Fredrik Höglund <fredrik@kde.org>\n\n# Copyright (c) 2008 Helio Chissini de Castro, <helio@kde.org>\n\n# Copyright (c) 2007 Matthias Kretz, <kretz@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/FindXCB.cmake" : {
      "ObjectId" : "360b8eefe35834eca39132e173460a20baa5f9a5",
      "LastModified" : "2018-05-21T17:35:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - FindXCB\n\n#\n\n# Copyright (C) 2015-2016 Valve Corporation\n\n# Copyright (C) 2015-2016 LunarG, Inc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# component name\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# header name\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# library name\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "layer_factory/CMakeLists.txt" : {
      "ObjectId" : "1eeb5b08f72d2773550d04a9360276aae30aebd3",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Move binary output location to the standard layers directory\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Turn off transitional \"changed behavior\" warning message for Visual Studio versions prior to 2015.\n\n# The changed behavior is that constructor initializers are now fixed to clear the struct members.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Generates a list of subdirectories in a directory.  Used to pick up factory layers and interceptors\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Paths for the layer factory json template and the destination for factory layer json files\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# json file creation\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The output file needs Unix \"/\" separators or Windows \"\\\" separators\n\n# On top of that, Windows separators actually need to be doubled because the json format uses backslash escapes\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Run json.in file through the generator\n\n# We need to create the generator.cmake script so that the generator can be run at compile time, instead of configure time\n\n# Running at compile time lets us use cmake generator expressions (TARGET_FILE_NAME and TARGET_FILE_DIR, specifically)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Read in def file template, update with new layer name and write to destination\n",
        "Line" : 118,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Edit json template and copy to build\\layers dir at cmake time\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Create custom target for the copies so that json template is copied and edited at compile time\n",
        "Line" : 134,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Create the layer_factory_linux.json file\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Loop through all subdirectories, creating a factory-based layer for each. For each factory layer, create a dependency link on\n\n# the previous layer in order to serialize their builds.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add targets for JSON file install. Try to follow the same convention as the Khronos Vulkan-ValidationLayers repository to maintain\n\n# a coherent directory topology in the install path.\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "layersvt/CMakeLists.txt" : {
      "ObjectId" : "85503239a794882fb91d5f6f9ee025ad630fdb90",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO Add Wayland Support\n\n# add_definitions(-DVK_USE_PLATFORM_WAYLAND_KHR)\n",
        "Line" : 27,
        "CharPositionInLine" : 7
      },
      "1" : {
        "Text" : "# TODO Add Metal Support\n",
        "Line" : 36,
        "CharPositionInLine" : 7
      },
      "2" : {
        "Text" : "# For VS 2015, which uses compiler version 1900, core_validation.cpp fails with too many objects\n\n# without either optimizations enabled, or setting the /bigobj compilation option.  Since\n\n# optimizations are enabled in a release build, this only affects the debug build.  For now,\n\n# enable /bigobj mode for all debug layer files. An alternative for the future is to split\n\n# large source files into multiple files which will also alleviate the compilation error.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#VulkanTools layers\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# json file creation\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The output file needs Unix \"/\" separators or Windows \"\\\" separators\n\n# Windows paths need to start with \".\\\", Unix paths do not.\n\n# Windows separators actually need to be doubled because the json format uses backslash escapes\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Run each .json.in file through the generator\n\n# We need to create the generator.cmake script so that the generator can be run at compile time, instead of configure time\n\n# Running at compile time lets us use cmake generator expressions (TARGET_FILE_NAME and TARGET_FILE_DIR, specifically)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Get the needed properties from that target\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add target for JSON file install.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add targets for JSON file install on Linux.\n\n# Need to remove the \"./\" from the library path before installing\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 10
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "d3ccb502f60e1b46dc4f742aa709c30b4ce575a4",
      "LastModified" : "2018-05-21T17:35:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# extra setup for out-of-tree builds\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "via/CMakeLists.txt" : {
      "ObjectId" : "7e21eaeca034e08c06f1d00e849b2681ce133560",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use static MSVCRT libraries\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Disable the RPATH for VIA because we want it to use\n\n# the environment setup by the user\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "vkconfig/CMakeLists.txt" : {
      "ObjectId" : "a78b6faa419b3e7b9a84d1b8547ffaeae7fbaa45",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vkconfig/macOS/vkconfig.cmake" : {
      "ObjectId" : "122c56f73b53c71673f67d4da3467029b2339e7e",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ~~~\n\n# Copyright (c) 2018-2019 Valve Corporation\n\n# Copyright (c) 2018-2019 LunarG, Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n# ~~~\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set_target_properties(vkconfig PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/macOS/Info.plist)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vktrace/CMakeLists.txt" : {
      "ObjectId" : "00c6c8fee75ca38e7a0deefce12cbce71486bada",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\n\n#   http://www.cmake.org/Wiki/CMake_FAQ\n\n#   http://www.cmake.org/Wiki/CMake_Useful_Variables\n\n#   http://clang.llvm.org/docs/LanguageExtensions.html\n\n#\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# With gcc48: http://indico.cern.ch/getFile.py/access?contribId=1&resId=0&materialId=slides&confId=230762\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Unless user specifies BUILD_X64 explicitly, assume native target\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate bitness suffix to use, but make sure to include the existing suffix (.exe)\n\n# for platforms that need it (ie, Windows)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Don't add the 32 for Windows because it goes in a different location.\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Default to release build\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make sure we're using 64-bit versions of stat, fopen, etc.\n\n# Large File Support extensions:\n\n#   http://www.gnu.org/software/libc/manual/html_node/Feature-Test-Macros.html#Feature-Test-Macros\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# support for inttypes.h macros\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# clang doesn't print colored diagnostics when invoked from Ninja\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# \"-pedantic\"             # Warn on language extensions\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Enable all warnings\n",
        "Line" : 83,
        "CharPositionInLine" : 36
      },
      "11" : {
        "Text" : "# TODO: Would be great to start enabling some of these warnings...\n",
        "Line" : 97,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Added because SDL2 headers have a ton of Doxygen warnings currently.\n",
        "Line" : 121,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "#\n\n# To show the include files as you're building, do this:\n\n#    add_compiler_flag(\"-H\")\n\n# For Visual Studio, it's /showIncludes I believe...\n\n#\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# stack-protector-strong: http://gcc.gnu.org/ml/gcc-patches/2012-06/msg00974.html\n\n## -fstack-protector-strong\n\n# Compile with the option \"-fstack-usage\" and a file .su will be generated with stack\n\n# information for each function.\n\n## -fstack-usage\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For more info on -fno-strict-aliasing: \"Just Say No to strict aliasing optimizations in C\": http://nothings.org/\n\n# The Linux kernel is compiled with -fno-strict-aliasing: https://lkml.org/lkml/2003/2/26/158 or http://www.mail-archive.com/linux-btrfs@vger.kernel.org/msg01647.html\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "### TODO: see if sse is generated with these instructions and clang:\n\n## -march=corei7 -msse -mfpmath=sse\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fix startup crash in dlopen_notify_callback (called indirectly from our dlopen() function) when tracing glxspheres on my AMD dev box (x86 release only)\n\n# Also fixes tracing Q3 Arena using release tracer\n\n# Clang is generating sse2 code even when it shouldn't be:\n\n#  http://lists.cs.uiuc.edu/pipermail/cfe-dev/2012-March/020310.html\n",
        "Line" : 192,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Need exceptions\n",
        "Line" : 203,
        "CharPositionInLine" : 16
      },
      "19" : {
        "Text" : "# \"-msse2 -mfpmath=sse\" # To build with SSE instruction sets\n",
        "Line" : 210,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# DO NOT remove this, we have lots of code that will fail in obscure ways otherwise because it was developed with MSVC first.\n",
        "Line" : 212,
        "CharPositionInLine" : 31
      },
      "21" : {
        "Text" : "# \"-fno-exceptions\" # Exceptions are enabled by default for c++ files, disabled for c files.\n",
        "Line" : 215,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html\n",
        "Line" : 241,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# During program load, several ELF memory sections need to be written to by the\n\n# linker, but can be turned read-only before turning over control to the\n\n# program. This prevents some GOT (and .dtors) overwrite attacks, but at least\n\n# the part of the GOT used by the dynamic linker (.got.plt) is still vulnerable.\n",
        "Line" : 244,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# Compiler flags\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Linker flags (exe)\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Linker flags (shared)\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Export the variable to the parent scope so the linker knows where to find the library.\n",
        "Line" : 320,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# On platforms that find this, the include files will have also been installed to the system\n\n# so we don't need extra include dirs.\n",
        "Line" : 331,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Only want to include this once.\n\n# This has to go into properties because it needs to persist across the entire cmake run.\n",
        "Line" : 364,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# What compiler toolchain are we building on?\n",
        "Line" : 444,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Platform specific library defines.\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# What OS will we be running on?\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# What bittedness are we building?\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Compiler flags for windows.\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Multithreaded compilation is a big time saver.\n",
        "Line" : 497,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# In debug, we use the DLL debug runtime.\n",
        "Line" : 500,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# And in release we use the DLL release runtime\n",
        "Line" : 503,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Generate debug information\n",
        "Line" : 506,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# And tell the linker to always generate the file for us.\n",
        "Line" : 509,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Only vktrace is supported on macOS\n",
        "Line" : 533,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# We need CMake version 3.0+ in order to \"find_package(Qt5)\":\n",
        "Line" : 541,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${SRC_DIR}/cmake/Modules/\")\n\n#set(CMAKE_EXTERNAL_PATH \"${SRC_DIR}/../../external\")\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# TODO: s/CMAKE_PREFIX_PATH/CMAKE_EXTERNAL_WINDOWS_PATH/g\n",
        "Line" : 553,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#    set(CMAKE_PREFIX_PATH \"${CMAKE_EXTERNAL_PATH}/windows\")\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#search for QT only if BUILD_VKTRACEVIEWER is ON\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#\n\n#  Components to build\n\n#\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Initial build of vktrace generated files when running cmake.\n\n# Need to generate the files here because cmake of vktrace subdirectories depends on the generated files already existing.\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Command and target to build vktrace generated files from Makefile or VisualStudio.\n\n# This makes sure that if (and only if) a dependency is modified, the files are regenerated.\n",
        "Line" : 614,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Only build vktraceviewer if Qt5 is available\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# use macro from stackoverflow (link below) to get all the extensions that are on the current system\n\n# http://stackoverflow.com/questions/7787823/cmake-how-to-get-the-name-of-all-subdirectories-of-a-directory\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "vktrace/vktrace_common/CMakeLists.txt" : {
      "ObjectId" : "cf5df1c9cfbd711904cfcafa212f6da3d5549340",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vktrace/vktrace_dump/CMakeLists.txt" : {
      "ObjectId" : "1e1a071f3e296155483cdb0e3f8852900ee2bc09",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Run a codegen script to generate vktrace-specific vulkan utils\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vktrace/vktrace_layer/CMakeLists.txt" : {
      "ObjectId" : "e460c50bae93737bb1936b085aa3b0c641205a5b",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mir WSI Case\n",
        "Line" : 12,
        "CharPositionInLine" : 7
      },
      "1" : {
        "Text" : "# Put VkLayer_vktrace_layer.dll in the same directory as vktrace.exe\n\n# so that vktrace.exe can find VkLayer_vktrace_layer.dll.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# def file - needed for Windows 32-bit so that vk functions names aren't mangled\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# json file creation\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Run the .json.in file through the generator.\n\n# We need to create the generator.cmake script so that the generator can be run at compile time, instead of configure time.\n\n# Running at compile time lets us use cmake generator expressions (TARGET_FILE_NAME and TARGET_FILE_DIR, specifically).\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add target for JSON file install\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set Compiler Flags, Libraries\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "vktrace/vktrace_replay/CMakeLists.txt" : {
      "ObjectId" : "6766e1efc65dbfd9639c24ff4ee77f4818a7cc2f",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the exe directory is searched when loading libraries with dlopen\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "vktrace/vktrace_trace/CMakeLists.txt" : {
      "ObjectId" : "a4d99148d186a854f640112293976780b795e74d",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "vktrace/vktrace_viewer/CMakeLists.txt" : {
      "ObjectId" : "b4fdae3ae4b4a65b4d33fab25d4b70c4b32ad962",
      "LastModified" : "2019-04-12T17:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the exe directory is searched when loading libraries with dlopen\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# we want cmake to link the Qt libs into the binary\n\n# This policy was introduced in 2.8.11, so on newer versions, use the OLD policy to maintain consistent behavior\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# After Qt5.6 is installed, you may need to add the following to the cmake command line:\n\n# -DCMAKE_PREFIX_PATH=C:\\\\Qt\\\\5.6\\\\msvc2015_64\\\\\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This should only contain headers that define a QOBJECT\n\n# Typically that means just headers for UI objects\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These is for all headers\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Platform specific compile flags.\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# copy the debug and release dlls for Qt5Widgets, Qt5Core, and Qt5Gui\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# There are also several other files that need to be copied or created\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    }
  },
  "FileTypes" : {
    "CMAKE" : 22,
    "QMAKE" : 1
  },
  "ElapsedTime" : 3065
}