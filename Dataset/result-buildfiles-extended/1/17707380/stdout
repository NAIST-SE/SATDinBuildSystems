{
  "Repository" : "17707380",
  "Revision" : "HEAD",
  "ObjectId" : "36940c00247ec733f7942d9b1ff22709506837dd",
  "CommitTime" : "2019-04-15T21:11:34Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "dbce135c85ee5bc28ddb03037422e56521d254a0",
      "LastModified" : "2018-08-20T20:54:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The minimum CMake version is currently governed by the CMake version that can\n\n# be installed on the Travis Trusty VMs with apt-get.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the \"googletest\" directory at the end as it defines its own CMake rules\n\n# for py_test etc. Adding it at the end avoids mixing up Pytype's definitions\n\n# with these definitions.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/PyTypeUtils.cmake" : {
      "ObjectId" : "4f9fdbc802baeed7f5712d7d48fa502f6460a562",
      "LastModified" : "2018-08-23T23:01:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pytype's bison files can work with bison 3.0.4. However, we set the minimum\n\n# required version to 3.0.2 as that is the version of bison one can install\n\n# with apt-get on the Travis Trusty VMs.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Pytype's flex files can work with flex 2.6.1. However, we set the minimum\n\n# required version to 2.5.35 as that is the version of flex one can install\n\n# with apt-get on the Travis Trusty VMs.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the python interpreter first so that Python libs corresponding to the\n\n# version of this interpreter can be found below.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Returns the fully qualified parent name for targets in the current source\n\n# directory in |fq_parent_name|.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Strip the prefix so that names are all relative to the project root directory.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Given a local target name in |name|, returns the fully qualified target name\n\n# in |fq_target_name|.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Given a |target_name| referenced from the current source directory, it\n\n# evaluates and returns the fully qualified name of the target in\n\n# |fq_target_name|. Note that a target name referenced from the current\n\n# directory can either be a local target name, or a fully qualified global\n\n# target name.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This is a local target to prefix the parent name\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# This is an absolute target so just return the target name as is.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Given a fully qualifed target name |fq_target_name|, and a list of file names\n\n# relative to the current directory, this function adds a list of the absolute\n\n# paths to these files as the property \"OUT\" to the target.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Given a list of |targets|, the list of their \"OUT\" property are returned\n\n# in a var named by |out_property_list|.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Function implementing a 'genbison' rule which invokes bison over a source\n\n# file.\n\n# The 'genbison' rule requires the following arguments:\n\n# NAME - The local name of the target for this rule.\n\n# SRC - The .yy file in the current directory.\n\n# HDR_OUT - The name of the bison generated header file.\n\n# CC_OUT - The name of bison generated cc file.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# prefix\n\n# optional args\n",
        "Line" : 125,
        "CharPositionInLine" : 14
      },
      "13" : {
        "Text" : "# single value args\n",
        "Line" : 127,
        "CharPositionInLine" : 31
      },
      "14" : {
        "Text" : "# multi-value args\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# The BISON_TARGET function does not create a target.\n\n# So, we create a dummy target which consumes the bison output.\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# We add convenience properties to the target so that properties\n\n# like the generated header or cc file output can be retrieved for\n\n# use with, say, flex targets.\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Function implementing a 'genflex' rule which invokes flex over a source file.\n\n# The 'genflex' rule requires the following arguments:\n\n# NAME - The local name of the target for this rule.\n\n# SRC - The .lex file on which flex should be invoked.\n\n# CC_OUT - The generated .cc file.\n\n# BISON_DEP - The bison target whose outputs are consumed by this flex target.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# prefix\n\n# optional args\n",
        "Line" : 181,
        "CharPositionInLine" : 13
      },
      "19" : {
        "Text" : "# single value args\n",
        "Line" : 183,
        "CharPositionInLine" : 33
      },
      "20" : {
        "Text" : "# multi-value args\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Add the bison target as a dependency to this flex target so that\n\n# the bison outputs are ready before flex is run.\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# A function implementing a 'cc_library' rule which builds a C++ static library.\n\n# The 'cc_library' rule takes the following arguments:\n\n# NAME - The name of the target. This is a required argument.\n\n# SRCS - List of .cc files of the library. This is a required argument.\n\n# HDRS - List of .h files of the library.\n\n# DEPS - Other cc_library targets this library depends on.\n\n#\n\n# TODO(sivachandra): Implement a header only library rule.\n\n# CMake does not support header only libraries via its builtin utilities. Since\n\n# Pytype uses header only library targets, having rules to setup header only\n\n# library targets helps in setting up the dependencies correctly.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# prefix\n\n# optional args\n\n# single value args\n\n# multi-value args\n",
        "Line" : 236,
        "CharPositionInLine" : 22
      },
      "24" : {
        "Text" : "# A function implementing a 'cc_test' rule which builds a C++ test suite binary\n\n# and runs it.\n\n# The 'cc_test' rule takes the following arguments:\n\n# NAME - The name of the target. This is a required argument.\n\n# SRCS - List of .cc files of the test. This is a required argument.\n\n# DEPS - List of cc_library targets this test depends on.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# prefix\n\n# optional args\n\n# single value args\n\n# multi-value args\n",
        "Line" : 286,
        "CharPositionInLine" : 17
      },
      "26" : {
        "Text" : "# Add a target to run the executable built above.\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Function implementing a rule 'py_extension' to compile a set of CC and headers\n\n# files into a Python extension module.\n\n# The 'py_extension' rule requires the following arguments:\n\n# NAME - The local name of the target.\n\n# SRCS - A list of sources which have to be compiled in to a Python extension\n\n#        module.\n\n#\n\n# The rule also takes an optionl DEPS argument which is the list of targets\n\n# on which this 'py_extension' target depends.\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# prefix\n",
        "Line" : 365,
        "CharPositionInLine" : 18
      },
      "29" : {
        "Text" : "# single value args\n",
        "Line" : 367,
        "CharPositionInLine" : 12
      },
      "30" : {
        "Text" : "# multi-value args\n",
        "Line" : 368,
        "CharPositionInLine" : 17
      },
      "31" : {
        "Text" : "# We want a py_extension library to be an shared library\n",
        "Line" : 381,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "# Add the deps if specified\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# prefix\n\n# optional args\n\n# single value args\n\n# multi-value args\n",
        "Line" : 414,
        "CharPositionInLine" : 17
      },
      "34" : {
        "Text" : "# Add a command which copies the listed sources over to the current build\n\n# directory.\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Add the deps if specified\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# prefix\n\n# optional args\n\n# single value args\n\n# multi-value args\n",
        "Line" : 455,
        "CharPositionInLine" : 17
      },
      "37" : {
        "Text" : "# Copy the main script to a file with the name of the target name.\n",
        "Line" : 495,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# This command should run if the internal py_library was built.\n",
        "Line" : 499,
        "CharPositionInLine" : 32
      },
      "39" : {
        "Text" : "# prefix\n\n# optional args\n\n# single value args\n\n# multi-value args\n",
        "Line" : 511,
        "CharPositionInLine" : 17
      },
      "40" : {
        "Text" : "# The internal py_library target should be a dep for this target.\n",
        "Line" : 545,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Add the deps if specified\n",
        "Line" : 548,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# prefix\n",
        "Line" : 561,
        "CharPositionInLine" : 15
      },
      "43" : {
        "Text" : "# optional args\n",
        "Line" : 562,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# single value args\n\n# multi-value args\n",
        "Line" : 563,
        "CharPositionInLine" : 12
      },
      "45" : {
        "Text" : "# Add a command which copies the listed sources over to the current build\n\n# directory.\n",
        "Line" : 574,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Add an __init__.py file to the current binary directory.\n\n# TODO(sivachandra): Make this rule use the __init__.py from the current source\n\n# directory if present. Currently, none of Pytype's __init__.py files have any\n\n# functionality. So, just creating an empty __init__.py is sufficient.\n",
        "Line" : 590,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# TODO(sivachandra): Make this function create a real target on which all\n\n# py_library targets in the directory will implicitly depend on.\n",
        "Line" : 595,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 48
    },
    "pytype/CMakeLists.txt" : {
      "ObjectId" : "11ab786c5ed84be2aed03150b8bd4112b40f2d4e",
      "LastModified" : "2019-04-12T18:36:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake does not do dependency tracking if files are listed by a GLOB operation.\n\n# So, we have to list the files individually as we want them to be tracked as\n\n# build inputs.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO(sivachandra): Move this into a data dependency\n",
        "Line" : 247,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 2
    },
    "pytype/pyc/CMakeLists.txt" : {
      "ObjectId" : "7f468908c7d04232a3617e801f8a0fe56b0b5dbf",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/pyi/CMakeLists.txt" : {
      "ObjectId" : "61a776fd53ac55feb6d0b60654baeb93056cf038",
      "LastModified" : "2018-09-13T15:46:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/pytd/CMakeLists.txt" : {
      "ObjectId" : "ce239fbdf9fee38b906bde15292cd61f36825369",
      "LastModified" : "2018-09-13T15:46:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/pytd/parse/CMakeLists.txt" : {
      "ObjectId" : "b73fceed2a07ac5f2748bb287eb885993a2bafff",
      "LastModified" : "2018-06-15T22:37:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/tests/CMakeLists.txt" : {
      "ObjectId" : "effbf4e1ccbc5c0d1c498a06bc373298b41d3b9e",
      "LastModified" : "2019-01-28T23:32:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/tests/py2/CMakeLists.txt" : {
      "ObjectId" : "6e225c17f3f7e51e33c2d01ac647de7423e0c684",
      "LastModified" : "2018-06-15T22:37:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/tests/py3/CMakeLists.txt" : {
      "ObjectId" : "22bfd11f1762c49b7040c8c740ed2bd604338008",
      "LastModified" : "2019-03-16T04:02:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/tools/CMakeLists.txt" : {
      "ObjectId" : "43187113027f3903e7d40251fdad1f8cb26913f3",
      "LastModified" : "2019-01-28T23:32:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/tools/analyze_project/CMakeLists.txt" : {
      "ObjectId" : "a3a285f6c0c8ca308e3bc299b577a8be367d2ce4",
      "LastModified" : "2019-01-28T23:32:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/tools/merge_pyi/CMakeLists.txt" : {
      "ObjectId" : "5f65517897345a6aad6f196c6e6cdaf293b131c0",
      "LastModified" : "2019-01-28T23:32:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pytype/typegraph/CMakeLists.txt" : {
      "ObjectId" : "71427d76c79822dd43660b80d073841a44a809fb",
      "LastModified" : "2019-01-28T23:32:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 14
  },
  "ElapsedTime" : 3419
}