{
  "Repository" : "24521172",
  "Revision" : "HEAD",
  "ObjectId" : "b4bb6887c8194fcec8116833489eb8a7c2edfc73",
  "CommitTime" : "2019-04-17T18:48:36Z",
  "Files" : {
    "documentation/Makefile" : {
      "ObjectId" : "f5bd26af47004f91a28a6b7655232000097030b8",
      "LastModified" : "2015-09-21T22:30:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/Makefile" : {
      "ObjectId" : "1f0c4ba85fc973a6c7449dcc518c5c7f84b30f43",
      "LastModified" : "2019-04-01T05:49:42Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# boilermake: A reusable, but flexible, boilerplate Makefile.\n\n#\n\n# Copyright 2008, 2009, 2010 Dan Moulding, Alan T. DeKok\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Caution: Don't edit this Makefile! Create your own main.mk and other\n\n#          submakefiles, which will be included by this Makefile.\n\n#          Only edit this if you need to modify boilermake's behavior (fix\n\n#          bugs, add features, etc).\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note: Parameterized \"functions\" in this makefile that are marked with\n\n#       \"USE WITH EVAL\" are only useful in conjuction with eval. This is\n\n#       because those functions result in a block of Makefile syntax that must\n\n#       be evaluated after expansion. Since they must be used with eval, most\n\n#       instances of \"$\" within them need to be escaped with a second \"$\" to\n\n#       accomodate the double expansion that occurs when eval is invoked.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ADD_CLEAN_RULE - Parameterized \"function\" that adds a new rule and phony\n\n#   target for cleaning the specified target (removing its build-generated\n\n#   files).\n\n#\n\n#   USE WITH EVAL\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ADD_OBJECT_RULE - Parameterized \"function\" that adds a pattern rule for\n\n#   building object files from source files with the filename extension\n\n#   specified in the second argument. The first argument must be the name of the\n\n#   base directory where the object files should reside (such that the portion\n\n#   of the path after the base directory will match the path to corresponding\n\n#   source files). The third argument must contain the rules used to compile the\n\n#   source files into object code form.\n\n#\n\n#   USE WITH EVAL\n\n#\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ADD_TARGET_RULE - Parameterized \"function\" that adds a new target to the\n\n#   Makefile. The target may be an executable or a library. The two allowable\n\n#   types of targets are distinguished based on the name: library targets must\n\n#   end with the traditional \".a\" extension.\n\n#\n\n#   USE WITH EVAL\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add a target for creating a static library.\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Add a target for linking an executable. First, attempt to select the\n\n# appropriate front-end to use for linking. This might not choose the\n\n# right one (e.g. if linking with a C++ static library, but all other\n\n# sources are C sources), so the user makefile is allowed to specify a\n\n# linker to be used for each target.\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# No linker was explicitly specified to be used for this target. If\n\n# there are any C++ sources for this target, use the C++ compiler.\n\n# For all other targets, default to using the C compiler.\n",
        "Line" : 80,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# CANONICAL_PATH - Given one or more paths, converts the paths to the canonical\n\n#   form. The canonical form is the path, relative to the project's top-level\n\n#   directory (the directory from which \"make\" is run), and without\n\n#   any \"./\" or \"../\" sequences. For paths that are not  located below the\n\n#   top-level directory, the canonical form is the absolute path (i.e. from\n\n#   the root of the filesystem) also without \"./\" or \"../\" sequences.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# COMPILE_C_CMDS - Commands for compiling C source code.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# COMPILE_CXX_CMDS - Commands for compiling C++ source code.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# INCLUDE_SUBMAKEFILE - Parameterized \"function\" that includes a new\n\n#   \"submakefile\" fragment into the overall Makefile. It also recursively\n\n#   includes all submakefiles of the specified submakefile fragment.\n\n#\n\n#   USE WITH EVAL\n\n#\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Initialize all variables that can be defined by a makefile fragment, then\n\n# include the specified makefile fragment.\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# A directory stack is maintained so that the correct paths are used as we\n\n# recursively include all submakefiles. Get the makefile's directory and\n\n# push it onto the stack.\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Initialize internal local variables.\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Determine which target this makefile's variables apply to. A stack is\n\n# used to keep track of which target is the \"current\" target as we\n\n# recursively include other submakefiles.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# This makefile defined a new target. Target variables defined by this\n\n# makefile apply to this new target. Initialize the target's variables.\n",
        "Line" : 175,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# The values defined by this makefile apply to the the \"current\" target\n\n# as determined by which target is at the top of the stack.\n",
        "Line" : 200,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Push the current target onto the target stack.\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# This makefile builds one or more objects from source. Validate the\n\n# specified sources against the supported source file types.\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Qualify and canonicalize paths.\n",
        "Line" : 227,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Save the list of source files for this target.\n",
        "Line" : 233,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Convert the source file names to their corresponding object file\n\n# names.\n",
        "Line" : 236,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# Add the objects to the current target's list of objects, and create\n\n# target-specific variables for the objects based on any source\n\n# variables that were defined.\n",
        "Line" : 241,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# This makefile has submakefiles. Recursively include them.\n",
        "Line" : 254,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Reset the \"current\" target to it's previous value.\n",
        "Line" : 261,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Reset the \"current\" directory to it's previous value.\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# MIN - Parameterized \"function\" that results in the minimum lexical value of\n\n#   the two values given.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# PEEK - Parameterized \"function\" that results in the value at the top of the\n\n#   specified colon-delimited stack.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# POP - Parameterized \"function\" that pops the top value off of the specified\n\n#   colon-delimited stack, and results in the new value of the stack. Note that\n\n#   the popped value cannot be obtained using this function; use peek for that.\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# PUSH - Parameterized \"function\" that pushes a value onto the specified colon-\n\n#   delimited stack, and results in the new value of the stack.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# QUALIFY_PATH - Given a \"root\" directory and one or more paths, qualifies the\n\n#   paths using the \"root\" directory (i.e. appends the root directory name to\n\n#   the paths) except for paths that are absolute.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "###############################################################################\n\n#\n\n# Start of Makefile Evaluation\n\n#\n\n###############################################################################\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Older versions of GNU Make lack capabilities needed by boilermake.\n\n# With older versions, \"make\" may simply output \"nothing to do\", likely leading\n\n# to confusion. To avoid this, check the version of GNU make up-front and\n\n# inform the user if their version of make doesn't meet the minimum required.\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Define the source file extensions that we know how to handle.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Initialize global variables.\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Discover our OS and architecture.  These are used to set the BUILD_DIR and TARGET_DIR to\n\n# something more useful than 'build' and '.'.\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#  Some filesystems cannot use < or > in file names, but for reasons unknown\n\n#  (or, at least, reasons we're not going to admit to), files in the overlap\n\n#  store are named ####<###>.  Enabling POSIX_FILE_NAMES Will change the\n\n#  names to ####.###.\n\n#\n\n#  Be aware this will break object store compatibility.\n\n#\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#  Set compiler and flags based on discovered hardware\n\n#\n\n#  By default, debug symbols are included in all builds (even optimized).\n\n#\n\n#  BUILDOPTIMIZED  will disable debug symbols (leaving it just optimized)\n\n#  BUILDDEBUG      will disable optimization  (leaving it just with debug symbols)\n\n#  BUILDSTACKTRACE will enable stack trace on crashes, only works for Linux\n\n#                  set to 0 on command line to disable (it's enabled by default for Linux)\n\n#\n\n#  BUILDPROFILE used to add -pg to LDFLAGS, and remove -D_GLIBCXX_PARALLE from CXXFLAGS and LDFLAGS,\n\n#  and remove -fomit-frame-pointer from CXXFLAGS.  It added a bunch of complication and wasn't\n\n#  really used.\n\n#\n\n#  BUILDJEMALLOC will enable jemalloc library support.\n\n#\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#  Enable some warnings.\n\n#     gcc7:  -Wno-format-truncation  - sprintf() into possibly smaller buffer\n\n#            -Wno-parentheses\n",
        "Line" : 411,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#  The default MacOS compiler - even as of 10.13 High Sierra - doesn't support OpenMP.\n\n#  Clang 6.0 installed from MacPorts supports OpenMP, but fails to compile Canu.\n\n#  So, we require gcc7 (from MacPorts) or gcc8 (from hommebrew).\n\n#\n\n#  If from MacPorts:\n\n#    port install gcc7\n\n#    port select gcc mp-gcc7\n\n#\n\n#  If CC is set to 'cc', the GNU make default, we'll automagically search for other\n\n#  versions and use those if found, preferring gcc7 over gcc8.\n\n#\n\n#  There' definitely a clever way to do this with 'foreach', but my Make is lacking.\n\n#\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#  Quite the evil trick to get\n\n#  this line indented!\n",
        "Line" : 493,
        "CharPositionInLine" : 74
      },
      "43" : {
        "Text" : "#  GCC\n",
        "Line" : 510,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "#  CLANG\n\n#CXXFLAGS  += -I/usr/local/include -D_GLIBCXX_PARALLEL -pthread -fPIC\n\n#LDFLAGS   += -L/usr/local/lib     -D_GLIBCXX_PARALLEL -pthread -lm -lexecinfo -lgomp\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "#  Google Performance Tools malloc and heapchecker (HEAPCHECK=normal)\n\n#CXXFLAGS  +=\n\n#LDFLAGS   += -ltcmalloc\n",
        "Line" : 518,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "#  Google Performance Tools cpu profiler (CPUPROFILE=/path)\n\n#CXXFLAGS  +=\n\n#LDFLAGS   += -lprofiler\n",
        "Line" : 522,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "#  callgrind\n\n#CXXFLAGS  += -g3 -Wa,--gstabs -save-temps\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "#  Stack tracing support.  Wow, what a pain.  Only Linux is supported.  This is just documentation,\n\n#  don't actually enable any of this stuff!\n\n#\n\n#  backward-cpp looks very nice, only a single header file.  But it needs libberty (-liberty) and\n\n#  libbfd (-lbfd).  The former should be installed with gcc, and the latter is in elfutils.  On\n\n#  three out of our three development machines, it fails for various reasons.\n\n#\n\n#  libunwind is pretty basic.\n\n#\n\n#  libbacktrace works (on Linux) and is simple enough to include in our tree.\n\n#\n\n#  None of these give any useful information on BSDs (which includes OS X aka macOS).\n\n#\n\n#\n\n#  Backtraces with libunwind.  Not informative on FreeBSD.\n\n#CXXFLAGS  += -DLIBUNWIND\n\n#LDFLAGS   +=\n\n#LDLIBS    += -lunwind -lunwind-x86_64\n\n#\n\n#\n\n#  Backtraces with libbacktrace.  FreeBSD works, but trace is empty.\n\n#BUILDSTACK = 1\n\n#CXXFLAGS  += -DLIBBACKTRACE\n\n#LDFLAGS   +=\n\n#LDLIBS    +=\n\n#\n\n#\n\n#  Backtraces with backward-cpp.\n\n#\n\n#  Stack walking:\n\n#    BACKWARD_HAS_UNWIND    - used by gcc/clang for exception handling\n\n#    BACKWARD_HAS_BACKTRACE - part of glib, not as accurate, more portable\n\n#\n\n#  Stack interpretation:\n\n#    BACKWARE_HAS_DW               - most information, libdw, (elfutils or libdwarf)\n\n#    BACKWARD_HAS_BFD              - some information, libbfd\n\n#    BACKWARD_HAS_BACKTRACE_SYMBOL - minimal information (file and function), portable\n\n#\n\n#  helix   fails with: cannot find -liberty\n\n#  gryphon fails with: cannot find -lbfd\n\n#  freebsd can't install a working elfutils, needed for libdw\"\n\n#    In file included from AS_UTL/AS_UTL_stackTrace.C:183:0:\n\n#    AS_UTL/backward.hpp:241:30: fatal error: elfutils/libdw.h: No such file or directory\n\n#     #  include <elfutils/libdw.h>\n\n#\n\n#CXXFLAGS  += -DBACKWARDCPP -DBACKWARD_HAS_BFD\n\n#LDFLAGS   +=\n\n#LDLIBS    += -lbfd -liberty -ldl -lz\n\n#\n\n#  Needs libdw, elfutils\n\n#CXXFLAGS  += -DBACKWARDCPP -DBACKWARD_HAS_DW\n\n#LDFLAGS   +=\n\n#LDLIBS    += -ldl -lz\n\n#\n\n#  Generates nothing useful, no function names, just binary names\n\n#CXXFLAGS  += -DBACKWARDCPP\n\n#LDFLAGS   +=\n\n#LDLIBS    += -ldl -lz\n\n#\n\n#\n\n#  No backtrace support.\n\n#CXXFLAGS   += -DNOBACKTRACE\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#  But, if we we have an old GCC, stack tracing support isn't there.\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Include the main user-supplied submakefile. This also recursively includes\n\n# all other user-supplied submakefiles.\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Perform post-processing on global variables as needed.\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Define the \"all\" target (which simply builds all user-defined targets) as the\n\n# default goal.\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Add a new target rule for each user-defined target.\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Add pattern rule(s) for creating compiled object code from C source.\n",
        "Line" : 685,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Add pattern rule(s) for creating compiled object code from C++ source.\n",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Add \"clean\" rules to remove all build-generated files.\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Include generated rules that define additional (header) dependencies.\n",
        "Line" : 702,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#  A fake target, to regenerate the canu_version.H file on every build.\n",
        "Line" : 706,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#  A fake target, to make the directory for the canu perl modules.\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#  Makefile processed.  Report that we're starting the build.\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#${info Using LD_RUN_PATH '${LD_RUN_PATH}'}\n",
        "Line" : 826,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 62,
      "Errorlog" : "line 617:73 token recognition error at: '\\1'\nline 617:98 token recognition error at: '\\1'\n"
    },
    "src/dx-canu/Makefile" : {
      "ObjectId" : "4940133a7f4d6b12c509b012bc507d67d7ca21be",
      "LastModified" : "2019-01-24T13:37:33Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 3398
}