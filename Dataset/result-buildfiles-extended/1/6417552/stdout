{
  "Repository" : "6417552",
  "Revision" : "HEAD",
  "ObjectId" : "569eabd1b74c3dc002574da9e00d32ea1919531a",
  "CommitTime" : "2014-09-11T11:48:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "faee2f9ce5311f1e3cfc03b595edcf9199b52e02",
      "LastModified" : "2014-09-03T08:00:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/build)\n\n#set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/build)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the RPATH to be used when installing\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \" -O3\")\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"Downloading model generator\")\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#execute_process(COMMAND curl -OL ${URL_MODEL_GENERATOR} )\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#add_subdirectory (${SRC_KEVOREE_LIBRARY}/)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#************************************** INSTALL ****************************************************\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "CMakeModules/AndroidUtils.cmake" : {
      "ObjectId" : "784ddb8b40fb8ecf250580c8fd7cebeb92483820",
      "LastModified" : "2013-12-17T10:00:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure build environment to automatically generate APK's instead of executables.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# virtual targets which we'll add apks and push actions to.\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Reset output directories to be in binary folder (rather than source)\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Generate ant build scripts for making APK\n",
        "Line" : 101,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Override add_executable to build android .so instead!\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Add required link libs for android\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Create manifest required for APK\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Create library that will launch this program and load shared libs\n\n#create_bootstrap_library( ${prog_name} ${ANDROID_PACKAGE_NAME} )\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Generate ant build system for APK\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Target to invoke ant build system for APK\n",
        "Line" : 128,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Target to install on device\n",
        "Line" : 137,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Target to install on device\n",
        "Line" : 143,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# install and run on device\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Flag to package dependent libs\n",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Clear shared library loading header\n",
        "Line" : 161,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Mark lib_path as dependent of prog_name\n",
        "Line" : 166,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# If prog_name is to be packaged, add file copy command to package .so's.\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Recursively Process dependents of lib_name\n",
        "Line" : 182,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Check if lib itself is an external shared library\n",
        "Line" : 197,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Check if lib itself is an internal shared library\n",
        "Line" : 202,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# _target_link_libraries corresponds to original\n",
        "Line" : 210,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Recursively process dependencies\n",
        "Line" : 213,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 22
    },
    "CMakeModules/FindBoost.cmake" : {
      "ObjectId" : "5a76cc288fb4afa19d7fb0f0a9cc744abbd095e3",
      "LastModified" : "2014-02-14T11:00:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Boost include dirs and libraries\n\n# Usage of this module as follows:\n\n#\n\n#     SET(Boost_USE_STATIC_LIBS ON)\n\n#     SET(Boost_USE_MULTITHREAD OFF)\n\n#     FIND_PACKAGE( Boost 1.34.1 COMPONENTS date_time filesystem iostreams ... )\n\n#\n\n# The Boost_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# boost version numbers that should be taken into account when searching\n\n# for the libraries. Unfortunately boost puts the version number into the\n\n# actual filename for the libraries, so this might be needed in the future\n\n# when new Boost versions are released.\n\n#\n\n# Currently this module searches for the following version numbers:\n\n# 1.33, 1.33.0, 1.33.1, 1.34, 1.34.0, 1.34.1, 1.35, 1.35.0, 1.35.1, 1.36.0,\n\n# 1.36.1\n\n#\n\n# The components list needs to be the actual names of boost libraries, that is\n\n# the part of the actual library files that differ on different libraries. So\n\n# its \"date_time\" for \"libboost_date_time...\". Anything else will result in\n\n# errors\n\n#\n\n# You can provide a minimum version number that should be used. If you provide this \n\n# version number and specify the REQUIRED attribute, this module will fail if it\n\n# can't find the specified or a later version. If you specify a version number this is\n\n# automatically put into the considered list of version numbers and thus doesn't need\n\n# to be specified in the Boost_ADDITIONAL_VERSIONS variable\n\n#\n\n# Variables used by this module, they can change the default behaviour and need to be set\n\n# before calling find_package:\n\n#  Boost_USE_MULTITHREAD         Can be set to OFF to use the non-multithreaded\n\n#                                boost libraries. Defaults to ON.\n\n#  Boost_USE_STATIC_LIBS         Can be set to ON to force the use of the static\n\n#                                boost libraries. Defaults to OFF.\n\n#  Boost_ADDITIONAL_VERSIONS     A list of version numbers to use for searching\n\n#                                the boost include directory. The default list\n\n#                                of version numbers is:\n\n#                                1.33, 1.33.0, 1.33.1, 1.34, 1.34.0, 1.34.1, \n\n#                                1.35, 1.35.0, 1.35.1, 1.36.0, 1.36.1\n\n#                                If you want to look for an older or newer\n\n#                                version set this variable to a list of\n\n#                                strings, where each string contains a number, i.e.\n\n#                                SET(Boost_ADDITIONAL_VERSIONS \"0.99.0\" \"1.35.0\")\n\n#  BOOST_ROOT                    Preferred installation prefix for searching for Boost,\n\n#                                set this if the module has problems finding the proper Boost installation\n\n#  BOOST_INCLUDEDIR              Set this to the include directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#  BOOST_LIBRARYDIR              Set this to the lib directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#\n\n#  The last three variables are available also as environment variables\n\n#\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  Boost_FOUND                          System has Boost, this means the include dir was found,\n\n#                                       as well as all the libraries specified in the COMPONENTS list\n\n#  Boost_INCLUDE_DIRS                   Boost include directories, not cached\n\n#  Boost_INCLUDE_DIR                    This is almost the same as above, but this one is cached and may be\n\n#                                       modified by advanced users\n\n#  Boost_LIBRARIES                      Link these to use the Boost libraries that you specified, not cached\n\n#  Boost_LIBRARY_DIRS                   The path to where the Boost library files are.\n\n#  Boost_VERSION                        The version number of the boost libraries that have been found,\n\n#                                       same as in version.hpp from Boost\n\n#  Boost_LIB_VERSION                    The version number in filename form as its appended to the library filenames\n\n#  Boost_MAJOR_VERSION                  major version number of boost\n\n#  Boost_MINOR_VERSION                  minor version number of boost\n\n#  Boost_SUBMINOR_VERSION               subminor version number of boost\n\n#  Boost_LIB_DIAGNOSTIC_DEFINITIONS     Only set on windows. Can be used with add_definitions \n\n#                                       to print diagnostic information about the automatic \n\n#                                       linking done on windows.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For each component you list the following variables are set.\n\n# ATTENTION: The component names need to be in lower case, just as the boost\n\n# library names however the cmake variables use upper case for the component\n\n# part. So you'd get Boost_SERIALIZATION_FOUND for example.\n\n#\n\n#  Boost_${COMPONENT}_FOUND             True IF the Boost library \"component\" was found.\n\n#  Boost_${COMPONENT}_LIBRARY           The absolute path of the Boost library \"component\".\n\n#  Boost_${COMPONENT}_LIBRARY_DEBUG     The absolute path of the debug version of the\n\n#                                       Boost library \"component\".\n\n#  Boost_${COMPONENT}_LIBRARY_RELEASE   The absolute path of the release version of the\n\n#                                       Boost library \"component\"\n\n#\n\n#  Copyright (c) 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n#  Copyright (c) 2007      Wengo\n\n#  Copyright (c) 2007      Mike Jackson\n\n#  Copyright (c) 2008      Andreas Pakulat <apaku@gmx.de>\n\n#\n\n#  Redistribution AND use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this module required CMake 2.5 for the Boost_FIND_VERSION stuff\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# this must not be done in find modules, it changes the policy settings, which may have been\n\n# set in the projects cmake files.\n\n# beside that this module comes with cmake, so the cmake version is always correct, Alex\n\n# CMAKE_MINIMUM_REQUIRED(VERSION \"2.6\" FATAL_ERROR)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MESSAGE(STATUS \"Finding Boost libraries.... \")\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n#########################################################################\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(STATUS \"Adjusting ${basename} \")\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 125,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# in cache already\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Need to search for boost\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have to specify the libraries.\n\n# If you are linking to a dynamic runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You can alter this for a specific\n\n# library \"whatever\" by defining BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to\n\n# be linked dynamically.  Alternatively you can force all Boost libraries to dynamic link by\n\n# defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by defining BOOST_WHATEVER_NO_LIB,\n\n# or for all of Boost by defining BOOST_ALL_NO_LIB.\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# If you want to observe which libraries are being linked against then defining\n\n# BOOST_LIB_DIAGNOSTIC will cause the auto-linking code to emit a #pragma message each time\n\n# a library is selected for linking.\n",
        "Line" : 210,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# D: is very often the cdrom drive, IF you don't have a\n\n# cdrom inserted it will popup a very annoying dialog\n\n#D:/boost/include\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#Try first in our own include search paths (e.g. BOOST_ROOT)\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally we could\n\n# read this from version.hpp, but for that to work we'd need to know the include\n\n# dir already\n",
        "Line" : 266,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# If nothing is found search again using system default paths\n",
        "Line" : 290,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally we could\n\n# read this from version.hpp, but for that to work we'd need to know the include\n\n# dir already\n",
        "Line" : 294,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n\n# Read the whole file:\n\n#\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#Setting some more suffixes for the library\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# This is for the intel compiler\n",
        "Line" : 369,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#find out the version of gcc being used.\n",
        "Line" : 372,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 410,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# MESSAGE(STATUS \"Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}\")\n\n# MESSAGE(STATUS \"Boost_LIBRARIES: ${Boost_LIBRARIES}\")\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake 2.4\n",
        "Line" : 498,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_PATH may not exist.\n",
        "Line" : 500,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 510,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Under Windows, automatic linking is performed, so no need to specify the libraries.\n",
        "Line" : 557,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# show the Boost_INCLUDE_DIRS AND Boost_LIBRARIES variables only in the advanced view\n",
        "Line" : 564,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 36
    },
    "CMakeModules/FindCPPUNIT.cmake" : {
      "ObjectId" : "4ee00940d83b8b0ea836956bae1bd8594f829122",
      "LastModified" : "2014-02-14T11:00:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find the CppUnit includes and library\n\n#\n\n# This module defines\n\n# CPPUNIT_INCLUDE_DIR, where to find tiff.h, etc.\n\n# CPPUNIT_LIBRARIES, the libraries to link against to use CppUnit.\n\n# CPPUNIT_FOUND, If false, do not try to use CppUnit.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# also defined, but not for general use are\n\n# CPPUNIT_LIBRARY, where to find the CppUnit library.\n\n# CPPUNIT_DEBUG_LIBRARY, where to find the CppUnit library in debug\n\n# mode.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# With Win32, important to have both\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# On unix system, debug and release have the same name\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "CMakeModules/LininoBuild.cmake" : {
      "ObjectId" : "e75155bbf5051312e6f25cf033777685a9046554",
      "LastModified" : "2014-02-14T11:00:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n#\n\n#  Configure and build OpenWRT environement\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(_openwrt_url \"svn://svn.openwrt.org/openwrt/\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/add_boost.cmake" : {
      "ObjectId" : "bddf45c295fdd778022143af4bca4dd55d964e6e",
      "LastModified" : "2014-07-09T15:16:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==================================================================================================#\n\n#                                                                                                  #\n\n#  Copyright 2013 MaidSafe.net limited                                                             #\n\n#                                                                                                  #\n\n#  This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,        #\n\n#  version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which    #\n\n#  licence you accepted on initial access to the Software (the \"Licences\").                        #\n\n#                                                                                                  #\n\n#  By contributing code to the MaidSafe Software, or to this project generally, you agree to be    #\n\n#  bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root        #\n\n#  directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also available   #\n\n#  at: http://www.maidsafe.net/licenses                                                            #\n\n#                                                                                                  #\n\n#  Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed    #\n\n#  under the GPL Licence is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF   #\n\n#  ANY KIND, either express or implied.                                                            #\n\n#                                                                                                  #\n\n#  See the Licences for the specific language governing permissions and limitations relating to    #\n\n#  use of the MaidSafe Software.                                                                   #\n\n#                                                                                                  #\n\n#==================================================================================================#\n\n#                                                                                                  #\n\n#  Sets up Boost using ExternalProject_Add.                                                        #\n\n#                                                                                                  #\n\n#  Only the first 2 variables should require regular maintenance, i.e. BoostVersion & BoostSHA1.   #\n\n#                                                                                                  #\n\n#  If USE_BOOST_CACHE is set, boost is downloaded, extracted and built to a directory outside of   #\n\n#  the MaidSafe build tree.  The chosen directory can be set in BOOST_CACHE_DIR, or if this is     #\n\n#  empty, an appropriate default is chosen for the given platform.                                 #\n\n#                                                                                                  #\n\n#  Variables set and cached by this module are:                                                    #\n\n#    BoostSourceDir (required for subsequent include_directories calls) and per-library            #\n\n#    variables defining the libraries, e.g. BoostDateTimeLibs, BoostFilesystemLibs.                #\n\n#                                                                                                  #\n\n#==================================================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create build folder name derived from version\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If user wants to use a cache copy of Boost, get the path to this location.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If the cache directory doesn't exist, fall back to use the build root.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up the full path to the source directory\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check the full path to the source directory is not too long for Windows.  File paths must be less\n\n# than MAX_PATH which is 260.  The current longest relative path Boost tries to create is:\n\n# Build\\boost\\bin.v2\\libs\\program_options\\build\\fd41f4c7d882e24faa6837508d6e5384\\libboost_program_options-vc120-mt-gd-1_55.lib.rsp\n\n# which along with a leading separator is 129 chars in length.  This gives a maximum path available\n\n# for 'BoostSourceDir' as 130 chars.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Download boost if required\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Extract boost if required\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Get the path to the extracted folder\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Set up general b2 (bjam) command line arguments\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set up platform-specific b2 (bjam) command line arguments\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Need to configure the toolset based on whatever version CMAKE_CXX_COMPILER is\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Start boost build\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Create the directory\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Clean\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "CMakeModules/add_protoc_command.cmake" : {
      "ObjectId" : "f916b9d51e25f7cd33fe095707676bbf7ae95b41",
      "LastModified" : "2014-06-23T09:05:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==================================================================================================#\n\n#                                                                                                  #\n\n#  Copyright 2012 MaidSafe.net limited                                                             #\n\n#                                                                                                  #\n\n#  This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,        #\n\n#  version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which    #\n\n#  licence you accepted on initial access to the Software (the \"Licences\").                        #\n\n#                                                                                                  #\n\n#  By contributing code to the MaidSafe Software, or to this project generally, you agree to be    #\n\n#  bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root        #\n\n#  directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also available   #\n\n#  at: http://www.maidsafe.net/licenses                                                            #\n\n#                                                                                                  #\n\n#  Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed    #\n\n#  under the GPL Licence is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF   #\n\n#  ANY KIND, either express or implied.                                                            #\n\n#                                                                                                  #\n\n#  See the Licences for the specific language governing permissions and limitations relating to    #\n\n#  use of the MaidSafe Software.                                                                   #\n\n#                                                                                                  #\n\n#==================================================================================================#\n\n#                                                                                                  #\n\n#  Module used to run Google Protocol Buffers compiler against .proto files in a given source      #\n\n#  directory.                                                                                      #\n\n#                                                                                                  #\n\n#  The function searches the source directory for .proto files and adds a custom command to        #\n\n#  generate the .pb.cc and pb.h files to an output directory in the build tree.  Any CMake target  #\n\n#  which includes these files will cause them to be generated if they don't currently exist.       #\n\n#                                                                                                  #\n\n#  The output directory is passed to 'include_directories' to add it to the includes search path.  #\n\n#                                                                                                  #\n\n#  The function's signature contains the following variables:                                      #\n\n#    * BaseName -         name of variable which forms prefix of output variables.                 #\n\n#    * ProtoRootDir -     full path to a directory.  This is passed as the first --proto_path arg  #\n\n#                         argument and so defines the \"missing\" part of the relative path used in  #\n\n#                         the generated pb.ccs' #include statements.                               #\n\n#    * ProtoRelativeDir - path relative to ${ProtoRootDir} which will be searched for .proto       #\n\n#                         files.  May contain 0 .proto files.                                      #\n\n#                                                                                                  #\n\n#  Any extra variables passed are assumed to be full paths to import directories, and are passed   #\n\n#  as --proto_path arguments to protoc in the order in which they are passed.                      #\n\n#                                                                                                  #\n\n#  The function exports the following variables to the parent namespace:                           #\n\n#    * ${BaseName}ProtoSources - list of full path of all generated .pb.cc files.                  #\n\n#    * ${BaseName}ProtoHeaders - list of full path of all generated .pb.h files.                   #\n\n#    * ${BaseName}Protos -       list of full path to all .proto files in the source directory     #\n\n#                                along with contents of '${BaseName}ProtoSources' and              #\n\n#                                '${BaseName}ProtoHeaders'                                         #\n\n#                                                                                                  #\n\n#==================================================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get list of .proto files\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Search for and remove old generated .pb.cc and .pb.h files in the output dir\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Set up protoc arguments\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Add custom command to generate CC and header files\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "CMakeModules/utils.cmake" : {
      "ObjectId" : "d4c7713b5b0cacb3a462ab8a4764cbff99b52aa6",
      "LastModified" : "2014-06-23T09:05:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==================================================================================================#\n\n#                                                                                                  #\n\n#  Copyright 2012 MaidSafe.net limited                                                             #\n\n#                                                                                                  #\n\n#  This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,        #\n\n#  version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which    #\n\n#  licence you accepted on initial access to the Software (the \"Licences\").                        #\n\n#                                                                                                  #\n\n#  By contributing code to the MaidSafe Software, or to this project generally, you agree to be    #\n\n#  bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root        #\n\n#  directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also available   #\n\n#  at: http://www.maidsafe.net/licenses                                                            #\n\n#                                                                                                  #\n\n#  Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed    #\n\n#  under the GPL Licence is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF   #\n\n#  ANY KIND, either express or implied.                                                            #\n\n#                                                                                                  #\n\n#  See the Licences for the specific language governing permissions and limitations relating to    #\n\n#  use of the MaidSafe Software.                                                                   #\n\n#                                                                                                  #\n\n#==================================================================================================#\n\n#                                                                                                  #\n\n#  Utility functions.                                                                              #\n\n#                                                                                                  #\n\n#==================================================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Oddly cmake is fairly limited in standard platform defines\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If the path to the CMAKE_CXX_COMPILER doesn't change, CMake doesn't detect a version change\n\n# in the compiler.  We cache the output of running the compiler with '--version' and check\n\n# on each subsequent configure that the output is identical.  Note, with MSVC the command\n\n# fails ('--version' is an unrecognised arg), but still outputs the comiler version.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# i.e for MSVC < Visual Studio 12\n",
        "Line" : 87,
        "CharPositionInLine" : 54
      },
      "4" : {
        "Text" : "# Creates variables as a result of globbing the given directory and corresponding \"includes\" dir.\n\n# Example usage:\n\n# > ms_glob_dir(DataHolder ${PROJECT_SOURCE_DIR}/src/maidsafe/vault/data_holder \"Data Holder\\\\\\\\\")\n\n# Available variables are ${DataHolderApi}, ${DataHolderSources}, ${DataHolderHeaders},\n\n# ${DataHolderProtos} and ${DataHolderAllFiles}.  ${DataHolderProtos} contains the contents of\n\n# ${DataHolderProtoSources}, ${DataHolderProtoHeaders} and all .proto files.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Adds a static library with CMake Target name of \"${Lib}\".\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Adds an executable with CMake Target name of \"${Exe}\".\n\n# \"${FolderName}\" defines the folder in which the executable appears if the\n\n# chosen IDE supports folders for projects.  The exe will have the preprocessor definition\n\n# APPLICATION_NAME=${AppName}.  AppName is the value of ${Exe}Name if it exists, otherwise it's the\n\n# camel-case name of the exe.  (e.g. the exe 'test_common', will have APPLICATION_NAME=TestCommon\n\n# unless 'test_commonName' is set, in which case it will have APPLICATION_NAME=${test_commonName})\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Workaround for the Xcode's missing ability to pass -isystem to the compiler.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Adds two targets to the current project; AllXXX and ExperXXX where XXX is the project name.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Moves executable files found within the build tree which don't match current target filenames to\n\n# a directory named 'old' in the build tree root.  This avoids accidentally running outdated\n\n# executables in the case of renaming a CMake Target.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#    file(GLOB_RECURSE BuiltExes RELATIVE ${CMAKE_BINARY_DIR} \"${CMAKE_BINARY_DIR}/*.exe\")\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Gets the path to the temp directory using the same method as Boost.Filesystem:\n\n# http://www.boost.org/doc/libs/release/libs/filesystem/doc/reference.html#temp_directory_path\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Searches for and removes old test directories that may have been left in %temp%\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find MaidSafe-specific directories\n",
        "Line" : 329,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Get directories which are > 1 day old\n",
        "Line" : 339,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Remove out-of-date directories\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Set up CI test scripts\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Gets and caches the target platform name\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# See http://en.wikipedia.org/wiki/Comparison_of_Windows_versions\n",
        "Line" : 466,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Windows 8\n",
        "Line" : 468,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Windows 7, Windows Server 2008 R2, Windows Home Server 2011\n",
        "Line" : 471,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Windows Server 2008\n",
        "Line" : 474,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# See http://en.wikipedia.org/wiki/Darwin_%28operating_system%29\n",
        "Line" : 481,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# OS X v10.8 \"Mountain Lion\"\n",
        "Line" : 485,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# OS X v10.9 \"Mavericks\"\n",
        "Line" : 488,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# Gets and caches the target architecture\n\n# Copied from https://github.com/petroules/solar-cmake/blob/master/TargetArch.cmake\n\n# and described at http://stackoverflow.com/a/12024211/424459\n\n#\n\n# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 512,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 515,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 521,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 537,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n\n#\n\n# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 605,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 620,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 623,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 626,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Gets all dependencies for the given Target\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Recursively get all dependencies\n",
        "Line" : 640,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Remove duplicates\n",
        "Line" : 674,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Sort into Release and Debug\n",
        "Line" : 688,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Copy into parent scope\n",
        "Line" : 711,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Sets up the custom commands needed by the 'configure_meta_files.cmake' for\n\n# auto-generating Message typedefs and boost::variants of these.\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# An apparent bug in CMake means that file(READ...) can only be done from within\n\n# CMAKE_CURRENT_BINARY_DIR.  Hence message_types.meta files are copied here to allow\n\n# configure_meta_files.cmake to work.\n",
        "Line" : 721,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Grab the list of files currently in the binary dir and remove any which are no longer required\n",
        "Line" : 736,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# This removes the contents between all C++ block comments (i.e. /* ... */) for a C++ file whose\n\n# contents have been read into '${CppCode}'.\n",
        "Line" : 776,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# This creates a folder in the build root named 'temp/<today's date>' and removes any old versions\n\n# of such folders.  The name of today's folder is set in 'TodaysTempFolder'.  Since the folder is\n\n# regularly deleted, it should *not* be used for files which are needed at build- or run-time.\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Sets a factor by which all test timeouts are multiplied.  'TimeoutFactor' must be > 1 and need not be an integer.\n",
        "Line" : 807,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# We won't decrease the existing factor.\n",
        "Line" : 813,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Applies the global timeout factor if it exists.\n",
        "Line" : 820,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 48
    },
    "kevoree-core/CMakeLists.txt" : {
      "ObjectId" : "8143d4baa2d0b3fec665120613e318f450a590e6",
      "LastModified" : "2014-09-03T08:00:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#************************************** INSTALL ****************************************************\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kevoree-core/kevscript/CMakeLists.txt" : {
      "ObjectId" : "06b7be978fe7dc9ad06be06dae875fd874c713aa",
      "LastModified" : "2014-09-04T09:10:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIX ME REMOVE \n",
        "Line" : 30,
        "CharPositionInLine" : 50
      },
      "1" : {
        "Text" : "##install(TARGETS kevscript   DESTINATION  ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)\n\n#install(TARGETS waxeye   DESTINATION  ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_executable(\n\n#        kevscript-parser\n\n#        ${kevscript_files}\n\n#)\n\n#TARGET_LINK_LIBRARIES(kevscript-parser waxeye )",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "kevoree-core/model/CMakeLists.txt" : {
      "ObjectId" : "fdad3d50500ea8b679503e7051e08166ca3a98f6",
      "LastModified" : "2014-09-04T08:10:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}/lib)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#************************************** INSTALL ****************************************************\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kevoree-library/cppNode/pom.xml" : {
      "ObjectId" : "07a6f22e10a7f51deaa50ad98a2106dc9bc924ee",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-library/facialRecognation/CMakeLists.txt" : {
      "ObjectId" : "83650f067931ed96735c3e5d6524915fd73c4b8c",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kevoree-library/facialRecognation/pom.xml" : {
      "ObjectId" : "087dcbfee5bc8124198a708c6184fd68987e7aab",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-library/fakeConsole/pom.xml" : {
      "ObjectId" : "29c6ef5ad13ffc88e31a33e0a598018423f3f744",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-library/helloWorldComponent/pom.xml" : {
      "ObjectId" : "907931ae7f3cea096c925e0b49d1acdc72edc97b",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-library/pom.xml" : {
      "ObjectId" : "cfaa2c666cfa1c6eb3ac35b6610fbd5c6148cf57",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-library/sharedMemoryChannel/pom.xml" : {
      "ObjectId" : "64875af57877cd3ac313ef7b75c66b24df62d21d",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-library/webSocketGroup/pom.xml" : {
      "ObjectId" : "aa329a79cf065b2436cb84db859ab87b252b4930",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-library/webSocketGroup/websocketpp/CMakeLists.txt" : {
      "ObjectId" : "3ea8cc1c4e66a8bf34278d90c941f3f6cd06c2b0",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kevoree-logger/CMakeLists.txt" : {
      "ObjectId" : "ba8a1d042a02c91e680751e17dc4f7c9671f2d77",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${HEADERS_MOC}\n",
        "Line" : 10,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 1
    },
    "kevoree-platform/CMakeLists.txt" : {
      "ObjectId" : "2de3756dea6b0da0525f26765ced85bb16a6b3b9",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#COMPILE MAIN\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kevoree-tools/Archetypes_Maven/Kevoree-Components-Archetypes/archetype/pom.xml" : {
      "ObjectId" : "4cb604f0b1e35e888d0549ebd0786208a7d06832",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-tools/Archetypes_Maven/Kevoree-Components-Archetypes/archetype/src/main/resources/archetype-resources/pom.xml" : {
      "ObjectId" : "b051ebcaf0f1c51849e4f8e17e3e2da469f66a83",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-tools/CMakeLists.txt" : {
      "ObjectId" : "49ae798229933c831291556e0ef0c3bf976e24fc",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kevoree-tools/java/org.kevoree.tools.cpp.mavenplugin/pom.xml" : {
      "ObjectId" : "3f45ab6d9cc8aa00e31cb556faf2655f8d8bb716",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-tools/java/org.kevoree.tools.cpp.preprocessor/pom.xml" : {
      "ObjectId" : "4f302c42b6014c0e651ce44b2ac13356178dbf8c",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-tools/java/org.kevoree.tools.cpp.pusher/pom.xml" : {
      "ObjectId" : "29d0b3dc5b88f78e3c4474bdcb382fa00a8fd680",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "kevoree-tools/java/pom.xml" : {
      "ObjectId" : "3224d544055100ff7b2d0bdeea3bb8fb24bb4db7",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "pom.xml" : {
      "ObjectId" : "121039ed236ab7dcb78ed21d66ffe280cd32aa8c",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "a736f90ae825603a3371cc18a9af069fe6214bf3",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/src/CTestTestfile.cmake" : {
      "ObjectId" : "772ddb20ad91a3c7282072f6b13ec4de3b15071a",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/Toolchain-gcc-arm-embedded.cmake" : {
      "ObjectId" : "b5d1c03804ee0f62f47a0040e7e45e7403c26dd8",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake Toolchain file for the gcc-arm-embedded toolchain.\n\n# https://launchpad.net/gcc-arm-embedded\n\n#\n\n# Copyright (c) 2013 Swift Navigation Inc.\n\n# Contact: Fergus Noble <fergus@swift-nav.com>\n\n#\n\n# This source is subject to the license found in the file 'LICENSE' which must\n\n# be be distributed together with this source. All other rights reserved.\n\n#\n\n# THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\n\n# EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Targeting an embedded system, no OS.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the target environment prefix..\n\n# First see where gcc is keeping libc.a\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Strip the filename off\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Then find the canonical path to the directory one up from there\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# When we break up long strings in CMake we get semicolon\n\n# separated lists, undo this here...\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "toolchain/android.toolchain.cmake" : {
      "ObjectId" : "d349b0c64fe8adae2de3508f521bb00959e8fc63",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2010-2011, Ethan Rublee\n\n# Copyright (c) 2011-2013, Andrey Kamaev\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# 1.  Redistributions of source code must retain the above copyright notice,\n\n#     this list of conditions and the following disclaimer.\n\n#\n\n# 2.  Redistributions in binary form must reproduce the above copyright notice,\n\n#     this list of conditions and the following disclaimer in the documentation\n\n#     and/or other materials provided with the distribution.\n\n#\n\n# 3.  The name of the copyright holders may be used to endorse or promote\n\n#     products derived from this software without specific prior written\n\n#     permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ------------------------------------------------------------------------------\n\n#  Android CMake toolchain file, for use with the Android NDK r5-r9\n\n#  Requires cmake 2.6.3 or newer (2.8.5 or newer is recommended).\n\n#  See home page: https://github.com/taka-no-me/android-cmake\n\n#\n\n#  The file is mantained by the OpenCV project. The latest version can be get at\n\n#  http://code.opencv.org/projects/opencv/repository/revisions/master/changes/android/android.toolchain.cmake\n\n#\n\n#  Usage Linux:\n\n#   $ export ANDROID_NDK=/absolute/path/to/the/android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Linux (using standalone toolchain):\n\n#   $ export ANDROID_STANDALONE_TOOLCHAIN=/absolute/path/to/android-toolchain\n\n#   $ mkdir build && cd build\n\n#   $ cmake -DCMAKE_TOOLCHAIN_FILE=path/to/the/android.toolchain.cmake ..\n\n#   $ make -j8\n\n#\n\n#  Usage Windows:\n\n#     You need native port of make to build your project.\n\n#     Android NDK r7 (or newer) already has make.exe on board.\n\n#     For older NDK you have to install it separately.\n\n#     For example, this one: http://gnuwin32.sourceforge.net/packages/make.htm\n\n#\n\n#   $ SET ANDROID_NDK=C:\\absolute\\path\\to\\the\\android-ndk\n\n#   $ mkdir build && cd build\n\n#   $ cmake.exe -G\"MinGW Makefiles\"\n\n#       -DCMAKE_TOOLCHAIN_FILE=path\\to\\the\\android.toolchain.cmake\n\n#       -DCMAKE_MAKE_PROGRAM=\"%ANDROID_NDK%\\prebuilt\\windows\\bin\\make.exe\" ..\n\n#   $ cmake.exe --build .\n\n#\n\n#\n\n#  Options (can be set as cmake parameters: -D<option_name>=<value>):\n\n#    ANDROID_NDK=/opt/android-ndk - path to the NDK root.\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_STANDALONE_TOOLCHAIN=/opt/android-toolchain - path to the\n\n#      standalone toolchain. This option is not used if full NDK is found\n\n#      (ignored if ANDROID_NDK is set).\n\n#      Can be set as environment variable. Can be set only at first cmake run.\n\n#\n\n#    ANDROID_ABI=armeabi-v7a - specifies the target Application Binary\n\n#      Interface (ABI). This option nearly matches to the APP_ABI variable\n\n#      used by ndk-build tool from Android NDK.\n\n#\n\n#      Possible targets are:\n\n#        \"armeabi\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a\" - matches to the NDK ABI with the same name.\n\n#           See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"armeabi-v7a with NEON\" - same as armeabi-v7a, but\n\n#            sets NEON as floating-point unit\n\n#        \"armeabi-v7a with VFPV3\" - same as armeabi-v7a, but\n\n#            sets VFPV3 as floating-point unit (has 32 registers instead of 16).\n\n#        \"armeabi-v6 with VFP\" - tuned for ARMv6 processors having VFP.\n\n#        \"x86\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#        \"mips\" - matches to the NDK ABI with the same name.\n\n#            See ${ANDROID_NDK}/docs/CPU-ARCH-ABIS.html for the documentation.\n\n#\n\n#    ANDROID_NATIVE_API_LEVEL=android-8 - level of Android API compile for.\n\n#      Option is read-only when standalone toolchain is used.\n\n#\n\n#    ANDROID_TOOLCHAIN_NAME=arm-linux-androideabi-4.6 - the name of compiler\n\n#      toolchain to be used. The list of possible values depends on the NDK\n\n#      version. For NDK r8c the possible values are:\n\n#\n\n#        * arm-linux-androideabi-4.4.3\n\n#        * arm-linux-androideabi-4.6\n\n#        * arm-linux-androideabi-clang3.1\n\n#        * mipsel-linux-android-4.4.3\n\n#        * mipsel-linux-android-4.6\n\n#        * mipsel-linux-android-clang3.1\n\n#        * x86-4.4.3\n\n#        * x86-4.6\n\n#        * x86-clang3.1\n\n#\n\n#    ANDROID_FORCE_ARM_BUILD=OFF - set ON to generate 32-bit ARM instructions\n\n#      instead of Thumb. Is not available for \"x86\" (inapplicable) and\n\n#      \"armeabi-v6 with VFP\" (is forced to be ON) ABIs.\n\n#\n\n#    ANDROID_NO_UNDEFINED=ON - set ON to show all undefined symbols as linker\n\n#      errors even if they are not used.\n\n#\n\n#    ANDROID_SO_UNDEFINED=OFF - set ON to allow undefined symbols in shared\n\n#      libraries. Automatically turned for NDK r5x and r6x due to GLESv2\n\n#      problems.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT=${CMAKE_SOURCE_DIR} - where to output binary\n\n#      files. See additional details below.\n\n#\n\n#    ANDROID_SET_OBSOLETE_VARIABLES=ON - if set, then toolchain defines some\n\n#      obsolete variables which were used by previous versions of this file for\n\n#      backward compatibility.\n\n#\n\n#    ANDROID_STL=gnustl_static - specify the runtime to use.\n\n#\n\n#      Possible values are:\n\n#        none           -> Do not configure the runtime.\n\n#        system         -> Use the default minimal system C++ runtime library.\n\n#                          Implies -fno-rtti -fno-exceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        system_re      -> Use the default minimal system C++ runtime library.\n\n#                          Implies -frtti -fexceptions.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_static  -> Use the GAbi++ runtime as a static library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gabi++_shared  -> Use the GAbi++ runtime as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_static -> Use the STLport runtime as a static library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        stlport_shared -> Use the STLport runtime as a shared library.\n\n#                          Implies -fno-rtti -fno-exceptions for NDK before r7.\n\n#                          Implies -frtti -fno-exceptions for NDK r7 and newer.\n\n#                          Is not available for standalone toolchain.\n\n#        gnustl_static  -> Use the GNU STL as a static library.\n\n#                          Implies -frtti -fexceptions.\n\n#        gnustl_shared  -> Use the GNU STL as a shared library.\n\n#                          Implies -frtti -fno-exceptions.\n\n#                          Available for NDK r7b and newer.\n\n#                          Silently degrades to gnustl_static if not available.\n\n#\n\n#    ANDROID_STL_FORCE_FEATURES=ON - turn rtti and exceptions support based on\n\n#      chosen runtime. If disabled, then the user is responsible for settings\n\n#      these options.\n\n#\n\n#  What?:\n\n#    android-cmake toolchain searches for NDK/toolchain in the following order:\n\n#      ANDROID_NDK - cmake parameter\n\n#      ANDROID_NDK - environment variable\n\n#      ANDROID_STANDALONE_TOOLCHAIN - cmake parameter\n\n#      ANDROID_STANDALONE_TOOLCHAIN - environment variable\n\n#      ANDROID_NDK - default locations\n\n#      ANDROID_STANDALONE_TOOLCHAIN - default locations\n\n#\n\n#    Make sure to do the following in your scripts:\n\n#      SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${my_cxx_flags}\" )\n\n#      SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${my_cxx_flags}\" )\n\n#    The flags will be prepopulated with critical flags, so don't loose them.\n\n#    Also be aware that toolchain also sets configuration-specific compiler\n\n#    flags and linker flags.\n\n#\n\n#    ANDROID and BUILD_ANDROID will be set to true, you may test any of these\n\n#    variables to make necessary Android-specific configuration changes.\n\n#\n\n#    Also ARMEABI or ARMEABI_V7A or X86 or MIPS will be set true, mutually\n\n#    exclusive. NEON option will be set true if VFP is set to NEON.\n\n#\n\n#    LIBRARY_OUTPUT_PATH_ROOT should be set in cache to determine where Android\n\n#    libraries will be installed.\n\n#    Default is ${CMAKE_SOURCE_DIR}, and the android libs will always be\n\n#    under the ${LIBRARY_OUTPUT_PATH_ROOT}/libs/${ANDROID_NDK_ABI_NAME}\n\n#    (depending on the target ABI). This is convenient for Android packaging.\n\n#\n\n#  Change Log:\n\n#   - initial version December 2010\n\n#   - April 2011\n\n#     [+] added possibility to build with NDK (without standalone toolchain)\n\n#     [+] support cross-compilation on Windows (native, no cygwin support)\n\n#     [+] added compiler option to force \"char\" type to be signed\n\n#     [+] added toolchain option to compile to 32-bit ARM instructions\n\n#     [+] added toolchain option to disable SWIG search\n\n#     [+] added platform \"armeabi-v7a with VFPV3\"\n\n#     [~] ARM_TARGETS renamed to ARM_TARGET\n\n#     [+] EXECUTABLE_OUTPUT_PATH is set by toolchain (required on Windows)\n\n#     [~] Fixed bug with ANDROID_API_LEVEL variable\n\n#     [~] turn off SWIG search if it is not found first time\n\n#   - May 2011\n\n#     [~] ANDROID_LEVEL is renamed to ANDROID_API_LEVEL\n\n#     [+] ANDROID_API_LEVEL is detected by toolchain if not specified\n\n#     [~] added guard to prevent changing of output directories on the first\n\n#         cmake pass\n\n#     [~] toolchain exits with error if ARM_TARGET is not recognized\n\n#   - June 2011\n\n#     [~] default NDK path is updated for version r5c\n\n#     [+] variable CMAKE_SYSTEM_PROCESSOR is set based on ARM_TARGET\n\n#     [~] toolchain install directory is added to linker paths\n\n#     [-] removed SWIG-related stuff from toolchain\n\n#     [+] added macro find_host_package, find_host_program to search\n\n#         packages/programs on the host system\n\n#     [~] fixed path to STL library\n\n#   - July 2011\n\n#     [~] fixed options caching\n\n#     [~] search for all supported NDK versions\n\n#     [~] allowed spaces in NDK path\n\n#   - September 2011\n\n#     [~] updated for NDK r6b\n\n#   - November 2011\n\n#     [*] rewritten for NDK r7\n\n#     [+] x86 toolchain support (experimental)\n\n#     [+] added \"armeabi-v6 with VFP\" ABI for ARMv6 processors.\n\n#     [~] improved compiler and linker flags management\n\n#     [+] support different build flags for Release and Debug configurations\n\n#     [~] by default compiler flags the same as used by ndk-build (but only\n\n#         where reasonable)\n\n#     [~] ANDROID_NDK_TOOLCHAIN_ROOT is splitted to ANDROID_STANDALONE_TOOLCHAIN\n\n#         and ANDROID_TOOLCHAIN_ROOT\n\n#     [~] ARM_TARGET is renamed to ANDROID_ABI\n\n#     [~] ARMEABI_NDK_NAME is renamed to ANDROID_NDK_ABI_NAME\n\n#     [~] ANDROID_API_LEVEL is renamed to ANDROID_NATIVE_API_LEVEL\n\n#   - January 2012\n\n#     [+] added stlport_static support (experimental)\n\n#     [+] added special check for cygwin\n\n#     [+] filtered out hidden files (starting with .) while globbing inside NDK\n\n#     [+] automatically applied GLESv2 linkage fix for NDK revisions 5-6\n\n#     [+] added ANDROID_GET_ABI_RAWNAME to get NDK ABI names by CMake flags\n\n#   - February 2012\n\n#     [+] updated for NDK r7b\n\n#     [~] fixed cmake try_compile() command\n\n#     [~] Fix for missing install_name_tool on OS X\n\n#   - March 2012\n\n#     [~] fixed incorrect C compiler flags\n\n#     [~] fixed CMAKE_SYSTEM_PROCESSOR change on ANDROID_ABI change\n\n#     [+] improved toolchain loading speed\n\n#     [+] added assembler language support (.S)\n\n#     [+] allowed preset search paths and extra search suffixes\n\n#   - April 2012\n\n#     [+] updated for NDK r7c\n\n#     [~] fixed most of problems with compiler/linker flags and caching\n\n#     [+] added option ANDROID_FUNCTION_LEVEL_LINKING\n\n#   - May 2012\n\n#     [+] updated for NDK r8\n\n#     [+] added mips architecture support\n\n#   - August 2012\n\n#     [+] updated for NDK r8b\n\n#     [~] all intermediate files generated by toolchain are moved to CMakeFiles\n\n#     [~] libstdc++ and libsupc are removed from explicit link libraries\n\n#     [+] added CCache support (via NDK_CCACHE environment or cmake variable)\n\n#     [+] added gold linker support for NDK r8b\n\n#     [~] fixed mips linker flags for NDK r8b\n\n#   - September 2012\n\n#     [+] added NDK release name detection (see ANDROID_NDK_RELEASE)\n\n#     [+] added support for all C++ runtimes from NDK\n\n#         (system, gabi++, stlport, gnustl)\n\n#     [+] improved warnings on known issues of NDKs\n\n#     [~] use gold linker as default if available (NDK r8b)\n\n#     [~] globally turned off rpath\n\n#     [~] compiler options are aligned with NDK r8b\n\n#   - October 2012\n\n#     [~] fixed C++ linking: explicitly link with math library (OpenCV #2426)\n\n#   - November 2012\n\n#     [+] updated for NDK r8c\n\n#     [+] added support for clang compiler\n\n#   - December 2012\n\n#     [+] suppress warning about unused CMAKE_TOOLCHAIN_FILE variable\n\n#     [+] adjust API level to closest compatible as NDK does\n\n#     [~] fixed ccache full path search\n\n#     [+] updated for NDK r8d\n\n#     [~] compiler options are aligned with NDK r8d\n\n#   - March 2013\n\n#     [+] updated for NDK r8e (x86 version)\n\n#     [+] support x86_64 version of NDK\n\n#   - April 2013\n\n#     [+] support non-release NDK layouts (from Linaro git and Android git)\n\n#     [~] automatically detect if explicit link to crtbegin_*.o is needed\n\n#   - June 2013\n\n#     [~] fixed stl include path for standalone toolchain made by NDK >= r8c\n\n#   - July 2013\n\n#     [+] updated for NDK r9\n\n#   - November 2013\n\n#     [+] updated for NDK r9b\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 305,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# touch toolchain variable only to suppress \"unused variable\" warning\n",
        "Line" : 310,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# this one is important\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this one not so much\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rpath makes low sence for Android\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# fight against cygwin\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# remove cygwin from PATH\n",
        "Line" : 462,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# detect current host platform\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# see if we have path to Android NDK\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# see if we have path to Android standalone toolchain\n",
        "Line" : 499,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#try to find Android NDK in one of the the default locations\n",
        "Line" : 503,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#try to find Android standalone toolchain in one of the the default locations\n",
        "Line" : 517,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# remember found paths\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# try to detect change\n",
        "Line" : 542,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# android NDK layout\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# try to automatically detect the layout\n",
        "Line" : 569,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 581,
        "CharPositionInLine" : 71
      },
      "19" : {
        "Text" : "# only 32-bit at the moment\n",
        "Line" : 586,
        "CharPositionInLine" : 71
      },
      "20" : {
        "Text" : "# ANDROID_NDK_LAYOUT STREQUAL \"RELEASE\"\n",
        "Line" : 590,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# try to detect change of NDK\n",
        "Line" : 597,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# get all the details about standalone toolchain\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# get all the details about NDK\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# do not go through all toolchains if we know the name\n",
        "Line" : 673,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# we need clang to go after gcc\n",
        "Line" : 686,
        "CharPositionInLine" : 39
      },
      "26" : {
        "Text" : "# build list of available ABIs\n",
        "Line" : 704,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# choose target ABI\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# verify that target ABI is supported\n",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# set target ABI options\n",
        "Line" : 729,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# need always fallback to older platform\n",
        "Line" : 758,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# really dirty hack\n\n# it is not possible to change CMAKE_SYSTEM_PROCESSOR after the first run...\n",
        "Line" : 789,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# choose toolchain\n",
        "Line" : 802,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# choose native API level\n",
        "Line" : 851,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# adjust API level\n",
        "Line" : 854,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# validate\n",
        "Line" : 866,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# remember target ABI\n",
        "Line" : 887,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# runtime choice (STL, rtti, exceptions)\n",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# honor legacy ANDROID_USE_STLPORT\n",
        "Line" : 897,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# setup paths and STL for standalone toolchain\n",
        "Line" : 972,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# old location ( pre r8c )\n",
        "Line" : 981,
        "CharPositionInLine" : 3
      },
      "41" : {
        "Text" : "# always search static GNU STL to get the location of libsupc++.a\n",
        "Line" : 991,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# clang\n",
        "Line" : 1026,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# setup paths and STL for NDK\n",
        "Line" : 1050,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# do nothing\n",
        "Line" : 1056,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# gnustl binary for 4.7 compiler is buggy :(\n\n# TODO: look for right fix\n",
        "Line" : 1091,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# find libsupc++.a - rtti & exceptions\n",
        "Line" : 1109,
        "CharPositionInLine" : 1
      },
      "47" : {
        "Text" : "# r8b or newer\n",
        "Line" : 1111,
        "CharPositionInLine" : 137
      },
      "48" : {
        "Text" : "# r7-r8\n",
        "Line" : 1113,
        "CharPositionInLine" : 110
      },
      "49" : {
        "Text" : "# before r7\n",
        "Line" : 1115,
        "CharPositionInLine" : 36
      },
      "50" : {
        "Text" : "# case of shared STL linkage\n",
        "Line" : 1135,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# ccache support\n",
        "Line" : 1150,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# setup the cross-compiler\n",
        "Line" : 1163,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Force set compilers because standard identification works badly for us\n",
        "Line" : 1206,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# force ASM compiler (required for CMake < 2.8.5)\n",
        "Line" : 1225,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# flags and definitions\n",
        "Line" : 1233,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# try to convert path to 8.3 form\n",
        "Line" : 1239,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# quotes can break try_compile and compiler identification\n",
        "Line" : 1254,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# NDK flags\n",
        "Line" : 1261,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# always compile ARMEABI_V6 in arm mode; otherwise there is no difference from ARMEABI\n",
        "Line" : 1271,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# good/necessary when porting desktop libraries\n",
        "Line" : 1300,
        "CharPositionInLine" : 62
      },
      "61" : {
        "Text" : "# see https://android-review.googlesource.com/#/c/47564/\n",
        "Line" : 1307,
        "CharPositionInLine" : 72
      },
      "62" : {
        "Text" : "# ABI-specific flags\n",
        "Line" : 1310,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# vfp == vfpv2\n",
        "Line" : 1321,
        "CharPositionInLine" : 91
      },
      "64" : {
        "Text" : "# STL\n",
        "Line" : 1336,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# C objects:\n",
        "Line" : 1347,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# variables controlling optional build flags\n",
        "Line" : 1365,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# libGLESv2.so in NDK's prior to r7 refers to missing external symbols.\n\n# So this flag option is required for all projects using OpenGL from native.\n",
        "Line" : 1367,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# linker flags\n",
        "Line" : 1387,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# this is *required* to use the following linker flags that routes around\n\n# a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 1391,
        "CharPositionInLine" : 1
      },
      "70" : {
        "Text" : "# there is some sysroot-related problem in mips linker...\n",
        "Line" : 1398,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# version 4.6\n",
        "Line" : 1427,
        "CharPositionInLine" : 8
      },
      "72" : {
        "Text" : "# cache flags\n",
        "Line" : 1455,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# put flags to cache (for debug purpose only)\n",
        "Line" : 1466,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# finish flags\n",
        "Line" : 1472,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# configure rtti\n",
        "Line" : 1489,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# configure exceptios\n",
        "Line" : 1498,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# global includes and link directories\n",
        "Line" : 1509,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# detect if need link crtbegin_so.o explicitly\n",
        "Line" : 1513,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# setup output directories\n",
        "Line" : 1550,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# set these global flags for cmake client scripts to change behavior\n",
        "Line" : 1563,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# where is the target environment\n",
        "Line" : 1567,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 1570,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# macro to find packages on the host OS\n",
        "Line" : 1576,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# macro to find programs on the host OS\n",
        "Line" : 1598,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# export toolchain settings for the try_compile() command\n",
        "Line" : 1635,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# force cmake to produce / instead of \\ in build commands for Ninja generator\n",
        "Line" : 1671,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# it is a bad hack after all\n\n# CMake generates Ninja makefiles with UNIX paths only if it thinks that we are going to build with MinGW\n",
        "Line" : 1673,
        "CharPositionInLine" : 1
      },
      "88" : {
        "Text" : "# tell CMake that we are MinGW\n\n# stop recursion\n",
        "Line" : 1675,
        "CharPositionInLine" : 37
      },
      "89" : {
        "Text" : "# unset( CMAKE_COMPILER_IS_MINGW ) # can't unset because CMake does not convert back-slashes in response files without it\n",
        "Line" : 1679,
        "CharPositionInLine" : 1
      },
      "90" : {
        "Text" : "# set some obsolete variables for backward compatibility\n",
        "Line" : 1684,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Variables controlling behavior or set by cmake toolchain:\n\n#   ANDROID_ABI : \"armeabi-v7a\" (default), \"armeabi\", \"armeabi-v7a with NEON\", \"armeabi-v7a with VFPV3\", \"armeabi-v6 with VFP\", \"x86\", \"mips\"\n\n#   ANDROID_NATIVE_API_LEVEL : 3,4,5,8,9,14 (depends on NDK version)\n\n#   ANDROID_STL : gnustl_static/gnustl_shared/stlport_static/stlport_shared/gabi++_static/gabi++_shared/system_re/system/none\n\n#   ANDROID_FORBID_SYGWIN : ON/OFF\n\n#   ANDROID_NO_UNDEFINED : ON/OFF\n\n#   ANDROID_SO_UNDEFINED : OFF/ON  (default depends on NDK version)\n\n#   ANDROID_FUNCTION_LEVEL_LINKING : ON/OFF\n\n#   ANDROID_GOLD_LINKER : ON/OFF\n\n#   ANDROID_NOEXECSTACK : ON/OFF\n\n#   ANDROID_RELRO : ON/OFF\n\n#   ANDROID_FORCE_ARM_BUILD : ON/OFF\n\n#   ANDROID_STL_FORCE_FEATURES : ON/OFF\n\n#   ANDROID_SET_OBSOLETE_VARIABLES : ON/OFF\n\n# Can be set only at the first run:\n\n#   ANDROID_NDK\n\n#   ANDROID_STANDALONE_TOOLCHAIN\n\n#   ANDROID_TOOLCHAIN_NAME : the NDK name of compiler toolchain\n\n#   ANDROID_NDK_HOST_X64 : try to use x86_64 toolchain (default for x64 host systems)\n\n#   ANDROID_NDK_LAYOUT : the inner NDK structure (RELEASE, LINARO, ANDROID)\n\n#   LIBRARY_OUTPUT_PATH_ROOT : <any valid path>\n\n#   NDK_CCACHE : <path to your ccache executable>\n\n# Obsolete:\n\n#   ANDROID_API_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL\n\n#   ARM_TARGET : superseded by ANDROID_ABI\n\n#   ARM_TARGETS : superseded by ANDROID_ABI (can be set only)\n\n#   ANDROID_NDK_TOOLCHAIN_ROOT : superseded by ANDROID_STANDALONE_TOOLCHAIN (can be set only)\n\n#   ANDROID_USE_STLPORT : superseded by ANDROID_STL=stlport_static\n\n#   ANDROID_LEVEL : superseded by ANDROID_NATIVE_API_LEVEL (completely removed)\n\n#\n\n# Primary read-only variables:\n\n#   ANDROID : always TRUE\n\n#   ARMEABI : TRUE for arm v6 and older devices\n\n#   ARMEABI_V6 : TRUE for arm v6\n\n#   ARMEABI_V7A : TRUE for arm v7a\n\n#   NEON : TRUE if NEON unit is enabled\n\n#   VFPV3 : TRUE if VFP version 3 is enabled\n\n#   X86 : TRUE if configured for x86\n\n#   MIPS : TRUE if configured for mips\n\n#   BUILD_ANDROID : always TRUE\n\n#   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used\n\n#   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used\n\n#   ANDROID_NDK_HOST_SYSTEM_NAME : \"windows\", \"linux-x86\" or \"darwin-x86\" depending on host platform\n\n#   ANDROID_NDK_ABI_NAME : \"armeabi\", \"armeabi-v7a\", \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_NDK_RELEASE : one of r5, r5b, r5c, r6, r6b, r7, r7b, r7c, r8, r8b, r8c, r8d, r8e, r9, r9b; set only for NDK\n\n#   ANDROID_ARCH_NAME : \"arm\" or \"x86\" or \"mips\" depending on ANDROID_ABI\n\n#   ANDROID_SYSROOT : path to the compiler sysroot\n\n#   TOOL_OS_SUFFIX : \"\" or \".exe\" depending on host platform\n\n#   ANDROID_COMPILER_IS_CLANG : TRUE if clang compiler is used\n\n# Obsolete:\n\n#   ARMEABI_NDK_NAME : superseded by ANDROID_NDK_ABI_NAME\n\n#\n\n# Secondary (less stable) read-only variables:\n\n#   ANDROID_COMPILER_VERSION : GCC version used\n\n#   ANDROID_CXX_FLAGS : C/C++ compiler flags required by Android platform\n\n#   ANDROID_SUPPORTED_ABIS : list of currently allowed values for ANDROID_ABI\n\n#   ANDROID_TOOLCHAIN_MACHINE_NAME : \"arm-linux-androideabi\", \"arm-eabi\" or \"i686-android-linux\"\n\n#   ANDROID_TOOLCHAIN_ROOT : path to the top level of toolchain (standalone or placed inside NDK)\n\n#   ANDROID_CLANG_TOOLCHAIN_ROOT : path to clang tools\n\n#   ANDROID_SUPPORTED_NATIVE_API_LEVELS : list of native API levels found inside NDK\n\n#   ANDROID_STL_INCLUDE_DIRS : stl include paths\n\n#   ANDROID_RTTI : if rtti is enabled by the runtime\n\n#   ANDROID_EXCEPTIONS : if exceptions are enabled by the runtime\n\n#   ANDROID_GCC_TOOLCHAIN_NAME : read-only, differs from ANDROID_TOOLCHAIN_NAME only if clang is used\n\n#   ANDROID_CLANG_VERSION : version of clang compiler if clang is used\n\n#   ANDROID_LIBM_PATH : path to libm.so (set to something like $(TOP)/out/target/product/<product_name>/obj/lib/libm.so) to workaround unresolved `sincos`\n\n#\n\n# Defaults:\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL\n\n#   ANDROID_DEFAULT_NDK_API_LEVEL_${ARCH}\n\n#   ANDROID_NDK_SEARCH_PATHS\n\n#   ANDROID_STANDALONE_TOOLCHAIN_SEARCH_PATH\n\n#   ANDROID_SUPPORTED_ABIS_${ARCH}\n\n#   ANDROID_SUPPORTED_NDK_VERSIONS\n",
        "Line" : 1694,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 92
    },
    "toolchain/clangllvm.toolchain.cmake" : {
      "ObjectId" : "392c6d17e36a1b8ab3ff5690ed79c15412f47849",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/osx.toolchain.cmake" : {
      "ObjectId" : "1478607cc9671d6cfd4c10da10ef5b4cbcf22bcf",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolchain/raspberry.toolchain.cmake" : {
      "ObjectId" : "5c7936a5305079250dd33a41c3fff26073f203c4",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# touch toolchain variable only to suppress \"unused variable\" warning\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# this one is important\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# this one not so much\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "toolchain/toolchain-ios-device.cmake" : {
      "ObjectId" : "03899acbcf07567c54c4eee23b04e787e1f398a6",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fmessage-length=0 -pipe\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-trigraphs -fpascal-strings\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0 -Wreturn-type -Wunused-variable\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fexceptions -mmacosx-version-min=10.6\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -gdwarf-2 -fvisibility=hidden\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden\")\n\n#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fobjc-abi-version=2 -fobjc-legacy-dispatch\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS}\")\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the CMAKE_OSX_SYSROOT to the latest SDK found\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "toolchain/yun.cmake" : {
      "ObjectId" : "5241139fa22d735cdf75eefa7726e04ba5e5eca3",
      "LastModified" : "2014-09-10T14:47:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# subsequent toolchain loading is not really needed\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# touch toolchain variable only to suppress \"unused variable\" warning\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# this one is important\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# this one not so much\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 25,
    "MAVEN" : 14
  },
  "ElapsedTime" : 775
}