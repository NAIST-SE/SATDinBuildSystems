{
  "Repository" : "24265952",
  "Revision" : "HEAD",
  "ObjectId" : "e60a51c9fd8931902bb1e1c7ae4240c8a72162aa",
  "CommitTime" : "2018-10-17T03:09:50Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e61114d5f42cbea7b38782a8cca8e2b12ce2e8f8",
      "LastModified" : "2018-05-07T02:17:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.0 policy that says you need to do something like this (NEW):\n\n#    set_target_properties(master_lib master PROPERTIES COMPILE_DEFINITIONS_DEBUG \"TNL_DEBUG\")\n\n#\n\n# instead of this (OLD):\n\n#    set_target_properties(master_lib master PROPERTIES COMPILE_DEFINITIONS $<$<CONFIG:Debug>:TNL_DEBUG>)\n\n#\n\n# Set to OLD behavior until minimum cmake version >= 2.8.10\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# CMake options\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NO_AUDIO implies disabling music and voicechat, too\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# CMake system management\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Require use c++11 compiler\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Don't use compiler extensions like -std=gnu++11\n\n# set(CMAKE_CXX_EXTENSIONS OFF)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use appropriate platform alterations\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# No creating project files in-source.  Bad, evil things happen\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Default to Release for a build type\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Library searching and dependencies\n\n#\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# SDL2 is default and should be found on all platforms except possibly Linux\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Searches for OpenGL and enables GLES if GL isnt found in the system\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Other needed libraries that don't have in-tree fallback options\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now look for libraries that have an in-tree fallback option\n\n# Many of these may have special overrides to properly adapt to the in-tree versions\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Special function to look for a system lib, but fall back to the in-tree version\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# export the results\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# ALURE\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# sqlite3\n",
        "Line" : 186,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# libtomcrypt\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Boost\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Clipper\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# poly2tri\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# LuaJIT / Lua\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Use internal LuaJIT\n",
        "Line" : 237,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# mysql++ is for compiling master\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# gtest is for compiling the bitfighter_test suite\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Other internal-only sub-projects\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Windows-only\n",
        "Line" : 263,
        "CharPositionInLine" : 27
      },
      "28" : {
        "Text" : "# Our main sources!\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "alure/CMakeLists.txt" : {
      "ObjectId" : "cbcc5d78198818289ad3dfe474437441dedb4cc3",
      "LastModified" : "2015-12-31T17:45:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Most ALURE platform-specific settings are included in config.h.in\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add in music libraries\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Dynamic loading of mpg123 for people who may want to drop in a decoder\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Hack to make Alure not link music libs\n",
        "Line" : 38,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "alure/Makefile" : {
      "ObjectId" : "a695d1fd799b9c0339699112066b11dda5961139",
      "LastModified" : "2012-10-08T03:50:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# \n\n# Alure Makefile\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GENERAL FLAGS\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compile default with mysql for everything\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\t$(CC) -o libalure.a $(OBJECTS) $(LFLAGS)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cleaning\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "build/android/SDL-android-project/build.xml" : {
      "ObjectId" : "582d78ec42ece0229aafbd485cca9ecda1d94a7f",
      "LastModified" : "2012-07-10T04:52:49Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n         The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked in in Version\n         Control Systems.\n    ",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "\n         The build.properties file can be created by you and is never touched\n         by the 'android' tool. This is the place to change some of the default property values\n         used by the Ant rules.\n         Here are some properties you may want to change/update:\n\n         application.package\n             the name of your application package as defined in the manifest. Used by the\n             'uninstall' rule.\n         source.dir\n             the name of the source directory. Default is 'src'.\n         out.dir\n             the name of the output directory. Default is 'bin'.\n\n         Properties related to the SDK location or the project target should be updated\n          using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your application and\n         should be checked in in Version Control Systems.\n    ",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "\n         The default.properties file is created and updated by the 'android' tool, as well\n         as ADT.\n         This file is an integral part of the build system for your application and\n         should be checked in in Version Control Systems.\n    ",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "\n         Custom Android task to deal with the project target, and import the proper rules.\n         This requires ant 1.6.0 or above.\n    ",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "\n         Execute the Android Setup task that will setup some properties specific to the target,\n         and import the build rules files.\n\n         The rules file is imported from\n            <SDK>/platforms/<target_platform>/templates/android_rules.xml\n\n         To customize some build steps for your project:\n         - copy the content of the main node <project> from android_rules.xml\n         - paste it in this build.xml below the <setup /> task.\n         - disable the import by changing the setup task below to <setup import=\"false\" />\n\n         This will ensure that the properties are setup correctly but that your customized\n         build steps are used.\n    ",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "build/osx/Bitfighter-Info.plist.cmake" : {
      "ObjectId" : "397689c6f02fb49f0a580329d640b14b876c0d14",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "clipper/CMakeLists.txt" : {
      "ObjectId" : "00992186f95853478979a105f6e64fb8fa7d5abc",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindALURE.cmake" : {
      "ObjectId" : "06fb98f2bc80a5b9c8770d5a8170c68a32a5ff3d",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds ALURE library\n\n#\n\n#  ALURE_INCLUDE_DIR - where to find alure.h, etc.\n\n#  ALURE_LIBRARIES   - List of libraries when using ALURE.\n\n#  ALURE_FOUND       - True if ALURE found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 13,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindClipper.cmake" : {
      "ObjectId" : "51bc4b7e9f11b76aa015d217a494b92b8f44d62e",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Clipper library\n\n#\n\n#  CLIPPER_INCLUDE_DIR - where to find clipper.hpp, etc.\n\n#  CLIPPER_LIBRARIES   - List of libraries when using Clipper.\n\n#  CLIPPER_FOUND       - True if Clipper found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 13,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindLuaJit.cmake" : {
      "ObjectId" : "84d89244643d9c424eb8befabb510636fb9d7c4d",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds LuaJit library\n\n#\n\n#  LUAJIT_INCLUDE_DIR - where to find lua.h, etc.\n\n#  LUAJIT_LIBRARIES   - List of libraries when using luajit.\n\n#  LUAJIT_FOUND       - True if luajit found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 13,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindModPlug.cmake" : {
      "ObjectId" : "c2459f71737e9adde10a97dccabd9654347759c2",
      "LastModified" : "2013-05-29T19:26:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find modplug\n\n# Find the native modplug includes and libraries\n\n#\n\n#  MODPLUG_INCLUDE_DIR - where to find modplug.h, etc.\n\n#  MODPLUG_LIBRARIES   - List of libraries when using libmodplug.\n\n#  MODPLUG_FOUND       - True if modplug found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 14,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 15,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 16,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindMySQL.cmake" : {
      "ObjectId" : "8b1165897cf2b1a4e434c6e0dd18917bca061beb",
      "LastModified" : "2013-06-17T20:59:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mysqlclient\n\n# Find the native MySQL includes and library\n\n#\n\n#  MYSQL_INCLUDE_DIR - where to find mysql.h, etc.\n\n#  MYSQL_LIBRARIES   - List of libraries when using MySQL.\n\n#  MYSQL_FOUND       - True if MySQL found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n\n# DarwinPorts\n\n# Blastwave\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindOGG.cmake" : {
      "ObjectId" : "f64d3b8c85893e127717cc9d5b82768fda6cbc3f",
      "LastModified" : "2013-05-29T19:26:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate OGG\r\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\r\n\n#\r\n\n# $OGGDIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$OGGDIR\r\n\n# used in building OGG.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\r\n",
        "Line" : 14,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 15,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 16,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# >= 1600\r\n",
        "Line" : 21,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# >= 1500\r\n",
        "Line" : 23,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# >= 1400\r\n",
        "Line" : 25,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "# >= 1300\r\n",
        "Line" : 27,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "# >= 1200\r\n",
        "Line" : 29,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : "# First search for d-suffixed libs\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\r\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\r\n",
        "Line" : 70,
        "CharPositionInLine" : 39
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/Modules/FindOpenGLES.cmake" : {
      "ObjectId" : "9f1d46df281d4412c783f09a74eb19eefef57a34",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find OpenGLES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 9,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 10,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 11,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Raspberry pi\n",
        "Line" : 14,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindOpenGLES2.cmake" : {
      "ObjectId" : "85487a6773600c544b81e16ce2ef50c436dfc51c",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find OpenGL ES 2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 9,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 10,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 11,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Raspberry pi\n",
        "Line" : 14,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindPoly2tri.cmake" : {
      "ObjectId" : "f3b2f1c0c5f7d6df850039ec0dc7f7365d6c20fd",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds poly2tri library\n\n#\n\n#  POLY2TRI_INCLUDE_DIR - where to find poly2tri.h, etc.\n\n#  POLY2TRI_LIBRARIES   - List of libraries when using poly2tri.\n\n#  POLY2TRI_FOUND       - True if poly2tri found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 13,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindSDL2.cmake" : {
      "ObjectId" : "7e052e3e44fcfff625d3663089a572ce3a6b8d1b",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\r\n\n# This module defines\r\n\n# SDL2_LIBRARY, the name of the library to link against\r\n\n# SDL2_FOUND, if false, do not try to link to SDL2\r\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\r\n\n#\r\n\n# This module responds to the the flag:\r\n\n# SDL2_BUILDING_LIBRARY\r\n\n# If this is defined, then no SDL2main will be linked in because\r\n\n# only applications need main().\r\n\n# Otherwise, it is assumed you are building an application and this\r\n\n# module will attempt to locate and set the the proper link flags\r\n\n# as part of the returned SDL2_LIBRARY variable.\r\n\n#\r\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\r\n\n# OS X framework based version. (Other versions link to -lSDL2main which\r\n\n# this module will try to find on your behalf.) Also for OS X, this\r\n\n# module will automatically add the -framework Cocoa on your behalf.\r\n\n#\r\n\n#\r\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\r\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\r\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\r\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\r\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\r\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\r\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\r\n\n#\r\n\n#\r\n\n# $SDL2DIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$SDL2DIR\r\n\n# used in building SDL2.\r\n\n# l.e.galup  9-20-02\r\n\n#\r\n\n# Modified by Eric Wing.\r\n\n# Added code to assist with automated building by using environmental variables\r\n\n# and providing a more controlled/consistent search behavior.\r\n\n# Added new modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\r\n\n# Added a search for SDL2main which is needed by some platforms.\r\n\n# Added a search for threads which is needed by some platforms.\r\n\n# Added needed compile switches for MinGW.\r\n\n#\r\n\n# On OSX, this will prefer the Framework version (if found) over others.\r\n\n# People will have to manually change the cache values of\r\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\r\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\r\n\n#\r\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\r\n\n# This needed to change because \"proper\" SDL convention\r\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\r\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2003-2009 Kitware, Inc.\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\r\n",
        "Line" : 74,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 75,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\r\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\r\n\n# seem to provide SDL2main for compatibility even though they don't\r\n\n# necessarily need it.\r\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\r\n\n# The Apple build may not need an explicit flag because one of the\r\n\n# frameworks may already provide it.\r\n\n# But for non-OSX systems, I will use the CMake Threads package.\r\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\r\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\r\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\r\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\r\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\r\n\n# CMake doesn't display the -framework Cocoa string in the UI even\r\n\n# though it actually is there if I modify a pre-used variable.\r\n\n# I think it has something to do with the CACHE STRING.\r\n\n# So I use a temporary variable until the end so I can set the\r\n\n# \"real\" variable in one-shot.\r\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\r\n\n# In fact, there seems to be a problem if I used the Threads package\r\n\n# and try using this line, so I'm just skipping it entirely for OS X.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\r\n",
        "Line" : 151,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\r\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\r\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "cmake/Modules/FindSparkle.cmake" : {
      "ObjectId" : "a9e55d8dc4f1cb126cbd6aa24d4b0562e96b65c8",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Sparkle library\n\n#\n\n#  SPARKLE_INCLUDE_DIR - where to find Sparkle.h, etc.\n\n#  SPARKLE_LIBRARIES   - List of libraries when using Sparkle.\n\n#  SPARKLE_FOUND       - True if Sparkle found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindSpeex.cmake" : {
      "ObjectId" : "7b8ee4370c18e23a6c2ddfdd9b38ee515a3100fb",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Speex library\n\n#\n\n#  SPEEX_INCLUDE_DIR - where to find speex.h, etc.\n\n#  SPEEX_LIBRARIES   - List of libraries when using Speex.\n\n#  SPEEX_FOUND       - True if Speex found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 13,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 20,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindSqlite.cmake" : {
      "ObjectId" : "77b8eb4e821053f734846adc2ec6b409fc1b205a",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Sqlite3\n\n# Once done this will define\n\n#\n\n#  SQLITE3_FOUND - system has Sqlite3\n\n#  SQLITE3_INCLUDE_DIRS - the Sqlite3 include directory\n\n#  SQLITE3_LIBRARIES - Link these to use Sqlite3\n\n#  SQLITE3_DEFINITIONS - Compiler switches required for using Sqlite3\n\n#\n\n#  Copyright (c) 2008 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# show the SQLITE3_INCLUDE_DIRS and SQLITE3_LIBRARIES variables only in the advanced view\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindTomCrypt.cmake" : {
      "ObjectId" : "6c3ac5ace2876bfdea31832455c5972d36fd9798",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mash\n\n# Find the native TOMCRYPT includes and library\n\n#\n\n#  TOMCRYPT_INCLUDE_DIR - where to find tomcrypt.h, etc.\n\n#  TOMCRYPT_LIBRARIES   - List of libraries when using tomcrypt.\n\n#  TOMCRYPT_FOUND       - True if tomcrypt found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set TOMCRYPT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindVorbis.cmake" : {
      "ObjectId" : "037719ceffe85da89b16e424813efeed669c5fac",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Vorbis\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\n\n#\n\n# $VORBISDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$VORBISDIR\n\n# used in building Vorbis.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 14,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 15,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 16,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# >= 1600\n",
        "Line" : 21,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# >= 1500\n",
        "Line" : 23,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# >= 1400\n",
        "Line" : 25,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "# >= 1300\n",
        "Line" : 27,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "# >= 1200\n",
        "Line" : 29,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : "# First search for d-suffixed libs\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 78,
        "CharPositionInLine" : 45
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/Modules/FindVorbisFile.cmake" : {
      "ObjectId" : "70f483e845ca496da934c5c15e4c8ae83d7f0318",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate VorbisFile\n\n# This module defines XXX_FOUND, XXX_INCLUDE_DIRS and XXX_LIBRARIES standard variables\n\n#\n\n# $VORBISDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$VORBISDIR\n\n# used in building Vorbis.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 14,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 15,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 16,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# >= 1600\n",
        "Line" : 21,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "# >= 1500\n",
        "Line" : 23,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# >= 1400\n",
        "Line" : 25,
        "CharPositionInLine" : 34
      },
      "7" : {
        "Text" : "# >= 1300\n",
        "Line" : 27,
        "CharPositionInLine" : 34
      },
      "8" : {
        "Text" : "# >= 1200\n",
        "Line" : 29,
        "CharPositionInLine" : 34
      },
      "9" : {
        "Text" : "# First search for d-suffixed libs\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Then search for non suffixed libs if necessary, but only in debug dirs\n",
        "Line" : 68,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Could add \"general\" keyword, but it is optional\n",
        "Line" : 86,
        "CharPositionInLine" : 53
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/Platform/Apple.cmake" : {
      "ObjectId" : "1e86c9ac9ef0198ab378207421afea53f450e3c5",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Global project configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Environment verification\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These mandatory variables should be set with cross-compiling\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Detect current OSX version\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# MACOSX_DEPLOYMENT_TARGET must be set in the environment to compile properly on OSX 10.6 and earlier\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Make sure the compiling architecture is set\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#\n\n# Linker flags\n\n# \n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# \n\n# Compiler specific flags\n\n# \n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# c++11\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# OSX 10.7 and greater need this to find some dependencies\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Enable more warnings in Debug build\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Library searching and dependencies\n\n#  \n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set some search paths\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Directly set include dirs for some libraries\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# libpng needs two for some weird reason\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Directly specify some libs\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# OSX doesn't use vorbisfile (or it's built-in to normal vorbis, I think)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## End Global project configuration\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Sub-project configuration\n\n#\n\n# Note that any variable adjustment from the parent CMakeLists.txt will\n\n# need to be re-set with the PARENT_SCOPE option\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# We need this variable in both scopes\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# Special flags needed because of LuaJIT on 64 bit OSX\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Setup OSX Bundle; specify output to be a .app\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Set up our bundle plist variables\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# Fill out a plist template with CMake variables\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Use the custom plist\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# The trailing slash is necessary to do here for proper native path translation\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "# Create extra dirs in the .app\n",
        "Line" : 175,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# Icon file\n",
        "Line" : 185,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# Public key for Sparkle\n",
        "Line" : 187,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Notifier\n",
        "Line" : 189,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# 64-bit OSX needs to use shared LuaJIT library\n",
        "Line" : 200,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# Copy resources\n",
        "Line" : 207,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Thin out our installed frameworks by running 'lipo' to clean out the unwanted \n\n# architectures and removing any header files\n",
        "Line" : 214,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# This can happen when cross-compiling x86_64\n",
        "Line" : 220,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# This will install the .app.  The .app should have already been built\n\n# in the post-build section\n",
        "Line" : 238,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "#set(CPACK_PACKAGE_ICON \"${ICONS_DIR}/DMG.icns\")\n",
        "Line" : 261,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 36
    },
    "cmake/Platform/Linux.cmake" : {
      "ObjectId" : "b91abd7c36ed193060dac254843053e836fa0ea2",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Global project configuration\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Linker flags\n\n# \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Only link in what is absolutely necessary\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# \n\n# Compiler specific flags\n\n# \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Define the Linux data dir if not defined in a packaging build script already\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Quotes need to be a part of the definition or the compiler won't understand\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Allow setting of other Linux paths for various resources\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Library searching and dependencies\n\n# \n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## End Global project configuration\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Sub-project configuration\n\n#\n\n# Note that any variable adjustment from the parent CMakeLists.txt will\n\n# need to be re-set with the PARENT_SCOPE option\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Do nothing!\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Do nothing!\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Do nothing!\n",
        "Line" : 75,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Do nothing!\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Do nothing\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Do nothing!\n",
        "Line" : 90,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Binaries\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Modify python script to have the shebang\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Modify python script to use proper path to the system-installed icon\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Install desktop files\n",
        "Line" : 108,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# Manpage\n",
        "Line" : 112,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Resources\n",
        "Line" : 115,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Do nothing!\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 23
    },
    "cmake/Platform/Win32.cmake" : {
      "ObjectId" : "6206452dab427b097f6156c326388b3f4dac12b3",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Global project configuration\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Win64\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Linker flags\n\n# \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Using the following NODEFAULTLIB to fix LNK4098 warning and some linker errors\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Disable incremental linking on RelWithDebInfo for sam686\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Handle both /INCREMENTAL:YES and /INCREMENTAL\n\n# .. First set everything to '/INCREMENTAL', then turn it off\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# MinGW won't statically compile in Microsofts c/c++ library routines\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Only link in what is absolutely necessary\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Disable LuaJIT for cross-compile (for now)\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# StackWalker has too much black magic for mingw\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# \n\n# Compiler specific flags\n\n# \n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Using /MT avoids dynamically linking against the stupid MSVC runtime libraries\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Enable 'Edit and Continue' debugging support\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Add parallel build to Visual Studio\n",
        "Line" : 78,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Disable deprecated warnings (fopen, vsnprintf), some alternative function may not exist on other compilers including gcc.\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#\n\n# Library searching and dependencies\n\n#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Set some search paths\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Directly set include dirs for some libraries\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# libpng needs two for some weird reason\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Directly specify some libs (because of deficiences in CMake modules?)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## End Global project configuration\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Sub-project configuration\n\n#\n\n# Note that any variable adjustment from the parent CMakeLists.txt will\n\n# need to be re-set with the PARENT_SCOPE option\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Add icon resource in Visual Studio.  This must be added into the final\n\n# executable\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Do nothing!\n",
        "Line" : 146,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Do nothing!\n",
        "Line" : 158,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Work around the \"Debug\", \"Release\", etc. directories Visual Studio tries to add\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Separate output name \"bitfighter_debug.exe\" for debug build, to avoid conflicts with debug/release build\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Set some linker flags to use console mode in debug build, etc..\n\n# Always use SUBSYSTEM:CONSOLE; hiding the console window is controlled in zap/main.cpp near the bottom of main()\n\n# Allows console to stay visible if ran from typing in command window.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Set more compiler flags for console on appropriate targets\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Do nothing\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# The trailing slash is necessary to do here for proper native path translation\n",
        "Line" : 195,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# Set copy command\n",
        "Line" : 201,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Copy resources\n",
        "Line" : 210,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Binaries\n",
        "Line" : 219,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# Libraries\n",
        "Line" : 223,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Except libcurl which will be put into the notifier directory\n\n#list(REMOVE_ITEM BF_INSTALL_LIBS \"${BF_LIB_DIR}/libcurl.dll\")\n",
        "Line" : 225,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Resources\n",
        "Line" : 229,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Doc\n",
        "Line" : 233,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Updater\n",
        "Line" : 238,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# Other\n",
        "Line" : 243,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# This sets up start menu and desktop shortcuts\n",
        "Line" : 257,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# We use WiX for x64 MSI\n",
        "Line" : 263,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Keep this the same so MSI installers can update/repair across versions\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Wix requires some version, but can't handle bitfighter versions because of the letters\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# NSIS setup\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Desktop shortcut handling for install/uninstall\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Any extra start menu shortcuts\n",
        "Line" : 287,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Branding\n\n# Four backslashes because NSIS can't resolve the last portion of a UNIX path.  Fun!\n",
        "Line" : 292,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Need this otherwise NSIS thinks executables are in the 'bin' sub-folder\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 49
    },
    "cmake/Toolchains/Toolchain-mingw32.cmake" : {
      "ObjectId" : "74a227362021b6e6b7616cbc1af438674595db53",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Toolchains/Toolchain-mingw64.cmake" : {
      "ObjectId" : "aaea471cbb2a47df9cdaa40c3343e4de1e26e498",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Toolchains/cross-darwin10-x86_64.cmake" : {
      "ObjectId" : "60c17e23e6bea4ec147d29385bf03ebf4f085f5d",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note cross-compiling only works if CMake is patched.  See patch at:\n\n#   http://public.kitware.com/Bug/view.php?id=14603\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Architecture isn't needed in cross-compiling x86_64.  It passes in the '-arch' flag\n\n# which breaks apple's gcc 4.2.1\n\n# set(ENV{CMAKE_OSX_ARCHITECTURES} x86_64)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# COMPILER_HOME should also be the location of the SDK\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set(CMAKE_OSX_ARCHITECTURES \"x86_64\" CACHE STRING \"Toolchain CMAKE_OSX_ARCHITECTURES\")\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Specify the cross compiler\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Toolchains/cross-darwin8-i386.cmake" : {
      "ObjectId" : "734e2c7994743db2634d160fe537ba2e56e7d6f2",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note cross-compiling only works if CMake is patched.  See patch at:\n\n#   http://public.kitware.com/Bug/view.php?id=14603\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COMPILER_HOME should also be the location of the SDK\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Toolchains/cross-darwin8-ppc.cmake" : {
      "ObjectId" : "fd71705089422eb19e4c5b40a5fce170b3656c03",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note cross-compiling only works if CMake is patched.  See patch at:\n\n#   http://public.kitware.com/Bug/view.php?id=14603\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COMPILER_HOME should also be the location of the SDK\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Toolchains/cross-mingw64.cmake" : {
      "ObjectId" : "94d9403dda7d1796d179d084ee8b24f2366696db",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set(WIN32 True)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Specify the cross-compiler\n\n# We use -m32 because bitfighter is 32bit-only on Windows at the moment\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "gtest/CMakeLists.txt" : {
      "ObjectId" : "0fe26540b345fcab7b3260a8d7f6e784a1128e14",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dbuild_gtest_samples=ON flag when running cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# The C++ Standard specifies tuple_element<int, class>.\n\n# Yet MSVC 10's <utility> declares tuple_element<size_t, class>.\n\n# That declaration conflicts with our own standard-conforming\n\n# tuple implementation.  Therefore using our own tuple with\n\n# MSVC 10 doesn't compile.\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "gtest/Makefile.am" : {
      "ObjectId" : "cb350b75bc5a58bba70faa8a070144a4a09d4330",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "7efc2ac797aa6ec29cb011191373b3bb5242b74f",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 96,
        "CharPositionInLine" : 32
      },
      "14" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "gtest/make/Makefile" : {
      "ObjectId" : "5b27b6a2cbb13e380ee75d186f553bfb5fa144b5",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "gtest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "lua/luajit/CMakeLists.txt" : {
      "ObjectId" : "8805951692cb4e079a492ce5cdb66271174a6247",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We must use the LuaJIT internal build system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Different library names depending on platform\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use the .lib for linking, later we'll copy the DLL\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# OSX 64 bit must use shared lib (otherwise game crashes)\n\n# The library is created with extension '.so' so we'll rename it to .dylib\n\n# to conform with OSX standards\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Modify the library's internal id name to play nicely with our bundle\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# CMAKE_OSX_ARCHITECTURES is i386 or ppc\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# LuaJIT can be compiled for OSX PPC, but the JIT VM must be disabled.  This leaves us with\n\n# the normal interpreter (which is still faster than standard Lua)\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# GLOBAL so it is visible everywhere\n",
        "Line" : 64,
        "CharPositionInLine" : 44
      },
      "CommentCount" : 8
    },
    "lua/luajit/Makefile" : {
      "ObjectId" : "ecce9ec5f3fa8c81b19769d837552b2110213b84",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT top level Makefile for installation. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Note: src/Makefile has many more configurable options.\n\n#\n\n# ##### This Makefile is NOT useful for Windows! #####\n\n# For MSVC, please follow the instructions given in src/msvcbuild.bat.\n\n# For MinGW and Cygwin, cd to src and run make with the Makefile there.\n\n#\n\n# Copyright (C) 2005-2017 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#\n\n# Change the installation path as needed. This automatically adjusts\n\n# the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "lua/luajit/src/Makefile" : {
      "ObjectId" : "f7f81a4e6084e2c19fc0d29b0b9f3d76c20e5d0a",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT Makefile. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Also works with MinGW and Cygwin on Windows.\n\n# Please check msvcbuild.bat for building with MSVC on Windows.\n\n#\n\n# Copyright (C) 2005-2017 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#############################  COMPILER OPTIONS  #############################\n\n##############################################################################\n\n# These options mainly affect the speed of the JIT compiler itself, not the\n\n# speed of the JIT-compiled code. Turn any of the optional settings on by\n\n# removing the '#' in front of them. Make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\" if you change any options.\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# LuaJIT builds as a native 32 or 64 bit binary by default.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Use this if you want to force a 32 bit build on a 64 bit multilib OS.\n\n#CC= $(DEFAULT_CC) -m32\n\n#\n\n# Since the assembler part does NOT maintain a frame pointer, it's pointless\n\n# to slow down the C part by not omitting it. Debugging, tracebacks and\n\n# unwinding are not affected -- the assembler part has frame unwind\n\n# information and GCC emits it where needed (x64) or with -g (see CCDEBUG).\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use this if you want to generate a smaller binary (but it's slower):\n\n#CCOPT= -Os -fomit-frame-pointer\n\n# Note: it's no longer recommended to use -O3 with GCC 4.x.\n\n# The I-Cache bloat usually outweighs the benefits from aggressive inlining.\n\n#\n\n# Target-specific compiler options:\n\n#\n\n# x86 only: it's recommended to compile at least for i686. Better yet,\n\n# compile for an architecture that has SSE2, too (-msse -msse2).\n\n#\n\n# x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute\n\n# the binaries to a different machine you could also use: -march=native\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Uncomment the next line to generate debug information:\n\n#CCDEBUG= -g\n\n#\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Uncomment the next line to enable more warnings:\n\n#CCWARN+= -Wextra -Wdeclaration-after-statement -Wredundant-decls -Wshadow -Wpointer-arith\n\n#\n\n##############################################################################\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##############################################################################\n\n################################  BUILD MODE  ################################\n\n##############################################################################\n\n# The default build mode is mixed mode on POSIX. On Windows this is the same\n\n# as dynamic mode.\n\n#\n\n# Mixed mode creates a static + dynamic library and a statically linked luajit.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Static mode creates a static library and a statically linked luajit.\n\n#BUILDMODE= static\n\n#\n\n# Dynamic mode creates a dynamic library and a dynamically linked luajit.\n\n# Note: this executable will only run when the library is installed!\n\n#BUILDMODE= dynamic\n\n#\n\n##############################################################################\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##############################################################################\n\n#################################  FEATURES  #################################\n\n##############################################################################\n\n# Enable/disable these features as needed, but make sure you force a full\n\n# recompile with \"make clean\", followed by \"make\".\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Permanently disable the FFI extension to reduce the size of the LuaJIT\n\n# executable. But please consider that the FFI library is compiled-in,\n\n# but NOT loaded by default. It only allocates any memory, if you actually\n\n# make use of it.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_FFI\n\n#\n\n# Features from Lua 5.2 that are unlikely to break existing code are\n\n# enabled by default. Some other features that *might* break some existing\n\n# code (e.g. __pairs or os.execute() return values) can be enabled here.\n\n# Note: this does not provide full compatibility with Lua 5.2 at this time.\n\n#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT\n\n#\n\n# Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_JIT\n\n#\n\n# Some architectures (e.g. PPC) can use either single-number (1) or\n\n# dual-number (2) mode. Uncomment one of these lines to override the\n\n# default mode. Please see LJ_ARCH_NUMMODE in lj_arch.h for details.\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=1\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=2\n\n#\n\n##############################################################################\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n############################  DEBUGGING SUPPORT  #############################\n\n##############################################################################\n\n# Enable these options as needed, but make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\".\n\n# Note that most of these are NOT suitable for benchmarking or release mode!\n\n#\n\n# Use the system provided memory allocator (realloc) instead of the\n\n# bundled memory allocator. This is slower, but sometimes helpful for\n\n# debugging. This option cannot be enabled on x64, since realloc usually\n\n# doesn't return addresses in the right address range.\n\n# OTOH this option is mandatory for Valgrind's memcheck tool on x64 and\n\n# the only way to get useful results from it for all other architectures.\n\n#XCFLAGS+= -DLUAJIT_USE_SYSMALLOC\n\n#\n\n# This define is required to run LuaJIT under Valgrind. The Valgrind\n\n# header files must be installed. You should enable debug information, too.\n\n# Use --suppressions=lj.supp to avoid some false positives.\n\n#XCFLAGS+= -DLUAJIT_USE_VALGRIND\n\n#\n\n# This is the client for the GDB JIT API. GDB 7.0 or higher is required\n\n# to make use of it. See lj_gdbjit.c for details. Enabling this causes\n\n# a non-negligible overhead, even when not running under GDB.\n\n#XCFLAGS+= -DLUAJIT_USE_GDBJIT\n\n#\n\n# Turn on assertions for the Lua/C API to debug problems with lua_* calls.\n\n# This is rather slow -- use only while developing C libraries/embeddings.\n\n#XCFLAGS+= -DLUA_USE_APICHECK\n\n#\n\n# Turn on assertions for the whole LuaJIT VM. This significantly slows down\n\n# everything. Use only if you suspect a problem with LuaJIT itself.\n\n#XCFLAGS+= -DLUA_USE_ASSERT\n\n#\n\n##############################################################################\n\n# You probably don't need to change anything below this line!\n\n##############################################################################\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##############################################################################\n\n# Host system detection.\n\n##############################################################################\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##############################################################################\n\n# Flags and options for host and target.\n\n##############################################################################\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# You can override the following variables at the make command line:\n\n#   CC       HOST_CC       STATIC_CC       DYNAMIC_CC\n\n#   CFLAGS   HOST_CFLAGS   TARGET_CFLAGS\n\n#   LDFLAGS  HOST_LDFLAGS  TARGET_LDFLAGS  TARGET_SHLDFLAGS\n\n#   LIBS     HOST_LIBS     TARGET_LIBS\n\n#   CROSS    HOST_SYS      TARGET_SYS      TARGET_FLAGS\n\n#\n\n# Cross-compilation examples:\n\n#   make HOST_CC=\"gcc -m32\" CROSS=i586-mingw32msvc- TARGET_SYS=Windows\n\n#   make HOST_CC=\"gcc -m32\" CROSS=powerpc-linux-gnu-\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# If left blank, minilua is built and used. You can supply an installed\n\n# copy of (plain) Lua 5.1 or 5.2, plus Lua BitOp. E.g. with: HOST_LUA=lua\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##############################################################################\n\n# Target system detection.\n\n##############################################################################\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##############################################################################\n\n# Files and pathnames.\n\n##############################################################################\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##############################################################################\n\n# Build mode handling.\n\n##############################################################################\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Mixed mode defaults.\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Mixed mode is not supported on Windows. And static mode doesn't work well.\n\n# C modules cannot be loaded, because they bind to lua51.dll.\n",
        "Line" : 510,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#Q=\n\n#E= @:\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##############################################################################\n\n# Make targets.\n\n##############################################################################\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24,
      "Errorlog" : "line 534:19 token recognition error at: '\\m'\nline 535:19 token recognition error at: '\\b'\nline 588:10 token recognition error at: '\"s| [^ ]*/dasm_\\S'\nline 589:29 token recognition error at: '\\1'\nline 590:24 token recognition error at: '\\S'\nline 591:22 token recognition error at: '\\S'\nline 592:21 token recognition error at: '\\S'\nline 687:42 token recognition error at: '\"\\n\\n##############################################################################\\n\u0000'\n"
    },
    "lua/luaprofiler-2.0.2/Makefile" : {
      "ObjectId" : "1116ee06a948ddbddc75d258b3a41c451c6daf37",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "master/CMakeLists.txt" : {
      "ObjectId" : "5e45606df0119bbf80bf7dec966d459c9a7a4402",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Copyright Chris Eykamp\n\n# See LICENSE.txt for full copyright information\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extra classes needed for the main master executable\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle different compile of master if MySQL is found or minimal build is requested\n\n# Force\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# master_lib OBJECT build\n\n#\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# master executable\n\n#\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set extra compile definitions needed for the MySQL build\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# BF_MASTER workaround to prevent WeaponInfo.cpp from including BfObject\n",
        "Line" : 120,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "master/Makefile" : {
      "ObjectId" : "86f8ebb73f226306cb226ba91aa04c91bae69a8c",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Bitfighter Master Server Makefile\n\n#\n\n# This makefile is for Linux \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# These flags are for use with mysql: both with database stats and phpbb integration\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO LFLAGS_MYSQL only works for CentOS 32bit right now\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Other CFLAGS\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GENERAL FLAGS\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compile default with mysql for everything\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compile without mysql integration for phpbb or stats (use sqlite3 for stats)\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Use default sqlite3 for stats; integrate with phpbb\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Compile with no phpbb integration; include mysql database stats integration\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Compile all options on (with db stats and phpbb)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Cleaning\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "mysql++/CMakeLists.txt" : {
      "ObjectId" : "6a25f45aeeb5f6fe42aa3281d8ad81356a37a7bc",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mysql++/Makefile" : {
      "ObjectId" : "6ffd5de69ac8d6ee828b22eb1d36000d39aa4771",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for minimum mysql++ compilation\n\n#\n\n# Adapted from the sources of mysql++ 3.1.0\n\n#\n\n# This makefile is for Linux \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "poly2tri/CMakeLists.txt" : {
      "ObjectId" : "f0c38002046c41a6ca71dc8fe7cb76daf68ef075",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sqlite/CMakeLists.txt" : {
      "ObjectId" : "4a6ccd83e36078c6cd4453fbf0b7c77c5f78b2d9",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tnl/CMakeLists.txt" : {
      "ObjectId" : "9f3e7932610cbc5087e345aa3b3d140c1fc1a533",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tnl/Makefile" : {
      "ObjectId" : "d04f8dc4e3b3ddf15f66757b7fb0d333fe37bd52",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# TNL Makefile\n\n# From Bitfigher (http://bitfighter.org)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tnl/docs/Makefile" : {
      "ObjectId" : "8fb5d400e87ff7b77dda105da8c0e543bc9c79fa",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "tnlping/CMakeLists.txt" : {
      "ObjectId" : "3f1dee68eb2f5eb6f4bb33870fd43cd95bdf7ecf",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tomcrypt is only needed for resolving some includes in TNL's headers.  \n\n# It is not actually linked in\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tnlping/Makefile" : {
      "ObjectId" : "5d08ebcb3d13794ab8aa34fe97024fb7e01df763",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# \n\n# tnlping Makefile\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GENERAL FLAGS\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cleaning\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tomcrypt/CMakeLists.txt" : {
      "ObjectId" : "de3b302036bee603f99638e8c1f97edeb1eaaf82",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ranlib on OSX is really 'libtool'.  To mimic the correct behavior of ranlib fortun\n\n# static libraries we need to use 'ranlib -c'\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "updater/CMakeLists.txt" : {
      "ObjectId" : "59cb41aed6772728072c00afe6fb58e2e254ce00",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is the CMakeLists.txt for the bitfighter Windows updater, based on GUP\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make it a GUI instead of console app\r\n",
        "Line" : 6,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# Use correct library if Win64 or Win32\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set up output dir\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Work around the \"Debug\", \"Release\", etc. directories Visual Studio tries to add\r\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Set up post-build resources\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Copy resources\r\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "zap/CMakeLists.txt" : {
      "ObjectId" : "2094a1f597f36b422f7cd5b1150e2c368b8f4e5f",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# Copyright Chris Eykamp\n\n# See LICENSE.txt for full copyright information\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extra sources that are needed by the final executable.  The existence\n\n# of these probably suggests some problem with our code\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Client-only classes\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Libraries\n\n#\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Libraries used by both client and server\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# libraries used only on the client\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Targets\n\n#\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Disable compiling of client and test suite if certain dependencies arent met\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Tests require the test sources, which may not be available (like in a slimmed source archive)\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We should always be able to compile a dedicated server, it requires much\n\n# fewer dependencies\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The test suite requires the client dependencies\n",
        "Line" : 282,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Build up our include directories based on the targets\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Defaults for bitfighterd\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# CMake 2.8.11 provides a target_include_directories, which is exactly what we want,\n\n# but we don't use it for compatibility with older CMake 2.8\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "zap/bitfighter.cmake" : {
      "ObjectId" : "714fc3340432c844bae3727b6bb02a92ea55058a",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Full client build\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Where to put the executable\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "zap/bitfighter_client.cmake" : {
      "ObjectId" : "79cbb27ca95b2ce6a3a56adca18f0196fd18eb47",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Client OBJECT build - includes resources only compiled into the client\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "zap/bitfighter_test.cmake" : {
      "ObjectId" : "0fc841e1c7a77c721485ae60a49ecab8af4e3a1f",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Test runner executable\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# to use the coverage target, install lcov, enable BITFIGHTER_COVERAGE, and run it\n\n# coverage data is output to the 'cov' directory in html format.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# BF_PLATFORM_INSTALL(bitfighter_test)\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# BF_PLATFORM_CREATE_PACKAGES(bitfighter_test)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "zap/bitfighterd.cmake" : {
      "ObjectId" : "3363a7b425f058a5ec47538186bc04ccfb9f7acd",
      "LastModified" : "2018-06-02T13:46:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Dedicated server build\n\n# \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BF_PLATFORM_INSTALL(bitfighterd)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# BF_PLATFORM_CREATE_PACKAGES(bitfighterd)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 45,
    "MAKEFILE" : 11,
    "AUTOMAKE" : 1,
    "ANT" : 1
  },
  "ElapsedTime" : 4336
}