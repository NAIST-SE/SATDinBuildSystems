{
  "Repository" : "89639",
  "Revision" : "HEAD",
  "ObjectId" : "50d21435bb5184024ce04cc702296db4777dce3f",
  "CommitTime" : "2019-01-04T14:05:59Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "d690ce4309762f97cc8e78aa363ce56143978e03",
      "LastModified" : "2014-11-26T08:25:54Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "autodebug/examples/buggy/Makefile" : {
      "ObjectId" : "aab1dcf3688d04c4edda71296542148f9aa5b3a3",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "examples/Makefile.am" : {
      "ObjectId" : "11d8c06a5aaf6e7ed0b68b1abde8de5039644a48",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "examples/c++-unittest/Makefile" : {
      "ObjectId" : "6c4343dba46d4273e479efe5863df402ec3b8e24",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Enable building a faulty implementation of mycounter with \"make\n\n# FAULTY=1\" command. Faulty mycounter.cc does not initialise counter\n\n# value in its constructor.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rule for running the test, that is, producing the log file.\n\n# fmbt exits with an error value in case the test fails, we use\n\n# \"... || true\" to suppress Make error message.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link the unit under test and test steps into a shared library. Make\n\n# is smart enough to compile mycounter.cc and mycountertest.cc to\n\n# produce the required object files.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generic rule for generating C++ from AAL. When make notices that it\n\n# needs mycountertest.cc due to the linking rule, this rules tells how\n\n# to create it from mycountertest.cc.aal. PRECIOUS prevents deleting\n\n# the .cc file automatically. That's nice in case you need gdb, for\n\n# instance.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/filesystemtest/Makefile" : {
      "ObjectId" : "4a42de9bbc4b8e36c266186d1d4ae0f67f5c1a25",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Link the unit under test and test steps into a shared library.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generic rule for generating C++ from AAL. When make notices that it\n\n# needs mycountertest.cc due to the linking rule, this rules tells how\n\n# to create it from mycountertest.cc.aal. PRECIOUS prevents deleting\n\n# the .cc file automatically. That's nice in case you need gdb, for\n\n# instance.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "examples/java-unittest/Makefile" : {
      "ObjectId" : "aa0012dcd4d43d271ad6da9011375047d3ba86a2",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Faulty MyCounter.java does not initialise counter\n\n# value in its constructor.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Rule for running the test, that is, producing the log file.\n\n# fmbt exits with an error value in case the test fails, we use\n\n# \"... || true\" to suppress Make error message.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generic rule for generating java from AAL. When make notices that it\n\n# needs mycountertest[true|false].java, this rules tells how\n\n# to create it from mycountertest[true|false].java.aal. PRECIOUS prevents deleting\n\n# the .java and .class file automatically.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/shortener/Makefile" : {
      "ObjectId" : "42475afc8329164232d9687dda3ebc0e740d4b31",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Enable building a faulty implementation of mycounter with \"make\n\n# FAULTY=1\" command. Faulty mycounter.cc does not initialise counter\n\n# value in its constructor.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# should run 178 rounds and find error trace with 24 steps\n",
        "Line" : 10,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "# Let's try to get an even shorter trace\n",
        "Line" : 11,
        "CharPositionInLine" : 28
      },
      "3" : {
        "Text" : "# should find it in the 2nd round. It is the minimal.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# So. It will take 180 rounds to get the minimal error trace.\n\n# Shortening the error trace is taking on my dev machine about 2Â½mins\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Rule for running the test, that is, producing the log file.\n\n# fmbt exits with an error value in case the test fails, we use\n\n# \"... || true\" to suppress Make error message.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link the unit under test and test steps into a shared library. Make\n\n# is smart enough to compile mycounter.cc and mycountertest.cc to\n\n# produce the required object files.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for generating C++ from AAL. When make notices that it\n\n# needs mycountertest.cc due to the linking rule, this rules tells how\n\n# to create it from mycountertest.cc.aal. PRECIOUS prevents deleting\n\n# the .cc file automatically. That's nice in case you need gdb, for\n\n# instance.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "examples/uc/Makefile" : {
      "ObjectId" : "9aceb97a424befd3dc482cdfe04823747ae00e31",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "packaging/Makefile" : {
      "ObjectId" : "fd340fd61ab32f3b9270b057d8f7dc4aa5be7dae",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "pythonshare/Makefile.am" : {
      "ObjectId" : "a4f3c5d647457fff3afe0571f5996b6f9d4e5fd4",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "pythonshare/packaging/Makefile" : {
      "ObjectId" : "8e7e8382948d426d97016d1ea75c5a8cdd980421",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/Makefile.am" : {
      "ObjectId" : "78514a832778f4f94fd9ff9d59655b4e675821b5",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# \t@echo 'APP_MODULES := dparse_droid fmbt_droid'\t>> $@\n\n# \t@echo 'APP_OPTIM := debug'\t\t\t>> $@\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Android.mk: Makefile\n\n# \t@echo 'LOCAL_PATH := $$(call my-dir)'\t\t\t\t> $@\n\n# \t@echo '############################## MODULE 1: dparse_droid'\t>> $@\n\n# \t@echo 'include $$(CLEAR_VARS)'\t\t\t\t\t>> $@\n\n# \t@echo 'LOCAL_MODULE := dparse_droid'\t\t\t\t>> $@\n\n# \t@echo 'LOCAL_SRC_FILES := $$(subst jni/,,$$(wildcard jni/d/*.c))'\t\t\t>> $@\n\n# \t@echo 'LOCAL_CFLAGS := -DD_MAJOR_VERSION=1 -DD_MINOR_VERSION=26 -DD_BUILD_VERSION=\\\"\\\"'\t>> $@\n\n# \t@echo 'include $$(BUILD_STATIC_LIBRARY)'\t\t\t>> $@\n\n# \t@echo '############################## MODULE 2: fmbt_droid'\t>> $@\n\n# \t@echo 'include $$(CLEAR_VARS)'\t\t\t\t\t>> $@\n\n# \t@echo 'LOCAL_MODULE    := fmbt_droid'\t\t\t\t>> $@\n\n# \t@echo 'LOCAL_SRC_FILES := $(fmbt_droid_SOURCES)'\t\t>> $@\n\n# \t@echo 'LOCAL_CPPFLAGS  := -Ijni/d $(fmbt_droid_CPPFLAGS)'\t>> $@\n\n# \t@echo 'LOCAL_STATIC_LIBRARIES := dparse_droid'\t\t\t>> $@\n\n# \t@echo 'LOCAL_LDLIBS := -ldl -llog'\t\t\t\t>> $@\n\n# \t@echo 'LOCAL_LDFLAGS := -Wl,-E -Wl,--no-gc-sections'\t\t>> $@\n\n# \t@echo 'LOCAL_CPP_EXTENSION := .cc'\t\t\t\t>> $@\n\n# \t@echo 'include $$(BUILD_EXECUTABLE)'\t\t\t\t>> $@\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# android/fmbt_droid: Application.mk Android.mk $(fmbt_droid_SOURCES)\n\n# \tbash -c 'mkdir -p android; cd android; [ -s jni ] || ln -s .. jni; echo \"target=android-5\" > default.properties'\n\n# \tbash -c 'cd android; rm -f fmbt_droid; nice @NDK_BUILD@ -j4 && ln libs/*/fmbt_droid .'\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########################################\n\n# How to build an AAL/C++ adapter/model (adel) for Android?\n\n# 1. Convert AAL to C++:\n\n#    fmbt-aalc adel.aal -o adel.cc\n\n# 2. Write Android.mk:\n\n# include $(CLEAR_VARS)\n\n# LOCAL_MODULE := adel\n\n# LOCAL_MODULE_FILENAME := adel\n\n# LOCAL_SRC_FILES := adel.cc\n\n# LOCAL_CPPFLAGS  := -Wall -DDROI\n\n# LOCAL_ALLOW_UNDEFINED_SYMBOLS := true\n\n# LOCAL_CPP_EXTENSION := .cc\n\n# include $(BUILD_SHARED_LIBRARY)\n\n# 3. ndk-build\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/d/Makefile" : {
      "ObjectId" : "91e6e407e1bf6e90ee1ac915c882be483ed29468",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for D_Parser\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#D_DEBUG=1\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#D_PROFILE=1\n\n#D_USE_GC=1\n\n#D_LEAK_DETECT=1\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# D_BUILD_VERSION = $(shell svnversion .)\n\n# ifeq ($(D_BUILD_VERSION),exported)\n\n#   D_BUILD_VERSION = $(shell git show-ref 2> /dev/null | head -1 | cut -d ' ' -f 1)\n\n#   ifeq ($(D_BUILD_VERSION),)\n\n#     D_BUILD_VERSION = $(shell cat D_BUILD_VERSION)\n\n#   endif\n\n# endif\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# debug flags\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# optimized flags\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/d/python/Makefile" : {
      "ObjectId" : "f826d9116c4ac66e634a0b3865bc2c11df0a3792",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/d/verilog/Makefile" : {
      "ObjectId" : "476130b4caec7b4cc21f704c3234ba88cd586246",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Makefile\n\n#\n\n# $Revision: 1.1 $\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/Makefile.am" : {
      "ObjectId" : "1612613d17cc666d563ac909041a8d7a3d0de8c1",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "test/adapters/dlopen/Makefile" : {
      "ObjectId" : "d96658eaf14a64b4a0d960b852029cf852668863",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test/multiaal/Makefile" : {
      "ObjectId" : "0f6471b93bebc97ac37a716408880d08143fd621",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Enable building a faulty implementation of mycounter with \"make\n\n# FAULTY=1\" command. Faulty mycounter.cc does not initialise counter\n\n# value in its constructor.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link the unit under test and test steps into a shared library. Make\n\n# is smart enough to compile mycounter.cc and mycountertest.cc to\n\n# produce the required object files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generic rule for generating C++ from AAL. When make notices that it\n\n# needs mycountertest.cc due to the linking rule, this rules tells how\n\n# to create it from mycountertest.cc.aal. PRECIOUS prevents deleting\n\n# the .cc file automatically. That's nice in case you need gdb, for\n\n# instance.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "utils/Makefile.am" : {
      "ObjectId" : "0f6140fd09a80c5af17d814521fa4fd1de0c58cb",
      "LastModified" : "2018-11-09T13:06:01Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# scripts\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# end of scripts\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# modules\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# end of modules\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extensions\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# end of extensions\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 13,
    "AUTOMAKE" : 6
  },
  "ElapsedTime" : 1280
}