{
  "Repository" : "10197185",
  "Revision" : "HEAD",
  "ObjectId" : "565461869107054ade48186154ad9faf238db0a1",
  "CommitTime" : "2019-04-13T05:57:59Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ae677f080ff5e875dc4d78cd2575af5bfad1d770",
      "LastModified" : "2018-10-18T15:20:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is the top level CMake file for the SCOREC build\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set some default compiler flags that should always be used\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Let CMake know where to find custom FindFoo.cmake files\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Gets C99 support\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# smoke test target - a few tests are defined later with the 'SMOKE_TEST' label\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set options for doxygen documentation\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# find the omega_h library\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Include the SCOREC project packages\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# this INTERFACE target bundles all the enabled libraries together\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "apf/CMakeLists.txt" : {
      "ObjectId" : "5e95521efa79af0f94ae61be382166f2dc10c203",
      "LastModified" : "2019-01-08T05:18:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package headers\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the apf library\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include directories\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link this library to these others\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "apf/cmake/Dependencies.cmake" : {
      "ObjectId" : "45708c6a45cbe12ba9948e98b752d9ff9fac6666",
      "LastModified" : "2016-08-31T14:58:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apf/cmake/cmake/Dependencies.cmake" : {
      "ObjectId" : "65ecc0759ea6539e1dd93eb15e567a2634808d8b",
      "LastModified" : "2016-08-31T14:58:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apf/pkg_tribits.cmake" : {
      "ObjectId" : "4cd79d748e6d3f185b6fa4f86f108a8ec61f0e3a",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# THIS IS WHERE TRIBITS GETS HEADERS\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apf_sim/CMakeLists.txt" : {
      "ObjectId" : "496fefed1646f27d4867b2536a5355252d6cf185",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Library\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#directory containing apf_simConfig.h\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "apf_sim/cmake/Dependencies.cmake" : {
      "ObjectId" : "caa03f8185adf51f283e2413e4d84f4f9a898018",
      "LastModified" : "2016-10-04T13:23:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apf_sim/pkg_tribits.cmake" : {
      "ObjectId" : "7661a479db72c96922c2a848cb02f9740dcfe5cc",
      "LastModified" : "2016-10-04T13:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#directory containing apf_simConfig.h\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "can/CMakeLists.txt" : {
      "ObjectId" : "ac0c95c9147e7ef9da15aaffe47edfbeeaddcd7d",
      "LastModified" : "2016-10-04T13:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the can 'library' as a CMake Interface\n\n# (header only library)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include directories\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cdash/CTestConfig.cmake" : {
      "ObjectId" : "bba10b83e906b0b65de867abfc2dca08bcd763d3",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cdash/colorado.cmake" : {
      "ObjectId" : "cecbf87787d2d0d69ae8d95b250edd45898d8d07",
      "LastModified" : "2016-10-04T13:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#variables that should be defined by the user:\n\n# CTEST_SITE - machine hostname\n\n# CTEST_BUILD_NAME - a string describing the OS/compiler/etc\n\n# CTEST_DASHBOARD_ROOT - current working dir\n\n# MY_FLAGS - C/C++ compiler flags\n\n# MY_LIBS - extra exe linker flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cdash/nightly.cmake" : {
      "ObjectId" : "5db55e6e0d44731dfc95ce535596aca8acfd0238",
      "LastModified" : "2019-01-17T05:13:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# make local tracking versions of all remote branches\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# make local tracking versions of all remote branches\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Main code !\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Dependencies.cmake" : {
      "ObjectId" : "aacb53a919e83c430a6df2287fcb1e7f689dc01f",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindC99.cmake" : {
      "ObjectId" : "1053405c8f5358d50176aa8efacd092ad20fcfa7",
      "LastModified" : "2016-10-04T13:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds C99 standard support\n\n# This internally calls the check_c_source_compiles macro to determine the\n\n# appropriate flags for a C99 standard compilation.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2013 Ian Liu Rodrigues <ian.liu88@gmail.com>\n\n#\n\n# This program is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n#=============================================================================\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindNetCDF.cmake" : {
      "ObjectId" : "1c1fd882c6b68ca13a3f7082993816ff3d48cd6d",
      "LastModified" : "2016-10-04T13:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find NetCDF\n\n# Find the native NetCDF includes and library\n\n#\n\n#  NETCDF_INCLUDES    - where to find netcdf.h, etc\n\n#  NETCDF_LIBRARIES   - Link these libraries when using NetCDF\n\n#  NETCDF_FOUND       - True if NetCDF found including required interfaces (see below)\n\n#\n\n# Your package can require certain interfaces to be FOUND by setting these\n\n#\n\n#  NETCDF_CXX         - require the C++ interface and link the C++ library\n\n#  NETCDF_F77         - require the F77 interface and link the fortran library\n\n#  NETCDF_F90         - require the F90 interface and link the fortran library\n\n#\n\n# The following are not for general use and are included in\n\n# NETCDF_LIBRARIES if the corresponding option above is set.\n\n#\n\n#  NETCDF_LIBRARIES_C    - Just the C interface\n\n#  NETCDF_LIBRARIES_CXX  - C++ interface, if available\n\n#  NETCDF_LIBRARIES_F77  - Fortran 77 interface, if available\n\n#  NETCDF_LIBRARIES_F90  - Fortran 90 interface, if available\n\n#\n\n# Normal usage would be:\n\n#  set (NETCDF_F90 \"YES\")\n\n#  find_package (NetCDF REQUIRED)\n\n#  target_link_libraries (uses_f90_interface ${NETCDF_LIBRARIES})\n\n#  target_link_libraries (only_uses_c_interface ${NETCDF_LIBRARIES_C})\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# will be set to NO if we're missing any interfaces\n",
        "Line" : 39,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# prepend so that -lnetcdf is last\n",
        "Line" : 52,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set NETCDF_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindParmetis.cmake" : {
      "ObjectId" : "b00a11d4106d660d3c87342d1135745f6abccb67",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find parmetis\n\n# Once done this will define\n\n#  PARMETIS_FOUND - System has PARMETIS\n\n#  PARMETIS_INCLUDE_DIRS - The PARMETIS include directories\n\n#  PARMETIS_LIBRARIES - The libraries needed to use PARMETIS\n\n#  PARMETIS_DEFINITIONS - Compiler switches required for using PARMETIS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PARMETIS_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindSimModSuite.cmake" : {
      "ObjectId" : "02e92aa50877e1bf2315951233f44e3e251fbea2",
      "LastModified" : "2019-04-13T05:48:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Simmetrix SimModSuite\n\n# Once done this will define\n\n#  SIMMODSUITE_FOUND - System has SimModSuite\n\n#  SIMMODSUITE_INCLUDE_DIR - The SimModSuite include directories\n\n#  SIMMODSUITE_LIBS - The libraries needed to use SimModSuite\n\n#  SIMMODSUITE_<library>_FOUND - System has <library>\n\n#\n\n# Based on input variables:\n\n#  SIM_MPI\n\n#  SIMMETRIX_LIB_DIR\n\n#  SIMMETRIX_INCLUDE_DIR\n\n# And environment variable:\n\n#  CMAKE_PREFIX_PATH\n\n#\n\n# This implementation assumes a simmetrix install has the following structure\n\n# VERSION/\n\n#         include/*.h\n\n#         lib/ARCHOS/*.a\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#VERSION_LESS and VERSION_GREATER need '.' delimited version strings.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set SIMMODSUITE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindZoltan.cmake" : {
      "ObjectId" : "8b9bb192cf0dc0dda5293b7aa8404ab49d51aaf6",
      "LastModified" : "2016-10-04T13:23:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find zoltan\n\n# Once done this will define\n\n#  ZOLTAN_FOUND - System has ZOLTAN\n\n#  ZOLTAN_INCLUDE_DIRS - The ZOLTAN include directories\n\n#  ZOLTAN_LIBRARIES - The libraries needed to use ZOLTAN\n\n#  ZOLTAN_DEFINITIONS - Compiler switches required for using ZOLTAN\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ZOLTAN_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "adda545d4276b1937a4c7f251a0bb2825a42c505",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 38
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#    (ARGN MATCHES \"||\") OR\n\n#    (ARGN MATCHES \"\\\\;\"))\n\n#    message(\"Please report the following error to the project!\")\n\n#    message(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cmake/TPLs/FindTPLSimAcis.cmake" : {
      "ObjectId" : "94eaf46762980f055e14fd7bdb6dcf5d99c90f5e",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TPLs/FindTPLSimField.cmake" : {
      "ObjectId" : "38b9b69642c0e978ecf44bfd6a208088a2f8e281",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TPLs/FindTPLSimMesh.cmake" : {
      "ObjectId" : "b44c89b79ebc2ff34ab7e45fd329a14877df089f",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TPLs/FindTPLSimModel.cmake" : {
      "ObjectId" : "140c2597759617a35bc3d65ef4cb288c64ae8616",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TPLs/FindTPLSimParasolid.cmake" : {
      "ObjectId" : "d67bdf7f8854ebdc4a18fdd3b6c7d3bd92fad8c3",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/bob.cmake" : {
      "ObjectId" : "91ce087b913c9d50770bb3bfdacac8d7e2535150",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake RPATH \"always full\" configuration, see:\n\n# https://cmake.org/Wiki/CMake_RPATH_handling#Always_full_RPATH\n\n# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#try to force BUILD_TESTING to be OFF by default\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#If not building shared libs, then prefer static\n\n#dependency libs\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#if ${pkg_name}_PREFIX is set, don't find it anywhere else:\n",
        "Line" : 107,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#allow CMake to search other prefixes if ${pkg_name}_PREFIX is not set\n",
        "Line" : 111,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 8
    },
    "cmake/xsdk.cmake" : {
      "ObjectId" : "1bc4270635f99c022eda11f9b670fcef00baf228",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set the non-xsdk enable flag\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#set the include path cmake searches\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#set the library path cmake searches\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "crv/CMakeLists.txt" : {
      "ObjectId" : "992589d233722fee5b6a46be59fb421fee68c0ff",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package headers\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the crv library\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include directories\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link this package to these libraries\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "doc/user_CMakeLists.cmake" : {
      "ObjectId" : "a8328134060fa65ada7482509a768945791b1be3",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This file shows how to link to a PUMI\n\n#installation using CMake\n\n#it represents a simple 'CMakeLists.txt'\n\n#file for a new project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Starting here are the critical lines:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow the user to indicate where they installed SCOREC\n\n# via \"-DSCOREC_PREFIX=/home/somewhere\" when calling `cmake`\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If SCOREC_PREFIX was specified, only link to that directory,\n\n# i.e. don't link to another installation in /usr/lib by mistake\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# IF SCOREC_PREFIX was not specified, look in typical system directories,\n\n# and also in CMAKE_PREFIX_PATH (environment variable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#package name, has to be SCOREC\n\n#version. can be omitted, and will match any installed version\n\n#greater than or equal to this one, as long as the major number\n\n#is the same\n",
        "Line" : 24,
        "CharPositionInLine" : 13
      },
      "6" : {
        "Text" : "#indicate that SCOREC is really needed to compile\n\n#skip the 'MODULE' search system, save some time and confusion\n",
        "Line" : 28,
        "CharPositionInLine" : 15
      },
      "7" : {
        "Text" : "#this is just example code, do your own thing\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#for any targets that use PUMI, just use this command\n\n#to it to include the right directories and link to all\n\n#the scorec libraries automatically.\n\n#we recommend PUBLIC if the target is a library and\n\n#PRIVATE if the target is an executable\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "dsp/CMakeLists.txt" : {
      "ObjectId" : "2851c08fe461d3452abbc13bf52bb32334b8c186",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Component options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only install the package if enabled\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Package sources\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Package headers\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the dsp library\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include directories\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link this package to these libraries\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "gmi/CMakeLists.txt" : {
      "ObjectId" : "b132ad6007849338f9c01c40b0f99ba18613fd7a",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package headers\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the gmi library\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "gmi/cmake/Dependencies.cmake" : {
      "ObjectId" : "6458392bb66b946461ddfd45599cae8f4dd78919",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gmi/pkg_tribits.cmake" : {
      "ObjectId" : "b60dc99bd87ecf70278a339b11fa2aa27f1bfef1",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Gets C99 support\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#directory containing gmi header files\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "gmi_sim/CMakeLists.txt" : {
      "ObjectId" : "dda337a5bc245b2d8b15254c6287797a22552314",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this file brings SIM_PARASOLID, SIM_ACIS, SIM_DISCRETE from CMake to C++\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include directories\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make sure the compiler can find the config header\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "gmi_sim/cmake/Dependencies.cmake" : {
      "ObjectId" : "7ba8f07fe76d51589b9acdae2fef845faa433095",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gmi_sim/pkg_tribits.cmake" : {
      "ObjectId" : "31ac551d32e2850e75693e92a5d055f0af1cd620",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# these ENABLE vars are made by tribits based on ./cmake/Dependencies.cmake\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this file brings SIM_PARASOLID and SIM_ACIS from CMake to C++\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure the compiler can find the above header\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "lion/CMakeLists.txt" : {
      "ObjectId" : "1a46f76a050d0ac1855c5187b6bafc42fdc7a916",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package options\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check for and enable zlib support\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Package sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Package headers\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the lion Library\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include directories\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Do extra work if compression is enabled\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "lion/cmake/Dependencies.cmake" : {
      "ObjectId" : "a0867faead177de933b8c76187eb9b6434a6b6b2",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lion/pkg_tribits.cmake" : {
      "ObjectId" : "a02fb5d0116aa469ab2bf79116a407cca62223c8",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package options\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check for and enable zlib support\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Package sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Package headers\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# THIS IS WHERE TRIBITS GETS HEADERS\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Library\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Do extra work if compression is enabled\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "ma/CMakeLists.txt" : {
      "ObjectId" : "68e72d2ea3e280958ef8ab8fed2aa1c4695cd947",
      "LastModified" : "2019-03-26T04:13:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package headers\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the ma library\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include directories\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link this library to these libraries\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ma/cmake/Dependencies.cmake" : {
      "ObjectId" : "fd11154da065b252df2bb9c0f51db7d2309618cc",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ma/pkg_tribits.cmake" : {
      "ObjectId" : "f7fe9f20e22d3e05f565a00ffef157f0be04e73e",
      "LastModified" : "2019-03-28T04:13:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# THIS IS WHERE TRIBITS GETS HEADERS\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "mds/CMakeLists.txt" : {
      "ObjectId" : "785246c0319ce242f80f0ee23066cc081abd352b",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package options\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the input header\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Package sources\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Package headers\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the mds library\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include directories\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for the generated mds_config.h\n\n# private because no one outside MDS needs it\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link this library to these libraries\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "mds/cmake/Dependencies.cmake" : {
      "ObjectId" : "7f85d7eb364923e1c1833bc3217d064583fb78af",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mds/cmake/cmake/Dependencies.cmake" : {
      "ObjectId" : "cd91c7766e9c484c29058079aca9a07f72b329e6",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mds/pkg_tribits.cmake" : {
      "ObjectId" : "b885dc25646bd21eb6bd8fc551a41990cdc98d2f",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# THIS IS WHERE TRIBITS GETS HEADERS\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "mth/CMakeLists.txt" : {
      "ObjectId" : "1867870a172c3f8704524fd9ae51db6acdef0b98",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package headers\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the mth library\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link this library to these libraries\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "omega_h/CMakeLists.txt" : {
      "ObjectId" : "9a80399a1c3732b58f92c78b24e9253eaf4c0ef3",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only install the package if enabled\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Package sources\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Package headers\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add the apf_omega_h library\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include directories\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Link this package to these libraries\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "parma/CMakeLists.txt" : {
      "ObjectId" : "715a2a248a21da9be37e507473268b3e02cbf1ee",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package headers\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the parma library\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include directories\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link this library to these libraries\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "parma/cmake/Dependencies.cmake" : {
      "ObjectId" : "9d9456a31f18be28c771a830748dcb1259de2fc3",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "parma/pkg_tribits.cmake" : {
      "ObjectId" : "4d2de8b4b41ed8d1acde6a67426ba6caaf9fa07a",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pcu/CMakeLists.txt" : {
      "ObjectId" : "cb4431963df9f573cbbda00a601c6012f651afe1",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package options\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package sources\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Package headers\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add the pcu library\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include directories\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check for and enable compression support\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "pcu/cmake/Dependencies.cmake" : {
      "ObjectId" : "f8205c883b83b0d0d92cd6b6bb91b1d5d3dfa414",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pcu/pkg_tribits.cmake" : {
      "ObjectId" : "0c43fc64a99879db0bba2c9b0a718f4312784dfb",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Gets C99 support\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#directory containing pcu header files\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#directory containing reel_config.h\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "phasta/CMakeLists.txt" : {
      "ObjectId" : "9ee43eb26d1cb5d0a0650c73023f01141b628352",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# simmetrix enabled\n",
        "Line" : 50,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "# no simmetrix\n",
        "Line" : 53,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : "# have simmetrix, but not advMeshing\n",
        "Line" : 55,
        "CharPositionInLine" : 40
      },
      "4" : {
        "Text" : "# Package headers\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add the ph library\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the SimAdvMeshing flag\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# simmetrix enabled\n",
        "Line" : 74,
        "CharPositionInLine" : 36
      },
      "8" : {
        "Text" : "#determine which timer to use based on the target system and compiler\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#from https://github.com/abduld/libwb/issues/5\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Include directories\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "pkg_tribits.cmake" : {
      "ObjectId" : "457655f623888d6b995abb2cab5714bec362dfcd",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pumi/CMakeLists.txt" : {
      "ObjectId" : "5e46b0d28a52ca25e062a49792472c5b9b826e04",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Library\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include directories\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "pumi/cmake/Dependencies.cmake" : {
      "ObjectId" : "e346b9a263a444f79828db751b8c866716b4d068",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "pumi/pkg_tribits.cmake" : {
      "ObjectId" : "e7eb0503e4d8669d5b973ee9849f9ee71eb7c99f",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# THIS IS WHERE TRIBITS GETS HEADERS\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "sam/CMakeLists.txt" : {
      "ObjectId" : "1637472966d1089a06f9fa218d1c19bc7357bfdf",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package headers\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the sam library\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Include directories\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link this package to these libraries\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "spr/CMakeLists.txt" : {
      "ObjectId" : "5a388e72f7f43eb6d49d846ac028d1ba553ca826",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package sources\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Package headers\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the spr library\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link this package to these libraries\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "spr/cmake/Dependencies.cmake" : {
      "ObjectId" : "9d9456a31f18be28c771a830748dcb1259de2fc3",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "spr/pkg_tribits.cmake" : {
      "ObjectId" : "f1b4497f2b57c869bb8c53812042fc7d2f56ff35",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# THIS IS WHERE TRIBITS GETS HEADERS\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "stk/CMakeLists.txt" : {
      "ObjectId" : "4aa5970fb005455397b09b3821f3aaf924f46395",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package options\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only install the package if enabled\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the shards Trilinos package\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configure the input header\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Package sources\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Package headers\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the apf_stk library\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Include directories\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Find the config header while building\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Do some extra work if has stk is on\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "stk/cmake/Dependencies.cmake" : {
      "ObjectId" : "5157af639c9db5b186f220c881d9af9627319252",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stk/pkg_tribits.cmake" : {
      "ObjectId" : "114b287be5a9d1bb5da3022d2f66466ff38e3656",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# determine if configured with stk\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Library\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "e1562cef1c73816fc283055aab46ad20f05e7534",
      "LastModified" : "2019-04-09T04:13:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mesh validity/statistics utilities\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Geometric model utilities\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Mesh generation utilities\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Mesh conversion/formatting utilities\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Mesh rendering/visualization utilities\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Aniso statistic ans size-field visualization utilities\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Mesh partitioning utilities\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Mesh improvement utilities\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Phasta utilities\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Unit tests / functionality regression tests\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# send all the newly added utility executable targets\n\n# back up to the parent (root) scope to be included\n\n# in scorec-config.cmake\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the nightly testing script, if needed\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#executables which call only Simmetrix functions\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "test/cmake/Dependencies.cmake" : {
      "ObjectId" : "a98219b3513dd63b5cf1218c7cf4bb9d2d9c8365",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/testing.cmake" : {
      "ObjectId" : "a619319f26ad21044be25d18415f3301f25cbdba",
      "LastModified" : "2019-04-09T04:13:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the part count mismatch is intentional,\n\n# this test runs on half its procs\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adapt_meshgen uses the output of parallel_meshgen\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "zoltan/CMakeLists.txt" : {
      "ObjectId" : "5450ee52a0ee963ff9371eb20797c5a9eade81f7",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package options\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Let CMake know where to find custom find package implementations\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for and enable zoltan support\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Package sources\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Package headers\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add the apf_zoltan library\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include directories\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Link this package to these libraries\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Do extra work if zoltan is enabled\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "zoltan/cmake/Dependencies.cmake" : {
      "ObjectId" : "e9d9a7c5d3198517056d9cdfa489503842f236fa",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "zoltan/pkg_tribits.cmake" : {
      "ObjectId" : "9a7a67f34e790ff854dcec6b9b97621135f5ac57",
      "LastModified" : "2019-01-12T04:59:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Sources & Headers\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Library\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 71
  },
  "ElapsedTime" : 1763
}