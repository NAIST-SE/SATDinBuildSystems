{
  "Repository" : "50791437",
  "Revision" : "HEAD",
  "ObjectId" : "45ce9fccda8b75e58612b70bd45d88bc0621126b",
  "CommitTime" : "2018-10-24T21:59:48Z",
  "Files" : {
    "api/CMakeLists.txt" : {
      "ObjectId" : "17de962637e0148c6e6d1e8e68d582a314c005cd",
      "LastModified" : "2018-01-05T20:06:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Reuse object files for both shared and static libraries\n\n# rather than recompiling for both\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "api/OsccConfig.cmake" : {
      "ObjectId" : "c4b45ed111c98e72ed161130b6a232b3f6e36cfd",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/CMakeLists.txt" : {
      "ObjectId" : "d05184186bfb74c6843db26d28a462e8bdbd037e",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/CMakeLists.txt" : {
      "ObjectId" : "da7aa4f4113596d46e914f0c87c318602b5290f6",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/kia_soul_ev_niro/CMakeLists.txt" : {
      "ObjectId" : "adf356b71f0cde838c11fa64874155465b3282c5",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/kia_soul_ev_niro/tests/CMakeLists.txt" : {
      "ObjectId" : "5bcc4f2a9342a3a21e506af66dbd058dad2f2a24",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/kia_soul_petrol/CMakeLists.txt" : {
      "ObjectId" : "cbbfe608333b06c983fa4cfa3e708c4b8cba2f76",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/kia_soul_petrol/tests/CMakeLists.txt" : {
      "ObjectId" : "ca932259fbf09989d69c6302ccf6ac8cc53098d4",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/kia_soul_petrol/utils/CMakeLists.txt" : {
      "ObjectId" : "6f9921ca426bf7c30582869dd7901a6ac2745636",
      "LastModified" : "2018-01-05T20:06:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/kia_soul_petrol/utils/release_pressure/CMakeLists.txt" : {
      "ObjectId" : "bf88a02150343f4dbb73546d0f144c4d20c54c2c",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/brake/kia_soul_petrol/utils/serial_actuator/CMakeLists.txt" : {
      "ObjectId" : "f0c692e311f1ea0b55fadac4e14cebb44276efd9",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/can_gateway/CMakeLists.txt" : {
      "ObjectId" : "5d52c4b2dd38c3be766ee0a4ee293de8d4810897",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/can_gateway/tests/CMakeLists.txt" : {
      "ObjectId" : "cbf473809f54a99270acb9e926f3f85b6726355a",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/cmake/OsccConfig.cmake" : {
      "ObjectId" : "2dddd024b3eaa683f79fbf41a5596e8922e3456f",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#To be deprecated in favor of using VEHICLE and VEHICLE VALUES so that\n\n#adding new vehicles can be maintained in a single list and the list of\n\n#available values can be printed in help and output.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/cmake/OsccFirmware.cmake" : {
      "ObjectId" : "3c1a32f2b51295b10a0375f87be8121451820c4f",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/common/libs/pid/tests/CMakeLists.txt" : {
      "ObjectId" : "16c6b61025cdad52d506f7e00ad767c0604c26e2",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/common/testing/framework/cgreen/lib/cmake/cgreen/cgreen-config-version.cmake" : {
      "ObjectId" : "f80e52bf8d734d9c02bdd454ac11cdd33058a9e9",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check whether the requested PACKAGE_FIND_VERSION is compatible\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/testing/framework/cgreen/lib/cmake/cgreen/cgreen-config.cmake" : {
      "ObjectId" : "12b5c59035ceedcaa249dd183fbb3c46f48444a9",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Config file for the cgreen package\n\n# It defines the following variables\n\n#  CGREEN_CMAKE_DIR - include directories for cgreen\n\n#  CGREEN_INCLUDE_DIRS - include directories for cgreen\n\n#  CGREEN_LIBRARIES    - libraries to link against\n\n#  CGREEN_EXECUTABLE   - the cgreen executable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  leave this up to cmake\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/ArduinoToolchain.cmake" : {
      "ObjectId" : "90c1949b6677f0f8dc00b2e95e557635c728f17e",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# Author: Tomasz Bogdal (QueezyTheGreat)\n\n# Home:   https://github.com/queezythegreat/arduino-cmake\n\n#\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n\n# License, v. 2.0. If a copy of the MPL was not distributed with this file,\n\n# You can obtain one at http://mozilla.org/MPL/2.0/.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add current directory to CMake Module path automatically\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n#                         System Paths                                        #\n\n#=============================================================================#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\n",
        "Line" : 34,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : "# MacPorts\n",
        "Line" : 35,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : "#=============================================================================#\n\n#                         Detect Arduino SDK                                  #\n\n#=============================================================================#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "firmware/common/toolchain/Platform/Arduino.cmake" : {
      "ObjectId" : "5cec4ceaf0a21d33ead3c3fe66e802233bbbedaf",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# Original Author: Tomasz Bogdal (QueezyTheGreat)\n\n# Current Author: Timor Gruber (MrPointer)\n\n# Original Home: https://github.com/queezythegreat/arduino-cmake\n\n# Current Home: https://github.com/arduino-cmake/arduino-cmake\n\n#\n\n# This Source Code Form is subject to the terms of the Mozilla Public\n\n# License, v. 2.0. If a copy of the MPL was not distributed with this file,\n\n# You can obtain one at http://mozilla.org/MPL/2.0/.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define the 'RECURSE' flag for libraries known to depend on it\n\n# on each reload\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Core/BoardFlags/CompilerFlagsSetter.cmake" : {
      "ObjectId" : "fd7c58a6436e55d8db82cc8f15e97e5f92c4d579",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ToDo: Comment\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Core/BoardFlags/FlagsSetter.cmake" : {
      "ObjectId" : "de0f97a9fe47c671b4f2dc7fd15da9656b3fddf9",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# set_board_flags\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# set_board_flags(COMPILER_FLAGS LINKER_FLAGS BOARD_ID IS_MANUAL)\n\n#\n\n#       COMPILER_FLAGS - Variable holding compiler flags\n\n#       LINKER_FLAGS - Variable holding linker flags\n\n#       BOARD_ID - The board id name\n\n#       IS_MANUAL - (Advanced) Only use AVR Libc/Includes\n\n#\n\n# Configures the build settings for the specified Arduino Board.\n\n#\n\n#=============================================================================#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# output\n",
        "Line" : 27,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n# _get_normalized_sdk_version\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# _get_normalized_sdk_version(OUTPUT_VAR)\n\n#\n\n#       OUTPUT_VAR - Returned variable storing the normalized version\n\n#\n\n# Normalizes SDK's version for a proper use of the '-DARDUINO' compile flag.\n\n# Note that there are differences between normalized versions in specific SDK versions:\n\n#       SDK Version 1.5.8 and above - Appends zeros to version parts.\n\n#                                     e.g Version 1.6.5 will be normalized as 10605\n\n#       SDK Versions between 1.0.0 and 1.5.8 - Joins all version parts together.\n\n#                                              e.g Version 1.5.3 will be normalized as 153\n\n#       SDK Version 1.0.0 and below - Uses only the 'Minor' version part.\n\n#                                     e.g Version 0.20.0 will be normalized as 20\n\n#\n\n#=============================================================================#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -DARDUINO format has changed since 1.6.0 by appending zeros when required,\n\n# e.g for 1.6.5 version -DARDUINO=10605\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# -DARDUINO format before 1.0.0 uses only minor version,\n\n# e.g. for 0020 version -DARDUINO=20\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# -DARDUINO format after 1.0.0 combines all 3 version parts together,\n\n# e.g. for 1.5.3 version -DARDUINO=153\n",
        "Line" : 70,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "#=============================================================================#\n\n# _append_suffix_zero_to_version_if_required\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# _append_suffix_zero_to_version_if_required(VERSION_PART VERSION_LIMIT OUTPUT_VAR)\n\n#\n\n#       VERSION_PART - Version to check and possibly append to.\n\n#                 Must be a version part - Major, Minor or Patch.\n\n#       VERSION_LIMIT - Append limit. For a version greater than this number\n\n#                       a zero will NOT be appended.\n\n#       OUTPUT_VAR - Returned variable storing the normalized version.\n\n#\n\n# Appends a suffic zero to the given version part if it's below than the given limit.\n\n# Otherwise, the version part is returned as it is.\n\n#\n\n#=============================================================================#\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "firmware/common/toolchain/Platform/Core/BoardFlags/LinkerFlagsSetter.cmake" : {
      "ObjectId" : "6b416cd0149a389261eac7d19e1d6c33b6ddb859",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ToDo: Comment\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Core/BoardPropertiesReader.cmake" : {
      "ObjectId" : "76f752f5a29230c762484f46859a8fba75b11bd0",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# _get_board_id\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# _get_board_id(BOARD_NAME BOARD_CPU TARGET_NAME OUTPUT_VAR)\n\n#\n\n#        BOARD_NAME - name of the board, eg.: nano, uno, etc...\n\n#        BOARD_CPU - come boards has multiple versions with different cpus, eg.: nano has atmega168 and atmega328\n\n#        TARGET_NAME - name of the build target, used to show clearer error message\n\n#        OUT_VAR - BOARD_ID constructed from BOARD_NAME and BOARD_CPU\n\n#\n\n# returns BOARD_ID constructing from BOARD_NAME and BOARD_CPU, if board doesn't has multiple cpus then BOARD_ID = BOARD_NAME\n\n# if board has multiple CPUS, and BOARD_CPU is not defined or incorrect, fatal error will be invoked.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================#\n\n# _get_board_property\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# _get_board_property(BOARD_ID PROPERTY_NAME OUTPUT_VAR)\n\n#\n\n#        BOARD_ID - return value from function \"_get_board_id (BOARD_NAME, BOARD_CPU)\". It contains BOARD_NAME and BOARD_CPU\n\n#        PROPERTY_NAME - property name for the board, eg.: bootloader.high_fuses\n\n#        OUT_VAR - variable holding value for the property\n\n#\n\n# Gets board property.\n\n# Reconstructs BOARD_NAME and BOARD_CPU from BOARD_ID and tries to find value at ${BOARD_NAME}.${PROPERTY_NAME},\n\n# if not found than try to find value at ${BOARD_NAME}.menu.cpu.${BOARD_CPU}.${PROPERTY_NAME}\n\n# if not found that show fatal error\n\n#=============================================================================#\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n# _get_board_property_if_exists\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# _get_board_property_if_exists(BOARD_ID PROPERTY_NAME OUTPUT_VAR)\n\n#\n\n#        BOARD_ID - return value from function \"_get_board_id (BOARD_NAME, BOARD_CPU)\". It contains BOARD_NAME and BOARD_CPU\n\n#        PROPERTY_NAME - property name for the board, eg.: bootloader.high_fuses\n\n#        OUT_VAR - variable holding value for the property\n\n#\n\n# Similar to _get_board_property, except it returns empty value if value was not found.\n\n#=============================================================================#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "firmware/common/toolchain/Platform/Core/Examples/ArduinoExampleFactory.cmake" : {
      "ObjectId" : "0991cd773b5b1bf9215224ac64f0dc8d82217534",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# make_arduino_example\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# make_arduino_example(TARGET_NAME EXAMPLE_NAME OUTPUT_VAR [CATEGORY_NAME])\n\n#\n\n#      TARGET_NAME  - Target name\n\n#      EXAMPLE_NAME - Example name\n\n#      OUTPUT_VAR   - Variable name to save sketch path.\n\n#      [CATEGORY_NAME] - Optional name of the example's parent category, such as 'Basics' is for 'Blink'.\n\n#\n\n# Creates an Arduino example from the built-in categories.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Case-insensitive support\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Core/Examples/ArduinoLibraryExampleFactory.cmake" : {
      "ObjectId" : "0df094fa779f8e59414820e4c37d2be740245894",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# make_arduino_library_example\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# make_arduino_library_example(TARGET_NAME LIBRARY_NAME EXAMPLE_NAME OUTPUT_VAR)\n\n#\n\n#      TARGET_NAME  - Target name\n\n#      LIBRARY_NAME - Library name\n\n#      EXAMPLE_NAME - Example name\n\n#      OUTPUT_VAR   - Variable name to save sketch path.\n\n#\n\n# Creates a Arduino example from the specified library.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Property Scope\n",
        "Line" : 18,
        "CharPositionInLine" : 26
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Core/Libraries/ArduinoLibraryFactory.cmake" : {
      "ObjectId" : "2dd392f3d78508541a2f00053ff349d1c9b50d49",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# make_arduino_library\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# make_arduino_library(VAR_NAME BOARD_ID LIB_PATH COMPILE_FLAGS LINK_FLAGS)\n\n#\n\n#        VAR_NAME    - Vairable wich will hold the generated library names\n\n#        BOARD_ID    - Board ID\n\n#        LIB_PATH    - Path of the library\n\n#        COMPILE_FLAGS - Compile flags\n\n#        LINK_FLAGS    - Link flags\n\n#\n\n# Creates an Arduino library, with all it's library dependencies.\n\n#\n\n#      ${LIB_NAME}_RECURSE controls if the library will recurse\n\n#      when looking for source files.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect if recursion is needed\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Target already exists, skiping creating\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "#=============================================================================#\n\n# make_arduino_libraries\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# make_arduino_libraries(VAR_NAME BOARD_ID SRCS COMPILE_FLAGS LINK_FLAGS)\n\n#\n\n#        VAR_NAME    - Vairable wich will hold the generated library names\n\n#        BOARD_ID    - Board ID\n\n#        SRCS        - source files\n\n#        COMPILE_FLAGS - Compile flags\n\n#        LINK_FLAGS    - Linker flags\n\n#\n\n# Finds and creates all dependency libraries based on sources.\n\n#\n\n#=============================================================================#\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create static library instead of returning sources\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "firmware/common/toolchain/Platform/Core/Libraries/BlacklistedLibrariesRemover.cmake" : {
      "ObjectId" : "6bf27eb8bf237e8760c790f43bbaf5dbf86afdfb",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# _REMOVE_BLACKLISTED_LIBRARIES\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# _REMOVE_BLACKLISTED_LIBRARIES(LIBRARY_LIST OUTPUT_VAR)\n\n#\n\n#      LIBRARY_LIST - List of libraries to remove blacklisted libraries from\n\n#      OUTPUT_VAR - Original list of libraries without blacklisted libraries.\n\n#\n\n#      Returns a list of libraries without blacklisted libraries.\n\n#\n\n# Arduino-CMake looks for Arduino libraries whose names match those of include files encountered.\n\n# Under certain circumstances this leads to undesired behavior.\n\n# An example is an include file 'Keyboard.h' in a project that has no relation to\n\n# Arduino's standard Keyboard library.\n\n# To prevent the standard library from being falsely added to the list of libraries to build,\n\n# this function removes all blacklisted libraries from the source list, which contains\n\n# all the included libraries found in the search process.\n\n# In the example above the blacklisted and remove library would be\n\n# ${ARDUINO_SDK_PATH}/libraries/Keyboard/src).\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Core/Libraries/CoreLibraryFactory.cmake" : {
      "ObjectId" : "f580997bcd22f0d2e0524f1582f6f6ce4f339b9b",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# make_core_library\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# make_core_library(OUTPUT_VAR BOARD_ID)\n\n#\n\n#        OUTPUT_VAR - Variable name that will hold the generated library name\n\n#        BOARD_ID - Arduino board id\n\n#\n\n# Creates the Arduino Core library for the specified board,\n\n# each board gets it's own version of the library.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Debian/Ubuntu fix\n",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Core/LibraryFinder.cmake" : {
      "ObjectId" : "62fca6ee3f19f3004caa5e554aaf448c19214d7d",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# find_arduino_libraries\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# find_arduino_libraries(VAR_NAME SRCS ARDLIBS)\n\n#\n\n#      VAR_NAME - Variable name which will hold the results\n\n#      SRCS     - Sources that will be analized\n\n#      ARDLIBS  - Arduino libraries identified by name (e.g., Wire, SPI, Servo)\n\n#\n\n#     returns a list of paths to libraries found.\n\n#\n\n#  Finds all Arduino type libraries included in sources. Available libraries\n\n#  are ${ARDUINO_SDK_PATH}/libraries and ${CMAKE_CURRENT_SOURCE_DIR}.\n\n#\n\n#  Also adds Arduino libraries specifically names in ALIBS.  We add \".h\" to the\n\n#  names and then process them just like the Arduino libraries found in the sources.\n\n#\n\n#  A Arduino library is a folder that has the same name as the include header.\n\n#  For example, if we have a include \"#include <LibraryName.h>\" then the following\n\n#  directory structure is considered a Arduino library:\n\n#\n\n#     LibraryName/\n\n#          |- LibraryName.h\n\n#          `- LibraryName.c\n\n#\n\n#  If such a directory is found then all sources within that directory are considred\n\n#  to be part of that Arduino library.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libraries are known in advance, just find their absoltue paths\n",
        "Line" : 34,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "# Property Scope\n",
        "Line" : 38,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# Some libraries like Wire and SPI require building from source\n",
        "Line" : 55,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# Skipping generated files. They are, probably, not exist yet.\n\n# TODO: Maybe it's possible to skip only really nonexisting files,\n\n# but then it wiil be less deterministic.\n",
        "Line" : 73,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Workaround for sketches, which are marked as generated\n",
        "Line" : 77,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Property Scope\n",
        "Line" : 98,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : "# Some libraries like Wire and SPI require building from source\n",
        "Line" : 106,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "firmware/common/toolchain/Platform/Core/Sketch/ArduinoSketchFactory.cmake" : {
      "ObjectId" : "5949659758a6a3f0d083563d5d580d3f49dde8c8",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# make_arduino_sketch\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# make_arduino_sketch(TARGET_NAME SKETCH_PATH OUTPUT_VAR)\n\n#\n\n#      TARGET_NAME - Target name\n\n#      SKETCH_PATH - Path to sketch directory\n\n#      OUTPUT_VAR  - Variable name where to save generated sketch source\n\n#\n\n# Generates C++ sources from Arduino Sketch.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Always set sketch path to the parent directory -\n\n# Sketch files will be found later\n",
        "Line" : 20,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Find all sketch files\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Sketch sources not found\n",
        "Line" : 28,
        "CharPositionInLine" : 38
      },
      "4" : {
        "Text" : "# Regenerate build system if sketch changes\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Mark file that it exists for find_file\n",
        "Line" : 43,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "firmware/common/toolchain/Platform/Core/Sketch/ArduinoSketchToCppConverter.cmake" : {
      "ObjectId" : "54129f787667a13923eb37d5f0ed368ff31190b9",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# convert_sketch_to_cpp\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# convert_sketch_to_cpp(MAIN_SKETCH_PATH SKETCH_SOURCES SKETCH_CPP)\n\n#\n\n#         SKETCH_SOURCES - Setch source paths\n\n#         SKETCH_CPP - Name of file to generate\n\n#\n\n# Generate C++ source file from Arduino sketch files.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# remove comments\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# find first statement\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# find the body of the main pde\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# write the file head\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Count head line offset (for GCC error reporting)\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# add arduino include header\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#=============================================================================#\n\n# remove_comments\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# remove_comments(SRC_VAR OUT_VAR)\n\n#\n\n#        SRC_VAR - variable holding sources\n\n#        OUT_VAR - variable holding sources with no comments\n\n#\n\n# Removes all comments from the source code.\n\n#=============================================================================#\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(STATUS \"removing comments from: ${FILE}\")\n\n#file(WRITE \"${CMAKE_BINARY_DIR}/${FILE}_pre_remove_comments.txt\" ${SRC})\n\n#message(STATUS \"\\n${SRC}\")\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# remove all comments\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#file(WRITE \"${CMAKE_BINARY_DIR}/${FILE}_post_remove_comments.txt\" ${SRC})\n\n#message(STATUS \"\\n${SRC}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#=============================================================================#\n\n# get_number_of_lines_in_document\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# get_number_of_lines_in_document(DOCUMENT OUTPUT_VAR)\n\n#\n\n#        DOCUMENT - Document's content\n\n#        OUTPUT_VAR - Variable which will hold the line number count\n\n#\n\n# Counts the line number of the document.\n\n#=============================================================================#\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "firmware/common/toolchain/Platform/Core/SourceFinder.cmake" : {
      "ObjectId" : "cb89aabc3fbedb4935ebd3dbd7233ce60041ad6d",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# find_sources\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# find_sources(VAR_NAME LIB_PATH RECURSE)\n\n#\n\n#        VAR_NAME - Variable name that will hold the detected sources\n\n#        LIB_PATH - The base path\n\n#        RECURSE  - Whether or not to recurse\n\n#\n\n# Finds all C/C++ sources located at the specified path.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoBootloaderArgumentsBuilder.cmake" : {
      "ObjectId" : "e1ea560bf4a7c7b79d2eab2cfdd39789a2d805fe",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# build_arduino_bootloader_arguments\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# build_arduino_bootloader_arguments(BOARD_ID TARGET_NAME PORT AVRDUDE_FLAGS OUTPUT_VAR)\n\n#\n\n#      BOARD_ID    - board id\n\n#      TARGET_NAME - target name\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#      OUTPUT_VAR  - name of output variable for result\n\n#\n\n# Sets up default avrdude settings for uploading firmware via the bootloader.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# avrdude config\n",
        "Line" : 23,
        "CharPositionInLine" : 48
      },
      "2" : {
        "Text" : "# MCU Type\n",
        "Line" : 24,
        "CharPositionInLine" : 30
      },
      "3" : {
        "Text" : "# Programmer\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Baud rate\n\n# Serial port\n\n# Dont erase\n",
        "Line" : 38,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 5
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoBootloaderBurnTargetCreator.cmake" : {
      "ObjectId" : "a28a2ef047d038291cc95f5e314509c56b0a601f",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# create_arduino_bootloader_burn_target\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# create_arduino_bootloader_burn_target(TARGET_NAME BOARD_ID PROGRAMMER PORT AVRDUDE_FLAGS)\n\n#\n\n#      TARGET_NAME - name of target to burn\n\n#      BOARD_ID    - board id\n\n#      PROGRAMMER  - programmer id\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#\n\n# Create a target for burning a bootloader via a programmer.\n\n#\n\n# The target for burning the bootloader is ${TARGET_NAME}-burn-bootloader\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# look at bootloader.file\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# build bootloader.path from bootloader.file...\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# and fix bootloader.file\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#check for required bootloader parameters\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#do not make fatal error if field doesn't exists, just don't create bootloader burn target\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Erase the chip\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Set unlock bits and fuses (because chip is going to be erased)\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# extended fuses is optional\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Create burn bootloader target\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoBootloaderUploadTargetCreator.cmake" : {
      "ObjectId" : "99bf4e05b8e3cc3a67d2cd20181de66ffca8b73c",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# setup_arduino_bootloader_upload\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_arduino_bootloader_upload(TARGET_NAME BOARD_ID PORT)\n\n#\n\n#      TARGET_NAME - target name\n\n#      BOARD_ID    - board id\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#\n\n# Set up target for upload firmware via the bootloader.\n\n#\n\n# The target for uploading the firmware is ${TARGET_NAME}-upload .\n\n#\n\n#=============================================================================#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Global upload target\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoFirmwareTargetCreator.cmake" : {
      "ObjectId" : "866742c4738b126382d8536ad37a3fcca002f49d",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# create_arduino_target\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# create_arduino_target(TARGET_NAME ALL_SRCS ALL_LIBS COMPILE_FLAGS LINK_FLAGS MANUAL)\n\n#\n\n#        TARGET_NAME - Target name\n\n#        BOARD_ID    - Arduino board ID\n\n#        ALL_SRCS    - All sources\n\n#        ALL_LIBS    - All libraries\n\n#        COMPILE_FLAGS - Compile flags\n\n#        LINK_FLAGS    - Linker flags\n\n#        MANUAL - (Advanced) Only use AVR Libc/Includes\n\n#\n\n# Creates an Arduino firmware target.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Convert firmware image to ASCII HEX format\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Display target size\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Create ${TARGET_NAME}-size target\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoProgrammerArgumentsBuilder.cmake" : {
      "ObjectId" : "1ff6ed4d3c3d2382cf52f38433542fa916cb3b7e",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# build_arduino_programmer_arguments\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# build_arduino_programmer_arguments(BOARD_ID PROGRAMMER TARGET_NAME PORT AVRDUDE_FLAGS OUTPUT_VAR)\n\n#\n\n#      BOARD_ID    - board id\n\n#      PROGRAMMER  - programmer id\n\n#      TARGET_NAME - target name\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#      OUTPUT_VAR  - name of output variable for result\n\n#\n\n# Sets up default avrdude settings for burning firmware via a programmer.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TODO: Check mandatory settings before continuing\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set programmer\n",
        "Line" : 30,
        "CharPositionInLine" : 60
      },
      "3" : {
        "Text" : "# Set USB as port\n",
        "Line" : 33,
        "CharPositionInLine" : 42
      },
      "4" : {
        "Text" : "# Set port\n",
        "Line" : 35,
        "CharPositionInLine" : 46
      },
      "5" : {
        "Text" : "# Set baud rate\n",
        "Line" : 37,
        "CharPositionInLine" : 65
      },
      "6" : {
        "Text" : "# Set force\n",
        "Line" : 42,
        "CharPositionInLine" : 39
      },
      "7" : {
        "Text" : "# Set delay\n",
        "Line" : 46,
        "CharPositionInLine" : 61
      },
      "8" : {
        "Text" : "# MCU Type\n",
        "Line" : 50,
        "CharPositionInLine" : 42
      },
      "CommentCount" : 9
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoProgrammerBurnTargetCreator.cmake" : {
      "ObjectId" : "78594d2f5b0895915bf241ea186791d6ccdc3544",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# create_arduino_programmer_burn_target\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# create_arduino_programmer_burn_target(TARGET_NAME BOARD_ID PROGRAMMER PORT AVRDUDE_FLAGS)\n\n#\n\n#      TARGET_NAME - name of target to burn\n\n#      BOARD_ID    - board id\n\n#      PROGRAMMER  - programmer id\n\n#      PORT        - serial port\n\n#      AVRDUDE_FLAGS - avrdude flags (override)\n\n#\n\n# Sets up target for burning firmware via a programmer.\n\n#\n\n# The target for burning the firmware is ${TARGET_NAME}-burn .\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoSerialTargetCreator.cmake" : {
      "ObjectId" : "a82a527925bfed7efcdf58a0a29fea673693d6a6",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# create_serial_target\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# create_serial_target(TARGET_NAME CMD)\n\n#\n\n#         TARGET_NAME - Target name\n\n#         CMD         - Serial terminal command\n\n#\n\n# Creates a target (${TARGET_NAME}-serial) for launching the serial termnial.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Core/Targets/ArduinoUploadTargetCreator.cmake" : {
      "ObjectId" : "b67ad8514f8a36a1876e969f86a066a5789e9751",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# create_arduino_upload_target\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# create_arduino_upload_target(BOARD_ID TARGET_NAME PORT)\n\n#\n\n#        BOARD_ID    - Arduino board id\n\n#        TARGET_NAME - Target name\n\n#        PORT        - Serial port for upload\n\n#        PROGRAMMER_ID - Programmer ID\n\n#        AVRDUDE_FLAGS - avrdude flags\n\n#\n\n# Create an upload target (${TARGET_NAME}-upload) for the specified Arduino target.\n\n#\n\n#=============================================================================#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add programmer support if defined\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Core/VariableValidator.cmake" : {
      "ObjectId" : "50af23cb02c38cf454b455347e41adb279385f34",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# VALIDATE_VARIABLES_NOT_EMPTY\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# VALIDATE_VARIABLES_NOT_EMPTY(MSG msg VARS var1 var2 .. varN)\n\n#\n\n#        MSG - Message to display in case of error\n\n#        VARS - List of variables names to check\n\n#\n\n# Ensure the specified variables are not empty, otherwise a fatal error is emmited.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================#\n\n# error_for_unparsed\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# error_for_unparsed(PREFIX)\n\n#\n\n#        PREFIX - Prefix name\n\n#\n\n# Emit fatal error if there are unparsed argument from cmake_parse_arguments().\n\n#=============================================================================#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Extras/CalculateFirmwareSize.cmake" : {
      "ObjectId" : "c2d1c85020f997532bc24202d41bce28cbff5749",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Convert lines into a list\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Extras/DebugOptions.cmake" : {
      "ObjectId" : "5a70984941a1891ddb0788cd24900d501bc2c6bc",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# arduino_debug_on()\n\n# [PRIVATE/INTERNAL]\n\n#\n\n#  arduino_debug_on()\n\n#\n\n# Enables Arduino module debugging.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================#\n\n# arduino_debug_on()\n\n# [PRIVATE/INTERNAL]\n\n#\n\n#  arduino_debug_off()\n\n#\n\n# Disables Arduino module debugging.\n\n#=============================================================================#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n# arduino_debug_msg\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# arduino_debug_msg(MSG)\n\n#\n\n#        MSG - Message to print\n\n#\n\n# Print Arduino debugging information. In order to enable printing\n\n# use arduino_debug_on() and to disable use arduino_debug_off().\n\n#=============================================================================#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "firmware/common/toolchain/Platform/Extras/GeneratorSettingsLoader.cmake" : {
      "ObjectId" : "e2eb63d1840f3a111bf9690a425d4e13ed120dab",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# load_generator_settings\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# load_generator_settings(TARGET_NAME PREFIX [SUFFIX_1 SUFFIX_2 .. SUFFIX_N])\n\n#\n\n#         TARGET_NAME - The base name of the user settings\n\n#         PREFIX      - The prefix name used for generator settings\n\n#         SUFFIX_XX   - List of suffixes to load\n\n#\n\n#  Loads a list of user settings into the generators scope. User settings have\n\n#  the following syntax:\n\n#\n\n#      ${BASE_NAME}${SUFFIX}\n\n#\n\n#  The BASE_NAME is the target name and the suffix is a specific generator settings.\n\n#\n\n#  For every user setting found a generator setting is created of the follwoing fromat:\n\n#\n\n#      ${PREFIX}${SUFFIX}\n\n#\n\n#  The purpose of loading the settings into the generator is to not modify user settings\n\n#  and to have a generic naming of the settings within the generator.\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Extras/Macros.cmake" : {
      "ObjectId" : "06c7dc74643c8e0738dc7eeaa802e0b572867fb8",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# parse_generator_arguments\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# parse_generator_arguments(TARGET_NAME PREFIX OPTIONS ARGS MULTI_ARGS [ARG1 ARG2 .. ARGN])\n\n#\n\n#         PREFIX     - Parsed options prefix\n\n#         OPTIONS    - List of options\n\n#         ARGS       - List of one value keyword arguments\n\n#         MULTI_ARGS - List of multi value keyword arguments\n\n#         [ARG1 ARG2 .. ARGN] - command arguments [optional]\n\n#\n\n# Parses generator options from either variables or command arguments\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================#\n\n# get_mcu\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# get_mcu(FULL_MCU_NAME, OUTPUT_VAR)\n\n#\n\n#         FULL_MCU_NAME - Board's full mcu name, including a trailing 'p' if present\n\n#         OUTPUT_VAR - String value in which a regex match will be stored\n\n#\n\n# Matches the board's mcu without leading or trailing characters that would rather mess\n\n# further processing that requires the board's mcu.\n\n#\n\n#=============================================================================#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n# increment_example_category_index\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# increment_example_category_index(OUTPUT_VAR)\n\n#\n\n#         OUTPUT_VAR - A number representing an example's category prefix\n\n#\n\n# Increments the given number by one, taking into consideration the number notation\n\n# which is defined (Some SDK's or OSs use a leading '0' in single-digit numbers.\n\n#\n\n#=============================================================================#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "firmware/common/toolchain/Platform/Extras/Printer.cmake" : {
      "ObjectId" : "d554e2c9ed741b63ea88dc7581cc809b4499ea60",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# print_board_list\n\n# [PUBLIC/USER]\n\n#\n\n# print_board_list()\n\n#\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================#\n\n# print_programmer_list\n\n# [PUBLIC/USER]\n\n#\n\n# print_programmer_list()\n\n#\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n# print_programmer_settings\n\n# [PUBLIC/USER]\n\n#\n\n# print_programmer_settings(PROGRAMMER)\n\n#\n\n# see documentation at top\n\n#=============================================================================#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================#\n\n# print_board_settings\n\n# [PUBLIC/USER]\n\n#\n\n# print_board_settings(ARDUINO_BOARD)\n\n#\n\n# see documentation at top\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================================#\n\n# print_settings\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# print_settings(ENTRY_NAME)\n\n#\n\n#      ENTRY_NAME - name of entry\n\n#\n\n# Print the entry settings (see load_arduino_syle_settings()).\n\n#\n\n#=============================================================================#\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#=============================================================================#\n\n# print_list\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# print_list(SETTINGS_LIST)\n\n#\n\n#      SETTINGS_LIST - Variables name of settings list\n\n#\n\n# Print list settings and names (see load_arduino_syle_settings()).\n\n#=============================================================================#\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "firmware/common/toolchain/Platform/Generation/ArduinoExampleGenerator.cmake" : {
      "ObjectId" : "24c4ac4150daf89cef643ee6655f72b3306a78a5",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# GENERATE_ARDUINO_EXAMPLE\n\n# [PUBLIC/USER]\n\n# see documentation at README\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 8,
        "CharPositionInLine" : 64
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Generation/ArduinoFirmwareGenerator.cmake" : {
      "ObjectId" : "dc4a409071323472bdfc947683a02c5c5266dac2",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# GENERATE_ARDUINO_FIRMWARE\n\n# [PUBLIC/USER]\n\n# see documentation at README\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 9,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Generation/ArduinoLibraryExampleGenerator.cmake" : {
      "ObjectId" : "8eddf9a41da17cf1b4b28fa134ed594b0d5ad610",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# GENERATE_ARDUINO_LIBRARY_EXAMPLE\n\n# [PUBLIC/USER]\n\n# see documentation at README\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 8,
        "CharPositionInLine" : 63
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Generation/ArduinoLibraryGenerator.cmake" : {
      "ObjectId" : "d50e5c489db09a1b48c4404ddea56d391625695d",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# GENERATE_ARDUINO_LIBRARY\n\n# [PUBLIC/USER]\n\n# see documentation at README\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 9,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Generation/AvrFirmwareGenerator.cmake" : {
      "ObjectId" : "3a9667e245e22aea110f503fa26df31bc381ed03",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# GENERATE_AVR_FIRMWARE\n\n# [PUBLIC/USER]\n\n# see documentation at README\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO: This is not optimal!!!!\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 10,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 3
    },
    "firmware/common/toolchain/Platform/Generation/AvrLibraryGenerator.cmake" : {
      "ObjectId" : "9d827de4cf537dc90d400d6c7b023b7b07cbc203",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# GENERATE_AVR_LIBRARY\n\n# [PUBLIC/USER]\n\n# see documentation at README\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options\n\n# One Value Keywords\n\n# Multi Value Keywords\n",
        "Line" : 9,
        "CharPositionInLine" : 50
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Initialization/DefineAdvancedVariables.cmake" : {
      "ObjectId" : "f02c7c8c1fae97d98a82a05dab59d533b50d2153",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/common/toolchain/Platform/Initialization/DetectVersion.cmake" : {
      "ObjectId" : "d7d1115c8a3a0e4972573a48278920b88b9b3c70",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# Detects the Arduino SDK Version based on the revisions.txt file.\n\n# The following variables will be generated:\n\n#\n\n#    ${OUTPUT_VAR_NAME}         -> the full version (major.minor.patch)\n\n#    ${OUTPUT_VAR_NAME}_MAJOR   -> the major version\n\n#    ${OUTPUT_VAR_NAME}_MINOR   -> the minor version\n\n#    ${OUTPUT_VAR_NAME}_PATCH   -> the patch version\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Initialization/FindPrograms.cmake" : {
      "ObjectId" : "8bbe5b2d6c8e8b013d241e2c2c9daeea37ba2cee",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/common/toolchain/Platform/Initialization/Initializer.cmake" : {
      "ObjectId" : "80e63bec3ec7cec8a33a3432c3e71d1f10aab1fd",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n#                          Initialization\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# get version first (some stuff depends on versions)\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Initialization/LoadArduinoPlatformSettings.cmake" : {
      "ObjectId" : "843fdb6a85beb9f77a52f92f8e8a15f4338c4440",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SETTINGS_LIST - Variable name of settings list\n\n# SETTINGS_PATH - File path of settings file to load.\n\n#\n\n# Loads an Arduino settings file into the cache.\n\n#\n\n# Examples of this type of settings file is the boards.txt and\n\n# programmers.txt files located in ${ARDUINO_SDK}/hardware/arduino.\n\n#\n\n# Settings have to following format:\n\n#\n\n#      entry.setting[.subsetting] = value\n\n#\n\n# where [.subsetting] is optional\n\n#\n\n# For example, the following settings:\n\n#\n\n#      uno.name=Arduino Uno\n\n#      uno.upload.protocol=stk500\n\n#      uno.upload.maximum_size=32256\n\n#      uno.build.mcu=atmega328p\n\n#      uno.build.core=arduino\n\n#\n\n# will generate the follwoing equivalent CMake variables:\n\n#\n\n#      set(uno.name \"Arduino Uno\")\n\n#      set(uno.upload.protocol     \"stk500\")\n\n#      set(uno.upload.maximum_size \"32256\")\n\n#      set(uno.build.mcu  \"atmega328p\")\n\n#      set(uno.build.core \"arduino\")\n\n#\n\n#      set(uno.SETTINGS  name upload build)              # List of settings for uno\n\n#      set(uno.upload.SUBSETTINGS protocol maximum_size) # List of sub-settings for uno.upload\n\n#      set(uno.build.SUBSETTINGS mcu core)               # List of sub-settings for uno.build\n\n#\n\n# Note that Arduino 1.6 SDK or greater treats most of the settings differently for some boards,\n\n# by grouping them into menus which differentiate on their cpu architecture.\n\n#\n\n# For example, the settings declared earlier for \"regular\" SDKs\n\n# would be declared as such in 1.6:\n\n#\n\n#      mega.name=Arduino Uno\n\n#      mega.menu.cpu.atmega2560.upload.protocol=wiring\n\n#      mega.menu.cpu.atmega2560.upload.maximum_size=253952\n\n#      mega.menu.cpu.atmega2560.build.mcu=atmega2560\n\n#      mega.build.core=arduino\n\n#\n\n# The ${ENTRY_NAME}.SETTINGS variable lists all settings for the entry, while\n\n# ${ENTRY_NAME}.SUBSETTINGS variables lists all settings for a sub-setting of\n\n# a entry setting pair.\n\n#\n\n# These variables are generated in order to be able to  programatically traverse\n\n# all settings (for a example see print_board_settings() function).\n\n#\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Settings file split into lines\n",
        "Line" : 56,
        "CharPositionInLine" : 49
      },
      "2" : {
        "Text" : "# Add entry to settings list if it does not exist\n",
        "Line" : 67,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Add entry to main list\n",
        "Line" : 71,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# Add entry setting to entry settings list if it does not exist\n",
        "Line" : 75,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# menu.cpu.architecture settings\n",
        "Line" : 78,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Add setting to entry\n",
        "Line" : 89,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# Add entry sub-setting to entry sub-settings list if it does not exists\n",
        "Line" : 97,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Search for special cpu sub-settings\n",
        "Line" : 104,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# cpu setting found, determine architecture\n",
        "Line" : 108,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "# Save setting value\n",
        "Line" : 125,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 11
    },
    "firmware/common/toolchain/Platform/Initialization/RegisterHardwarePlatform.cmake" : {
      "ObjectId" : "a89026670aa1b5259c71e280bafa11dbceb9251d",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Arduino is assumed as the default platform\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# avr is the default architecture\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Initialization/RegisterSpecificHardwarePlatform.cmake" : {
      "ObjectId" : "434384f74b15bd86e248d37213065e2ba81f19f9",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n# ToDo: Document\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Avoid defining a platform multiple times if it has already been defined before\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# some libraries are in platform path in versions 1.5 and greater\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# See https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5-3rd-party-Hardware-specification#referencing-another-core-variant-or-tool\n\n# for an explanation why cores must also be available as <vendor_id>:<core_id>\n\n# and <vendor_id>:<architecture_id>:<core_id>\n",
        "Line" : 87,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 4
    },
    "firmware/common/toolchain/Platform/Initialization/SetDefaults.cmake" : {
      "ObjectId" : "945a9d04cd00026cad1962158300466ef78766ba",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/common/toolchain/Platform/Initialization/SetupArduinoSettings.cmake" : {
      "ObjectId" : "4c48cdd2847ac698055942978842775795b30292",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n#                         Arduino Settings\n\n#=============================================================================#\n\n# Setups some basic flags for the arduino upload tools.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Initialization/SetupCompilerSettings.cmake" : {
      "ObjectId" : "5e98ae0a06d1c6aee41c5c2a7aaca231d4aa19de",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=============================================================================#\n\n#                              C Flags\n\n#=============================================================================#\n\n#=============================================================================#\n\n# setup_c_flags\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_c_flags()\n\n#\n\n# Setups some basic flags for the gcc compiler to use later.\n\n#=============================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================#\n\n#                             C++ Flags\n\n#=============================================================================#\n\n#=============================================================================#\n\n# setup_c_flags\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_cxx_flags()\n\n#\n\n# Setups some basic flags for the g++ compiler to use later.\n\n#=============================================================================#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================#\n\n#                       Executable Linker Flags                               #\n\n#=============================================================================#\n\n#=============================================================================#\n\n# setup_exe_linker_flags\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_exe_linker_flags()\n\n#\n\n# Setups some basic flags for the gcc linker to use when linking executables.\n\n#=============================================================================#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================#\n\n#                       Shared Library Linker Flags                           #\n\n#=============================================================================#\n\n#=============================================================================#\n\n# setup_shared_lib_flags\n\n# [PRIVATE/INTERNAL]\n\n#\n\n# setup_shared_lib_flags()\n\n#\n\n# Setups some basic flags for the gcc linker to use when linking shared libraries.\n\n#=============================================================================#\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================================#\n\n# Setups some basic flags for the gcc/g++ compiler and linker.\n\n#=============================================================================#\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "firmware/common/toolchain/Platform/Initialization/SetupExampleCategories.cmake" : {
      "ObjectId" : "1cefedd356ffffcdff9c40f134effd51d480472f",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setups all of Arduino's built-in examples categories, listing it by their names\n\n# without the index prefix ('01.Basics' becomes 'Basics').\n\n# This list is saved in a cached variable named 'ARDUINO_EXAMPLE_CATEGORIES'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/common/toolchain/Platform/Initialization/SetupFirmwareSizeScript.cmake" : {
      "ObjectId" : "e3254d01bb89cc564a92b97eefb60de3cba6fe02",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Replace placeholders with matching arguments\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create the replaced file in the build's cache directory\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "firmware/common/toolchain/Platform/Initialization/SetupLibraryBlacklist.cmake" : {
      "ObjectId" : "94253c2b6fa9a1b4304a53ab3b5fffe472e6f0d6",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/common/toolchain/Platform/Initialization/TestSetup.cmake" : {
      "ObjectId" : "91c7aa7b23802605b2ca307201fc4cce1742d6aa",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ensure that all required paths are found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "firmware/null/CMakeLists.txt" : {
      "ObjectId" : "5798a7cd21775ce427ce107f320346a8ccbf387e",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/steering/CMakeLists.txt" : {
      "ObjectId" : "96461834dbaf47c9d549a65e2546c8c0ebc079e4",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/steering/tests/CMakeLists.txt" : {
      "ObjectId" : "1e3a29b39b40348f37686ab3e0080ee5ca8559b5",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/throttle/CMakeLists.txt" : {
      "ObjectId" : "ba04a70527618efeb363634379b02e5d556b8034",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "firmware/throttle/tests/CMakeLists.txt" : {
      "ObjectId" : "0a02f886aee7f97f045b784404ede4771f628373",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/diagnostics_tool/CMakeLists.txt" : {
      "ObjectId" : "1ba1f4e6dc0665a0908c4611b8ec54a1fef101ef",
      "LastModified" : "2018-06-01T16:43:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 73
  },
  "ElapsedTime" : 1433
}