{
  "Repository" : "18248586",
  "Revision" : "HEAD",
  "ObjectId" : "3e8c9c5d2904f26bc4971cd6e4ca764e479683f2",
  "CommitTime" : "2019-04-16T04:58:15Z",
  "Files" : {
    "Examples/Corporate/CMakeLists.txt" : {
      "ObjectId" : "f7b88a0d70fa911f3554e610710a382cb55cba21",
      "LastModified" : "2015-12-21T15:47:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The \"Corporate Directory\" App.\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(SOURCE_alloy_models\n\n#      \"src/Assets/alloy/models/Users.js\"\n\n#  )\n\n#source_group(\"alloy/models\" FILES\n\n#      \"src/Assets/alloy/models/Users.js\"\n\n#  )\n\n#set_property(SOURCE ${SOURCE_alloy_models} PROPERTY VS_DEPLOYMENT_LOCATION \"alloy\\\\models\")\n\n#set_property(SOURCE ${SOURCE_alloy_models} PROPERTY VS_DEPLOYMENT_CONTENT 1)\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add all the files to the app\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Examples/Geocoder/CMakeLists.txt" : {
      "ObjectId" : "e37d484f0827588a308756b8b839474d42827160",
      "LastModified" : "2015-12-21T15:47:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Geocoder\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/Movies/CMakeLists.txt" : {
      "ObjectId" : "620cac0d0e4eb72eaf69d97067fb40b22463e45a",
      "LastModified" : "2015-12-21T15:47:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The Movies App.\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add all the files to the app\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Examples/NG/CMakeLists.txt" : {
      "ObjectId" : "efa2c0da4a7e5dca999e4572f647e435710bd377",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The \"NG\" App.\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Examples/NG/Native/CMakeLists.txt" : {
      "ObjectId" : "319587b3f564cc7a10d2bb53f54c296cc305ef68",
      "LastModified" : "2015-12-21T15:47:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Native for Windows\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\r\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\r\n\n#\r\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\r\n\n# specification ...\"\r\n\n#\r\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\r\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\r\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\r\n\n#\r\n\n# \"Most programs can be linked incrementally. However, some changes\r\n\n# are too great, and some options are incompatible with incremental\r\n\n# linking. LINK performs a full link if any of the following options\r\n\n# are specified:\r\n\n# ...\r\n\n# /OPT:REF is selected\r\n\n# /OPT:ICF is selected\r\n\n# ...\"\r\n\n#\r\n\n# And according to \"/OPT (Optimizations)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\r\n\n#\r\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\r\n\n# functions are preserved in the image.\"\r\n\n#\r\n\n# As well as:\r\n\n#\r\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\r\n\n#\r\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\r\n\n# configuration.\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Examples/NG/Native/cmake/TitaniumWindows_Native_Config.cmake" : {
      "ObjectId" : "3e45a677d55d4e0953e3fd3029e7351ffe3b7fc8",
      "LastModified" : "2015-12-21T15:47:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Examples/NMocha/CMakeLists.txt" : {
      "ObjectId" : "503fc4af68f52fa1d9bba84adc1a209a59df9d5e",
      "LastModified" : "2018-10-14T04:06:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Examples/RSSReader/CMakeLists.txt" : {
      "ObjectId" : "78a2872f3496937a5ba4827624047c90b60769ba",
      "LastModified" : "2015-12-21T15:47:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The RSSReader App.\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add all the files to the app\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Examples/ToDoAlloy/CMakeLists.txt" : {
      "ObjectId" : "dcfe3d93869ed343c18283f7dd21e7bc36161ed7",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The ToDO List Alloy App.\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add all the files to the app\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Examples/ToDoList/CMakeLists.txt" : {
      "ObjectId" : "ebffa0ce93a47c178672277dc8a66614f27a0abc",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The ToDo App.\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add all the files to the app\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Examples/kitchensink-v2/CMakeLists.txt" : {
      "ObjectId" : "bf5090ef9c38458d36ae05ce03067bbf6ac413eb",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The KitchenSink Alloy App.\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No user-servicable parts below this line.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Variable naming the built executable.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Variables required to generate the app manifest.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Generate the app manifest.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add all the files to the app\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Source/Filesystem/CMakeLists.txt" : {
      "ObjectId" : "ff9b0fd8e1edde3c8081b921eb332281789645a7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Support find_package(TitaniumWindows_Filesystem 0.1 REQUIRED)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Filesystem) works.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Source/Filesystem/cmake/TitaniumWindows_Filesystem_Config.cmake" : {
      "ObjectId" : "e99c68142a285b3b99217da044a77e257618294b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Filesystem/test/CMakeLists.txt" : {
      "ObjectId" : "937996ccd19f61cd77aaad67e4d9fd14a7aed55c",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/Global/CMakeLists.txt" : {
      "ObjectId" : "ada08c74320e783b40f7074e3ed7b25456d7dcea",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Global for Windows\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Support find_package(TitaniumWindows_Global 0.1 REQUIRED)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Global) works.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Source/Global/cmake/TitaniumWindows_Global_Config.cmake" : {
      "ObjectId" : "bc17ef9c528f8c6e7d96e34a2bedd515fc39bcb0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.UI for Windows\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Global/test/CMakeLists.txt" : {
      "ObjectId" : "bb1f7913ecb12861265fed0cbb145155cf1af18b",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Global for Window\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/LayoutEngine/CMakeLists.txt" : {
      "ObjectId" : "5cca2dea4d461d1f93da73e337b32bbaffdd9f74",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\r\n\n# Author: Russell W. McMahon\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define helper functions and macros.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defined in internal_utils.cmake.\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#config_cmake_system_framework_path(macosx)\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We have a custom finder for LayoutEngine.\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Silence this warning when lnking with the JavaScriptCore static\r\n\n# library:\r\n\n#\r\n\n# \"warning LNK4099: PDB 'vc120.pdb' was not found with\r\n\n# 'JavaScriptCore-Debug.lib(...)' ...\".\r\n\n# set_property(TARGET LayoutEngine APPEND PROPERTY LINK_FLAGS \"/IGNORE:4099\")\r\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Silence this warning when lnking with the JavaScriptCore static\r\n\n# library for the i386 emulator:\r\n\n#\r\n\n# \"JavaScriptCore-Debug.lib(JSStringRef.obj) : warning LNK4075:\r\n\n# ignoring '/EDITANDCONTINUE' due to '/SAFESEH' specification\".\r\n\n#\r\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\r\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\r\n\n# according to \"/SAFESEH (Image has Safe Exception Handlers)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/9a89h429.aspx):\r\n\n#\r\n\n# \"/SAFESEH is only valid when linking for x86 targets.\"\r\n\n#\r\n\n# Therefore we test for the processor architecture we are targeting\r\n\n# and if its i386 (i.e. the emulator) then we pass /SAFESEH:NO to\r\n\n# the linker.\r\n\n# \r\n\n# If target platform is Windows Phone/Store,\r\n\n# we should not disable SAFESEH otherwise Windows App Certification will fail.\r\n\n# \r\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\r\n\n#\r\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\r\n\n# specification ...\"\r\n\n#\r\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\r\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\r\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\r\n\n#\r\n\n# \"Most programs can be linked incrementally. However, some changes\r\n\n# are too great, and some options are incompatible with incremental\r\n\n# linking. LINK performs a full link if any of the following options\r\n\n# are specified:\r\n\n# ...\r\n\n# /OPT:REF is selected\r\n\n# /OPT:ICF is selected\r\n\n# ...\"\r\n\n#\r\n\n# And according to \"/OPT (Optimizations)\" (see\r\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\r\n\n#\r\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\r\n\n# functions are preserved in the image.\"\r\n\n#\r\n\n# As well as:\r\n\n#\r\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\r\n\n#\r\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\r\n\n# configuration.\r\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Support find_package(LayoutEngine 0.5 REQUIRED)\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Store the current build directory in the CMake user package registry\r\n\n# so that find_package(LayoutEngine) works.\r\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#[[\r\n# TODO: Install files to external locations.\r\n\r\nset(ConfigPackageLocation lib/cmake/LayoutEngine)\r\ninstall(EXPORT LayoutEngineTargets\r\n  DESTINATION ${ConfigPackageLocation}\r\n  )\r\n\r\ninstall(\r\n  FILES\r\n  \"${CMAKE_CURRENT_BINARY_DIR}/LayoutEngineConfig.cmake\"\r\n  \"${CMAKE_CURRENT_BINARY_DIR}/LayoutEngineConfigVersion.cmake\"\r\n  DESTINATION ${ConfigPackageLocation}\r\n  COMPONENT Devel\r\n  )\r\n]]",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "Source/LayoutEngine/cmake/FindJavaScriptCore.cmake" : {
      "ObjectId" : "b5ded12a4fc660b536224b2823b2e27992f99fb5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Matt Langston\r\n\n# Created: 2014.09.03 \r\n\n#\r\n\n# Try to find JavaScriptCore. Once done this will define:\r\n\n#  \r\n\n#  JavaScriptCore_FOUND       - system has JavaScriptCore\r\n\n#  JavaScriptCore_INCLUDE_DIRS - the include directory\r\n\n#  JavaScriptCore_LIBRARY_DIR - the directory containing the library\r\n\n#  JavaScriptCore_LIBRARIES   - link these to use JavaScriptCore\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If we found the JavaScriptCore library and we're using a Visual\r\n\n# Studio generator and we're targeting either WindowsStore or\r\n\n# WindowsPhone, then allow Visual Studio to use both the\r\n\n# JavaScriptCore-Debug.lib and JavaScriptCore-Release.lib if they\r\n\n# exist.\r\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# message(STATUS \"MDL: CMAKE_CONFIGURATION_TYPES   = ${CMAKE_CONFIGURATION_TYPES}\")\r\n\n# message(STATUS \"MDL: JAVASCRIPTCORE_FOUND        = ${JAVASCRIPTCORE_FOUND}\")\r\n\n# message(STATUS \"MDL: JavaScriptCore_INCLUDE_DIRS = ${JavaScriptCore_INCLUDE_DIRS}\")\r\n\n# message(STATUS \"MDL: JavaScriptCore_LIBRARY_DIR  = ${JavaScriptCore_LIBRARY_DIR}\")\r\n\n# message(STATUS \"MDL: JavaScriptCore_LIBRARIES    = ${JavaScriptCore_LIBRARIES}\")\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Source/LayoutEngine/cmake/IsWin32.cmake" : {
      "ObjectId" : "20704a13b1365fcca8a91ca6a73db355927aa28e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/LayoutEngine/cmake/LayoutEngineConfig.cmake" : {
      "ObjectId" : "4d34a874fcb2e59e5ffb045e935e33254989f620",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/LayoutEngine/cmake/TargetArch.cmake" : {
      "ObjectId" : "78b282c439ff544bc074cec0f201947c86d7d537",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This code retrieved from\r\n\n# https://github.com/petroules/solar-cmake/blob/master/TargetArch.cmake\r\n\n# and documented in the stackoverflow post\r\n\n# http://stackoverflow.com/questions/11944060/how-to-detect-target-architecture-using-cmake\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\r\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\r\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\r\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\r\n\n# will be treated as invalid architectures since they are no longer supported by Apple\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\r\n\n# First let's normalize the order of the values\r\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\r\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\r\n\n# disable it by default\r\n\n# See this page for more information:\r\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\r\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\r\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\r\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Now add all the architectures in our normalized order\r\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Detect the architecture in a rather creative way...\r\n\n# This compiles a small C program which is a series of ifdefs that selects a\r\n\n# particular #error preprocessor directive whose message string contains the\r\n\n# target architecture. The program will always fail to compile (both because\r\n\n# file is not a valid C program, and obviously because of the presence of the\r\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\r\n\n# way, we can detect the correct target architecture even when cross-compiling,\r\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\r\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Parse the architecture name from the compiler output.\r\n\n# If we are compiling with an unknown architecture then the regex should\r\n\n# have captured \"unknown\", but in case the regex doesn't match (i.e. due\r\n\n# to a typo in the code), then set 'unknown' as the default.\r\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 10
    },
    "Source/LayoutEngine/cmake/internal_utils.cmake" : {
      "ObjectId" : "0d075dd7ff4c148592a844d083798a7bc98a4340",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\r\n\n# Author: Matt Langston <mlangston@appcelerator.com>\r\n\n# Created: 2013.03.12\r\n\n# \r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# \r\n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\r\n\n# may not use this software or any of it's contents except in\r\n\n# compliance with the License. The full text of the license is in the\r\n\n# file LICENSE.txt in the top-level directory of this project, or you\r\n\n# may obtain a copy of the License at\r\n\n# \r\n\n# http://www.apache.org/licenses/LICENSE-2.0\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines functions and macros useful for building.\r\n\n#\r\n\n# Note:\r\n\n#\r\n\n# - The functions/macros defined in this file may depend on option()\r\n\n#   definitions, and thus must be called *after* the options have been\r\n\n#   defined.\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines the compiler/linker flags used to build.  You can tweak\r\n\n# these definitions to suit your needs.  A variable's value is empty\r\n\n# before it's explicitly assigned to.\r\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\r\n\n# with one of them.\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared\r\n\n# library.  ARGN refers to additional arguments after 'cxx_flags'.\r\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\r\n\n#\r\n\n# Helper functions for creating build targets.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\r\n\n#\r\n\n# Creates a named C++ executable that depends on the given libraries\r\n\n# and is built from the given source files with the given compiler\r\n\n# flags.\r\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#   # To support mixing linking in static and dynamic libraries, link each\r\n\n#   # library in with an extra call to target_link_libraries.\r\n\n#   foreach (lib \"${libs}\")\r\n\n#     target_link_libraries(${name} ${lib})\r\n\n#   endforeach()\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\r\n\n#\r\n\n# Creates a named target that depends on the given libs and is built\r\n\n# from the given source files.  dir/name.cpp is implicitly included in\r\n\n# the source file list.\r\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\r\n\n#\r\n\n# Creates a named C++ test that depends on the given libs and is built\r\n\n# from the given source files with the given compiler flags.\r\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cxx_test(name libs srcs...)\r\n\n#\r\n\n# Creates a named test target that depends on the given libs and is\r\n\n# built from the given source files.  Unlike cxx_test_with_flags,\r\n\n# name.cpp is already implicitly included in the source file list.\r\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# py_test(name)\r\n\n#\r\n\n# Creates a Python test with the given name whose main module is in\r\n\n# test/name.py.  It does nothing if Python is not installed.\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\r\n\n# all Linux environments to be google3 and try to use google3\r\n\n# features.\r\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\r\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is\r\n\n# known only at ctest runtime (by calling ctest -c\r\n\n# <Configuration>), so we have to escape $ to delay variable\r\n\n# substitution here.\r\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Print all defined properties of the given target (i.e. those without\r\n\n# a value of -NOTFOUND).\r\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#message(STATUS \"*** ${CMAKE_PROPERTY_LIST} ***\")\r\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We don't want properties like these:\r\n\n#\r\n\n# make version 2.8.9\r\n\n# COMPILE_DEFINITIONS_<CONFIG>\r\n\n# <CONFIG>_OUTPUT_NAME\r\n\n# VS_GLOBAL_<variable>\r\n\n# XCODE_ATTRIBUTE_<an-attribute>\r\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# This is how to do it using grep:\r\n\n# cmake --help-property-list | grep -v -E \"(<.+>| )\"\r\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#message(STATUS \"*** ${PROPERTY} ***\")\r\n",
        "Line" : 176,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 20
    },
    "Source/LayoutEngine/cmake/internal_utils_xcode.cmake" : {
      "ObjectId" : "88d13aa30b68658129796ac44eb7f8ce623df181",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\r\n\n# Author: Matt Langston <mlangston@appcelerator.com>\r\n\n# Created: 2013.03.12\r\n\n# \r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# \r\n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\r\n\n# may not use this software or any of it's contents except in\r\n\n# compliance with the License. The full text of the license is in the\r\n\n# file LICENSE.txt in the top-level directory of this project, or you\r\n\n# may obtain a copy of the License at\r\n\n# \r\n\n# http://www.apache.org/licenses/LICENSE-2.0\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets VAR to the Xcode root directory of the given SDK (e.g. macosx)\r\n\n# for the user's currently selected Xcode installation. The command\r\n\n# \"xcodebuild -showsdks\" will list all available SDK's.\r\n\n#\r\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\r\n\n# for sdk will use the latest installed version of that SDK, e.g. if\r\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\r\n\n# \"macosx\" will select \"macosx10.8\".\r\n\n#\r\n\n# $ xcodebuild -showsdks\r\n\n# OS X SDKs:\r\n\n# Mac OS X 10.7                 -sdk macosx10.7\r\n\n# OS X 10.8                     -sdk macosx10.8\r\n\n# \r\n\n# iOS SDKs:\r\n\n# iOS 6.1                       -sdk iphoneos6.1\r\n\n# \r\n\n# iOS Simulator SDKs:\r\n\n# Simulator - iOS 6.1           -sdk iphonesimulator6.1\r\n\n#\r\n\n# $ xcodebuild -sdk macosx -version Path\r\n\n# /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set VAR to the Xcode Developer directory of the user's currently\r\n\n# selected Xcode installation.\r\n\n# \r\n\n# $ xcode-select -print-path\r\n\n# /Applications/Xcode.app/Contents/Developer\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set VAR to the list of framework directories of the user's currently\r\n\n# selected Xcode installation for the given SDK (e.g. macosx).  The\r\n\n# command \"xcodebuild -showsdks\" will list all available SDK's.\r\n\n#\r\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\r\n\n# for sdk will use the latest installed version of that SDK, e.g. if\r\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\r\n\n# \"macosx\" will select \"macosx10.8\".\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Prepend the user-selected Xcode SDK framework directories (via\r\n\n# xcode-select) for the given sdk (e.g. macosx) to\r\n\n# CMAKE_SYSTEM_FRAMEWORK_PATH so that they are searched first.  The\r\n\n# command \"xcodebuild -showsdks\" will list all available SDK's.\r\n\n#\r\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\r\n\n# for sdk will use the latest installed version of that SDK, e.g. if\r\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\r\n\n# \"macosx\" will select \"macosx10.8\".\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure our caller can see the changes.\r\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ocunit_test(name libs srcs...)\r\n\n#\r\n\n# Creates a named OCUnit test target that depends on the given libs\r\n\n# and is built from the given source files.\r\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -- SenTestingKit=/Applications/Xcode.app/Contents/Developer/Library/Frameworks/SenTestingKit.framework\r\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# The link fails because target_link_libraries isn't adding the -F\r\n\n# linker flag for the SenTestingKit Framework. According to the\r\n\n# CMake docs it should (see\r\n\n# http://www.cmake.org/cmake/help/v2.8.10/cmake.html#command:find_library):\r\n\n#\r\n\n#   If the library found is a framework, then VAR will be set to the\r\n\n#   full path to the framework <fullPath>/A.framework. When a full\r\n\n#   path to a framework is used as a library, CMake will use a\r\n\n#   -framework A, and a -F<fullPath> to link the framework to the\r\n\n#   target.\r\n\n# \r\n\n# My workaround is to add it manually.\r\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# I shouldn't have to do this.\r\n",
        "Line" : 135,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : "# We attach the BUNDLE_PATH custom property to the target because\r\n\n# it is needed by otest. Interestingly there is no built-in CMake\r\n\n# target property that gives this path.\r\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Get the directory containing SenTestingKit.framework, which must\r\n\n# be added to the DYLD_FRAMEWORK_PATH environment variable in order\r\n\n# for otest to run.\r\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(STATUS \"MDL: DYLD_FRAMEWORK_PATH=${DYLD_FRAMEWORK_PATH}\")\r\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#DYLD_FRAMEWORK_PATH=$(xcode-select -print-path)/Library/Frameworks OBJC_DISABLE_GC=YES xcrun -log otest ./build.debug/test/FooTests.octest/\r\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#message(STATUS \"MDL: DYLD_FRAMEWORK_PATH=${DYLD_FRAMEWORK_PATH} OBJC_DISABLE_GC=YES ${OTEST_COMMAND}\")\r\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "Source/LayoutEngine/examples/CMakeLists.txt" : {
      "ObjectId" : "20b718e0820d8ad10f1dff217e11a3998a457914",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\n\n# Author: Russell W. McMahon\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/LayoutEngine/test/CMakeLists.txt" : {
      "ObjectId" : "25734d092ed53e2aa5118e4c544019d3916ba7a0",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LayoutEngine\n\n# Author: Russell W. McMahon\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Map/CMakeLists.txt" : {
      "ObjectId" : "a68d56e4731e606b8eea4bd9a494fd19f42b88f4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.Map for Windows\n\n#\n\n# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Support find_package(TitaniumWindows_Map 0.1 REQUIRED)\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Map) works.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Source/Map/cmake/TitaniumWindows_Map_Config.cmake" : {
      "ObjectId" : "c44195f9e8dcf448598016346e0671b66a3ab2a5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.Map for Windows\n\n#\n\n# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Map/test/CMakeLists.txt" : {
      "ObjectId" : "ad3bcf8f4d607cb73093220085ec75dde4905c2a",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Map for Windows\n\n#\n\n# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(MapTests . TitaniumWindows_Map)",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/Media/CMakeLists.txt" : {
      "ObjectId" : "92ee590092fcd7778eda6ecfc21244a0292ae2c3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Support find_package(TitaniumWindows_Media 0.1 REQUIRED)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Media) works.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Source/Media/cmake/TitaniumWindows_Media_Config.cmake" : {
      "ObjectId" : "fa77ac203d114e54098cd18a6bb72c4fddf716c9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Media/test/CMakeLists.txt" : {
      "ObjectId" : "937996ccd19f61cd77aaad67e4d9fd14a7aed55c",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/Network/CMakeLists.txt" : {
      "ObjectId" : "ffbe4141bdbca0a1bc6497900c01aa9ac597a5bf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Fix error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe (needed by boost::signals used in HTTPClient and Network)\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support find_package(TitaniumWindows_Network 0.1 REQUIRED)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Network) works.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Source/Network/cmake/TitaniumWindows_Network_Config.cmake" : {
      "ObjectId" : "e5782c1ac7fa850e9c82f5088c47cf71326bfa61",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Network/test/CMakeLists.txt" : {
      "ObjectId" : "937996ccd19f61cd77aaad67e4d9fd14a7aed55c",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/Sensors/CMakeLists.txt" : {
      "ObjectId" : "57913a0e8b1e663d5d197747a8b8f66b84f8890f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Fix error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe (needed by boost::split)\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support find_package(TitaniumWindows_Sensors 0.1 REQUIRED)\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Sensors) works.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Source/Sensors/cmake/TitaniumWindows_Sensors_Config.cmake" : {
      "ObjectId" : "6a088925fe78ed9217f975362197531aa6460575",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Sensors/test/CMakeLists.txt" : {
      "ObjectId" : "937996ccd19f61cd77aaad67e4d9fd14a7aed55c",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/Ti/CMakeLists.txt" : {
      "ObjectId" : "3655800809aadcd2354fd48472b0c978a8355f0d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convert group.js into a c string in an hpp that we can include\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support find_package(TitaniumWindows_Ti 0.1 REQUIRED)\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Ti) works.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Source/Ti/cmake/TitaniumWindows_Ti_Config.cmake" : {
      "ObjectId" : "11f864cbb77c62cd7e32e87bd3458a3e74fcfb04",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Ti/test/CMakeLists.txt" : {
      "ObjectId" : "937996ccd19f61cd77aaad67e4d9fd14a7aed55c",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/Titanium/CMakeLists.txt" : {
      "ObjectId" : "6deabcc291ddac6a49a362cd24ecfb3a18114dd8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium for Windows\n\n#\n\n# Copyright (c) 2014-2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when linking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Fix error C1128: number of sections exceeded object file format limit\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fix error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe (needed by boost::split)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Support find_package(TitaniumWindows 0.1 REQUIRED)\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows) works.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "Source/Titanium/cmake/TitaniumWindows_Config.cmake" : {
      "ObjectId" : "8f29775ec7c9850b5b679a6756fdd3719fc12456",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium for Windows\r\n\n#\r\n\n# Copyright (c) 2014-2015 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Titanium/test/CMakeLists.txt" : {
      "ObjectId" : "609fa6eee019a88564ba6e16764ae55aca45f631",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium for Windows\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/TitaniumKit/CMakeLists.txt" : {
      "ObjectId" : "655b839f2040c4177dee631986056a6987cd2b41",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TitaniumKit\n\n#\n\n# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#config_cmake_system_framework_path(macosx)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# find_package(HAL REQUIRED)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Convert analytics.js into a c string in an hpp that we can include\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Travis only supports Boost 1.55, which is good enough for now.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n\n#set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Turn on precompiled headers\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#target_compile_definitions(TitaniumKit PUBLIC TitaniumKit_STATIC_DEFINE)\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# target_compile_definitions(TitaniumKit PUBLIC\n\n#   $<TARGET_PROPERTY:HAL,INTERFACE_COMPILE_DEFINITIONS>\n\n#   )\n",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Fix error C1128: number of sections exceeded object file format limit\n",
        "Line" : 560,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Fix error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe (needed by boost::split)\n",
        "Line" : 563,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Verbose compilation for MSVC\n",
        "Line" : 566,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# enable well-known compiler warnings\n",
        "Line" : 571,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# exclude Windows-specific unknown-pragmas\n",
        "Line" : 574,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# exclude unused variables because most TitaniumKit methods are meant to be virtual and overridden\n",
        "Line" : 577,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Xcode 7.0 (Apple LLVM version 7.0.0 (clang-700.0.72)) introduces new check warning\n\n# exclude unused-local-typedef warning, add no-unknown-warning guard for old compiler\n",
        "Line" : 581,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# ignore reorder warning\n",
        "Line" : 586,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# When building sqlite3 for Windows Phone, set special flags!\n\n# TODO Do the same for WindowsStore! This info is hard to find and lives in http://www.sqlite.org/cgi/src/artifact/fc6b0b233b5621f3\n",
        "Line" : 596,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# For Store, we need /DWINAPI_FAMILY=WINAPI_FAMILY_APP but I think that's already done for us!\n",
        "Line" : 599,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Support find_package(TitaniumKit 0.1 REQUIRED)\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumKit) works.\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "Source/TitaniumKit/cmake/IsWin32.cmake" : {
      "ObjectId" : "8b8c347b35519a0023d0b7b2ccca788c2618eae6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TitaniumKit\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/TitaniumKit/cmake/TargetArch.cmake" : {
      "ObjectId" : "78b282c439ff544bc074cec0f201947c86d7d537",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This code retrieved from\r\n\n# https://github.com/petroules/solar-cmake/blob/master/TargetArch.cmake\r\n\n# and documented in the stackoverflow post\r\n\n# http://stackoverflow.com/questions/11944060/how-to-detect-target-architecture-using-cmake\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\r\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\r\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\r\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\r\n\n# will be treated as invalid architectures since they are no longer supported by Apple\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\r\n\n# First let's normalize the order of the values\r\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\r\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\r\n\n# disable it by default\r\n\n# See this page for more information:\r\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\r\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\r\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\r\n",
        "Line" : 69,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Now add all the architectures in our normalized order\r\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Detect the architecture in a rather creative way...\r\n\n# This compiles a small C program which is a series of ifdefs that selects a\r\n\n# particular #error preprocessor directive whose message string contains the\r\n\n# target architecture. The program will always fail to compile (both because\r\n\n# file is not a valid C program, and obviously because of the presence of the\r\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\r\n\n# way, we can detect the correct target architecture even when cross-compiling,\r\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\r\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Parse the architecture name from the compiler output.\r\n\n# If we are compiling with an unknown architecture then the regex should\r\n\n# have captured \"unknown\", but in case the regex doesn't match (i.e. due\r\n\n# to a typo in the code), then set 'unknown' as the default.\r\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 10
    },
    "Source/TitaniumKit/cmake/TitaniumKitConfig.cmake" : {
      "ObjectId" : "9b3e719a6edeae59b3d18dbdf381631af2af4c2d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TitaniumKit\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/TitaniumKit/cmake/internal_utils.cmake" : {
      "ObjectId" : "d8230f45563bb168fcc049262e0a8637466c8678",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TitaniumKit\n\n# Author: Matt Langston <mlangston@appcelerator.com>\n\n# Created: 2013.03.12\n\n# \n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# \n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n\n# may not use this software or any of it's contents except in\n\n# compliance with the License. The full text of the license is in the\n\n# file LICENSE.txt in the top-level directory of this project, or you\n\n# may obtain a copy of the License at\n\n# \n\n# http://www.apache.org/licenses/LICENSE-2.0\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines functions and macros useful for building.\n\n#\n\n# Note:\n\n#\n\n# - The functions/macros defined in this file may depend on option()\n\n#   definitions, and thus must be called *after* the options have been\n\n#   defined.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines the compiler/linker flags used to build.  You can tweak\n\n# these definitions to suit your needs.  A variable's value is empty\n\n# before it's explicitly assigned to.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared\n\n# library.  ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# Creates a named C++ executable that depends on the given libraries\n\n# and is built from the given source files with the given compiler\n\n# flags.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#   # To support mixing linking in static and dynamic libraries, link each\n\n#   # library in with an extra call to target_link_libraries.\n\n#   foreach (lib \"${libs}\")\n\n#     target_link_libraries(${name} ${lib})\n\n#   endforeach()\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# Creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cpp is implicitly included in\n\n# the source file list.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# Creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# Creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# name.cpp is already implicitly included in the source file list.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# py_test(name)\n\n#\n\n# Creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3\n\n# features.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is\n\n# known only at ctest runtime (by calling ctest -c\n\n# <Configuration>), so we have to escape $ to delay variable\n\n# substitution here.\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Print all defined properties of the given target (i.e. those without\n\n# a value of -NOTFOUND).\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#message(STATUS \"*** ${CMAKE_PROPERTY_LIST} ***\")\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We don't want properties like these:\n\n#\n\n# make version 2.8.9\n\n# COMPILE_DEFINITIONS_<CONFIG>\n\n# <CONFIG>_OUTPUT_NAME\n\n# VS_GLOBAL_<variable>\n\n# XCODE_ATTRIBUTE_<an-attribute>\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# This is how to do it using grep:\n\n# cmake --help-property-list | grep -v -E \"(<.+>| )\"\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#message(STATUS \"*** ${PROPERTY} ***\")\n",
        "Line" : 176,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 20
    },
    "Source/TitaniumKit/cmake/internal_utils_xcode.cmake" : {
      "ObjectId" : "d158572cf848d84ae71ecc0bfb7362d9d3f51e3c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TitaniumKit\n\n# Author: Matt Langston <mlangston@appcelerator.com>\n\n# Created: 2013.03.12\n\n# \n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# \n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n\n# may not use this software or any of it's contents except in\n\n# compliance with the License. The full text of the license is in the\n\n# file LICENSE.txt in the top-level directory of this project, or you\n\n# may obtain a copy of the License at\n\n# \n\n# http://www.apache.org/licenses/LICENSE-2.0\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets VAR to the Xcode root directory of the given SDK (e.g. macosx)\n\n# for the user's currently selected Xcode installation. The command\n\n# \"xcodebuild -showsdks\" will list all available SDK's.\n\n#\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\n\n# for sdk will use the latest installed version of that SDK, e.g. if\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\n\n# \"macosx\" will select \"macosx10.8\".\n\n#\n\n# $ xcodebuild -showsdks\n\n# OS X SDKs:\n\n# Mac OS X 10.7                 -sdk macosx10.7\n\n# OS X 10.8                     -sdk macosx10.8\n\n# \n\n# iOS SDKs:\n\n# iOS 6.1                       -sdk iphoneos6.1\n\n# \n\n# iOS Simulator SDKs:\n\n# Simulator - iOS 6.1           -sdk iphonesimulator6.1\n\n#\n\n# $ xcodebuild -sdk macosx -version Path\n\n# /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set VAR to the Xcode Developer directory of the user's currently\n\n# selected Xcode installation.\n\n# \n\n# $ xcode-select -print-path\n\n# /Applications/Xcode.app/Contents/Developer\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set VAR to the list of framework directories of the user's currently\n\n# selected Xcode installation for the given SDK (e.g. macosx).  The\n\n# command \"xcodebuild -showsdks\" will list all available SDK's.\n\n#\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\n\n# for sdk will use the latest installed version of that SDK, e.g. if\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\n\n# \"macosx\" will select \"macosx10.8\".\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Prepend the user-selected Xcode SDK framework directories (via\n\n# xcode-select) for the given sdk (e.g. macosx) to\n\n# CMAKE_SYSTEM_FRAMEWORK_PATH so that they are searched first.  The\n\n# command \"xcodebuild -showsdks\" will list all available SDK's.\n\n#\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\n\n# for sdk will use the latest installed version of that SDK, e.g. if\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\n\n# \"macosx\" will select \"macosx10.8\".\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure our caller can see the changes.\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ocunit_test(name libs srcs...)\n\n#\n\n# Creates a named OCUnit test target that depends on the given libs\n\n# and is built from the given source files.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -- SenTestingKit=/Applications/Xcode.app/Contents/Developer/Library/Frameworks/SenTestingKit.framework\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# The link fails because target_link_libraries isn't adding the -F\n\n# linker flag for the SenTestingKit Framework. According to the\n\n# CMake docs it should (see\n\n# http://www.cmake.org/cmake/help/v2.8.10/cmake.html#command:find_library):\n\n#\n\n#   If the library found is a framework, then VAR will be set to the\n\n#   full path to the framework <fullPath>/A.framework. When a full\n\n#   path to a framework is used as a library, CMake will use a\n\n#   -framework A, and a -F<fullPath> to link the framework to the\n\n#   target.\n\n# \n\n# My workaround is to add it manually.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# I shouldn't have to do this.\n",
        "Line" : 135,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : "# We attach the BUNDLE_PATH custom property to the target because\n\n# it is needed by otest. Interestingly there is no built-in CMake\n\n# target property that gives this path.\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Get the directory containing SenTestingKit.framework, which must\n\n# be added to the DYLD_FRAMEWORK_PATH environment variable in order\n\n# for otest to run.\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(STATUS \"MDL: DYLD_FRAMEWORK_PATH=${DYLD_FRAMEWORK_PATH}\")\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#DYLD_FRAMEWORK_PATH=$(xcode-select -print-path)/Library/Frameworks OBJC_DISABLE_GC=YES xcrun -log otest ./build.debug/test/FooTests.octest/\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#message(STATUS \"MDL: DYLD_FRAMEWORK_PATH=${DYLD_FRAMEWORK_PATH} OBJC_DISABLE_GC=YES ${OTEST_COMMAND}\")\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "Source/TitaniumKit/examples/CMakeLists.txt" : {
      "ObjectId" : "b166e65e417694449d76a7ad55810af16c0f778d",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TitaniumKit\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if(WIN32)\n\n#   get_target_property(HAL_DLL_LOCATION HAL LOCATION)\n\n#   file(COPY ${HAL_DLL_LOCATION} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n\n# endif()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/TitaniumKit/test/CMakeLists.txt" : {
      "ObjectId" : "78163dbb0fe5686ee97136e1b6731a571de42f7b",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TitaniumKit\n\n#\n\n# Copyright (c) 20154-2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if(WIN32)\n\n#   get_target_property(HAL_DLL_LOCATION HAL LOCATION)\n\n#   file(COPY ${HAL_DLL_LOCATION} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})\n\n# endif()\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/UI/CMakeLists.txt" : {
      "ObjectId" : "59ec7877165dda97bfb4e285b67c90a402f3b5a6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.UI for Windows\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Fix error C4996: 'std::_Copy_impl': Function call with parameters that may be unsafe (needed by boost::split)\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support find_package(TitaniumWindows_UI 0.1 REQUIRED)\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_UI) works.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Source/UI/cmake/TitaniumWindows_UI_Config.cmake" : {
      "ObjectId" : "64e84ed81d5a06a2c4e0735c970161cd161a5056",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.UI for Windows\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/UI/test/CMakeLists.txt" : {
      "ObjectId" : "96b29aff38186da293454432ea1a71f780ecd74f",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.UI for Window\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(ViewTests   . TitaniumWindows_UI)\n\n#cxx_test(WindowTests . TitaniumWindows_UI)\n\n#cxx_test(ButtonTests . TitaniumWindows_UI)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/Utility/CMakeLists.txt" : {
      "ObjectId" : "347699ec86db41af2fc9a7859d83f7f6f4546dd7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.Utility for Windows\n\n# Author: Gary Mathews\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Disable inline function expansion, prevents \"C1001 An internal error has occurred in the compiler.\"\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support find_package(TitaniumWindows_Utility 0.1 REQUIRED)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_Utility) works.\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "Source/Utility/cmake/TitaniumWindows_Utility_Config.cmake" : {
      "ObjectId" : "ed898624cef97541f57b32f0fda97df5a3cf5bb2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Titanium.Utility for Windows\n\n# Author: Gary Mathews\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/Utility/test/CMakeLists.txt" : {
      "ObjectId" : "bb1f7913ecb12861265fed0cbb145155cf1af18b",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Global for Window\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Source/cmake/FindJavaScriptCore.cmake" : {
      "ObjectId" : "ec2036922d168c4097cca5fa8f304ac357b67811",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Author: Matt Langston\n\n# Created: 2014.09.03 \n\n#\n\n# Try to find JavaScriptCore. Once done this will define:\n\n#  \n\n#  JavaScriptCore_FOUND       - system has JavaScriptCore\n\n#  JavaScriptCore_INCLUDE_DIRS - the include directory\n\n#  JavaScriptCore_LIBRARY_DIR - the directory containing the library\n\n#  JavaScriptCore_LIBRARIES   - link these to use JavaScriptCore\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If we found the JavaScriptCore library and we're using a Visual\n\n# Studio generator and we're targeting either WindowsStore or\n\n# WindowsPhone, then allow Visual Studio to use both the\n\n# JavaScriptCore-Debug.lib and JavaScriptCore-Release.lib if they\n\n# exist.\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "Source/cmake/FindLog4cxx.cmake" : {
      "ObjectId" : "44e6dc14a841f94d44bbb80390e9b7e77a1e3d12",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find log4cxx\n\n# Once done this will define\n\n#  \n\n#  LOG4CXX_FOUND\t - system has LOG4CXX\n\n#  LOG4CXX_INCLUDE_DIR\t - the include directories\n\n#  LOG4CXX_LIBRARY_DIR\t - the directory containing the libraries\n\n#  LOG4CXX_LIBRARIES\t - link these to use LOG4CXX\n\n#   \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find includes\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clear out duplicates\n\n#LIST( REMOVE_DUPLICATES LOG4CXX_INCLUDE_DIR )\n\n#LIST( REMOVE_DUPLICATES LOG4CXX_LIBRARY_DIR )\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find the full paths of the libraries\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Source/cmake/GenerateCPPHeaderFile.cmake" : {
      "ObjectId" : "5e963d8e7b17b9e474e778105445c7687f81fc0d",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Convert a binary data file into a C++\n\n# source file for embedding into an application binary\n\n#\n\n# Requires 'node' to be installed.\n\n#\n\n# TARGET_NAME : The name of the target to generate\n\n#\n\n# INPUT_FILE  : The name of the binary data file to be converted into a C++\n\n#               source file.  The name of the input file will be used as the basis for the\n\n#               symbols in the generated C++ file referring to the data buffer.\n\n#\n\n# CPP_FILE    : The path of the C++ source file to be generated.\n\n#               See the documentation for file2int.js for information on\n\n#               the structure of the generated source file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Source/cmake/internal_utils.cmake" : {
      "ObjectId" : "03363dbf1af7531f3f8f798e7da19ecf592bb639",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Author: Matt Langston <mlangston@appcelerator.com>\n\n# Created: 2013.03.12\n\n# \n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# \n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n\n# may not use this software or any of it's contents except in\n\n# compliance with the License. The full text of the license is in the\n\n# file LICENSE.txt in the top-level directory of this project, or you\n\n# may obtain a copy of the License at\n\n# \n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines functions and macros useful for building.\n\n#\n\n# Note:\n\n#\n\n# - The functions/macros defined in this file may depend on option()\n\n#   definitions, and thus must be called *after* the options have been\n\n#   defined.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines the compiler/linker flags used to build.  You can tweak\n\n# these definitions to suit your needs.  A variable's value is empty\n\n# before it's explicitly assigned to.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared\n\n# library.  ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# Creates a named C++ executable that depends on the given libraries\n\n# and is built from the given source files with the given compiler\n\n# flags.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#   # To support mixing linking in static and dynamic libraries, link each\n\n#   # library in with an extra call to target_link_libraries.\n\n#   foreach (lib \"${libs}\")\n\n#     target_link_libraries(${name} ${lib})\n\n#   endforeach()\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# Creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cpp is implicitly included in\n\n# the source file list.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# Creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# Creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# name.cpp is already implicitly included in the source file list.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# py_test(name)\n\n#\n\n# Creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3\n\n# features.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is\n\n# known only at ctest runtime (by calling ctest -c\n\n# <Configuration>), so we have to escape $ to delay variable\n\n# substitution here.\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Print all defined properties of the given target (i.e. those without\n\n# a value of -NOTFOUND).\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#message(STATUS \"*** ${CMAKE_PROPERTY_LIST} ***\")\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We don't want properties like these:\n\n#\n\n# make version 2.8.9\n\n# COMPILE_DEFINITIONS_<CONFIG>\n\n# <CONFIG>_OUTPUT_NAME\n\n# VS_GLOBAL_<variable>\n\n# XCODE_ATTRIBUTE_<an-attribute>\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# This is how to do it using grep:\n\n# cmake --help-property-list | grep -v -E \"(<.+>| )\"\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#message(STATUS \"*** ${PROPERTY} ***\")\n",
        "Line" : 176,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 20
    },
    "Source/cmake/internal_utils_xcode.cmake" : {
      "ObjectId" : "a9336ce993299a22f72f979efaffbec1cb138a18",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Author: Matt Langston <mlangston@appcelerator.com>\n\n# Created: 2013.03.12\n\n# \n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# \n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n\n# may not use this software or any of it's contents except in\n\n# compliance with the License. The full text of the license is in the\n\n# file LICENSE.txt in the top-level directory of this project, or you\n\n# may obtain a copy of the License at\n\n# \n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Sets VAR to the Xcode root directory of the given SDK (e.g. macosx)\n\n# for the user's currently selected Xcode installation. The command\n\n# \"xcodebuild -showsdks\" will list all available SDK's.\n\n#\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\n\n# for sdk will use the latest installed version of that SDK, e.g. if\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\n\n# \"macosx\" will select \"macosx10.8\".\n\n#\n\n# $ xcodebuild -showsdks\n\n# OS X SDKs:\n\n# Mac OS X 10.7                 -sdk macosx10.7\n\n# OS X 10.8                     -sdk macosx10.8\n\n# \n\n# iOS SDKs:\n\n# iOS 6.1                       -sdk iphoneos6.1\n\n# \n\n# iOS Simulator SDKs:\n\n# Simulator - iOS 6.1           -sdk iphonesimulator6.1\n\n#\n\n# $ xcodebuild -sdk macosx -version Path\n\n# /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set VAR to the Xcode Developer directory of the user's currently\n\n# selected Xcode installation.\n\n# \n\n# $ xcode-select -print-path\n\n# /Applications/Xcode.app/Contents/Developer\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set VAR to the list of framework directories of the user's currently\n\n# selected Xcode installation for the given SDK (e.g. macosx).  The\n\n# command \"xcodebuild -showsdks\" will list all available SDK's.\n\n#\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\n\n# for sdk will use the latest installed version of that SDK, e.g. if\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\n\n# \"macosx\" will select \"macosx10.8\".\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Prepend the user-selected Xcode SDK framework directories (via\n\n# xcode-select) for the given sdk (e.g. macosx) to\n\n# CMAKE_SYSTEM_FRAMEWORK_PATH so that they are searched first.  The\n\n# command \"xcodebuild -showsdks\" will list all available SDK's.\n\n#\n\n# Passing any of the values \"macosx\", \"iphoneos\" or \"iphonesimulator\"\n\n# for sdk will use the latest installed version of that SDK, e.g. if\n\n# \"macosx10.8\" is the latest installed version of OS X, then passing\n\n# \"macosx\" will select \"macosx10.8\".\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make sure our caller can see the changes.\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ocunit_test(name libs srcs...)\n\n#\n\n# Creates a named OCUnit test target that depends on the given libs\n\n# and is built from the given source files.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# -- SenTestingKit=/Applications/Xcode.app/Contents/Developer/Library/Frameworks/SenTestingKit.framework\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# The link fails because target_link_libraries isn't adding the -F\n\n# linker flag for the SenTestingKit Framework. According to the\n\n# CMake docs it should (see\n\n# http://www.cmake.org/cmake/help/v2.8.10/cmake.html#command:find_library):\n\n#\n\n#   If the library found is a framework, then VAR will be set to the\n\n#   full path to the framework <fullPath>/A.framework. When a full\n\n#   path to a framework is used as a library, CMake will use a\n\n#   -framework A, and a -F<fullPath> to link the framework to the\n\n#   target.\n\n# \n\n# My workaround is to add it manually.\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# I shouldn't have to do this.\n",
        "Line" : 136,
        "CharPositionInLine" : 42
      },
      "10" : {
        "Text" : "# We attach the BUNDLE_PATH custom property to the target because\n\n# it is needed by otest. Interestingly there is no built-in CMake\n\n# target property that gives this path.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Get the directory containing SenTestingKit.framework, which must\n\n# be added to the DYLD_FRAMEWORK_PATH environment variable in order\n\n# for otest to run.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(STATUS \"MDL: DYLD_FRAMEWORK_PATH=${DYLD_FRAMEWORK_PATH}\")\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#DYLD_FRAMEWORK_PATH=$(xcode-select -print-path)/Library/Frameworks OBJC_DISABLE_GC=YES xcrun -log otest ./build.debug/test/FooTests.octest/\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#message(STATUS \"MDL: DYLD_FRAMEWORK_PATH=${DYLD_FRAMEWORK_PATH} OBJC_DISABLE_GC=YES ${OTEST_COMMAND}\")\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "Source/cmake/precompiled_header.cmake" : {
      "ObjectId" : "d794f78d27c1c569c498ca5bba26c54ea325c727",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Instructs the MSVC toolset to use the precompiled header PRECOMPILED_HEADER\r\n\n# for each source file given in the collection named by SOURCE_VARIABLE_NAME.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate precompiled header translation unit\r\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Update properties of source files to use the precompiled header.\r\n\n# Additionally, force the inclusion of the precompiled header at beginning of each source file.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Finally, update the source file collection to contain the precompiled header translation unit\r\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "Tools/Scripts/module_generator/module_template/Module/CMakeLists.txt" : {
      "ObjectId" : "b64eac332ec60ef95101211a9d5e308ff9f18f43",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <%= module %> for Windows\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use solution folders.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define helper functions and macros.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow \"make test\" to work.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Silence this warning when lnking the Debug configuration:\n\n#\n\n# \"LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF'\n\n# specification ...\"\n\n#\n\n# According to \"/IGNORE (Ignore Specific Warnings)\" (see\n\n# http://msdn.microsoft.com/en-us/library/dn782850.aspx) some linker\n\n# warnings cannot be ignored and LNK4075 is one of them. However,\n\n# according to \"/INCREMENTAL (Link Incrementally)\" (see\n\n# http://msdn.microsoft.com/en-us/library/4khtbfyf.aspx):\n\n#\n\n# \"Most programs can be linked incrementally. However, some changes\n\n# are too great, and some options are incompatible with incremental\n\n# linking. LINK performs a full link if any of the following options\n\n# are specified:\n\n# ...\n\n# /OPT:REF is selected\n\n# /OPT:ICF is selected\n\n# ...\"\n\n#\n\n# And according to \"/OPT (Optimizations)\" (see\n\n# http://msdn.microsoft.com/en-us/library/bxwfs976.aspx):\n\n#\n\n# \"If /DEBUG is specified, the default for /OPT is NOREF, and all\n\n# functions are preserved in the image.\"\n\n#\n\n# As well as:\n\n#\n\n# \"... we do not recommend that you use /OPT:ICF in debug builds ...\"\n\n#\n\n# Therefore we disable /OPT:REF and /OPT:ICF for the Debug\n\n# configuration.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Support find_package(TitaniumWindows_<%= name %> 0.1 REQUIRED)\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Store the current build directory in the CMake user package registry\n\n# so that find_package(TitaniumWindows_<%= name %>) works.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Tools/Scripts/module_generator/module_template/Module/cmake/TitaniumWindows_Module_Config.cmake" : {
      "ObjectId" : "e0b8250f7553f8f58a2e89d1d3939681eac69c7c",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <%= module %> for Windows\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Tools/Scripts/module_generator/module_template/Module/test/CMakeLists.txt" : {
      "ObjectId" : "bb1f7913ecb12861265fed0cbb145155cf1af18b",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Global for Window\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cxx_test(GlobalTests . TitaniumWindows_Global)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/AddFileDependencies.cmake" : {
      "ObjectId" : "77e1838c22c5e76d329622366bc7de29fe8f02a9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# AddFileDependencies\r\n\n# -------------------\r\n\n#\r\n\n# ADD_FILE_DEPENDENCIES(source_file depend_files...)\r\n\n#\r\n\n# Adds the given files as dependencies to source_file\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/AndroidTestUtilities.cmake" : {
      "ObjectId" : "ca74810231216d503a9ed7d88859a1c81a66dab4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[======================================================================[.rst:\r\nAndroidTestUtilities\r\n------------------------\r\n\r\nCreate a test that automatically loads specified data onto an Android device.\r\n\r\nIntroduction\r\n^^^^^^^^^^^^\r\n\r\nUse this module to push data needed for testing an Android device behavior\r\nonto a connected Android device. The module will accept files and libraries as\r\nwell as separate destinations for each. It will create a test that loads the\r\nfiles into a device object store and link to them from the specified\r\ndestination. The files are only uploaded if they are not already in the object\r\nstore.\r\n\r\nFor example:\r\n\r\n.. code-block:: cmake\r\n\r\n  include(AndroidTestUtilities)\r\n  android_add_test_data(\r\n    example_setup_test\r\n    FILES <files>...\r\n    LIBS <libs>...\r\n    DEVICE_TEST_DIR \"/data/local/tests/example\"\r\n    DEVICE_OBJECT_STORE \"/sdcard/.ExternalData/SHA\"\r\n    )\r\n\r\n\r\nAt build time a test named \"example_setup_test\" will be created.  Run this test\r\non the command line with :manual:`ctest(1)` to load the data onto the Android\r\ndevice.\r\n\r\nModule Functions\r\n^^^^^^^^^^^^^^^^\r\n\r\n.. command:: android_add_test_data\r\n\r\n  ::\r\n\r\n    android_add_test_data(<test-name>\r\n      [FILES <files>...] [FILES_DEST <device-dir>]\r\n      [LIBS <libs>...]   [LIBS_DEST <device-dir>]\r\n      [DEVICE_OBJECT_STORE <device-dir>]\r\n      [DEVICE_TEST_DIR <device-dir>]\r\n      [NO_LINK_REGEX <strings>...]\r\n      )\r\n\r\n  The ``android_add_test_data`` function is used to copy files and libraries\r\n  needed to run project-specific tests. On the host operating system, this is\r\n  done at build time. For on-device testing, the files are loaded onto the\r\n  device by the manufactured test at run time.\r\n\r\n  This function accepts the following named parameters:\r\n\r\n  ``FILES <files>...``\r\n    zero or more files needed for testing\r\n  ``LIBS <libs>...``\r\n    zero or more libraries needed for testing\r\n  ``FILES_DEST <device-dir>``\r\n    absolute path where the data files are expected to be\r\n  ``LIBS_DEST <device-dir>``\r\n    absolute path where the libraries are expected to be\r\n  ``DEVICE_OBJECT_STORE <device-dir>``\r\n    absolute path to the location where the data is stored on-device\r\n  ``DEVICE_TEST_DIR <device-dir>``\r\n    absolute path to the root directory of the on-device test location\r\n  ``NO_LINK_REGEX <strings>...``\r\n    list of regex strings matching the names of files that should be\r\n    copied from the object store to the testing directory\r\n#]======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The parameters to this function should be set to the list of directories,\r\n\n# files, and libraries that need to be installed prior to testing.\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# As the names suggest, oneValueArgs lists the arguments that specify a\r\n\n# single value, while multiValueArgs can contain one or more values.\r\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# For example, if you called this function with FILES </path/to/file>\r\n\n# then this path would be stored in the variable AST_FILES.\r\n\n# The AST prefix stands for the name of this function (android_add_test_data).\r\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Copy all test data files into the binary directory, where tests are run.\r\n\n# ExternalData will handle fetching DATA{...} references.\r\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Convert ExternalData placeholder file names to DATA{} syntax.\r\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Use ExternalData if any DATA{} files were found.\r\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# For regular files on Linux, just copy them directly.\r\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check if a destination was specified.  If not, we copy by default\r\n\n# into this project's binary directory, preserving its relative path.\r\n",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/AndroidTestUtilities/PushToAndroidDevice.cmake" : {
      "ObjectId" : "6e7947dee42b4e32e7e0718998a28218a1b8d248",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This function handles pushing all of the test files needed to the device.\r\n\n# It places the data files in the object store and makes links to them from\r\n\n# the appropriate directories.\r\n\n#\r\n\n# This function accepts the following named parameters:\r\n\n# DIRS          : one or more directories needed for testing.\r\n\n# FILES         : one or more files needed for testing.\r\n\n# LIBS          : one or more libraries needed for testing.\r\n\n# DIRS_DEST     : specify where the directories should be installed.\r\n\n# FILES_DEST    : specify where the files should be installed.\r\n\n# LIBS_DEST     : specify where the libraries should be installed.\r\n\n# DEV_OBJ_STORE : specify where the actual data files should be placed.\r\n\n# DEV_TEST_DIR  : specify the root file for the module test directory.\r\n\n# The DEV_OBJ_STORE and DEV_TEST_DIR variables are required.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The parameters to this function should be set to the list of directories,\r\n\n# files, and libraries that need to be installed prior to testing.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The functions in the module need the adb executable.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Checks to make sure that a given file exists on the device. If it does,\r\n\n# if(file_exists) will return true.\r\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# when a directory exists but is empty the output is empty\r\n",
        "Line" : 45,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# -1 means the file exists\r\n",
        "Line" : 49,
        "CharPositionInLine" : 42
      },
      "7" : {
        "Text" : "# Checks to see if a filename matches a regex.\r\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# If a file with given name exists in the CMAKE_BINARY_DIR then use that file.\r\n\n# Otherwise use the file with root in CMAKE_CURRENT_SOURCE_DIR.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# This function pushes the data into the device object store and\r\n\n# creates a link to that data file in a specified location.\r\n\n#\r\n\n# This function requires the following un-named parameters:\r\n\n# data_path        : absolute path to data to load into dev obj store.\r\n\n# dev_object_store : absolute path to the device object store directory.\r\n\n# link_origin      : absolute path to the origin of the link to the dev obj store data file.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# TODO: Verify that the object store file is indeed hashed correctly. Could use md5.\r\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#----------------------------------------------------------------------------\r\n\n#--------------------Beginning of actual function----------------------------\r\n\n#----------------------------------------------------------------------------\r\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Setup of object store and test dir.\r\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# This is protected in the SetupProjectTests module.\r\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Looping over the various types of test data possible.\r\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# determine if the data type destination has been explicitly specified.\r\n",
        "Line" : 130,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Loop over the files passed in\r\n",
        "Line" : 142,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# The absolute path can be through the source directory or the build directory.\r\n\n# If the file/dir exists in the build directory that version is chosen.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Need to transfer all data files in the data directories to the device\r\n\n# except those explicitly ignored.\r\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# dest was determined earlier, relative_path is a dir, file is path from relative path to a data\r\n",
        "Line" : 151,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# LIBS\r\n",
        "Line" : 161,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 21
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/BundleUtilities.cmake" : {
      "ObjectId" : "a1ff572f9ef2e39670fed4f71925bfd3ab256b07",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# BundleUtilities\r\n\n# ---------------\r\n\n#\r\n\n# Functions to help assemble a standalone bundle application.\r\n\n#\r\n\n# A collection of CMake utility functions useful for dealing with .app\r\n\n# bundles on the Mac and bundle-like directories on any OS.\r\n\n#\r\n\n# The following functions are provided by this module:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    fixup_bundle\r\n\n#    copy_and_fixup_bundle\r\n\n#    verify_app\r\n\n#    get_bundle_main_executable\r\n\n#    get_dotapp_dir\r\n\n#    get_bundle_and_executable\r\n\n#    get_bundle_all_executables\r\n\n#    get_item_key\r\n\n#    get_item_rpaths\r\n\n#    clear_bundle_keys\r\n\n#    set_bundle_key_values\r\n\n#    get_bundle_keys\r\n\n#    copy_resolved_item_into_bundle\r\n\n#    copy_resolved_framework_into_bundle\r\n\n#    fixup_bundle_item\r\n\n#    verify_bundle_prerequisites\r\n\n#    verify_bundle_symlinks\r\n\n#\r\n\n# Requires CMake 2.6 or greater because it uses function, break and\r\n\n# PARENT_SCOPE.  Also depends on GetPrerequisites.cmake.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FIXUP_BUNDLE(<app> <libs> <dirs>)\r\n\n#\r\n\n# Fix up a bundle in-place and make it standalone, such that it can be\r\n\n# drag-n-drop copied to another machine and run on that machine as long\r\n\n# as all of the system libraries are compatible.\r\n\n#\r\n\n# If you pass plugins to fixup_bundle as the libs parameter, you should\r\n\n# install them or copy them into the bundle before calling fixup_bundle.\r\n\n# The \"libs\" parameter is a list of libraries that must be fixed up, but\r\n\n# that cannot be determined by otool output analysis.  (i.e., plugins)\r\n\n#\r\n\n# Gather all the keys for all the executables and libraries in a bundle,\r\n\n# and then, for each key, copy each prerequisite into the bundle.  Then\r\n\n# fix each one up according to its own list of prerequisites.\r\n\n#\r\n\n# Then clear all the keys and call verify_app on the final bundle to\r\n\n# ensure that it is truly standalone.\r\n\n#\r\n\n# As an optional parameter (IGNORE_ITEM) a list of file names can be passed,\r\n\n# which are then ignored (e.g. IGNORE_ITEM \"vcredist_x86.exe;vcredist_x64.exe\")\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   COPY_AND_FIXUP_BUNDLE(<src> <dst> <libs> <dirs>)\r\n\n#\r\n\n# Makes a copy of the bundle <src> at location <dst> and then fixes up\r\n\n# the new copied bundle in-place at <dst>...\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   VERIFY_APP(<app>)\r\n\n#\r\n\n# Verifies that an application <app> appears valid based on running\r\n\n# analysis tools on it.  Calls \"message(FATAL_ERROR\" if the application\r\n\n# is not verified.\r\n\n#\r\n\n# As an optional parameter (IGNORE_ITEM) a list of file names can be passed,\r\n\n# which are then ignored (e.g. IGNORE_ITEM \"vcredist_x86.exe;vcredist_x64.exe\")\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GET_BUNDLE_MAIN_EXECUTABLE(<bundle> <result_var>)\r\n\n#\r\n\n# The result will be the full path name of the bundle's main executable\r\n\n# file or an \"error:\" prefixed string if it could not be determined.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GET_DOTAPP_DIR(<exe> <dotapp_dir_var>)\r\n\n#\r\n\n# Returns the nearest parent dir whose name ends with \".app\" given the\r\n\n# full path to an executable.  If there is no such parent dir, then\r\n\n# simply return the dir containing the executable.\r\n\n#\r\n\n# The returned directory may or may not exist.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GET_BUNDLE_AND_EXECUTABLE(<app> <bundle_var> <executable_var> <valid_var>)\r\n\n#\r\n\n# Takes either a \".app\" directory name or the name of an executable\r\n\n# nested inside a \".app\" directory and returns the path to the \".app\"\r\n\n# directory in <bundle_var> and the path to its main executable in\r\n\n# <executable_var>\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GET_BUNDLE_ALL_EXECUTABLES(<bundle> <exes_var>)\r\n\n#\r\n\n# Scans the given bundle recursively for all executable files and\r\n\n# accumulates them into a variable.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GET_ITEM_KEY(<item> <key_var>)\r\n\n#\r\n\n# Given a file (item) name, generate a key that should be unique\r\n\n# considering the set of libraries that need copying or fixing up to\r\n\n# make a bundle standalone.  This is essentially the file name including\r\n\n# extension with \".\" replaced by \"_\"\r\n\n#\r\n\n# This key is used as a prefix for CMake variables so that we can\r\n\n# associate a set of variables with a given item based on its key.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CLEAR_BUNDLE_KEYS(<keys_var>)\r\n\n#\r\n\n# Loop over the list of keys, clearing all the variables associated with\r\n\n# each key.  After the loop, clear the list of keys itself.\r\n\n#\r\n\n# Caller of get_bundle_keys should call clear_bundle_keys when done with\r\n\n# list of keys.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SET_BUNDLE_KEY_VALUES(<keys_var> <context> <item> <exepath> <dirs>\r\n\n#                         <copyflag> [<rpaths>])\r\n\n#\r\n\n# Add a key to the list (if necessary) for the given item.  If added,\r\n\n# also set all the variables associated with that key.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GET_BUNDLE_KEYS(<app> <libs> <dirs> <keys_var>)\r\n\n#\r\n\n# Loop over all the executable and library files within the bundle (and\r\n\n# given as extra <libs>) and accumulate a list of keys representing\r\n\n# them.  Set values associated with each key such that we can loop over\r\n\n# all of them and copy prerequisite libs into the bundle and then do\r\n\n# appropriate install_name_tool fixups.\r\n\n#\r\n\n# As an optional parameter (IGNORE_ITEM) a list of file names can be passed,\r\n\n# which are then ignored (e.g. IGNORE_ITEM \"vcredist_x86.exe;vcredist_x64.exe\")\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   COPY_RESOLVED_ITEM_INTO_BUNDLE(<resolved_item> <resolved_embedded_item>)\r\n\n#\r\n\n# Copy a resolved item into the bundle if necessary.  Copy is not\r\n\n# necessary if the resolved_item is \"the same as\" the\r\n\n# resolved_embedded_item.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE(<resolved_item> <resolved_embedded_item>)\r\n\n#\r\n\n# Copy a resolved framework into the bundle if necessary.  Copy is not\r\n\n# necessary if the resolved_item is \"the same as\" the\r\n\n# resolved_embedded_item.\r\n\n#\r\n\n# By default, BU_COPY_FULL_FRAMEWORK_CONTENTS is not set.  If you want\r\n\n# full frameworks embedded in your bundles, set\r\n\n# BU_COPY_FULL_FRAMEWORK_CONTENTS to ON before calling fixup_bundle.  By\r\n\n# default, COPY_RESOLVED_FRAMEWORK_INTO_BUNDLE copies the framework\r\n\n# dylib itself plus the framework Resources directory.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FIXUP_BUNDLE_ITEM(<resolved_embedded_item> <exepath> <dirs>)\r\n\n#\r\n\n# Get the direct/non-system prerequisites of the resolved embedded item.\r\n\n# For each prerequisite, change the way it is referenced to the value of\r\n\n# the _EMBEDDED_ITEM keyed variable for that prerequisite.  (Most likely\r\n\n# changing to an \"@executable_path\" style reference.)\r\n\n#\r\n\n# This function requires that the resolved_embedded_item be \"inside\" the\r\n\n# bundle already.  In other words, if you pass plugins to fixup_bundle\r\n\n# as the libs parameter, you should install them or copy them into the\r\n\n# bundle before calling fixup_bundle.  The \"libs\" parameter is a list of\r\n\n# libraries that must be fixed up, but that cannot be determined by\r\n\n# otool output analysis.  (i.e., plugins)\r\n\n#\r\n\n# Also, change the id of the item being fixed up to its own\r\n\n# _EMBEDDED_ITEM value.\r\n\n#\r\n\n# Accumulate changes in a local variable and make *one* call to\r\n\n# install_name_tool at the end of the function with all the changes at\r\n\n# once.\r\n\n#\r\n\n# If the BU_CHMOD_BUNDLE_ITEMS variable is set then bundle items will be\r\n\n# marked writable before install_name_tool tries to change them.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   VERIFY_BUNDLE_PREREQUISITES(<bundle> <result_var> <info_var>)\r\n\n#\r\n\n# Verifies that the sum of all prerequisites of all files inside the\r\n\n# bundle are contained within the bundle or are \"system\" libraries,\r\n\n# presumed to exist everywhere.\r\n\n#\r\n\n# As an optional parameter (IGNORE_ITEM) a list of file names can be passed,\r\n\n# which are then ignored (e.g. IGNORE_ITEM \"vcredist_x86.exe;vcredist_x64.exe\")\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   VERIFY_BUNDLE_SYMLINKS(<bundle> <result_var> <info_var>)\r\n\n#\r\n\n# Verifies that any symlinks found in the bundle point to other files\r\n\n# that are already also in the bundle...  Anything that points to an\r\n\n# external file causes this function to fail the verification.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The functions defined in this file depend on the get_prerequisites function\r\n\n# (and possibly others) found in:\r\n\n#\r\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Read Info.plist as a list of lines:\r\n\n#\r\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Scan the lines for \"<key>CFBundleExecutable</key>\" - the line after that\r\n\n# is the name of the main executable.\r\n\n#\r\n",
        "Line" : 245,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Ultimate goal:\r\n\n# If not in \"Contents/MacOS\" then scan the bundle for matching files. If\r\n\n# there is only one executable file that matches, then use it, otherwise\r\n\n# it's an error...\r\n\n#\r\n\n#file(GLOB_RECURSE file_list \"${bundle}/${bundle_executable}\")\r\n",
        "Line" : 264,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# But for now, pragmatically, it's an error. Expect the main executable\r\n\n# for the bundle to be in Contents/MacOS, it's an error if it's not:\r\n\n#\r\n",
        "Line" : 271,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#\r\n\n# More inclusive technique... (This one would work on Windows and Linux\r\n\n# too, if a developer followed the typical Mac bundle naming convention...)\r\n\n#\r\n\n# If there is no Info.plist file, try to find an executable with the same\r\n\n# base name as the .app directory:\r\n\n#\r\n",
        "Line" : 278,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If there is a \".app\" parent directory,\r\n\n# ascend until we hit it:\r\n\n#   (typical of a Mac bundle executable)\r\n\n#\r\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Otherwise use a directory containing the exe\r\n\n#   (typical of a non-bundle executable on Mac, Windows or Linux)\r\n\n#\r\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Is it a directory ending in .app?\r\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#message(STATUS \"info: handled .app directory case...\")\r\n",
        "Line" : 340,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Is it an executable file?\r\n",
        "Line" : 348,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#message(STATUS \"info: handled executable file in .app dir case...\")\r\n",
        "Line" : 356,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "#message(STATUS \"info: handled executable file in any dir case...\")\r\n",
        "Line" : 362,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# find command is much quicker than checking every file one by one on Unix\r\n\n# which can take long time for large bundles, and since anyway we expect\r\n\n# executable to have execute flag set we can narrow the list much quicker.\r\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# For frameworks, construct the name under the embedded path from the\r\n\n# opening \"${item_name}.framework/\" to the closing \"/${item_name}\":\r\n\n#\r\n",
        "Line" : 485,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# For other items, just use the same name as the original, but in the\r\n\n# embedded path:\r\n\n#\r\n",
        "Line" : 490,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Replace @executable_path and resolve \"..\" references:\r\n\n#\r\n",
        "Line" : 496,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# *But* -- if we are not copying, then force resolved_embedded_item to be\r\n\n# the same as resolved_item. In the case of multiple executables in the\r\n\n# original bundle, using the default_embedded_path results in looking for\r\n\n# the resolved executable next to the main bundle executable. This is here\r\n\n# so that exes in the other sibling directories (like \"bin\") get fixed up\r\n\n# properly...\r\n\n#\r\n",
        "Line" : 501,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#message(\"warning: item key '${key}' already in the list, subsequent references assumed identical to first\")\r\n",
        "Line" : 522,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Always use the exepath of the main bundle executable for @executable_path\r\n\n# replacements:\r\n\n#\r\n",
        "Line" : 537,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# But do fixups on all executables in the bundle:\r\n\n#\r\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Set keys for main executable first:\r\n\n#\r\n",
        "Line" : 546,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Get rpaths specified by main executable:\r\n\n#\r\n",
        "Line" : 550,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# For each extra lib, accumulate a key as well and then also accumulate\r\n\n# any of its prerequisites. (Extra libs are typically dynamically loaded\r\n\n# plugins: libraries that are prerequisites for full runtime functionality\r\n\n# but that do not show up in otool -L output...)\r\n\n#\r\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# For each executable found in the bundle, accumulate keys as we go.\r\n\n# The list of keys should be complete when all prerequisites of all\r\n\n# binaries in the bundle have been analyzed.\r\n\n#\r\n",
        "Line" : 584,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Main executable is scanned first above:\r\n\n#\r\n",
        "Line" : 589,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Add the exe itself to the keys:\r\n\n#\r\n",
        "Line" : 592,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# Get rpaths specified by executable:\r\n\n#\r\n",
        "Line" : 596,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# Add each prerequisite to the keys:\r\n\n#\r\n",
        "Line" : 604,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# preserve library symlink structure\r\n",
        "Line" : 627,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# ignore case on Windows\r\n",
        "Line" : 636,
        "CharPositionInLine" : 12
      },
      "33" : {
        "Text" : "# Propagate values to caller's scope:\r\n\n#\r\n",
        "Line" : 654,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# ignore case on Windows\r\n",
        "Line" : 672,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# ignore case on Windows\r\n",
        "Line" : 691,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy ${resolved_item} ${resolved_embedded_item}\")\r\n",
        "Line" : 702,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# ignore case on Windows\r\n",
        "Line" : 714,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Full Framework (everything):\r\n",
        "Line" : 726,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy_directory '${resolved_dir}' '${resolved_embedded_dir}'\")\r\n",
        "Line" : 731,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# Framework lib itself:\r\n\n#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy ${resolved_item} ${resolved_embedded_item}\")\r\n",
        "Line" : 734,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# Plus Resources, if they exist:\r\n",
        "Line" : 738,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy_directory '${resolved_resources}' '${resolved_embedded_resources}'\")\r\n",
        "Line" : 742,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Some frameworks e.g. Qt put Info.plist in wrong place, so when it is\r\n\n# missing in resources, copy it from other well known incorrect locations:\r\n",
        "Line" : 746,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# Check for Contents/Info.plist in framework root (older Qt SDK):\r\n",
        "Line" : 749,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "#message(STATUS \"copying COMMAND ${CMAKE_COMMAND} -E copy_directory '${resolved_info_plist}' '${resolved_embedded_info_plist}'\")\r\n",
        "Line" : 753,
        "CharPositionInLine" : 10
      },
      "46" : {
        "Text" : "# Check if framework is versioned and fix it layout\r\n",
        "Line" : 758,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Ensure Current symlink points to the framework version\r\n",
        "Line" : 763,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# Restore symlinks in framework root pointing to current framework\r\n\n# binary and resources:\r\n",
        "Line" : 767,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# This item's key is \"ikey\":\r\n\n#\r\n",
        "Line" : 788,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Ensure the item is \"inside the .app bundle\" -- it should not be fixed up if\r\n\n# it is not in the .app bundle... Otherwise, we'll modify files in the build\r\n\n# tree, or in other varied locations around the file system, with our call to\r\n\n# install_name_tool. Make sure that doesn't happen here:\r\n\n#\r\n",
        "Line" : 792,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Each referenced item's key is \"rkey\" in the loop:\r\n\n#\r\n",
        "Line" : 830,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Only if install_name_tool supports -delete_rpath:\r\n\n#\r\n",
        "Line" : 845,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Change this item's id and all of its references in one call\r\n\n# to install_name_tool:\r\n\n#\r\n",
        "Line" : 861,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# On the Mac,\r\n\n# \"embedded\" and \"system\" prerequisites are fine... anything else means\r\n\n# the bundle's prerequisites are not verified (i.e., the bundle is not\r\n\n# really \"standalone\")\r\n\n#\r\n\n# On Windows (and others? Linux/Unix/...?)\r\n\n# \"local\" and \"system\" prereqs are fine...\r\n\n#\r\n",
        "Line" : 1003,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# Found non-system/somehow-unacceptable prerequisites:\r\n",
        "Line" : 1030,
        "CharPositionInLine" : 10
      },
      "56" : {
        "Text" : "# TODO: implement this function for real...\r\n\n# Right now, it is just a stub that verifies unconditionally...\r\n",
        "Line" : 1053,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Verify that the bundle does not have any \"external\" prerequisites:\r\n\n#\r\n",
        "Line" : 1078,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Verify that the bundle does not have any symlinks to external files:\r\n\n#\r\n",
        "Line" : 1086,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 59
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMake.cmake" : {
      "ObjectId" : "4abd6b772bf418768424a3b21bd84328669884a1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by cmake.cxx to compute the CMAKE_ROOT location.\r\n\n# Do not remove this file from cvs without updating cmake.cxx to look\r\n\n# for a different file.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeASM-ATTInformation.cmake" : {
      "ObjectId" : "b8e6344912d812fb45834403984255860a163ba9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# support for AT&T syntax assemblers, e.g. GNU as\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# *.S files are supposed to be preprocessed, so they should not be passed to\r\n\n# assembler but should be processed by gcc\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeASMInformation.cmake" : {
      "ObjectId" : "7d02a568857c9053fcfad18a9251a844fa26d395",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -I\r\n",
        "Line" : 11,
        "CharPositionInLine" : 53
      },
      "2" : {
        "Text" : "# Load compiler-specific information.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This should be included before the _INIT variables are\r\n\n# used to initialize the cache.  Since the rule variables\r\n\n# have if blocks on them, users can still define them here.\r\n\n# But, it should still be after the platform file so changes can\r\n\n# be made to those values.\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set default assembler file extensions:\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support for CMAKE_ASM${ASM_DIALECT}_FLAGS_INIT and friends:\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# default build type is none\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# to be done\r\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeASM_MASMInformation.cmake" : {
      "ObjectId" : "05c6c7582c3ae216eb3f5b3a9e5e9f05ff543dcd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# support for the MS assembler, masm and masm64\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeASM_NASMInformation.cmake" : {
      "ObjectId" : "16dfa68b8aa677e594aeaa913bfcf67065019371",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# support for the nasm assembler\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load the generic ASMInformation file:\r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeAddFortranSubdirectory.cmake" : {
      "ObjectId" : "f30713ca465a953a031af15b53a022d85b7b0019",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeAddFortranSubdirectory\r\n\n# ---------------------------\r\n\n#\r\n\n# Use MinGW gfortran from VS if a fortran compiler is not found.\r\n\n#\r\n\n# The 'add_fortran_subdirectory' function adds a subdirectory to a\r\n\n# project that contains a fortran only sub-project.  The module will\r\n\n# check the current compiler and see if it can support fortran.  If no\r\n\n# fortran compiler is found and the compiler is MSVC, then this module\r\n\n# will find the MinGW gfortran.  It will then use an external project to\r\n\n# build with the MinGW tools.  It will also create imported targets for\r\n\n# the libraries created.  This will only work if the fortran code is\r\n\n# built into a dll, so BUILD_SHARED_LIBS is turned on in the project.\r\n\n# In addition the CMAKE_GNUtoMS option is set to on, so that the MS .lib\r\n\n# files are created.  Usage is as follows:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   cmake_add_fortran_subdirectory(\r\n\n#    <subdir>                # name of subdirectory\r\n\n#    PROJECT <project_name>  # project name in subdir top CMakeLists.txt\r\n\n#    ARCHIVE_DIR <dir>       # dir where project places .lib files\r\n\n#    RUNTIME_DIR <dir>       # dir where project places .dll files\r\n\n#    LIBRARIES <lib>...      # names of library targets to import\r\n\n#    LINK_LIBRARIES          # link interface libraries for LIBRARIES\r\n\n#     [LINK_LIBS <lib> <dep>...]...\r\n\n#    CMAKE_COMMAND_LINE ...  # extra command line flags to pass to cmake\r\n\n#    NO_EXTERNAL_INSTALL     # skip installation of external project\r\n\n#    )\r\n\n#\r\n\n# Relative paths in ARCHIVE_DIR and RUNTIME_DIR are interpreted with\r\n\n# respect to the build directory corresponding to the source directory\r\n\n# in which the function is invoked.\r\n\n#\r\n\n# Limitations:\r\n\n#\r\n\n# NO_EXTERNAL_INSTALL is required for forward compatibility with a\r\n\n# future version that supports installation of the external project\r\n\n# binaries during \"make install\".\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for a MinGW gfortran.\r\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Validate the MinGW gfortran we found.\r\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Configure scripts to run MinGW tools with the proper PATH.\r\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Parse arguments to function\r\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# if we are not using MSVC without fortran support\r\n\n# then just use the usual add_subdirectory to build\r\n\n# the fortran library\r\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# if we have MSVC without Intel fortran then setup\r\n\n# external projects to build with mingw fortran\r\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# use the same directory that add_subdirectory would have used\r\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# create build and configure wrapper scripts\r\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# create the external project\r\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# make the external project always run make with each build\r\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# create imported targets for all libraries\r\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# now setup link libraries for targets\r\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# process current target and target_libs\r\n",
        "Line" : 183,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# zero out target and target_libs\r\n",
        "Line" : 185,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# save the current target and set start to FALSE\r\n",
        "Line" : 189,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# append the lib to target_libs\r\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# process anything that is left in target and target_libs\r\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeBackwardCompatibilityC.cmake" : {
      "ObjectId" : "070c31dd908fd2f97f97f59edad754a1c0a2c49e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nothing here yet\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Old CMake versions did not support OS X universal binaries anyway,\r\n\n# so just get through this with at least some size for the types.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeBackwardCompatibilityCXX.cmake" : {
      "ObjectId" : "84471b7296922588c5bee0dd09f768ec57798387",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeBackwardCompatibilityCXX\r\n\n# -----------------------------\r\n\n#\r\n\n# define a bunch of backwards compatibility variables\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_ANSI_CXXFLAGS - flag for ansi c++\r\n\n#   CMAKE_HAS_ANSI_STRING_STREAM - has <strstream>\r\n\n#   include(TestForANSIStreamHeaders)\r\n\n#   include(CheckIncludeFileCXX)\r\n\n#   include(TestForSTDNamespace)\r\n\n#   include(TestForANSIForScope)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check for some ANSI flags in the CXX compiler if it is not gnu\r\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# if CMAKE_TRY_ANSI_CXX_FLAGS has something in it, see\r\n\n# if the compiler accepts it\r\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# if the compiler liked the flag then set CMAKE_ANSI_CXXFLAGS\r\n\n# to the flag\r\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeBorlandFindMake.cmake" : {
      "ObjectId" : "294d84e7f4f8712279da18eaaf455f19f79c8c02",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeCInformation.cmake" : {
      "ObjectId" : "e885106b541064b26fcb552c60bf72b12eee51f6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file sets the basic flags for the C language in CMake.\r\n\n# It also loads the available platform file for the system-compiler\r\n\n# if it exists.\r\n\n# It also loads a system - compiler - processor (or target hardware)\r\n\n# specific file, which is mainly useful for crosscompiling and embedded systems.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# some compilers use different extensions (e.g. sdcc uses .rel)\r\n\n# so set the extension here first so it can be overridden by the compiler specific file\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Load compiler-specific information.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# load a hardware specific file, mostly useful for embedded compilers\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# load the system- and compiler specific files\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# load any compiler-wrapper specific information\r\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# We specify the compiler information in the system file for some\r\n\n# platforms, but this language may not have been enabled when the file\r\n\n# was first included.  Include it again to get the language info.\r\n\n# Remove this when all compiler info is removed from system files.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This should be included before the _INIT variables are\r\n\n# used to initialize the cache.  Since the rule variables\r\n\n# have if blocks on them, users can still define them here.\r\n\n# But, it should still be after the platform file so changes can\r\n\n# be made to those values.\r\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# for most systems a module is the same as a shared library\r\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\r\n\n# copy the values from the LIBRARY variables\r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# default build type is none\r\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# now define the following rule variables\r\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# CMAKE_C_CREATE_SHARED_LIBRARY\r\n\n# CMAKE_C_CREATE_SHARED_MODULE\r\n\n# CMAKE_C_COMPILE_OBJECT\r\n\n# CMAKE_C_LINK_EXECUTABLE\r\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# variables supplied by the generator at use time\r\n\n# <TARGET>\r\n\n# <TARGET_BASE> the target without the suffix\r\n\n# <OBJECTS>\r\n\n# <OBJECT>\r\n\n# <LINK_LIBRARIES>\r\n\n# <FLAGS>\r\n\n# <LINK_FLAGS>\r\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# C compiler information\r\n\n# <CMAKE_C_COMPILER>\r\n\n# <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS>\r\n\n# <CMAKE_SHARED_MODULE_CREATE_C_FLAGS>\r\n\n# <CMAKE_C_LINK_FLAGS>\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Static library tools\r\n\n# <CMAKE_AR>\r\n\n# <CMAKE_RANLIB>\r\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# create a C shared library\r\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# create a C shared module just copy the shared library rule\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Create a static archive incrementally for large object file counts.\r\n\n# If CMAKE_C_CREATE_STATIC_LIBRARY is set it will override these.\r\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# compile a C file into an object file\r\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeCSharpInformation.cmake" : {
      "ObjectId" : "aca6cb8e9b7ce5537e7e493c792d5a70d4367ec0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file sets the basic flags for the C# language in CMake.\r\n\n# It also loads the available platform file for the system-compiler\r\n\n# if it exists.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This should be included before the _INIT variables are\r\n\n# used to initialize the cache.  Since the rule variables\r\n\n# have if blocks on them, users can still define them here.\r\n\n# But, it should still be after the platform file so changes can\r\n\n# be made to those values.\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for most systems a module is the same as a shared library\r\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\r\n\n# copy the values from the LIBRARY variables\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add the flags to the cache based\r\n\n# on the initial values computed in the platform/*.cmake files\r\n\n# use _INIT variables so that this only happens the first time\r\n\n# and you can set these flags in the cmake cache\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# avoid just having a space as the initial value for the cache\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set missing flags (if they do not exist). This is needed in the\r\n\n# unlikely case that you have only C# and no C/C++ targets in your\r\n\n# project.\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeCUDAInformation.cmake" : {
      "ObjectId" : "c3e33a4100575e0ba6433c5166b5613e8532c42a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Load compiler-specific information.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# load the system- and compiler specific files\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# load a hardware specific file, mostly useful for embedded compilers\r\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# for most systems a module is the same as a shared library\r\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\r\n\n# copy the values from the LIBRARY variables\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the flags to the cache based\r\n\n# on the initial values computed in the platform/*.cmake files\r\n\n# use _INIT variables so that this only happens the first time\r\n\n# and you can set these flags in the cmake cache\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# now define the following rules:\r\n\n# CMAKE_CUDA_CREATE_SHARED_LIBRARY\r\n\n# CMAKE_CUDA_CREATE_SHARED_MODULE\r\n\n# CMAKE_CUDA_COMPILE_OBJECT\r\n\n# CMAKE_CUDA_LINK_EXECUTABLE\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# create a shared library\r\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# create a shared module copy the shared library rule by default\r\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Create a static archive incrementally for large object file counts.\r\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#Specify how to compile when ptx has been requested\r\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Specify how to compile when separable compilation has been requested\r\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#Specify how to compile when whole compilation has been requested\r\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#The Ninja generator uses the make file dependency files to determine what\r\n\n#files need to be recompiled. Unfortunately, nvcc doesn't support building\r\n\n#a source file and generating the dependencies of said file in a single\r\n\n#invocation. Instead we have to state that you need to chain two commands.\r\n\n#\r\n\n#The makefile generators uses the custom CMake dependency scanner, and thus\r\n\n#it is exempt from this logic.\r\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# compile a cu file into an executable\r\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#These are used when linking relocatable (dc) cuda code\r\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeCXXInformation.cmake" : {
      "ObjectId" : "ad8d192e7ab58f0764487cf40ff9862bf82c0f98",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file sets the basic flags for the C++ language in CMake.\r\n\n# It also loads the available platform file for the system-compiler\r\n\n# if it exists.\r\n\n# It also loads a system - compiler - processor (or target hardware)\r\n\n# specific file, which is mainly useful for crosscompiling and embedded systems.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# some compilers use different extensions (e.g. sdcc uses .rel)\r\n\n# so set the extension here first so it can be overridden by the compiler specific file\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Load compiler-specific information.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# since the gnu compiler has several names force g++\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# load a hardware specific file, mostly useful for embedded compilers\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# load the system- and compiler specific files\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# load any compiler-wrapper specific information\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We specify the compiler information in the system file for some\r\n\n# platforms, but this language may not have been enabled when the file\r\n\n# was first included.  Include it again to get the language info.\r\n\n# Remove this when all compiler info is removed from system files.\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This should be included before the _INIT variables are\r\n\n# used to initialize the cache.  Since the rule variables\r\n\n# have if blocks on them, users can still define them here.\r\n\n# But, it should still be after the platform file so changes can\r\n\n# be made to those values.\r\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Create a set of shared library variable specific to C++\r\n\n# For 90% of the systems, these are the same flags as the C versions\r\n\n# so if these are not set just copy the flags from the c version\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# for most systems a module is the same as a shared library\r\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\r\n\n# copy the values from the LIBRARY variables\r\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# repeat for modules\r\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Initialize CXX link type selection flags from C versions.\r\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# add the flags to the cache based\r\n\n# on the initial values computed in the platform/*.cmake files\r\n\n# use _INIT variables so that this only happens the first time\r\n\n# and you can set these flags in the cmake cache\r\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# now define the following rules:\r\n\n# CMAKE_CXX_CREATE_SHARED_LIBRARY\r\n\n# CMAKE_CXX_CREATE_SHARED_MODULE\r\n\n# CMAKE_CXX_COMPILE_OBJECT\r\n\n# CMAKE_CXX_LINK_EXECUTABLE\r\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# variables supplied by the generator at use time\r\n\n# <TARGET>\r\n\n# <TARGET_BASE> the target without the suffix\r\n\n# <OBJECTS>\r\n\n# <OBJECT>\r\n\n# <LINK_LIBRARIES>\r\n\n# <FLAGS>\r\n\n# <LINK_FLAGS>\r\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CXX compiler information\r\n\n# <CMAKE_CXX_COMPILER>\r\n\n# <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS>\r\n\n# <CMAKE_CXX_SHARED_MODULE_CREATE_FLAGS>\r\n\n# <CMAKE_CXX_LINK_FLAGS>\r\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Static library tools\r\n\n# <CMAKE_AR>\r\n\n# <CMAKE_RANLIB>\r\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# create a shared C++ library\r\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# create a c++ shared module copy the shared library rule by default\r\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Create a static archive incrementally for large object file counts.\r\n\n# If CMAKE_CXX_CREATE_STATIC_LIBRARY is set it will override these.\r\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# compile a C++ file into an object file\r\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake" : {
      "ObjectId" : "e766401d605a57c2f840adc32943bc4b56b3a598",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do NOT include this module directly into any of your code. It is meant as\r\n\n# a library for Check*CompilerFlag.cmake modules. It's content may change in\r\n\n# any way between releases.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GNU, NAG\r\n\n# Clang\r\n\n# Clang\r\n\n# Clang (cl)\r\n\n# MSVC, Intel\r\n\n# MSVC, any lang\r\n\n# Intel\r\n\n# Intel\r\n\n# Intel\r\n",
        "Line" : 11,
        "CharPositionInLine" : 60
      },
      "3" : {
        "Text" : "# Intel\r\n",
        "Line" : 20,
        "CharPositionInLine" : 62
      },
      "4" : {
        "Text" : "# HP\r\n\n# SunPro\r\n\n# XL\r\n",
        "Line" : 21,
        "CharPositionInLine" : 60
      },
      "5" : {
        "Text" : "# XL\r\n",
        "Line" : 24,
        "CharPositionInLine" : 70
      },
      "6" : {
        "Text" : "# AIX\r\n",
        "Line" : 25,
        "CharPositionInLine" : 69
      },
      "7" : {
        "Text" : "# PGI\r\n\n# PGI\r\n\n# Open64\r\n\n# Borland\r\n\n# SunStudio 12\r\n\n# Fujitsu\r\n",
        "Line" : 26,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeCommonLanguageInclude.cmake" : {
      "ObjectId" : "ac29e4a26f3d9439fb7b9f537a36d3a576108d69",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# this file has flags that are shared across languages and sets\r\n\n# cache values that can be initialized in the platform-compiler.cmake file\r\n\n# it may be included by more than one language.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# default build type is none\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# executable linker flags\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# shared linker flags\r\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# module linker flags\r\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# static linker flags\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Alias the build tool variable for backward compatibility.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeCompilerIdDetection.cmake" : {
      "ObjectId" : "d3f1528b8ff91aece7b7fca0c93287665371b929",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Order is relevant here. For example, compilers which pretend to be\r\n\n# GCC must appear before the actual GCC.\r\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#Currently the only CUDA compilers are NVIDIA\r\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDependentOption.cmake" : {
      "ObjectId" : "c20d5da0d993d722be233271cf4975a01cb3d6fd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeDependentOption\r\n\n# --------------------\r\n\n#\r\n\n# Macro to provide an option dependent on other options.\r\n\n#\r\n\n# This macro presents an option to the user only if a set of other\r\n\n# conditions are true.  When the option is not presented a default value\r\n\n# is used, but any value set by the user is preserved for when the\r\n\n# option is presented again.  Example invocation:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_DEPENDENT_OPTION(USE_FOO \"Use Foo\" ON\r\n\n#                          \"USE_BAR;NOT USE_ZOT\" OFF)\r\n\n#\r\n\n# If USE_BAR is true and USE_ZOT is false, this provides an option\r\n\n# called USE_FOO that defaults to ON.  Otherwise, it sets USE_FOO to\r\n\n# OFF.  If the status of USE_BAR or USE_ZOT ever changes, any value for\r\n\n# the USE_FOO option is saved so that when the option is re-enabled it\r\n\n# retains its old value.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineASM-ATTCompiler.cmake" : {
      "ObjectId" : "874d53801f46474caa01dfa46248ae41b32f0609",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for ASM using AT&T syntax, e.g. GNU as\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineASMCompiler.cmake" : {
      "ObjectId" : "3324150df04d5133edbc910482767796f8f249c3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for ASM programs\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# prefer the environment variable ASM\r\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# finally list compilers to try\r\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# the generic assembler support\r\n",
        "Line" : 22,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : "# List all default C and CXX compilers\r\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# some specific assembler \"dialect\"\r\n",
        "Line" : 37,
        "CharPositionInLine" : 9
      },
      "7" : {
        "Text" : "# Find the compiler.\r\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Table of per-vendor compiler id flags with expected output.\r\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# If we have a gas/as cross compiler, they have usually some prefix, like\r\n\n# e.g. powerpc-linux-gas, arm-elf-gas or i586-mingw32msvc-gas , optionally\r\n\n# with a 3-component version number at the end\r\n\n# The other tools of the toolchain usually have the same prefix\r\n\n# NAME_WE cannot be used since then this test will fail for names like\r\n\n# \"arm-unknown-nto-qnx6.3.0-gas.exe\", where BASENAME would be\r\n\n# \"arm-unknown-nto-qnx6\" instead of the correct \"arm-unknown-nto-qnx6.3.0-\"\r\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Now try the C compiler regexp:\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Finally try the CXX compiler regexp:\r\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# configure variables set in this file for fast reload later on\r\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineASM_MASMCompiler.cmake" : {
      "ObjectId" : "e31d71b6dc1d72537c43898d0a6810d4d8324a80",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the MS assembler (masm or masm64)\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if we are using the 64bit cl compiler, assume we also want the 64bit assembler\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineASM_NASMCompiler.cmake" : {
      "ObjectId" : "22c5ace1c96c514438f23783de08b577e3388b06",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the nasm assembler. yasm (http://www.tortall.net/projects/yasm/) is nasm compatible\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load the generic DetermineASM compiler file with the DIALECT set properly:\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCCompiler.cmake" : {
      "ObjectId" : "2c24918bbb5474ff7a1cd270156dc2f2ca7c5a95",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for C programs\r\n\n# NOTE, a generator may set CMAKE_C_COMPILER before\r\n\n# loading this file to force a compiler.\r\n\n# use environment variable CC first if defined by user, next use\r\n\n# the cmake variable CMAKE_GENERATOR_CC which can be defined by a generator\r\n\n# as a default compiler\r\n\n# If the internal cmake variable _CMAKE_TOOLCHAIN_PREFIX is set, this is used\r\n\n# as prefix for the tools (e.g. arm-elf-gcc, arm-elf-ar etc.). This works\r\n\n# currently with the GNU crosscompilers.\r\n\n#\r\n\n# Sets the following variables:\r\n\n#   CMAKE_C_COMPILER\r\n\n#   CMAKE_AR\r\n\n#   CMAKE_RANLIB\r\n\n#   CMAKE_COMPILER_IS_GNUCC\r\n\n#\r\n\n# If not already set before, it also sets\r\n\n#   _CMAKE_TOOLCHAIN_PREFIX\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load system-specific compiler preferences for this language.\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# prefer the environment variable CC\r\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# next try prefer the compiler specified by the generator\r\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# finally list compilers to try\r\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Each entry in this list is a set of extra flags to try\r\n\n# adding to the compile line to see if it helps produce\r\n\n# a valid identification file.\r\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Try compiling to an object file only.\r\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Try enabling ANSI mode on HP.\r\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Try compiling K&R-compatible code (needed by Bruce C Compiler).\r\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Build a small source file to identify the compiler.\r\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Try to identify the compiler.\r\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# The IAR compiler produces weird output.\r\n\n# See https://gitlab.kitware.com/cmake/cmake/issues/10176#note_153591\r\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Match the link line from xcodebuild output of the form\r\n\n#  Ld ...\r\n\n#      ...\r\n\n#      /path/to/cc ...CompilerIdC/...\r\n\n# to extract the compiler front-end for the language.\r\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set old compiler and platform id variables.\r\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# If we have a gcc cross compiler, they have usually some prefix, like\r\n\n# e.g. powerpc-linux-gcc, arm-elf-gcc or i586-mingw32msvc-gcc, optionally\r\n\n# with a 3-component version number at the end (e.g. arm-eabi-gcc-4.5.2).\r\n\n# The other tools of the toolchain usually have the same prefix\r\n\n# NAME_WE cannot be used since then this test will fail for names like\r\n\n# \"arm-unknown-nto-qnx6.3.0-gcc.exe\", where BASENAME would be\r\n\n# \"arm-unknown-nto-qnx6\" instead of the correct \"arm-unknown-nto-qnx6.3.0-\"\r\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# if \"llvm-\" is part of the prefix, remove it, since llvm doesn't have its own binutils\r\n\n# but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)\r\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# TI compilers are named e.g. cl6x, cl470 or armcl.exe\r\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# configure variables set in this file for fast reload later on\r\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCSharpCompiler.cmake" : {
      "ObjectId" : "e2ed054facb31f58c47118b7bc51dfe2dfc0252c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include(Platform/${CMAKE_SYSTEM_NAME}-Determine-CSharp OPTIONAL)\r\n\n#include(Platform/${CMAKE_SYSTEM_NAME}-CSharp OPTIONAL)\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build a small source file to identify the compiler.\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Try to identify the compiler.\r\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# configure variables set in this file for fast reload later on\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCUDACompiler.cmake" : {
      "ObjectId" : "62cdb8de3478dd1ac76293ccab1ae66b0638173f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefer the environment variable CUDACXX\r\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# finally list compilers to try\r\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#Allow the user to specify a host compiler\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build a small source file to identify the compiler.\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Try to identify the compiler.\r\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#if this compiler vendor is matches NVIDIA we can determine\r\n\n#what the host compiler is. This only needs to be done if the CMAKE_CUDA_HOST_COMPILER\r\n\n#has NOT been explicitly set\r\n\n#\r\n\n#Find the line from compiler ID that contains a.out ( or last line )\r\n\n#We also need to find the implicit link lines. Which can be done by replacing\r\n\n#the compiler with cuda-fake-ld  and pass too CMAKE_PARSE_IMPLICIT_LINK_INFO\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Remove variable assignments.\r\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Split lines.\r\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#extract the compiler that is being used for linking\r\n",
        "Line" : 130,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "#prefix the line with cuda-fake-ld so that implicit link info believes it is\r\n\n#a link line\r\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# across all operating system each include directory is prefixed with -I\r\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# configure all variables set in this file\r\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCXXCompiler.cmake" : {
      "ObjectId" : "73106782394f0f6a20e521ce21e17e24680f40ba",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for C++ programs\r\n\n# NOTE, a generator may set CMAKE_CXX_COMPILER before\r\n\n# loading this file to force a compiler.\r\n\n# use environment variable CXX first if defined by user, next use\r\n\n# the cmake variable CMAKE_GENERATOR_CXX which can be defined by a generator\r\n\n# as a default compiler\r\n\n# If the internal cmake variable _CMAKE_TOOLCHAIN_PREFIX is set, this is used\r\n\n# as prefix for the tools (e.g. arm-elf-g++, arm-elf-ar etc.)\r\n\n#\r\n\n# Sets the following variables:\r\n\n#   CMAKE_CXX_COMPILER\r\n\n#   CMAKE_COMPILER_IS_GNUCXX\r\n\n#   CMAKE_AR\r\n\n#   CMAKE_RANLIB\r\n\n#\r\n\n# If not already set before, it also sets\r\n\n#   _CMAKE_TOOLCHAIN_PREFIX\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load system-specific compiler preferences for this language.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# prefer the environment variable CXX\r\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# next prefer the generator specified compiler\r\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# finally list compilers to try\r\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Each entry in this list is a set of extra flags to try\r\n\n# adding to the compile line to see if it helps produce\r\n\n# a valid identification file.\r\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Try compiling to an object file only.\r\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Build a small source file to identify the compiler.\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Try to identify the compiler.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# The IAR compiler produces weird output.\r\n\n# See https://gitlab.kitware.com/cmake/cmake/issues/10176#note_153591\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Match the link line from xcodebuild output of the form\r\n\n#  Ld ...\r\n\n#      ...\r\n\n#      /path/to/cc ...CompilerIdCXX/...\r\n\n# to extract the compiler front-end for the language.\r\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set old compiler and platform id variables.\r\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# if we have a g++ cross compiler, they have usually some prefix, like\r\n\n# e.g. powerpc-linux-g++, arm-elf-g++ or i586-mingw32msvc-g++ , optionally\r\n\n# with a 3-component version number at the end (e.g. arm-eabi-gcc-4.5.2).\r\n\n# The other tools of the toolchain usually have the same prefix\r\n\n# NAME_WE cannot be used since then this test will fail for names like\r\n\n# \"arm-unknown-nto-qnx6.3.0-gcc.exe\", where BASENAME would be\r\n\n# \"arm-unknown-nto-qnx6\" instead of the correct \"arm-unknown-nto-qnx6.3.0-\"\r\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# if \"llvm-\" is part of the prefix, remove it, since llvm doesn't have its own binutils\r\n\n# but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)\r\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# TI compilers are named e.g. cl6x, cl470 or armcl.exe\r\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# configure all variables set in this file\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCompileFeatures.cmake" : {
      "ObjectId" : "f3c072616775f3dcb0864857d4af8484872ad303",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCompiler.cmake" : {
      "ObjectId" : "4587d4fe3f87a65af36e0782480f681d2e6e216e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use already-enabled languages for reference.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Search only for the specified compiler.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Re-order the compiler list with preferred vendors first.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Prefer vendors of compilers from reference languages.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Prefer vendors based on the platform.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Append the rest of the list and remove duplicates.\r\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for directories containing compilers of reference languages.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Find the compiler.\r\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Prefer directories containing compilers of reference languages.\r\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Look for a make tool provided by Xcode\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# we only get here if CMAKE_${lang}_COMPILER was specified using -D or a pre-made CMakeCache.txt\r\n\n# (e.g. via ctest) or set in CMAKE_TOOLCHAIN_FILE\r\n\n# if CMAKE_${lang}_COMPILER is a list of length 2, use the first item as\r\n\n# CMAKE_${lang}_COMPILER and the 2nd one as CMAKE_${lang}_COMPILER_ARG1\r\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# find the compiler in the PATH if necessary\r\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCompilerABI.cmake" : {
      "ObjectId" : "b3ae7d63f81abec9aad03bf019740d8366921eb1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Function to compile a source file to identify the compiler ABI.\r\n\n# This is used internally by CMake and should not be included by user\r\n\n# code.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compile the ABI identification source.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Avoid adding our own platform standard libraries for compilers\r\n\n# from which we might detect implicit link libraries.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Ignore unused flags when we are just determining the ABI.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 18
      },
      "5" : {
        "Text" : "# Move result from cache to normal variable.\r\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Load the resulting information strings.\r\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Parse implicit linker information for this language, if available.\r\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# for VS IDE Intel Fortran we have to figure out the\r\n\n# implicit link path for the fortran run time using\r\n\n# a try-compile\r\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Build a sample project which reports symbols.\r\n",
        "Line" : 82,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Implicit link libraries cannot be used explicitly for multiple\r\n\n# OS X architectures, so we skip it.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Detect library architecture directory name.\r\n",
        "Line" : 110,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 12
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineCompilerId.cmake" : {
      "ObjectId" : "6a223b458b2e81c9f41ca086e8d3dab31c1889fc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Function to compile a source file to identify the compiler.  This is\r\n\n# used internally by CMake and should not be included by user code.\r\n\n# If successful, sets CMAKE_<lang>_COMPILER_ID and CMAKE_<lang>_PLATFORM_ID\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the compiler arguments are clean.\r\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make sure user-specified compiler flags are used.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Compute the directory in which to run the test.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Try building with no extra flags and then try each set\r\n\n# of helper flags.  Stop when the compiler is identified.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If the compiler is still unknown, try to query its vendor.\r\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# http://community.qnx.com/sf/discussion/do/listPosts/projects.community/discussion.qnx_momentics_community_support.topc3555?_pagenum=2\r\n\n# The qcc driver does not itself have a version.\r\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# if the format is unknown after all files have been checked, put \"Unknown\" in the cache\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Display the final identification result.\r\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Check if compiler id detection gave us the compiler tool.\r\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Function to write the compiler id source file.\r\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Function to build the compiler id source file and look for output\r\n\n# files.\r\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Create a clean working directory.\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Construct a description of this test case.\r\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Compile the compiler identification source.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Match the compiler location line printed out.\r\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Strip VS diagnostic output from the end of the line.\r\n",
        "Line" : 254,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Check the result of compilation.\r\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Intel Fortran warns and ignores preprocessor lines without /fpp\r\n",
        "Line" : 349,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "# Compilation failed.\r\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "#if(NOT CMAKE_${lang}_COMPILER_ID_ALLOW_FAIL)\r\n\n#  message(FATAL_ERROR \"${MSG}\")\r\n\n#endif()\r\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# No output files should be inspected.\r\n",
        "Line" : 366,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Compilation succeeded.\r\n",
        "Line" : 370,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Find the executable produced by the compiler, try all files in the\r\n\n# binary dir.\r\n",
        "Line" : 380,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# normal case\r\n",
        "Line" : 386,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# com.apple.package-type.bundle.unit-test\r\n",
        "Line" : 389,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# No executable was found.\r\n",
        "Line" : 404,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Return the files produced by the compilation.\r\n",
        "Line" : 414,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Function to extract the compiler id from compiler output.\r\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Function to extract the compiler id from an executable.\r\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Look for a compiler id if not yet known.\r\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Read the compiler identification string from the executable file.\r\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# In C# binaries, some strings are found more than once.\r\n",
        "Line" : 465,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Construct compiler version from components if needed.\r\n",
        "Line" : 511,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Detect the exact architecture from the PE header.\r\n",
        "Line" : 525,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# The offset to the PE signature is stored at 0x3c.\r\n",
        "Line" : 527,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Check if a valid compiler and platform were found.\r\n",
        "Line" : 552,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Check the compiler identification string.\r\n",
        "Line" : 562,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# The compiler identification was found.\r\n",
        "Line" : 564,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "# The compiler identification could not be found.\r\n",
        "Line" : 569,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# try to figure out the executable format: ELF, COFF, Mach-O\r\n",
        "Line" : 576,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# ELF files start with 0x7f\"ELF\"\r\n",
        "Line" : 580,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "#    # COFF (.exe) files start with \"MZ\"\r\n\n#    if(\"${CMAKE_EXECUTABLE_MAGIC}\" MATCHES \"4d5a....\")\r\n\n#      set(CMAKE_EXECUTABLE_FORMAT \"COFF\" CACHE STRING \"Executable file format\")\r\n\n#    endif()\r\n\n#\r\n\n#    # Mach-O files start with CAFEBABE or FEEDFACE, according to http://radio.weblogs.com/0100490/2003/01/28.html\r\n\n#    if(\"${CMAKE_EXECUTABLE_MAGIC}\" MATCHES \"cafebabe\")\r\n\n#      set(CMAKE_EXECUTABLE_FORMAT \"MACHO\" CACHE STRING \"Executable file format\")\r\n\n#    endif()\r\n\n#    if(\"${CMAKE_EXECUTABLE_MAGIC}\" MATCHES \"feedface\")\r\n\n#      set(CMAKE_EXECUTABLE_FORMAT \"MACHO\" CACHE STRING \"Executable file format\")\r\n\n#    endif()\r\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Return the information extracted.\r\n",
        "Line" : 602,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Function to query the compiler vendor.\r\n\n# This uses a table with entries of the form\r\n\n#   list(APPEND CMAKE_${lang}_COMPILER_ID_VENDORS ${vendor})\r\n\n#   set(CMAKE_${lang}_COMPILER_ID_VENDOR_FLAGS_${vendor} -some-vendor-flag)\r\n\n#   set(CMAKE_${lang}_COMPILER_ID_VENDOR_REGEX_${vendor} \"Some Vendor Output\")\r\n\n# We try running the compiler with the flag for each vendor and\r\n\n# matching its regular expression in the output.\r\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# We get here when this function is called not from within CMAKE_DETERMINE_COMPILER_ID()\r\n\n# This is done e.g. for detecting the compiler ID for assemblers.\r\n\n# Compute the directory in which to run the test and Create a clean working directory.\r\n",
        "Line" : 627,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Run this MSVC-compatible compiler to detect what the /showIncludes\r\n\n# option displays.  We can use a C source even with the C++ compiler\r\n\n# because MSVC-compatible compilers handle both and show the same output.\r\n",
        "Line" : 671,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 48
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineFortranCompiler.cmake" : {
      "ObjectId" : "5004f02a63ead84381de44e8a59fb870054a26a5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for Fortran programs\r\n\n# NOTE, a generator may set CMAKE_Fortran_COMPILER before\r\n\n# loading this file to force a compiler.\r\n\n# use environment variable FC first if defined by user, next use\r\n\n# the cmake variable CMAKE_GENERATOR_FC which can be defined by a generator\r\n\n# as a default compiler\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# prefer the environment variable CC\r\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# next try prefer the compiler specified by the generator\r\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# finally list compilers to try\r\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Known compilers:\r\n\n#  f77/f90/f95: generic compiler names\r\n\n#  ftn: Cray fortran compiler wrapper\r\n\n#  g77: GNU Fortran 77 compiler\r\n\n#  gfortran: putative GNU Fortran 95+ compiler (in progress)\r\n\n#  fort77: native F77 compiler under HP-UX (and some older Crays)\r\n\n#  frt: Fujitsu F77 compiler\r\n\n#  pathf90/pathf95/pathf2003: PathScale Fortran compiler\r\n\n#  pgf77/pgf90/pgf95/pgfortran: Portland Group F77/F90/F95 compilers\r\n\n#  xlf/xlf90/xlf95: IBM (AIX) F77/F90/F95 compilers\r\n\n#  lf95: Lahey-Fujitsu F95 compiler\r\n\n#  fl32: Microsoft Fortran 77 \"PowerStation\" compiler\r\n\n#  af77: Apogee F77 compiler for Intergraph hardware running CLIX\r\n\n#  epcf90: \"Edinburgh Portable Compiler\" F90\r\n\n#  fort: Compaq (now HP) Fortran 90/95 compiler for Tru64 and Linux/Alpha\r\n\n#  ifc: Intel Fortran 95 compiler for Linux/x86\r\n\n#  efc: Intel Fortran 95 compiler for IA64\r\n\n#\r\n\n#  The order is 95 or newer compilers first, then 90,\r\n\n#  then 77 or older compilers, gnu is always last in the group,\r\n\n#  so if you paid for a compiler it is picked by default.\r\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Vendor-specific compiler names.\r\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Each entry in this list is a set of extra flags to try\r\n\n# adding to the compile line to see if it helps produce\r\n\n# a valid identification executable.\r\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Get verbose output to help distinguish compilers.\r\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Try compiling to an object file only.\r\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Intel on windows does not preprocess by default.\r\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Build a small source file to identify the compiler.\r\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Table of per-vendor compiler output regular expressions.\r\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Table of per-vendor compiler id flags with expected output.\r\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Numerical Algorithms Group\r\n",
        "Line" : 119,
        "CharPositionInLine" : 53
      },
      "15" : {
        "Text" : "# Match the link line from xcodebuild output of the form\r\n\n#  Ld ...\r\n\n#      ...\r\n\n#      /path/to/cc ...CompilerIdFortran/...\r\n\n# to extract the compiler front-end for the language.\r\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Try to identify the compiler.\r\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Fall back to old is-GNU test.\r\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Fall back for GNU MINGW, which is not always detected correctly\r\n\n# (__MINGW32__ is defined for the C language, but perhaps not for Fortran!)\r\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Set old compiler and platform id variables.\r\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# if we have a fortran cross compiler, they have usually some prefix, like\r\n\n# e.g. powerpc-linux-gfortran, arm-elf-gfortran or i586-mingw32msvc-gfortran , optionally\r\n\n# with a 3-component version number at the end (e.g. arm-eabi-gcc-4.5.2).\r\n\n# The other tools of the toolchain usually have the same prefix\r\n\n# NAME_WE cannot be used since then this test will fail for names like\r\n\n# \"arm-unknown-nto-qnx6.3.0-gcc.exe\", where BASENAME would be\r\n\n# \"arm-unknown-nto-qnx6\" instead of the correct \"arm-unknown-nto-qnx6.3.0-\"\r\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# if \"llvm-\" is part of the prefix, remove it, since llvm doesn't have its own binutils\r\n\n# but uses the regular ar, objcopy, etc. (instead of llvm-objcopy etc.)\r\n",
        "Line" : 248,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# configure variables set in this file for fast reload later on\r\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineJavaCompiler.cmake" : {
      "ObjectId" : "36ffdc55d08f3541d1f51a4044b265de6b8389e0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for Java programs\r\n\n# NOTE, a generator may set CMAKE_Java_COMPILER before\r\n\n# loading this file to force a compiler.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# prefer the environment variable CC\r\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# if no compiler has been specified yet, then look for one\r\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# if no runtime has been specified yet, then look for one\r\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# if no archive has been specified yet, then look for one\r\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# configure variables set in this file for fast reload later on\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineRCCompiler.cmake" : {
      "ObjectId" : "3b5a1fb37225951a59c5beba11ad1c026b89c781",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# determine the compiler to use for RC programs\r\n\n# NOTE, a generator may set CMAKE_RC_COMPILER before\r\n\n# loading this file to force a compiler.\r\n\n# use environment variable RC first if defined by user, next use\r\n\n# the cmake variable CMAKE_GENERATOR_RC which can be defined by a generator\r\n\n# as a default compiler\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# prefer the environment variable RC\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# next try prefer the compiler specified by the generator\r\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# finally list compilers to try\r\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find the compiler.\r\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# configure variables set in this file for fast reload later on\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineSwiftCompiler.cmake" : {
      "ObjectId" : "4dc49b8de44cf5be656de515e6dc394ffd5e5631",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build a small source file to identify the compiler.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to identify the compiler.\r\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# configure variables set in this file for fast reload later on\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineSystem.cmake" : {
      "ObjectId" : "bbda188a7e581fd6cc91a724ff2a611209bbe8df",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is used by the Makefile generator to determin the following variables:\r\n\n# CMAKE_SYSTEM_NAME - on unix this is uname -s, for windows it is Windows\r\n\n# CMAKE_SYSTEM_VERSION - on unix this is uname -r, for windows it is empty\r\n\n# CMAKE_SYSTEM - ${CMAKE_SYSTEM}-${CMAKE_SYSTEM_VERSION}, for windows: ${CMAKE_SYSTEM}\r\n\n#\r\n\n#  Expected uname -s output:\r\n\n#\r\n\n# AIX                           AIX\r\n\n# BSD/OS                        BSD/OS\r\n\n# FreeBSD                       FreeBSD\r\n\n# HP-UX                         HP-UX\r\n\n# IRIX                          IRIX\r\n\n# Linux                         Linux\r\n\n# GNU/kFreeBSD                  GNU/kFreeBSD\r\n\n# NetBSD                        NetBSD\r\n\n# OpenBSD                       OpenBSD\r\n\n# OFS/1 (Digital Unix)          OSF1\r\n\n# SCO OpenServer 5              SCO_SV\r\n\n# SCO UnixWare 7                UnixWare\r\n\n# SCO UnixWare (pre release 7)  UNIX_SV\r\n\n# SCO XENIX                     Xenix\r\n\n# Solaris                       SunOS\r\n\n# SunOS                         SunOS\r\n\n# Tru64                         Tru64\r\n\n# Ultrix                        ULTRIX\r\n\n# cygwin                        CYGWIN_NT-5.1\r\n\n# MacOSX                        Darwin\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find out on which system cmake runs\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OS X ppc 'uname -m' may report 'Power Macintosh' instead of 'powerpc'\r\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# check the return of the last uname -m or -p\r\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# processor may have double quote in the name, and that needs to be removed\r\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if a toolchain file is used, the user wants to cross compile.\r\n\n# in this case read the toolchain file and keep the CMAKE_HOST_SYSTEM_*\r\n\n# variables around so they can be used in CMakeLists.txt.\r\n\n# In all other cases, the host and target platform are the same.\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# at first try to load it as path relative to the directory from which cmake has been run\r\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# if the file isn't found there, check the default locations\r\n",
        "Line" : 87,
        "CharPositionInLine" : 5
      },
      "9" : {
        "Text" : "# if CMAKE_SYSTEM_NAME is here already set, either it comes from a toolchain file\r\n\n# or it was set via -DCMAKE_SYSTEM_NAME=...\r\n\n# if that's the case, assume we are crosscompiling\r\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# fix for BSD/OS , remove the /\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# fix for GNU/kFreeBSD, remove the GNU/\r\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# fix for CYGWIN which has windows version in it\r\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# set CMAKE_SYSTEM to the CMAKE_SYSTEM_NAME\r\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# if there is a CMAKE_SYSTEM_VERSION then add a -${CMAKE_SYSTEM_VERSION}\r\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# this file is also executed from cpack, then we don't need to generate these files\r\n\n# in this case there is no CMAKE_BINARY_DIR\r\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# write entry to the log file\r\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# if a toolchain file is used, it needs to be included in the configured file,\r\n\n# so settings done there are also available if they don't go in the cache and in try_compile()\r\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# configure variables set in this file for fast reload, the template file is defined at the top of this file\r\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeDetermineVSServicePack.cmake" : {
      "ObjectId" : "317d299dd009caf582720cc1a9d9c1c587bb6ab3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeDetermineVSServicePack\r\n\n# ---------------------------\r\n\n#\r\n\n# Deprecated.  Do not use.\r\n\n#\r\n\n# The functionality of this module has been superseded by the\r\n\n# :variable:`CMAKE_<LANG>_COMPILER_VERSION` variable that contains\r\n\n# the compiler version number.\r\n\n#\r\n\n# Determine the Visual Studio service pack of the 'cl' in use.\r\n\n#\r\n\n# Usage::\r\n\n#\r\n\n#   if(MSVC)\r\n\n#     include(CMakeDetermineVSServicePack)\r\n\n#     DetermineVSServicePack( my_service_pack )\r\n\n#     if( my_service_pack )\r\n\n#       message(STATUS \"Detected: ${my_service_pack}\")\r\n\n#     endif()\r\n\n#   endif()\r\n\n#\r\n\n# Function DetermineVSServicePack sets the given variable to one of the\r\n\n# following values or an empty string if unknown::\r\n\n#\r\n\n#   vc80, vc80sp1\r\n\n#   vc90, vc90sp1\r\n\n#   vc100, vc100sp1\r\n\n#   vc110, vc110sp1, vc110sp2, vc110sp3, vc110sp4\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# [INTERNAL]\r\n\n# Please do not call this function directly\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "############################################################\r\n\n# [INTERNAL]\r\n\n# Please do not call this function directly\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "############################################################\r\n\n# [INTERNAL]\r\n\n# Please do not call this function directly\r\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "############################################################\r\n\n# [INTERNAL]\r\n\n# Please do not call this function directly\r\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\r\n\n# A function to call to determine the Visual Studio service pack\r\n\n# in use.  See documentation above.\r\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Call helper function to determine VS version\r\n",
        "Line" : 162,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeExpandImportedTargets.cmake" : {
      "ObjectId" : "32ec1cac410635f3f5de37f1d8fee4ff59bc289d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeExpandImportedTargets\r\n\n# --------------------------\r\n\n#\r\n\n# Deprecated.  Do not use.\r\n\n#\r\n\n# This module was once needed to expand imported targets to the underlying\r\n\n# libraries they reference on disk for use with the :command:`try_compile`\r\n\n# and :command:`try_run` commands.  These commands now support imported\r\n\n# libraries in their ``LINK_LIBRARIES`` options (since CMake 2.8.11\r\n\n# for :command:`try_compile` and since CMake 3.2 for :command:`try_run`).\r\n\n#\r\n\n# This module does not support the policy :policy:`CMP0022` ``NEW``\r\n\n# behavior or use of the :prop_tgt:`INTERFACE_LINK_LIBRARIES` property\r\n\n# because :manual:`generator expressions <cmake-generator-expressions(7)>`\r\n\n# cannot be evaluated during configuration.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  CMAKE_EXPAND_IMPORTED_TARGETS(<var> LIBRARIES lib1 lib2...libN\r\n\n#                                [CONFIGURATION <config>])\r\n\n#\r\n\n# CMAKE_EXPAND_IMPORTED_TARGETS() takes a list of libraries and replaces\r\n\n# all imported targets contained in this list with their actual file\r\n\n# paths of the referenced libraries on disk, including the libraries\r\n\n# from their link interfaces.  If a CONFIGURATION is given, it uses the\r\n\n# respective configuration of the imported targets if it exists.  If no\r\n\n# CONFIGURATION is given, it uses the first configuration from\r\n\n# ${CMAKE_CONFIGURATION_TYPES} if set, otherwise ${CMAKE_BUILD_TYPE}.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     cmake_expand_imported_targets(expandedLibs\r\n\n#       LIBRARIES ${CMAKE_REQUIRED_LIBRARIES}\r\n\n#       CONFIGURATION \"${CMAKE_TRY_COMPILE_CONFIGURATION}\" )\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle imported library targets\r\n",
        "Line" : 60,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#            message(STATUS \"Detected imported target ${_CURRENT_LIB}\")\r\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Ok, so this is an imported target.\r\n\n# First we get the imported configurations.\r\n\n# Then we get the location of the actual library on disk of the first configuration.\r\n\n# then we'll get its link interface libraries property,\r\n\n# iterate through it and replace all imported targets we find there\r\n\n# with there actual location.\r\n",
        "Line" : 78,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# guard against infinite loop: abort after 100 iterations ( 100 is arbitrary chosen)\r\n",
        "Line" : 85,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "#                else ()\r\n\n#                   message(STATUS \"********* aborting loop, counter : ${_CCSR_LOOP_COUNTER}\")\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if one of the imported configurations equals ${CMAKE_TRY_COMPILE_CONFIGURATION},\r\n\n# use it, otherwise simply use the first one:\r\n",
        "Line" : 92,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "#            message(STATUS \"Appending lib ${_CURRENT_LIB} as ${_importedLocation}\")\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#                  message(STATUS \"Appending link interface lib ${_currentLinkInterfaceLib}\")\r\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# \"Normal\" libraries are just used as they are.\r\n",
        "Line" : 114,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "#            message(STATUS \"Appending lib directly: ${_CURRENT_LIB}\")\r\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Finally we iterate once more over all libraries. This loop only removes\r\n\n# all remaining imported target names (there shouldn't be any left anyway).\r\n",
        "Line" : 123,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "#         message(STATUS \"final: appending ${_CURRENT_LIB}\")\r\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#             message(STATUS \"final: skipping ${_CURRENT_LIB}\")\r\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#   message(STATUS \"setting -${_RESULT}- to -${_CCSR_NEW_REQ_LIBS}-\")\r\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeExportBuildSettings.cmake" : {
      "ObjectId" : "23ebb9f54a6ab4f0925a640bb80a17b9ba4b8824",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is purposely no longer documented.  It does nothing useful.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This macro used to store build settings of a project in a file to be\r\n\n# loaded by another project using CMAKE_IMPORT_BUILD_SETTINGS.  Now it\r\n\n# creates a file that refuses to load (with comment explaining why).\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeExtraGeneratorDetermineCompilerMacrosAndIncludeDirs.cmake" : {
      "ObjectId" : "49c9c8790923f946283d0b9e50f74f57dc99627d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is included by CMakeFindEclipseCDT4.cmake and CMakeFindCodeBlocks.cmake\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The Eclipse and the CodeBlocks generators need to know the standard include path\r\n\n# so that they can find the headers at runtime and parsing etc. works better\r\n\n# This is done here by actually running gcc with the options so it prints its\r\n\n# system include directories, which are parsed then and stored in the cache.\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First find the system include dirs:\r\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# split the output into lines and then remove leading and trailing spaces from each of them:\r\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# on OSX, gcc says things like this:  \"/System/Library/Frameworks (framework directory)\", strip the last part\r\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# strip spaces at the beginning and the end\r\n",
        "Line" : 44,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# now find the builtin macros:\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# A few example lines which the regexp below has to match properly:\r\n\n#  #define   MAX(a,b) ((a) > (b) ? (a) : (b))\r\n\n#  #define __fastcall __attribute__((__fastcall__))\r\n\n#  #define   FOO (23)\r\n\n#  #define __UINTMAX_TYPE__ long long unsigned int\r\n\n#  #define __UINTMAX_TYPE__ long long unsigned int\r\n\n#  #define __i386__  1\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(STATUS \"m1: -${CMAKE_MATCH_1}- m2: -${CMAKE_MATCH_2}- m3: -${CMAKE_MATCH_3}-\")\r\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Save the current LC_ALL, LC_MESSAGES, and LANG environment variables and set them\r\n\n# to \"C\" that way GCC's \"search starts here\" text is in English and we can grok it.\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Now check for C, works for gcc and Intel compiler at least\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# And now the same for C++\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Restore original LC_ALL, LC_MESSAGES, and LANG\r\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindBinUtils.cmake" : {
      "ObjectId" : "0fe389b34ee6d31a6fa31f030944ecb7609debd7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# search for additional tools required for C/C++ (and other languages ?)\r\n\n#\r\n\n# If the internal cmake variable _CMAKE_TOOLCHAIN_PREFIX is set, this is used\r\n\n# as prefix for the tools (e.g. arm-elf-gcc etc.)\r\n\n# If the cmake variable _CMAKE_TOOLCHAIN_LOCATION is set, the compiler is\r\n\n# searched only there. The other tools are at first searched there, then\r\n\n# also in the default locations.\r\n\n#\r\n\n# Sets the following variables:\r\n\n#   CMAKE_AR\r\n\n#   CMAKE_RANLIB\r\n\n#   CMAKE_LINKER\r\n\n#   CMAKE_STRIP\r\n\n#   CMAKE_INSTALL_NAME_TOOL\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# on UNIX, cygwin and mingw\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if it's the MS C/CXX compiler, search for link\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# in all other cases search for ar, ranlib, etc.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindCodeBlocks.cmake" : {
      "ObjectId" : "0d9c8632652c187667f7cc79d7bebfa332c151bf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is included in CMakeSystemSpecificInformation.cmake if\r\n\n# the CodeBlocks extra generator has been selected.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Determine builtin macros and include dirs:\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Try to find out how many CPUs we have and set the -j argument for make accordingly\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Only set -j if we are under UNIX and if the make-tool used actually has \"make\" in the name\r\n\n# (we may also get here in the future e.g. for ninja)\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This variable is used by the CodeBlocks generator and appended to the make invocation commands.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindDependencyMacro.cmake" : {
      "ObjectId" : "dbe3e9889545c80fbcecdcf0022aa99e72bf870d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeFindDependencyMacro\r\n\n# -------------------------\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     find_dependency(<dep> [<version> [EXACT]])\r\n\n#\r\n\n#\r\n\n# ``find_dependency()`` wraps a :command:`find_package` call for a package\r\n\n# dependency. It is designed to be used in a <package>Config.cmake file, and it\r\n\n# forwards the correct parameters for EXACT, QUIET and REQUIRED which were\r\n\n# passed to the original :command:`find_package` call.  It also sets an\r\n\n# informative diagnostic message if the dependency could not be found.\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindEclipseCDT4.cmake" : {
      "ObjectId" : "a9e01748360d760b3f6b179f432e816704d326ec",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is included in CMakeSystemSpecificInformation.cmake if\r\n\n# the Eclipse CDT4 extra generator has been selected.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This code is in a function so the variables used here have only local scope\r\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Set up a map with the names of the Eclipse releases:\r\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# use REALPATH to resolve symlinks (https://gitlab.kitware.com/cmake/cmake/issues/13036)\r\n",
        "Line" : 28,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Try to find out how many CPUs we have and set the -j argument for make accordingly\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Only set -j if we are under UNIX and if the make-tool used actually has \"make\" in the name\r\n\n# (we may also get here in the future e.g. for ninja)\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This variable is used by the Eclipse generator and appended to the make invocation commands.\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This variable is used by the Eclipse generator in out-of-source builds only.\r\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Determine builtin macros and include dirs:\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindFrameworks.cmake" : {
      "ObjectId" : "83d32e26c44a55d97d8f0aa9e41ee3162a115da4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeFindFrameworks\r\n\n# -------------------\r\n\n#\r\n\n# helper module to find OSX frameworks\r\n\n#\r\n\n# This module reads hints about search locations from variables::\r\n\n#\r\n\n#   CMAKE_FIND_FRAMEWORK_EXTRA_LOCATIONS - Extra directories\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindJavaCommon.cmake" : {
      "ObjectId" : "f17299edac502800fe23df89bf91220ba77d8599",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not include this module directly from code outside CMake!\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindKDevelop3.cmake" : {
      "ObjectId" : "5f5be22ee844e72dd14423280a2364b95e6b4bdc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is included in CMakeSystemSpecificInformation.cmake if\r\n\n# the KDevelop3 extra generator has been selected.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindKate.cmake" : {
      "ObjectId" : "bc8c011370629427d088a9800207afa6938ef821",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is included in CMakeSystemSpecificInformation.cmake if\r\n\n# the Eclipse CDT4 extra generator has been selected.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find out how many CPUs we have and set the -j argument for make accordingly\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only set -j if we are under UNIX and if the make-tool used actually has \"make\" in the name\r\n\n# (we may also get here in the future e.g. for ninja)\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This variable is used by the Eclipse generator and appended to the make invocation commands.\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindPackageMode.cmake" : {
      "ObjectId" : "d384f93a74c4ace652f2e2362933bab675d45254",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeFindPackageMode\r\n\n# --------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This file is executed by cmake when invoked with --find-package.  It\r\n\n# expects that the following variables are set using -D:\r\n\n#\r\n\n# ``NAME``\r\n\n#   name of the package\r\n\n# ``COMPILER_ID``\r\n\n#   the CMake compiler ID for which the result is,\r\n\n#   i.e. GNU/Intel/Clang/MSVC, etc.\r\n\n# ``LANGUAGE``\r\n\n#   language for which the result will be used,\r\n\n#   i.e. C/CXX/Fortan/ASM\r\n\n# ``MODE``\r\n\n#   ``EXIST``\r\n\n#     only check for existence of the given package\r\n\n#   ``COMPILE``\r\n\n#     print the flags needed for compiling an object file which uses\r\n\n#     the given package\r\n\n#   ``LINK``\r\n\n#     print the flags needed for linking when using the given package\r\n\n# ``QUIET``\r\n\n#   if TRUE, don't print anything\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# require the current version. If we don't do this, Platforms/CYGWIN.cmake complains because\r\n\n# it doesn't know whether it should set WIN32 or not:\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# disable the enable_language() command, otherwise --find-package breaks on Windows.\r\n\n# On Windows, enable_language(RC) is called in the platform files unconditionally.\r\n\n# But in --find-package mode, we don't want (and can't) enable any language.\r\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# short-cut some tests on Darwin, see Darwin-GNU.cmake:\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Also load the system specific file, which sets up e.g. the search paths.\r\n\n# This makes the FIND_XXX() calls work much better\r\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# try to guess whether we have a 64bit system, if it has not been set\r\n\n# from the outside\r\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# use the file utility to check whether itself is 64 bit:\r\n",
        "Line" : 81,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# guess Debian multiarch if it has not been set:\r\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Check the following variables:\r\n\n# FOO_INCLUDE_DIRS\r\n\n# Foo_INCLUDE_DIRS\r\n\n# FOO_INCLUDES\r\n\n# Foo_INCLUDES\r\n\n# FOO_INCLUDE_DIR\r\n\n# Foo_INCLUDE_DIR\r\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Check the following variables:\r\n\n# FOO_DEFINITIONS\r\n\n# Foo_DEFINITIONS\r\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Check the following variables:\r\n\n# FOO_LIBRARIES\r\n\n# Foo_LIBRARIES\r\n\n# FOO_LIBS\r\n\n# Foo_LIBS\r\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# do nothing\r\n",
        "Line" : 190,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindWMake.cmake" : {
      "ObjectId" : "89f039ed4b960ad67e015bff30a38d2feba125f3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFindXCode.cmake" : {
      "ObjectId" : "f0dccefca2d900bcd811a448088405fbb896cb5b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Empty placeholder for input dependencies in existing\r\n\n# build trees produced by older versions of CMake.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeForceCompiler.cmake" : {
      "ObjectId" : "b6445883959268e3370492e94e6575c0df4c3fa6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeForceCompiler\r\n\n# ------------------\r\n\n#\r\n\n# Deprecated.  Do not use.\r\n\n#\r\n\n# The macros provided by this module were once intended for use by\r\n\n# cross-compiling toolchain files when CMake was not able to automatically\r\n\n# detect the compiler identification.  Since the introduction of this module,\r\n\n# CMake's compiler identification capabilities have improved and can now be\r\n\n# taught to recognize any compiler.  Furthermore, the suite of information\r\n\n# CMake detects from a compiler is now too extensive to be provided by\r\n\n# toolchain files using these macros.\r\n\n#\r\n\n# One common use case for this module was to skip CMake's checks for a\r\n\n# working compiler when using a cross-compiler that cannot link binaries\r\n\n# without special flags or custom linker scripts.  This case is now supported\r\n\n# by setting the :variable:`CMAKE_TRY_COMPILE_TARGET_TYPE` variable in the\r\n\n# toolchain file instead.\r\n\n#\r\n\n# -------------------------------------------------------------------------\r\n\n#\r\n\n# Macro CMAKE_FORCE_C_COMPILER has the following signature:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    CMAKE_FORCE_C_COMPILER(<compiler> <compiler-id>)\r\n\n#\r\n\n# It sets CMAKE_C_COMPILER to the given compiler and the cmake internal\r\n\n# variable CMAKE_C_COMPILER_ID to the given compiler-id.  It also\r\n\n# bypasses the check for working compiler and basic compiler information\r\n\n# tests.\r\n\n#\r\n\n# Macro CMAKE_FORCE_CXX_COMPILER has the following signature:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    CMAKE_FORCE_CXX_COMPILER(<compiler> <compiler-id>)\r\n\n#\r\n\n# It sets CMAKE_CXX_COMPILER to the given compiler and the cmake\r\n\n# internal variable CMAKE_CXX_COMPILER_ID to the given compiler-id.  It\r\n\n# also bypasses the check for working compiler and basic compiler\r\n\n# information tests.\r\n\n#\r\n\n# Macro CMAKE_FORCE_Fortran_COMPILER has the following signature:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    CMAKE_FORCE_Fortran_COMPILER(<compiler> <compiler-id>)\r\n\n#\r\n\n# It sets CMAKE_Fortran_COMPILER to the given compiler and the cmake\r\n\n# internal variable CMAKE_Fortran_COMPILER_ID to the given compiler-id.\r\n\n# It also bypasses the check for working compiler and basic compiler\r\n\n# information tests.\r\n\n#\r\n\n# So a simple toolchain file could look like this:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    include (CMakeForceCompiler)\r\n\n#    set(CMAKE_SYSTEM_NAME Generic)\r\n\n#    CMAKE_FORCE_C_COMPILER   (chc12 MetrowerksHicross)\r\n\n#    CMAKE_FORCE_CXX_COMPILER (chc12 MetrowerksHicross)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set old compiler id variables.\r\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Set old compiler id variables.\r\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Set old compiler id variables.\r\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeFortranInformation.cmake" : {
      "ObjectId" : "3a1bb5a64996f7e37de142d14372f770ef6c703d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file sets the basic flags for the Fortran language in CMake.\r\n\n# It also loads the available platform file for the system-compiler\r\n\n# if it exists.\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load compiler-specific information.\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# since the gnu compiler has several names force g++\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# load any compiler-wrapper specific information\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We specify the compiler information in the system file for some\r\n\n# platforms, but this language may not have been enabled when the file\r\n\n# was first included.  Include it again to get the language info.\r\n\n# Remove this when all compiler info is removed from system files.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This should be included before the _INIT variables are\r\n\n# used to initialize the cache.  Since the rule variables\r\n\n# have if blocks on them, users can still define them here.\r\n\n# But, it should still be after the platform file so changes can\r\n\n# be made to those values.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Fortran needs cmake to do a requires step during its build process to\r\n\n# catch any modules\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Create a set of shared library variable specific to Fortran\r\n\n# For 90% of the systems, these are the same flags as the C versions\r\n\n# so if these are not set just copy the flags from the c version\r\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# for most systems a module is the same as a shared library\r\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\r\n\n# copy the values from the LIBRARY variables\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# repeat for modules\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# now define the following rule variables\r\n\n# CMAKE_Fortran_CREATE_SHARED_LIBRARY\r\n\n# CMAKE_Fortran_CREATE_SHARED_MODULE\r\n\n# CMAKE_Fortran_COMPILE_OBJECT\r\n\n# CMAKE_Fortran_LINK_EXECUTABLE\r\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# create a Fortran shared library\r\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# create a Fortran shared module just copy the shared library rule\r\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Create a static archive incrementally for large object file counts.\r\n\n# If CMAKE_Fortran_CREATE_STATIC_LIBRARY is set it will override these.\r\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# compile a Fortran file into an object file\r\n\n# (put -o after -c to workaround bug in at least one mpif77 wrapper)\r\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# link a fortran program\r\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set this variable so we can avoid loading this more than once.\r\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeGenericSystem.cmake" : {
      "ObjectId" : "569915c90059d43cb581ddbd2a30c34580fb08b0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -pic\r\n",
        "Line" : 5,
        "CharPositionInLine" : 48
      },
      "2" : {
        "Text" : "# -shared\r\n",
        "Line" : 6,
        "CharPositionInLine" : 57
      },
      "3" : {
        "Text" : "# +s, flag for exe link to use shared lib\r\n\n# -rpath\r\n\n# : or empty\r\n",
        "Line" : 7,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : "# -I\r\n\n# , or empty\r\n",
        "Line" : 10,
        "CharPositionInLine" : 37
      },
      "5" : {
        "Text" : "# for the Digital Mars D compiler the link paths have to be terminated with a \"/\"\r\n",
        "Line" : 13,
        "CharPositionInLine" : 39
      },
      "6" : {
        "Text" : "# lib\r\n\n# .so\r\n",
        "Line" : 19,
        "CharPositionInLine" : 48
      },
      "7" : {
        "Text" : "# .exe\r\n",
        "Line" : 21,
        "CharPositionInLine" : 41
      },
      "8" : {
        "Text" : "# basically all general purpose OSs support shared libs\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# GetDefaultWindowsPrefixBase\r\n\n#\r\n\n# Compute the base directory for CMAKE_INSTALL_PREFIX based on:\r\n\n#  - is this 32-bit or 64-bit Windows\r\n\n#  - is this 32-bit or 64-bit CMake running\r\n\n#  - what architecture targets will be built\r\n\n#\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Try to guess what architecture targets will end up being built as,\r\n\n# even if CMAKE_SIZEOF_VOID_P is not computed yet... We need to know\r\n\n# the architecture of the targets being built to choose the right\r\n\n# default value for CMAKE_INSTALL_PREFIX.\r\n\n#\r\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# default env in a 64-bit app on Win64:\r\n\n# ProgramFiles=C:\\Program Files\r\n\n# ProgramFiles(x86)=C:\\Program Files (x86)\r\n\n# ProgramW6432=C:\\Program Files\r\n\n#\r\n\n# default env in a 32-bit app on Win64:\r\n\n# ProgramFiles=C:\\Program Files (x86)\r\n\n# ProgramFiles(x86)=C:\\Program Files (x86)\r\n\n# ProgramW6432=C:\\Program Files\r\n\n#\r\n\n# default env in a 32-bit app on Win32:\r\n\n# ProgramFiles=C:\\Program Files\r\n\n# ProgramFiles(x86) NOT DEFINED\r\n\n# ProgramW6432 NOT DEFINED\r\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# By default, use the ProgramFiles env var as the base value of\r\n\n# CMAKE_INSTALL_PREFIX:\r\n\n#\r\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# running on 32-bit Windows\r\n\n# must be a 32-bit CMake, too...\r\n\n#message(\"guess: this is a 32-bit CMake running on 32-bit Windows\")\r\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# running on 64-bit Windows\r\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# 64-bit CMake\r\n\n#message(\"guess: this is a 64-bit CMake running on 64-bit Windows\")\r\n",
        "Line" : 118,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# building 32-bit targets\r\n",
        "Line" : 121,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# 32-bit CMake\r\n\n#message(\"guess: this is a 32-bit CMake running on 64-bit Windows\")\r\n",
        "Line" : 125,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# building 64-bit targets\r\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "#if(\"${arch_hint}\" STREQUAL \"x64\")\r\n\n#  message(\"guess: you are building a 64-bit app\")\r\n\n#else()\r\n\n#  message(\"guess: you are building a 32-bit app\")\r\n\n#endif()\r\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Set a variable to indicate whether the value of CMAKE_INSTALL_PREFIX\r\n\n# was initialized by the block below.  This is useful for user\r\n\n# projects to change the default prefix while still allowing the\r\n\n# command line to override it.\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Choose a default install prefix for this platform.\r\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Set a variable which will be used as component name in install() commands\r\n\n# where no COMPONENT has been given:\r\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeGraphVizOptions.cmake" : {
      "ObjectId" : "0d9fba3e27e8b72c66d8e7b06d5c1587044e8b9b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeGraphVizOptions\r\n\n# --------------------\r\n\n#\r\n\n# The builtin graphviz support of CMake.\r\n\n#\r\n\n# Variables specific to the graphviz support\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# CMake\r\n\n# can generate graphviz files, showing the dependencies between the\r\n\n# targets in a project and also external libraries which are linked\r\n\n# against.  When CMake is run with the --graphviz=foo.dot option, it will\r\n\n# produce:\r\n\n#\r\n\n# * a foo.dot file showing all dependencies in the project\r\n\n# * a foo.dot.<target> file for each target, file showing on which other targets the respective target depends\r\n\n# * a foo.dot.<target>.dependers file, showing which other targets depend on the respective target\r\n\n#\r\n\n# This can result in huge graphs.  Using the file\r\n\n# CMakeGraphVizOptions.cmake the look and content of the generated\r\n\n# graphs can be influenced.  This file is searched first in\r\n\n# ${CMAKE_BINARY_DIR} and then in ${CMAKE_SOURCE_DIR}.  If found, it is\r\n\n# read and the variables set in it are used to adjust options for the\r\n\n# generated graphviz files.\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_GRAPH_TYPE\r\n\n#\r\n\n#  The graph type.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : \"digraph\"\r\n\n#\r\n\n#  Valid graph types are:\r\n\n#\r\n\n#  * \"graph\" : Nodes are joined with lines\r\n\n#  * \"digraph\" : Nodes are joined with arrows showing direction\r\n\n#  * \"strict graph\" : Like \"graph\" but max one line between each node\r\n\n#  * \"strict digraph\" : Like \"graph\" but max one line between each node in each direction\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_GRAPH_NAME\r\n\n#\r\n\n#  The graph name.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : \"GG\"\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_GRAPH_HEADER\r\n\n#\r\n\n#  The header written at the top of the graphviz file.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : \"node [n  fontsize = \"12\"];\"\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_NODE_PREFIX\r\n\n#\r\n\n#  The prefix for each node in the graphviz file.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : \"node\"\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_EXECUTABLES\r\n\n#\r\n\n#  Set this to FALSE to exclude executables from the generated graphs.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : TRUE\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_STATIC_LIBS\r\n\n#\r\n\n#  Set this to FALSE to exclude static libraries from the generated graphs.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : TRUE\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_SHARED_LIBS\r\n\n#\r\n\n#  Set this to FALSE to exclude shared libraries from the generated graphs.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : TRUE\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_MODULE_LIBS\r\n\n#\r\n\n#  Set this to FALSE to exclude module libraries from the generated graphs.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : TRUE\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_EXTERNAL_LIBS\r\n\n#\r\n\n#  Set this to FALSE to exclude external libraries from the generated graphs.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : TRUE\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_IGNORE_TARGETS\r\n\n#\r\n\n#  A list of regular expressions for ignoring targets.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : empty\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_GENERATE_PER_TARGET\r\n\n#\r\n\n#  Set this to FALSE to exclude per target graphs ``foo.dot.<target>``.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : TRUE\r\n\n#\r\n\n# .. variable:: GRAPHVIZ_GENERATE_DEPENDERS\r\n\n#\r\n\n#  Set this to FALSE to exclude depender graphs ``foo.dot.<target>.dependers``.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : TRUE\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeIOSInstallCombined.cmake" : {
      "ObjectId" : "626e61ab3fd5b3a4ef829aacc93b55fafe2f1447",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Function to print messages of this module\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get build settings for the current target/config/SDK by running\r\n\n# `xcodebuild -sdk ... -showBuildSettings` and parsing it's output\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VALID_ARCHS may be unset by user for given SDK\r\n\n# (e.g. for build without simulator).\r\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Get architectures of given SDK (iphonesimulator/iphoneos)\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# remove empty elements\r\n",
        "Line" : 69,
        "CharPositionInLine" : 35
      },
      "6" : {
        "Text" : "# Final target can contain more architectures that specified by SDK. This\r\n\n# function will run 'lipo -info' and parse output. Result will be returned\r\n\n# as a CMake list.\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Run build command for the given SDK\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Remove given architecture from file. This step needed only in rare cases\r\n\n# when target was built in \"unusual\" way. Emit warning message.\r\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Check that 'lib' contains only 'archs' architectures (remove others).\r\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Create combined binary for the given target.\r\n\n#\r\n\n# Preconditions:\r\n\n#  * Target already installed at ${destination}\r\n\n#    for the ${PLATFORM_NAME} platform\r\n\n#\r\n\n# This function will:\r\n\n#  * Run build for the lacking platform, i.e. opposite to the ${PLATFORM_NAME}\r\n\n#  * Fuse both libraries by running lipo\r\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Do not merge OUTPUT_VARIABLE and ERROR_VARIABLE since latter may contain\r\n\n# some diagnostic information even for the successful run.\r\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Get SDKs\r\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Get architectures of the target\r\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Return if there are no valid architectures for the SDK.\r\n\n# (note that library already installed)\r\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Trigger build of corresponding target\r\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Get location of the library in build directory\r\n",
        "Line" : 281,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeImportBuildSettings.cmake" : {
      "ObjectId" : "eef9a40547b323b97b904f6c6804d96534d17193",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is purposely no longer documented.  It does nothing useful.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This macro used to load build settings from another project that\r\n\n# stored settings using the CMAKE_EXPORT_BUILD_SETTINGS macro.\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeJOMFindMake.cmake" : {
      "ObjectId" : "b5ecfb778fa7fd559fba8b3e8473f1a09803c1dd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeJavaInformation.cmake" : {
      "ObjectId" : "ada9ffaf752de42be6bb818b0554b593ba396e41",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This should be included before the _INIT variables are\r\n\n# used to initialize the cache.  Since the rule variables\r\n\n# have if blocks on them, users can still define them here.\r\n\n# But, it should still be after the platform file so changes can\r\n\n# be made to those values.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Save the full path of the file so try_compile can use it.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# this is a place holder if java needed flags for javac they would go here.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#  if(WIN32)\r\n\n#    set(class_files_mask \"*.class\")\r\n\n#  else()\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  endif()\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# \"${class_files_mask}\" should really be \"<OBJECTS>\" but compling a *.java\r\n\n# file can create more than one *.class file...\r\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# compile a Java file into an object file\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# set java include flag option and the separator for multiple include paths\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeLanguageInformation.cmake" : {
      "ObjectId" : "4bcec37a94857833c359034d185fc662437f38e1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file contains common code blocks used by all the language information\r\n\n# files\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# load any compiler-wrapper specific information\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# No platform - wrapper - lang information so maybe there's just wrapper - lang information\r\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeMSYSFindMake.cmake" : {
      "ObjectId" : "d8a0f4eaf7f7896cb5ac402dcedc1af2bc50d40d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeMinGWFindMake.cmake" : {
      "ObjectId" : "bc2de6eebea668dcefdb4664628bd692c42430e1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeNMakeFindMake.cmake" : {
      "ObjectId" : "e97bb5c10b31587efa26b3a2b444855ff7dc8a7c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeNinjaFindMake.cmake" : {
      "ObjectId" : "a39d0be016840d33a4985c15532e9a3147443e85",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakePackageConfigHelpers.cmake" : {
      "ObjectId" : "77f9d9b81aa317ac222598d4231b6f244c46c8d4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakePackageConfigHelpers\r\n\n# -------------------------\r\n\n#\r\n\n# Helpers functions for creating config files that can be included by other\r\n\n# projects to find and use a package.\r\n\n#\r\n\n# Adds the :command:`configure_package_config_file()` and\r\n\n# :command:`write_basic_package_version_file()` commands.\r\n\n#\r\n\n# Generating a Package Configuration File\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# .. command:: configure_package_config_file\r\n\n#\r\n\n#  Create a config file for a project::\r\n\n#\r\n\n#    configure_package_config_file(<input> <output>\r\n\n#      INSTALL_DESTINATION <path>\r\n\n#      [PATH_VARS <var1> <var2> ... <varN>]\r\n\n#      [NO_SET_AND_CHECK_MACRO]\r\n\n#      [NO_CHECK_REQUIRED_COMPONENTS_MACRO]\r\n\n#      [INSTALL_PREFIX <path>]\r\n\n#      )\r\n\n#\r\n\n# ``configure_package_config_file()`` should be used instead of the plain\r\n\n# :command:`configure_file()` command when creating the ``<Name>Config.cmake``\r\n\n# or ``<Name>-config.cmake`` file for installing a project or library.  It helps\r\n\n# making the resulting package relocatable by avoiding hardcoded paths in the\r\n\n# installed ``Config.cmake`` file.\r\n\n#\r\n\n# In a ``FooConfig.cmake`` file there may be code like this to make the install\r\n\n# destinations know to the using project:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    set(FOO_INCLUDE_DIR   \"@CMAKE_INSTALL_FULL_INCLUDEDIR@\" )\r\n\n#    set(FOO_DATA_DIR   \"@CMAKE_INSTALL_PREFIX@/@RELATIVE_DATA_INSTALL_DIR@\" )\r\n\n#    set(FOO_ICONS_DIR   \"@CMAKE_INSTALL_PREFIX@/share/icons\" )\r\n\n#    #...logic to determine installedPrefix from the own location...\r\n\n#    set(FOO_CONFIG_DIR  \"${installedPrefix}/@CONFIG_INSTALL_DIR@\" )\r\n\n#\r\n\n# All 4 options shown above are not sufficient, since the first 3 hardcode the\r\n\n# absolute directory locations, and the 4th case works only if the logic to\r\n\n# determine the ``installedPrefix`` is correct, and if ``CONFIG_INSTALL_DIR``\r\n\n# contains a relative path, which in general cannot be guaranteed.  This has the\r\n\n# effect that the resulting ``FooConfig.cmake`` file would work poorly under\r\n\n# Windows and OSX, where users are used to choose the install location of a\r\n\n# binary package at install time, independent from how\r\n\n# :variable:`CMAKE_INSTALL_PREFIX` was set at build/cmake time.\r\n\n#\r\n\n# Using ``configure_package_config_file`` helps.  If used correctly, it makes\r\n\n# the resulting ``FooConfig.cmake`` file relocatable.  Usage:\r\n\n#\r\n\n# 1. write a ``FooConfig.cmake.in`` file as you are used to\r\n\n# 2. insert a line containing only the string ``@PACKAGE_INIT@``\r\n\n# 3. instead of ``set(FOO_DIR \"@SOME_INSTALL_DIR@\")``, use\r\n\n#    ``set(FOO_DIR \"@PACKAGE_SOME_INSTALL_DIR@\")`` (this must be after the\r\n\n#    ``@PACKAGE_INIT@`` line)\r\n\n# 4. instead of using the normal :command:`configure_file()`, use\r\n\n#    ``configure_package_config_file()``\r\n\n#\r\n\n#\r\n\n#\r\n\n# The ``<input>`` and ``<output>`` arguments are the input and output file, the\r\n\n# same way as in :command:`configure_file()`.\r\n\n#\r\n\n# The ``<path>`` given to ``INSTALL_DESTINATION`` must be the destination where\r\n\n# the ``FooConfig.cmake`` file will be installed to.  This path can either be\r\n\n# absolute, or relative to the ``INSTALL_PREFIX`` path.\r\n\n#\r\n\n# The variables ``<var1>`` to ``<varN>`` given as ``PATH_VARS`` are the\r\n\n# variables which contain install destinations.  For each of them the macro will\r\n\n# create a helper variable ``PACKAGE_<var...>``.  These helper variables must be\r\n\n# used in the ``FooConfig.cmake.in`` file for setting the installed location.\r\n\n# They are calculated by ``configure_package_config_file`` so that they are\r\n\n# always relative to the installed location of the package.  This works both for\r\n\n# relative and also for absolute locations.  For absolute locations it works\r\n\n# only if the absolute location is a subdirectory of ``INSTALL_PREFIX``.\r\n\n#\r\n\n# If the ``INSTALL_PREFIX`` argument is passed, this is used as base path to\r\n\n# calculate all the relative paths.  The ``<path>`` argument must be an absolute\r\n\n# path.  If this argument is not passed, the :variable:`CMAKE_INSTALL_PREFIX`\r\n\n# variable will be used instead.  The default value is good when generating a\r\n\n# FooConfig.cmake file to use your package from the install tree.  When\r\n\n# generating a FooConfig.cmake file to use your package from the build tree this\r\n\n# option should be used.\r\n\n#\r\n\n# By default ``configure_package_config_file`` also generates two helper macros,\r\n\n# ``set_and_check()`` and ``check_required_components()`` into the\r\n\n# ``FooConfig.cmake`` file.\r\n\n#\r\n\n# ``set_and_check()`` should be used instead of the normal ``set()`` command for\r\n\n# setting directories and file locations.  Additionally to setting the variable\r\n\n# it also checks that the referenced file or directory actually exists and fails\r\n\n# with a ``FATAL_ERROR`` otherwise.  This makes sure that the created\r\n\n# ``FooConfig.cmake`` file does not contain wrong references.\r\n\n# When using the ``NO_SET_AND_CHECK_MACRO``, this macro is not generated\r\n\n# into the ``FooConfig.cmake`` file.\r\n\n#\r\n\n# ``check_required_components(<package_name>)`` should be called at the end of\r\n\n# the ``FooConfig.cmake`` file if the package supports components.  This macro\r\n\n# checks whether all requested, non-optional components have been found, and if\r\n\n# this is not the case, sets the ``Foo_FOUND`` variable to ``FALSE``, so that\r\n\n# the package is considered to be not found.  It does that by testing the\r\n\n# ``Foo_<Component>_FOUND`` variables for all requested required components.\r\n\n# When using the ``NO_CHECK_REQUIRED_COMPONENTS_MACRO`` option, this macro is\r\n\n# not generated into the ``FooConfig.cmake`` file.\r\n\n#\r\n\n# For an example see below the documentation for\r\n\n# :command:`write_basic_package_version_file()`.\r\n\n#\r\n\n# Generating a Package Version File\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# .. command:: write_basic_package_version_file\r\n\n#\r\n\n#  Create a version file for a project::\r\n\n#\r\n\n#    write_basic_package_version_file(<filename>\r\n\n#      [VERSION <major.minor.patch>]\r\n\n#      COMPATIBILITY <AnyNewerVersion|SameMajorVersion|ExactVersion> )\r\n\n#\r\n\n#\r\n\n# Writes a file for use as ``<package>ConfigVersion.cmake`` file to\r\n\n# ``<filename>``.  See the documentation of :command:`find_package()` for\r\n\n# details on this.\r\n\n#\r\n\n# ``<filename>`` is the output filename, it should be in the build tree.\r\n\n# ``<major.minor.patch>`` is the version number of the project to be installed.\r\n\n#\r\n\n# If no ``VERSION`` is given, the :variable:`PROJECT_VERSION` variable is used.\r\n\n# If this hasn't been set, it errors out.\r\n\n#\r\n\n# The ``COMPATIBILITY`` mode ``AnyNewerVersion`` means that the installed\r\n\n# package version will be considered compatible if it is newer or exactly the\r\n\n# same as the requested version.  This mode should be used for packages which\r\n\n# are fully backward compatible, also across major versions.\r\n\n# If ``SameMajorVersion`` is used instead, then the behaviour differs from\r\n\n# ``AnyNewerVersion`` in that the major version number must be the same as\r\n\n# requested, e.g.  version 2.0 will not be considered compatible if 1.0 is\r\n\n# requested.  This mode should be used for packages which guarantee backward\r\n\n# compatibility within the same major version.\r\n\n# If ``ExactVersion`` is used, then the package is only considered compatible if\r\n\n# the requested version matches exactly its own version number (not considering\r\n\n# the tweak version).  For example, version 1.2.3 of a package is only\r\n\n# considered compatible to requested version 1.2.3.  This mode is for packages\r\n\n# without compatibility guarantees.\r\n\n# If your project has more elaborated version matching rules, you will need to\r\n\n# write your own custom ``ConfigVersion.cmake`` file instead of using this\r\n\n# macro.\r\n\n#\r\n\n# Internally, this macro executes :command:`configure_file()` to create the\r\n\n# resulting version file.  Depending on the ``COMPATIBLITY``, either the file\r\n\n# ``BasicConfigVersion-SameMajorVersion.cmake.in`` or\r\n\n# ``BasicConfigVersion-AnyNewerVersion.cmake.in`` is used.  Please note that\r\n\n# these two files are internal to CMake and you should not call\r\n\n# :command:`configure_file()` on them yourself, but they can be used as starting\r\n\n# point to create more sophisticted custom ``ConfigVersion.cmake`` files.\r\n\n#\r\n\n# Example Generating Package Files\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# Example using both :command:`configure_package_config_file` and\r\n\n# ``write_basic_package_version_file()``:\r\n\n#\r\n\n# ``CMakeLists.txt``:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    set(INCLUDE_INSTALL_DIR include/ ... CACHE )\r\n\n#    set(LIB_INSTALL_DIR lib/ ... CACHE )\r\n\n#    set(SYSCONFIG_INSTALL_DIR etc/foo/ ... CACHE )\r\n\n#    #...\r\n\n#    include(CMakePackageConfigHelpers)\r\n\n#    configure_package_config_file(FooConfig.cmake.in\r\n\n#      ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\r\n\n#      INSTALL_DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake\r\n\n#      PATH_VARS INCLUDE_INSTALL_DIR SYSCONFIG_INSTALL_DIR)\r\n\n#    write_basic_package_version_file(\r\n\n#      ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\r\n\n#      VERSION 1.2.3\r\n\n#      COMPATIBILITY SameMajorVersion )\r\n\n#    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/FooConfig.cmake\r\n\n#                  ${CMAKE_CURRENT_BINARY_DIR}/FooConfigVersion.cmake\r\n\n#            DESTINATION ${LIB_INSTALL_DIR}/Foo/cmake )\r\n\n#\r\n\n# ``FooConfig.cmake.in``:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    set(FOO_VERSION x.y.z)\r\n\n#    ...\r\n\n#    @PACKAGE_INIT@\r\n\n#    ...\r\n\n#    set_and_check(FOO_INCLUDE_DIR \"@PACKAGE_INCLUDE_INSTALL_DIR@\")\r\n\n#    set_and_check(FOO_SYSCONFIG_DIR \"@PACKAGE_SYSCONFIG_INSTALL_DIR@\")\r\n\n#\r\n\n#    check_required_components(Foo)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Handle \"/usr move\" symlinks created by some Linux distros.\r\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeParseArguments.cmake" : {
      "ObjectId" : "87e1d0ba721d9cd151ac2b686567136b5f7008d5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeParseArguments\r\n\n# -------------------\r\n\n#\r\n\n# This module once implemented the :command:`cmake_parse_arguments` command\r\n\n# that is now implemented natively by CMake.  It is now an empty placeholder\r\n\n# for compatibility with projects that include it to get the command from\r\n\n# CMake 3.4 and lower.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeParseImplicitLinkInfo.cmake" : {
      "ObjectId" : "62e05f4a27c759df0b0e1171d5abbef103d81650",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Function parse implicit linker options.\r\n\n# This is used internally by CMake and should not be included by user\r\n\n# code.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parse implicit linker arguments.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Construct a regex to match linker lines.  It must match both the\r\n\n# whole line and just the command (argv[0]).\r\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Xcode unconditionally adds a path under the project build tree and\r\n\n# on older versions it is not reported with proper quotes.  Remove it.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Unix search path.\r\n",
        "Line" : 58,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# MSVC search path.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# ld argument \"-lto_library <path>\"\r\n",
        "Line" : 74,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Unix library.\r\n",
        "Line" : 78,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Unix library full path.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Object file full path.\r\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Sun search path ([^0-9] avoids conflict with Mac -Y<num>).\r\n",
        "Line" : 92,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# HP named library.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Link editor option.\r\n",
        "Line" : 102,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# HP search path.\r\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Look for library search paths reported by linker.\r\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Cleanup list of libraries and flags.\r\n\n# We remove items that are not language-specific.\r\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Cleanup list of library and framework directories.\r\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Log results.\r\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Return results.\r\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 20
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakePrintHelpers.cmake" : {
      "ObjectId" : "fd0d2b921a4c6bd0d41e92933275190163033f3a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakePrintHelpers\r\n\n# -----------------\r\n\n#\r\n\n# Convenience macros for printing properties and variables, useful e.g. for debugging.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  CMAKE_PRINT_PROPERTIES([TARGETS target1 ..  targetN]\r\n\n#                         [SOURCES source1 .. sourceN]\r\n\n#                         [DIRECTORIES dir1 .. dirN]\r\n\n#                         [TESTS test1 .. testN]\r\n\n#                         [CACHE_ENTRIES entry1 .. entryN]\r\n\n#                         PROPERTIES prop1 .. propN )\r\n\n#\r\n\n# This macro prints the values of the properties of the given targets,\r\n\n# source files, directories, tests or cache entries.  Exactly one of the\r\n\n# scope keywords must be used.  Example::\r\n\n#\r\n\n#    cmake_print_properties(TARGETS foo bar PROPERTIES\r\n\n#                           LOCATION INTERFACE_INCLUDE_DIRS)\r\n\n#\r\n\n# This will print the LOCATION and INTERFACE_INCLUDE_DIRS properties for\r\n\n# both targets foo and bar.\r\n\n#\r\n\n#\r\n\n#\r\n\n# CMAKE_PRINT_VARIABLES(var1 var2 ..  varN)\r\n\n#\r\n\n# This macro will print the name of each variable followed by its value.\r\n\n# Example::\r\n\n#\r\n\n#   cmake_print_variables(CMAKE_C_COMPILER CMAKE_MAJOR_VERSION DOES_NOT_EXIST)\r\n\n#\r\n\n# Gives::\r\n\n#\r\n\n#   -- CMAKE_C_COMPILER=\"/usr/bin/gcc\" ; CMAKE_MAJOR_VERSION=\"2\" ; DOES_NOT_EXIST=\"\"\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakePrintSystemInformation.cmake" : {
      "ObjectId" : "6b923732a87a5bd906523c0623ab1e70560c69ac",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakePrintSystemInformation\r\n\n# ---------------------------\r\n\n#\r\n\n# print system information\r\n\n#\r\n\n# This file can be used for diagnostic purposes just include it in a\r\n\n# project to see various internal CMake variables.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakePushCheckState.cmake" : {
      "ObjectId" : "49421068fdec6aef733ea0a0ef9d6742383c2b5a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakePushCheckState\r\n\n# -------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module defines three macros: CMAKE_PUSH_CHECK_STATE()\r\n\n# CMAKE_POP_CHECK_STATE() and CMAKE_RESET_CHECK_STATE() These macros can\r\n\n# be used to save, restore and reset (i.e., clear contents) the state of\r\n\n# the variables CMAKE_REQUIRED_FLAGS, CMAKE_REQUIRED_DEFINITIONS,\r\n\n# CMAKE_REQUIRED_LIBRARIES, CMAKE_REQUIRED_INCLUDES and CMAKE_EXTRA_INCLUDE_FILES\r\n\n# used by the various Check-files coming with CMake, like e.g.\r\n\n# check_function_exists() etc.  The variable contents are pushed on a\r\n\n# stack, pushing multiple times is supported.  This is useful e.g.  when\r\n\n# executing such tests in a Find-module, where they have to be set, but\r\n\n# after the Find-module has been executed they should have the same\r\n\n# value as they had before.\r\n\n#\r\n\n# CMAKE_PUSH_CHECK_STATE() macro receives optional argument RESET.\r\n\n# Whether it's specified, CMAKE_PUSH_CHECK_STATE() will set all\r\n\n# CMAKE_REQUIRED_* variables to empty values, same as\r\n\n# CMAKE_RESET_CHECK_STATE() call will do.\r\n\n#\r\n\n# Usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    cmake_push_check_state(RESET)\r\n\n#    set(CMAKE_REQUIRED_DEFINITIONS -DSOME_MORE_DEF)\r\n\n#    check_function_exists(...)\r\n\n#    cmake_reset_check_state()\r\n\n#    set(CMAKE_REQUIRED_DEFINITIONS -DANOTHER_DEF)\r\n\n#    check_function_exists(...)\r\n\n#    cmake_pop_check_state()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't pop more than we pushed\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeRCInformation.cmake" : {
      "ObjectId" : "f50b3c0c703feb2c087c53f6dcc3a0790131271e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file sets the basic flags for the Windows Resource Compiler.\r\n\n# It also loads the available platform file for the system-compiler\r\n\n# if it exists.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure we don't use CMAKE_BASE_NAME from somewhere else\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These are the only types of flags that should be passed to the rc\r\n\n# command, if COMPILE_FLAGS is used on a target this will be used\r\n\n# to filter out any other flags\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# now define the following rule variables\r\n\n# CMAKE_RC_COMPILE_OBJECT\r\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compile a Resource file into an object file\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set this variable so we can avoid loading this more than once.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeSwiftInformation.cmake" : {
      "ObjectId" : "46c8ee1fd6aced77f9fa6b847e85f0f727f7015c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Load compiler-specific information.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# load the system- and compiler specific files\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# load a hardware specific file, mostly useful for embedded compilers\r\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# for most systems a module is the same as a shared library\r\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\r\n\n# copy the values from the LIBRARY variables\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeSystemSpecificInformation.cmake" : {
      "ObjectId" : "a5bdcda12d566d0bbb02db4ee13d5e1ad089b8a2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is included by cmGlobalGenerator::EnableLanguage.\r\n\n# It is included after the compiler has been determined, so\r\n\n# we know things like the compiler name and if the compiler is gnu.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# before cmake 2.6 these variables were set in cmMakefile.cxx. This is still\r\n\n# done to keep scripts and custom language and compiler modules working.\r\n\n# But they are reset here and set again in the platform files for the target\r\n\n# platform, so they can be used for testing the target platform instead\r\n\n# of testing the host platform.\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# include Generic system information\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# 2. now include SystemName.cmake file to set the system specific information\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# optionally include a file which can do extra-generator specific things, e.g.\r\n\n# CMakeFindEclipseCDT4.cmake asks gcc for the system include dirs for the Eclipse CDT4 generator\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for most systems a module is the same as a shared library\r\n\n# so unless the variable CMAKE_MODULE_EXISTS is set just\r\n\n# copy the values from the LIBRARY variables\r\n\n# this has to be done after the system information has been loaded\r\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeSystemSpecificInitialize.cmake" : {
      "ObjectId" : "39d1cc8d05be61e32931dd9b0dfa4194bf1e9aed",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is included by cmGlobalGenerator::EnableLanguage.\r\n\n# It is included before the compiler has been determined.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestASM-ATTCompiler.cmake" : {
      "ObjectId" : "319379dee8879c966be44cc734e4165461b65dcf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that the selected ASM-ATT \"compiler\" works.\r\n\n# For assembler this can only check whether the compiler has been found,\r\n\n# because otherwise there would have to be a separate assembler source file\r\n\n# for each assembler on every architecture.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestASMCompiler.cmake" : {
      "ObjectId" : "501018c0f0a096a3fde3413434d4b879fedfbc85",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that the selected ASM compiler works.\r\n\n# For assembler this can only check whether the compiler has been found,\r\n\n# because otherwise there would have to be a separate assembler source file\r\n\n# for each assembler on every architecture.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# when using generic \"ASM\" support, we must have detected the compiler ID, fail otherwise:\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestASM_MASMCompiler.cmake" : {
      "ObjectId" : "73f1193fd442a4b68f09f3513c6f58e3cc8886ce",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that the selected ASM_MASM \"compiler\" (should be masm or masm64)\r\n\n# works. For assembler this can only check whether the compiler has been found,\r\n\n# because otherwise there would have to be a separate assembler source file\r\n\n# for each assembler on every architecture.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestASM_NASMCompiler.cmake" : {
      "ObjectId" : "753681f2fa7ddd25aad6c2a573bab305d41a5307",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that the selected ASM_NASM \"compiler\" works.\r\n\n# For assembler this can only check whether the compiler has been found,\r\n\n# because otherwise there would have to be a separate assembler source file\r\n\n# for each assembler on every architecture.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestCCompiler.cmake" : {
      "ObjectId" : "d966b40f154560564e2fe925f5e8bd8f7eb6c7ab",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The compiler configuration was forced by the user.\r\n\n# Assume the user has configured all compiler information.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Remove any cached result from an older CMake version.\r\n\n# We now store this in CMakeCCompiler.cmake.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected C compiler can actually compile\r\n\n# and link the most basic of programs.   If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Move result from cache to normal variable.\r\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Try to identify the ABI and configure it into CMakeCCompiler.cmake\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Try to identify the compiler features\r\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Re-configure to save learned information.\r\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestCSharpCompiler.cmake" : {
      "ObjectId" : "408606a0c7fc37aead5325acebc67c8f40406882",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The compiler configuration was forced by the user.\r\n\n# Assume the user has configured all compiler information.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected C# compiler can actually compile\r\n\n# and link the most basic of programs. If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Move result from cache to normal variable.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Re-configure to save learned information.\r\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestCUDACompiler.cmake" : {
      "ObjectId" : "5264ce2b2575664de2d0cf7d2e60f144122a7335",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The compiler configuration was forced by the user.\r\n\n# Assume the user has configured all compiler information.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Remove any cached result from an older CMake version.\r\n\n# We now store this in CMakeCUDACompiler.cmake.\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected cuda compiler can actually compile\r\n\n# and link the most basic of programs.   If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Move result from cache to normal variable.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Try to identify the ABI and configure it into CMakeCUDACompiler.cmake\r\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Re-configure to save learned information.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestCXXCompiler.cmake" : {
      "ObjectId" : "d1e8ccfc0a9b16e5c0341ab8d87df9b46cd78b05",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The compiler configuration was forced by the user.\r\n\n# Assume the user has configured all compiler information.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Remove any cached result from an older CMake version.\r\n\n# We now store this in CMakeCXXCompiler.cmake.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected C++ compiler can actually compile\r\n\n# and link the most basic of programs.   If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Move result from cache to normal variable.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Try to identify the ABI and configure it into CMakeCXXCompiler.cmake\r\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Try to identify the compiler features\r\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Re-configure to save learned information.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestCompilerCommon.cmake" : {
      "ObjectId" : "991d467978dce3678f3585559454f402ea8c8b65",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestFortranCompiler.cmake" : {
      "ObjectId" : "6eca111e3b6a0b03a26beaa2e24ddf89f34959cf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The compiler configuration was forced by the user.\r\n\n# Assume the user has configured all compiler information.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Remove any cached result from an older CMake version.\r\n\n# We now store this in CMakeFortranCompiler.cmake.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected Fortran compiler can actually compile\r\n\n# and link the most basic of programs.   If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Move result from cache to normal variable.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Try to identify the ABI and configure it into CMakeFortranCompiler.cmake\r\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Test for Fortran 90 support by using an f90-specific construct.\r\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Re-configure to save learned information.\r\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestJavaCompiler.cmake" : {
      "ObjectId" : "af04e8164dae6b10c26e0b8216decb7fed0f3413",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected Fortran compiler can actually compile\r\n\n# and link the most basic of programs.   If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestRCCompiler.cmake" : {
      "ObjectId" : "7f6f0949f9150b14946df44aeb33e4026476dff0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected RC compiler can actually compile\r\n\n# and link the most basic of programs.   If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For now there is no way to do a try compile on just a .rc file\r\n\n# so just do nothing in here.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeTestSwiftCompiler.cmake" : {
      "ObjectId" : "bcd418f07dff3d07008775074c22fb33921d0340",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The compiler configuration was forced by the user.\r\n\n# Assume the user has configured all compiler information.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Remove any cached result from an older CMake version.\r\n\n# We now store this in CMakeSwiftCompiler.cmake.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This file is used by EnableLanguage in cmGlobalGenerator to\r\n\n# determine that that selected C++ compiler can actually compile\r\n\n# and link the most basic of programs.   If not, a fatal error\r\n\n# is set and cmake stops processing commands and will not generate\r\n\n# any makefiles or projects.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Move result from cache to normal variable.\r\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeUnixFindMake.cmake" : {
      "ObjectId" : "b96c47321ead62d093f97956056270d86da50086",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for a make tool provided by Xcode\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeVS7BackwardCompatibility.cmake" : {
      "ObjectId" : "d4e3499a251a82c578708a3b3cd1051f5f447581",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# hard code these for fast backwards compatibility tests\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CMakeVerifyManifest.cmake" : {
      "ObjectId" : "8be26c325ae48d3d06554f62cd732a025c0f71e4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CMakeVerifyManifest\r\n\n# -------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# CMakeVerifyManifest.cmake\r\n\n#\r\n\n# This script is used to verify that embedded manifests and side by side\r\n\n# manifests for a project match.  To run this script, cd to a directory\r\n\n# and run the script with cmake -P.  On the command line you can pass in\r\n\n# versions that are OK even if not found in the .manifest files.  For\r\n\n# example, cmake -Dallow_versions=8.0.50608.0\r\n\n# -PCmakeVerifyManifest.cmake could be used to allow an embedded manifest\r\n\n# of 8.0.50608.0 to be used in a project even if that version was not\r\n\n# found in the .manifest file.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This script first recursively globs *.manifest files from\r\n\n# the current directory.  Then globs *.exe and *.dll.  Each\r\n\n# .exe and .dll is scanned for embedded manifests and the versions\r\n\n# of CRT are compared to those found in the .manifest files\r\n\n# from the first glob.\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# crt_version:\r\n\n# function to extract the CRT version from a file\r\n\n# this can be passed a .exe, .dll, or a .manifest file\r\n\n# it will put the list of versions found into the variable\r\n\n# specified by list_var\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check_version:\r\n\n#\r\n\n# test a file against the shipped manifest versions\r\n\n# for a directory\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# collect versions for a given file\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# see if the versions\r\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# collect up the versions of CRT that are shipped\r\n\n# in .manifest files\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now find all .exe and .dll files\r\n\n# and call check_version on each of them\r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# report a fatal error if there were any so that cmake will return\r\n\n# a non zero value\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPack.cmake" : {
      "ObjectId" : "a717315a076b50bb758793a64451c809071c889c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPack\r\n\n# -----\r\n\n#\r\n\n# Build binary and source package installers.\r\n\n#\r\n\n# Variables common to all CPack generators\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The\r\n\n# CPack module generates binary and source installers in a variety of\r\n\n# formats using the cpack program.  Inclusion of the CPack module adds\r\n\n# two new targets to the resulting makefiles, package and\r\n\n# package_source, which build the binary and source installers,\r\n\n# respectively.  The generated binary installers contain everything\r\n\n# installed via CMake's INSTALL command (and the deprecated\r\n\n# INSTALL_FILES, INSTALL_PROGRAMS, and INSTALL_TARGETS commands).\r\n\n#\r\n\n# For certain kinds of binary installers (including the graphical\r\n\n# installers on Mac OS X and Windows), CPack generates installers that\r\n\n# allow users to select individual application components to install.\r\n\n# See CPackComponent module for that.\r\n\n#\r\n\n# The CPACK_GENERATOR variable has different meanings in different\r\n\n# contexts.  In your CMakeLists.txt file, CPACK_GENERATOR is a *list of\r\n\n# generators*: when run with no other arguments, CPack will iterate over\r\n\n# that list and produce one package for each generator.  In a\r\n\n# CPACK_PROJECT_CONFIG_FILE, though, CPACK_GENERATOR is a *string naming\r\n\n# a single generator*.  If you need per-cpack- generator logic to\r\n\n# control *other* cpack settings, then you need a\r\n\n# CPACK_PROJECT_CONFIG_FILE.\r\n\n#\r\n\n# The CMake source tree itself contains a CPACK_PROJECT_CONFIG_FILE.\r\n\n# See the top level file CMakeCPackOptions.cmake.in for an example.\r\n\n#\r\n\n# If set, the CPACK_PROJECT_CONFIG_FILE is included automatically on a\r\n\n# per-generator basis.  It only need contain overrides.\r\n\n#\r\n\n# Here's how it works:\r\n\n#\r\n\n# * cpack runs\r\n\n# * it includes CPackConfig.cmake\r\n\n# * it iterates over the generators listed in that file's\r\n\n#   CPACK_GENERATOR list variable (unless told to use just a\r\n\n#   specific one via -G on the command line...)\r\n\n# * foreach generator, it then\r\n\n#\r\n\n#   - sets CPACK_GENERATOR to the one currently being iterated\r\n\n#   - includes the CPACK_PROJECT_CONFIG_FILE\r\n\n#   - produces the package for that generator\r\n\n#\r\n\n# This is the key: For each generator listed in CPACK_GENERATOR in\r\n\n# CPackConfig.cmake, cpack will *reset* CPACK_GENERATOR internally to\r\n\n# *the one currently being used* and then include the\r\n\n# CPACK_PROJECT_CONFIG_FILE.\r\n\n#\r\n\n# Before including this CPack module in your CMakeLists.txt file, there\r\n\n# are a variety of variables that can be set to customize the resulting\r\n\n# installers.  The most commonly-used variables are:\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_NAME\r\n\n#\r\n\n#  The name of the package (or application). If not specified, defaults to\r\n\n#  the project name.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_VENDOR\r\n\n#\r\n\n#  The name of the package vendor. (e.g., \"Kitware\").\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_DIRECTORY\r\n\n#\r\n\n#  The directory in which CPack is doing its packaging. If it is not set\r\n\n#  then this will default (internally) to the build dir. This variable may\r\n\n#  be defined in CPack config file or from the cpack command line option\r\n\n#  \"-B\". If set the command line option override the value found in the\r\n\n#  config file.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_VERSION_MAJOR\r\n\n#\r\n\n#  Package major Version\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_VERSION_MINOR\r\n\n#\r\n\n#  Package minor Version\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_VERSION_PATCH\r\n\n#\r\n\n#  Package patch Version\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_DESCRIPTION_FILE\r\n\n#\r\n\n#  A text file used to describe the project. Used, for example, the\r\n\n#  introduction screen of a CPack-generated Windows installer to describe\r\n\n#  the project.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_DESCRIPTION_SUMMARY\r\n\n#\r\n\n#  Short description of the project (only a few words).\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_FILE_NAME\r\n\n#\r\n\n#  The name of the package file to generate, not including the\r\n\n#  extension. For example, cmake-2.6.1-Linux-i686.  The default value is::\r\n\n#\r\n\n#   ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_INSTALL_DIRECTORY\r\n\n#\r\n\n#  Installation directory on the target system. This may be used by some\r\n\n#  CPack generators like NSIS to create an installation directory e.g.,\r\n\n#  \"CMake 2.5\" below the installation prefix. All installed element will be\r\n\n#  put inside this directory.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_ICON\r\n\n#\r\n\n#  A branding image that will be displayed inside the installer (used by GUI\r\n\n#  installers).\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_CHECKSUM\r\n\n#\r\n\n#  An algorithm that will be used to generate additional file with checksum\r\n\n#  of the package. Output file name will be::\r\n\n#\r\n\n#     ${CPACK_PACKAGE_FILE_NAME}.${CPACK_PACKAGE_CHECKSUM}\r\n\n#\r\n\n#  Supported algorithms are those listed by the\r\n\n#  :ref:`string(\\<HASH\\>) <Supported Hash Algorithms>`\r\n\n#  command.\r\n\n#\r\n\n# .. variable:: CPACK_PROJECT_CONFIG_FILE\r\n\n#\r\n\n#  CPack-time project CPack configuration file. This file included at cpack\r\n\n#  time, once per generator after CPack has set CPACK_GENERATOR to the\r\n\n#  actual generator being used. It allows per-generator setting of CPACK_*\r\n\n#  variables at cpack time.\r\n\n#\r\n\n# .. variable:: CPACK_RESOURCE_FILE_LICENSE\r\n\n#\r\n\n#  License to be embedded in the installer. It will typically be displayed\r\n\n#  to the user by the produced installer (often with an explicit \"Accept\"\r\n\n#  button, for graphical installers) prior to installation. This license\r\n\n#  file is NOT added to installed file but is used by some CPack generators\r\n\n#  like NSIS. If you want to install a license file (may be the same as this\r\n\n#  one) along with your project you must add an appropriate CMake INSTALL\r\n\n#  command in your CMakeLists.txt.\r\n\n#\r\n\n# .. variable:: CPACK_RESOURCE_FILE_README\r\n\n#\r\n\n#  ReadMe file to be embedded in the installer. It typically describes in\r\n\n#  some detail the purpose of the project during the installation. Not all\r\n\n#  CPack generators uses this file.\r\n\n#\r\n\n# .. variable:: CPACK_RESOURCE_FILE_WELCOME\r\n\n#\r\n\n#  Welcome file to be embedded in the installer. It welcomes users to this\r\n\n#  installer.  Typically used in the graphical installers on Windows and Mac\r\n\n#  OS X.\r\n\n#\r\n\n# .. variable:: CPACK_MONOLITHIC_INSTALL\r\n\n#\r\n\n#  Disables the component-based installation mechanism. When set the\r\n\n#  component specification is ignored and all installed items are put in a\r\n\n#  single \"MONOLITHIC\" package.  Some CPack generators do monolithic\r\n\n#  packaging by default and may be asked to do component packaging by\r\n\n#  setting CPACK_<GENNAME>_COMPONENT_INSTALL to 1/TRUE.\r\n\n#\r\n\n# .. variable:: CPACK_GENERATOR\r\n\n#\r\n\n#  List of CPack generators to use. If not specified, CPack will create a\r\n\n#  set of options CPACK_BINARY_<GENNAME> (e.g., CPACK_BINARY_NSIS) allowing\r\n\n#  the user to enable/disable individual generators. This variable may be\r\n\n#  used on the command line as well as in::\r\n\n#\r\n\n#   cpack -D CPACK_GENERATOR=\"ZIP;TGZ\" /path/to/build/tree\r\n\n#\r\n\n# .. variable:: CPACK_OUTPUT_CONFIG_FILE\r\n\n#\r\n\n#  The name of the CPack binary configuration file. This file is the CPack\r\n\n#  configuration generated by the CPack module for binary\r\n\n#  installers. Defaults to CPackConfig.cmake.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_EXECUTABLES\r\n\n#\r\n\n#  Lists each of the executables and associated text label to be used to\r\n\n#  create Start Menu shortcuts. For example, setting this to the list\r\n\n#  ccmake;CMake will create a shortcut named \"CMake\" that will execute the\r\n\n#  installed executable ccmake. Not all CPack generators use it (at least\r\n\n#  NSIS, WIX and OSXX11 do).\r\n\n#\r\n\n# .. variable:: CPACK_STRIP_FILES\r\n\n#\r\n\n#  List of files to be stripped. Starting with CMake 2.6.0 CPACK_STRIP_FILES\r\n\n#  will be a boolean variable which enables stripping of all files (a list\r\n\n#  of files evaluates to TRUE in CMake, so this change is compatible).\r\n\n#\r\n\n# .. variable:: CPACK_VERBATIM_VARIABLES\r\n\n#\r\n\n#  If set to TRUE, values of variables prefixed with CPACK_ will be escaped\r\n\n#  before being written to the configuration files, so that the cpack program\r\n\n#  receives them exactly as they were specified. If not, characters like quotes\r\n\n#  and backslashes can cause parsing errors or alter the value received by the\r\n\n#  cpack program. Defaults to FALSE for backwards compatibility.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : FALSE\r\n\n#\r\n\n# The following CPack variables are specific to source packages, and\r\n\n# will not affect binary packages:\r\n\n#\r\n\n# .. variable:: CPACK_SOURCE_PACKAGE_FILE_NAME\r\n\n#\r\n\n#  The name of the source package. For example cmake-2.6.1.\r\n\n#\r\n\n# .. variable:: CPACK_SOURCE_STRIP_FILES\r\n\n#\r\n\n#  List of files in the source tree that will be stripped. Starting with\r\n\n#  CMake 2.6.0 CPACK_SOURCE_STRIP_FILES will be a boolean variable which\r\n\n#  enables stripping of all files (a list of files evaluates to TRUE in\r\n\n#  CMake, so this change is compatible).\r\n\n#\r\n\n# .. variable:: CPACK_SOURCE_GENERATOR\r\n\n#\r\n\n#  List of generators used for the source packages. As with CPACK_GENERATOR,\r\n\n#  if this is not specified then CPack will create a set of options (e.g.,\r\n\n#  CPACK_SOURCE_ZIP) allowing users to select which packages will be\r\n\n#  generated.\r\n\n#\r\n\n# .. variable:: CPACK_SOURCE_OUTPUT_CONFIG_FILE\r\n\n#\r\n\n#  The name of the CPack source configuration file. This file is the CPack\r\n\n#  configuration generated by the CPack module for source\r\n\n#  installers. Defaults to CPackSourceConfig.cmake.\r\n\n#\r\n\n# .. variable:: CPACK_SOURCE_IGNORE_FILES\r\n\n#\r\n\n#  Pattern of files in the source tree that won't be packaged when building\r\n\n#  a source package. This is a list of regular expression patterns (that\r\n\n#  must be properly escaped), e.g.,\r\n\n#  /CVS/;/\\\\.svn/;\\\\.swp$;\\\\.#;/#;.*~;cscope.*\r\n\n#\r\n\n# The following variables are for advanced uses of CPack:\r\n\n#\r\n\n# .. variable:: CPACK_CMAKE_GENERATOR\r\n\n#\r\n\n#  What CMake generator should be used if the project is CMake\r\n\n#  project. Defaults to the value of CMAKE_GENERATOR few users will want to\r\n\n#  change this setting.\r\n\n#\r\n\n# .. variable:: CPACK_INSTALL_CMAKE_PROJECTS\r\n\n#\r\n\n#  List of four values that specify what project to install. The four values\r\n\n#  are: Build directory, Project Name, Project Component, Directory. If\r\n\n#  omitted, CPack will build an installer that installs everything.\r\n\n#\r\n\n# .. variable:: CPACK_SYSTEM_NAME\r\n\n#\r\n\n#  System name, defaults to the value of ${CMAKE_SYSTEM_NAME}.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_VERSION\r\n\n#\r\n\n#  Package full version, used internally. By default, this is built from\r\n\n#  CPACK_PACKAGE_VERSION_MAJOR, CPACK_PACKAGE_VERSION_MINOR, and\r\n\n#  CPACK_PACKAGE_VERSION_PATCH.\r\n\n#\r\n\n# .. variable:: CPACK_TOPLEVEL_TAG\r\n\n#\r\n\n#  Directory for the installed files.\r\n\n#\r\n\n# .. variable:: CPACK_INSTALL_COMMANDS\r\n\n#\r\n\n#  Extra commands to install components.\r\n\n#\r\n\n# .. variable:: CPACK_INSTALLED_DIRECTORIES\r\n\n#\r\n\n#  Extra directories to install.\r\n\n#\r\n\n# .. variable:: CPACK_PACKAGE_INSTALL_REGISTRY_KEY\r\n\n#\r\n\n#  Registry key used when installing this project. This is only used by\r\n\n#  installer for Windows.  The default value is based on the installation\r\n\n#  directory.\r\n\n#\r\n\n# .. variable:: CPACK_CREATE_DESKTOP_LINKS\r\n\n#\r\n\n#  List of desktop links to create.\r\n\n#  Each desktop link requires a corresponding start menu shortcut\r\n\n#  as created by :variable:`CPACK_PACKAGE_EXECUTABLES`.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define this var in order to avoid (or warn) concerning multiple inclusion\r\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Pick a configuration file\r\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Backward compatibility\r\n\n# Include CPackComponent macros if it has not already been included before.\r\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Macro for setting values if a user did not overwrite them\r\n\n# Mangles CMake-special characters. Only kept for backwards compatibility.\r\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cpack_encode_variables - Function to encode variables for the configuration file\r\n\n# find any variable that starts with CPACK and create a variable\r\n\n# _CPACK_OTHER_VARIABLES_ that contains SET commands for\r\n\n# each cpack variable.  _CPACK_OTHER_VARIABLES_ is then\r\n\n# used as an @ replacment in configure_file for the CPackConfig.\r\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Internal use functions\r\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set the package name\r\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Root dir: default value should be the string literal \"$PROGRAMFILES\"\r\n\n# for backwards compatibility. Projects may set this value to anything.\r\n\n# When creating 64 bit binaries we set the default value to \"$PROGRAMFILES64\"\r\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# <project>-<major>.<minor>.<patch>-<release>-<platform>.<pkgtype>\r\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# always force to exactly \"true\" or \"false\" for CPack.Info.plist.in:\r\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#.rst:\r\n\n# .. variable:: CPACK_BINARY_<GENNAME>\r\n\n#\r\n\n#  CPack generated options for binary generators. The CPack.cmake module\r\n\n#  generates (when CPACK_GENERATOR is not set) a set of CMake options (see\r\n\n#  CMake option command) which may then be used to select the CPack\r\n\n#  generator(s) to be used when launching the package target.\r\n\n#\r\n\n#  Provide options to choose generators we might check here if the required\r\n\n#  tools for the generates exist and set the defaults according to the results\r\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Provide options to choose source generators\r\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# mark the above options as advanced\r\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set some other variables\r\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# if the user has set CPACK_NSIS_DISPLAY_NAME remember it\r\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# if the user has set CPACK_NSIS_DISPLAY\r\n\n# explicitly, then use that as the default\r\n\n# value of CPACK_NSIS_PACKAGE_NAME  instead\r\n\n# of CPACK_PACKAGE_INSTALL_DIRECTORY\r\n",
        "Line" : 567,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# WiX specific variables\r\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set sysroot so SDK tools can be used\r\n",
        "Line" : 594,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The user has provided the set of components to be installed as\r\n\n# part of a component-based installation; trust her.\r\n",
        "Line" : 606,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# If the user has not specifically requested a monolithic installer\r\n\n# but has specified components in various \"install\" commands, tell\r\n\n# CPack about those components.\r\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Only one component: this is not a component-based installation\r\n\n# (at least, it isn't a component-based installation, but may\r\n\n# become one later if the user uses the cpack_add_* commands).\r\n",
        "Line" : 618,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# CMake always generates a component named \"Unspecified\", which is\r\n\n# used to install everything that doesn't have an explicitly-provided\r\n\n# component. Since these files should always be installed, we'll make\r\n\n# them hidden and required.\r\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Generate source file\r\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackBundle.cmake" : {
      "ObjectId" : "7a550675f0eb9f675bda1752d8300670af7d1635",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackBundle\r\n\n# -----------\r\n\n#\r\n\n# CPack Bundle generator (Mac OS X) specific options\r\n\n#\r\n\n# Variables specific to CPack Bundle generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# Installers built on Mac OS X using the Bundle generator use the\r\n\n# aforementioned DragNDrop (CPACK_DMG_xxx) variables, plus the following\r\n\n# Bundle-specific parameters (CPACK_BUNDLE_xxx).\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_NAME\r\n\n#\r\n\n#  The name of the generated bundle. This appears in the OSX finder as the\r\n\n#  bundle name. Required.\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_PLIST\r\n\n#\r\n\n#  Path to an OSX plist file that will be used for the generated bundle. This\r\n\n#  assumes that the caller has generated or specified their own Info.plist\r\n\n#  file. Required.\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_ICON\r\n\n#\r\n\n#  Path to an OSX icon file that will be used as the icon for the generated\r\n\n#  bundle. This is the icon that appears in the OSX finder for the bundle, and\r\n\n#  in the OSX dock when the bundle is opened.  Required.\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_STARTUP_COMMAND\r\n\n#\r\n\n#  Path to a startup script. This is a path to an executable or script that\r\n\n#  will be run whenever an end-user double-clicks the generated bundle in the\r\n\n#  OSX Finder. Optional.\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_APPLE_CERT_APP\r\n\n#\r\n\n#  The name of your Apple supplied code signing certificate for the application.\r\n\n#  The name usually takes the form \"Developer ID Application: [Name]\" or\r\n\n#  \"3rd Party Mac Developer Application: [Name]\". If this variable is not set\r\n\n#  the application will not be signed.\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_APPLE_ENTITLEMENTS\r\n\n#\r\n\n#  The name of the plist file that contains your apple entitlements for sandboxing\r\n\n#  your application. This file is required for submission to the Mac App Store.\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_APPLE_CODESIGN_FILES\r\n\n#\r\n\n#  A list of additional files that you wish to be signed. You do not need to\r\n\n#  list the main application folder, or the main executable. You should\r\n\n#  list any frameworks and plugins that are included in your app bundle.\r\n\n#\r\n\n# .. variable:: CPACK_BUNDLE_APPLE_CODESIGN_PARAMETER\r\n\n#\r\n\n#  Additional parameter that will passed to codesign.\r\n\n#  Default value: \"--deep -f\"\r\n\n#\r\n\n# .. variable:: CPACK_COMMAND_CODESIGN\r\n\n#\r\n\n#  Path to the codesign(1) command used to sign applications with an\r\n\n#  Apple cert. This variable can be used to override the automatically\r\n\n#  detected command (or specify its location if the auto-detection fails\r\n\n#  to find it.)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Bundle Generator specific code should be put here\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackComponent.cmake" : {
      "ObjectId" : "e7eb82afe3e3fd1f30ec2103a8c54b3d120a9069",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackComponent\r\n\n# --------------\r\n\n#\r\n\n# Build binary and source package installers\r\n\n#\r\n\n# Variables concerning CPack Components\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The CPackComponent module is the module which handles the component\r\n\n# part of CPack.  See CPack module for general information about CPack.\r\n\n#\r\n\n# For certain kinds of binary installers (including the graphical\r\n\n# installers on Mac OS X and Windows), CPack generates installers that\r\n\n# allow users to select individual application components to install.\r\n\n# The contents of each of the components are identified by the COMPONENT\r\n\n# argument of CMake's INSTALL command.  These components can be\r\n\n# annotated with user-friendly names and descriptions, inter-component\r\n\n# dependencies, etc., and grouped in various ways to customize the\r\n\n# resulting installer.  See the cpack_add_* commands, described below,\r\n\n# for more information about component-specific installations.\r\n\n#\r\n\n# Component-specific installation allows users to select specific sets\r\n\n# of components to install during the install process.  Installation\r\n\n# components are identified by the COMPONENT argument of CMake's INSTALL\r\n\n# commands, and should be further described by the following CPack\r\n\n# commands:\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENTS_ALL\r\n\n#\r\n\n#  The list of component to install.\r\n\n#\r\n\n#  The default value of this variable is computed by CPack and contains all\r\n\n#  components defined by the project.  The user may set it to only include the\r\n\n#  specified components.\r\n\n#\r\n\n# .. variable:: CPACK_<GENNAME>_COMPONENT_INSTALL\r\n\n#\r\n\n#  Enable/Disable component install for CPack generator <GENNAME>.\r\n\n#\r\n\n#  Each CPack Generator (RPM, DEB, ARCHIVE, NSIS, DMG, etc...) has a legacy\r\n\n#  default behavior.  e.g.  RPM builds monolithic whereas NSIS builds\r\n\n#  component.  One can change the default behavior by setting this variable to\r\n\n#  0/1 or OFF/ON.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENTS_GROUPING\r\n\n#\r\n\n#  Specify how components are grouped for multi-package component-aware CPack\r\n\n#  generators.\r\n\n#\r\n\n#  Some generators like RPM or ARCHIVE family (TGZ, ZIP, ...) generates\r\n\n#  several packages files when asked for component packaging.  They group\r\n\n#  the component differently depending on the value of this variable:\r\n\n#\r\n\n#  * ONE_PER_GROUP (default): creates one package file per component group\r\n\n#  * ALL_COMPONENTS_IN_ONE : creates a single package with all (requested) component\r\n\n#  * IGNORE : creates one package per component, i.e. IGNORE component group\r\n\n#\r\n\n#  One can specify different grouping for different CPack generator by\r\n\n#  using a CPACK_PROJECT_CONFIG_FILE.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENT_<compName>_DISPLAY_NAME\r\n\n#\r\n\n#  The name to be displayed for a component.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENT_<compName>_DESCRIPTION\r\n\n#\r\n\n#  The description of a component.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENT_<compName>_GROUP\r\n\n#\r\n\n#  The group of a component.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENT_<compName>_DEPENDS\r\n\n#\r\n\n#  The dependencies (list of components) on which this component depends.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENT_<compName>_HIDDEN\r\n\n#\r\n\n#  True if this component is hidden from the user.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENT_<compName>_REQUIRED\r\n\n#\r\n\n#  True if this component is required.\r\n\n#\r\n\n# .. variable:: CPACK_COMPONENT_<compName>_DISABLED\r\n\n#\r\n\n#  True if this component is not selected to be installed by default.\r\n\n#\r\n\n# .. command:: cpack_add_component\r\n\n#\r\n\n# Describes a CPack installation\r\n\n# component named by the COMPONENT argument to a CMake INSTALL command.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   cpack_add_component(compname\r\n\n#                       [DISPLAY_NAME name]\r\n\n#                       [DESCRIPTION description]\r\n\n#                       [HIDDEN | REQUIRED | DISABLED ]\r\n\n#                       [GROUP group]\r\n\n#                       [DEPENDS comp1 comp2 ... ]\r\n\n#                       [INSTALL_TYPES type1 type2 ... ]\r\n\n#                       [DOWNLOADED]\r\n\n#                       [ARCHIVE_FILE filename])\r\n\n#\r\n\n#\r\n\n#\r\n\n# The cmake_add_component command describes an installation component,\r\n\n# which the user can opt to install or remove as part of the graphical\r\n\n# installation process.  compname is the name of the component, as\r\n\n# provided to the COMPONENT argument of one or more CMake INSTALL\r\n\n# commands.\r\n\n#\r\n\n# DISPLAY_NAME is the displayed name of the component, used in graphical\r\n\n# installers to display the component name.  This value can be any\r\n\n# string.\r\n\n#\r\n\n# DESCRIPTION is an extended description of the component, used in\r\n\n# graphical installers to give the user additional information about the\r\n\n# component.  Descriptions can span multiple lines using ``\\n`` as the\r\n\n# line separator.  Typically, these descriptions should be no more than\r\n\n# a few lines long.\r\n\n#\r\n\n# HIDDEN indicates that this component will be hidden in the graphical\r\n\n# installer, so that the user cannot directly change whether it is\r\n\n# installed or not.\r\n\n#\r\n\n# REQUIRED indicates that this component is required, and therefore will\r\n\n# always be installed.  It will be visible in the graphical installer,\r\n\n# but it cannot be unselected.  (Typically, required components are\r\n\n# shown greyed out).\r\n\n#\r\n\n# DISABLED indicates that this component should be disabled (unselected)\r\n\n# by default.  The user is free to select this component for\r\n\n# installation, unless it is also HIDDEN.\r\n\n#\r\n\n# DEPENDS lists the components on which this component depends.  If this\r\n\n# component is selected, then each of the components listed must also be\r\n\n# selected.  The dependency information is encoded within the installer\r\n\n# itself, so that users cannot install inconsistent sets of components.\r\n\n#\r\n\n# GROUP names the component group of which this component is a part.  If\r\n\n# not provided, the component will be a standalone component, not part\r\n\n# of any component group.  Component groups are described with the\r\n\n# cpack_add_component_group command, detailed below.\r\n\n#\r\n\n# INSTALL_TYPES lists the installation types of which this component is\r\n\n# a part.  When one of these installations types is selected, this\r\n\n# component will automatically be selected.  Installation types are\r\n\n# described with the cpack_add_install_type command, detailed below.\r\n\n#\r\n\n# DOWNLOADED indicates that this component should be downloaded\r\n\n# on-the-fly by the installer, rather than packaged in with the\r\n\n# installer itself.  For more information, see the\r\n\n# cpack_configure_downloads command.\r\n\n#\r\n\n# ARCHIVE_FILE provides a name for the archive file created by CPack to\r\n\n# be used for downloaded components.  If not supplied, CPack will create\r\n\n# a file with some name based on CPACK_PACKAGE_FILE_NAME and the name of\r\n\n# the component.  See cpack_configure_downloads for more information.\r\n\n#\r\n\n# .. command:: cpack_add_component_group\r\n\n#\r\n\n# Describes a group of related CPack installation components.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   cpack_add_component_group(groupname\r\n\n#                            [DISPLAY_NAME name]\r\n\n#                            [DESCRIPTION description]\r\n\n#                            [PARENT_GROUP parent]\r\n\n#                            [EXPANDED]\r\n\n#                            [BOLD_TITLE])\r\n\n#\r\n\n#\r\n\n#\r\n\n# The cpack_add_component_group describes a group of installation\r\n\n# components, which will be placed together within the listing of\r\n\n# options.  Typically, component groups allow the user to\r\n\n# select/deselect all of the components within a single group via a\r\n\n# single group-level option.  Use component groups to reduce the\r\n\n# complexity of installers with many options.  groupname is an arbitrary\r\n\n# name used to identify the group in the GROUP argument of the\r\n\n# cpack_add_component command, which is used to place a component in a\r\n\n# group.  The name of the group must not conflict with the name of any\r\n\n# component.\r\n\n#\r\n\n# DISPLAY_NAME is the displayed name of the component group, used in\r\n\n# graphical installers to display the component group name.  This value\r\n\n# can be any string.\r\n\n#\r\n\n# DESCRIPTION is an extended description of the component group, used in\r\n\n# graphical installers to give the user additional information about the\r\n\n# components within that group.  Descriptions can span multiple lines\r\n\n# using ``\\n`` as the line separator.  Typically, these descriptions\r\n\n# should be no more than a few lines long.\r\n\n#\r\n\n# PARENT_GROUP, if supplied, names the parent group of this group.\r\n\n# Parent groups are used to establish a hierarchy of groups, providing\r\n\n# an arbitrary hierarchy of groups.\r\n\n#\r\n\n# EXPANDED indicates that, by default, the group should show up as\r\n\n# \"expanded\", so that the user immediately sees all of the components\r\n\n# within the group.  Otherwise, the group will initially show up as a\r\n\n# single entry.\r\n\n#\r\n\n# BOLD_TITLE indicates that the group title should appear in bold, to\r\n\n# call the user's attention to the group.\r\n\n#\r\n\n# .. command:: cpack_add_install_type\r\n\n#\r\n\n# Add a new installation type containing\r\n\n# a set of predefined component selections to the graphical installer.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   cpack_add_install_type(typename\r\n\n#                          [DISPLAY_NAME name])\r\n\n#\r\n\n#\r\n\n#\r\n\n# The cpack_add_install_type command identifies a set of preselected\r\n\n# components that represents a common use case for an application.  For\r\n\n# example, a \"Developer\" install type might include an application along\r\n\n# with its header and library files, while an \"End user\" install type\r\n\n# might just include the application's executable.  Each component\r\n\n# identifies itself with one or more install types via the INSTALL_TYPES\r\n\n# argument to cpack_add_component.\r\n\n#\r\n\n# DISPLAY_NAME is the displayed name of the install type, which will\r\n\n# typically show up in a drop-down box within a graphical installer.\r\n\n# This value can be any string.\r\n\n#\r\n\n# .. command:: cpack_configure_downloads\r\n\n#\r\n\n# Configure CPack to download\r\n\n# selected components on-the-fly as part of the installation process.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   cpack_configure_downloads(site\r\n\n#                             [UPLOAD_DIRECTORY dirname]\r\n\n#                             [ALL]\r\n\n#                             [ADD_REMOVE|NO_ADD_REMOVE])\r\n\n#\r\n\n#\r\n\n#\r\n\n# The cpack_configure_downloads command configures installation-time\r\n\n# downloads of selected components.  For each downloadable component,\r\n\n# CPack will create an archive containing the contents of that\r\n\n# component, which should be uploaded to the given site.  When the user\r\n\n# selects that component for installation, the installer will download\r\n\n# and extract the component in place.  This feature is useful for\r\n\n# creating small installers that only download the requested components,\r\n\n# saving bandwidth.  Additionally, the installers are small enough that\r\n\n# they will be installed as part of the normal installation process, and\r\n\n# the \"Change\" button in Windows Add/Remove Programs control panel will\r\n\n# allow one to add or remove parts of the application after the original\r\n\n# installation.  On Windows, the downloaded-components functionality\r\n\n# requires the ZipDLL plug-in for NSIS, available at:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   http://nsis.sourceforge.net/ZipDLL_plug-in\r\n\n#\r\n\n#\r\n\n#\r\n\n# On Mac OS X, installers that download components on-the-fly can only\r\n\n# be built and installed on system using Mac OS X 10.5 or later.\r\n\n#\r\n\n# The site argument is a URL where the archives for downloadable\r\n\n# components will reside, e.g.,\r\n\n# https://cmake.org/files/2.6.1/installer/ All of the archives\r\n\n# produced by CPack should be uploaded to that location.\r\n\n#\r\n\n# UPLOAD_DIRECTORY is the local directory where CPack will create the\r\n\n# various archives for each of the components.  The contents of this\r\n\n# directory should be uploaded to a location accessible by the URL given\r\n\n# in the site argument.  If omitted, CPack will use the directory\r\n\n# CPackUploads inside the CMake binary directory to store the generated\r\n\n# archives.\r\n\n#\r\n\n# The ALL flag indicates that all components be downloaded.  Otherwise,\r\n\n# only those components explicitly marked as DOWNLOADED or that have a\r\n\n# specified ARCHIVE_FILE will be downloaded.  Additionally, the ALL\r\n\n# option implies ADD_REMOVE (unless NO_ADD_REMOVE is specified).\r\n\n#\r\n\n# ADD_REMOVE indicates that CPack should install a copy of the installer\r\n\n# that can be called from Windows' Add/Remove Programs dialog (via the\r\n\n# \"Modify\" button) to change the set of installed components.\r\n\n# NO_ADD_REMOVE turns off this behavior.  This option is ignored on Mac\r\n\n# OS X.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Define var in order to avoid multiple inclusion\r\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Argument-parsing macro from https://cmake.org/Wiki/CMakeMacroParseArguments\r\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Macro that appends a SET command for the given variable name (var)\r\n\n# to the macro named strvar, but only if the variable named \"var\"\r\n\n# has been defined. The string will eventually be appended to a CPack\r\n\n# configuration file.\r\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Macro that appends a SET command for the given variable name (var)\r\n\n# to the macro named strvar, but only if the variable named \"var\"\r\n\n# has been defined and is a string. The string will eventually be\r\n\n# appended to a CPack configuration file.\r\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Macro that appends a SET command for the given list variable name (var)\r\n\n# to the macro named strvar, but only if the variable named \"var\"\r\n\n# has been defined. It's like add variable, but wrap each item to quotes.\r\n\n# The string will eventually be appended to a CPack configuration file.\r\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Macro that appends a SET command for the given variable name (var)\r\n\n# to the macro named strvar, but only if the variable named \"var\"\r\n\n# has been set to true. The string will eventually be\r\n\n# appended to a CPack configuration file.\r\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Macro that adds a component to the CPack installer\r\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the user didn't set CPACK_COMPONENTS_ALL explicitly, update the\r\n\n# value of CPACK_COMPONENTS_ALL in the configuration file. This will\r\n\n# take care of any components that have been added after the CPack\r\n\n# moduled was included.\r\n",
        "Line" : 404,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Backward compatibility issue.\r\n\n# Write to config iff the macros is used after CPack.cmake has been\r\n\n# included, other it's not necessary because the variables\r\n\n# will be encoded by cpack_encode_variables.\r\n",
        "Line" : 448,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Macro that adds a component group to the CPack installer\r\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Backward compatibility issue.\r\n\n# Write to config iff the macros is used after CPack.cmake has been\r\n\n# included, other it's not necessary because the variables\r\n\n# will be encoded by cpack_encode_variables.\r\n",
        "Line" : 482,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Macro that adds an installation type to the CPack installer\r\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Backward compatibility issue.\r\n\n# Write to config iff the macros is used after CPack.cmake has been\r\n\n# included, other it's not necessary because the variables\r\n\n# will be encoded by cpack_encode_variables.\r\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Backward compatibility issue.\r\n\n# Write to config iff the macros is used after CPack.cmake has been\r\n\n# included, other it's not necessary because the variables\r\n\n# will be encoded by cpack_encode_variables.\r\n",
        "Line" : 543,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackCygwin.cmake" : {
      "ObjectId" : "4a14bc6fa14bb714ffc158e88978a00684c3556f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackCygwin\r\n\n# -----------\r\n\n#\r\n\n# Cygwin CPack generator (Cygwin).\r\n\n#\r\n\n# Variables specific to CPack Cygwin generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The\r\n\n# following variable is specific to installers build on and/or for\r\n\n# Cygwin:\r\n\n#\r\n\n# .. variable:: CPACK_CYGWIN_PATCH_NUMBER\r\n\n#\r\n\n#  The Cygwin patch number.  FIXME: This documentation is incomplete.\r\n\n#\r\n\n# .. variable:: CPACK_CYGWIN_PATCH_FILE\r\n\n#\r\n\n#  The Cygwin patch file.  FIXME: This documentation is incomplete.\r\n\n#\r\n\n# .. variable:: CPACK_CYGWIN_BUILD_SCRIPT\r\n\n#\r\n\n#  The Cygwin build script.  FIXME: This documentation is incomplete.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackDMG.cmake" : {
      "ObjectId" : "6175c3b0b2b73541a47be0f386caf5f5920eaccb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackDMG\r\n\n# --------\r\n\n#\r\n\n# DragNDrop CPack generator (Mac OS X).\r\n\n#\r\n\n# Variables specific to CPack DragNDrop generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variables are specific to the DragNDrop installers built\r\n\n# on Mac OS X:\r\n\n#\r\n\n# .. variable:: CPACK_DMG_VOLUME_NAME\r\n\n#\r\n\n#  The volume name of the generated disk image. Defaults to\r\n\n#  CPACK_PACKAGE_FILE_NAME.\r\n\n#\r\n\n# .. variable:: CPACK_DMG_FORMAT\r\n\n#\r\n\n#  The disk image format. Common values are UDRO (UDIF read-only), UDZO (UDIF\r\n\n#  zlib-compressed) or UDBZ (UDIF bzip2-compressed). Refer to hdiutil(1) for\r\n\n#  more information on other available formats. Defaults to UDZO.\r\n\n#\r\n\n# .. variable:: CPACK_DMG_DS_STORE\r\n\n#\r\n\n#  Path to a custom DS_Store file. This .DS_Store file e.g. can be used to\r\n\n#  specify the Finder window position/geometry and layout (such as hidden\r\n\n#  toolbars, placement of the icons etc.). This file has to be generated by\r\n\n#  the Finder (either manually or through AppleScript) using a normal folder\r\n\n#  from which the .DS_Store file can then be extracted.\r\n\n#\r\n\n# .. variable:: CPACK_DMG_DS_STORE_SETUP_SCRIPT\r\n\n#\r\n\n#  Path to a custom AppleScript file.  This AppleScript is used to generate\r\n\n#  a .DS_Store file which specifies the Finder window position/geometry and\r\n\n#  layout (such as hidden toolbars, placement of the icons etc.).\r\n\n#  By specifying a custom AppleScript there is no need to use\r\n\n#  CPACK_DMG_DS_STORE, as the .DS_Store that is generated by the AppleScript\r\n\n#  will be packaged.\r\n\n#\r\n\n# .. variable:: CPACK_DMG_BACKGROUND_IMAGE\r\n\n#\r\n\n#  Path to an image file to be used as the background.  This file will be\r\n\n#  copied to .background/background.<ext>, where ext is the original image file\r\n\n#  extension.  The background image is installed into the image before\r\n\n#  CPACK_DMG_DS_STORE_SETUP_SCRIPT is executed or CPACK_DMG_DS_STORE is\r\n\n#  installed.  By default no background image is set.\r\n\n#\r\n\n# .. variable:: CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK\r\n\n#\r\n\n#  Default behaviour is to include a symlink to ``/Applications`` in the DMG.\r\n\n#  Set this option to ``ON`` to avoid adding the symlink.\r\n\n#\r\n\n# .. variable:: CPACK_DMG_SLA_DIR\r\n\n#\r\n\n#   Directory where license and menu files for different languages are stored.\r\n\n#   Setting this causes CPack to look for a ``<language>.menu.txt`` and\r\n\n#   ``<language>.license.txt`` file for every language defined in\r\n\n#   ``CPACK_DMG_SLA_LANGUAGES``. If both this variable and\r\n\n#   ``CPACK_RESOURCE_FILE_LICENSE`` are set, CPack will only look for the menu\r\n\n#   files and use the same license file for all languages.\r\n\n#\r\n\n# .. variable:: CPACK_DMG_SLA_LANGUAGES\r\n\n#\r\n\n#   Languages for which a license agreement is provided when mounting the\r\n\n#   generated DMG. A menu file consists of 9 lines of text. The first line is\r\n\n#   is the name of the language itself, uppercase, in English (e.g. German).\r\n\n#   The other lines are translations of the following strings:\r\n\n#\r\n\n#   - Agree\r\n\n#   - Disagree\r\n\n#   - Print\r\n\n#   - Save...\r\n\n#   - You agree to the terms of the License Agreement when you click the\r\n\n#     \"Agree\" button.\r\n\n#   - Software License Agreement\r\n\n#   - This text cannot be saved. The disk may be full or locked, or the file\r\n\n#     may be locked.\r\n\n#   - Unable to print. Make sure you have selected a printer.\r\n\n#\r\n\n#   For every language in this list, CPack will try to find files\r\n\n#   ``<language>.menu.txt`` and ``<language>.license.txt`` in the directory\r\n\n#   specified by the :variable:`CPACK_DMG_SLA_DIR` variable.\r\n\n#\r\n\n# .. variable:: CPACK_COMMAND_HDIUTIL\r\n\n#\r\n\n#  Path to the hdiutil(1) command used to operate on disk image files on Mac\r\n\n#  OS X. This variable can be used to override the automatically detected\r\n\n#  command (or specify its location if the auto-detection fails to find it.)\r\n\n#\r\n\n# .. variable:: CPACK_COMMAND_SETFILE\r\n\n#\r\n\n#  Path to the SetFile(1) command used to set extended attributes on files and\r\n\n#  directories on Mac OS X. This variable can be used to override the\r\n\n#  automatically detected command (or specify its location if the\r\n\n#  auto-detection fails to find it.)\r\n\n#\r\n\n# .. variable:: CPACK_COMMAND_REZ\r\n\n#\r\n\n#  Path to the Rez(1) command used to compile resources on Mac OS X. This\r\n\n#  variable can be used to override the automatically detected command (or\r\n\n#  specify its location if the auto-detection fails to find it.)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackDeb.cmake" : {
      "ObjectId" : "1e152553ecc2e641dcfc7f59469f6fe8a7ae3ea1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackDeb\r\n\n# --------\r\n\n#\r\n\n# The built in (binary) CPack Deb generator (Unix only)\r\n\n#\r\n\n# Variables specific to CPack Debian (DEB) generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# CPackDeb may be used to create Deb package using :module:`CPack`.\r\n\n# CPackDeb is a :module:`CPack` generator thus it uses the ``CPACK_XXX``\r\n\n# variables used by :module:`CPack`.\r\n\n#\r\n\n# CPackDeb generator should work on any Linux host but it will produce\r\n\n# better deb package when Debian specific tools ``dpkg-xxx`` are usable on\r\n\n# the build system.\r\n\n#\r\n\n# CPackDeb has specific features which are controlled by the specifics\r\n\n# :code:`CPACK_DEBIAN_XXX` variables.\r\n\n#\r\n\n# :code:`CPACK_DEBIAN_<COMPONENT>_XXXX` variables may be used in order to have\r\n\n# **component** specific values.  Note however that ``<COMPONENT>`` refers to\r\n\n# the **grouping name** written in upper case. It may be either a component name\r\n\n# or a component GROUP name.\r\n\n#\r\n\n# Here are some CPackDeb wiki resources that are here for historic reasons and\r\n\n# are no longer maintained but may still prove useful:\r\n\n#\r\n\n#  - https://cmake.org/Wiki/CMake:CPackConfiguration\r\n\n#  - https://cmake.org/Wiki/CMake:CPackPackageGenerators#DEB_.28UNIX_only.29\r\n\n#\r\n\n# List of CPackDEB specific variables:\r\n\n#\r\n\n# .. variable:: CPACK_DEB_COMPONENT_INSTALL\r\n\n#\r\n\n#  Enable component packaging for CPackDEB\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : OFF\r\n\n#\r\n\n#  If enabled (ON) multiple packages are generated. By default a single package\r\n\n#  containing files of all components is generated.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_NAME\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_NAME\r\n\n#\r\n\n#  Set Package control field (variable is automatically transformed to lower\r\n\n#  case).\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   :\r\n\n#\r\n\n#    - :variable:`CPACK_PACKAGE_NAME` for non-component based\r\n\n#      installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_NAME` suffixed with -<COMPONENT>\r\n\n#      for component-based installations.\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_FILE_NAME\r\n\n#               CPACK_DEBIAN_<COMPONENT>_FILE_NAME\r\n\n#\r\n\n#  Package file name.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : ``<CPACK_PACKAGE_FILE_NAME>[-<component>].deb``\r\n\n#\r\n\n#  This may be set to ``DEB-DEFAULT`` to allow CPackDeb to generate package file\r\n\n#  name by itself in deb format::\r\n\n#\r\n\n#    <PackageName>_<VersionNumber>-<DebianRevisionNumber>_<DebianArchitecture>.deb\r\n\n#\r\n\n#  Alternatively provided package file name must end with ``.deb`` suffix.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    Preferred setting of this variable is ``DEB-DEFAULT`` but for backward\r\n\n#    compatibility with CPackDeb in CMake prior to version 3.6 this feature\r\n\n#    is disabled by default.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    By using non default filenames duplicate names may occur. Duplicate files\r\n\n#    get overwritten and it is up to the packager to set the variables in a\r\n\n#    manner that will prevent such errors.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_VERSION\r\n\n#\r\n\n#  The Debian package version\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : :variable:`CPACK_PACKAGE_VERSION`\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_RELEASE\r\n\n#\r\n\n#  The Debian package release - Debian revision number.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : 1\r\n\n#\r\n\n#  This is the numbering of the DEB package itself, i.e. the version of the\r\n\n#  packaging and not the version of the content (see\r\n\n#  :variable:`CPACK_DEBIAN_PACKAGE_VERSION`). One may change the default value\r\n\n#  if the previous packaging was buggy and/or you want to put here a fancy Linux\r\n\n#  distro specific numbering.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_ARCHITECTURE\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_ARCHITECTURE\r\n\n#\r\n\n#  The Debian package architecture\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : Output of :code:`dpkg --print-architecture` (or :code:`i386`\r\n\n#    if :code:`dpkg` is not found)\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_DEPENDS\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS\r\n\n#\r\n\n#  Sets the Debian dependencies of this package.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_DEPENDS` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    If :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS` or\r\n\n#    more specifically :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS`\r\n\n#    is set for this component, the discovered dependencies will be appended\r\n\n#    to :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` instead of\r\n\n#    :variable:`CPACK_DEBIAN_PACKAGE_DEPENDS`. If\r\n\n#    :variable:`CPACK_DEBIAN_<COMPONENT>_PACKAGE_DEPENDS` is an empty string,\r\n\n#    only the automatically discovered dependencies will be set for this\r\n\n#    component.\r\n\n#\r\n\n#  Example::\r\n\n#\r\n\n#    set(CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6 (>= 2.3.1-6), libc6 (< 2.4)\")\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS\r\n\n#\r\n\n#  Sets inter component dependencies if listed with\r\n\n#  :variable:`CPACK_COMPONENT_<compName>_DEPENDS` variables.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_MAINTAINER\r\n\n#\r\n\n#  The Debian package maintainer\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : :code:`CPACK_PACKAGE_CONTACT`\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_DESCRIPTION\r\n\n#               CPACK_COMPONENT_<COMPONENT>_DESCRIPTION\r\n\n#\r\n\n#  The Debian package description\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   :\r\n\n#\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_DESCRIPTION` if set or\r\n\n#    - :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY`\r\n\n#\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_SECTION\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_SECTION\r\n\n#\r\n\n#  Set Section control field e.g. admin, devel, doc, ...\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : \"devel\"\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_ARCHIVE_TYPE\r\n\n#\r\n\n#  The archive format used for creating the Debian package.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : \"paxr\"\r\n\n#\r\n\n#  Possible values are:\r\n\n#\r\n\n#  - paxr\r\n\n#  - gnutar\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    Default pax archive format is the most portable format and generates\r\n\n#    packages that do not treat sparse files specially.\r\n\n#    GNU tar format on the other hand supports longer filenames.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_COMPRESSION_TYPE\r\n\n#\r\n\n#  The compression used for creating the Debian package.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : \"gzip\"\r\n\n#\r\n\n#  Possible values are:\r\n\n#\r\n\n#  - lzma\r\n\n#  - xz\r\n\n#  - bzip2\r\n\n#  - gzip\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_PRIORITY\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_PRIORITY\r\n\n#\r\n\n#  Set Priority control field e.g. required, important, standard, optional,\r\n\n#  extra\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : \"optional\"\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_HOMEPAGE\r\n\n#\r\n\n#  The URL of the web site for this package, preferably (when applicable) the\r\n\n#  site from which the original source can be obtained and any additional\r\n\n#  upstream documentation or information may be found.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    The content of this field is a simple URL without any surrounding\r\n\n#    characters such as <>.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_SHLIBDEPS\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_SHLIBDEPS\r\n\n#\r\n\n#  May be set to ON in order to use :code:`dpkg-shlibdeps` to generate\r\n\n#  better package dependency list.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_SHLIBDEPS` if set or\r\n\n#    - OFF\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    You may need set :variable:`CMAKE_INSTALL_RPATH` to an appropriate value\r\n\n#    if you use this feature, because if you don't :code:`dpkg-shlibdeps`\r\n\n#    may fail to find your own shared libs.\r\n\n#    See https://cmake.org/Wiki/CMake_RPATH_handling.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_DEBUG\r\n\n#\r\n\n#  May be set when invoking cpack in order to trace debug information\r\n\n#  during CPackDeb run.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_PREDEPENDS\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_PREDEPENDS\r\n\n#\r\n\n#  Sets the `Pre-Depends` field of the Debian package.\r\n\n#  Like :variable:`Depends <CPACK_DEBIAN_PACKAGE_DEPENDS>`, except that it\r\n\n#  also forces :code:`dpkg` to complete installation of the packages named\r\n\n#  before even starting the installation of the package which declares the\r\n\n#  pre-dependency.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_PREDEPENDS` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_ENHANCES\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_ENHANCES\r\n\n#\r\n\n#  Sets the `Enhances` field of the Debian package.\r\n\n#  Similar to :variable:`Suggests <CPACK_DEBIAN_PACKAGE_SUGGESTS>` but works\r\n\n#  in the opposite direction: declares that a package can enhance the\r\n\n#  functionality of another package.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_ENHANCES` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_BREAKS\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_BREAKS\r\n\n#\r\n\n#  Sets the `Breaks` field of the Debian package.\r\n\n#  When a binary package (P) declares that it breaks other packages (B),\r\n\n#  :code:`dpkg` will not allow the package (P) which declares `Breaks` be\r\n\n#  **unpacked** unless the packages that will be broken (B) are deconfigured\r\n\n#  first.\r\n\n#  As long as the package (P) is configured, the previously deconfigured\r\n\n#  packages (B) cannot be reconfigured again.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_BREAKS` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-breaks\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_CONFLICTS\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONFLICTS\r\n\n#\r\n\n#  Sets the `Conflicts` field of the Debian package.\r\n\n#  When one binary package declares a conflict with another using a `Conflicts`\r\n\n#  field, :code:`dpkg` will not allow them to be unpacked on the system at\r\n\n#  the same time.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_CONFLICTS` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-conflicts\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    This is a stronger restriction than\r\n\n#    :variable:`Breaks <CPACK_DEBIAN_PACKAGE_BREAKS>`, which prevents the\r\n\n#    broken package from being configured while the breaking package is in\r\n\n#    the \"Unpacked\" state but allows both packages to be unpacked at the same\r\n\n#    time.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_PROVIDES\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_PROVIDES\r\n\n#\r\n\n#  Sets the `Provides` field of the Debian package.\r\n\n#  A virtual package is one which appears in the `Provides` control field of\r\n\n#  another package.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_PROVIDES` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-relationships.html#s-virtual\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_REPLACES\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_REPLACES\r\n\n#\r\n\n#  Sets the `Replaces` field of the Debian package.\r\n\n#  Packages can declare in their control file that they should overwrite\r\n\n#  files in certain other packages, or completely replace other packages.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_REPLACES` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_RECOMMENDS\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_RECOMMENDS\r\n\n#\r\n\n#  Sets the `Recommends` field of the Debian package.\r\n\n#  Allows packages to declare a strong, but not absolute, dependency on other\r\n\n#  packages.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_RECOMMENDS` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_SUGGESTS\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_SUGGESTS\r\n\n#\r\n\n#  Sets the `Suggests` field of the Debian package.\r\n\n#  Allows packages to declare a suggested package install grouping.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_SUGGESTS` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See http://www.debian.org/doc/debian-policy/ch-relationships.html#s-binarydeps\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : OFF\r\n\n#\r\n\n#  Allows to generate shlibs control file automatically. Compatibility is defined by\r\n\n#  :variable:`CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY` variable value.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    Libraries are only considered if they have both library name and version\r\n\n#    set. This can be done by setting SOVERSION property with\r\n\n#    :command:`set_target_properties` command.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_GENERATE_SHLIBS_POLICY\r\n\n#\r\n\n#  Compatibility policy for auto-generated shlibs control file.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : \"=\"\r\n\n#\r\n\n#  Defines compatibility policy for auto-generated shlibs control file.\r\n\n#  Possible values: \"=\", \">=\"\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-sharedlibs-shlibdeps\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONTROL_EXTRA\r\n\n#\r\n\n#  This variable allow advanced user to add custom script to the\r\n\n#  control.tar.gz.\r\n\n#  Typical usage is for conffiles, postinst, postrm, prerm.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  Usage::\r\n\n#\r\n\n#   set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\r\n\n#       \"${CMAKE_CURRENT_SOURCE_DIR/prerm;${CMAKE_CURRENT_SOURCE_DIR}/postrm\")\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    The original permissions of the files will be used in the final\r\n\n#    package unless the variable\r\n\n#    :variable:`CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION` is set.\r\n\n#    In particular, the scripts should have the proper executable\r\n\n#    flag prior to the generation of the package.\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_CONTROL_STRICT_PERMISSION\r\n\n#\r\n\n#  This variable indicates if the Debian policy on control files should be\r\n\n#  strictly followed.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : FALSE\r\n\n#\r\n\n#  Usage::\r\n\n#\r\n\n#   set(CPACK_DEBIAN_PACKAGE_CONTROL_STRICT_PERMISSION TRUE)\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    This overrides the permissions on the original files, following the rules\r\n\n#    set by Debian policy\r\n\n#    https://www.debian.org/doc/debian-policy/ch-files.html#s-permissions-owners\r\n\n#\r\n\n# .. variable:: CPACK_DEBIAN_PACKAGE_SOURCE\r\n\n#               CPACK_DEBIAN_<COMPONENT>_PACKAGE_SOURCE\r\n\n#\r\n\n#  Sets the ``Source`` field of the binary Debian package.\r\n\n#  When the binary package name is not the same as the source package name\r\n\n#  (in particular when several components/binaries are generated from one\r\n\n#  source) the source from which the binary has been generated should be\r\n\n#  indicated with the field ``Source``.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   :\r\n\n#\r\n\n#    - An empty string for non-component based installations\r\n\n#    - :variable:`CPACK_DEBIAN_PACKAGE_SOURCE` for component-based\r\n\n#      installations.\r\n\n#\r\n\n#  See https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    This value is not interpreted. It is possible to pass an optional\r\n\n#    revision number of the referenced source package as well.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CPack script for creating Debian package\r\n\n# Author: Mathieu Malaterre\r\n\n#\r\n\n# http://wiki.debian.org/HowToPackageForDebian\r\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#extract library name and version for given shared object\r\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CPACK_DEBIAN_PACKAGE_SHLIBDEPS\r\n\n# If specify OFF, only user depends are used\r\n",
        "Line" : 558,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# per component automatic discover: some of the component might not have\r\n\n# binaries.\r\n",
        "Line" : 566,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# if set, overrides the global configuration\r\n",
        "Line" : 572,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Generating binary list - Get type of all install files\r\n",
        "Line" : 582,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Tell file(GLOB_RECURSE) not to follow directory symlinks\r\n\n# even if the project does not set this policy to NEW.\r\n",
        "Line" : 584,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# get file info so that we can determine if file is executable or not\r\n",
        "Line" : 595,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Only dynamically linked ELF files are included\r\n\n# Extract only file name infront of \":\"\r\n",
        "Line" : 608,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# dpkg-shlibdeps is a Debian utility for generating dependency list\r\n",
        "Line" : 624,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Check version of the dpkg-shlibdeps tool using CPackDEB method\r\n",
        "Line" : 628,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Create blank control file for running dpkg-shlibdeps\r\n\n# There might be some other way to invoke dpkg-shlibdeps without creating this file\r\n\n# but standard debian package should not have anything that can collide with this file or directory\r\n",
        "Line" : 647,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Create a DEBIAN directory so that dpkg-shlibdeps can find the package dir when resolving $ORIGIN.\r\n",
        "Line" : 653,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Add --ignore-missing-info if the tool supports it\r\n",
        "Line" : 656,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Execute dpkg-shlibdeps\r\n\n# --ignore-missing-info : allow dpkg-shlibdeps to run even if some libs do not belong to a package\r\n\n# -O : print to STDOUT\r\n",
        "Line" : 665,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# dpkg-shlibdeps will throw some warnings if some input files are not binary\r\n",
        "Line" : 675,
        "CharPositionInLine" : 10
      },
      "18" : {
        "Text" : "#Get rid of prefix generated by dpkg-shlibdeps\r\n",
        "Line" : 686,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Remove blank control file\r\n\n# Might not be safe if package actual contain file or directory named debian\r\n",
        "Line" : 693,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# remove temporary directory that was created only for dpkg-shlibdeps execution\r\n",
        "Line" : 697,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Let's define the control file found in debian package:\r\n",
        "Line" : 714,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Binary package:\r\n\n# http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-binarycontrolfiles\r\n",
        "Line" : 716,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# DEBIAN/control\r\n\n# debian policy enforce lower case for package name\r\n\n# Package: (mandatory)\r\n",
        "Line" : 719,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Version: (mandatory)\r\n",
        "Line" : 726,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Architecture: (mandatory)\r\n",
        "Line" : 734,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# There is no such thing as i686 architecture on debian, you should use i386 instead\r\n\n# $ dpkg --print-architecture\r\n",
        "Line" : 738,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Source: (optional)\r\n\n# in case several packages are constructed from a unique source\r\n\n# (multipackaging), the source may be indicated as well.\r\n\n# The source might contain a version if the generated package\r\n\n# version is different from the source version\r\n",
        "Line" : 751,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# have a look at get_property(result GLOBAL PROPERTY ENABLED_FEATURES),\r\n\n# this returns the successful find_package() calls, maybe this can help\r\n\n# Depends:\r\n\n# You should set: DEBIAN_PACKAGE_DEPENDS\r\n\n# TODO: automate 'objdump -p | grep NEEDED'\r\n",
        "Line" : 760,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# if per-component variable, overrides the global CPACK_DEBIAN_PACKAGE_${variable_type_}\r\n\n# automatic dependency discovery will be performed afterwards.\r\n",
        "Line" : 766,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# if set, overrides the global variable\r\n",
        "Line" : 772,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# at this point, the CPACK_DEBIAN_PACKAGE_DEPENDS is properly set\r\n\n# to the minimal dependency of the package\r\n\n# Append automatically discovered dependencies .\r\n",
        "Line" : 802,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Maintainer: (mandatory)\r\n",
        "Line" : 817,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Description: (mandatory)\r\n",
        "Line" : 825,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# component description overrides package description\r\n",
        "Line" : 836,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Section: (recommended)\r\n",
        "Line" : 847,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Priority: (recommended)\r\n",
        "Line" : 852,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Compression: (recommended)\r\n",
        "Line" : 870,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Recommends:\r\n\n# You should set: CPACK_DEBIAN_PACKAGE_RECOMMENDS\r\n",
        "Line" : 875,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Suggests:\r\n\n# You should set: CPACK_DEBIAN_PACKAGE_SUGGESTS\r\n",
        "Line" : 878,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\r\n\n# This variable allow advanced user to add custom script to the control.tar.gz (inside the .deb archive)\r\n\n# Typical examples are:\r\n\n# - conffiles\r\n\n# - postinst\r\n\n# - postrm\r\n\n# - prerm\r\n\n# Usage:\r\n\n# set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA\r\n\n#    \"${CMAKE_CURRENT_SOURCE_DIR/prerm;${CMAKE_CURRENT_SOURCE_DIR}/postrm\")\r\n",
        "Line" : 881,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Are we packaging components ?\r\n",
        "Line" : 892,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# override values with per component version if set\r\n",
        "Line" : 894,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# add ldconfig call in default postrm and postint\r\n",
        "Line" : 930,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# all files in CPACK_DEB_SHARED_OBJECT_FILES have dot at the beginning\r\n",
        "Line" : 934,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Patch package file name to be in corrent debian format:\r\n\n# <foo>_<VersionNumber>-<DebianRevisionNumber>_<DebianArchitecture>.deb\r\n",
        "Line" : 967,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# else() back compatibility - don't change the name\r\n",
        "Line" : 986,
        "CharPositionInLine" : 10
      },
      "47" : {
        "Text" : "# Print out some debug information if we were asked for that\r\n",
        "Line" : 988,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# For debian source packages:\r\n\n# debian/control\r\n\n# http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-sourcecontrolfiles\r\n",
        "Line" : 1002,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# .dsc\r\n\n# http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-debiansourcecontrolfiles\r\n",
        "Line" : 1006,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Builds-Depends:\r\n\n#if(NOT CPACK_DEBIAN_PACKAGE_BUILDS_DEPENDS)\r\n\n#  set(CPACK_DEBIAN_PACKAGE_BUILDS_DEPENDS\r\n\n#    \"debhelper (>> 5.0.0), libncurses5-dev, tcl8.4\"\r\n\n#  )\r\n\n#endif()\r\n",
        "Line" : 1009,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# move variables to parent scope so that they may be used to create debian package\r\n",
        "Line" : 1016,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 52
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackIFW.cmake" : {
      "ObjectId" : "89a95981ac44a31a6ff412c6351473b4fba5fc33",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackIFW\r\n\n# --------\r\n\n#\r\n\n# .. _QtIFW: http://doc.qt.io/qtinstallerframework/index.html\r\n\n#\r\n\n# This module looks for the location of the command line utilities supplied\r\n\n# with the Qt Installer Framework (QtIFW_).\r\n\n#\r\n\n# The module also defines several commands to control the behavior of the\r\n\n# CPack ``IFW`` generator.\r\n\n#\r\n\n#\r\n\n# Overview\r\n\n# ^^^^^^^^\r\n\n#\r\n\n# CPack ``IFW`` generator helps you to create online and offline\r\n\n# binary cross-platform installers with a graphical user interface.\r\n\n#\r\n\n# CPack IFW generator prepares project installation and generates configuration\r\n\n# and meta information for QtIFW_ tools.\r\n\n#\r\n\n# The QtIFW_ provides a set of tools and utilities to create\r\n\n# installers for the supported desktop Qt platforms: Linux, Microsoft Windows,\r\n\n# and Mac OS X.\r\n\n#\r\n\n# You should also install QtIFW_ to use CPack ``IFW`` generator.\r\n\n# If you don't use a default path for the installation, please set\r\n\n# the used path in the variable ``QTIFWDIR``.\r\n\n#\r\n\n# Variables\r\n\n# ^^^^^^^^^\r\n\n#\r\n\n# You can use the following variables to change behavior of CPack ``IFW``\r\n\n# generator.\r\n\n#\r\n\n# Debug\r\n\n# \"\"\"\"\"\"\r\n\n#\r\n\n# .. variable:: CPACK_IFW_VERBOSE\r\n\n#\r\n\n#  Set to ``ON`` to enable addition debug output.\r\n\n#  By default is ``OFF``.\r\n\n#\r\n\n# Package\r\n\n# \"\"\"\"\"\"\"\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_TITLE\r\n\n#\r\n\n#  Name of the installer as displayed on the title bar.\r\n\n#  By default used :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY`.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_PUBLISHER\r\n\n#\r\n\n#  Publisher of the software (as shown in the Windows Control Panel).\r\n\n#  By default used :variable:`CPACK_PACKAGE_VENDOR`.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PRODUCT_URL\r\n\n#\r\n\n#  URL to a page that contains product information on your web site.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_ICON\r\n\n#\r\n\n#  Filename for a custom installer icon. The actual file is '.icns' (Mac OS X),\r\n\n#  '.ico' (Windows). No functionality on Unix.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_WINDOW_ICON\r\n\n#\r\n\n#  Filename for a custom window icon in PNG format for the Installer\r\n\n#  application.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_LOGO\r\n\n#\r\n\n#  Filename for a logo is used as QWizard::LogoPixmap.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_WATERMARK\r\n\n#\r\n\n#  Filename for a watermark is used as QWizard::WatermarkPixmap.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_BANNER\r\n\n#\r\n\n#  Filename for a banner is used as QWizard::BannerPixmap.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_BACKGROUND\r\n\n#\r\n\n#  Filename for an image used as QWizard::BackgroundPixmap (only used by MacStyle).\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_WIZARD_STYLE\r\n\n#\r\n\n#  Wizard style to be used (\"Modern\", \"Mac\", \"Aero\" or \"Classic\").\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_WIZARD_DEFAULT_WIDTH\r\n\n#\r\n\n#  Default width of the wizard in pixels. Setting a banner image will override this.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_WIZARD_DEFAULT_HEIGHT\r\n\n#\r\n\n#  Default height of the wizard in pixels. Setting a watermark image will override this.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_TITLE_COLOR\r\n\n#\r\n\n#  Color of the titles and subtitles (takes an HTML color code, such as \"#88FF33\").\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_START_MENU_DIRECTORY\r\n\n#\r\n\n#  Name of the default program group for the product in the Windows Start menu.\r\n\n#\r\n\n#  By default used :variable:`CPACK_IFW_PACKAGE_NAME`.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_TARGET_DIRECTORY\r\n\n#\r\n\n#  Default target directory for installation.\r\n\n#  By default used\r\n\n#  \"@ApplicationsDir@/:variable:`CPACK_PACKAGE_INSTALL_DIRECTORY`\"\r\n\n#\r\n\n#  You can use predefined variables.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_ADMIN_TARGET_DIRECTORY\r\n\n#\r\n\n#  Default target directory for installation with administrator rights.\r\n\n#\r\n\n#  You can use predefined variables.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_GROUP\r\n\n#\r\n\n#  The group, which will be used to configure the root package\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_NAME\r\n\n#\r\n\n#  The root package name, which will be used if configuration group is not\r\n\n#  specified\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_NAME\r\n\n#\r\n\n#  Filename of the generated maintenance tool.\r\n\n#  The platform-specific executable file extension is appended.\r\n\n#\r\n\n#  By default used QtIFW_ defaults (``maintenancetool``).\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_MAINTENANCE_TOOL_INI_FILE\r\n\n#\r\n\n#  Filename for the configuration of the generated maintenance tool.\r\n\n#\r\n\n#  By default used QtIFW_ defaults (``maintenancetool.ini``).\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_ALLOW_NON_ASCII_CHARACTERS\r\n\n#\r\n\n#  Set to ``ON`` if the installation path can contain non-ASCII characters.\r\n\n#\r\n\n#  Is ``ON`` for QtIFW_ less 2.0 tools.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_ALLOW_SPACE_IN_PATH\r\n\n#\r\n\n#  Set to ``OFF`` if the installation path cannot contain space characters.\r\n\n#\r\n\n#  Is ``ON`` for QtIFW_ less 2.0 tools.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_CONTROL_SCRIPT\r\n\n#\r\n\n#  Filename for a custom installer control script.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGE_RESOURCES\r\n\n#\r\n\n#  List of additional resources ('.qrc' files) to include in the installer\r\n\n#  binary.\r\n\n#\r\n\n#  You can use :command:`cpack_ifw_add_package_resources` command to resolve\r\n\n#  relative paths.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_REPOSITORIES_ALL\r\n\n#\r\n\n#  The list of remote repositories.\r\n\n#\r\n\n#  The default value of this variable is computed by CPack and contains\r\n\n#  all repositories added with command :command:`cpack_ifw_add_repository`\r\n\n#  or updated with command :command:`cpack_ifw_update_repository`.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_DOWNLOAD_ALL\r\n\n#\r\n\n#  If this is ``ON`` all components will be downloaded.\r\n\n#  By default is ``OFF`` or used value\r\n\n#  from ``CPACK_DOWNLOAD_ALL`` if set\r\n\n#\r\n\n# Components\r\n\n# \"\"\"\"\"\"\"\"\"\"\r\n\n#\r\n\n# .. variable:: CPACK_IFW_RESOLVE_DUPLICATE_NAMES\r\n\n#\r\n\n#  Resolve duplicate names when installing components with groups.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_PACKAGES_DIRECTORIES\r\n\n#\r\n\n#  Additional prepared packages dirs that will be used to resolve\r\n\n#  dependent components.\r\n\n#\r\n\n# Tools\r\n\n# \"\"\"\"\"\"\"\"\r\n\n#\r\n\n# .. variable:: CPACK_IFW_FRAMEWORK_VERSION\r\n\n#\r\n\n#  The version of used QtIFW_ tools.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_BINARYCREATOR_EXECUTABLE\r\n\n#\r\n\n#  The path to \"binarycreator\" command line client.\r\n\n#\r\n\n#  This variable is cached and can be configured user if need.\r\n\n#\r\n\n# .. variable:: CPACK_IFW_REPOGEN_EXECUTABLE\r\n\n#\r\n\n#  The path to \"repogen\" command line client.\r\n\n#\r\n\n#  This variable is cached and can be configured user if need.\r\n\n#\r\n\n# Commands\r\n\n# ^^^^^^^^^\r\n\n#\r\n\n# The module defines the following commands:\r\n\n#\r\n\n# .. command:: cpack_ifw_configure_component\r\n\n#\r\n\n#   Sets the arguments specific to the CPack IFW generator.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     cpack_ifw_configure_component(<compname> [COMMON] [ESSENTIAL] [VIRTUAL]\r\n\n#                         [FORCED_INSTALLATION] [REQUIRES_ADMIN_RIGHTS]\r\n\n#                         [NAME <name>]\r\n\n#                         [DISPLAY_NAME <display_name>]\r\n\n#                         [DESCRIPTION <description>]\r\n\n#                         [UPDATE_TEXT <update_text>]\r\n\n#                         [VERSION <version>]\r\n\n#                         [RELEASE_DATE <release_date>]\r\n\n#                         [SCRIPT <script>]\r\n\n#                         [PRIORITY|SORTING_PRIORITY <sorting_priority>] # Note: PRIORITY is deprecated\r\n\n#                         [DEPENDS|DEPENDENCIES <com_id> ...]\r\n\n#                         [AUTO_DEPEND_ON <comp_id> ...]\r\n\n#                         [LICENSES <display_name> <file_path> ...]\r\n\n#                         [DEFAULT <value>]\r\n\n#                         [USER_INTERFACES <file_path> <file_path> ...]\r\n\n#                         [TRANSLATIONS <file_path> <file_path> ...])\r\n\n#\r\n\n#   This command should be called after :command:`cpack_add_component` command.\r\n\n#\r\n\n#   ``COMMON``\r\n\n#     if set, then the component will be packaged and installed as part\r\n\n#     of a group to which it belongs.\r\n\n#\r\n\n#   ``ESSENTIAL``\r\n\n#     if set, then the package manager stays disabled until that\r\n\n#     component is updated.\r\n\n#\r\n\n#   ``VIRTUAL``\r\n\n#     if set, then the component will be hidden from the installer.\r\n\n#     It is a equivalent of the ``HIDDEN`` option from the\r\n\n#     :command:`cpack_add_component` command.\r\n\n#\r\n\n#   ``FORCED_INSTALLATION``\r\n\n#     if set, then the component must always be installed.\r\n\n#     It is a equivalent of the ``REQUARED`` option from the\r\n\n#     :command:`cpack_add_component` command.\r\n\n#\r\n\n#   ``REQUIRES_ADMIN_RIGHTS``\r\n\n#     set it if the component needs to be installed with elevated permissions.\r\n\n#\r\n\n#   ``NAME``\r\n\n#     is used to create domain-like identification for this component.\r\n\n#     By default used origin component name.\r\n\n#\r\n\n#   ``DISPLAY_NAME``\r\n\n#     set to rewrite original name configured by\r\n\n#     :command:`cpack_add_component` command.\r\n\n#\r\n\n#   ``DESCRIPTION``\r\n\n#     set to rewrite original description configured by\r\n\n#     :command:`cpack_add_component` command.\r\n\n#\r\n\n#   ``UPDATE_TEXT``\r\n\n#     will be added to the component description if this is an update to\r\n\n#     the component.\r\n\n#\r\n\n#   ``VERSION``\r\n\n#     is version of component.\r\n\n#     By default used :variable:`CPACK_PACKAGE_VERSION`.\r\n\n#\r\n\n#   ``RELEASE_DATE``\r\n\n#     keep empty to auto generate.\r\n\n#\r\n\n#   ``SCRIPT``\r\n\n#     is a relative or absolute path to operations script\r\n\n#     for this component.\r\n\n#\r\n\n#   ``PRIORITY`` | ``SORTING_PRIORITY``\r\n\n#     is priority of the component in the tree.\r\n\n#     The ``PRIORITY`` option is deprecated and will be removed in a future\r\n\n#     version of CMake. Please use ``SORTING_PRIORITY`` option instead.\r\n\n#\r\n\n#   ``DEPENDS`` | ``DEPENDENCIES``\r\n\n#     list of dependency component or component group identifiers in\r\n\n#     QtIFW_ style.\r\n\n#\r\n\n#   ``AUTO_DEPEND_ON``\r\n\n#     list of identifiers of component or component group in QtIFW_ style\r\n\n#     that this component has an automatic dependency on.\r\n\n#\r\n\n#   ``LICENSES``\r\n\n#     pair of <display_name> and <file_path> of license text for this\r\n\n#     component. You can specify more then one license.\r\n\n#\r\n\n#   ``DEFAULT``\r\n\n#     Possible values are: TRUE, FALSE, and SCRIPT.\r\n\n#     Set to FALSE to disable the component in the installer or to SCRIPT\r\n\n#     to resolved during runtime (don't forget add the file of the script\r\n\n#     as a value of the ``SCRIPT`` option).\r\n\n#\r\n\n#   ``USER_INTERFACES``\r\n\n#     is a list of <file_path> ('.ui' files) representing pages to load.\r\n\n#\r\n\n#   ``TRANSLATIONS``\r\n\n#     is a list of <file_path> ('.qm' files) representing translations to load.\r\n\n#\r\n\n#\r\n\n# .. command:: cpack_ifw_configure_component_group\r\n\n#\r\n\n#   Sets the arguments specific to the CPack IFW generator.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     cpack_ifw_configure_component_group(<groupname> [VIRTUAL]\r\n\n#                         [FORCED_INSTALLATION] [REQUIRES_ADMIN_RIGHTS]\r\n\n#                         [NAME <name>]\r\n\n#                         [DISPLAY_NAME <display_name>]\r\n\n#                         [DESCRIPTION <description>]\r\n\n#                         [UPDATE_TEXT <update_text>]\r\n\n#                         [VERSION <version>]\r\n\n#                         [RELEASE_DATE <release_date>]\r\n\n#                         [SCRIPT <script>]\r\n\n#                         [PRIORITY|SORTING_PRIORITY <sorting_priority>] # Note: PRIORITY is deprecated\r\n\n#                         [DEPENDS|DEPENDENCIES <com_id> ...]\r\n\n#                         [AUTO_DEPEND_ON <comp_id> ...]\r\n\n#                         [LICENSES <display_name> <file_path> ...]\r\n\n#                         [DEFAULT <value>]\r\n\n#                         [USER_INTERFACES <file_path> <file_path> ...]\r\n\n#                         [TRANSLATIONS <file_path> <file_path> ...])\r\n\n#\r\n\n#   This command should be called after :command:`cpack_add_component_group`\r\n\n#   command.\r\n\n#\r\n\n#   ``VIRTUAL``\r\n\n#     if set, then the group will be hidden from the installer.\r\n\n#     Note that setting this on a root component does not work.\r\n\n#\r\n\n#   ``FORCED_INSTALLATION``\r\n\n#     if set, then the group must always be installed.\r\n\n#\r\n\n#   ``REQUIRES_ADMIN_RIGHTS``\r\n\n#     set it if the component group needs to be installed with elevated\r\n\n#     permissions.\r\n\n#\r\n\n#   ``NAME``\r\n\n#     is used to create domain-like identification for this component group.\r\n\n#     By default used origin component group name.\r\n\n#\r\n\n#   ``DISPLAY_NAME``\r\n\n#     set to rewrite original name configured by\r\n\n#     :command:`cpack_add_component_group` command.\r\n\n#\r\n\n#   ``DESCRIPTION``\r\n\n#     set to rewrite original description configured by\r\n\n#     :command:`cpack_add_component_group` command.\r\n\n#\r\n\n#   ``UPDATE_TEXT``\r\n\n#     will be added to the component group description if this is an update to\r\n\n#     the component group.\r\n\n#\r\n\n#   ``VERSION``\r\n\n#     is version of component group.\r\n\n#     By default used :variable:`CPACK_PACKAGE_VERSION`.\r\n\n#\r\n\n#   ``RELEASE_DATE``\r\n\n#     keep empty to auto generate.\r\n\n#\r\n\n#   ``SCRIPT``\r\n\n#     is a relative or absolute path to operations script\r\n\n#     for this component group.\r\n\n#\r\n\n#   ``PRIORITY`` | ``SORTING_PRIORITY``\r\n\n#     is priority of the component group in the tree.\r\n\n#     The ``PRIORITY`` option is deprecated and will be removed in a future\r\n\n#     version of CMake. Please use ``SORTING_PRIORITY`` option instead.\r\n\n#\r\n\n#   ``DEPENDS`` | ``DEPENDENCIES``\r\n\n#     list of dependency component or component group identifiers in\r\n\n#     QtIFW_ style.\r\n\n#\r\n\n#   ``AUTO_DEPEND_ON``\r\n\n#     list of identifiers of component or component group in QtIFW_ style\r\n\n#     that this component group has an automatic dependency on.\r\n\n#\r\n\n#   ``LICENSES``\r\n\n#     pair of <display_name> and <file_path> of license text for this\r\n\n#     component group. You can specify more then one license.\r\n\n#\r\n\n#   ``DEFAULT``\r\n\n#     Possible values are: TRUE, FALSE, and SCRIPT.\r\n\n#     Set to TRUE to preselect the group in the installer\r\n\n#     (this takes effect only on groups that have no visible child components)\r\n\n#     or to SCRIPT to resolved during runtime (don't forget add the file of\r\n\n#     the script as a value of the ``SCRIPT`` option).\r\n\n#\r\n\n#   ``USER_INTERFACES``\r\n\n#     is a list of <file_path> ('.ui' files) representing pages to load.\r\n\n#\r\n\n#   ``TRANSLATIONS``\r\n\n#     is a list of <file_path> ('.qm' files) representing translations to load.\r\n\n#\r\n\n#\r\n\n# .. command:: cpack_ifw_add_repository\r\n\n#\r\n\n#   Add QtIFW_ specific remote repository to binary installer.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     cpack_ifw_add_repository(<reponame> [DISABLED]\r\n\n#                         URL <url>\r\n\n#                         [USERNAME <username>]\r\n\n#                         [PASSWORD <password>]\r\n\n#                         [DISPLAY_NAME <display_name>])\r\n\n#\r\n\n#   This command will also add the <reponame> repository\r\n\n#   to a variable :variable:`CPACK_IFW_REPOSITORIES_ALL`.\r\n\n#\r\n\n#   ``DISABLED``\r\n\n#     if set, then the repository will be disabled by default.\r\n\n#\r\n\n#   ``URL``\r\n\n#     is points to a list of available components.\r\n\n#\r\n\n#   ``USERNAME``\r\n\n#     is used as user on a protected repository.\r\n\n#\r\n\n#   ``PASSWORD``\r\n\n#     is password to use on a protected repository.\r\n\n#\r\n\n#   ``DISPLAY_NAME``\r\n\n#     is string to display instead of the URL.\r\n\n#\r\n\n#\r\n\n# .. command:: cpack_ifw_update_repository\r\n\n#\r\n\n#   Update QtIFW_ specific repository from remote repository.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     cpack_ifw_update_repository(<reponame>\r\n\n#                         [[ADD|REMOVE] URL <url>]|\r\n\n#                          [REPLACE OLD_URL <old_url> NEW_URL <new_url>]]\r\n\n#                         [USERNAME <username>]\r\n\n#                         [PASSWORD <password>]\r\n\n#                         [DISPLAY_NAME <display_name>])\r\n\n#\r\n\n#   This command will also add the <reponame> repository\r\n\n#   to a variable :variable:`CPACK_IFW_REPOSITORIES_ALL`.\r\n\n#\r\n\n#   ``URL``\r\n\n#     is points to a list of available components.\r\n\n#\r\n\n#   ``OLD_URL``\r\n\n#     is points to a list that will replaced.\r\n\n#\r\n\n#   ``NEW_URL``\r\n\n#     is points to a list that will replace to.\r\n\n#\r\n\n#   ``USERNAME``\r\n\n#     is used as user on a protected repository.\r\n\n#\r\n\n#   ``PASSWORD``\r\n\n#     is password to use on a protected repository.\r\n\n#\r\n\n#   ``DISPLAY_NAME``\r\n\n#     is string to display instead of the URL.\r\n\n#\r\n\n#\r\n\n# .. command:: cpack_ifw_add_package_resources\r\n\n#\r\n\n#   Add additional resources in the installer binary.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     cpack_ifw_add_package_resources(<file_path> <file_path> ...)\r\n\n#\r\n\n#   This command will also add the specified files\r\n\n#   to a variable :variable:`CPACK_IFW_PACKAGE_RESOURCES`.\r\n\n#\r\n\n#\r\n\n# Example usage\r\n\n# ^^^^^^^^^^^^^\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    set(CPACK_PACKAGE_NAME \"MyPackage\")\r\n\n#    set(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"MyPackage Installation Example\")\r\n\n#    set(CPACK_PACKAGE_VERSION \"1.0.0\") # Version of installer\r\n\n#\r\n\n#    include(CPack)\r\n\n#    include(CPackIFW)\r\n\n#\r\n\n#    cpack_add_component(myapp\r\n\n#        DISPLAY_NAME \"MyApp\"\r\n\n#        DESCRIPTION \"My Application\")\r\n\n#    cpack_ifw_configure_component(myapp\r\n\n#        VERSION \"1.2.3\" # Version of component\r\n\n#        SCRIPT \"operations.qs\")\r\n\n#    cpack_add_component(mybigplugin\r\n\n#        DISPLAY_NAME \"MyBigPlugin\"\r\n\n#        DESCRIPTION \"My Big Downloadable Plugin\"\r\n\n#        DOWNLOADED)\r\n\n#    cpack_ifw_add_repository(myrepo\r\n\n#        URL \"http://example.com/ifw/repo/myapp\"\r\n\n#        DISPLAY_NAME \"My Application Repository\")\r\n\n#\r\n\n#\r\n\n# Online installer\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# By default CPack IFW generator makes offline installer. This means that all\r\n\n# components will be packaged into a binary file.\r\n\n#\r\n\n# To make a component downloaded, you must set the ``DOWNLOADED`` option in\r\n\n# :command:`cpack_add_component`.\r\n\n#\r\n\n# Then you would use the command :command:`cpack_configure_downloads`.\r\n\n# If you set ``ALL`` option all components will be downloaded.\r\n\n#\r\n\n# You also can use command :command:`cpack_ifw_add_repository` and\r\n\n# variable :variable:`CPACK_IFW_DOWNLOAD_ALL` for more specific configuration.\r\n\n#\r\n\n# CPack IFW generator creates \"repository\" dir in current binary dir. You\r\n\n# would copy content of this dir to specified ``site`` (``url``).\r\n\n#\r\n\n# See Also\r\n\n# ^^^^^^^^\r\n\n#\r\n\n# Qt Installer Framework Manual:\r\n\n#\r\n\n# * Index page:\r\n\n#   http://doc.qt.io/qtinstallerframework/index.html\r\n\n#\r\n\n# * Component Scripting:\r\n\n#   http://doc.qt.io/qtinstallerframework/scripting.html\r\n\n#\r\n\n# * Predefined Variables:\r\n\n#   http://doc.qt.io/qtinstallerframework/scripting.html#predefined-variables\r\n\n#\r\n\n# * Promoting Updates:\r\n\n#   http://doc.qt.io/qtinstallerframework/ifw-updates.html\r\n\n#\r\n\n# Download Qt Installer Framework for you platform from Qt site:\r\n\n#  http://download.qt.io/official_releases/qt-installer-framework\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\r\n\n# Search Qt Installer Framework tools\r\n\n#=============================================================================\r\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default path\r\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# QtSDK\r\n",
        "Line" : 592,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Second branch\r\n",
        "Line" : 594,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# First branch\r\n",
        "Line" : 596,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Look for 'binarycreator'\r\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Look for 'repogen'\r\n",
        "Line" : 638,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Look for 'installerbase'\r\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Look for 'devtool' (appeared in the second branch)\r\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\r\n\n## Next code is included only once\r\n\n#\r\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#=============================================================================\r\n\n# Framework version\r\n\n#=============================================================================\r\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#=============================================================================\r\n\n# Macro definition\r\n\n#=============================================================================\r\n",
        "Line" : 696,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Macro definition based on CPackComponent\r\n",
        "Line" : 700,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Resolve full filename for script file\r\n",
        "Line" : 706,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Resolve full path to lisense file\r\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Resolve full path to a list of provided files\r\n",
        "Line" : 738,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Macro for configure component\r\n",
        "Line" : 754,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Macro for configure group\r\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Macro for adding repository\r\n",
        "Line" : 829,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Macro for updating repository\r\n",
        "Line" : 868,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Macro for adding resources\r\n",
        "Line" : 913,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Resolve package control script\r\n",
        "Line" : 924,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# NOT CPackIFW_CMake_INCLUDED\r\n",
        "Line" : 927,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 25
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackIFWConfigureFile.cmake" : {
      "ObjectId" : "67f0e9c31a1c669eb7af73082aadfbbd1185c73b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackIFWConfigureFile\r\n\n# ---------------------\r\n\n#\r\n\n# The module defines :command:`configure_file` similar command to\r\n\n# configure file templates prepared in QtIFW/SDK/Creator style.\r\n\n#\r\n\n#\r\n\n# Commands\r\n\n# ^^^^^^^^\r\n\n#\r\n\n# The module defines the following commands:\r\n\n#\r\n\n# .. command:: cpack_ifw_configure_file\r\n\n#\r\n\n#   Copy a file to another location and modify its contents.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     cpack_ifw_configure_file(<input> <output>)\r\n\n#\r\n\n#   Copies an ``<input>`` file to an ``<output>`` file and substitutes variable\r\n\n#   values referenced as ``%{VAR}`` or ``%VAR%`` in the input file content.\r\n\n#   Each variable reference will be replaced with the current value of the\r\n\n#   variable, or the empty string if the variable is not defined.\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE: This file used to himself packaging via CPack IFW generator and\r\n\n# should be compatible with minimal CMake version defined in\r\n\n# ../CMakeLists.txt file.\r\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT DEFINED CPackIFWConfigureFile_CMake_INCLUDED\r\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackNSIS.cmake" : {
      "ObjectId" : "a57d03b5056199ec6b488eb731cc975f13d213e1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackNSIS\r\n\n# ---------\r\n\n#\r\n\n# CPack NSIS generator specific options\r\n\n#\r\n\n# Variables specific to CPack NSIS generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variables are specific to the graphical installers built\r\n\n# on Windows using the Nullsoft Installation System.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_INSTALL_ROOT\r\n\n#\r\n\n#  The default installation directory presented to the end user by the NSIS\r\n\n#  installer is under this root dir. The full directory presented to the end\r\n\n#  user is: ${CPACK_NSIS_INSTALL_ROOT}/${CPACK_PACKAGE_INSTALL_DIRECTORY}\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_MUI_ICON\r\n\n#\r\n\n#  An icon filename.  The name of a ``*.ico`` file used as the main icon for the\r\n\n#  generated install program.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_MUI_UNIICON\r\n\n#\r\n\n#  An icon filename.  The name of a ``*.ico`` file used as the main icon for the\r\n\n#  generated uninstall program.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_INSTALLER_MUI_ICON_CODE\r\n\n#\r\n\n#  undocumented.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_MUI_WELCOMEFINISHPAGE_BITMAP\r\n\n#\r\n\n#  The filename of a bitmap to use as the NSIS MUI_WELCOMEFINISHPAGE_BITMAP.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_MUI_UNWELCOMEFINISHPAGE_BITMAP\r\n\n#\r\n\n#  The filename of a bitmap to use as the NSIS MUI_UNWELCOMEFINISHPAGE_BITMAP.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_EXTRA_PREINSTALL_COMMANDS\r\n\n#\r\n\n#  Extra NSIS commands that will be added to the beginning of the install\r\n\n#  Section, before your install tree is available on the target system.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_EXTRA_INSTALL_COMMANDS\r\n\n#\r\n\n#  Extra NSIS commands that will be added to the end of the install Section,\r\n\n#  after your install tree is available on the target system.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS\r\n\n#\r\n\n#  Extra NSIS commands that will be added to the uninstall Section, before\r\n\n#  your install tree is removed from the target system.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_COMPRESSOR\r\n\n#\r\n\n#  The arguments that will be passed to the NSIS SetCompressor command.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL\r\n\n#\r\n\n#  Ask about uninstalling previous versions first.  If this is set to \"ON\",\r\n\n#  then an installer will look for previous installed versions and if one is\r\n\n#  found, ask the user whether to uninstall it before proceeding with the\r\n\n#  install.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_MODIFY_PATH\r\n\n#\r\n\n#  Modify PATH toggle.  If this is set to \"ON\", then an extra page will appear\r\n\n#  in the installer that will allow the user to choose whether the program\r\n\n#  directory should be added to the system PATH variable.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_DISPLAY_NAME\r\n\n#\r\n\n#  The display name string that appears in the Windows Add/Remove Program\r\n\n#  control panel\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_PACKAGE_NAME\r\n\n#\r\n\n#  The title displayed at the top of the installer.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_INSTALLED_ICON_NAME\r\n\n#\r\n\n#  A path to the executable that contains the installer icon.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_HELP_LINK\r\n\n#\r\n\n#  URL to a web site providing assistance in installing your application.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_URL_INFO_ABOUT\r\n\n#\r\n\n#  URL to a web site providing more information about your application.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_CONTACT\r\n\n#\r\n\n#  Contact information for questions and comments about the installation\r\n\n#  process.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_<compName>_INSTALL_DIRECTORY\r\n\n#\r\n\n#  Custom install directory for the specified component <compName> instead\r\n\n#  of $INSTDIR.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_CREATE_ICONS_EXTRA\r\n\n#\r\n\n#  Additional NSIS commands for creating start menu shortcuts.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_DELETE_ICONS_EXTRA\r\n\n#\r\n\n#  Additional NSIS commands to uninstall start menu shortcuts.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_EXECUTABLES_DIRECTORY\r\n\n#\r\n\n#  Creating NSIS start menu links assumes that they are in 'bin' unless this\r\n\n#  variable is set.  For example, you would set this to 'exec' if your\r\n\n#  executables are in an exec directory.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_MUI_FINISHPAGE_RUN\r\n\n#\r\n\n#  Specify an executable to add an option to run on the finish page of the\r\n\n#  NSIS installer.\r\n\n#\r\n\n# .. variable:: CPACK_NSIS_MENU_LINKS\r\n\n#\r\n\n#  Specify links in [application] menu.  This should contain a list of pair\r\n\n#  \"link\" \"link name\". The link may be an URL or a path relative to\r\n\n#  installation prefix.  Like::\r\n\n#\r\n\n#   set(CPACK_NSIS_MENU_LINKS\r\n\n#       \"doc/cmake-@CMake_VERSION_MAJOR@.@CMake_VERSION_MINOR@/cmake.html\"\r\n\n#       \"CMake Help\" \"https://cmake.org\" \"CMake Web Site\")\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FIXME we should put NSIS specific code here\r\n\n#FIXME but I'm not doing it because I'm not able to test it...\r\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackPackageMaker.cmake" : {
      "ObjectId" : "fb104a04e49220c9b5d20054116998884a7341f7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackPackageMaker\r\n\n# -----------------\r\n\n#\r\n\n# PackageMaker CPack generator (Mac OS X).\r\n\n#\r\n\n# Variables specific to CPack PackageMaker generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variable is specific to installers built on Mac\r\n\n# OS X using PackageMaker:\r\n\n#\r\n\n# .. variable:: CPACK_OSX_PACKAGE_VERSION\r\n\n#\r\n\n#  The version of Mac OS X that the resulting PackageMaker archive should be\r\n\n#  compatible with. Different versions of Mac OS X support different\r\n\n#  features. For example, CPack can only build component-based installers for\r\n\n#  Mac OS X 10.4 or newer, and can only build installers that download\r\n\n#  component son-the-fly for Mac OS X 10.5 or newer. If left blank, this value\r\n\n#  will be set to the minimum version of Mac OS X that supports the requested\r\n\n#  features. Set this variable to some value (e.g., 10.4) only if you want to\r\n\n#  guarantee that your installer will work on that version of Mac OS X, and\r\n\n#  don't mind missing extra features available in the installer shipping with\r\n\n#  later versions of Mac OS X.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackProductBuild.cmake" : {
      "ObjectId" : "be5d5799c2303ccf34c225e04002770e85c69323",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackProductBuild\r\n\n# -----------------\r\n\n#\r\n\n# productbuild CPack generator (Mac OS X).\r\n\n#\r\n\n# Variables specific to CPack productbuild generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variable is specific to installers built on Mac\r\n\n# OS X using productbuild:\r\n\n#\r\n\n# .. variable:: CPACK_COMMAND_PRODUCTBUILD\r\n\n#\r\n\n#  Path to the productbuild(1) command used to generate a product archive for\r\n\n#  the OS X Installer or Mac App Store.  This variable can be used to override\r\n\n#  the automatically detected command (or specify its location if the\r\n\n#  auto-detection fails to find it.)\r\n\n#\r\n\n# .. variable:: CPACK_PRODUCTBUILD_IDENTITY_NAME\r\n\n#\r\n\n#  Adds a digital signature to the resulting package.\r\n\n#\r\n\n#\r\n\n# .. variable:: CPACK_PRODUCTBUILD_KEYCHAIN_PATH\r\n\n#\r\n\n#  Specify a specific keychain to search for the signing identity.\r\n\n#\r\n\n#\r\n\n# .. variable:: CPACK_COMMAND_PKGBUILD\r\n\n#\r\n\n#  Path to the pkgbuild(1) command used to generate an OS X component package\r\n\n#  on OS X.  This variable can be used to override the automatically detected\r\n\n#  command (or specify its location if the auto-detection fails to find it.)\r\n\n#\r\n\n#\r\n\n# .. variable:: CPACK_PKGBUILD_IDENTITY_NAME\r\n\n#\r\n\n#  Adds a digital signature to the resulting package.\r\n\n#\r\n\n#\r\n\n# .. variable:: CPACK_PKGBUILD_KEYCHAIN_PATH\r\n\n#\r\n\n#  Specify a specific keychain to search for the signing identity.\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackRPM.cmake" : {
      "ObjectId" : "ab15fcd920f06e2bd29069bd62c298a768e71e86",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackRPM\r\n\n# --------\r\n\n#\r\n\n# The built in (binary) CPack RPM generator (Unix only)\r\n\n#\r\n\n# Variables specific to CPack RPM generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# CPackRPM may be used to create RPM packages using :module:`CPack`.\r\n\n# CPackRPM is a :module:`CPack` generator thus it uses the ``CPACK_XXX``\r\n\n# variables used by :module:`CPack`.\r\n\n#\r\n\n# CPackRPM has specific features which are controlled by the specifics\r\n\n# :code:`CPACK_RPM_XXX` variables.\r\n\n#\r\n\n# :code:`CPACK_RPM_<COMPONENT>_XXXX` variables may be used in order to have\r\n\n# **component** specific values.  Note however that ``<COMPONENT>`` refers to the\r\n\n# **grouping name** written in upper case. It may be either a component name or\r\n\n# a component GROUP name. Usually those variables correspond to RPM spec file\r\n\n# entities. One may find information about spec files here\r\n\n# http://www.rpm.org/wiki/Docs\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  `<COMPONENT>` part of variables is preferred to be in upper case (for e.g. if\r\n\n#  component is named `foo` then use `CPACK_RPM_FOO_XXXX` variable name format)\r\n\n#  as is with other `CPACK_<COMPONENT>_XXXX` variables.\r\n\n#  For the purposes of back compatibility (CMake/CPack version 3.5 and lower)\r\n\n#  support for same cased component (e.g. `fOo` would be used as\r\n\n#  `CPACK_RPM_fOo_XXXX`) is still supported for variables defined in older\r\n\n#  versions of CMake/CPack but is not guaranteed for variables that\r\n\n#  will be added in the future. For the sake of back compatibility same cased\r\n\n#  component variables also override upper cased versions where both are\r\n\n#  present.\r\n\n#\r\n\n# Here are some CPackRPM wiki resources that are here for historic reasons and\r\n\n# are no longer maintained but may still prove useful:\r\n\n#\r\n\n#  - https://cmake.org/Wiki/CMake:CPackConfiguration\r\n\n#  - https://cmake.org/Wiki/CMake:CPackPackageGenerators#RPM_.28Unix_Only.29\r\n\n#\r\n\n# List of CPackRPM specific variables:\r\n\n#\r\n\n# .. variable:: CPACK_RPM_COMPONENT_INSTALL\r\n\n#\r\n\n#  Enable component packaging for CPackRPM\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : OFF\r\n\n#\r\n\n#  If enabled (ON) multiple packages are generated. By default a single package\r\n\n#  containing files of all components is generated.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_SUMMARY\r\n\n#               CPACK_RPM_<component>_PACKAGE_SUMMARY\r\n\n#\r\n\n#  The RPM package summary.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : :variable:`CPACK_PACKAGE_DESCRIPTION_SUMMARY`\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_NAME\r\n\n#               CPACK_RPM_<component>_PACKAGE_NAME\r\n\n#\r\n\n#  The RPM package name.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : :variable:`CPACK_PACKAGE_NAME`\r\n\n#\r\n\n# .. variable:: CPACK_RPM_FILE_NAME\r\n\n#               CPACK_RPM_<component>_FILE_NAME\r\n\n#\r\n\n#  Package file name.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : ``<CPACK_PACKAGE_FILE_NAME>[-<component>].rpm`` with spaces\r\n\n#                replaced by '-'\r\n\n#\r\n\n#  This may be set to ``RPM-DEFAULT`` to allow rpmbuild tool to generate package\r\n\n#  file name by itself.\r\n\n#  Alternatively provided package file name must end with ``.rpm`` suffix.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    By using user provided spec file, rpm macro extensions such as for\r\n\n#    generating debuginfo packages or by simply using multiple components more\r\n\n#    than one rpm file may be generated, either from a single spec file or from\r\n\n#    multiple spec files (each component execution produces it's own spec file).\r\n\n#    In such cases duplicate file names may occur as a result of this variable\r\n\n#    setting or spec file content structure. Duplicate files get overwritten\r\n\n#    and it is up to the packager to set the variables in a manner that will\r\n\n#    prevent such errors.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_MAIN_COMPONENT\r\n\n#\r\n\n#  Main component that is packaged without component suffix.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  This variable can be set to any component or group name so that component or\r\n\n#  group rpm package is generated without component suffix in filename and\r\n\n#  package name.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_VERSION\r\n\n#\r\n\n#  The RPM package version.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : :variable:`CPACK_PACKAGE_VERSION`\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_ARCHITECTURE\r\n\n#               CPACK_RPM_<component>_PACKAGE_ARCHITECTURE\r\n\n#\r\n\n#  The RPM package architecture.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : Native architecture output by ``uname -m``\r\n\n#\r\n\n#  This may be set to ``noarch`` if you know you are building a noarch package.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_RELEASE\r\n\n#\r\n\n#  The RPM package release.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : 1\r\n\n#\r\n\n#  This is the numbering of the RPM package itself, i.e. the version of the\r\n\n#  packaging and not the version of the content (see\r\n\n#  :variable:`CPACK_RPM_PACKAGE_VERSION`). One may change the default value if\r\n\n#  the previous packaging was buggy and/or you want to put here a fancy Linux\r\n\n#  distro specific numbering.\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  This is the string that goes into the RPM ``Release:`` field. Some distros\r\n\n#  (e.g. Fedora, CentOS) require ``1%{?dist}`` format and not just a number.\r\n\n#  ``%{?dist}`` part can be added by setting :variable:`CPACK_RPM_PACKAGE_RELEASE_DIST`.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_RELEASE_DIST\r\n\n#\r\n\n#  The dist tag that is added  RPM ``Release:`` field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : OFF\r\n\n#\r\n\n#  This is the reported ``%{dist}`` tag from the current distribution or empty\r\n\n#  ``%{dist}`` if RPM macro is not set. If this variable is set then RPM\r\n\n#  ``Release:`` field value is set to ``${CPACK_RPM_PACKAGE_RELEASE}%{?dist}``.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_LICENSE\r\n\n#\r\n\n#  The RPM package license policy.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : \"unknown\"\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_GROUP\r\n\n#               CPACK_RPM_<component>_PACKAGE_GROUP\r\n\n#\r\n\n#  The RPM package group.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : \"unknown\"\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_VENDOR\r\n\n#\r\n\n#  The RPM package vendor.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : CPACK_PACKAGE_VENDOR if set or \"unknown\"\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_URL\r\n\n#               CPACK_RPM_<component>_PACKAGE_URL\r\n\n#\r\n\n#  The projects URL.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_DESCRIPTION\r\n\n#               CPACK_RPM_<component>_PACKAGE_DESCRIPTION\r\n\n#\r\n\n#  RPM package description.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default : :variable:`CPACK_COMPONENT_<compName>_DESCRIPTION` (component\r\n\n#    based installers only) if set, :variable:`CPACK_PACKAGE_DESCRIPTION_FILE`\r\n\n#    if set or \"no package description available\"\r\n\n#\r\n\n# .. variable:: CPACK_RPM_COMPRESSION_TYPE\r\n\n#\r\n\n#  RPM compression type.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to override RPM compression type to be used to build the\r\n\n#  RPM. For example some Linux distribution now default to lzma or xz\r\n\n#  compression whereas older cannot use such RPM. Using this one can enforce\r\n\n#  compression type to be used.\r\n\n#\r\n\n#  Possible values are:\r\n\n#\r\n\n#  - lzma\r\n\n#  - xz\r\n\n#  - bzip2\r\n\n#  - gzip\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_AUTOREQ\r\n\n#               CPACK_RPM_<component>_PACKAGE_AUTOREQ\r\n\n#\r\n\n#  RPM spec autoreq field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to enable (1, yes) or disable (0, no) automatic shared libraries\r\n\n#  dependency detection. Dependencies are added to requires list.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    By default automatic dependency detection is enabled by rpm generator.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_AUTOPROV\r\n\n#               CPACK_RPM_<component>_PACKAGE_AUTOPROV\r\n\n#\r\n\n#  RPM spec autoprov field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to enable (1, yes) or disable (0, no) automatic listing of shared\r\n\n#  libraries that are provided by the package. Shared libraries are added to\r\n\n#  provides list.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    By default automatic provides detection is enabled by rpm generator.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_AUTOREQPROV\r\n\n#               CPACK_RPM_<component>_PACKAGE_AUTOREQPROV\r\n\n#\r\n\n#  RPM spec autoreqprov field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  Variable enables/disables autoreq and autoprov at the same time.\r\n\n#  See :variable:`CPACK_RPM_PACKAGE_AUTOREQ` and :variable:`CPACK_RPM_PACKAGE_AUTOPROV`\r\n\n#  for more details.\r\n\n#\r\n\n#  .. note::\r\n\n#\r\n\n#    By default automatic detection feature is enabled by rpm.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_REQUIRES\r\n\n#               CPACK_RPM_<component>_PACKAGE_REQUIRES\r\n\n#\r\n\n#  RPM spec requires field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set RPM dependencies (requires). Note that you must enclose\r\n\n#  the complete requires string between quotes, for example::\r\n\n#\r\n\n#   set(CPACK_RPM_PACKAGE_REQUIRES \"python >= 2.5.0, cmake >= 2.8\")\r\n\n#\r\n\n#  The required package list of an RPM file could be printed with::\r\n\n#\r\n\n#   rpm -qp --requires file.rpm\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_CONFLICTS\r\n\n#               CPACK_RPM_<component>_PACKAGE_CONFLICTS\r\n\n#\r\n\n#  RPM spec conflicts field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set negative RPM dependencies (conflicts). Note that you must\r\n\n#  enclose the complete requires string between quotes, for example::\r\n\n#\r\n\n#   set(CPACK_RPM_PACKAGE_CONFLICTS \"libxml2\")\r\n\n#\r\n\n#  The conflicting package list of an RPM file could be printed with::\r\n\n#\r\n\n#   rpm -qp --conflicts file.rpm\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_REQUIRES_PRE\r\n\n#               CPACK_RPM_<component>_PACKAGE_REQUIRES_PRE\r\n\n#\r\n\n#  RPM spec requires(pre) field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set RPM preinstall dependencies (requires(pre)). Note that\r\n\n#  you must enclose the complete requires string between quotes, for example::\r\n\n#\r\n\n#   set(CPACK_RPM_PACKAGE_REQUIRES_PRE \"shadow-utils, initscripts\")\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_REQUIRES_POST\r\n\n#               CPACK_RPM_<component>_PACKAGE_REQUIRES_POST\r\n\n#\r\n\n#  RPM spec requires(post) field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set RPM postinstall dependencies (requires(post)). Note that\r\n\n#  you must enclose the complete requires string between quotes, for example::\r\n\n#\r\n\n#   set(CPACK_RPM_PACKAGE_REQUIRES_POST \"shadow-utils, initscripts\")\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_REQUIRES_POSTUN\r\n\n#               CPACK_RPM_<component>_PACKAGE_REQUIRES_POSTUN\r\n\n#\r\n\n#  RPM spec requires(postun) field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set RPM postuninstall dependencies (requires(postun)). Note\r\n\n#  that you must enclose the complete requires string between quotes, for\r\n\n#  example::\r\n\n#\r\n\n#   set(CPACK_RPM_PACKAGE_REQUIRES_POSTUN \"shadow-utils, initscripts\")\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_REQUIRES_PREUN\r\n\n#               CPACK_RPM_<component>_PACKAGE_REQUIRES_PREUN\r\n\n#\r\n\n#  RPM spec requires(preun) field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set RPM preuninstall dependencies (requires(preun)). Note that\r\n\n#  you must enclose the complete requires string between quotes, for example::\r\n\n#\r\n\n#   set(CPACK_RPM_PACKAGE_REQUIRES_PREUN \"shadow-utils, initscripts\")\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_SUGGESTS\r\n\n#               CPACK_RPM_<component>_PACKAGE_SUGGESTS\r\n\n#\r\n\n#  RPM spec suggest field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set weak RPM dependencies (suggests). Note that you must\r\n\n#  enclose the complete requires string between quotes.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_PROVIDES\r\n\n#               CPACK_RPM_<component>_PACKAGE_PROVIDES\r\n\n#\r\n\n#  RPM spec provides field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set RPM dependencies (provides). The provided package list\r\n\n#  of an RPM file could be printed with::\r\n\n#\r\n\n#   rpm -qp --provides file.rpm\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_OBSOLETES\r\n\n#               CPACK_RPM_<component>_PACKAGE_OBSOLETES\r\n\n#\r\n\n#  RPM spec obsoletes field.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set RPM packages that are obsoleted by this one.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_RELOCATABLE\r\n\n#\r\n\n#  build a relocatable RPM.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : CPACK_PACKAGE_RELOCATABLE\r\n\n#\r\n\n#  If this variable is set to TRUE or ON CPackRPM will try\r\n\n#  to build a relocatable RPM package. A relocatable RPM may\r\n\n#  be installed using::\r\n\n#\r\n\n#   rpm --prefix or --relocate\r\n\n#\r\n\n#  in order to install it at an alternate place see rpm(8). Note that\r\n\n#  currently this may fail if :variable:`CPACK_SET_DESTDIR` is set to ``ON``. If\r\n\n#  :variable:`CPACK_SET_DESTDIR` is set then you will get a warning message but\r\n\n#  if there is file installed with absolute path you'll get unexpected behavior.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_SPEC_INSTALL_POST\r\n\n#\r\n\n#  Deprecated - use :variable:`CPACK_RPM_POST_INSTALL_SCRIPT_FILE` instead.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#  * Deprecated: YES\r\n\n#\r\n\n#  This way of specifying post-install script is deprecated, use\r\n\n#  :variable:`CPACK_RPM_POST_INSTALL_SCRIPT_FILE`.\r\n\n#  May be used to set an RPM post-install command inside the spec file.\r\n\n#  For example setting it to ``/bin/true`` may be used to prevent\r\n\n#  rpmbuild to strip binaries.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_SPEC_MORE_DEFINE\r\n\n#\r\n\n#  RPM extended spec definitions lines.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to add any ``%define`` lines to the generated spec file.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_DEBUG\r\n\n#\r\n\n#  Toggle CPackRPM debug output.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be set when invoking cpack in order to trace debug information\r\n\n#  during CPack RPM run. For example you may launch CPack like this::\r\n\n#\r\n\n#   cpack -D CPACK_RPM_PACKAGE_DEBUG=1 -G RPM\r\n\n#\r\n\n# .. variable:: CPACK_RPM_USER_BINARY_SPECFILE\r\n\n#               CPACK_RPM_<componentName>_USER_BINARY_SPECFILE\r\n\n#\r\n\n#  A user provided spec file.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be set by the user in order to specify a USER binary spec file\r\n\n#  to be used by CPackRPM instead of generating the file.\r\n\n#  The specified file will be processed by configure_file( @ONLY).\r\n\n#\r\n\n# .. variable:: CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE\r\n\n#\r\n\n#  Spec file template.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  If set CPack will generate a template for USER specified binary\r\n\n#  spec file and stop with an error. For example launch CPack like this::\r\n\n#\r\n\n#   cpack -D CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE=1 -G RPM\r\n\n#\r\n\n#  The user may then use this file in order to hand-craft is own\r\n\n#  binary spec file which may be used with\r\n\n#  :variable:`CPACK_RPM_USER_BINARY_SPECFILE`.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PRE_INSTALL_SCRIPT_FILE\r\n\n#               CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE\r\n\n#\r\n\n#  Path to file containing pre (un)install script.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to embed a pre (un)installation script in the spec file.\r\n\n#  The referred script file (or both) will be read and directly\r\n\n#  put after the ``%pre`` or ``%preun`` section\r\n\n#  If :variable:`CPACK_RPM_COMPONENT_INSTALL` is set to ON the (un)install\r\n\n#  script for each component can be overridden with\r\n\n#  ``CPACK_RPM_<COMPONENT>_PRE_INSTALL_SCRIPT_FILE`` and\r\n\n#  ``CPACK_RPM_<COMPONENT>_PRE_UNINSTALL_SCRIPT_FILE``.\r\n\n#  One may verify which scriptlet has been included with::\r\n\n#\r\n\n#   rpm -qp --scripts  package.rpm\r\n\n#\r\n\n# .. variable:: CPACK_RPM_POST_INSTALL_SCRIPT_FILE\r\n\n#               CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE\r\n\n#\r\n\n#  Path to file containing post (un)install script.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to embed a post (un)installation script in the spec file.\r\n\n#  The referred script file (or both) will be read and directly\r\n\n#  put after the ``%post`` or ``%postun`` section.\r\n\n#  If :variable:`CPACK_RPM_COMPONENT_INSTALL` is set to ON the (un)install\r\n\n#  script for each component can be overridden with\r\n\n#  ``CPACK_RPM_<COMPONENT>_POST_INSTALL_SCRIPT_FILE`` and\r\n\n#  ``CPACK_RPM_<COMPONENT>_POST_UNINSTALL_SCRIPT_FILE``.\r\n\n#  One may verify which scriptlet has been included with::\r\n\n#\r\n\n#   rpm -qp --scripts  package.rpm\r\n\n#\r\n\n# .. variable:: CPACK_RPM_USER_FILELIST\r\n\n#               CPACK_RPM_<COMPONENT>_USER_FILELIST\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to explicitly specify ``%(<directive>)`` file line\r\n\n#  in the spec file. Like ``%config(noreplace)`` or any other directive\r\n\n#  that be found in the ``%files`` section. You can have multiple directives\r\n\n#  per line, as in ``%attr(600,root,root) %config(noreplace)``. Since\r\n\n#  CPackRPM is generating the list of files (and directories) the user\r\n\n#  specified files of the ``CPACK_RPM_<COMPONENT>_USER_FILELIST`` list will\r\n\n#  be removed from the generated list. If referring to directories do\r\n\n#  not add a trailing slash.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_CHANGELOG_FILE\r\n\n#\r\n\n#  RPM changelog file.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to embed a changelog in the spec file.\r\n\n#  The referred file will be read and directly put after the ``%changelog``\r\n\n#  section.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST\r\n\n#\r\n\n#  list of path to be excluded.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : /etc /etc/init.d /usr /usr/share /usr/share/doc /usr/bin /usr/lib /usr/lib64 /usr/include\r\n\n#\r\n\n#  May be used to exclude path (directories or files) from the auto-generated\r\n\n#  list of paths discovered by CPack RPM. The defaut value contains a\r\n\n#  reasonable set of values if the variable is not defined by the user. If the\r\n\n#  variable is defined by the user then CPackRPM will NOT any of the default\r\n\n#  path. If you want to add some path to the default list then you can use\r\n\n#  :variable:`CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION` variable.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION\r\n\n#\r\n\n#  additional list of path to be excluded.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to add more exclude path (directories or files) from the initial\r\n\n#  default list of excluded paths. See\r\n\n#  :variable:`CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST`.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_RELOCATION_PATHS\r\n\n#\r\n\n#  Packages relocation paths list.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to specify more than one relocation path per relocatable RPM.\r\n\n#  Variable contains a list of relocation paths that if relative are prefixed\r\n\n#  by the value of :variable:`CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX` or by the\r\n\n#  value of :variable:`CPACK_PACKAGING_INSTALL_PREFIX` if the component version\r\n\n#  is not provided.\r\n\n#  Variable is not component based as its content can be used to set a different\r\n\n#  path prefix for e.g. binary dir and documentation dir at the same time.\r\n\n#  Only prefixes that are required by a certain component are added to that\r\n\n#  component - component must contain at least one file/directory/symbolic link\r\n\n#  with :variable:`CPACK_RPM_RELOCATION_PATHS` prefix for a certain relocation\r\n\n#  path to be added. Package will not contain any relocation paths if there are\r\n\n#  no files/directories/symbolic links on any of the provided prefix locations.\r\n\n#  Packages that either do not contain any relocation paths or contain\r\n\n#  files/directories/symbolic links that are outside relocation paths print\r\n\n#  out an ``AUTHOR_WARNING`` that RPM will be partially relocatable.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX\r\n\n#\r\n\n#  Per component relocation path install prefix.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : CPACK_PACKAGING_INSTALL_PREFIX\r\n\n#\r\n\n#  May be used to set per component :variable:`CPACK_PACKAGING_INSTALL_PREFIX`\r\n\n#  for relocatable RPM packages.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_NO_INSTALL_PREFIX_RELOCATION\r\n\n#               CPACK_RPM_NO_<COMPONENT>_INSTALL_PREFIX_RELOCATION\r\n\n#\r\n\n#  Removal of default install prefix from relocation paths list.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : CPACK_PACKAGING_INSTALL_PREFIX or CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX\r\n\n#                are treated as one of relocation paths\r\n\n#\r\n\n#  May be used to remove CPACK_PACKAGING_INSTALL_PREFIX and CPACK_RPM_<COMPONENT>_PACKAGE_PREFIX\r\n\n#  from relocatable RPM prefix paths.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_ADDITIONAL_MAN_DIRS\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set additional man dirs that could potentially be compressed\r\n\n#  by brp-compress RPM macro. Variable content must be a list of regular\r\n\n#  expressions that point to directories containing man files or to man files\r\n\n#  directly. Note that in order to compress man pages a path must also be\r\n\n#  present in brp-compress RPM script and that brp-compress script must be\r\n\n#  added to RPM configuration by the operating system.\r\n\n#\r\n\n#  Regular expressions that are added by default were taken from brp-compress\r\n\n#  RPM macro:\r\n\n#\r\n\n#  - /usr/man/man.*\r\n\n#  - /usr/man/.*/man.*\r\n\n#  - /usr/info.*\r\n\n#  - /usr/share/man/man.*\r\n\n#  - /usr/share/man/.*/man.*\r\n\n#  - /usr/share/info.*\r\n\n#  - /usr/kerberos/man.*\r\n\n#  - /usr/X11R6/man/man.*\r\n\n#  - /usr/lib/perl5/man/man.*\r\n\n#  - /usr/share/doc/.*/man/man.*\r\n\n#  - /usr/lib/.*/man/man.*\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEFAULT_USER\r\n\n#               CPACK_RPM_<compName>_DEFAULT_USER\r\n\n#\r\n\n#  default user ownership of RPM content\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : root\r\n\n#\r\n\n#  Value should be user name and not UID.\r\n\n#  Note that <compName> must be in upper-case.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEFAULT_GROUP\r\n\n#               CPACK_RPM_<compName>_DEFAULT_GROUP\r\n\n#\r\n\n#  default group ownership of RPM content\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : root\r\n\n#\r\n\n#  Value should be group name and not GID.\r\n\n#  Note that <compName> must be in upper-case.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEFAULT_FILE_PERMISSIONS\r\n\n#               CPACK_RPM_<compName>_DEFAULT_FILE_PERMISSIONS\r\n\n#\r\n\n#  default permissions used for packaged files\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : - (system default)\r\n\n#\r\n\n#  Accepted values are lists with ``PERMISSIONS``. Valid permissions\r\n\n#  are:\r\n\n#\r\n\n#  - OWNER_READ\r\n\n#  - OWNER_WRITE\r\n\n#  - OWNER_EXECUTE\r\n\n#  - GROUP_READ\r\n\n#  - GROUP_WRITE\r\n\n#  - GROUP_EXECUTE\r\n\n#  - WORLD_READ\r\n\n#  - WORLD_WRITE\r\n\n#  - WORLD_EXECUTE\r\n\n#\r\n\n#  Note that <compName> must be in upper-case.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEFAULT_DIR_PERMISSIONS\r\n\n#               CPACK_RPM_<compName>_DEFAULT_DIR_PERMISSIONS\r\n\n#\r\n\n#  default permissions used for packaged directories\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : - (system default)\r\n\n#\r\n\n#  Accepted values are lists with PERMISSIONS. Valid permissions\r\n\n#  are the same as for :variable:`CPACK_RPM_DEFAULT_FILE_PERMISSIONS`.\r\n\n#  Note that <compName> must be in upper-case.\r\n\n#\r\n\n# Packaging of Symbolic Links\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# CPackRPM supports packaging of symbolic links::\r\n\n#\r\n\n#   execute_process(COMMAND ${CMAKE_COMMAND}\r\n\n#     -E create_symlink <relative_path_location> <symlink_name>)\r\n\n#   install(FILES ${CMAKE_CURRENT_BINARY_DIR}/<symlink_name>\r\n\n#     DESTINATION <symlink_location> COMPONENT libraries)\r\n\n#\r\n\n# Symbolic links will be optimized (paths will be shortened if possible)\r\n\n# before being added to the package or if multiple relocation paths are\r\n\n# detected, a post install symlink relocation script will be generated.\r\n\n#\r\n\n# Symbolic links may point to locations that are not packaged by the same\r\n\n# package (either a different component or even not packaged at all) but\r\n\n# those locations will be treated as if they were a part of the package\r\n\n# while determining if symlink should be either created or present in a\r\n\n# post install script - depending on relocation paths.\r\n\n#\r\n\n# Symbolic links that point to locations outside packaging path produce a\r\n\n# warning and are treated as non relocatable permanent symbolic links.\r\n\n#\r\n\n# Currently there are a few limitations though:\r\n\n#\r\n\n# * For component based packaging component interdependency is not checked\r\n\n#   when processing symbolic links. Symbolic links pointing to content of\r\n\n#   a different component are treated the same way as if pointing to location\r\n\n#   that will not be packaged.\r\n\n#\r\n\n# * Symbolic links pointing to a location through one or more intermediate\r\n\n#   symbolic links will not be handled differently - if the intermediate\r\n\n#   symbolic link(s) is also on a relocatable path, relocating it during\r\n\n#   package installation may cause initial symbolic link to point to an\r\n\n#   invalid location.\r\n\n#\r\n\n# Packaging of debug information\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# Debuginfo packages contain debug symbols and sources for debugging packaged\r\n\n# binaries.\r\n\n#\r\n\n# Debuginfo RPM packaging has it's own set of variables:\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEBUGINFO_PACKAGE\r\n\n#               CPACK_RPM_<component>_DEBUGINFO_PACKAGE\r\n\n#\r\n\n#  Enable generation of debuginfo RPM package(s).\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : OFF\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  Binaries must contain debug symbols before packaging so use either ``Debug``\r\n\n#  or ``RelWithDebInfo`` for :variable:`CMAKE_BUILD_TYPE` variable value.\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  Packages generated from packages without binary files, with binary files but\r\n\n#  without execute permissions or without debug symbols will be empty.\r\n\n#\r\n\n# .. variable:: CPACK_BUILD_SOURCE_DIRS\r\n\n#\r\n\n#  Provides locations of root directories of source files from which binaries\r\n\n#  were built.\r\n\n#\r\n\n#  * Mandatory : YES if :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` is set\r\n\n#  * Default   : -\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  For CMake project :variable:`CPACK_BUILD_SOURCE_DIRS` is set by default to\r\n\n#  point to :variable:`CMAKE_SOURCE_DIR` and :variable:`CMAKE_BINARY_DIR` paths.\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  Sources with path prefixes that do not fall under any location provided with\r\n\n#  :variable:`CPACK_BUILD_SOURCE_DIRS` will not be present in debuginfo package.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX\r\n\n#               CPACK_RPM_<component>_BUILD_SOURCE_DIRS_PREFIX\r\n\n#\r\n\n#  Prefix of location where sources will be placed during package installation.\r\n\n#\r\n\n#  * Mandatory : YES if :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` is set\r\n\n#  * Default   : \"/usr/src/debug/<CPACK_PACKAGE_FILE_NAME>\" and\r\n\n#                for component packaging \"/usr/src/debug/<CPACK_PACKAGE_FILE_NAME>-<component>\"\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  Each source path prefix is additionaly suffixed by ``src_<index>`` where\r\n\n#  index is index of the path used from :variable:`CPACK_BUILD_SOURCE_DIRS`\r\n\n#  variable. This produces ``<CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX>/src_<index>``\r\n\n#  replacement path.\r\n\n#  Limitation is that replaced path part must be shorter or of equal\r\n\n#  length than the length of its replacement. If that is not the case either\r\n\n#  :variable:`CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX` variable has to be set to\r\n\n#  a shorter path or source directories must be placed on a longer path.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEBUGINFO_EXCLUDE_DIRS\r\n\n#\r\n\n#  Directories containing sources that should be excluded from debuginfo packages.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : \"/usr /usr/src /usr/src/debug\"\r\n\n#\r\n\n#  Listed paths are owned by other RPM packages and should therefore not be\r\n\n#  deleted on debuginfo package uninstallation.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEBUGINFO_EXCLUDE_DIRS_ADDITION\r\n\n#\r\n\n#  Paths that should be appended to :variable:`CPACK_RPM_DEBUGINFO_EXCLUDE_DIRS`\r\n\n#  for exclusion.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n# .. variable:: CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE\r\n\n#\r\n\n#  Create a single debuginfo package even if components packaging is set.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : OFF\r\n\n#\r\n\n#  When this variable is enabled it produces a single debuginfo package even if\r\n\n#  component packaging is enabled.\r\n\n#\r\n\n#  When using this feature in combination with components packaging and there is\r\n\n#  more than one component this variable requires :variable:`CPACK_RPM_MAIN_COMPONENT`\r\n\n#  to be set.\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  If none of the :variable:`CPACK_RPM_<component>_DEBUGINFO_PACKAGE` variables\r\n\n#  is set then :variable:`CPACK_RPM_DEBUGINFO_PACKAGE` is automatically set to\r\n\n#  ``ON`` when :variable:`CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE` is set.\r\n\n#\r\n\n# Packaging of sources (SRPM)\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# SRPM packaging is enabled by setting :variable:`CPACK_RPM_PACKAGE_SOURCES`\r\n\n# variable while usually using :variable:`CPACK_INSTALLED_DIRECTORIES` variable\r\n\n# to provide directory containing CMakeLists.txt and source files.\r\n\n#\r\n\n# For CMake projects SRPM package would be product by executing:\r\n\n#\r\n\n# ``cpack -G RPM --config ./CPackSourceConfig.cmake``\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  Produced SRPM package is expected to be built with :manual:`cmake(1)` executable\r\n\n#  and packaged with :manual:`cpack(1)` executable so CMakeLists.txt has to be\r\n\n#  located in root source directory and must be able to generate binary rpm\r\n\n#  packages by executing ``cpack -G`` command. The two executables as well as\r\n\n#  rpmbuild must also be present when generating binary rpm packages from the\r\n\n#  produced SRPM package.\r\n\n#\r\n\n# Once the SRPM package is generated it can be used to generate binary packages\r\n\n# by creating a directory structure for rpm generation and executing rpmbuild\r\n\n# tool:\r\n\n#\r\n\n# ``mkdir -p build_dir/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}``\r\n\n# ``rpmbuild --define \"_topdir <path_to_build_dir>\" --rebuild <SRPM_file_name>``\r\n\n#\r\n\n# Generated packages will be located in build_dir/RPMS directory or its sub\r\n\n# directories.\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  SRPM package internally uses CPack/RPM generator to generate binary packages\r\n\n#  so CMakeScripts.txt can decide during the SRPM to binary rpm generation step\r\n\n#  what content the package(s) should have as well as how they should be packaged\r\n\n#  (monolithic or components). CMake can decide this for e.g. by reading environment\r\n\n#  variables set by the package manager before starting the process of generating\r\n\n#  binary rpm packages. This way a single SRPM package can be used to produce\r\n\n#  different binary rpm packages on different platforms depending on the platform's\r\n\n#  packaging rules.\r\n\n#\r\n\n# Source RPM packaging has it's own set of variables:\r\n\n#\r\n\n# .. variable:: CPACK_RPM_PACKAGE_SOURCES\r\n\n#\r\n\n#  Should the content be packaged as a source rpm (default is binary rpm).\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : OFF\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  For cmake projects :variable:`CPACK_RPM_PACKAGE_SOURCES` variable is set\r\n\n#  to ``OFF`` in CPackConfig.cmake and ``ON`` in CPackSourceConfig.cmake\r\n\n#  generated files.\r\n\n#\r\n\n# .. variable:: CPACK_RPM_SOURCE_PKG_BUILD_PARAMS\r\n\n#\r\n\n#  Additional command-line parameters provided to :manual:`cmake(1)` executable.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n# .. variable:: CPACK_RPM_SOURCE_PKG_PACKAGING_INSTALL_PREFIX\r\n\n#\r\n\n#  Packaging install prefix that would be provided in :variable:`CPACK_PACKAGING_INSTALL_PREFIX`\r\n\n#  variable for producing binary RPM packages.\r\n\n#\r\n\n#  * Mandatory : YES\r\n\n#  * Default   : \"/\"\r\n\n#\r\n\n# .. VARIABLE:: CPACK_RPM_BUILDREQUIRES\r\n\n#\r\n\n#  List of source rpm build dependencies.\r\n\n#\r\n\n#  * Mandatory : NO\r\n\n#  * Default   : -\r\n\n#\r\n\n#  May be used to set source RPM build dependencies (BuildRequires). Note that\r\n\n#  you must enclose the complete build requirements string between quotes, for\r\n\n#  example::\r\n\n#\r\n\n#   set(CPACK_RPM_BUILDREQUIRES \"python >= 2.5.0, cmake >= 2.8\")\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Author: Eric Noulard with the help of Alexander Neundorf.\r\n",
        "Line" : 904,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set appropriate prefix, remove possible trailing slash and convert backslashes to slashes\r\n",
        "Line" : 936,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# set base path prefix\r\n",
        "Line" : 948,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# set other path prefixes\r\n",
        "Line" : 962,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# warn about all the paths that are not relocatable\r\n",
        "Line" : 976,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Tell file(GLOB_RECURSE) not to follow directory symlinks\r\n\n# even if the project does not set this policy to NEW.\r\n",
        "Line" : 978,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# get files list\r\n",
        "Line" : 1008,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# if we are creating a relocatable package, omit parent directories of\r\n\n# CPACK_RPM_PACKAGE_PREFIX. This is achieved by building a \"filter list\"\r\n\n# which is passed to the find command that generates the content-list\r\n",
        "Line" : 1016,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# get a list of the elements in CPACK_RPM_PACKAGE_PREFIXES that are\r\n\n# destinct parent paths of other relocation paths and remove the\r\n\n# final element (so the install-prefix dir itself is not omitted\r\n\n# from the RPM's content-list)\r\n",
        "Line" : 1020,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Now generate all of the parent dirs of the relocation path\r\n",
        "Line" : 1036,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# add man paths that will be compressed\r\n\n# (copied from /usr/lib/rpm/brp-compress - script that does the actual\r\n\n# compressing)\r\n",
        "Line" : 1074,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# man pages are files inside a certain location\r\n",
        "Line" : 1091,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# insert file location that covers compressed man pages\r\n\n# even if using a wildcard causes duplicates as those are\r\n\n# handled by RPM and we still keep the same file list\r\n\n# in spec file - wildcard only represents file type (e.g. .gz)\r\n",
        "Line" : 1096,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# remove file location that doesn't cover compressed man pages\r\n",
        "Line" : 1101,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# reverse magic\r\n",
        "Line" : 1133,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# both paths relocated\r\n",
        "Line" : 1139,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# reverse magic\r\n",
        "Line" : 1142,
        "CharPositionInLine" : 62
      },
      "19" : {
        "Text" : "# source path relocated\r\n",
        "Line" : 1178,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# point path relocated\r\n",
        "Line" : 1206,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# reverse magic\r\n",
        "Line" : 1209,
        "CharPositionInLine" : 60
      },
      "22" : {
        "Text" : "# no path relocated\r\n",
        "Line" : 1235,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# source path relocated\r\n",
        "Line" : 1267,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# both paths relocated\r\n",
        "Line" : 1274,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# point path relocated\r\n",
        "Line" : 1278,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# point path relocated\r\n",
        "Line" : 1287,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# no path relocated\r\n",
        "Line" : 1293,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# place variables into parent scope\r\n",
        "Line" : 1297,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Prepend directories in ${CPACK_RPM_INSTALL_FILES} with %dir\r\n\n# This is necessary to avoid duplicate files since rpmbuild does\r\n\n# recursion on its own when encountering a pathname which is a directory\r\n\n# which is not flagged as %dir\r\n",
        "Line" : 1307,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# make file order consistent on all platforms\r\n",
        "Line" : 1318,
        "CharPositionInLine" : 32
      },
      "31" : {
        "Text" : "# check that symlink has relocatable format\r\n",
        "Line" : 1325,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# get destination path\r\n",
        "Line" : 1336,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# check if path is relative or absolute\r\n",
        "Line" : 1339,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# prevent absolute paths from having /../ or /./ section inside of them\r\n",
        "Line" : 1343,
        "CharPositionInLine" : 10
      },
      "35" : {
        "Text" : "# handle relative path\r\n",
        "Line" : 1346,
        "CharPositionInLine" : 10
      },
      "36" : {
        "Text" : "# recalculate path length after conversion to canonical form\r\n",
        "Line" : 1350,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# only symlinks that are pointing inside the packaging structure should be checked for relocation\r\n",
        "Line" : 1354,
        "CharPositionInLine" : 10
      },
      "38" : {
        "Text" : "# location pointed to is ouside WDR so it should be treated as a permanent symlink\r\n",
        "Line" : 1362,
        "CharPositionInLine" : 10
      },
      "39" : {
        "Text" : "# find matching\r\n",
        "Line" : 1374,
        "CharPositionInLine" : 10
      },
      "40" : {
        "Text" : "# symlinks have the same subpath\r\n",
        "Line" : 1383,
        "CharPositionInLine" : 12
      },
      "41" : {
        "Text" : "# permanent symlink\r\n",
        "Line" : 1385,
        "CharPositionInLine" : 14
      },
      "42" : {
        "Text" : "# relocation subpaths\r\n",
        "Line" : 1390,
        "CharPositionInLine" : 14
      },
      "43" : {
        "Text" : "# not on the same relocation path\r\n",
        "Line" : 1395,
        "CharPositionInLine" : 12
      },
      "44" : {
        "Text" : "# point is relocatable\r\n",
        "Line" : 1400,
        "CharPositionInLine" : 10
      },
      "45" : {
        "Text" : "# is not relocatable or points to non relocatable path - permanent symlink\r\n",
        "Line" : 1404,
        "CharPositionInLine" : 10
      },
      "46" : {
        "Text" : "# We need to check if the binaries were compiled with debug symbols\r\n\n# because without them the package will be useless\r\n",
        "Line" : 1431,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# With objdump we should check the debug symbols\r\n",
        "Line" : 1440,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# With debugedit we prepare source files list\r\n",
        "Line" : 1448,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Check that if the given file was executable or not\r\n",
        "Line" : 1470,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Now generate all segments of the path\r\n",
        "Line" : 1556,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "# rpmbuild is the basic command for building RPM package\r\n\n# it may be a simple (symbolic) link to rpm command.\r\n",
        "Line" : 1590,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Check version of the rpmbuild tool this would be easier to\r\n\n# track bugs with users and CPackRPM debug mode.\r\n\n# We may use RPM version in order to check for available version dependent features\r\n",
        "Line" : 1594,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Display lsb_release output if DEBUG mode enable\r\n\n# This will help to diagnose problem with CPackRPM\r\n\n# because we will know on which kind of Linux we are\r\n",
        "Line" : 1614,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# We may use RPM version in the future in order\r\n\n# to shut down warning about space in buildtree\r\n\n# some recent RPM version should support space in different places.\r\n\n# not checked [yet].\r\n",
        "Line" : 1633,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# If rpmbuild is found\r\n\n# we try to discover alien since we may be on non RPM distro like Debian.\r\n\n# In this case we may try to to use more advanced features\r\n\n# like generating RPM directly from DEB using alien.\r\n\n# FIXME feature not finished (yet)\r\n",
        "Line" : 1641,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Are we packaging components ?\r\n",
        "Line" : 1651,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "#\r\n\n# Use user-defined RPM specific variables value\r\n\n# or generate reasonable default value from\r\n\n# CPACK_xxx generic values.\r\n\n# The variables comes from the needed (mandatory or not)\r\n\n# values found in the RPM specification file aka \".spec\" file.\r\n\n# The variables which may/should be defined are:\r\n\n#\r\n",
        "Line" : 1658,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# CPACK_RPM_PACKAGE_SUMMARY (mandatory)\r\n",
        "Line" : 1667,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# if neither var is defined lets use the name as summary\r\n",
        "Line" : 1679,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# CPACK_RPM_PACKAGE_NAME (mandatory)\r\n",
        "Line" : 1684,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# CPACK_RPM_PACKAGE_VERSION (mandatory)\r\n",
        "Line" : 1702,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Replace '-' in version with '_'\r\n\n# '-' character is  an Illegal RPM version character\r\n\n# it is illegal because it is used to separate\r\n\n# RPM \"Version\" from RPM \"Release\"\r\n",
        "Line" : 1709,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# CPACK_RPM_PACKAGE_ARCHITECTURE (mandatory)\r\n",
        "Line" : 1715,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# CPACK_RPM_PACKAGE_RELEASE\r\n\n# The RPM release is the numbering of the RPM package ITSELF\r\n\n# this is the version of the PACKAGING and NOT the version\r\n\n# of the CONTENT of the package.\r\n\n# You may well need to generate a new RPM package release\r\n\n# without changing the version of the packaged software.\r\n\n# This is the case when the packaging is buggy (not) the software :=)\r\n\n# If not set, 1 is a good candidate\r\n",
        "Line" : 1742,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# CPACK_RPM_PACKAGE_LICENSE\r\n",
        "Line" : 1758,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# CPACK_RPM_PACKAGE_GROUP\r\n",
        "Line" : 1763,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# CPACK_RPM_PACKAGE_VENDOR\r\n",
        "Line" : 1774,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# CPACK_RPM_PACKAGE_SOURCE\r\n\n# The name of the source tarball in case we generate a source RPM\r\n",
        "Line" : 1783,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# CPACK_RPM_PACKAGE_DESCRIPTION\r\n\n# The variable content may be either\r\n\n#   - explicitly given by the user or\r\n\n#   - filled with the content of CPACK_PACKAGE_DESCRIPTION_FILE\r\n\n#     if it is defined\r\n\n#   - set to a default value\r\n\n#\r\n",
        "Line" : 1786,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# CPACK_RPM_COMPRESSION_TYPE\r\n\n#\r\n",
        "Line" : 1809,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# kept for back compatibility (provided external RPM spec files)\r\n",
        "Line" : 1840,
        "CharPositionInLine" : 72
      },
      "72" : {
        "Text" : "# disable relocatable option if building source RPM\r\n",
        "Line" : 1851,
        "CharPositionInLine" : 45
      },
      "73" : {
        "Text" : "# Check if additional fields for RPM spec header are given\r\n\n# There may be some COMPONENT specific variables as well\r\n\n# If component specific var is not provided we use the global one\r\n\n# for each component\r\n",
        "Line" : 1860,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# Prefix can be replaced by Prefixes but the old version stil works so we'll ignore it for now\r\n\n# Requires* is a special case because it gets transformed to Requires(pre/post/preun/postun)\r\n\n# Auto* is a special case because the tags can not be queried by querytags rpmbuild flag\r\n",
        "Line" : 1878,
        "CharPositionInLine" : 8
      },
      "75" : {
        "Text" : "# Treat the RPM Spec keyword iff it has been properly defined\r\n",
        "Line" : 1897,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Transform NAME --> Name e.g. PROVIDES --> Provides\r\n\n# The Upper-case first letter and lowercase tail is the\r\n\n# appropriate value required in the final RPM spec file.\r\n",
        "Line" : 1899,
        "CharPositionInLine" : 6
      },
      "77" : {
        "Text" : "# The following keywords require parentheses around the \"pre\" or \"post\" suffix in the final RPM spec file.\r\n",
        "Line" : 1906,
        "CharPositionInLine" : 6
      },
      "78" : {
        "Text" : "# CPACK_RPM_SPEC_INSTALL_POST\r\n\n# May be used to define a RPM post intallation script\r\n\n# for example setting it to \"/bin/true\" may prevent\r\n\n# rpmbuild from stripping binaries.\r\n",
        "Line" : 1921,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# CPACK_RPM_POST_INSTALL_SCRIPT_FILE (or CPACK_RPM_<COMPONENT>_POST_INSTALL_SCRIPT_FILE)\r\n\n# CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE (or CPACK_RPM_<COMPONENT>_POST_UNINSTALL_SCRIPT_FILE)\r\n\n# May be used to embed a post (un)installation script in the spec file.\r\n\n# The refered script file(s) will be read and directly\r\n\n# put after the %post or %postun section\r\n\n# ----------------------------------------------------------------\r\n\n# CPACK_RPM_PRE_INSTALL_SCRIPT_FILE (or CPACK_RPM_<COMPONENT>_PRE_INSTALL_SCRIPT_FILE)\r\n\n# CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE (or CPACK_RPM_<COMPONENT>_PRE_UNINSTALL_SCRIPT_FILE)\r\n\n# May be used to embed a pre (un)installation script in the spec file.\r\n\n# The refered script file(s) will be read and directly\r\n\n# put after the %pre or %preun section\r\n",
        "Line" : 1932,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Handle file if it has been specified\r\n",
        "Line" : 1954,
        "CharPositionInLine" : 6
      },
      "81" : {
        "Text" : "# reset SPEC var value if no file has been specified\r\n\n# (either globally or component-wise)\r\n",
        "Line" : 1963,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# CPACK_RPM_CHANGELOG_FILE\r\n\n# May be used to embed a changelog in the spec file.\r\n\n# The refered file will be read and directly put after the %changelog section\r\n",
        "Line" : 1970,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# CPACK_RPM_SPEC_MORE_DEFINE\r\n\n# This is a generated spec rpm file spaceholder\r\n",
        "Line" : 1983,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Now we may create the RPM build tree structure\r\n",
        "Line" : 1991,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Prepare RPM build tree\r\n",
        "Line" : 1994,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# it seems rpmbuild can't handle spaces in the path\r\n\n# neither escaping (as below) nor putting quotes around the path seem to help\r\n\n#string(REGEX REPLACE \" \" \"\\\\\\\\ \" CPACK_RPM_DIRECTORY \"${CPACK_TOPLEVEL_DIRECTORY}\")\r\n",
        "Line" : 2003,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# In component case, put CPACK_ABSOLUTE_DESTINATION_FILES_<COMPONENT>\r\n\n#                   into CPACK_ABSOLUTE_DESTINATION_FILES_INTERNAL\r\n\n#         otherwise, put CPACK_ABSOLUTE_DESTINATION_FILES\r\n\n# This must be done BEFORE the CPACK_ABSOLUTE_DESTINATION_FILES_INTERNAL handling\r\n",
        "Line" : 2010,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# In component case, set CPACK_RPM_USER_FILELIST_INTERNAL with CPACK_RPM_<COMPONENT>_USER_FILELIST.\r\n",
        "Line" : 2031,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# Handle user specified file line list in CPACK_RPM_USER_FILELIST_INTERNAL\r\n\n# Remove those files from CPACK_ABSOLUTE_DESTINATION_FILES_INTERNAL\r\n\n#                      or CPACK_RPM_INSTALL_FILES,\r\n\n# hence it must be done before these auto-generated lists are processed.\r\n",
        "Line" : 2046,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# Create CMake list from CPACK_RPM_INSTALL_FILES\r\n",
        "Line" : 2055,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Rebuild the user list file\r\n",
        "Line" : 2074,
        "CharPositionInLine" : 6
      },
      "92" : {
        "Text" : "# Remove from CPACK_RPM_INSTALL_FILES and CPACK_ABSOLUTE_DESTINATION_FILES_INTERNAL\r\n",
        "Line" : 2077,
        "CharPositionInLine" : 6
      },
      "93" : {
        "Text" : "# ABSOLUTE destination files list may not exists at all\r\n",
        "Line" : 2079,
        "CharPositionInLine" : 6
      },
      "94" : {
        "Text" : "# Rebuild CPACK_RPM_INSTALL_FILES\r\n",
        "Line" : 2085,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "# Remove trailing space\r\n",
        "Line" : 2098,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# Transform endline separated - string into CMake List\r\n",
        "Line" : 2100,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Remove unecessary quotes\r\n",
        "Line" : 2102,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Remove ABSOLUTE install file from INSTALL FILE LIST\r\n",
        "Line" : 2104,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Rebuild INSTALL_FILES\r\n",
        "Line" : 2106,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# Build ABSOLUTE_INSTALL_FILES\r\n",
        "Line" : 2111,
        "CharPositionInLine" : 4
      },
      "101" : {
        "Text" : "# reset vars in order to avoid leakage of value(s) from one component to another\r\n",
        "Line" : 2121,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# this part is only required by components packaging - with monolithic\r\n\n# packages we can be certain that there are no other components present\r\n\n# so CPACK_RPM_DEBUGINFO_SINGLE_PACKAGE is a noop\r\n",
        "Line" : 2143,
        "CharPositionInLine" : 8
      },
      "103" : {
        "Text" : "# only add current package files to debuginfo list if debuginfo\r\n\n# generation is enabled for current package\r\n",
        "Line" : 2147,
        "CharPositionInLine" : 10
      },
      "104" : {
        "Text" : "# if there were other components/groups so we need to move files from them\r\n\n# to current component otherwise those files won't be found\r\n",
        "Line" : 2163,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "# skip current component\r\n",
        "Line" : 2171,
        "CharPositionInLine" : 12
      },
      "106" : {
        "Text" : "# check that we are not overriding an existing file that doesn't\r\n\n# match the file that we want to copy\r\n",
        "Line" : 2187,
        "CharPositionInLine" : 12
      },
      "107" : {
        "Text" : "# Prepare install files\r\n",
        "Line" : 2247,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# set default user and group\r\n",
        "Line" : 2255,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# set default file and dir permissions\r\n",
        "Line" : 2266,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# The name of the final spec file to be used by rpmbuild\r\n",
        "Line" : 2279,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Print out some debug information if we were asked for that\r\n",
        "Line" : 2282,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "#\r\n\n# USER generated/provided spec file handling.\r\n\n#\r\n",
        "Line" : 2295,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# We can have a component specific spec file.\r\n",
        "Line" : 2299,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# old file name format for back compatibility\r\n",
        "Line" : 2320,
        "CharPositionInLine" : 6
      },
      "115" : {
        "Text" : "# this is the main component so ignore the component filename part\r\n",
        "Line" : 2325,
        "CharPositionInLine" : 8
      },
      "116" : {
        "Text" : "# else example:\r\n\n#set(CPACK_RPM_FILE_NAME \"${CPACK_RPM_PACKAGE_NAME}-${CPACK_RPM_PACKAGE_VERSION}-${CPACK_RPM_PACKAGE_RELEASE}-${CPACK_RPM_PACKAGE_ARCHITECTURE}.rpm\")\r\n",
        "Line" : 2331,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# source rpm\r\n",
        "Line" : 2344,
        "CharPositionInLine" : 32
      },
      "118" : {
        "Text" : "# Disable debuginfo packages - srpm generates invalid packages due to\r\n\n# releasing controll to cpack to generate binary packages.\r\n\n# Note however that this doesn't prevent cpack to generate debuginfo\r\n\n# packages when run from srpm with --rebuild.\r\n",
        "Line" : 2357,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# %{?_smp_mflags} -> -j option\r\n",
        "Line" : 2373,
        "CharPositionInLine" : 22
      },
      "120" : {
        "Text" : "# binary rpm with single debuginfo package\r\n",
        "Line" : 2435,
        "CharPositionInLine" : 30
      },
      "121" : {
        "Text" : "# binary rpm\r\n",
        "Line" : 2473,
        "CharPositionInLine" : 10
      },
      "122" : {
        "Text" : "# find generated spec file and take its name\r\n",
        "Line" : 2475,
        "CharPositionInLine" : 6
      },
      "123" : {
        "Text" : "# We should generate a USER spec file template:\r\n\n#  - either because the user asked for it : CPACK_RPM_GENERATE_USER_BINARY_SPECFILE_TEMPLATE\r\n\n#  - or the user did not provide one : NOT CPACK_RPM_USER_BINARY_SPECFILE\r\n",
        "Line" : 2484,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Stop here if we were asked to only generate a template USER spec file\r\n\n# The generated file may then be used as a template by user who wants\r\n\n# to customize their own spec file.\r\n",
        "Line" : 2575,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# After that we may either use a user provided spec file\r\n\n# or generate one using appropriate variables value.\r\n",
        "Line" : 2583,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# User may have specified SPECFILE just use it\r\n",
        "Line" : 2586,
        "CharPositionInLine" : 4
      },
      "127" : {
        "Text" : "# The user provided file is processed for @var replacement\r\n",
        "Line" : 2588,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# No User specified spec file, will use the generated spec file\r\n",
        "Line" : 2591,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# Note the just created file is processed for @var replacement\r\n",
        "Line" : 2593,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# generate package\r\n",
        "Line" : 2597,
        "CharPositionInLine" : 30
      },
      "131" : {
        "Text" : "# Now call rpmbuild using the SPECFILE\r\n",
        "Line" : 2599,
        "CharPositionInLine" : 6
      },
      "132" : {
        "Text" : "# find generated rpm files and take their names\r\n",
        "Line" : 2625,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# Tell file(GLOB_RECURSE) not to follow directory symlinks\r\n\n# even if the project does not set this policy to NEW.\r\n",
        "Line" : 2627,
        "CharPositionInLine" : 6
      },
      "134" : {
        "Text" : "# check if other files have to be renamed\r\n",
        "Line" : 2646,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 135
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackWIX.cmake" : {
      "ObjectId" : "0051359451628953b3c755d3a681b82855b6f842",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CPackWIX\r\n\n# --------\r\n\n#\r\n\n# CPack WiX generator specific options\r\n\n#\r\n\n# Variables specific to CPack WiX generator\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variables are specific to the installers built on\r\n\n# Windows using WiX.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_UPGRADE_GUID\r\n\n#\r\n\n#  Upgrade GUID (``Product/@UpgradeCode``)\r\n\n#\r\n\n#  Will be automatically generated unless explicitly provided.\r\n\n#\r\n\n#  It should be explicitly set to a constant generated globally unique\r\n\n#  identifier (GUID) to allow your installers to replace existing\r\n\n#  installations that use the same GUID.\r\n\n#\r\n\n#  You may for example explicitly set this variable in your\r\n\n#  CMakeLists.txt to the value that has been generated per default.  You\r\n\n#  should not use GUIDs that you did not generate yourself or which may\r\n\n#  belong to other projects.\r\n\n#\r\n\n#  A GUID shall have the following fixed length syntax::\r\n\n#\r\n\n#   XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\r\n\n#\r\n\n#  (each X represents an uppercase hexadecimal digit)\r\n\n#\r\n\n# .. variable:: CPACK_WIX_PRODUCT_GUID\r\n\n#\r\n\n#  Product GUID (``Product/@Id``)\r\n\n#\r\n\n#  Will be automatically generated unless explicitly provided.\r\n\n#\r\n\n#  If explicitly provided this will set the Product Id of your installer.\r\n\n#\r\n\n#  The installer will abort if it detects a pre-existing installation that\r\n\n#  uses the same GUID.\r\n\n#\r\n\n#  The GUID shall use the syntax described for CPACK_WIX_UPGRADE_GUID.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_LICENSE_RTF\r\n\n#\r\n\n#  RTF License File\r\n\n#\r\n\n#  If CPACK_RESOURCE_FILE_LICENSE has an .rtf extension it is used as-is.\r\n\n#\r\n\n#  If CPACK_RESOURCE_FILE_LICENSE has an .txt extension it is implicitly\r\n\n#  converted to RTF by the WiX Generator.\r\n\n#  The expected encoding of the .txt file is UTF-8.\r\n\n#\r\n\n#  With CPACK_WIX_LICENSE_RTF you can override the license file used by the\r\n\n#  WiX Generator in case CPACK_RESOURCE_FILE_LICENSE is in an unsupported\r\n\n#  format or the .txt -> .rtf conversion does not work as expected.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_PRODUCT_ICON\r\n\n#\r\n\n#  The Icon shown next to the program name in Add/Remove programs.\r\n\n#\r\n\n#  If set, this icon is used in place of the default icon.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_UI_REF\r\n\n#\r\n\n#  This variable allows you to override the Id of the ``<UIRef>`` element\r\n\n#  in the WiX template.\r\n\n#\r\n\n#  The default is ``WixUI_InstallDir`` in case no CPack components have\r\n\n#  been defined and ``WixUI_FeatureTree`` otherwise.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_UI_BANNER\r\n\n#\r\n\n#  The bitmap will appear at the top of all installer pages other than the\r\n\n#  welcome and completion dialogs.\r\n\n#\r\n\n#  If set, this image will replace the default banner image.\r\n\n#\r\n\n#  This image must be 493 by 58 pixels.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_UI_DIALOG\r\n\n#\r\n\n#  Background bitmap used on the welcome and completion dialogs.\r\n\n#\r\n\n#  If this variable is set, the installer will replace the default dialog\r\n\n#  image.\r\n\n#\r\n\n#  This image must be 493 by 312 pixels.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_PROGRAM_MENU_FOLDER\r\n\n#\r\n\n#  Start menu folder name for launcher.\r\n\n#\r\n\n#  If this variable is not set, it will be initialized with CPACK_PACKAGE_NAME\r\n\n#\r\n\n# .. variable:: CPACK_WIX_CULTURES\r\n\n#\r\n\n#  Language(s) of the installer\r\n\n#\r\n\n#  Languages are compiled into the WixUI extension library.  To use them,\r\n\n#  simply provide the name of the culture.  If you specify more than one\r\n\n#  culture identifier in a comma or semicolon delimited list, the first one\r\n\n#  that is found will be used.  You can find a list of supported languages at:\r\n\n#  http://wix.sourceforge.net/manual-wix3/WixUI_localization.htm\r\n\n#\r\n\n# .. variable:: CPACK_WIX_TEMPLATE\r\n\n#\r\n\n#  Template file for WiX generation\r\n\n#\r\n\n#  If this variable is set, the specified template will be used to generate\r\n\n#  the WiX wxs file.  This should be used if further customization of the\r\n\n#  output is required.\r\n\n#\r\n\n#  If this variable is not set, the default MSI template included with CMake\r\n\n#  will be used.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_PATCH_FILE\r\n\n#\r\n\n#  Optional list of XML files with fragments to be inserted into\r\n\n#  generated WiX sources\r\n\n#\r\n\n#  This optional variable can be used to specify an XML file that the\r\n\n#  WiX generator will use to inject fragments into its generated\r\n\n#  source files.\r\n\n#\r\n\n#  Patch files understood by the CPack WiX generator\r\n\n#  roughly follow this RELAX NG compact schema:\r\n\n#\r\n\n#  .. code-block:: none\r\n\n#\r\n\n#     start = CPackWiXPatch\r\n\n#\r\n\n#     CPackWiXPatch = element CPackWiXPatch { CPackWiXFragment* }\r\n\n#\r\n\n#     CPackWiXFragment = element CPackWiXFragment\r\n\n#     {\r\n\n#         attribute Id { string },\r\n\n#         fragmentContent*\r\n\n#     }\r\n\n#\r\n\n#     fragmentContent = element * - CPackWiXFragment\r\n\n#     {\r\n\n#         (attribute * { text } | text | fragmentContent)*\r\n\n#     }\r\n\n#\r\n\n#  Currently fragments can be injected into most\r\n\n#  Component, File, Directory and Feature elements.\r\n\n#\r\n\n#  The following additional special Ids can be used:\r\n\n#\r\n\n#  * ``#PRODUCT`` for the ``<Product>`` element.\r\n\n#  * ``#PRODUCTFEATURE`` for the root ``<Feature>`` element.\r\n\n#\r\n\n#  The following example illustrates how this works.\r\n\n#\r\n\n#  Given that the WiX generator creates the following XML element:\r\n\n#\r\n\n#  .. code-block:: xml\r\n\n#\r\n\n#     <Component Id=\"CM_CP_applications.bin.my_libapp.exe\" Guid=\"*\"/>\r\n\n#\r\n\n#  The following XML patch file may be used to inject an Environment element\r\n\n#  into it:\r\n\n#\r\n\n#  .. code-block:: xml\r\n\n#\r\n\n#     <CPackWiXPatch>\r\n\n#       <CPackWiXFragment Id=\"CM_CP_applications.bin.my_libapp.exe\">\r\n\n#         <Environment Id=\"MyEnvironment\" Action=\"set\"\r\n\n#           Name=\"MyVariableName\" Value=\"MyVariableValue\"/>\r\n\n#       </CPackWiXFragment>\r\n\n#     </CPackWiXPatch>\r\n\n#\r\n\n# .. variable:: CPACK_WIX_EXTRA_SOURCES\r\n\n#\r\n\n#  Extra WiX source files\r\n\n#\r\n\n#  This variable provides an optional list of extra WiX source files (.wxs)\r\n\n#  that should be compiled and linked.  The full path to source files is\r\n\n#  required.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_EXTRA_OBJECTS\r\n\n#\r\n\n#  Extra WiX object files or libraries\r\n\n#\r\n\n#  This variable provides an optional list of extra WiX object (.wixobj)\r\n\n#  and/or WiX library (.wixlib) files.  The full path to objects and libraries\r\n\n#  is required.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_EXTENSIONS\r\n\n#\r\n\n#  This variable provides a list of additional extensions for the WiX\r\n\n#  tools light and candle.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_<TOOL>_EXTENSIONS\r\n\n#\r\n\n#  This is the tool specific version of CPACK_WIX_EXTENSIONS.\r\n\n#  ``<TOOL>`` can be either LIGHT or CANDLE.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_<TOOL>_EXTRA_FLAGS\r\n\n#\r\n\n#  This list variable allows you to pass additional\r\n\n#  flags to the WiX tool ``<TOOL>``.\r\n\n#\r\n\n#  Use it at your own risk.\r\n\n#  Future versions of CPack may generate flags which may be in conflict\r\n\n#  with your own flags.\r\n\n#\r\n\n#  ``<TOOL>`` can be either LIGHT or CANDLE.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_CMAKE_PACKAGE_REGISTRY\r\n\n#\r\n\n#  If this variable is set the generated installer will create\r\n\n#  an entry in the windows registry key\r\n\n#  ``HKEY_LOCAL_MACHINE\\Software\\Kitware\\CMake\\Packages\\<package>``\r\n\n#  The value for ``<package>`` is provided by this variable.\r\n\n#\r\n\n#  Assuming you also install a CMake configuration file this will\r\n\n#  allow other CMake projects to find your package with\r\n\n#  the :command:`find_package` command.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_PROPERTY_<PROPERTY>\r\n\n#\r\n\n#  This variable can be used to provide a value for\r\n\n#  the Windows Installer property ``<PROPERTY>``\r\n\n#\r\n\n#  The following list contains some example properties that can be used to\r\n\n#  customize information under\r\n\n#  \"Programs and Features\" (also known as \"Add or Remove Programs\")\r\n\n#\r\n\n#  * ARPCOMMENTS - Comments\r\n\n#  * ARPHELPLINK - Help and support information URL\r\n\n#  * ARPURLINFOABOUT - General information URL\r\n\n#  * ARPURLUPDATEINFO - Update information URL\r\n\n#  * ARPHELPTELEPHONE - Help and support telephone number\r\n\n#  * ARPSIZE - Size (in kilobytes) of the application\r\n\n#\r\n\n# .. variable:: CPACK_WIX_ROOT_FEATURE_TITLE\r\n\n#\r\n\n# Sets the name of the root install feature in the WIX installer. Same as\r\n\n# CPACK_COMPONENT_<compName>_DISPLAY_NAME for components.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_ROOT_FEATURE_DESCRIPTION\r\n\n#\r\n\n# Sets the description of the root install feature in the WIX installer. Same as\r\n\n# CPACK_COMPONENT_<compName>_DESCRIPTION for components.\r\n\n#\r\n\n# .. variable:: CPACK_WIX_SKIP_PROGRAM_FOLDER\r\n\n#\r\n\n# If this variable is set to true, the default install location\r\n\n# of the generated package will be CPACK_PACKAGE_INSTALL_DIRECTORY directly.\r\n\n# The install location will not be located relatively below\r\n\n# ProgramFiles or ProgramFiles64.\r\n\n#\r\n\n#   .. note::\r\n\n#     Installers created with this feature do not take differences\r\n\n#     between the system on which the installer is created\r\n\n#     and the system on which the installer might be used into account.\r\n\n#\r\n\n#     It is therefor possible that the installer e.g. might try to install\r\n\n#     onto a drive that is unavailable or unintended or a path that does not\r\n\n#     follow the localization or convention of the system on which the\r\n\n#     installation is performed.\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CPackZIP.cmake" : {
      "ObjectId" : "05cb535695e93060d0a8c63818060eaaeff40a84",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CSharpUtilities.cmake" : {
      "ObjectId" : "29f0bcf126cf0513213a2fe56d36ce311168f16d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nCSharpUtilities\r\n---------------\r\n\r\nFunctions to make configuration of CSharp/.NET targets easier.\r\n\r\nA collection of CMake utility functions useful for dealing with CSharp\r\ntargets for Visual Studio generators from version 2010 and later.\r\n\r\nThe following functions are provided by this module:\r\n\r\n**Main functions**\r\n\r\n- :command:`csharp_set_windows_forms_properties`\r\n- :command:`csharp_set_designer_cs_properties`\r\n- :command:`csharp_set_xaml_cs_properties`\r\n\r\n**Helper functions**\r\n\r\n- :command:`csharp_get_filename_keys`\r\n- :command:`csharp_get_filename_key_base`\r\n- :command:`csharp_get_dependentupon_name`\r\n\r\nMain functions provided by the module\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n.. command:: csharp_set_windows_forms_properties\r\n\r\n  Sets source file properties for use of Windows Forms. Use this, if your CSharp\r\n  target uses Windows Forms::\r\n\r\n    csharp_set_windows_forms_properties([<file1> [<file2> [...]]])\r\n\r\n  ``<fileN>``\r\n    List of all source files which are relevant for setting the\r\n    :prop_sf:`VS_CSHARP_<tagname>` properties (including ``.cs``, ``.resx`` and\r\n    ``.Designer.cs`` extensions).\r\n\r\n  In the list of all given files for all files ending with ``.Designer.cs`` and\r\n  ``.resx`` is searched.  For every *designer* or *resource* file a file with the\r\n  same base name but only ``.cs`` as extension is searched.  If this is found, the\r\n  :prop_sf:`VS_CSHARP_<tagname>` properties are set as follows:\r\n\r\n  for the **.cs** file:\r\n   - VS_CSHARP_SubType \"Form\"\r\n\r\n  for the **.Designer.cs** file (if it exists):\r\n   - VS_CSHARP_DependentUpon <cs-filename>\r\n   - VS_CSHARP_DesignTime \"\" (delete tag if previously defined)\r\n   - VS_CSHARP_AutoGen \"\"(delete tag if previously defined)\r\n\r\n  for the **.resx** file (if it exists):\r\n   - VS_RESOURCE_GENERATOR \"\" (delete tag if previously defined)\r\n   - VS_CSHARP_DependentUpon <cs-filename>\r\n   - VS_CSHARP_SubType \"Designer\"\r\n\r\n.. command:: csharp_set_designer_cs_properties\r\n\r\n  Sets source file properties of ``.Designer.cs`` files depending on\r\n  sibling filenames. Use this, if your CSharp target does **not**\r\n  use Windows Forms (for Windows Forms use\r\n  :command:`csharp_set_designer_cs_properties` instead)::\r\n\r\n    csharp_set_designer_cs_properties([<file1> [<file2> [...]]])\r\n\r\n  ``<fileN>``\r\n    List of all source files which are relevant for setting the\r\n    :prop_sf:`VS_CSHARP_<tagname>` properties (including ``.cs``,\r\n    ``.resx``, ``.settings`` and ``.Designer.cs`` extensions).\r\n\r\n  In the list of all given files for all files ending with\r\n  ``.Designer.cs`` is searched. For every *designer* file all files\r\n  with the same base name but different extensions are searched. If\r\n  a match is found, the source file properties of the *designer* file\r\n  are set depending on the extension of the matched file:\r\n\r\n  if match is **.resx** file:\r\n   - VS_CSHARP_AutoGen \"True\"\r\n   - VS_CSHARP_DesignTime \"True\"\r\n   - VS_CSHARP_DependentUpon <resx-filename>\r\n\r\n  if match is **.cs** file:\r\n   - VS_CSHARP_DependentUpon <cs-filename>\r\n\r\n  if match is **.settings** file:\r\n   - VS_CSHARP_AutoGen \"True\"\r\n   - VS_CSHARP_DesignTimeSharedInput \"True\"\r\n   - VS_CSHARP_DependentUpon <settings-filename>\r\n\r\n.. note::\r\n\r\n    Because the source file properties of the ``.Designer.cs`` file are set according\r\n    to the found matches and every match sets the **VS_CSHARP_DependentUpon**\r\n    property, there should only be one match for each ``Designer.cs`` file.\r\n\r\n.. command:: csharp_set_xaml_cs_properties\r\n\r\n  Sets source file properties for use of Windows Presentation Foundation (WPF) and\r\n  XAML. Use this, if your CSharp target uses WPF/XAML::\r\n\r\n    csharp_set_xaml_cs_properties([<file1> [<file2> [...]]])\r\n\r\n  ``<fileN>``\r\n    List of all source files which are relevant for setting the\r\n    :prop_sf:`VS_CSHARP_<tagname>` properties (including ``.cs``,\r\n    ``.xaml``, and ``.xaml.cs`` extensions).\r\n\r\n  In the list of all given files for all files ending with\r\n  ``.xaml.cs`` is searched. For every *xaml-cs* file, a file\r\n  with the same base name but extension ``.xaml`` is searched.\r\n  If a match is found, the source file properties of the ``.xaml.cs``\r\n  file are set:\r\n\r\n   - VS_CSHARP_DependentUpon <xaml-filename>\r\n\r\nHelper functions which are used by the above ones\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n.. command:: csharp_get_filename_keys\r\n\r\n  Helper function which computes a list of key values to identify\r\n  source files independently of relative/absolute paths given in cmake\r\n  and eliminates case sensitivity::\r\n\r\n    csharp_get_filename_keys(OUT [<file1> [<file2> [...]]])\r\n\r\n  ``OUT``\r\n    Name of the variable in which the list of keys is stored\r\n\r\n  ``<fileN>``\r\n    filename(s) as given to to CSharp target using :command:`add_library`\r\n    or :command:`add_executable`\r\n\r\n  In some way the function applies a canonicalization to the source names.\r\n  This is necessary to find file matches if the files have been added to\r\n  the target with different directory prefixes:\r\n\r\n  .. code-block:: cmake\r\n\r\n    add_library(lib\r\n      myfile.cs\r\n      ${CMAKE_CURRENT_SOURCE_DIR}/myfile.Designer.cs)\r\n\r\n    set_source_files_properties(myfile.Designer.cs PROPERTIES\r\n      VS_CSHARP_DependentUpon myfile.cs)\r\n\r\n    # this will fail, because in cmake\r\n    #  - ${CMAKE_CURRENT_SOURCE_DIR}/myfile.Designer.cs\r\n    #  - myfile.Designer.cs\r\n    # are not the same source file. The source file property is not set.\r\n\r\n.. command:: csharp_get_filename_key_base\r\n\r\n  Returns the full filepath and name **without** extension of a key.\r\n  KEY is expected to be a key from csharp_get_filename_keys. In BASE\r\n  the value of KEY without the file extension is returned::\r\n\r\n    csharp_get_filename_key_base(BASE KEY)\r\n\r\n  ``BASE``\r\n    Name of the variable with the computed \"base\" of ``KEY``.\r\n\r\n  ``KEY``\r\n    The key of which the base will be computed. Expected to be a\r\n    upper case full filename.\r\n\r\n.. command:: csharp_get_dependentupon_name\r\n\r\n  Computes a string which can be used as value for the source file property\r\n  :prop_sf:`VS_CSHARP_<tagname>` with *target* being ``DependentUpon``::\r\n\r\n    csharp_get_dependentupon_name(NAME FILE)\r\n\r\n  ``NAME``\r\n    Name of the variable with the result value\r\n\r\n  ``FILE``\r\n    Filename to convert to ``<DependentUpon>`` value\r\n\r\n  Actually this is only the filename without any path given at the moment.\r\n\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set properties of main form file\r\n",
        "Line" : 218,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# set properties of designer file (if found)\r\n",
        "Line" : 223,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# set properties of corresponding resource file (if found)\r\n",
        "Line" : 233,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CTest.cmake" : {
      "ObjectId" : "0e34d5b51af53a1fab0b50e4c5d5d33dfcb2b114",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nCTest\r\n-----\r\n\r\nConfigure a project for testing with CTest/CDash\r\n\r\nInclude this module in the top CMakeLists.txt file of a project to\r\nenable testing with CTest and dashboard submissions to CDash::\r\n\r\n  project(MyProject)\r\n  ...\r\n  include(CTest)\r\n\r\nThe module automatically creates a ``BUILD_TESTING`` option that selects\r\nwhether to enable testing support (``ON`` by default).  After including\r\nthe module, use code like::\r\n\r\n  if(BUILD_TESTING)\r\n    # ... CMake code to create tests ...\r\n  endif()\r\n\r\nto creating tests when testing is enabled.\r\n\r\nTo enable submissions to a CDash server, create a ``CTestConfig.cmake``\r\nfile at the top of the project with content such as::\r\n\r\n  set(CTEST_PROJECT_NAME \"MyProject\")\r\n  set(CTEST_NIGHTLY_START_TIME \"01:00:00 UTC\")\r\n  set(CTEST_DROP_METHOD \"http\")\r\n  set(CTEST_DROP_SITE \"my.cdash.org\")\r\n  set(CTEST_DROP_LOCATION \"/submit.php?project=MyProject\")\r\n  set(CTEST_DROP_SITE_CDASH TRUE)\r\n\r\n(the CDash server can provide the file to a project administrator who\r\nconfigures ``MyProject``).  Settings in the config file are shared by\r\nboth this ``CTest`` module and the :manual:`ctest(1)` command-line\r\n:ref:`Dashboard Client` mode (``ctest -S``).\r\n\r\nWhile building a project for submission to CDash, CTest scans the\r\nbuild output for errors and warnings and reports them with surrounding\r\ncontext from the build log.  This generic approach works for all build\r\ntools, but does not give details about the command invocation that\r\nproduced a given problem.  One may get more detailed reports by setting\r\nthe :variable:`CTEST_USE_LAUNCHERS` variable::\r\n\r\n  set(CTEST_USE_LAUNCHERS 1)\r\n\r\nin the ``CTestConfig.cmake`` file.\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# function to turn generator name into a version string\r\n\n# like vs7 vs71 vs8 vs9\r\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup some auxilary macros\r\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Make sure testing is enabled\r\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# the project can have a DartConfig.cmake file\r\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Dashboard is opened for submissions for a 24 hour period starting at\r\n\n# the specified NIGHTLY_START_TIME. Time is specified in 24 hour format.\r\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# set the site name\r\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# set the build name\r\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# the build command\r\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# the default build configuration the ctest build handler will use\r\n\n# if there is no -C arg given to ctest:\r\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CTestCoverageCollectGCOV.cmake" : {
      "ObjectId" : "ad1baf43073f419b5da27528d569a862833a09e3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CTestCoverageCollectGCOV\r\n\n# ------------------------\r\n\n#\r\n\n# This module provides the ``ctest_coverage_collect_gcov`` function.\r\n\n#\r\n\n# This function runs gcov on all .gcda files found in the binary tree\r\n\n# and packages the resulting .gcov files into a tar file.\r\n\n# This tarball also contains the following:\r\n\n#\r\n\n# * *data.json* defines the source and build directories for use by CDash.\r\n\n# * *Labels.json* indicates any :prop_sf:`LABELS` that have been set on the\r\n\n#   source files.\r\n\n# * The *uncovered* directory holds any uncovered files found by\r\n\n#   :variable:`CTEST_EXTRA_COVERAGE_GLOB`.\r\n\n#\r\n\n# After generating this tar file, it can be sent to CDash for display with the\r\n\n# :command:`ctest_submit(CDASH_UPLOAD)` command.\r\n\n#\r\n\n# .. command:: cdash_coverage_collect_gcov\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     ctest_coverage_collect_gcov(TARBALL <tarfile>\r\n\n#       [SOURCE <source_dir>][BUILD <build_dir>]\r\n\n#       [GCOV_COMMAND <gcov_command>]\r\n\n#       [GCOV_OPTIONS <options>...]\r\n\n#       )\r\n\n#\r\n\n#   Run gcov and package a tar file for CDash.  The options are:\r\n\n#\r\n\n#   ``TARBALL <tarfile>``\r\n\n#     Specify the location of the ``.tar`` file to be created for later\r\n\n#     upload to CDash.  Relative paths will be interpreted with respect\r\n\n#     to the top-level build directory.\r\n\n#\r\n\n#   ``SOURCE <source_dir>``\r\n\n#     Specify the top-level source directory for the build.\r\n\n#     Default is the value of :variable:`CTEST_SOURCE_DIRECTORY`.\r\n\n#\r\n\n#   ``BUILD <build_dir>``\r\n\n#     Specify the top-level build directory for the build.\r\n\n#     Default is the value of :variable:`CTEST_BINARY_DIRECTORY`.\r\n\n#\r\n\n#   ``GCOV_COMMAND <gcov_command>``\r\n\n#     Specify the full path to the ``gcov`` command on the machine.\r\n\n#     Default is the value of :variable:`CTEST_COVERAGE_COMMAND`.\r\n\n#\r\n\n#   ``GCOV_OPTIONS <options>...``\r\n\n#     Specify options to be passed to gcov.  The ``gcov`` command\r\n\n#     is run as ``gcov <options>... -o <gcov-dir> <file>.gcda``.\r\n\n#     If not specified, the default option is just ``-b``.\r\n\n#\r\n\n#   ``GLOB``\r\n\n#     Recursively search for .gcda files in build_dir rather than\r\n\n#     determining search locations by reading TargetDirectories.txt.\r\n\n#\r\n\n#   ``DELETE``\r\n\n#     Delete coverage files after they've been packaged into the .tar.\r\n\n#\r\n\n#   ``QUIET``\r\n\n#     Suppress non-error messages that otherwise would have been\r\n\n#     printed out by this function.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# run gcov on each gcda file in the binary tree\r\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# if we have gcda files then also grab the labels file for that target\r\n",
        "Line" : 99,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# look for gcda files in the target directories\r\n\n# this will be faster and only look where the files will be\r\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# if we have gcda files then also grab the labels file for that target\r\n",
        "Line" : 113,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# return early if no coverage files were found\r\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# setup the dir for the coverage files\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# call gcov on each .gcda file\r\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# get the directory of the gcda file\r\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# run gcov, this will produce the .gcov file in the current\r\n\n# working directory\r\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# create json file with project information\r\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# collect the gcov files\r\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# if CTEST_EXTRA_COVERAGE_GLOB was specified we search for files\r\n\n# that might be uncovered\r\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Check if this uncovered file should be excluded.\r\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Copy from source to binary dir, preserving any intermediate subdirectories.\r\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Strip leading slash.\r\n",
        "Line" : 242,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# tar up the coverage info with the same date so that the md5\r\n\n# sum will be the same for the tar file independent of file time\r\n\n# stamps\r\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CTestScriptMode.cmake" : {
      "ObjectId" : "c2493b2980c295af389a090ca88ba59fb4da461a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CTestScriptMode\r\n\n# ---------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This file is read by ctest in script mode (-S)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Determine the current system, so this information can be used\r\n\n# in ctest scripts\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Also load the system specific file, which sets up e.g. the search paths.\r\n\n# This makes the FIND_XXX() calls work much better\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CTestTargets.cmake" : {
      "ObjectId" : "7143bee4953840aa840d2947fdc4cb1c4d1d2ee4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# make directories in the binary tree\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use CTest\r\n\n# configure files\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# Section 3:\r\n\n#\r\n\n# Custom targets to perform dashboard builds and submissions.\r\n\n# These should NOT need to be modified from project to project.\r\n\n#\r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We need to pass the configuration type on the test command line.\r\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add convenience targets.  Do this at most once in case of nested\r\n\n# projects.\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For all generators add basic testing targets.\r\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# For Makefile generators add more granular targets.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Make targets for Experimental builds\r\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# missing purify\r\n",
        "Line" : 72,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# If requested, add an alias that is the equivalent of the built-in \"test\"\r\n\n# or \"RUN_TESTS\" target:\r\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CTestUseLaunchers.cmake" : {
      "ObjectId" : "28332791305a51e7f3e54194316e52db41a86890",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CTestUseLaunchers\r\n\n# -----------------\r\n\n#\r\n\n# Set the RULE_LAUNCH_* global properties when CTEST_USE_LAUNCHERS is on.\r\n\n#\r\n\n# CTestUseLaunchers is automatically included when you include(CTest).\r\n\n# However, it is split out into its own module file so projects can use\r\n\n# the CTEST_USE_LAUNCHERS functionality independently.\r\n\n#\r\n\n# To use launchers, set CTEST_USE_LAUNCHERS to ON in a ctest -S\r\n\n# dashboard script, and then also set it in the cache of the configured\r\n\n# project.  Both cmake and ctest need to know the value of it for the\r\n\n# launchers to work properly.  CMake needs to know in order to generate\r\n\n# proper build rules, and ctest, in order to produce the proper error\r\n\n# and warning analysis.\r\n\n#\r\n\n# For convenience, you may set the ENV variable\r\n\n# CTEST_USE_LAUNCHERS_DEFAULT in your ctest -S script, too.  Then, as\r\n\n# long as your CMakeLists uses include(CTest) or\r\n\n# include(CTestUseLaunchers), it will use the value of the ENV variable\r\n\n# to initialize a CTEST_USE_LAUNCHERS cache variable.  This cache\r\n\n# variable initialization only occurs if CTEST_USE_LAUNCHERS is not\r\n\n# already defined. If CTEST_USE_LAUNCHERS is on in a ctest -S script\r\n\n# the ctest_configure command will add -DCTEST_USE_LAUNCHERS:BOOL=TRUE\r\n\n# to the cmake command used to configure the project.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckCCompilerFlag.cmake" : {
      "ObjectId" : "b625df80fb473a9e4d354158ac37f95babac37a8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckCCompilerFlag\r\n\n# ------------------\r\n\n#\r\n\n# Check whether the C compiler supports a given flag.\r\n\n#\r\n\n# CHECK_C_COMPILER_FLAG(<flag> <var>)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <flag> - the compiler flag\r\n\n#   <var>  - variable to store the result\r\n\n#            Will be created as an internal cache variable.\r\n\n#\r\n\n# This internally calls the check_c_source_compiles macro and sets\r\n\n# CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for\r\n\n# CheckCSourceCompiles for a listing of variables that can otherwise\r\n\n# modify the build.  The result only tells that the compiler does not\r\n\n# give an error message when it encounters the flag.  If the flag has\r\n\n# any effect or even a specific one is beyond the scope of this module.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Normalize locale during test compilation.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Some compilers do not fail with a bad flag\r\n",
        "Line" : 40,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# GNU\r\n",
        "Line" : 41,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckCSourceCompiles.cmake" : {
      "ObjectId" : "61f0849e44caad45945d83a2d5878ebcc6583282",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckCSourceCompiles\r\n\n# --------------------\r\n\n#\r\n\n# Check if given C source compiles and links into an executable\r\n\n#\r\n\n# CHECK_C_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>])\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <code>       - source code to try to compile, must define 'main'\r\n\n#   <var>        - variable to store whether the source code compiled\r\n\n#                  Will be created as an internal cache variable.\r\n\n#   <fail-regex> - fail if test output matches this regex\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckCSourceRuns.cmake" : {
      "ObjectId" : "a7362348875de155c009aa1fc5d8de0d3563d914",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckCSourceRuns\r\n\n# ----------------\r\n\n#\r\n\n# Check if the given C source code compiles and runs.\r\n\n#\r\n\n# CHECK_C_SOURCE_RUNS(<code> <var>)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <code>   - source code to try to compile\r\n\n#   <var>    - variable to store the result\r\n\n#              (1 for success, empty for failure)\r\n\n#              Will be created as an internal cache variable.\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if it did not compile make the return value fail code of 1\r\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# if the return value was 0 then it worked\r\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckCXXCompilerFlag.cmake" : {
      "ObjectId" : "2a823e84d2dedcf2f883b4e3ab91d7113bc69333",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckCXXCompilerFlag\r\n\n# --------------------\r\n\n#\r\n\n# Check whether the CXX compiler supports a given flag.\r\n\n#\r\n\n# CHECK_CXX_COMPILER_FLAG(<flag> <var>)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <flag> - the compiler flag\r\n\n#   <var>  - variable to store the result\r\n\n#\r\n\n# This internally calls the check_cxx_source_compiles macro and sets\r\n\n# CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for\r\n\n# CheckCXXSourceCompiles for a listing of variables that can otherwise\r\n\n# modify the build.  The result only tells that the compiler does not\r\n\n# give an error message when it encounters the flag.  If the flag has\r\n\n# any effect or even a specific one is beyond the scope of this module.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Normalize locale during test compilation.\r\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Some compilers do not fail with a bad flag\r\n",
        "Line" : 39,
        "CharPositionInLine" : 5
      },
      "4" : {
        "Text" : "# GNU\r\n",
        "Line" : 40,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckCXXSourceCompiles.cmake" : {
      "ObjectId" : "32f44c1e75cce77b4a85c8f9c6dcfa66d5e46233",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckCXXSourceCompiles\r\n\n# ----------------------\r\n\n#\r\n\n# Check if given C++ source compiles and links into an executable\r\n\n#\r\n\n# CHECK_CXX_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>])\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <code>       - source code to try to compile, must define 'main'\r\n\n#   <var>        - variable to store whether the source code compiled\r\n\n#                  Will be created as an internal cache variable.\r\n\n#   <fail-regex> - fail if test output matches this regex\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckCXXSourceRuns.cmake" : {
      "ObjectId" : "984cb3d4e1570048cc74bc6f128b2e7620e221b0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckCXXSourceRuns\r\n\n# ------------------\r\n\n#\r\n\n# Check if the given C++ source code compiles and runs.\r\n\n#\r\n\n# CHECK_CXX_SOURCE_RUNS(<code> <var>)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <code>   - source code to try to compile\r\n\n#   <var>    - variable to store the result\r\n\n#              (1 for success, empty for failure)\r\n\n#              Will be created as an internal cache variable.\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if it did not compile make the return value fail code of 1\r\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# if the return value was 0 then it worked\r\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckCXXSymbolExists.cmake" : {
      "ObjectId" : "229b709dfb0395d58ab423e92af3b60d66502ab0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckCXXSymbolExists\r\n\n# --------------------\r\n\n#\r\n\n# Check if a symbol exists as a function, variable, or macro in C++\r\n\n#\r\n\n# CHECK_CXX_SYMBOL_EXISTS(<symbol> <files> <variable>)\r\n\n#\r\n\n# Check that the <symbol> is available after including given header\r\n\n# <files> and store the result in a <variable>.  Specify the list of\r\n\n# files in one argument as a semicolon-separated list.\r\n\n# CHECK_CXX_SYMBOL_EXISTS() can be used to check in C++ files, as\r\n\n# opposed to CHECK_SYMBOL_EXISTS(), which works only for C.\r\n\n#\r\n\n# If the header files define the symbol as a macro it is considered\r\n\n# available and assumed to work.  If the header files declare the symbol\r\n\n# as a function or variable then the symbol must also be available for\r\n\n# linking.  If the symbol is a type or enum value it will not be\r\n\n# recognized (consider using CheckTypeSize or CheckCSourceCompiles).\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckFortranCompilerFlag.cmake" : {
      "ObjectId" : "cfae57cb2d662d31304de9c9bc9e8d7cb3026afd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckFortranCompilerFlag\r\n\n# ------------------------\r\n\n#\r\n\n# Check whether the Fortran compiler supports a given flag.\r\n\n#\r\n\n# CHECK_Fortran_COMPILER_FLAG(<flag> <var>)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <flag> - the compiler flag\r\n\n#   <var>  - variable to store the result\r\n\n#            Will be created as an internal cache variable.\r\n\n#\r\n\n# This internally calls the check_fortran_source_compiles macro and\r\n\n# sets CMAKE_REQUIRED_DEFINITIONS to <flag>.  See help for\r\n\n# CheckFortranSourceCompiles for a listing of variables that can\r\n\n# otherwise modify the build.  The result only tells that the compiler\r\n\n# does not give an error message when it encounters the flag.  If the\r\n\n# flag has any effect or even a specific one is beyond the scope of\r\n\n# this module.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Normalize locale during test compilation.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Some compilers do not fail with a bad flag\r\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# GNU\r\n",
        "Line" : 42,
        "CharPositionInLine" : 76
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckFortranFunctionExists.cmake" : {
      "ObjectId" : "877651e1edad5138628fe30431c7cf8211d4b976",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckFortranFunctionExists\r\n\n# --------------------------\r\n\n#\r\n\n# macro which checks if the Fortran function exists\r\n\n#\r\n\n# CHECK_FORTRAN_FUNCTION_EXISTS(FUNCTION VARIABLE)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FUNCTION - the name of the Fortran function\r\n\n#   VARIABLE - variable to store the result\r\n\n#              Will be created as an internal cache variable.\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    message(STATUS \"${OUTPUT}\")\r\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckFortranSourceCompiles.cmake" : {
      "ObjectId" : "3092a4fab2bea5ffbe3fb5b2179540573218cca1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckFortranSourceCompiles\r\n\n# --------------------------\r\n\n#\r\n\n# Check if given Fortran source compiles and links into an executable::\r\n\n#\r\n\n#   CHECK_Fortran_SOURCE_COMPILES(<code> <var> [FAIL_REGEX <fail-regex>]\r\n\n#                                 [SRC_EXT <ext>])\r\n\n#\r\n\n# The arguments are:\r\n\n#\r\n\n# ``<code>``\r\n\n#   Source code to try to compile.  It must define a PROGRAM entry point.\r\n\n# ``<var>``\r\n\n#   Variable to store whether the source code compiled.\r\n\n#   Will be created as an internal cache variable.\r\n\n# ``FAIL_REGEX <fail-regex>``\r\n\n#   Fail if test output matches this regex.\r\n\n# ``SRC_EXT <ext>``\r\n\n#   Use source extension ``.<ext>`` instead of the default ``.F``.\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckFunctionExists.cmake" : {
      "ObjectId" : "0276005cee355ffc58e62225da6f533fd5ed7d18",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckFunctionExists\r\n\n# -------------------\r\n\n#\r\n\n# Check if a C function can be linked::\r\n\n#\r\n\n#   check_function_exists(<function> <variable>)\r\n\n#\r\n\n# Check that the ``<function>`` is provided by libraries on the system and store\r\n\n# the result in a ``<variable>``. ``<variable>`` will be created as an internal\r\n\n# cache variable.\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify the\r\n\n# way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#   Prefer using :Module:`CheckSymbolExists` instead of this module,\r\n\n#   for the following reasons:\r\n\n#\r\n\n#   * ``check_function_exists()`` can't detect functions that are inlined\r\n\n#     in headers or specified as a macro.\r\n\n#\r\n\n#   * ``check_function_exists()`` can't detect anything in the 32-bit\r\n\n#     versions of the Win32 API, because of a mismatch in calling conventions.\r\n\n#\r\n\n#   * ``check_function_exists()`` only verifies linking, it does not verify\r\n\n#     that the function is declared in system headers.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckIncludeFile.cmake" : {
      "ObjectId" : "c7f247c94baecbb3f7596ec295c6499dbbffdb42",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckIncludeFile\r\n\n# ----------------\r\n\n#\r\n\n# Provides a macro to check if a header file can be included in ``C``.\r\n\n#\r\n\n# .. command:: CHECK_INCLUDE_FILE\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     CHECK_INCLUDE_FILE(<include> <variable> [<flags>])\r\n\n#\r\n\n#   Check if the given ``<include>`` file may be included in a ``C``\r\n\n#   source file and store the result in an internal cache entry named\r\n\n#   ``<variable>``.  The optional third argument may be used to add\r\n\n#   compilation flags to the check (or use ``CMAKE_REQUIRED_FLAGS`` below).\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ``CMAKE_REQUIRED_FLAGS``\r\n\n#   string of compile command line flags\r\n\n# ``CMAKE_REQUIRED_DEFINITIONS``\r\n\n#   list of macros to define (-DFOO=bar)\r\n\n# ``CMAKE_REQUIRED_INCLUDES``\r\n\n#   list of include directories\r\n\n# ``CMAKE_REQUIRED_QUIET``\r\n\n#   execute quietly without messages\r\n\n#\r\n\n# See the :module:`CheckIncludeFiles` module to check for multiple headers\r\n\n# at once.  See the :module:`CheckIncludeFileCXX` module to check for headers\r\n\n# using the ``CXX`` language.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckIncludeFileCXX.cmake" : {
      "ObjectId" : "0b011a408eadc2c2e3c6a333b4c876286b528efd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckIncludeFileCXX\r\n\n# -------------------\r\n\n#\r\n\n# Provides a macro to check if a header file can be included in ``CXX``.\r\n\n#\r\n\n# .. command:: CHECK_INCLUDE_FILE_CXX\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     CHECK_INCLUDE_FILE_CXX(<include> <variable> [<flags>])\r\n\n#\r\n\n#   Check if the given ``<include>`` file may be included in a ``CXX``\r\n\n#   source file and store the result in an internal cache entry named\r\n\n#   ``<variable>``.  The optional third argument may be used to add\r\n\n#   compilation flags to the check (or use ``CMAKE_REQUIRED_FLAGS`` below).\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ``CMAKE_REQUIRED_FLAGS``\r\n\n#   string of compile command line flags\r\n\n# ``CMAKE_REQUIRED_DEFINITIONS``\r\n\n#   list of macros to define (-DFOO=bar)\r\n\n# ``CMAKE_REQUIRED_INCLUDES``\r\n\n#   list of include directories\r\n\n# ``CMAKE_REQUIRED_QUIET``\r\n\n#   execute quietly without messages\r\n\n#\r\n\n# See modules :module:`CheckIncludeFile` and :module:`CheckIncludeFiles`\r\n\n# to check for one or more ``C`` headers.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckIncludeFiles.cmake" : {
      "ObjectId" : "e16d4e6ba870052b16625fdb340de18d77e9a346",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckIncludeFiles\r\n\n# -----------------\r\n\n#\r\n\n# Provides a macro to check if a list of one or more header files can\r\n\n# be included together in ``C``.\r\n\n#\r\n\n# .. command:: CHECK_INCLUDE_FILES\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     CHECK_INCLUDE_FILES(\"<includes>\" <variable>)\r\n\n#\r\n\n#   Check if the given ``<includes>`` list may be included together\r\n\n#   in a ``C`` source file and store the result in an internal cache\r\n\n#   entry named ``<variable>``.  Specify the ``<includes>`` argument\r\n\n#   as a :ref:`;-list <CMake Language Lists>` of header file names.\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ``CMAKE_REQUIRED_FLAGS``\r\n\n#   string of compile command line flags\r\n\n# ``CMAKE_REQUIRED_DEFINITIONS``\r\n\n#   list of macros to define (-DFOO=bar)\r\n\n# ``CMAKE_REQUIRED_INCLUDES``\r\n\n#   list of include directories\r\n\n# ``CMAKE_REQUIRED_QUIET``\r\n\n#   execute quietly without messages\r\n\n#\r\n\n# See modules :module:`CheckIncludeFile` and :module:`CheckIncludeFileCXX`\r\n\n# to check for a single header file in ``C`` or ``CXX`` languages.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# remove empty elements\r\n",
        "Line" : 56,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckLanguage.cmake" : {
      "ObjectId" : "675968eae7ee1cd44b9dca97ca6d1dcdb563bd97",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckLanguage\r\n\n# -------------\r\n\n#\r\n\n# Check if a language can be enabled\r\n\n#\r\n\n# Usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   check_language(<lang>)\r\n\n#\r\n\n# where <lang> is a language that may be passed to enable_language()\r\n\n# such as \"Fortran\".  If CMAKE_<lang>_COMPILER is already defined the\r\n\n# check does nothing.  Otherwise it tries enabling the language in a\r\n\n# test project.  The result is cached in CMAKE_<lang>_COMPILER as the\r\n\n# compiler that was found, or NOTFOUND if the language cannot be\r\n\n# enabled.\r\n\n#\r\n\n# Example:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   check_language(Fortran)\r\n\n#   if(CMAKE_Fortran_COMPILER)\r\n\n#     enable_language(Fortran)\r\n\n#   else()\r\n\n#     message(STATUS \"No Fortran support\")\r\n\n#   endif()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckLibraryExists.cmake" : {
      "ObjectId" : "9440f66fd35a6c918e19b6d72b79962db3faaff1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckLibraryExists\r\n\n# ------------------\r\n\n#\r\n\n# Check if the function exists.\r\n\n#\r\n\n# CHECK_LIBRARY_EXISTS (LIBRARY FUNCTION LOCATION VARIABLE)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LIBRARY  - the name of the library you are looking for\r\n\n#   FUNCTION - the name of the function\r\n\n#   LOCATION - location where the library should be found\r\n\n#   VARIABLE - variable to store the result\r\n\n#              Will be created as an internal cache variable.\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckPrototypeDefinition.cmake" : {
      "ObjectId" : "898ebba56335ebba27e55551d9b8a80896af8c53",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckPrototypeDefinition\r\n\n# ------------------------\r\n\n#\r\n\n# Check if the protoype we expect is correct.\r\n\n#\r\n\n# check_prototype_definition(FUNCTION PROTOTYPE RETURN HEADER VARIABLE)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FUNCTION - The name of the function (used to check if prototype exists)\r\n\n#   PROTOTYPE- The prototype to check.\r\n\n#   RETURN - The return value of the function.\r\n\n#   HEADER - The header files required.\r\n\n#   VARIABLE - The variable to store the result.\r\n\n#              Will be created as an internal cache variable.\r\n\n#\r\n\n# Example:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   check_prototype_definition(getpwent_r\r\n\n#    \"struct passwd *getpwent_r(struct passwd *src, char *buf, int buflen)\"\r\n\n#    \"NULL\"\r\n\n#    \"unistd.h;pwd.h\"\r\n\n#    SOLARIS_GETPWENT_R)\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckSizeOf.cmake" : {
      "ObjectId" : "c8576bbd151c20dba54db45a203fc012f0d74acd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckStructHasMember.cmake" : {
      "ObjectId" : "873729b298a18ce70b4e3ba5062f43de6f1b6f0a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckStructHasMember\r\n\n# --------------------\r\n\n#\r\n\n# Check if the given struct or class has the specified member variable\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  CHECK_STRUCT_HAS_MEMBER(<struct> <member> <header> <variable>\r\n\n#                          [LANGUAGE <language>])\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <struct> - the name of the struct or class you are interested in\r\n\n#   <member> - the member which existence you want to check\r\n\n#   <header> - the header(s) where the prototype should be declared\r\n\n#   <variable> - variable to store the result\r\n\n#   <language> - the compiler to use (C or CXX)\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n\n#\r\n\n#\r\n\n#\r\n\n# Example: CHECK_STRUCT_HAS_MEMBER(\"struct timeval\" tv_sec sys/select.h\r\n\n# HAVE_TIMEVAL_TV_SEC LANGUAGE C)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckSymbolExists.cmake" : {
      "ObjectId" : "8d8b24892027afb8028a40a1e59ce123ee69993f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckSymbolExists\r\n\n# -----------------\r\n\n#\r\n\n# Check if a symbol exists as a function, variable, or macro\r\n\n#\r\n\n# CHECK_SYMBOL_EXISTS(<symbol> <files> <variable>)\r\n\n#\r\n\n# Check that the <symbol> is available after including given header\r\n\n# <files> and store the result in a <variable>.  Specify the list of\r\n\n# files in one argument as a semicolon-separated list.\r\n\n# <variable> will be created as an internal cache variable.\r\n\n#\r\n\n# If the header files define the symbol as a macro it is considered\r\n\n# available and assumed to work.  If the header files declare the symbol\r\n\n# as a function or variable then the symbol must also be available for\r\n\n# linking.  If the symbol is a type or enum value it will not be\r\n\n# recognized (consider using CheckTypeSize or CheckCSourceCompiles).  If\r\n\n# the check needs to be done in C++, consider using\r\n\n# CHECK_CXX_SYMBOL_EXISTS(), which does the same as\r\n\n# CHECK_SYMBOL_EXISTS(), but in C++.\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckTypeSize.cmake" : {
      "ObjectId" : "18e8ea3fc9363ee473d21652b36371c5adec16c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckTypeSize\r\n\n# -------------\r\n\n#\r\n\n# Check sizeof a type\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CHECK_TYPE_SIZE(TYPE VARIABLE [BUILTIN_TYPES_ONLY]\r\n\n#                                 [LANGUAGE <language>])\r\n\n#\r\n\n# Check if the type exists and determine its size.  On return,\r\n\n# \"HAVE_${VARIABLE}\" holds the existence of the type, and \"${VARIABLE}\"\r\n\n# holds one of the following:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    <size> = type has non-zero size <size>\r\n\n#    \"0\"    = type has arch-dependent size (see below)\r\n\n#    \"\"     = type does not exist\r\n\n#\r\n\n# Both ``HAVE_${VARIABLE}`` and ``${VARIABLE}`` will be created as internal\r\n\n# cache variables.\r\n\n#\r\n\n# Furthermore, the variable \"${VARIABLE}_CODE\" holds C preprocessor code\r\n\n# to define the macro \"${VARIABLE}\" to the size of the type, or leave\r\n\n# the macro undefined if the type does not exist.\r\n\n#\r\n\n# The variable \"${VARIABLE}\" may be \"0\" when CMAKE_OSX_ARCHITECTURES has\r\n\n# multiple architectures for building OS X universal binaries.  This\r\n\n# indicates that the type size varies across architectures.  In this\r\n\n# case \"${VARIABLE}_CODE\" contains C preprocessor tests mapping from\r\n\n# each architecture macro to the corresponding type size.  The list of\r\n\n# architecture macros is stored in \"${VARIABLE}_KEYS\", and the value for\r\n\n# each key is stored in \"${VARIABLE}-${KEY}\".\r\n\n#\r\n\n# If the BUILTIN_TYPES_ONLY option is not given, the macro checks for\r\n\n# headers <sys/types.h>, <stdint.h>, and <stddef.h>, and saves results\r\n\n# in HAVE_SYS_TYPES_H, HAVE_STDINT_H, and HAVE_STDDEF_H.  The type size\r\n\n# check automatically includes the available headers, thus supporting\r\n\n# checks of types defined in the headers.\r\n\n#\r\n\n# If LANGUAGE is set, the specified compiler will be used to perform the\r\n\n# check. Acceptable values are C and CXX\r\n\n#\r\n\n# Despite the name of the macro you may use it to check the size of more\r\n\n# complex expressions, too.  To check e.g.  for the size of a struct\r\n\n# member you can do something like this:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   check_type_size(\"((struct something*)0)->member\" SIZEOF_MEMBER)\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_INCLUDES = list of include directories\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n\n#   CMAKE_EXTRA_INCLUDE_FILES = list of extra headers to include\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Helper function.  DO NOT CALL DIRECTLY.\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include header files.\r\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Perform the check.\r\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The check compiled.  Load information from the binary.\r\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Parse the information strings.\r\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Get the type size.\r\n",
        "Line" : 137,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Get the architecture map key.\r\n",
        "Line" : 146,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Update the architecture-to-size map.\r\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# The check failed to compile.\r\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# parse arguments\r\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# change to MATCHES for more keys\r\n",
        "Line" : 195,
        "CharPositionInLine" : 43
      },
      "14" : {
        "Text" : "# Optionally check for standard headers.\r\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Compute or load the size or size map.\r\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Create preprocessor code.\r\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/CheckVariableExists.cmake" : {
      "ObjectId" : "469768c374947b4ffa32ac6c5c34dc740d724e94",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# CheckVariableExists\r\n\n# -------------------\r\n\n#\r\n\n# Check if the variable exists.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CHECK_VARIABLE_EXISTS(VAR VARIABLE)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   VAR      - the name of the variable\r\n\n#   VARIABLE - variable to store the result\r\n\n#              Will be created as an internal cache variable.\r\n\n#\r\n\n#\r\n\n# This macro is only for C variables.\r\n\n#\r\n\n# The following variables may be set before calling this macro to modify\r\n\n# the way the check is run:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_REQUIRED_FLAGS = string of compile command line flags\r\n\n#   CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\r\n\n#   CMAKE_REQUIRED_LIBRARIES = list of libraries to link\r\n\n#   CMAKE_REQUIRED_QUIET = execute quietly without messages\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/ADSP-DetermineCompiler.cmake" : {
      "ObjectId" : "77bca37ba6d63b1f3e595bc653d57f58f4737366",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/ARMCC-ASM.cmake" : {
      "ObjectId" : "3d0775448f0c0e942f9a1772bd200c220e7780da",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/ARMCC-C.cmake" : {
      "ObjectId" : "2c3c760ee825c28289b06436cec2251ceae59e8a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/ARMCC-CXX.cmake" : {
      "ObjectId" : "5a34ea8b24a5591cb2b0394a510926c507c287ae",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/ARMCC-DetermineCompiler.cmake" : {
      "ObjectId" : "242601c93ee53b79d737b689f5ce11f28106b955",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ARMCC Toolchain\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/ARMCC.cmake" : {
      "ObjectId" : "d655e516908b355548a66eeff5e3dc456f4af4b6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See ARM Compiler documentation at:\r\n\n# http://infocenter.arm.com/help/topic/com.arm.doc.set.swdev/index.html\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Absoft-Fortran.cmake" : {
      "ObjectId" : "82cc07c6be155cc469f4c53a12433029fb8ba562",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/AppleClang-ASM.cmake" : {
      "ObjectId" : "d72b911feef82c371a53e681b71110459df60271",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/AppleClang-C-FeatureTests.cmake" : {
      "ObjectId" : "59632fb4c1e6912d87bf112e65190ff327b38299",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/AppleClang-C.cmake" : {
      "ObjectId" : "72670eae92325f60883f6f841c8c676e2f826625",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/AppleClang-CXX-FeatureTests.cmake" : {
      "ObjectId" : "96a53154eaf526ef8241b991dafe3afe1109e7e7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No known reference for AppleClang versions.\r\n\n# Generic reference: http://clang.llvm.org/cxx_status.html\r\n\n# http://clang.llvm.org/docs/LanguageExtensions.html\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: CXX compiler in Xcode 4.3 does not set __apple_build_version__ and so is\r\n\n# not recognized as AppleClang.\r\n\n# Xcode_43 - Apple clang version 3.1 (tags/Apple/clang-318.0.61) (based on LLVM 3.1svn)\r\n\n# Xcode_44 - Apple clang version 4.0 (tags/Apple/clang-421.0.60) (based on LLVM 3.1svn)\r\n\n# Xcode_45 - Apple clang version 4.1 (tags/Apple/clang-421.11.66) (based on LLVM 3.1svn)\r\n\n# Xcode_46 - Apple LLVM version 4.2 (clang-425.0.28) (based on LLVM 3.2svn)\r\n\n# Xcode_50 - Apple LLVM version 5.0 (clang-500.2.79) (based on LLVM 3.3svn)\r\n\n# Xcode_51 - Apple LLVM version 5.1 (clang-503.0.38) (based on LLVM 3.4svn)\r\n\n# Xcode_60 - Apple LLVM version 6.0 (clang-600.0.51) (based on LLVM 3.5svn)\r\n\n# Xcode_61 - Apple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# There is some non-correspondance. __has_feature(cxx_user_literals) is\r\n\n# false for AppleClang 4.0 and 4.1, although it is reported as\r\n\n# supported in the reference link for Clang 3.1.  The compiler does not pass\r\n\n# the CompileFeatures/cxx_user_literals.cpp test.\r\n\n# cxx_attributes is listed as not supported until Clang 3.3. It works without\r\n\n# warning with AppleClang 5.0, but issues a gcc-compat warning for\r\n\n# AppleClang 4.0-4.2.\r\n\n# cxx_alignof and cxx_alignas tests work for early AppleClang versions, though\r\n\n# they are listed as supported for Clang 3.3 and later.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://llvm.org/bugs/show_bug.cgi?id=19242\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# http://llvm.org/bugs/show_bug.cgi?id=19698\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# http://llvm.org/bugs/show_bug.cgi?id=19674\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/AppleClang-CXX.cmake" : {
      "ObjectId" : "c8cbd49711cb985524d2f30d028221ae0b04fb86",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AppleClang 5.0 knows this flag, but does not set a __cplusplus macro greater than 201103L\r\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/AppleClang-DetermineCompiler.cmake" : {
      "ObjectId" : "1fc42bd873e7b0fbd4d0ebbf8b7ebccf040f6dea",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Borland-DetermineCompiler.cmake" : {
      "ObjectId" : "2661c257c39b4b1b72443516e87edaf2b70b2d0c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Bruce-C-DetermineCompiler.cmake" : {
      "ObjectId" : "7013442560abbb76f76b3acf6eb59e1d3635df8c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Bruce-C.cmake" : {
      "ObjectId" : "bd887ee8cf5b3cf3b8fac441a9ebca74c612db6e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bruce C Compiler ignores \"-g\" flag and optimization cannot be\r\n\n# enabled here (it is implemented only for 8086 target).\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CCur-Fortran.cmake" : {
      "ObjectId" : "8a6ff15577e762d20d4714e2e16e8caf65f6f4be",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-ASM.cmake" : {
      "ObjectId" : "c954f735f6411061178c8263f747e42bd804c542",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-C-FeatureTests.cmake" : {
      "ObjectId" : "935957cce917c3fcb1b5c07e4319fe0f97ef009f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-C.cmake" : {
      "ObjectId" : "b73a72796cd6defffd2737b7421a18431c50da25",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-CXX-FeatureTests.cmake" : {
      "ObjectId" : "031dbb85a42ba602b8fc13e3d91c8b03bf409625",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Reference: http://clang.llvm.org/cxx_status.html\r\n\n# http://clang.llvm.org/docs/LanguageExtensions.html\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# http://llvm.org/bugs/show_bug.cgi?id=19242\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# http://llvm.org/bugs/show_bug.cgi?id=19698\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://llvm.org/bugs/show_bug.cgi?id=19674\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Should be supported by Clang 2.9\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO: Should be supported forever?\r\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-CXX-TestableFeatures.cmake" : {
      "ObjectId" : "f2c6fe82765667de3f434c341a77cd1adba418a8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-CXX.cmake" : {
      "ObjectId" : "9b599dc96b8c14d688fab46bef3f61c80d15e575",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-DetermineCompiler.cmake" : {
      "ObjectId" : "7af455f59ef44d11e9f52ccdf5c5801e16beb3ca",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang-DetermineCompilerInternal.cmake" : {
      "ObjectId" : "685d0ecc121ec0725eb3baa58af64acb8273b4dc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Clang.cmake" : {
      "ObjectId" : "25a0d4ea942c604d93ebd5e28a45666a4ffbcdad",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Comeau-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "58a6671569bba49705bd0d4225074778240c34fa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Compaq-C-DetermineCompiler.cmake" : {
      "ObjectId" : "2d8d1913d1e6d471ed90b6ccb93ea3b419d1bf87",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Compaq-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "4f46833ebcec168c34c39d13973722b925511389",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Cray-C.cmake" : {
      "ObjectId" : "83f0e315ff75a4e592b37beebf7be3d48c73bbb4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Cray-CXX.cmake" : {
      "ObjectId" : "0c87172290c7a9422b5261b306f4516f9e02c000",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Cray-DetermineCompiler.cmake" : {
      "ObjectId" : "06abbdee4df9833c39533c0b551991d2b4a371bd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Cray-Fortran.cmake" : {
      "ObjectId" : "a116d0fcb637c16871f825b1e9a0193cea023935",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-C.cmake" : {
      "ObjectId" : "3d889688a29a73c179ae60fa5d30c229d0bfb1e0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-CXX.cmake" : {
      "ObjectId" : "bb4733ace3d4cb58825578d14f1ac0a18838ca78",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-Cray-C.cmake" : {
      "ObjectId" : "78b43f0d039f128d90a397552a337e7b77bd4194",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-Cray-CXX.cmake" : {
      "ObjectId" : "335be4b35344a0493de1dbf2dc0eb1e0937f8f3e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-Cray-Fortran.cmake" : {
      "ObjectId" : "3b6dd340accda32f75cdc387b69b84edb2456d94",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-Fortran.cmake" : {
      "ObjectId" : "a79202ed53ab0ca6a7484d687d19f0578a03442b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-GNU-C.cmake" : {
      "ObjectId" : "dd6221f8998dd2f5858a6a7618d27d47856772dd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-GNU-CXX.cmake" : {
      "ObjectId" : "f8177e35dd01ec715dd3b8537483b57d085c4e79",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-GNU-Fortran.cmake" : {
      "ObjectId" : "7c5939239267e31be3ae043fdcede2ef01d848ea",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-Intel-C.cmake" : {
      "ObjectId" : "5fb0a2757efe5cc1401ed1fdf9467d0cc2619725",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-Intel-CXX.cmake" : {
      "ObjectId" : "1eeb771c9063c65874a7d86fe4bf5a69423ac10c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-Intel-Fortran.cmake" : {
      "ObjectId" : "d04716d57a061a54a144697efc30d3c5f4577768",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-PGI-C.cmake" : {
      "ObjectId" : "7d1c9f666cb8c306e4245981b808acd4204cedba",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-PGI-CXX.cmake" : {
      "ObjectId" : "31e3e27ef4a1871c135236f31e57192788bb1d73",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv-PGI-Fortran.cmake" : {
      "ObjectId" : "16db4b08b4ee0d94bf841c711a72f055945dba30",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/CrayPrgEnv.cmake" : {
      "ObjectId" : "e83a0a687ed3b320642b8953b08e43b231e9cd2f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Guard against multiple inclusions\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Flags for the Cray wrappers\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If the link type is not explicitly specified in the environment then\r\n\n# the Cray wrappers assume that the code will be built staticly so\r\n\n# we check the following condition(s) are NOT met\r\n\n#  Compiler flags are explicitly dynamic\r\n\n#  Env var is dynamic and compiler flags are not explicitly static\r\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Embarcadero-DetermineCompiler.cmake" : {
      "ObjectId" : "d14ed1449c4663459fae8caf3154f76f578de4b1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Fujitsu-DetermineCompiler.cmake" : {
      "ObjectId" : "811161b054675fb61afadbaa5e8a587c9cdddcaa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/G95-Fortran.cmake" : {
      "ObjectId" : "bcf7781c5206954897644ecb497ef66b30d84628",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GHS-C.cmake" : {
      "ObjectId" : "aac4980a5221e69e26caf1b114a0159728243c28",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GHS-CXX.cmake" : {
      "ObjectId" : "a1caa8e01452f7266041d5668ed04204c863bf98",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GHS-DetermineCompiler.cmake" : {
      "ObjectId" : "1a3001c7f700dcf387abd1d092b3228e22a014ce",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GHS.cmake" : {
      "ObjectId" : "301fd8a365ad02f039430c0eb8002344cc1fd699",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-ASM.cmake" : {
      "ObjectId" : "ac2088172deb0cf62e4e133589daeb3f9ef9b063",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is loaded when gcc/g++ is used for assembler files (the \"ASM\" cmake language)\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-C-DetermineCompiler.cmake" : {
      "ObjectId" : "9f456331d4defd902dd0b410c78dcfe730de14af",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-C-FeatureTests.cmake" : {
      "ObjectId" : "10e6f6d941acf0314e6d4a63198c444253021752",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GNU 4.7 correctly sets __STDC_VERSION__ to 201112L, but GNU 4.6 sets it\r\n\n# to 201000L.  As the former is strictly greater than the latter, test only\r\n\n# for the latter.  If in the future CMake learns about a C feature which was\r\n\n# introduced with GNU 4.7, that should test for the correct version, similar\r\n\n# to the distinction between __cplusplus and __GXX_EXPERIMENTAL_CXX0X__ tests.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Since 3.4 at least:\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-C.cmake" : {
      "ObjectId" : "40d2b3f79409a3dd508648bbbb4c67062e66b4bb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "872491df6e4aed0cb505af116cea3a5d3cd852cc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-CXX-FeatureTests.cmake" : {
      "ObjectId" : "60a9c31642e53135723e22e4c618cb9237619261",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Reference: http://gcc.gnu.org/projects/cxx0x.html\r\n\n# http://gcc.gnu.org/projects/cxx1y.html\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# GNU 4.9 in c++14 mode sets __cplusplus to 201300L, so don't test for the\r\n\n# correct value of it below.\r\n\n# https://patchwork.ozlabs.org/patch/382470/\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GNU 4.3 supports binary literals as an extension, but may warn about\r\n\n# use of extensions prior to GNU 4.9\r\n\n# http://stackoverflow.com/questions/16334024/difference-between-gcc-binary-literals-and-c14-ones\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The feature below is documented as available in GNU 4.8 (by implementing an\r\n\n# earlier draft of the standard paper), but that version of the compiler\r\n\n# does not set __cplusplus to a value greater than 201103L until GNU 4.9:\r\n\n# http://gcc.gnu.org/onlinedocs/gcc-4.8.2/cpp/Standard-Predefined-Macros.html#Standard-Predefined-Macros\r\n\n# http://gcc.gnu.org/onlinedocs/gcc-4.9.0/cpp/Standard-Predefined-Macros.html#Standard-Predefined-Macros\r\n\n# So, CMake only reports availability for it with GNU 4.9 or later.\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Introduced in GCC 4.8.1\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The alignof feature works with GNU 4.7 and -std=c++11, but it is documented\r\n\n# as available with GNU 4.8, so treat that as true.\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# NOTE: C++11 was ratified in September 2011. GNU 4.7 is the first minor\r\n\n# release following that (March 2012), and the first minor release to\r\n\n# support -std=c++11. Prior to that, support for C++11 features is technically\r\n\n# experiemental and possibly incomplete (see for example the note below about\r\n\n# cxx_variadic_template_template_parameters)\r\n\n# GNU does not define __cplusplus correctly before version 4.7.\r\n\n# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=1773\r\n\n# __GXX_EXPERIMENTAL_CXX0X__ is defined in prior versions, but may not be\r\n\n# defined in the future.\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: If features are ever recorded for GNU 4.3, there should possibly\r\n\n# be a new feature added like cxx_variadic_template_template_parameters,\r\n\n# which is implemented by GNU 4.4, but not 4.3. cxx_variadic_templates is\r\n\n# actually implemented by GNU 4.3, but variadic template template parameters\r\n\n# 'completes' it, so that is the version we record as having the variadic\r\n\n# templates capability in CMake. See\r\n\n# http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf\r\n\n# TODO: Should be supported by GNU 4.3\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO: Should be supported since GNU 3.4?\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TODO: Should be supported forever?\r\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-CXX.cmake" : {
      "ObjectId" : "a6334491532ffe201969a60d14eb11bf24ad62f2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Supported since 4.3\r\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# 4.3 supports 0x variants\r\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU-Fortran.cmake" : {
      "ObjectId" : "721c51f28121748a51c2bb3e6ef0c8e9e7098422",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No -DNDEBUG for Fortran.\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# No -isystem for Fortran because it will not find .mod files.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fortran-specific feature flags.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/GNU.cmake" : {
      "ObjectId" : "6437ad9b0b26f9e39072ab68b548f8e31e168a62",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Feature flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Older versions of gcc (< 4.5) contain a bug causing them to report a missing\r\n\n# header file as a warning if depfiles are enabled, causing check_header_file\r\n\n# tests to always succeed.  Work around this by disabling dependency tracking\r\n\n# in try_compile mode.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# distcc does not transform -o to -MT when invoking the preprocessor\r\n\n# internally, as it ought to.  Work around this bug by setting -MT here\r\n\n# even though it isn't strictly necessary.\r\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Initial configuration flags.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# work around #4462\r\n",
        "Line" : 45,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/HP-ASM.cmake" : {
      "ObjectId" : "b85e7daded3a87f95c7f960d4d8ab8edde73f1e9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/HP-C-DetermineCompiler.cmake" : {
      "ObjectId" : "63f0e099d7f2a27a9686978edc938c20a34ba55d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/HP-C.cmake" : {
      "ObjectId" : "2630e16613f3a180698bdd6dc791976181961b0e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/HP-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "51762ae9c47c499ec5d1ce3a1b2404670f2d13ac",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/HP-CXX.cmake" : {
      "ObjectId" : "722c8677bb2f95edc8cb4753e499c0709f5a074d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HP aCC since version 3.80 supports the flag +hpxstd98 to get ANSI C++98\r\n\n# template support. It is known that version 6.25 doesn't need that flag.\r\n\n# Current assumption: the flag is needed for every version from 3.80 to 4\r\n\n# to get it working.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/HP-Fortran.cmake" : {
      "ObjectId" : "9f8a225b2cb5af67c987369bcc09f5bf71e626ea",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/IAR-ASM.cmake" : {
      "ObjectId" : "7556c9351b4eb9bde3f1b1dd0b96902b3566a9e1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is processed when the IAR compiler is used for an assembler file\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/IAR-C.cmake" : {
      "ObjectId" : "96f3aa854098b0ec17da202e870430f5e3732879",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is processed when the IAR compiler is used for a C file\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The toolchains for ARM and AVR are quite different:\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add the target specific include directory:\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/IAR-CXX.cmake" : {
      "ObjectId" : "4e218bd75410c1f794fe0bdc0ee5af0aaa4d1ff2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is processed when the IAR compiler is used for a C++ file\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add the target specific include directory:\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/IAR-DetermineCompiler.cmake" : {
      "ObjectId" : "7aceed50b0230dcd4df9fd1ba72f32a61bf85bb1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# IAR Systems compiler for embedded systems.\r\n\n#   http://www.iar.com\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/IAR.cmake" : {
      "ObjectId" : "3d6f927ee7f26978a62d556c210fab2b63a95795",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is processed when the IAR compiler is used for a C or C++ file\r\n\n# Documentation can be downloaded here: http://www.iar.com/website1/1.0.1.0/675/1/\r\n\n# The initial feature request is here: https://gitlab.kitware.com/cmake/cmake/issues/10176\r\n\n# It also contains additional links and information.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For arm, IAR uses the \"ilinkarm\" linker and \"iarchive\" archiver:\r\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# For AVR and AVR32, IAR uses the \"xlink\" linker and the \"xar\" archiver:\r\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake" : {
      "ObjectId" : "e60e1adcd37534464de1ce89ea83109f2dd37790",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/IBMCPP-CXX-DetermineVersionInternal.cmake" : {
      "ObjectId" : "dd16de721d06f3092d3add8849a42dc56434eaea",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel-ASM.cmake" : {
      "ObjectId" : "de3c18e51c31043ea5bdf70b5c3247aa2d7443db",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel-C-FeatureTests.cmake" : {
      "ObjectId" : "19580b1f5edff4941fc7d105028ab488222920e3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# References:\r\n\n#   - https://software.intel.com/en-us/articles/iso-iec-standards-language-conformance-for-intel-c-compiler\r\n\n#   - https://software.intel.com/en-us/articles/c99-support-in-intel-c-compiler\r\n\n#   - https://software.intel.com/en-us/articles/c11-support-in-intel-c-compiler\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#static assert is only around in version 1500 update 2 and above\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel-C.cmake" : {
      "ObjectId" : "6f40b5a77fdb95aac274e3d6debb3e1b8b1bf594",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel-CXX-FeatureTests.cmake" : {
      "ObjectId" : "8fcf57d0dcfffa16519e6d08177db0c2c49e9847",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# References:\r\n\n#   - https://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler\r\n\n#   - https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler\r\n\n#   - http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0096r3.html\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Notes:\r\n\n# [1] Some Intel versions define some feature macros under -std=gnu++98\r\n\n#     that do not work in that mode (or work with warnings):\r\n\n#     - __cpp_attributes 200809\r\n\n#     - __cpp_init_captures 201304\r\n\n#     - __cpp_lambdas 200907\r\n\n#     - __cpp_rvalue_references 200610\r\n\n#     - __cpp_variadic_templates 200704\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ICC version 15 update 1 has a bug where __cplusplus is defined as 1 no matter\r\n\n#if you are compiling as 98/11/14. So to properly detect C++14 with this version\r\n\n#we look for the existence of __GXX_EXPERIMENTAL_CXX0X__ but not __INTEL_CXX11_MODE__\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This test is supposed to work in Intel 14 but the compiler has a bug\r\n\n# in versions 14 and 15::\r\n\n# https://software.intel.com/en-us/forums/intel-c-compiler/topic/600514\r\n\n# It also appears to fail with an internal compiler error on Intel 16 and 17.\r\n\n#set(_cmake_feature_test_cxx_generalized_initializers \"${Intel16_CXX14}\")\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# [1]\r\n",
        "Line" : 44,
        "CharPositionInLine" : 117
      },
      "5" : {
        "Text" : "# Documented as 12.0+ but in testing it only works on 14.0.2+\r\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Cannot find Intel documentation for N2640: cxx_uniform_initialization\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# [1]\r\n",
        "Line" : 89,
        "CharPositionInLine" : 121
      },
      "8" : {
        "Text" : "# [1]\r\n",
        "Line" : 93,
        "CharPositionInLine" : 105
      },
      "9" : {
        "Text" : "# [1]\r\n",
        "Line" : 96,
        "CharPositionInLine" : 119
      },
      "10" : {
        "Text" : "# [1]\r\n",
        "Line" : 101,
        "CharPositionInLine" : 99
      },
      "CommentCount" : 11
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel-CXX.cmake" : {
      "ObjectId" : "7bb4b9fed56ca7a0bcc11561b83d222a77aecdb8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# todo: there is no gnu++14 value supported; figure out what to do\r\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# todo: there is no gnu++14 value supported; figure out what to do\r\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# todo: there is no gnu++14 value supported; figure out what to do\r\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel-DetermineCompiler.cmake" : {
      "ObjectId" : "2b81618e92a1a8496ce3d168ffd53793f7250af3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel-Fortran.cmake" : {
      "ObjectId" : "5d2b86d22fd863f3052522fdd2a5c379e0ebeba1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Intel.cmake" : {
      "ObjectId" : "035833233565500282e5cbf4c68fcdbfda6182e8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MSVC-like\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# GNU-like\r\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/MIPSpro-C.cmake" : {
      "ObjectId" : "83f0e315ff75a4e592b37beebf7be3d48c73bbb4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/MIPSpro-CXX.cmake" : {
      "ObjectId" : "0c87172290c7a9422b5261b306f4516f9e02c000",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/MIPSpro-DetermineCompiler.cmake" : {
      "ObjectId" : "351f21a4d2b312781503eba72437e0c031305521",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/MIPSpro-Fortran.cmake" : {
      "ObjectId" : "85d080251e0f1079d7786a585947a8b4e0b9ca79",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/MSVC-CXX-FeatureTests.cmake" : {
      "ObjectId" : "45cd3a1621d41651bcc7db8a1901419e303679c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Reference: http://msdn.microsoft.com/en-us/library/vstudio/hh567368.aspx\r\n\n# http://blogs.msdn.com/b/vcblog/archive/2013/06/28/c-11-14-stl-features-fixes-and-breaking-changes-in-vs-2013.aspx\r\n\n# http://blogs.msdn.com/b/vcblog/archive/2014/11/17/c-11-14-17-features-in-vs-2015-preview.aspx\r\n\n# http://www.visualstudio.com/en-us/news/vs2015-preview-vs.aspx\r\n\n# http://blogs.msdn.com/b/vcblog/archive/2015/04/29/c-11-14-17-features-in-vs-2015-rc.aspx\r\n\n# http://blogs.msdn.com/b/vcblog/archive/2015/06/19/c-11-14-17-features-in-vs-2015-rtm.aspx\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# VS version 15 (not 2015) introduces support for aggregate initializers.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# VS 2015 Update 2 introduces support for variable templates.\r\n\n# https://www.visualstudio.com/en-us/news/vs2015-update2-vs.aspx\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Microsoft calls this 'rvalue references v3'\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# \"The copies and moves don't interact precisely like the Standard says they\r\n\n# should. For example, deletion of moves is specified to also suppress\r\n\n# copies, but Visual C++ in Visual Studio 2013 does not.\"\r\n\n# http://blogs.msdn.com/b/vcblog/archive/2014/11/17/c-11-14-17-features-in-vs-2015-preview.aspx\r\n\n# lists this as 'partial' in 2013\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# http://blogs.msdn.com/b/vcblog/archive/2014/11/17/c-11-14-17-features-in-vs-2015-preview.aspx\r\n\n# Note 1. While previous version of VisualStudio said they supported these\r\n\n# they silently produced bad code, and are now marked as having partial\r\n\n# support in previous versions. The footnote says the support will be complete\r\n\n# in MSVC 2015, so support the feature for that version, assuming that is true.\r\n\n# The blog post also says that VS 2013 Update 3 generates an error in cases\r\n\n# that previously produced bad code.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Microsoft now states they support contextual conversions in 2013 and above.\r\n\n# See footnote 6 at:\r\n\n# http://blogs.msdn.com/b/vcblog/archive/2014/11/17/c-11-14-17-features-in-vs-2015-preview.aspx\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Support is documented, but possibly partly broken:\r\n\n# https://msdn.microsoft.com/en-us/library/hh567368.aspx\r\n\n# http://thread.gmane.org/gmane.comp.lib.boost.devel/244986/focus=245333\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Currently unsupported:\r\n\n# set(_cmake_feature_test_cxx_relaxed_constexpr )\r\n\n# 'NSDMIs for aggregates'\r\n\n# set(_cmake_feature_test_cxx_aggregate_default_initializers )\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In theory decltype incomplete return types was added in 2012\r\n\n# but without support for decltype_auto and return type deduction this\r\n\n# feature is unusable.  This remains so as of VS 2015 Preview.\r\n\n# set(_cmake_feature_test_cxx_decltype_incomplete_return_types )\r\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Unset all the variables that we don't need exposed.\r\n\n# _cmake_oldestSupported is required by WriteCompilerDetectionHeader\r\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/MSVC-CXX.cmake" : {
      "ObjectId" : "302688b7de27f947ae378a2e4131bbb17ce8e3c3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MSVC has no specific language level or flags to change it.\r\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/MSVC-DetermineCompiler.cmake" : {
      "ObjectId" : "e10ea4da4d46413696574a569602d0a2ecea358a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/NAG-Fortran.cmake" : {
      "ObjectId" : "d1bbd26be15ddbf1cfe776f936214e036bf768f2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Help CMAKE_PARSE_IMPLICIT_LINK_INFO detect NAG Fortran object files.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Run with -dryrun to see sample \"link\" line.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Match an object file.\r\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Parse object directory and convert to a regex.\r\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/NVIDIA-CUDA.cmake" : {
      "ObjectId" : "f1834c98668baac18d5dd53203437f8df5e798ca",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE_SHARED_LIBRARY_CUDA_FLAGS is sent to the host linker so we\r\n\n# don't need to forward it through nvcc.\r\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/NVIDIA-DetermineCompiler.cmake" : {
      "ObjectId" : "ac324fe9084010932d27530c82ec1a647b9751fa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake" : {
      "ObjectId" : "3c2dc996f43e6ffc9e004dec787738000e68897f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PGI-C.cmake" : {
      "ObjectId" : "4b0a2c6810fe3f94f36e2e4319f61f5605b8c465",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PGI-CXX.cmake" : {
      "ObjectId" : "2bb0f72741b521fd06962d042317ffdebfd2ed98",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PGI-DetermineCompiler.cmake" : {
      "ObjectId" : "3b4eabc585298f500824bdec0b8e03dcb959cdaf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PGI-Fortran.cmake" : {
      "ObjectId" : "4b4f8727cb64e8268f65e8b2c707b9575c7c4127",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PGI.cmake" : {
      "ObjectId" : "652063133e861ee8dbeb6fbb053d1cfb0d949455",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Feature flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Initial configuration flags.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Preprocessing and assembly rules.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PathScale-C.cmake" : {
      "ObjectId" : "430c311c465c9aecfb2c27a0af9a0c78a2ebf4ae",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PathScale-CXX.cmake" : {
      "ObjectId" : "438225a4250fe34e0e62a31acc5a53b38686c9bd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PathScale-DetermineCompiler.cmake" : {
      "ObjectId" : "aacc405896fdd5e419e304013501e7efd57192a3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PathScale-Fortran.cmake" : {
      "ObjectId" : "629b2371e6d28bfc9926e41ec05cbe90f7646c65",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/PathScale.cmake" : {
      "ObjectId" : "7f517271e4700393ae4646d88658d1adbec292ef",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Feature flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Initial configuration flags.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/QCC-C.cmake" : {
      "ObjectId" : "a72b77e463787384383d9dcd21ecd69f134c8fba",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/QCC-CXX.cmake" : {
      "ObjectId" : "12b431e32b6c1e140c8d7c1d3c6bbaa616ee7f3f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If the toolchain uses qcc for CMAKE_CXX_COMPILER instead of QCC, the\r\n\n# default for the driver is not c++.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/QCC.cmake" : {
      "ObjectId" : "2e21c206c2039117889043aedafb85e8df0b21f2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# http://www.qnx.com/developers/docs/6.4.0/neutrino/utilities/q/qcc.html#examples\r\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SCO-C.cmake" : {
      "ObjectId" : "0c7edc5eac06d8b82608a4cbed5911f8ebc4918e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SCO-CXX.cmake" : {
      "ObjectId" : "c75524987271ccd9e99fd923cd507eedbf3999ee",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SCO-DetermineCompiler.cmake" : {
      "ObjectId" : "1efccf68ce4c5fce787147eea1fa1e3f40ccbb1b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SCO.cmake" : {
      "ObjectId" : "495ad5281ee01a38b51fb2173cad8f523d320dbf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Feature flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SDCC-C-DetermineCompiler.cmake" : {
      "ObjectId" : "629ec3f354ec488d52f4a55b8651cf653be542a2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sdcc, the small devices C compiler for embedded systems,\r\n\n#   http://sdcc.sourceforge.net  */\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SunPro-ASM.cmake" : {
      "ObjectId" : "10c2b3b3ba405956f29d1b30349840c0285b9dc2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Initialize ASM link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SunPro-C-DetermineCompiler.cmake" : {
      "ObjectId" : "02cefcb3e9be08406377b84695e1500c10879d08",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SunPro-C.cmake" : {
      "ObjectId" : "98f5c32825c3f7fd6f8d3e52e62856b7d454e0c1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SunPro-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "aaccfbfa4a4ef065ec5375dbe53e6e796adec56c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SunPro-CXX-FeatureTests.cmake" : {
      "ObjectId" : "8ac33cd4eeda1c74e2c61b8039e3f1971ff09b85",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Based on GNU 4.8.2\r\n\n# http://docs.oracle.com/cd/E37069_01/html/E37071/gncix.html\r\n\n# Reference: http://gcc.gnu.org/projects/cxx0x.html\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SunPro-CXX.cmake" : {
      "ObjectId" : "8d94a3289be6e7f3123345f49905dba02b9d22c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create archives with \"CC -xar\" in case user adds \"-instances=extern\"\r\n\n# so that template instantiations are available to archive members.\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compiler id was forced so just guess the default standard level.\r\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/SunPro-Fortran.cmake" : {
      "ObjectId" : "c0e281c0409521cf9da7a2bb5040563e7638eeea",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/TI-ASM.cmake" : {
      "ObjectId" : "252ca4315f0027dbc413e0d7ab17b7b161433ef6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/TI-C.cmake" : {
      "ObjectId" : "7beb51f76d9e9239231e22470abfb31b0b13fc04",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/TI-CXX.cmake" : {
      "ObjectId" : "209ab4782f0456d8528bb3458865878da213c140",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/TI-DetermineCompiler.cmake" : {
      "ObjectId" : "51442fbd1e25ff0fa7a92d2ddf07a6e427f252f8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake" : {
      "ObjectId" : "ea58ae3a77c4990554cae704be16ad7ddab242f4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/TinyCC-C.cmake" : {
      "ObjectId" : "6e529adf6221d63c78f810fbe768da4b9d556c5a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# no optimization in tcc:\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake" : {
      "ObjectId" : "9e03810ec6a6b0d08c6512269b15f00744805a15",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/VisualAge-C.cmake" : {
      "ObjectId" : "33d1b286a5fc3ea140e098cde2ec282435fcb3b9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/VisualAge-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "92f9e9ec4daba87f66779d116e1043cf60e4ce30",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/VisualAge-CXX.cmake" : {
      "ObjectId" : "dfa3146eeea4b48c6a07d58635a3feb4f2471ddc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/VisualAge-Fortran.cmake" : {
      "ObjectId" : "2fa78c8d71c55485cb3f7de531adbd13fa093f3e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/Watcom-DetermineCompiler.cmake" : {
      "ObjectId" : "11e1feff692922b5046ac87d4d8362f394ac29a8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/XL-ASM.cmake" : {
      "ObjectId" : "990fc0b0721dac08dbb816efdf585e9ae8415ce8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -qthreaded     = Ensures that all optimizations will be thread-safe\r\n\n# -qhalt=e       = Halt on error messages (rather than just severe errors)\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/XL-C-DetermineCompiler.cmake" : {
      "ObjectId" : "a1cdf56dbd784d1c931b91f0e705645a82860ae5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/XL-C.cmake" : {
      "ObjectId" : "6a40779b79578b780f18523ed19291c68e222773",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -qthreaded     = Ensures that all optimizations will be thread-safe\r\n\n# -qhalt=e       = Halt on error messages (rather than just severe errors)\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/XL-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "0907bc01ffb5286bba25af830ae18449e087092e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/XL-CXX.cmake" : {
      "ObjectId" : "782927ced3f671e8c2218a9aa0cc4a8f308d9503",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -qthreaded     = Ensures that all optimizations will be thread-safe\r\n\n# -qhalt=e       = Halt on error messages (rather than just severe errors)\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/XL-Fortran.cmake" : {
      "ObjectId" : "9fe856ad861f150cc26f664553c1be21edfe4a1b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# [=<right_margin>]\r\n",
        "Line" : 4,
        "CharPositionInLine" : 47
      },
      "1" : {
        "Text" : "# [=f90|ibm]\r\n",
        "Line" : 5,
        "CharPositionInLine" : 45
      },
      "2" : {
        "Text" : "# -qthreaded     = Ensures that all optimizations will be thread-safe\r\n\n# -qhalt=e       = Halt on error messages (rather than just severe errors)\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# xlf: 1501-214 (W) command option E reserved for future use - ignored\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/XL.cmake" : {
      "ObjectId" : "2825294c795a7a802815d16fde1862f063573a56",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the CreateExportList program that comes with this toolchain.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Feature flags.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# CMAKE_XL_CreateExportList is part of the AIX XL compilers but not the linux ones.\r\n\n# If we found the tool, we'll use it to create exports, otherwise stick with the regular\r\n\n# create shared library compile line.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# The compiler front-end passes all object files, archive files, and shared\r\n\n# library files named on the command line to CreateExportList to create a\r\n\n# list of all symbols to be exported from the shared library.  This causes\r\n\n# all archive members to be copied into the shared library whether they are\r\n\n# needed or not.  Instead we run the tool ourselves to pass only the object\r\n\n# files so that we export only the symbols actually provided by the sources.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/zOS-C-DetermineCompiler.cmake" : {
      "ObjectId" : "7c4b3aa481060b78fdacc0f5c5ad630f289f032b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Compiler/zOS-CXX-DetermineCompiler.cmake" : {
      "ObjectId" : "f686be74878fd4d30e4937a1b459e34326b67a12",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Dart.cmake" : {
      "ObjectId" : "f6558e15d1f5295039d1744c9dadeb9320395a2c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# Dart\r\n\n# ----\r\n\n#\r\n\n# Configure a project for testing with CTest or old Dart Tcl Client\r\n\n#\r\n\n# This file is the backwards-compatibility version of the CTest module.\r\n\n# It supports using the old Dart 1 Tcl client for driving dashboard\r\n\n# submissions as well as testing with CTest.  This module should be\r\n\n# included in the CMakeLists.txt file at the top of a project.  Typical\r\n\n# usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   include(Dart)\r\n\n#   if(BUILD_TESTING)\r\n\n#     # ... testing related CMake code ...\r\n\n#   endif()\r\n\n#\r\n\n# The BUILD_TESTING option is created by the Dart module to determine\r\n\n# whether testing support should be enabled.  The default is ON.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This file configures a project to use the Dart testing/dashboard process.\r\n\n# It is broken into 3 sections.\r\n\n#\r\n\n#  Section #1: Locate programs on the client and determine site and build name\r\n\n#  Section #2: Configure or copy Tcl scripts from the source tree to build tree\r\n\n#  Section #3: Custom targets for performing dashboard builds.\r\n\n#\r\n\n#\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# Section #1:\r\n\n#\r\n\n# CMake commands that will not vary from project to project. Locates programs\r\n\n# on the client and configure site name and build name.\r\n\n#\r\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\r\n\n# Section #2:\r\n\n#\r\n\n# Make necessary directories and configure testing scripts\r\n\n#\r\n\n# find a tcl shell command\r\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# make directories in the binary tree\r\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# configure files\r\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#\r\n\n# Section 3:\r\n\n#\r\n\n# Custom targets to perform dashboard builds and submissions.\r\n\n# These should NOT need to be modified from project to project.\r\n\n#\r\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# add testing targets\r\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#\r\n\n# End of Dart.cmake\r\n\n#\r\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/DeployQt4.cmake" : {
      "ObjectId" : "d1bca2f8539fece6ed1c867d1a0f72bcce8fbb39",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# DeployQt4\r\n\n# ---------\r\n\n#\r\n\n# Functions to help assemble a standalone Qt4 executable.\r\n\n#\r\n\n# A collection of CMake utility functions useful for deploying Qt4\r\n\n# executables.\r\n\n#\r\n\n# The following functions are provided by this module:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    write_qt4_conf\r\n\n#    resolve_qt4_paths\r\n\n#    fixup_qt4_executable\r\n\n#    install_qt4_plugin_path\r\n\n#    install_qt4_plugin\r\n\n#    install_qt4_executable\r\n\n#\r\n\n# Requires CMake 2.6 or greater because it uses function and\r\n\n# PARENT_SCOPE.  Also depends on BundleUtilities.cmake.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   WRITE_QT4_CONF(<qt_conf_dir> <qt_conf_contents>)\r\n\n#\r\n\n# Writes a qt.conf file with the <qt_conf_contents> into <qt_conf_dir>.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   RESOLVE_QT4_PATHS(<paths_var> [<executable_path>])\r\n\n#\r\n\n# Loop through <paths_var> list and if any don't exist resolve them\r\n\n# relative to the <executable_path> (if supplied) or the\r\n\n# CMAKE_INSTALL_PREFIX.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FIXUP_QT4_EXECUTABLE(<executable>\r\n\n#     [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf>])\r\n\n#\r\n\n# Copies Qt plugins, writes a Qt configuration file (if needed) and\r\n\n# fixes up a Qt4 executable using BundleUtilities so it is standalone\r\n\n# and can be drag-and-drop copied to another machine as long as all of\r\n\n# the system libraries are compatible.\r\n\n#\r\n\n# <executable> should point to the executable to be fixed-up.\r\n\n#\r\n\n# <qtplugins> should contain a list of the names or paths of any Qt\r\n\n# plugins to be installed.\r\n\n#\r\n\n# <libs> will be passed to BundleUtilities and should be a list of any\r\n\n# already installed plugins, libraries or executables to also be\r\n\n# fixed-up.\r\n\n#\r\n\n# <dirs> will be passed to BundleUtilities and should contain and\r\n\n# directories to be searched to find library dependencies.\r\n\n#\r\n\n# <plugins_dir> allows an custom plugins directory to be used.\r\n\n#\r\n\n# <request_qt_conf> will force a qt.conf file to be written even if not\r\n\n# needed.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   INSTALL_QT4_PLUGIN_PATH(plugin executable copy installed_plugin_path_var\r\n\n#                           <plugins_dir> <component> <configurations>)\r\n\n#\r\n\n# Install (or copy) a resolved <plugin> to the default plugins directory\r\n\n# (or <plugins_dir>) relative to <executable> and store the result in\r\n\n# <installed_plugin_path_var>.\r\n\n#\r\n\n# If <copy> is set to TRUE then the plugins will be copied rather than\r\n\n# installed.  This is to allow this module to be used at CMake time\r\n\n# rather than install time.\r\n\n#\r\n\n# If <component> is set then anything installed will use this COMPONENT.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   INSTALL_QT4_PLUGIN(plugin executable copy installed_plugin_path_var\r\n\n#                      <plugins_dir> <component>)\r\n\n#\r\n\n# Install (or copy) an unresolved <plugin> to the default plugins\r\n\n# directory (or <plugins_dir>) relative to <executable> and store the\r\n\n# result in <installed_plugin_path_var>.  See documentation of\r\n\n# INSTALL_QT4_PLUGIN_PATH.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   INSTALL_QT4_EXECUTABLE(<executable>\r\n\n#     [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf> <component>])\r\n\n#\r\n\n# Installs Qt plugins, writes a Qt configuration file (if needed) and\r\n\n# fixes up a Qt4 executable using BundleUtilities so it is standalone\r\n\n# and can be drag-and-drop copied to another machine as long as all of\r\n\n# the system libraries are compatible.  The executable will be fixed-up\r\n\n# at install time.  <component> is the COMPONENT used for bundle fixup\r\n\n# and plugin installation.  See documentation of FIXUP_QT4_BUNDLE.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The functions defined in this file depend on the fixup_bundle function\r\n\n# (and others) found in BundleUtilities.cmake\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Documentation.cmake" : {
      "ObjectId" : "5cc5e95b53953679652e836cf87aeb293e30c4c7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# Documentation\r\n\n# -------------\r\n\n#\r\n\n# DocumentationVTK.cmake\r\n\n#\r\n\n# This file provides support for the VTK documentation framework.  It\r\n\n# relies on several tools (Doxygen, Perl, etc).\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# Build the documentation ?\r\n\n#\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# Check for the tools\r\n\n#\r\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\r\n\n# The documentation process is controled by a batch file.\r\n\n# We will probably need bash to create the custom target\r\n\n#\r\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/ExternalData.cmake" : {
      "ObjectId" : "a02bf20030fdba457b25878df471faea1fba4409",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nExternalData\r\n------------\r\n\r\n.. only:: html\r\n\r\n   .. contents::\r\n\r\nManage data files stored outside source tree\r\n\r\nIntroduction\r\n^^^^^^^^^^^^\r\n\r\nUse this module to unambiguously reference data files stored outside\r\nthe source tree and fetch them at build time from arbitrary local and\r\nremote content-addressed locations.  Functions provided by this module\r\nrecognize arguments with the syntax ``DATA{<name>}`` as references to\r\nexternal data, replace them with full paths to local copies of those\r\ndata, and create build rules to fetch and update the local copies.\r\n\r\nFor example:\r\n\r\n.. code-block:: cmake\r\n\r\n include(ExternalData)\r\n set(ExternalData_URL_TEMPLATES \"file:///local/%(algo)/%(hash)\"\r\n                                \"file:////host/share/%(algo)/%(hash)\"\r\n                                \"http://data.org/%(algo)/%(hash)\")\r\n ExternalData_Add_Test(MyData\r\n   NAME MyTest\r\n   COMMAND MyExe DATA{MyInput.png}\r\n   )\r\n ExternalData_Add_Target(MyData)\r\n\r\nWhen test ``MyTest`` runs the ``DATA{MyInput.png}`` argument will be\r\nreplaced by the full path to a real instance of the data file\r\n``MyInput.png`` on disk.  If the source tree contains a content link\r\nsuch as ``MyInput.png.md5`` then the ``MyData`` target creates a real\r\n``MyInput.png`` in the build tree.\r\n\r\nModule Functions\r\n^^^^^^^^^^^^^^^^\r\n\r\n.. command:: ExternalData_Expand_Arguments\r\n\r\n  The ``ExternalData_Expand_Arguments`` function evaluates ``DATA{}``\r\n  references in its arguments and constructs a new list of arguments::\r\n\r\n    ExternalData_Expand_Arguments(\r\n      <target>   # Name of data management target\r\n      <outVar>   # Output variable\r\n      [args...]  # Input arguments, DATA{} allowed\r\n      )\r\n\r\n  It replaces each ``DATA{}`` reference in an argument with the full path of\r\n  a real data file on disk that will exist after the ``<target>`` builds.\r\n\r\n.. command:: ExternalData_Add_Test\r\n\r\n  The ``ExternalData_Add_Test`` function wraps around the CMake\r\n  :command:`add_test` command but supports ``DATA{}`` references in\r\n  its arguments::\r\n\r\n    ExternalData_Add_Test(\r\n      <target>   # Name of data management target\r\n      ...        # Arguments of add_test(), DATA{} allowed\r\n      )\r\n\r\n  It passes its arguments through ``ExternalData_Expand_Arguments`` and then\r\n  invokes the :command:`add_test` command using the results.\r\n\r\n.. command:: ExternalData_Add_Target\r\n\r\n  The ``ExternalData_Add_Target`` function creates a custom target to\r\n  manage local instances of data files stored externally::\r\n\r\n    ExternalData_Add_Target(\r\n      <target>   # Name of data management target\r\n      )\r\n\r\n  It creates custom commands in the target as necessary to make data\r\n  files available for each ``DATA{}`` reference previously evaluated by\r\n  other functions provided by this module.\r\n  Data files may be fetched from one of the URL templates specified in\r\n  the ``ExternalData_URL_TEMPLATES`` variable, or may be found locally\r\n  in one of the paths specified in the ``ExternalData_OBJECT_STORES``\r\n  variable.\r\n\r\n  Typically only one target is needed to manage all external data within\r\n  a project.  Call this function once at the end of configuration after\r\n  all data references have been processed.\r\n\r\nModule Variables\r\n^^^^^^^^^^^^^^^^\r\n\r\nThe following variables configure behavior.  They should be set before\r\ncalling any of the functions provided by this module.\r\n\r\n.. variable:: ExternalData_BINARY_ROOT\r\n\r\n  The ``ExternalData_BINARY_ROOT`` variable may be set to the directory to\r\n  hold the real data files named by expanded ``DATA{}`` references.  The\r\n  default is ``CMAKE_BINARY_DIR``.  The directory layout will mirror that of\r\n  content links under ``ExternalData_SOURCE_ROOT``.\r\n\r\n.. variable:: ExternalData_CUSTOM_SCRIPT_<key>\r\n\r\n  Specify a full path to a ``.cmake`` custom fetch script identified by\r\n  ``<key>`` in entries of the ``ExternalData_URL_TEMPLATES`` list.\r\n  See `Custom Fetch Scripts`_.\r\n\r\n.. variable:: ExternalData_LINK_CONTENT\r\n\r\n  The ``ExternalData_LINK_CONTENT`` variable may be set to the name of a\r\n  supported hash algorithm to enable automatic conversion of real data\r\n  files referenced by the ``DATA{}`` syntax into content links.  For each\r\n  such ``<file>`` a content link named ``<file><ext>`` is created.  The\r\n  original file is renamed to the form ``.ExternalData_<algo>_<hash>`` to\r\n  stage it for future transmission to one of the locations in the list\r\n  of URL templates (by means outside the scope of this module).  The\r\n  data fetch rule created for the content link will use the staged\r\n  object if it cannot be found using any URL template.\r\n\r\n.. variable:: ExternalData_NO_SYMLINKS\r\n\r\n  The real data files named by expanded ``DATA{}`` references may be made\r\n  available under ``ExternalData_BINARY_ROOT`` using symbolic links on\r\n  some platforms.  The ``ExternalData_NO_SYMLINKS`` variable may be set\r\n  to disable use of symbolic links and enable use of copies instead.\r\n\r\n.. variable:: ExternalData_OBJECT_STORES\r\n\r\n  The ``ExternalData_OBJECT_STORES`` variable may be set to a list of local\r\n  directories that store objects using the layout ``<dir>/%(algo)/%(hash)``.\r\n  These directories will be searched first for a needed object.  If the\r\n  object is not available in any store then it will be fetched remotely\r\n  using the URL templates and added to the first local store listed.  If\r\n  no stores are specified the default is a location inside the build\r\n  tree.\r\n\r\n.. variable:: ExternalData_SERIES_PARSE\r\n              ExternalData_SERIES_PARSE_PREFIX\r\n              ExternalData_SERIES_PARSE_NUMBER\r\n              ExternalData_SERIES_PARSE_SUFFIX\r\n              ExternalData_SERIES_MATCH\r\n\r\n  See `Referencing File Series`_.\r\n\r\n.. variable:: ExternalData_SOURCE_ROOT\r\n\r\n  The ``ExternalData_SOURCE_ROOT`` variable may be set to the highest source\r\n  directory containing any path named by a ``DATA{}`` reference.  The\r\n  default is ``CMAKE_SOURCE_DIR``.  ``ExternalData_SOURCE_ROOT`` and\r\n  ``CMAKE_SOURCE_DIR`` must refer to directories within a single source\r\n  distribution (e.g.  they come together in one tarball).\r\n\r\n.. variable:: ExternalData_TIMEOUT_ABSOLUTE\r\n\r\n  The ``ExternalData_TIMEOUT_ABSOLUTE`` variable sets the download\r\n  absolute timeout, in seconds, with a default of ``300`` seconds.\r\n  Set to ``0`` to disable enforcement.\r\n\r\n.. variable:: ExternalData_TIMEOUT_INACTIVITY\r\n\r\n  The ``ExternalData_TIMEOUT_INACTIVITY`` variable sets the download\r\n  inactivity timeout, in seconds, with a default of ``60`` seconds.\r\n  Set to ``0`` to disable enforcement.\r\n\r\n.. variable:: ExternalData_URL_ALGO_<algo>_<key>\r\n\r\n  Specify a custom URL component to be substituted for URL template\r\n  placeholders of the form ``%(algo:<key>)``, where ``<key>`` is a\r\n  valid C identifier, when fetching an object referenced via hash\r\n  algorithm ``<algo>``.  If not defined, the default URL component\r\n  is just ``<algo>`` for any ``<key>``.\r\n\r\n.. variable:: ExternalData_URL_TEMPLATES\r\n\r\n  The ``ExternalData_URL_TEMPLATES`` may be set to provide a list of\r\n  of URL templates using the placeholders ``%(algo)`` and ``%(hash)``\r\n  in each template.  Data fetch rules try each URL template in order\r\n  by substituting the hash algorithm name for ``%(algo)`` and the hash\r\n  value for ``%(hash)``.  Alternatively one may use ``%(algo:<key>)``\r\n  with ``ExternalData_URL_ALGO_<algo>_<key>`` variables to gain more\r\n  flexibility in remote URLs.\r\n\r\nReferencing Files\r\n^^^^^^^^^^^^^^^^^\r\n\r\nReferencing Single Files\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\r\nThe ``DATA{}`` syntax is literal and the ``<name>`` is a full or relative path\r\nwithin the source tree.  The source tree must contain either a real\r\ndata file at ``<name>`` or a \"content link\" at ``<name><ext>`` containing a\r\nhash of the real file using a hash algorithm corresponding to ``<ext>``.\r\nFor example, the argument ``DATA{img.png}`` may be satisfied by either a\r\nreal ``img.png`` file in the current source directory or a ``img.png.md5``\r\nfile containing its MD5 sum.\r\n\r\nMultiple content links of the same name with different hash algorithms\r\nare supported (e.g. ``img.png.sha256`` and ``img.png.sha1``) so long as\r\nthey all correspond to the same real file.  This allows objects to be\r\nfetched from sources indexed by different hash algorithms.\r\n\r\nReferencing File Series\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\r\nThe ``DATA{}`` syntax can be told to fetch a file series using the form\r\n``DATA{<name>,:}``, where the ``:`` is literal.  If the source tree\r\ncontains a group of files or content links named like a series then a\r\nreference to one member adds rules to fetch all of them.  Although all\r\nmembers of a series are fetched, only the file originally named by the\r\n``DATA{}`` argument is substituted for it.  The default configuration\r\nrecognizes file series names ending with ``#.ext``, ``_#.ext``, ``.#.ext``,\r\nor ``-#.ext`` where ``#`` is a sequence of decimal digits and ``.ext`` is\r\nany single extension.  Configure it with a regex that parses ``<number>``\r\nand ``<suffix>`` parts from the end of ``<name>``::\r\n\r\n ExternalData_SERIES_PARSE = regex of the form (<number>)(<suffix>)$\r\n\r\nFor more complicated cases set::\r\n\r\n ExternalData_SERIES_PARSE = regex with at least two () groups\r\n ExternalData_SERIES_PARSE_PREFIX = <prefix> regex group number, if any\r\n ExternalData_SERIES_PARSE_NUMBER = <number> regex group number\r\n ExternalData_SERIES_PARSE_SUFFIX = <suffix> regex group number\r\n\r\nConfigure series number matching with a regex that matches the\r\n``<number>`` part of series members named ``<prefix><number><suffix>``::\r\n\r\n ExternalData_SERIES_MATCH = regex matching <number> in all series members\r\n\r\nNote that the ``<suffix>`` of a series does not include a hash-algorithm\r\nextension.\r\n\r\nReferencing Associated Files\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\r\nThe ``DATA{}`` syntax can alternatively match files associated with the\r\nnamed file and contained in the same directory.  Associated files may\r\nbe specified by options using the syntax\r\n``DATA{<name>,<opt1>,<opt2>,...}``.  Each option may specify one file by\r\nname or specify a regular expression to match file names using the\r\nsyntax ``REGEX:<regex>``.  For example, the arguments::\r\n\r\n DATA{MyData/MyInput.mhd,MyInput.img}                   # File pair\r\n DATA{MyData/MyFrames00.png,REGEX:MyFrames[0-9]+\\\\.png} # Series\r\n\r\nwill pass ``MyInput.mha`` and ``MyFrames00.png`` on the command line but\r\nensure that the associated files are present next to them.\r\n\r\nReferencing Directories\r\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\r\nThe ``DATA{}`` syntax may reference a directory using a trailing slash and\r\na list of associated files.  The form ``DATA{<name>/,<opt1>,<opt2>,...}``\r\nadds rules to fetch any files in the directory that match one of the\r\nassociated file options.  For example, the argument\r\n``DATA{MyDataDir/,REGEX:.*}`` will pass the full path to a ``MyDataDir``\r\ndirectory on the command line and ensure that the directory contains\r\nfiles corresponding to every file or content link in the ``MyDataDir``\r\nsource directory.  In order to match associated files in subdirectories,\r\nspecify a ``RECURSE:`` option, e.g. ``DATA{MyDataDir/,RECURSE:,REGEX:.*}``.\r\n\r\nHash Algorithms\r\n^^^^^^^^^^^^^^^\r\n\r\nThe following hash algorithms are supported::\r\n\r\n %(algo)     <ext>     Description\r\n -------     -----     -----------\r\n MD5         .md5      Message-Digest Algorithm 5, RFC 1321\r\n SHA1        .sha1     US Secure Hash Algorithm 1, RFC 3174\r\n SHA224      .sha224   US Secure Hash Algorithms, RFC 4634\r\n SHA256      .sha256   US Secure Hash Algorithms, RFC 4634\r\n SHA384      .sha384   US Secure Hash Algorithms, RFC 4634\r\n SHA512      .sha512   US Secure Hash Algorithms, RFC 4634\r\n SHA3_224    .sha3-224 Keccak SHA-3\r\n SHA3_256    .sha3-256 Keccak SHA-3\r\n SHA3_384    .sha3-384 Keccak SHA-3\r\n SHA3_512    .sha3-512 Keccak SHA-3\r\n\r\nNote that the hashes are used only for unique data identification and\r\ndownload verification.\r\n\r\n.. _`ExternalData Custom Fetch Scripts`:\r\n\r\nCustom Fetch Scripts\r\n^^^^^^^^^^^^^^^^^^^^\r\n\r\nWhen a data file must be fetched from one of the URL templates\r\nspecified in the ``ExternalData_URL_TEMPLATES`` variable, it is\r\nnormally downloaded using the :command:`file(DOWNLOAD)` command.\r\nOne may specify usage of a custom fetch script by using a URL\r\ntemplate of the form ``ExternalDataCustomScript://<key>/<loc>``.\r\nThe ``<key>`` must be a C identifier, and the ``<loc>`` must\r\ncontain the ``%(algo)`` and ``%(hash)`` placeholders.\r\nA variable corresponding to the key, ``ExternalData_CUSTOM_SCRIPT_<key>``,\r\nmust be set to the full path to a ``.cmake`` script file.  The script\r\nwill be included to perform the actual fetch, and provided with\r\nthe following variables:\r\n\r\n.. variable:: ExternalData_CUSTOM_LOCATION\r\n\r\n  When a custom fetch script is loaded, this variable is set to the\r\n  location part of the URL, which will contain the substituted hash\r\n  algorithm name and content hash value.\r\n\r\n.. variable:: ExternalData_CUSTOM_FILE\r\n\r\n  When a custom fetch script is loaded, this variable is set to the\r\n  full path to a file in which the script must store the fetched\r\n  content.  The name of the file is unspecified and should not be\r\n  interpreted in any way.\r\n\r\nThe custom fetch script is expected to store fetched content in the\r\nfile or set a variable:\r\n\r\n.. variable:: ExternalData_CUSTOM_ERROR\r\n\r\n  When a custom fetch script fails to fetch the requested content,\r\n  it must set this variable to a short one-line message describing\r\n  the reason for failure.\r\n\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Expand all arguments as a single string to preserve escaped semicolons.\r\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Store custom script configuration.\r\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Store custom algorithm name to URL component maps.\r\n",
        "Line" : 374,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Store configuration for use by build-time script.\r\n",
        "Line" : 394,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set a \"_ExternalData_FILE_${file}\" variable for each output file to avoid\r\n\n# duplicate entries within this target.  Set a directory property of the same\r\n\n# name to avoid repeating custom commands with the same output in this directory.\r\n\n# Repeating custom commands with the same output across directories or across\r\n\n# targets in the same directory may be a race, but this is likely okay because\r\n\n# we use atomic replacement of output files.\r\n\n#\r\n\n# Use local data first to prefer real files over content links.\r\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Custom commands to copy or link local data.\r\n",
        "Line" : 409,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Custom commands to fetch remote data.\r\n",
        "Line" : 435,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Users care about the data file, so hide the hash/timestamp file.\r\n",
        "Line" : 451,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# The hash/timestamp file is the output from the build perspective.\r\n\n# List the real file as a second output in case it is a broken link.\r\n\n# The files must be listed in this order so CMake can hide from the\r\n\n# make tool that a symlink target may not be newer than the input.\r\n",
        "Line" : 453,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Run the data fetch/update script.\r\n",
        "Line" : 458,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Update whenever the object hash changes.\r\n",
        "Line" : 464,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Custom target to drive all update commands.\r\n",
        "Line" : 472,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Replace DATA{} references with real arguments.\r\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# This list expansion un-escapes semicolons in list element values so we\r\n\n# must re-escape them below anywhere a new list expansion will occur.\r\n",
        "Line" : 481,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Re-escape in-value semicolons before expansion in foreach below.\r\n",
        "Line" : 485,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Split argument into DATA{}-pieces and other pieces.\r\n",
        "Line" : 487,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Compose output argument with DATA{}-pieces replaced.\r\n",
        "Line" : 489,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Replace this DATA{}-piece with a file path.\r\n",
        "Line" : 493,
        "CharPositionInLine" : 10
      },
      "20" : {
        "Text" : "# No replacement needed for this piece.\r\n",
        "Line" : 497,
        "CharPositionInLine" : 10
      },
      "21" : {
        "Text" : "# No replacements needed in this argument.\r\n",
        "Line" : 502,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Re-escape in-value semicolons in resulting list.\r\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Private helper interface\r\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Separate data path from the options.\r\n",
        "Line" : 567,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Interpret trailing slashes as directories.\r\n",
        "Line" : 572,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Convert to full path.\r\n",
        "Line" : 579,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Convert to relative path under the source tree.\r\n",
        "Line" : 587,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Handle in-source builds gracefully.\r\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Entries external to the source tree.\r\n\n# Entries internal to the source tree.\r\n",
        "Line" : 620,
        "CharPositionInLine" : 19
      },
      "30" : {
        "Text" : "# Process options.\r\n",
        "Line" : 625,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Regular expression to match associated files.\r\n",
        "Line" : 631,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Activate series matching.\r\n",
        "Line" : 635,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Activate recursive matching in directories.\r\n",
        "Line" : 638,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Specific associated file.\r\n",
        "Line" : 641,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Load a whole file series.\r\n",
        "Line" : 659,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Load listed/matching associated files in the directory.\r\n",
        "Line" : 663,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Load the named data file.\r\n",
        "Line" : 674,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Load listed/matching associated files.\r\n",
        "Line" : 677,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Make the series available in the build tree.\r\n",
        "Line" : 698,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# The whole series is in the source tree.\r\n",
        "Line" : 705,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Associated files lie in the same directory.\r\n",
        "Line" : 711,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Find files named explicitly.\r\n",
        "Line" : 728,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Find files matching the given regular expressions.\r\n",
        "Line" : 735,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Match only the named data by itself.\r\n",
        "Line" : 746,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Configure series parsing and matching.\r\n",
        "Line" : 752,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Parse the base, number, and extension components of the series.\r\n",
        "Line" : 785,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Glob files that might match the series.\r\n\n# Then match base, number, and extension.\r\n",
        "Line" : 799,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# matches\r\n",
        "Line" : 821,
        "CharPositionInLine" : 43
      },
      "49" : {
        "Text" : "# not staged obj\r\n",
        "Line" : 822,
        "CharPositionInLine" : 63
      },
      "50" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Private script mode interface\r\n",
        "Line" : 863,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Create a temporary file first.\r\n",
        "Line" : 879,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Create a symbolic link.\r\n",
        "Line" : 885,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Use relative path if files are close enough.\r\n",
        "Line" : 888,
        "CharPositionInLine" : 6
      },
      "54" : {
        "Text" : "# Create a copy.\r\n",
        "Line" : 898,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Atomically create/replace the real destination.\r\n",
        "Line" : 906,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Search all object stores for an existing object.\r\n",
        "Line" : 975,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Search all object stores for an existing object.\r\n",
        "Line" : 988,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Download object to the first store.\r\n",
        "Line" : 1000,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Verify downloaded object.\r\n",
        "Line" : 1032,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# Check if file already corresponds to the object.\r\n",
        "Line" : 1123,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Touch the file to convince the build system it is up to date.\r\n",
        "Line" : 1135,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# Atomically update the hash/timestamp file to record the object referenced.\r\n",
        "Line" : 1141,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 63
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/ExternalProject.cmake" : {
      "ObjectId" : "700b15f5461d68bc81525d0f75534a2d8e2cc7b7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nExternalProject\r\n---------------\r\n\r\nCreate custom targets to build projects in external trees\r\n\r\n.. command:: ExternalProject_Add\r\n\r\n  The ``ExternalProject_Add`` function creates a custom target to drive\r\n  download, update/patch, configure, build, install and test steps of an\r\n  external project::\r\n\r\n   ExternalProject_Add(<name> [<option>...])\r\n\r\n  General options are:\r\n\r\n  ``DEPENDS <projects>...``\r\n    Targets on which the project depends\r\n  ``PREFIX <dir>``\r\n    Root dir for entire project\r\n  ``LIST_SEPARATOR <sep>``\r\n    Sep to be replaced by ; in cmd lines\r\n  ``TMP_DIR <dir>``\r\n    Directory to store temporary files\r\n  ``STAMP_DIR <dir>``\r\n    Directory to store step timestamps\r\n  ``EXCLUDE_FROM_ALL 1``\r\n    The \"all\" target does not depend on this\r\n\r\n  Download step options are:\r\n\r\n  ``DOWNLOAD_NAME <fname>``\r\n    File name to store (if not end of URL)\r\n  ``DOWNLOAD_DIR <dir>``\r\n    Directory to store downloaded files\r\n  ``DOWNLOAD_COMMAND <cmd>...``\r\n    Command to download source tree\r\n  ``DOWNLOAD_NO_PROGRESS 1``\r\n    Disable download progress reports\r\n  ``CVS_REPOSITORY <cvsroot>``\r\n    CVSROOT of CVS repository\r\n  ``CVS_MODULE <mod>``\r\n    Module to checkout from CVS repo\r\n  ``CVS_TAG <tag>``\r\n    Tag to checkout from CVS repo\r\n  ``SVN_REPOSITORY <url>``\r\n    URL of Subversion repo\r\n  ``SVN_REVISION -r<rev>``\r\n    Revision to checkout from Subversion repo\r\n  ``SVN_USERNAME <username>``\r\n    Username for Subversion checkout and update\r\n  ``SVN_PASSWORD <password>``\r\n    Password for Subversion checkout and update\r\n  ``SVN_TRUST_CERT 1``\r\n    Trust the Subversion server site certificate\r\n  ``GIT_REPOSITORY <url>``\r\n    URL of git repo\r\n  ``GIT_TAG <tag>``\r\n    Git branch name, commit id or tag\r\n  ``GIT_REMOTE_NAME <name>``\r\n    The optional name of the remote, default to ``origin``\r\n  ``GIT_SUBMODULES <module>...``\r\n    Git submodules that shall be updated, all if empty\r\n  ``GIT_SHALLOW 1``\r\n    Tell Git to clone with ``--depth 1``.  Use when ``GIT_TAG`` is not\r\n    specified or when it names a branch in order to download only the\r\n    tip of the branch without the rest of its history.\r\n  ``GIT_PROGRESS 1``\r\n    Tell Git to clone with ``--progress``.  For large projects, the clone step\r\n    does not output anything which can make the build appear to have stalled.\r\n    This option forces Git to output progress information during the clone step\r\n    so that forward progress is indicated.\r\n  ``GIT_CONFIG <option>...``\r\n    Tell Git to clone with ``--config <option>``.  Use additional configuration\r\n    parameters when cloning the project (``key=value`` as expected by ``git\r\n    config``).\r\n  ``HG_REPOSITORY <url>``\r\n    URL of mercurial repo\r\n  ``HG_TAG <tag>``\r\n    Mercurial branch name, commit id or tag\r\n  ``URL /.../src.tgz [/.../src.tgz]...``\r\n    Full path or URL(s) of source.  Multiple URLs are allowed as mirrors.\r\n  ``URL_HASH ALGO=value``\r\n    Hash of file at URL\r\n  ``URL_MD5 md5``\r\n    Equivalent to URL_HASH MD5=md5\r\n  ``HTTP_USERNAME <username>``\r\n    Username for download operation\r\n  ``HTTP_PASSWORD <username>``\r\n    Password for download operation\r\n  ``HTTP_HEADER <header>``\r\n    HTTP header for download operation. Suboption can be repeated several times.\r\n  ``TLS_VERIFY <bool>``\r\n    Should certificate for https be checked\r\n  ``TLS_CAINFO <file>``\r\n    Path to a certificate authority file\r\n  ``TIMEOUT <seconds>``\r\n    Time allowed for file download operations\r\n  ``DOWNLOAD_NO_EXTRACT 1``\r\n    Just download the file and do not extract it; the full path to the\r\n    downloaded file is available as ``<DOWNLOADED_FILE>``.\r\n\r\n  Update/Patch step options are:\r\n\r\n  ``UPDATE_COMMAND <cmd>...``\r\n    Source work-tree update command\r\n  ``UPDATE_DISCONNECTED 1``\r\n    Never update automatically from the remote repository\r\n  ``PATCH_COMMAND <cmd>...``\r\n    Command to patch downloaded source\r\n\r\n  Configure step options are:\r\n\r\n  ``SOURCE_DIR <dir>``\r\n    Source dir to be used for build\r\n  ``SOURCE_SUBDIR <dir>``\r\n    Path to source CMakeLists.txt relative to ``SOURCE_DIR``\r\n  ``CONFIGURE_COMMAND <cmd>...``\r\n    Build tree configuration command\r\n  ``CMAKE_COMMAND /.../cmake``\r\n    Specify alternative cmake executable\r\n  ``CMAKE_GENERATOR <gen>``\r\n    Specify generator for native build\r\n  ``CMAKE_GENERATOR_PLATFORM <platform>``\r\n    Generator-specific platform name\r\n  ``CMAKE_GENERATOR_TOOLSET <toolset>``\r\n    Generator-specific toolset name\r\n  ``CMAKE_ARGS <arg>...``\r\n    Arguments to CMake command line.\r\n    These arguments are passed to CMake command line, and can contain\r\n    arguments other than cache values, see also\r\n    :manual:`CMake Options <cmake(1)>`. Arguments in the form\r\n    ``-Dvar:string=on`` are always passed to the command line, and\r\n    therefore cannot be changed by the user.\r\n    Arguments may use\r\n    :manual:`generator expressions <cmake-generator-expressions(7)>`.\r\n  ``CMAKE_CACHE_ARGS <arg>...``\r\n    Initial cache arguments, of the form ``-Dvar:string=on``.\r\n    These arguments are written in a pre-load a script that populates\r\n    CMake cache, see also :manual:`cmake -C <cmake(1)>`. This allows one to\r\n    overcome command line length limits.\r\n    These arguments are :command:`set` using the ``FORCE`` argument,\r\n    and therefore cannot be changed by the user.\r\n    Arguments may use\r\n    :manual:`generator expressions <cmake-generator-expressions(7)>`.\r\n  ``CMAKE_CACHE_DEFAULT_ARGS <arg>...``\r\n    Initial default cache arguments, of the form ``-Dvar:string=on``.\r\n    These arguments are written in a pre-load a script that populates\r\n    CMake cache, see also :manual:`cmake -C <cmake(1)>`. This allows one to\r\n    overcome command line length limits.\r\n    These arguments can be used as default value that will be set if no\r\n    previous value is found in the cache, and that the user can change\r\n    later.\r\n    Arguments may use\r\n    :manual:`generator expressions <cmake-generator-expressions(7)>`.\r\n\r\n  Build step options are:\r\n\r\n  ``BINARY_DIR <dir>``\r\n    Specify build dir location\r\n  ``BUILD_COMMAND <cmd>...``\r\n    Command to drive the native build\r\n  ``BUILD_IN_SOURCE 1``\r\n    Use source dir for build dir\r\n  ``BUILD_ALWAYS 1``\r\n    No stamp file, build step always runs\r\n  ``BUILD_BYPRODUCTS <file>...``\r\n    Files that will be generated by the build command but may or may\r\n    not have their modification time updated by subsequent builds.\r\n\r\n  Install step options are:\r\n\r\n  ``INSTALL_DIR <dir>``\r\n    Installation prefix to be placed in the ``<INSTALL_DIR>`` placeholder.\r\n    This does not actually configure the external project to install to\r\n    the given prefix.  That must be done by passing appropriate arguments\r\n    to the external project configuration step, e.g. using ``<INSTALL_DIR>``.\r\n  ``INSTALL_COMMAND <cmd>...``\r\n    Command to drive installation of the external project after it has been\r\n    built.  This only happens at the *build* time of the calling project.\r\n    In order to install files from the external project alongside the\r\n    locally-built files, a separate local :command:`install` call must be\r\n    added to pick the files up from one of the external project trees.\r\n\r\n  Test step options are:\r\n\r\n  ``TEST_BEFORE_INSTALL 1``\r\n    Add test step executed before install step\r\n  ``TEST_AFTER_INSTALL 1``\r\n    Add test step executed after install step\r\n  ``TEST_EXCLUDE_FROM_MAIN 1``\r\n    Main target does not depend on the test step\r\n  ``TEST_COMMAND <cmd>...``\r\n    Command to drive test\r\n\r\n  Output logging options are:\r\n\r\n  ``LOG_DOWNLOAD 1``\r\n    Wrap download in script to log output\r\n  ``LOG_UPDATE 1``\r\n    Wrap update in script to log output\r\n  ``LOG_CONFIGURE 1``\r\n    Wrap configure in script to log output\r\n  ``LOG_BUILD 1``\r\n    Wrap build in script to log output\r\n  ``LOG_TEST 1``\r\n    Wrap test in script to log output\r\n  ``LOG_INSTALL 1``\r\n    Wrap install in script to log output\r\n\r\n  Steps can be given direct access to the terminal if possible.  With\r\n  the :generator:`Ninja` generator, this places the steps in the\r\n  ``console`` :prop_gbl:`pool <JOB_POOLS>`.  Options are:\r\n\r\n  ``USES_TERMINAL_DOWNLOAD 1``\r\n    Give download terminal access.\r\n  ``USES_TERMINAL_UPDATE 1``\r\n    Give update terminal access.\r\n  ``USES_TERMINAL_CONFIGURE 1``\r\n    Give configure terminal access.\r\n  ``USES_TERMINAL_BUILD 1``\r\n    Give build terminal access.\r\n  ``USES_TERMINAL_TEST 1``\r\n    Give test terminal access.\r\n  ``USES_TERMINAL_INSTALL 1``\r\n    Give install terminal access.\r\n\r\n  Other options are:\r\n\r\n  ``STEP_TARGETS <step-target>...``\r\n    Generate custom targets for these steps\r\n  ``INDEPENDENT_STEP_TARGETS <step-target>...``\r\n    Generate custom targets for these steps that do not depend on other\r\n    external projects even if a dependency is set\r\n\r\n  The ``*_DIR`` options specify directories for the project, with default\r\n  directories computed as follows.  If the ``PREFIX`` option is given to\r\n  ``ExternalProject_Add()`` or the ``EP_PREFIX`` directory property is set,\r\n  then an external project is built and installed under the specified prefix::\r\n\r\n   TMP_DIR      = <prefix>/tmp\r\n   STAMP_DIR    = <prefix>/src/<name>-stamp\r\n   DOWNLOAD_DIR = <prefix>/src\r\n   SOURCE_DIR   = <prefix>/src/<name>\r\n   BINARY_DIR   = <prefix>/src/<name>-build\r\n   INSTALL_DIR  = <prefix>\r\n\r\n  Otherwise, if the ``EP_BASE`` directory property is set then components\r\n  of an external project are stored under the specified base::\r\n\r\n   TMP_DIR      = <base>/tmp/<name>\r\n   STAMP_DIR    = <base>/Stamp/<name>\r\n   DOWNLOAD_DIR = <base>/Download/<name>\r\n   SOURCE_DIR   = <base>/Source/<name>\r\n   BINARY_DIR   = <base>/Build/<name>\r\n   INSTALL_DIR  = <base>/Install/<name>\r\n\r\n  If no ``PREFIX``, ``EP_PREFIX``, or ``EP_BASE`` is specified then the\r\n  default is to set ``PREFIX`` to ``<name>-prefix``.  Relative paths are\r\n  interpreted with respect to the build directory corresponding to the\r\n  source directory in which ``ExternalProject_Add`` is invoked.\r\n\r\n  If ``SOURCE_SUBDIR`` is set and no ``CONFIGURE_COMMAND`` is specified, the\r\n  configure command will run CMake using the ``CMakeLists.txt`` located in the\r\n  relative path specified by ``SOURCE_SUBDIR``, relative to the ``SOURCE_DIR``.\r\n  If no ``SOURCE_SUBDIR`` is given, ``SOURCE_DIR`` is used.\r\n\r\n  If ``SOURCE_DIR`` is explicitly set to an existing directory the project\r\n  will be built from it.  Otherwise a download step must be specified\r\n  using one of the ``DOWNLOAD_COMMAND``, ``CVS_*``, ``SVN_*``, or ``URL``\r\n  options.  The ``URL`` option may refer locally to a directory or source\r\n  tarball, or refer to a remote tarball (e.g. ``http://.../src.tgz``).\r\n\r\n  If ``UPDATE_DISCONNECTED`` is set, the update step is not executed\r\n  automatically when building the main target. The update step can still\r\n  be added as a step target and called manually. This is useful if you\r\n  want to allow one to build the project when you are disconnected from the\r\n  network (you might still need the network for the download step).\r\n  This is disabled by default.\r\n  The directory property ``EP_UPDATE_DISCONNECTED`` can be used to change\r\n  the default value for all the external projects in the current\r\n  directory and its subdirectories.\r\n\r\n.. command:: ExternalProject_Add_Step\r\n\r\n  The ``ExternalProject_Add_Step`` function adds a custom step to an\r\n  external project::\r\n\r\n   ExternalProject_Add_Step(<name> <step> [<option>...])\r\n\r\n  Options are:\r\n\r\n  ``COMMAND <cmd>...``\r\n    Command line invoked by this step\r\n  ``COMMENT \"<text>...\"``\r\n    Text printed when step executes\r\n  ``DEPENDEES <step>...``\r\n    Steps on which this step depends\r\n  ``DEPENDERS <step>...``\r\n    Steps that depend on this step\r\n  ``DEPENDS <file>...``\r\n    Files on which this step depends\r\n  ``BYPRODUCTS <file>...``\r\n    Files that will be generated by this step but may or may not\r\n    have their modification time updated by subsequent builds.\r\n  ``ALWAYS 1``\r\n    No stamp file, step always runs\r\n  ``EXCLUDE_FROM_MAIN 1``\r\n    Main target does not depend on this step\r\n  ``WORKING_DIRECTORY <dir>``\r\n    Working directory for command\r\n  ``LOG 1``\r\n    Wrap step in script to log output\r\n  ``USES_TERMINAL 1``\r\n    Give the step direct access to the terminal if possible.\r\n\r\n  The command line, comment, working directory, and byproducts of every\r\n  standard and custom step are processed to replace tokens ``<SOURCE_DIR>``,\r\n  ``<SOURCE_SUBDIR>``,  ``<BINARY_DIR>``, ``<INSTALL_DIR>``, and ``<TMP_DIR>``\r\n  with corresponding property values.\r\n\r\nAny builtin step that specifies a ``<step>_COMMAND cmd...`` or custom\r\nstep that specifies a ``COMMAND cmd...`` may specify additional command\r\nlines using the form ``COMMAND cmd...``.  At build time the commands\r\nwill be executed in order and aborted if any one fails.  For example::\r\n\r\n ... BUILD_COMMAND make COMMAND echo done ...\r\n\r\nspecifies to run ``make`` and then ``echo done`` during the build step.\r\nWhether the current working directory is preserved between commands is\r\nnot defined.  Behavior of shell operators like ``&&`` is not defined.\r\n\r\nArguments to ``<step>_COMMAND`` or ``COMMAND`` options may use\r\n:manual:`generator expressions <cmake-generator-expressions(7)>`.\r\n\r\n.. command:: ExternalProject_Get_Property\r\n\r\n  The ``ExternalProject_Get_Property`` function retrieves external project\r\n  target properties::\r\n\r\n    ExternalProject_Get_Property(<name> [prop1 [prop2 [...]]])\r\n\r\n  It stores property values in variables of the same name.  Property\r\n  names correspond to the keyword argument names of\r\n  ``ExternalProject_Add``.\r\n\r\n.. command:: ExternalProject_Add_StepTargets\r\n\r\n  The ``ExternalProject_Add_StepTargets`` function generates custom\r\n  targets for the steps listed::\r\n\r\n    ExternalProject_Add_StepTargets(<name> [NO_DEPENDS] [step1 [step2 [...]]])\r\n\r\nIf ``NO_DEPENDS`` is set, the target will not depend on the\r\ndependencies of the complete project. This is usually safe to use for\r\nthe download, update, and patch steps that do not require that all the\r\ndependencies are updated and built.  Using ``NO_DEPENDS`` for other\r\nof the default steps might break parallel builds, so you should avoid,\r\nit.  For custom steps, you should consider whether or not the custom\r\ncommands requires that the dependencies are configured, built and\r\ninstalled.\r\n\r\nIf ``STEP_TARGETS`` or ``INDEPENDENT_STEP_TARGETS`` is set then\r\n``ExternalProject_Add_StepTargets`` is automatically called at the end\r\nof matching calls to ``ExternalProject_Add_Step``.  Pass\r\n``STEP_TARGETS`` or ``INDEPENDENT_STEP_TARGETS`` explicitly to\r\nindividual ``ExternalProject_Add`` calls, or implicitly to all\r\n``ExternalProject_Add`` calls by setting the directory properties\r\n``EP_STEP_TARGETS`` and ``EP_INDEPENDENT_STEP_TARGETS``.  The\r\n``INDEPENDENT`` version of the argument and of the property will call\r\n``ExternalProject_Add_StepTargets`` with the ``NO_DEPENDS`` argument.\r\n\r\nIf ``STEP_TARGETS`` and ``INDEPENDENT_STEP_TARGETS`` are not set,\r\nclients may still manually call ``ExternalProject_Add_StepTargets``\r\nafter calling ``ExternalProject_Add`` or ``ExternalProject_Add_Step``.\r\n\r\nThis functionality is provided to make it easy to drive the steps\r\nindependently of each other by specifying targets on build command\r\nlines.  For example, you may be submitting to a sub-project based\r\ndashboard, where you want to drive the configure portion of the build,\r\nthen submit to the dashboard, followed by the build portion, followed\r\nby tests.  If you invoke a custom target that depends on a step\r\nhalfway through the step dependency chain, then all the previous steps\r\nwill also run to ensure everything is up to date.\r\n\r\nFor example, to drive configure, build and test steps independently\r\nfor each ``ExternalProject_Add`` call in your project, write the following\r\nline prior to any ``ExternalProject_Add`` calls in your ``CMakeLists.txt``\r\nfile::\r\n\r\n set_property(DIRECTORY PROPERTY EP_STEP_TARGETS configure build test)\r\n\r\n.. command:: ExternalProject_Add_StepDependencies\r\n\r\n  The ``ExternalProject_Add_StepDependencies`` function add some\r\n  dependencies for some external project step::\r\n\r\n    ExternalProject_Add_StepDependencies(<name> <step> [target1 [target2 [...]]])\r\n\r\n  This function takes care to set both target and file level\r\n  dependencies, and will ensure that parallel builds will not break.\r\n  It should be used instead of :command:`add_dependencies()` when adding\r\n  a dependency for some of the step targets generated by\r\n  ``ExternalProject``.\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pre-compute a regex to match documented keywords for each command.\r\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"function [${_ep_func}]\")\r\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#message(\"  keyword [${_ep_key}]\")\r\n",
        "Line" : 426,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Save regex matching supported hash algorithm names.\r\n",
        "Line" : 436,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Transfer the arguments to this function into target properties for the\r\n\n# new custom target we just added so that we can set up all the build steps\r\n\n# correctly based on target properties.\r\n\n#\r\n\n# We loop through ARGN and consider the namespace starting with an\r\n\n# upper-case letter followed by at least two more upper-case letters,\r\n\n# numbers or underscores to be keywords.\r\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Value\r\n",
        "Line" : 466,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Missing Keyword\r\n",
        "Line" : 479,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# check for curl globals in the project\r\n",
        "Line" : 911,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# now check for curl locals so that the local values\r\n\n# will override the globals\r\n",
        "Line" : 919,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check for tls_verify argument\r\n",
        "Line" : 922,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# check for tls_cainfo argument\r\n",
        "Line" : 927,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Used variables:\r\n\n# * TLS_VERIFY_CODE\r\n\n# * TLS_CAINFO_CODE\r\n\n# * ALGO\r\n\n# * EXPECT_VALUE\r\n\n# * REMOTE\r\n\n# * LOCAL\r\n\n# * SHOW_PROGRESS\r\n\n# * TIMEOUT_ARGS\r\n\n# * TIMEOUT_MSG\r\n\n# * USERPWD_ARGS\r\n\n# * HTTP_HEADERS_ARGS\r\n",
        "Line" : 949,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Used variables:\r\n\n# * ALGO\r\n\n# * EXPECT_VALUE\r\n\n# * LOCAL\r\n",
        "Line" : 977,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Prefix with a slash so that when appended to the source directory, it\r\n\n# behaves as expected.\r\n",
        "Line" : 1124,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Make the directories at CMake configure time *and* add a custom command\r\n\n# to make them at build time. They need to exist at makefile generation\r\n\n# time for Borland make and wmake so that CMake may generate makefiles\r\n\n# with \"cd C:\\short\\paths\\with\\no\\spaces\" commands in them.\r\n\n#\r\n\n# Additionally, the add_custom_command is still used in case somebody\r\n\n# removes one of the necessary directories and tries to rebuild without\r\n\n# re-running cmake.\r\n",
        "Line" : 1133,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# IMPORTANT: this MUST be a macro and not a function because of the\r\n\n# in-place replacements that occur in each ${var}\r\n\n#\r\n",
        "Line" : 1152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This is required to build up lists in variables, or complete an entry\r\n",
        "Line" : 1180,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Assume this is a list to append to the last var\r\n",
        "Line" : 1195,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Catch the final line of the args\r\n",
        "Line" : 1199,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Write out values into an initial cache, that will be passed to CMake with -C\r\n\n# Replace location tags.\r\n",
        "Line" : 1209,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Write out the initial cache file to the location specified.\r\n",
        "Line" : 1213,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Explicit empty string means no configure step for this project\r\n",
        "Line" : 1235,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Default is \"use cmake\":\r\n",
        "Line" : 1239,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Otherwise we have to analyze the value:\r\n",
        "Line" : 1242,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# CMake project.  Select build command based on generator.\r\n",
        "Line" : 1262,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# The project uses the same Makefile generator.  Use recursive make.\r\n",
        "Line" : 1266,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Drive the project with \"cmake --build\".\r\n",
        "Line" : 1275,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# CMake 3.4 and below used the CMAKE_CFG_INTDIR placeholder value\r\n\n# provided by multi-configuration generators.  Some projects were\r\n\n# taking advantage of that undocumented implementation detail to\r\n\n# specify a specific configuration here.  They should use\r\n\n# BUILD_COMMAND to change the default command instead, but for\r\n\n# compatibility honor the value.\r\n",
        "Line" : 1287,
        "CharPositionInLine" : 10
      },
      "30" : {
        "Text" : "# But for \"TEST\" drive the project with corresponding \"ctest\".\r\n",
        "Line" : 1304,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Non-CMake project.  Guess \"make\" and \"make install\" and \"make test\".\r\n",
        "Line" : 1314,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Try to get the parallel arguments\r\n",
        "Line" : 1316,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Use user-specified arguments instead of default arguments, if any.\r\n",
        "Line" : 1329,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# GNU make recognizes the string \"$(MAKE)\" as recursive make, so\r\n\n# ensure that it appears directly in the makefile.\r\n",
        "Line" : 1346,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Wrap multiple 'COMMAND' lines up into a second-level wrapper\r\n\n# script so all output can be sent to one log file.\r\n",
        "Line" : 1375,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Wrap the command in a script to log output to files.\r\n",
        "Line" : 1409,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# This module used to use \"/${CMAKE_CFG_INTDIR}\" directly and produced\r\n\n# makefiles with \"/./\" in paths for custom command dependencies. Which\r\n\n# resulted in problems with parallel make -j invocations.\r\n\n#\r\n\n# This function was added so that the suffix (search below for ${cfgdir}) is\r\n\n# only set to \"/${CMAKE_CFG_INTDIR}\" when ${CMAKE_CFG_INTDIR} is not going to\r\n\n# be \".\" (multi-configuration build systems like Visual Studio and Xcode...)\r\n\n#\r\n",
        "Line" : 1438,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Depend on other external projects (target-level).\r\n",
        "Line" : 1482,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Steps depending on this step.\r\n",
        "Line" : 1511,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Dependencies on files.\r\n",
        "Line" : 1521,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Byproducts of the step.\r\n",
        "Line" : 1524,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Dependencies on steps.\r\n",
        "Line" : 1527,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# The command to run.\r\n",
        "Line" : 1534,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Replace list separators.\r\n",
        "Line" : 1543,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Replace location tags.\r\n",
        "Line" : 1549,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Custom comment?\r\n",
        "Line" : 1552,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Uses terminal?\r\n",
        "Line" : 1558,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Run every time?\r\n",
        "Line" : 1566,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Remove any existing stamp in case the option changed in an existing tree.\r\n",
        "Line" : 1571,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Wrap with log script?\r\n",
        "Line" : 1584,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Some generators (i.e. Xcode) will not generate a file level target\r\n\n# if no command is set, and therefore the dependencies on this\r\n\n# target will be broken.\r\n\n# The empty command is replaced by an echo command here in order to\r\n\n# avoid this issue.\r\n",
        "Line" : 1591,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Add custom \"step target\"?\r\n",
        "Line" : 1612,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Sanity checks on \"name\" and \"step\".\r\n",
        "Line" : 1640,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Always add file-level dependency, but add target-level dependency\r\n\n# only if the target exists for that step.\r\n",
        "Line" : 1672,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# TODO: Perhaps file:// should be copied to download dir before extraction.\r\n",
        "Line" : 1729,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Use CMake builtin find module\r\n",
        "Line" : 1802,
        "CharPositionInLine" : 29
      },
      "57" : {
        "Text" : "# The git submodule update '--recursive' flag requires git >= v1.6.5\r\n\n#\r\n",
        "Line" : 1808,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# For the download step, and the git clone operation, only the repository\r\n\n# should be recorded in a configured RepositoryInfo file. If the repo\r\n\n# changes, the clone script should be run again. But if only the tag\r\n\n# changes, avoid running the clone script again. Let the 'always' running\r\n\n# update step checkout the new tag.\r\n\n#\r\n",
        "Line" : 1833,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Since git clone doesn't succeed if the non-empty source_dir exists,\r\n\n# create a cmake script to invoke as download command.\r\n\n# The script will delete the source directory and then call git clone.\r\n\n#\r\n",
        "Line" : 1851,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# For the download step, and the hg clone operation, only the repository\r\n\n# should be recorded in a configured RepositoryInfo file. If the repo\r\n\n# changes, the clone script should be run again. But if only the tag\r\n\n# changes, avoid running the clone script again. Let the 'always' running\r\n\n# update step checkout the new tag.\r\n\n#\r\n",
        "Line" : 1873,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Since hg clone doesn't succeed if the non-empty source_dir exists,\r\n\n# create a cmake script to invoke as download command.\r\n\n# The script will delete the source directory and then call hg clone.\r\n\n#\r\n",
        "Line" : 1891,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# TODO: Should download and extraction be different steps?\r\n",
        "Line" : 1947,
        "CharPositionInLine" : 8
      },
      "63" : {
        "Text" : "# Fall back to a default file name.  The actual file name does not\r\n\n# matter because it is used only internally and our extraction tool\r\n\n# inspects the file content directly.  If it turns out the wrong URL\r\n\n# was given that will be revealed during the build which is an easier\r\n\n# place for users to diagnose than an error here anyway.\r\n",
        "Line" : 1956,
        "CharPositionInLine" : 10
      },
      "64" : {
        "Text" : "# already verified by 'download_script'\r\n",
        "Line" : 1982,
        "CharPositionInLine" : 59
      },
      "65" : {
        "Text" : "# Use CMake builtin find module\r\n",
        "Line" : 2105,
        "CharPositionInLine" : 29
      },
      "66" : {
        "Text" : "# If there are any CMAKE_CACHE_ARGS or CMAKE_CACHE_DEFAULT_ARGS,\r\n\n# write an initial cache and use it\r\n",
        "Line" : 2228,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# TODO: Make sure external projects use the proper compiler\r\n",
        "Line" : 2282,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Depend on other external projects (file-level).\r\n",
        "Line" : 2286,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# If anything about the configure command changes, (command itself, cmake\r\n\n# used, cmake args or cmake generator) then re-run the configure step.\r\n\n# Fixes issue https://gitlab.kitware.com/cmake/cmake/issues/10258\r\n\n#\r\n",
        "Line" : 2302,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Only actually add the test step if one of the test related properties is\r\n\n# explicitly set. (i.e. the test step is omitted unless requested...)\r\n\n#\r\n",
        "Line" : 2440,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Add a custom target for the external project.\r\n",
        "Line" : 2499,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# The \"ALL\" option to add_custom_target just tells it to not set the\r\n\n# EXCLUDE_FROM_ALL target property. Later, if the EXCLUDE_FROM_ALL\r\n\n# argument was passed, we explicitly set it for the target.\r\n",
        "Line" : 2503,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# Set the EXCLUDE_FROM_ALL target property if required.\r\n",
        "Line" : 2516,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# The 'complete' step depends on all other steps and creates a\r\n\n# 'done' mark.  A dependent external project's 'configure' step\r\n\n# depends on the 'done' mark so that it rebuilds when this project\r\n\n# rebuilds.  It is important that 'done' is not the output of any\r\n\n# custom command so that CMake does not propagate build rules to\r\n\n# other external project targets, which may cause problems during\r\n\n# parallel builds.  However, the Ninja generator needs to see the entire\r\n\n# dependency graph, and can cope with custom commands belonging to\r\n\n# multiple targets, so we add the 'done' mark as an output for Ninja only.\r\n",
        "Line" : 2522,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# Depend on other external projects (target-level).\r\n",
        "Line" : 2547,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# Set up custom build steps based on the target properties.\r\n\n# Each step depends on the previous one.\r\n\n#\r\n\n# The target depends on the output of the final step.\r\n\n# (Already set up above in the DEPENDS of the add_custom_target command.)\r\n\n#\r\n",
        "Line" : 2553,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Test is special in that it might depend on build, or it might depend\r\n\n# on install.\r\n\n#\r\n",
        "Line" : 2567,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 78
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FLTKCompatibility.cmake" : {
      "ObjectId" : "7f07243bfa614eb62ba5d41f336d295592e5957e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FeatureSummary.cmake" : {
      "ObjectId" : "f82c26e72539fdb5ae35bdd24da32da91e2c89dd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nFeatureSummary\r\n--------------\r\n\r\nFunctions for generating a summary of enabled/disabled features.\r\n\r\nThese functions can be used to generate a summary of enabled and disabled\r\npackages and/or feature for a build tree such as::\r\n\r\n    -- The following OPTIONAL packages have been found:\r\n    LibXml2 (required version >= 2.4), XML processing lib, <http://xmlsoft.org>\r\n       * Enables HTML-import in MyWordProcessor\r\n       * Enables odt-export in MyWordProcessor\r\n    PNG, A PNG image library., <http://www.libpng.org/pub/png/>\r\n       * Enables saving screenshots\r\n    -- The following OPTIONAL packages have not been found:\r\n    Lua51, The Lua scripting language., <http://www.lua.org>\r\n       * Enables macros in MyWordProcessor\r\n    Foo, Foo provides cool stuff.\r\n\r\nGlobal Properties\r\n^^^^^^^^^^^^^^^^^\r\n\r\n.. variable:: FeatureSummary_PKG_TYPES\r\n\r\nThe global property :variable:`FeatureSummary_PKG_TYPES` defines the type of\r\npackages used by `FeatureSummary`.\r\n\r\nThe order in this list is important, the first package type in the list is the\r\nleast important, the last is the most important. the of a package can only be\r\nchanged to higher types.\r\n\r\nThe default package types are , ``RUNTIME``, ``OPTIONAL``, ``RECOMMENDED`` and\r\n``REQUIRED``, and their importance is\r\n``RUNTIME < OPTIONAL < RECOMMENDED < REQUIRED``.\r\n\r\n\r\n.. variable:: FeatureSummary_REQUIRED_PKG_TYPES\r\n\r\nThe global property :variable:`FeatureSummary_REQUIRED_PKG_TYPES` defines which\r\npackage types are required.\r\n\r\nIf one or more package in this categories has not been found, CMake will abort\r\nwhen calling :command:`feature_summary` with the\r\n'FATAL_ON_MISSING_REQUIRED_PACKAGES' option enabled.\r\n\r\nThe default value for this global property is ``REQUIRED``.\r\n\r\n\r\n.. variable:: FeatureSummary_DEFAULT_PKG_TYPE\r\n\r\nThe global property :variable:`FeatureSummary_DEFAULT_PKG_TYPE` defines which\r\npackage type is the default one.\r\nWhen calling :command:`feature_summary`, if the user did not set the package type\r\nexplicitly, the package will be assigned to this category.\r\n\r\nThis value must be one of the types defined in the\r\n:variable:`FeatureSummary_PKG_TYPES` global property unless the package type\r\nis set for all the packages.\r\n\r\nThe default value for this global property is ``OPTIONAL``.\r\n\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#[=======================================================================[.rst:\r\n\r\nFunctions\r\n^^^^^^^^^\r\n\r\n#]=======================================================================]",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# does this package belong to the type we currently want to list ?\r\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# check whether the current feature/package should be in the output depending on whether it was QUIET or not\r\n",
        "Line" : 135,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# skip QUIET packages, except if they are REQUIRED or INCLUDE_QUIET_PACKAGES has been set\r\n",
        "Line" : 138,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#[=======================================================================[.rst:\r\n.. command:: feature_summary\r\n\r\n  ::\r\n\r\n    feature_summary( [FILENAME <file>]\r\n                     [APPEND]\r\n                     [VAR <variable_name>]\r\n                     [INCLUDE_QUIET_PACKAGES]\r\n                     [FATAL_ON_MISSING_REQUIRED_PACKAGES]\r\n                     [DESCRIPTION \"<description>\"]\r\n                     [QUIET_ON_EMPTY]\r\n                     WHAT (ALL\r\n                          | PACKAGES_FOUND | PACKAGES_NOT_FOUND\r\n                          | <TYPE>_PACKAGES_FOUND | <TYPE>_PACKAGES_NOT_FOUND\r\n                          | ENABLED_FEATURES | DISABLED_FEATURES)\r\n                   )\r\n\r\n  The ``feature_summary()`` macro can be used to print information about\r\n  enabled or disabled packages or features of a project.  By default,\r\n  only the names of the features/packages will be printed and their\r\n  required version when one was specified.  Use ``set_package_properties()``\r\n  to add more useful information, like e.g.  a download URL for the\r\n  respective package or their purpose in the project.\r\n\r\n  The ``WHAT`` option is the only mandatory option.  Here you specify what\r\n  information will be printed:\r\n\r\n  ``ALL``\r\n   print everything\r\n  ``ENABLED_FEATURES``\r\n   the list of all features which are enabled\r\n  ``DISABLED_FEATURES``\r\n   the list of all features which are disabled\r\n  ``PACKAGES_FOUND``\r\n   the list of all packages which have been found\r\n  ``PACKAGES_NOT_FOUND``\r\n   the list of all packages which have not been found\r\n\r\n  For each package type ``<TYPE>`` defined by the\r\n  :variable:`FeatureSummary_PKG_TYPES` global property, the following\r\n  information can also be used:\r\n\r\n  ``<TYPE>_PACKAGES_FOUND``\r\n   only those packages which have been found which have the type <TYPE>\r\n  ``<TYPE>_PACKAGES_NOT_FOUND``\r\n   only those packages which have not been found which have the type <TYPE>\r\n\r\n  With the exception of the ``ALL`` value, these values can be combined\r\n  in order to customize the output. For example:\r\n\r\n  .. code-block:: cmake\r\n\r\n    feature_summary(WHAT ENABLED_FEATURES DISABLED_FEATURES)\r\n\r\n  If a ``FILENAME`` is given, the information is printed into this file.  If\r\n  ``APPEND`` is used, it is appended to this file, otherwise the file is\r\n  overwritten if it already existed.  If the VAR option is used, the\r\n  information is \"printed\" into the specified variable.  If ``FILENAME`` is\r\n  not used, the information is printed to the terminal.  Using the\r\n  ``DESCRIPTION`` option a description or headline can be set which will be\r\n  printed above the actual content.\r\n  If ``INCLUDE_QUIET_PACKAGES`` is given, packages which have been searched with\r\n  ``find_package(... QUIET)`` will also be listed. By default they are skipped.\r\n  If ``FATAL_ON_MISSING_REQUIRED_PACKAGES`` is given, CMake will abort if a\r\n  package which is marked as one of the package types listed in the\r\n  :variable:`FeatureSummary_REQUIRED_PKG_TYPES` global property has not been\r\n  found.\r\n  The default value for the :variable:`FeatureSummary_REQUIRED_PKG_TYPES` global\r\n  property is ``REQUIRED``.\r\n\r\n  The :variable:`FeatureSummary_DEFAULT_PKG_TYPE` global property can be\r\n  modified to change the default package type assigned when not explicitly\r\n  assigned by the user.\r\n\r\n  If the ``QUIET_ON_EMPTY`` option is used, if only one type of package was\r\n  requested, and no packages belonging to that category were found, then no\r\n  output (including the ``DESCRIPTION``) is printed or added to the ``VAR``\r\n  variable.\r\n\r\n  Example 1, append everything to a file:\r\n\r\n  .. code-block:: cmake\r\n\r\n   include(FeatureSummary)\r\n   feature_summary(WHAT ALL\r\n                   FILENAME ${CMAKE_BINARY_DIR}/all.log APPEND)\r\n\r\n  Example 2, print the enabled features into the variable\r\n  enabledFeaturesText, including QUIET packages:\r\n\r\n  .. code-block:: cmake\r\n\r\n   include(FeatureSummary)\r\n   feature_summary(WHAT ENABLED_FEATURES\r\n                   INCLUDE_QUIET_PACKAGES\r\n                   DESCRIPTION \"Enabled Features:\"\r\n                   VAR enabledFeaturesText)\r\n   message(STATUS \"${enabledFeaturesText}\")\r\n\r\n  Example 3, change default package types and print only the categories that\r\n  are not empty:\r\n\r\n  .. code-block:: cmake\r\n\r\n   include(FeatureSummary)\r\n   set_property(GLOBAL APPEND PROPERTY FeatureSummary_PKG_TYPES BUILD)\r\n   find_package(FOO)\r\n   set_package_properties(FOO PROPERTIES TYPE BUILD)\r\n   feature_summary(WHAT BUILD_PACKAGES_FOUND\r\n                   Description \"Build tools found:\"\r\n                   QUIET_ON_EMPTY)\r\n   feature_summary(WHAT BUILD_PACKAGES_NOT_FOUND\r\n                   Description \"Build tools not found:\"\r\n                   QUIET_ON_EMPTY)\r\n\r\n#]=======================================================================]",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CMAKE_PARSE_ARGUMENTS(<prefix> <options> <one_value_keywords> <multi_value_keywords> args...)\r\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#[=======================================================================[.rst:\r\n.. command:: set_package_properties\r\n\r\n  ::\r\n\r\n    set_package_properties(<name> PROPERTIES\r\n                           [ URL <url> ]\r\n                           [ DESCRIPTION <description> ]\r\n                           [ TYPE (RUNTIME|OPTIONAL|RECOMMENDED|REQUIRED) ]\r\n                           [ PURPOSE <purpose> ]\r\n                          )\r\n\r\n  Use this macro to set up information about the named package, which\r\n  can then be displayed via FEATURE_SUMMARY().  This can be done either\r\n  directly in the Find-module or in the project which uses the module\r\n  after the find_package() call.  The features for which information can\r\n  be set are added automatically by the find_package() command.\r\n\r\n  ``URL <url>``\r\n    This should be the homepage of the package, or something similar.\r\n    Ideally this is set already directly in the Find-module.\r\n\r\n  ``DESCRIPTION <description>``\r\n    A short description what that package is, at most one sentence.\r\n    Ideally this is set already directly in the Find-module.\r\n\r\n  ``TYPE <type>``\r\n    What type of dependency has the using project on that package.\r\n    Default is ``OPTIONAL``.  In this case it is a package which can be used\r\n    by the project when available at buildtime, but it also work without.\r\n    ``RECOMMENDED`` is similar to ``OPTIONAL``, i.e.  the project will build if\r\n    the package is not present, but the functionality of the resulting\r\n    binaries will be severly limited.  If a ``REQUIRED`` package is not\r\n    available at buildtime, the project may not even build.  This can be\r\n    combined with the ``FATAL_ON_MISSING_REQUIRED_PACKAGES`` argument for\r\n    ``feature_summary()``.  Last, a ``RUNTIME`` package is a package which is\r\n    actually not used at all during the build, but which is required for\r\n    actually running the resulting binaries.  So if such a package is\r\n    missing, the project can still be built, but it may not work later on.\r\n    If ``set_package_properties()`` is called multiple times for the same\r\n    package with different TYPEs, the ``TYPE`` is only changed to higher\r\n    TYPEs (``RUNTIME < OPTIONAL < RECOMMENDED < REQUIRED``), lower TYPEs are\r\n    ignored.  The ``TYPE`` property is project-specific, so it cannot be set\r\n    by the Find-module, but must be set in the project.\r\n    Type accepted can be changed by setting the\r\n    :variable:`FeatureSummary_PKG_TYPES` global property.\r\n\r\n  ``PURPOSE <purpose>``\r\n    This describes which features this package enables in the\r\n    project, i.e.  it tells the user what functionality he gets in the\r\n    resulting binaries.  If set_package_properties() is called multiple\r\n    times for a package, all PURPOSE properties are appended to a list of\r\n    purposes of the package in the project.  As the TYPE property, also\r\n    the PURPOSE property is project-specific, so it cannot be set by the\r\n    Find-module, but must be set in the project.\r\n\r\n  Example for setting the info for a package:\r\n\r\n  .. code-block:: cmake\r\n\r\n    find_package(LibXml2)\r\n    set_package_properties(LibXml2 PROPERTIES\r\n                           DESCRIPTION \"A XML processing library.\"\r\n                           URL \"http://xmlsoft.org/\")\r\n    # or\r\n    set_package_properties(LibXml2 PROPERTIES\r\n                           TYPE RECOMMENDED\r\n                           PURPOSE \"Enables HTML-import in MyWordProcessor\")\r\n    # or\r\n    set_package_properties(LibXml2 PROPERTIES\r\n                           TYPE OPTIONAL\r\n                           PURPOSE \"Enables odt-export in MyWordProcessor\")\r\n\r\n    find_package(DBUS)\r\n    set_package_properties(DBUS PROPERTIES\r\n      TYPE RUNTIME\r\n      PURPOSE \"Necessary to disable the screensaver during a presentation\")\r\n#]=======================================================================]",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# none\r\n",
        "Line" : 514,
        "CharPositionInLine" : 16
      },
      "10" : {
        "Text" : "# none\r\n",
        "Line" : 516,
        "CharPositionInLine" : 23
      },
      "11" : {
        "Text" : "# handle the PURPOSE: use APPEND, since there can be multiple purposes for one package inside a project\r\n",
        "Line" : 544,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# handle the TYPE\r\n",
        "Line" : 552,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Supported types are listed in FeatureSummary_PKG_TYPES according to their priority\r\n",
        "Line" : 554,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# make sure a previously set TYPE is not overridden with a lower new TYPE:\r\n",
        "Line" : 567,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#[=======================================================================[.rst:\r\n.. command:: add_feature_info\r\n\r\n  ::\r\n\r\n    add_feature_info(<name> <enabled> <description>)\r\n\r\n  Use this macro to add information about a feature with the given ``<name>``.\r\n  ``<enabled>`` contains whether this feature is enabled or not. It can be a\r\n  variable or a list of conditions.\r\n  ``<description>`` is a text describing the feature.  The information can\r\n  be displayed using ``feature_summary()`` for ``ENABLED_FEATURES`` and\r\n  ``DISABLED_FEATURES`` respectively.\r\n\r\n  Example for setting the info for a feature:\r\n\r\n  .. code-block:: cmake\r\n\r\n     option(WITH_FOO \"Help for foo\" ON)\r\n     add_feature_info(Foo WITH_FOO \"The Foo feature provides very cool stuff.\")\r\n#]=======================================================================]",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The stuff below is only kept for compatibility\r\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#[=======================================================================[.rst:\r\nLegacy Macros\r\n^^^^^^^^^^^^^\r\n\r\nThe following macros are provided for compatibility with previous\r\nCMake versions:\r\n\r\n.. command:: set_package_info\r\n\r\n  ::\r\n\r\n    set_package_info(<name> <description> [ <url> [<purpose>] ])\r\n\r\n  Use this macro to set up information about the named package, which\r\n  can then be displayed via ``feature_summary()``.  This can be done either\r\n  directly in the Find-module or in the project which uses the module\r\n  after the :command:`find_package` call.  The features for which information\r\n  can be set are added automatically by the ``find_package()`` command.\r\n#]=======================================================================]",
        "Line" : 618,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#[=======================================================================[.rst:\r\n.. command:: set_feature_info\r\n\r\n  ::\r\n\r\n    set_feature_info(<name> <description> [<url>])\r\n\r\n  Does the same as::\r\n\r\n    set_package_info(<name> <description> <url>)\r\n#]=======================================================================]",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#[=======================================================================[.rst:\r\n.. command:: print_enabled_features\r\n\r\n  ::\r\n\r\n    print_enabled_features()\r\n\r\n  Does the same as\r\n\r\n  .. code-block:: cmake\r\n\r\n    feature_summary(WHAT ENABLED_FEATURES DESCRIPTION \"Enabled features:\")\r\n#]=======================================================================]",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#[=======================================================================[.rst:\r\n.. command:: print_disabled_features\r\n\r\n  ::\r\n\r\n    print_disabled_features()\r\n\r\n  Does the same as\r\n\r\n  .. code-block:: cmake\r\n\r\n    feature_summary(WHAT DISABLED_FEATURES DESCRIPTION \"Disabled features:\")\r\n#]=======================================================================]",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindALSA.cmake" : {
      "ObjectId" : "1d9319c61ab0ffc26a9ac22efc5652e950a594bb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindALSA\r\n\n# --------\r\n\n#\r\n\n# Find alsa\r\n\n#\r\n\n# Find the alsa libraries (asound)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   This module defines the following variables:\r\n\n#      ALSA_FOUND       - True if ALSA_INCLUDE_DIR & ALSA_LIBRARY are found\r\n\n#      ALSA_LIBRARIES   - Set when ALSA_LIBRARY is found\r\n\n#      ALSA_INCLUDE_DIRS - Set when ALSA_INCLUDE_DIR is found\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      ALSA_INCLUDE_DIR - where to find asoundlib.h, etc.\r\n\n#      ALSA_LIBRARY     - the asound library\r\n\n#      ALSA_VERSION_STRING - the version of alsa found (since CMake 2.8.8)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindASPELL.cmake" : {
      "ObjectId" : "cfc8d1052799ec66c525e42753f13cce7aa5cc27",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindASPELL\r\n\n# ----------\r\n\n#\r\n\n# Try to find ASPELL\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ASPELL_FOUND - system has ASPELL\r\n\n#   ASPELL_EXECUTABLE - the ASPELL executable\r\n\n#   ASPELL_INCLUDE_DIR - the ASPELL include directory\r\n\n#   ASPELL_LIBRARIES - The libraries needed to use ASPELL\r\n\n#   ASPELL_DEFINITIONS - Compiler switches required for using ASPELL\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindAVIFile.cmake" : {
      "ObjectId" : "140b0ca8d7d3831d5bc2c13d1ccc716a01b68e73",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindAVIFile\r\n\n# -----------\r\n\n#\r\n\n# Locate AVIFILE library and include paths\r\n\n#\r\n\n# AVIFILE (http://avifile.sourceforge.net/)is a set of libraries for\r\n\n# i386 machines to use various AVI codecs.  Support is limited beyond\r\n\n# Linux.  Windows provides native AVI support, and so doesn't need this\r\n\n# library.  This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   AVIFILE_INCLUDE_DIR, where to find avifile.h , etc.\r\n\n#   AVIFILE_LIBRARIES, the libraries to link against\r\n\n#   AVIFILE_DEFINITIONS, definitions to use when compiling\r\n\n#   AVIFILE_FOUND, If false, don't try to use AVIFILE\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindArmadillo.cmake" : {
      "ObjectId" : "2814f29991b00617666aeff0d60a2ad3d55c5e78",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindArmadillo\r\n\n# -------------\r\n\n#\r\n\n# Find Armadillo\r\n\n#\r\n\n# Find the Armadillo C++ library\r\n\n#\r\n\n# Using Armadillo:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   find_package(Armadillo REQUIRED)\r\n\n#   include_directories(${ARMADILLO_INCLUDE_DIRS})\r\n\n#   add_executable(foo foo.cc)\r\n\n#   target_link_libraries(foo ${ARMADILLO_LIBRARIES})\r\n\n#\r\n\n# This module sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ARMADILLO_FOUND - set to true if the library is found\r\n\n#   ARMADILLO_INCLUDE_DIRS - list of required include directories\r\n\n#   ARMADILLO_LIBRARIES - list of libraries to be linked\r\n\n#   ARMADILLO_VERSION_MAJOR - major version number\r\n\n#   ARMADILLO_VERSION_MINOR - minor version number\r\n\n#   ARMADILLO_VERSION_PATCH - patch version number\r\n\n#   ARMADILLO_VERSION_STRING - version number as a string (ex: \"1.0.4\")\r\n\n#   ARMADILLO_VERSION_NAME - name of the version (ex: \"Antipodean Antileech\")\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# UNIX paths are standard, no need to write.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Extract version information from <armadillo>\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# WARNING: Early releases of Armadillo didn't have the arma_version.hpp file.\r\n\n# (e.g. v.0.9.8-1 in ubuntu maverick packages (2001-03-15))\r\n\n# If the file is missing, set all values to 0\r\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Read and parse armdillo version header file for version number\r\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# WARNING: The number of spaces before the version name is not one.\r\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# version_var fails with cmake < 2.8.4.\r\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Hide internal variables\r\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindBISON.cmake" : {
      "ObjectId" : "2afa173a9461cf9d0bca079110219237db319b48",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindBISON\r\n\n# ---------\r\n\n#\r\n\n# Find ``bison`` executable and provide a macro to generate custom build rules.\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ``BISON_EXECUTABLE``\r\n\n#   path to the ``bison`` program\r\n\n#\r\n\n# ``BISON_VERSION``\r\n\n#   version of ``bison``\r\n\n#\r\n\n# ``BISON_FOUND``\r\n\n#   true if the program was found\r\n\n#\r\n\n# The minimum required version of ``bison`` can be specified using the\r\n\n# standard CMake syntax, e.g.  ``find_package(BISON 2.1.3)``.\r\n\n#\r\n\n# If ``bison`` is found, the module defines the macro::\r\n\n#\r\n\n#   BISON_TARGET(<Name> <YaccInput> <CodeOutput>\r\n\n#                [COMPILE_FLAGS <flags>]\r\n\n#                [DEFINES_FILE <file>]\r\n\n#                [VERBOSE [<file>]]\r\n\n#                [REPORT_FILE <file>]\r\n\n#                )\r\n\n#\r\n\n# which will create a custom rule to generate a parser.  ``<YaccInput>`` is\r\n\n# the path to a yacc file.  ``<CodeOutput>`` is the name of the source file\r\n\n# generated by bison.  A header file is also be generated, and contains\r\n\n# the token list.\r\n\n#\r\n\n# The options are:\r\n\n#\r\n\n# ``COMPILE_FLAGS <flags>``\r\n\n#   Specify flags to be added to the ``bison`` command line.\r\n\n#\r\n\n# ``DEFINES_FILE <file>``\r\n\n#   Specify a non-default header ``<file>`` to be generated by ``bison``.\r\n\n#\r\n\n# ``VERBOSE [<file>]``\r\n\n#   Tell ``bison`` to write a report file of the grammar and parser.\r\n\n#   If ``<file>`` is given, it specifies path the report file is copied to.\r\n\n#   ``[<file>]`` is left for backward compatibility of this module.\r\n\n#   Use ``VERBOSE REPORT_FILE <file>``.\r\n\n#\r\n\n# ``REPORT_FILE <file>``\r\n\n#   Specify a non-default report ``<file>``, if generated.\r\n\n#\r\n\n# The macro defines the following variables:\r\n\n#\r\n\n# ``BISON_<Name>_DEFINED``\r\n\n#   true is the macro ran successfully\r\n\n#\r\n\n# ``BISON_<Name>_INPUT``\r\n\n#   The input source file, an alias for <YaccInput>\r\n\n#\r\n\n# ``BISON_<Name>_OUTPUT_SOURCE``\r\n\n#   The source file generated by bison\r\n\n#\r\n\n# ``BISON_<Name>_OUTPUT_HEADER``\r\n\n#   The header file generated by bison\r\n\n#\r\n\n# ``BISON_<Name>_OUTPUTS``\r\n\n#   All files generated by bison including the source, the header and the report\r\n\n#\r\n\n# ``BISON_<Name>_COMPILE_FLAGS``\r\n\n#   Options used in the ``bison`` command line\r\n\n#\r\n\n# Example usage:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#   find_package(BISON)\r\n\n#   BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp\r\n\n#                DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/parser.h)\r\n\n#   add_executable(Foo main.cpp ${BISON_MyParser_OUTPUTS})\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the bison commands should be executed with the C locale, otherwise\r\n\n# the message (which are parsed) may be translated\r\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Bison++\r\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# GNU Bison\r\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# internal macro\r\n\n# sets BISON_TARGET_cmdopt\r\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# internal macro\r\n\n# sets BISON_TARGET_output_header and BISON_TARGET_cmdopt\r\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# default header path generated by bison (see option -d)\r\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# internal macro\r\n\n# sets BISON_TARGET_verbose_file and BISON_TARGET_cmdopt\r\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# internal macro\r\n\n# adds a custom command and sets\r\n\n#   BISON_TARGET_cmdopt, BISON_TARGET_verbose_file, BISON_TARGET_extraoutputs\r\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#============================================================\r\n\n# BISON_TARGET (public macro)\r\n\n#============================================================\r\n\n#\r\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Parsing parameters\r\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# [VERBOSE [<file>] hack: <file> is non-multi value by usage\r\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# [VERBOSE [<file>]] is used with no argument or is not used\r\n",
        "Line" : 217,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# VERBOSE is used without <file>\r\n",
        "Line" : 221,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# define target variables\r\n",
        "Line" : 236,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#\r\n\n#============================================================\r\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindBLAS.cmake" : {
      "ObjectId" : "a625ed6c6f9b346f522cfaa374be4b7f9f75855f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindBLAS\r\n\n# --------\r\n\n#\r\n\n# Find BLAS library\r\n\n#\r\n\n# This module finds an installed fortran library that implements the\r\n\n# BLAS linear-algebra interface (see http://www.netlib.org/blas/).  The\r\n\n# list of libraries searched for is taken from the autoconf macro file,\r\n\n# acx_blas.m4 (distributed at\r\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_blas.html).\r\n\n#\r\n\n# This module sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   BLAS_FOUND - set to true if a library implementing the BLAS interface\r\n\n#     is found\r\n\n#   BLAS_LINKER_FLAGS - uncached list of required linker flags (excluding -l\r\n\n#     and -L).\r\n\n#   BLAS_LIBRARIES - uncached list of libraries (using full path name) to\r\n\n#     link against to use BLAS\r\n\n#   BLAS95_LIBRARIES - uncached list of libraries (using full path name)\r\n\n#     to link against to use BLAS95 interface\r\n\n#   BLAS95_FOUND - set to true if a library implementing the BLAS f95 interface\r\n\n#     is found\r\n\n#   BLA_STATIC  if set on this determines what kind of linkage we do (static)\r\n\n#   BLA_VENDOR  if set checks only the specified vendor, if not set checks\r\n\n#      all the possibilities\r\n\n#   BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\r\n\n#\r\n\n# List of vendors (BLA_VENDOR) valid in this module:\r\n\n#\r\n\n# * Goto\r\n\n# * OpenBLAS\r\n\n# * ATLAS PhiPACK\r\n\n# * CXML\r\n\n# * DXML\r\n\n# * SunPerf\r\n\n# * SCSL\r\n\n# * SGIMATH\r\n\n# * IBMESSL\r\n\n# * Intel10_32 (intel mkl v10 32 bit)\r\n\n# * Intel10_64lp (intel mkl v10 64 bit, lp thread model, lp64 model)\r\n\n# * Intel10_64lp_seq (intel mkl v10 64 bit, sequential code, lp64 model)\r\n\n# * Intel (older versions of mkl 32 and 64 bit)\r\n\n# * ACML\r\n\n# * ACML_MP\r\n\n# * ACML_GPU\r\n\n# * Apple\r\n\n# * NAS\r\n\n# * Generic\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#   C/CXX should be enabled to use Intel mkl\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check the language being used\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\r\n\n# given by _list.  If the combination is found, this macro checks (using the\r\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\r\n\n# combination using the name of a routine given by _name using the linker\r\n\n# flags given by _flags.  If the combination of libraries is found and passes\r\n\n# the link test, LIBRARIES is set to the list of complete library paths that\r\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\r\n\n# are generated internally and marked advanced by this macro.\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\r\n",
        "Line" : 122,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Test this combination of libraries.\r\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#  message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\r\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\r\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# gotoblas (http://www.tacc.utexas.edu/tacc-projects/gotoblas2)\r\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# OpenBLAS (http://www.openblas.net)\r\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)\r\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)\r\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# BLAS in Alpha CXML library?\r\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# BLAS in Alpha DXML library? (now called CXML, see above)\r\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# BLAS in Sun Performance library?\r\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# BLAS in SCSL library?  (SGI/Cray Scientific Library)\r\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# BLAS in SGIMATH library?\r\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# BLAS in IBM ESSL library? (requires generic BLAS lib, too)\r\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#BLAS in acml library?\r\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# try to find acml in \"standard\" paths\r\n",
        "Line" : 314,
        "CharPositionInLine" : 3
      },
      "21" : {
        "Text" : "# 32 bit builds not supported on Open64 but for code simplicity\r\n\n# We'll just use the same directory twice\r\n",
        "Line" : 348,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Either acml or acml_mp should be in LD_LIBRARY_PATH but not both\r\n",
        "Line" : 412,
        "CharPositionInLine" : 1
      },
      "23" : {
        "Text" : "# ACML\r\n",
        "Line" : 443,
        "CharPositionInLine" : 9
      },
      "24" : {
        "Text" : "# Apple BLAS library?\r\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Generic BLAS library?\r\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#BLAS in intel mkl 10 library? (em64t 64bit)\r\n",
        "Line" : 485,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\r\n",
        "Line" : 509,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Add threading/sequential libs\r\n",
        "Line" : 520,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# old version\r\n",
        "Line" : 527,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# mkl >= 10.3\r\n",
        "Line" : 530,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# Cartesian product of the above\r\n",
        "Line" : 535,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# old version\r\n",
        "Line" : 548,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# mkl >= 10.3\r\n",
        "Line" : 552,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Find the main file (32-bit or 64-bit)\r\n",
        "Line" : 576,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# Add threading/sequential libs\r\n",
        "Line" : 587,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# old version\r\n",
        "Line" : 590,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# mkl >= 10.3\r\n",
        "Line" : 593,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# Cartesian product of the above\r\n",
        "Line" : 602,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# old version\r\n",
        "Line" : 616,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# mkl >= 10.3\r\n",
        "Line" : 620,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "#older vesions of intel mkl libs\r\n",
        "Line" : 634,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 42
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindBZip2.cmake" : {
      "ObjectId" : "2fbe086c1e262b3e94bd6bfdb2d3308813e48862",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindBZip2\r\n\n# ---------\r\n\n#\r\n\n# Try to find BZip2\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines :prop_tgt:`IMPORTED` target ``BZip2::BZip2``, if\r\n\n# BZip2 has been found.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   BZIP2_FOUND - system has BZip2\r\n\n#   BZIP2_INCLUDE_DIR - the BZip2 include directory\r\n\n#   BZIP2_LIBRARIES - Link these to use BZip2\r\n\n#   BZIP2_NEED_PREFIX - this is set if the functions are prefixed with BZ2_\r\n\n#   BZIP2_VERSION_STRING - the version of BZip2 found (since CMake 2.8.8)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindBacktrace.cmake" : {
      "ObjectId" : "4cb068b068fd78ac5a3917b9b7e0051f36846d0e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindBacktrace\r\n\n# -------------\r\n\n#\r\n\n# Find provider for backtrace(3).\r\n\n#\r\n\n# Checks if OS supports backtrace(3) via either libc or custom library.\r\n\n# This module defines the following variables:\r\n\n#\r\n\n# ``Backtrace_HEADER``\r\n\n#   The header file needed for backtrace(3). Cached.\r\n\n#   Could be forcibly set by user.\r\n\n# ``Backtrace_INCLUDE_DIRS``\r\n\n#   The include directories needed to use backtrace(3) header.\r\n\n# ``Backtrace_LIBRARIES``\r\n\n#   The libraries (linker flags) needed to use backtrace(3), if any.\r\n\n# ``Backtrace_FOUND``\r\n\n#   Is set if and only if backtrace(3) support detected.\r\n\n#\r\n\n# The following cache variables are also available to set or use:\r\n\n#\r\n\n# ``Backtrace_LIBRARY``\r\n\n#   The external library providing backtrace, if any.\r\n\n# ``Backtrace_INCLUDE_DIR``\r\n\n#   The directory holding the backtrace(3) header.\r\n\n#\r\n\n# Typical usage is to generate of header file using configure_file() with the\r\n\n# contents like the following::\r\n\n#\r\n\n#  #cmakedefine01 Backtrace_FOUND\r\n\n#  #if Backtrace_FOUND\r\n\n#  # include <${Backtrace_HEADER}>\r\n\n#  #endif\r\n\n#\r\n\n# And then reference that generated header file in actual source.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# List of variables to be provided to find_package_handle_standard_args()\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First, check if we already have backtrace(), e.g., in libc\r\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Avoid repeating the message() call below each time CMake is run.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check for external library, for non-glibc systems\r\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OpenBSD has libbacktrace renamed to libexecinfo\r\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# respect user wishes\r\n",
        "Line" : 76,
        "CharPositionInLine" : 15
      },
      "8" : {
        "Text" : "# Prepend list with library path as it's more common practice\r\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindBoost.cmake" : {
      "ObjectId" : "547469ead5d65589fb18ab91c865f5b625c35ca8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindBoost\r\n\n# ---------\r\n\n#\r\n\n# Find Boost include dirs and libraries\r\n\n#\r\n\n# Use this module by invoking find_package with the form::\r\n\n#\r\n\n#   find_package(Boost\r\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\r\n\n#     [REQUIRED]             # Fail with error if Boost is not found\r\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\r\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\r\n\n#\r\n\n# This module finds headers and requested component libraries OR a CMake\r\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\r\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\r\n\n# case results are reported in variables::\r\n\n#\r\n\n#   Boost_FOUND            - True if headers and requested libraries were found\r\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\r\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\r\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\r\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\r\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\r\n\n#                            target_link_libraries debug/optimized keywords)\r\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\r\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\r\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\r\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\r\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\r\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\r\n\n#                          - Pass to add_definitions() to have diagnostic\r\n\n#                            information about Boost's automatic linking\r\n\n#                            displayed during compilation\r\n\n#\r\n\n# This module reads hints about search locations from variables::\r\n\n#\r\n\n#   BOOST_ROOT             - Preferred installation prefix\r\n\n#    (or BOOSTROOT)\r\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\r\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\r\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\r\n\n#                            specified by these hint variables. Default is OFF.\r\n\n#   Boost_ADDITIONAL_VERSIONS\r\n\n#                          - List of Boost versions not known to this module\r\n\n#                            (Boost install locations may contain the version)\r\n\n#\r\n\n# and saves search results persistently in CMake cache entries::\r\n\n#\r\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\r\n\n#   Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\r\n\n#   Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\r\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\r\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\r\n\n#\r\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\r\n\n#\r\n\n#   Boost::boost                  - Target for header-only dependencies\r\n\n#                                   (Boost include directory)\r\n\n#   Boost::<C>                    - Target for specific component dependency\r\n\n#                                   (shared or static library); <C> is lower-\r\n\n#                                   case\r\n\n#   Boost::diagnostic_definitions - interface target to enable diagnostic\r\n\n#                                   information about Boost's automatic linking\r\n\n#                                   during compilation (adds BOOST_LIB_DIAGNOSTIC)\r\n\n#   Boost::disable_autolinking    - interface target to disable automatic\r\n\n#                                   linking with MSVC (adds BOOST_ALL_NO_LIB)\r\n\n#   Boost::dynamic_linking        - interface target to enable dynamic linking\r\n\n#                                   linking with MSVC (adds BOOST_ALL_DYN_LINK)\r\n\n#\r\n\n# Implicit dependencies such as Boost::filesystem requiring\r\n\n# Boost::system will be automatically detected and satisfied, even\r\n\n# if system is not specified when using find_package and if\r\n\n# Boost::system is not added to target_link_libraries.  If using\r\n\n# Boost::thread, then Thread::Thread will also be added automatically.\r\n\n#\r\n\n# It is important to note that the imported targets behave differently\r\n\n# than variables created by this module: multiple calls to\r\n\n# find_package(Boost) in the same directory or sub-directories with\r\n\n# different options (e.g. static or shared) will not override the\r\n\n# values of the targets created by the first call.\r\n\n#\r\n\n# Users may set these hints or results as cache entries.  Projects\r\n\n# should not read these entries directly but instead use the above\r\n\n# result variables.  Note that some hint names start in upper-case\r\n\n# \"BOOST\".  One may specify these as environment variables if they are\r\n\n# not specified as CMake variables or cache entries.\r\n\n#\r\n\n# This module first searches for the Boost header files using the above\r\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\r\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\r\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\r\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\r\n\n# and the library name configuration settings below.  It saves the\r\n\n# library directories in Boost_LIBRARY_DIR_DEBUG and\r\n\n# Boost_LIBRARY_DIR_RELEASE and individual library\r\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\r\n\n# When one changes settings used by previous searches in the same build\r\n\n# tree (excluding environment variables) this module discards previous\r\n\n# search results affected by the changes and searches again.\r\n\n#\r\n\n# Boost libraries come in many variants encoded in their file name.\r\n\n# Users or projects may tell this module which variant to find by\r\n\n# setting variables::\r\n\n#\r\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\r\n\n#                              libraries ('mt' tag).  Default is ON.\r\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\r\n\n#                              libraries.  Default is OFF.\r\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\r\n\n#                              libraries linked statically to the C++ runtime\r\n\n#                              ('s' tag).  Default is platform dependent.\r\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\r\n\n#                              libraries linked to the MS debug C++ runtime\r\n\n#                              ('g' tag).  Default is ON.\r\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\r\n\n#                              debug Python build ('y' tag). Default is OFF.\r\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\r\n\n#                              STLPort ('p' tag).  Default is OFF.\r\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\r\n\n#                            - Set to ON to use libraries compiled with\r\n\n#                              STLPort deprecated \"native iostreams\"\r\n\n#                              ('n' tag).  Default is OFF.\r\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\r\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\r\n\n#                              for the C++ compiler in use.  A list may be\r\n\n#                              used if multiple compatible suffixes should\r\n\n#                              be tested for, in decreasing order of\r\n\n#                              preference.\r\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\r\n\n#                              such as \"pthread\" or \"win32\".  Names with\r\n\n#                              and without this suffix will both be tried.\r\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\r\n\n#                              e.g. if set to \"myboost\", will search for\r\n\n#                              myboost_thread instead of boost_thread.\r\n\n#\r\n\n# Other variables one may set to control this module are::\r\n\n#\r\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\r\n\n#                              Please enable this before filing any bug report.\r\n\n#   Boost_DETAILED_FAILURE_MSG\r\n\n#                            - Set to ON to add detailed information to the\r\n\n#                              failure message even when the REQUIRED option\r\n\n#                              is not given to the find_package call.\r\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\r\n\n#                              libraries to assist with packaging.  For example,\r\n\n#                              the \"system\" component library may be resolved to\r\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\r\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\r\n\n#                              affect linking and should not be enabled unless\r\n\n#                              the user needs this information.\r\n\n#   Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\r\n\n#                              Boost_LIBRARY_DIR_DEBUG.\r\n\n#\r\n\n# On Visual Studio and Borland compilers Boost headers request automatic\r\n\n# linking to corresponding libraries.  This requires matching libraries\r\n\n# to be linked explicitly or available in the link library search path.\r\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\r\n\n# dynamic linking.  Boost automatic linking typically requests static\r\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\r\n\n#\r\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\r\n\n#\r\n\n# to ask Boost to report information about automatic linking requests.\r\n\n#\r\n\n# Example to find Boost headers only::\r\n\n#\r\n\n#   find_package(Boost 1.36.0)\r\n\n#   if(Boost_FOUND)\r\n\n#     include_directories(${Boost_INCLUDE_DIRS})\r\n\n#     add_executable(foo foo.cc)\r\n\n#   endif()\r\n\n#\r\n\n# Example to find Boost libraries and use imported targets::\r\n\n#\r\n\n#   find_package(Boost 1.56 REQUIRED COMPONENTS\r\n\n#                date_time filesystem iostreams)\r\n\n#   add_executable(foo foo.cc)\r\n\n#   target_link_libraries(foo Boost::date_time Boost::filesystem\r\n\n#                             Boost::iostreams)\r\n\n#\r\n\n# Example to find Boost headers and some *static* libraries::\r\n\n#\r\n\n#   set(Boost_USE_STATIC_LIBS        ON) # only find static libs\r\n\n#   set(Boost_USE_MULTITHREADED      ON)\r\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\r\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\r\n\n#   if(Boost_FOUND)\r\n\n#     include_directories(${Boost_INCLUDE_DIRS})\r\n\n#     add_executable(foo foo.cc)\r\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\r\n\n#   endif()\r\n\n#\r\n\n# Boost CMake\r\n\n# ^^^^^^^^^^^\r\n\n#\r\n\n# If Boost was built using the boost-cmake project it provides a package\r\n\n# configuration file for use with find_package's Config mode.  This\r\n\n# module looks for the package configuration file called\r\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\r\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\r\n\n# and this module returns with no further action.  See documentation of\r\n\n# the Boost CMake package configuration for details on what it provides.\r\n\n#\r\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\r\n\n# Before we go searching, check whether boost-cmake is available, unless the\r\n\n# user specifically asked NOT to search for boost-cmake.\r\n\n#\r\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\r\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\r\n\n#\r\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\r\n\n# since these are more conventional for Boost.\r\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\r\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\r\n\n# need to delegate them to this find_package call.\r\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\r\n\n# Otherwise let the rest of the module try to find it.\r\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#-------------------------------------------------------------------------------\r\n\n#  FindBoost functions & macros\r\n\n#\r\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "############################################\r\n\n#\r\n\n# Check the existence of the libraries.\r\n\n#\r\n\n############################################\r\n\n# This macro was taken directly from the FindQt4.cmake file that is included\r\n\n# with the CMake distribution. This is NOT my work. All work was done by the\r\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\r\n\n# made to remove references to Qt and make this file more generally applicable\r\n\n# And ELSE/ENDIF pairs were removed for readability.\r\n\n#########################################################################\r\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if the generator supports configuration types then set\r\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\r\n",
        "Line" : 267,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\r\n\n# then just use the release libraries\r\n",
        "Line" : 272,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# FIXME: This probably should be set for both cases\r\n",
        "Line" : 276,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\r\n",
        "Line" : 280,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\r\n",
        "Line" : 287,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\r\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Make variables changeable to the advanced user\r\n",
        "Line" : 305,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Detect changes in used variables.\r\n\n# Compares the current variable value with the last one.\r\n\n# In short form:\r\n\n# v != v_LAST                      -> CHANGED = 1\r\n\n# v is defined, v_LAST not         -> CHANGED = 1\r\n\n# v is not defined, but v_LAST is  -> CHANGED = 1\r\n\n# otherwise                        -> CHANGED = 0\r\n\n# CHANGED is returned in variable named ${changed_var}\r\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\r\n\n# Find the given library (var).\r\n\n# Use 'build_type' to support different lib paths for RELEASE or DEBUG builds\r\n\n#\r\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\r\n",
        "Line" : 351,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\r\n",
        "Line" : 357,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is known then search only there.\r\n",
        "Line" : 361,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#-------------------------------------------------------------------------------\r\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\r\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\r\n\n# version with a regex.\r\n\n#\r\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\r\n\n# Take a list of libraries with \"thread\" in it\r\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\r\n\n# at the front of the list\r\n\n#\r\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\r\n\n# If a library is found, replace its cache entry with its REALPATH\r\n\n#\r\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\r\n\n# Returns the guess by setting the variable pointed to by _ret\r\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Good luck!\r\n",
        "Line" : 449,
        "CharPositionInLine" : 59
      },
      "26" : {
        "Text" : "# yes, this is correct\r\n",
        "Line" : 450,
        "CharPositionInLine" : 34
      },
      "27" : {
        "Text" : "# VS 6.0 Good luck!\r\n",
        "Line" : 451,
        "CharPositionInLine" : 11
      },
      "28" : {
        "Text" : "# yes, this is correct\r\n",
        "Line" : 452,
        "CharPositionInLine" : 34
      },
      "29" : {
        "Text" : "# no GCC version encoding prior to 1.34\r\n",
        "Line" : 462,
        "CharPositionInLine" : 36
      },
      "30" : {
        "Text" : "# no GCC version encoding prior to 1.34\r\n",
        "Line" : 470,
        "CharPositionInLine" : 36
      },
      "31" : {
        "Text" : "# Determine which version of GCC we have.\r\n",
        "Line" : 473,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\r\n\n# on Mac OS X/Darwin is \"xgcc\".\r\n",
        "Line" : 477,
        "CharPositionInLine" : 14
      },
      "33" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\r\n\n# the Mac OS X/Darwin version of GCC.\r\n",
        "Line" : 481,
        "CharPositionInLine" : 14
      },
      "34" : {
        "Text" : "# We don't know the Boost version, so assume it's\r\n\n# pre-1.36.0.\r\n",
        "Line" : 486,
        "CharPositionInLine" : 12
      },
      "35" : {
        "Text" : "# TODO at least Boost_DEBUG here?\r\n",
        "Line" : 496,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#\r\n\n# Get component dependencies.  Requires the dependencies to have been\r\n\n# defined for the Boost release version.\r\n\n#\r\n\n# component - the component to check\r\n\n# _ret - list of library dependencies\r\n\n#\r\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Note: to add a new Boost release, run\r\n\n#\r\n\n#   % cmake -DBOOST_DIR=/path/to/boost/source -P Utilities/Scripts/BoostScanDeps.cmake\r\n\n#\r\n\n# The output may be added in a new block below.  If it's the same as\r\n\n# the previous release, simply update the version range of the block\r\n\n# for the previous release.  Also check if any new components have\r\n\n# been added, and add any new components to\r\n\n# _Boost_COMPONENT_HEADERS.\r\n\n#\r\n\n# This information was originally generated by running\r\n\n# BoostScanDeps.cmake against every boost release to date supported\r\n\n# by FindBoost:\r\n\n#\r\n\n#   % for version in /path/to/boost/sources/*\r\n\n#     do\r\n\n#       cmake -DBOOST_DIR=$version -P Utilities/Scripts/BoostScanDeps.cmake\r\n\n#     done\r\n\n#\r\n\n# The output was then updated by search and replace with these regexes:\r\n\n#\r\n\n# - Strip message(STATUS) prefix dashes\r\n\n#   s;^-- ;;\r\n\n# - Indent\r\n\n#   s;^set(;    set(;;\r\n\n# - Add conditionals\r\n\n#   s;Scanning /path/to/boost/sources/boost_\\(.*\\)_\\(.*\\)_\\(.*);  elseif(NOT Boost_VERSION VERSION_LESS \\10\\20\\3 AND Boost_VERSION VERSION_LESS xxxx);\r\n\n#\r\n\n# This results in the logic seen below, but will require the xxxx\r\n\n# replacing with the following Boost release version (or the next\r\n\n# minor version to be released, e.g. 1.59 was the latest at the time\r\n\n# of writing, making 1.60 the next, so 106000 is the needed version\r\n\n# number).  Identical consecutive releases were then merged together\r\n\n# by updating the end range of the first block and removing the\r\n\n# following redundant blocks.\r\n\n#\r\n\n# Running the script against all historical releases should be\r\n\n# required only if the BoostScanDeps.cmake script logic is changed.\r\n\n# The addition of a new release should only require it to be run\r\n\n# against the new release.\r\n",
        "Line" : 510,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# message(STATUS \"Dependencies for Boost::${component}: ${_boost_DEPS_STRING}\")\r\n",
        "Line" : 777,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#\r\n\n# Get component headers.  This is the primary header (or headers) for\r\n\n# a given component, and is used to check that the headers are present\r\n\n# as well as the library itself as an extra sanity check of the build\r\n\n# environment.\r\n\n#\r\n\n# component - the component to check\r\n\n# _hdrs\r\n\n#\r\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Note: new boost components will require adding here.  The header\r\n\n# must be present in all versions of Boost providing a library.\r\n",
        "Line" : 790,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# message(STATUS \"Headers for Boost::${component}: ${_boost_HDRS_STRING}\")\r\n",
        "Line" : 843,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#\r\n\n# Determine if any missing dependencies require adding to the component list.\r\n\n#\r\n\n# Sets _Boost_${COMPONENT}_DEPENDENCIES for each required component,\r\n\n# plus _Boost_IMPORTED_TARGETS (TRUE if imported targets should be\r\n\n# defined; FALSE if dependency information is unavailable).\r\n\n#\r\n\n# componentvar - the component list variable name\r\n\n# extravar - the indirect dependency list variable name\r\n\n#\r\n\n#\r\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# _boost_unprocessed_components - list of components requiring processing\r\n\n# _boost_processed_components - components already processed (or currently being processed)\r\n\n# _boost_new_components - new components discovered for future processing\r\n\n#\r\n",
        "Line" : 858,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "#\r\n\n# Update library search directory hint variable with paths used by prebuilt boost binaries.\r\n\n#\r\n\n# Prebuilt windows binaries (https://sourceforge.net/projects/boost/files/boost-binaries/)\r\n\n# have library directories named using MSVC compiler version and architecture.\r\n\n# This function would append corresponding directories if MSVC is a current compiler,\r\n\n# so having `BOOST_ROOT` would be enough to specify to find everything.\r\n\n#\r\n",
        "Line" : 891,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\r\n\n# End functions/macros\r\n\n#\r\n\n#-------------------------------------------------------------------------------\r\n",
        "Line" : 926,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#-------------------------------------------------------------------------------\r\n\n# main.\r\n\n#-------------------------------------------------------------------------------\r\n",
        "Line" : 931,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# If the user sets Boost_LIBRARY_DIR, use it as the default for both\r\n\n# configurations.\r\n",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Check the version of Boost against the requested version.\r\n",
        "Line" : 952,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# The version may appear in a directory with or without the patch\r\n\n# level, even when the patch level is non-zero.\r\n",
        "Line" : 958,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# The user has not requested an exact version.  Among known\r\n\n# versions, find those that are acceptable to the user request.\r\n\n#\r\n\n# Note: When adding a new Boost release, also update the dependency\r\n\n# information in _Boost_COMPONENT_DEPENDENCIES and\r\n\n# _Boost_COMPONENT_HEADERS.  See the instructions at the top of\r\n\n# _Boost_COMPONENT_DEPENDENCIES.\r\n",
        "Line" : 964,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Select acceptable versions.\r\n",
        "Line" : 984,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# This version is high enough.\r\n",
        "Line" : 987,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# This version is a short-form for the requested version with\r\n\n# the patch level dropped.\r\n",
        "Line" : 990,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "# Any version is acceptable.\r\n",
        "Line" : 996,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\r\n\n# user-friendly message when we fail to find some necessary piece of\r\n\n# Boost.\r\n",
        "Line" : 1001,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Output some of their choices\r\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Supply Boost_LIB_DIAGNOSTIC_DEFINITIONS as a convenience target. It\r\n\n# will only contain any interface definitions on WIN32, but is created\r\n\n# on all platforms to keep end user code free from platform dependent\r\n\n# code.  Also provide convenience targets to disable autolinking and\r\n\n# enable dynamic linking.\r\n",
        "Line" : 1022,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\r\n\n# to specify the libraries.  If you are linking to a dynamic\r\n\n# runtime, then you can choose to link to either a static or a\r\n\n# dynamic Boost library, the default is to do a static link.  You\r\n\n# can alter this for a specific library \"whatever\" by defining\r\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\r\n\n# linked dynamically.  Alternatively you can force all Boost\r\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\r\n",
        "Line" : 1033,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\r\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\r\n\n# BOOST_ALL_NO_LIB.\r\n",
        "Line" : 1042,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# If you want to observe which libraries are being linked against\r\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\r\n\n# code to emit a #pragma message each time a library is selected\r\n\n# for linking.\r\n",
        "Line" : 1046,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\r\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\r\n",
        "Line" : 1076,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Search for Boost include DIR\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\r\n\n# location did.  We will find a new one based on the new inputs.\r\n",
        "Line" : 1104,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\r\n\n# we know about.\r\n\n# Build a list of path suffixes for each version.\r\n",
        "Line" : 1140,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\r\n\n# we could read this from version.hpp, but for that to work we'd\r\n\n# need to know the include dir already\r\n",
        "Line" : 1145,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\r\n",
        "Line" : 1150,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Look for a standard boost header file.\r\n",
        "Line" : 1177,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Extract version information from version.hpp\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1185,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\r\n\n# It will be updated below for component libraries.\r\n",
        "Line" : 1189,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\r\n",
        "Line" : 1197,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# Set Boost_FOUND based on requested version.\r\n",
        "Line" : 1223,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\r\n",
        "Line" : 1236,
        "CharPositionInLine" : 6
      },
      "74" : {
        "Text" : "# Caller will accept any Boost version.\r\n",
        "Line" : 1249,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Prefix initialization\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1258,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Suffix initialization and compiler suffix detection.\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1272,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Setting some more suffixes for the library\r\n",
        "Line" : 1289,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Attempt to guess the compiler suffix\r\n\n# NOTE: this is not perfect yet, if you experience any issues\r\n\n# please report them and use the Boost_COMPILER variable\r\n\n# to work around the problems.\r\n",
        "Line" : 1297,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "#======================\r\n\n# Systematically build up the Boost ABI tag\r\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\r\n",
        "Line" : 1317,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Key       Use this library when:\r\n\n#  s        linking statically to the C++ standard library and\r\n\n#           compiler runtime support libraries.\r\n",
        "Line" : 1322,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "#  g        using debug versions of the standard and runtime\r\n\n#           support libraries\r\n",
        "Line" : 1329,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#  y        using special debug build of python\r\n",
        "Line" : 1338,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "#  d        using a debug version of your code\r\n",
        "Line" : 1342,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#  p        using the STLport standard library rather than the\r\n\n#           default one supplied with your compiler\r\n",
        "Line" : 1344,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\r\n",
        "Line" : 1350,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Begin finding boost libraries\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1363,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Clear Boost_LIBRARY_DIR_${c} if it did not change but other input affecting the\r\n\n# location did.  We will find a new one based on the new inputs.\r\n",
        "Line" : 1372,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is set, prefer its value.\r\n",
        "Line" : 1378,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\r\n",
        "Line" : 1426,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\r\n",
        "Line" : 1436,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\r\n\n# on WIN32 was to:\r\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\r\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\r\n\n# We maintain this behavior since changing it could break people's builds.\r\n\n# To disable the ambiguous behavior, the user need only\r\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\r\n",
        "Line" : 1448,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\r\n\n# since it wasn't added until 1.35.\r\n",
        "Line" : 1462,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Additional components may be required via component dependencies.\r\n\n# Add any missing components to the list.\r\n",
        "Line" : 1470,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# If thread is required, get the thread libs as a dependency\r\n",
        "Line" : 1474,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\r\n",
        "Line" : 1481,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Compute component-specific hints.\r\n",
        "Line" : 1500,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Consolidate and report component-specific hints.\r\n",
        "Line" : 1513,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "#\r\n\n# Find headers\r\n\n#\r\n",
        "Line" : 1523,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Look for a standard boost header file.\r\n",
        "Line" : 1527,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "#\r\n\n# Find RELEASE libraries\r\n\n#\r\n",
        "Line" : 1539,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# if Boost_LIBRARY_DIR_RELEASE is not defined,\r\n\n# but Boost_LIBRARY_DIR_DEBUG is, look there first for RELEASE libs\r\n",
        "Line" : 1571,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\r\n",
        "Line" : 1577,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "#\r\n\n# Find DEBUG libraries\r\n\n#\r\n",
        "Line" : 1587,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# if Boost_LIBRARY_DIR_DEBUG is not defined,\r\n\n# but Boost_LIBRARY_DIR_RELEASE is, look there first for DEBUG libs\r\n",
        "Line" : 1620,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\r\n",
        "Line" : 1626,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Restore the original find library ordering\r\n",
        "Line" : 1645,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  End finding boost libraries\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1650,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\r\n\n# Update it for the requested component libraries.\r\n",
        "Line" : 1666,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# The headers were found.  Check for requested component libs.\r\n",
        "Line" : 1669,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Optional indirect dependencies are not counted as missing.\r\n",
        "Line" : 1681,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\r\n\n# error message that lists the libraries we were unable to find.\r\n",
        "Line" : 1691,
        "CharPositionInLine" : 4
      },
      "112" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\r\n\n# 2.4's FindBoost module.\r\n",
        "Line" : 1717,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# Look for the boost library path.\r\n\n# Note that the user may not have installed any libraries\r\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\r\n",
        "Line" : 1720,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\r\n",
        "Line" : 1730,
        "CharPositionInLine" : 6
      },
      "115" : {
        "Text" : "# Boost headers were not found so no components were found.\r\n",
        "Line" : 1748,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Add imported targets\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1755,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# For header-only libraries\r\n",
        "Line" : 1760,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Even if Boost_USE_STATIC_LIBS is OFF, we might have static\r\n\n# libraries as a result.\r\n",
        "Line" : 1776,
        "CharPositionInLine" : 10
      },
      "119" : {
        "Text" : "# ------------------------------------------------------------------------\r\n\n#  Notification to end user about what was found\r\n\n# ------------------------------------------------------------------------\r\n",
        "Line" : 1819,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\r\n\n# it could be quite lengthy and somewhat imposing in its requests\r\n\n# Since Boost is not always a required dependency we'll leave this\r\n\n# up to the end-user.\r\n",
        "Line" : 1845,
        "CharPositionInLine" : 6
      },
      "121" : {
        "Text" : "# Configure display of cache entries in GUI.\r\n",
        "Line" : 1858,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# Record last used values of input variables so we can\r\n\n# detect on the next run if the user changed them.\r\n",
        "Line" : 1873,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\r\n\n# the last flush.\r\n",
        "Line" : 1886,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 124
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindBullet.cmake" : {
      "ObjectId" : "5dc2958f4cf73d3c6ec44f8e4e547e4089792b36",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindBullet\r\n\n# ----------\r\n\n#\r\n\n# Try to find the Bullet physics engine\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   This module defines the following variables\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   BULLET_FOUND - Was bullet found\r\n\n#   BULLET_INCLUDE_DIRS - the Bullet include directories\r\n\n#   BULLET_LIBRARIES - Link to this, by default it includes\r\n\n#                      all bullet components (Dynamics,\r\n\n#                      Collision, LinearMath, & SoftBody)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   This module accepts the following variables\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   BULLET_ROOT - Can be set to bullet install path or Windows build path\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the libraries\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCABLE.cmake" : {
      "ObjectId" : "83a39fd4e95bf395e9fe3d109649100f65fba705",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCABLE\r\n\n# ---------\r\n\n#\r\n\n# Find CABLE\r\n\n#\r\n\n# This module finds if CABLE is installed and determines where the\r\n\n# include files and libraries are.  This code sets the following\r\n\n# variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CABLE             the path to the cable executable\r\n\n#   CABLE_TCL_LIBRARY the path to the Tcl wrapper library\r\n\n#   CABLE_INCLUDE_DIR the path to the include directory\r\n\n#\r\n\n#\r\n\n#\r\n\n# To build Tcl wrappers, you should add shared library and link it to\r\n\n# ${CABLE_TCL_LIBRARY}.  You should also add ${CABLE_INCLUDE_DIR} as an\r\n\n# include directory.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the cable executable in the path.\r\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Get the path where the executable sits, but without the executable\r\n\n# name on it.\r\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Find the cable include directory in a path relative to the cable\r\n\n# executable.\r\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find the WrapTclFacility library in a path relative to the cable\r\n\n# executable.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCUDA.cmake" : {
      "ObjectId" : "2d78c5d2c4e5c9b27e2d58b7f67b606bee340bfe",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\r\n\n# FindCUDA\r\n\n# --------\r\n\n#\r\n\n# Tools for building CUDA C files: libraries and build dependencies.\r\n\n#\r\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\r\n\n# windows, and mac and should be reasonably up to date with CUDA C\r\n\n# releases.\r\n\n#\r\n\n# This script makes use of the standard find_package arguments of\r\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\r\n\n# acceptable version of CUDA was found.\r\n\n#\r\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\r\n\n# the prefix cannot be determined by the location of nvcc in the system\r\n\n# path and REQUIRED is specified to find_package().  To use a different\r\n\n# installed version of the toolkit set the environment variable\r\n\n# CUDA_BIN_PATH before running cmake (e.g.\r\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\r\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\r\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\r\n\n# depend on the path will be relocated.\r\n\n#\r\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\r\n\n# platforms, or to use a cuda runtime not installed in the default\r\n\n# location.  In newer versions of the toolkit the cuda library is\r\n\n# included with the graphics driver- be sure that the driver version\r\n\n# matches what is needed by the cuda runtime version.\r\n\n#\r\n\n# The following variables affect the behavior of the macros in the\r\n\n# script (in alphebetical order).  Note that any of these flags can be\r\n\n# changed multiple times in the same directory before calling\r\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\r\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\r\n\n#\r\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\r\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\r\n\n#      Note that making this different from the host code when generating object\r\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\r\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\r\n\n#      file yourself, you can mix bit sizes between device and host.\r\n\n#\r\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\r\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\r\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\r\n\n#      targets.\r\n\n#\r\n\n#      This allows the user to build the target from the CUDA file; however, bad\r\n\n#      things can happen if the CUDA source file is added to multiple targets.\r\n\n#      When performing parallel builds it is possible for the custom build\r\n\n#      command to be run more than once and in parallel causing cryptic build\r\n\n#      errors.  VS runs the rules for every source file in the target, and a\r\n\n#      source can have only one rule no matter how many projects it is added to.\r\n\n#      When the rule is run from multiple targets race conditions can occur on\r\n\n#      the generated file.  Eventually everything will get built, but if the user\r\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\r\n\n#      this script could detect the reuse of source files across multiple targets\r\n\n#      and turn the option off for the user, but no good solution could be found.\r\n\n#\r\n\n#   CUDA_BUILD_CUBIN (Default OFF)\r\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\r\n\n#      Device mode. The output is parsed and register, shared memory usage is\r\n\n#      printed during build.\r\n\n#\r\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\r\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\r\n\n#      when CUDA_BUILD_EMULATION is TRUE.\r\n\n#\r\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\r\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\r\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\r\n\n#      Intermediate files will always be placed in\r\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\r\n\n#\r\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\r\n\n#   -- Set to OFF for C compilation of host code.\r\n\n#\r\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\r\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\r\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\r\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\r\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\r\n\n#      the command is run from within VS.\r\n\n#\r\n\n#   CUDA_NVCC_FLAGS\r\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\r\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\r\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\r\n\n#\r\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\r\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\r\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\r\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\r\n\n#      generated host code match the rest of the system better.  Sometimes\r\n\n#      certain flags give nvcc problems, and this will help you turn the flag\r\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\r\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\r\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\r\n\n#      shared library compilation are not affected by this flag.\r\n\n#\r\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\r\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\r\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\r\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\r\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\r\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\r\n\n#\r\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\r\n\n#   -- If this source file property is set, it can override the format specified\r\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\r\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\r\n\n#      file. See documentation for set_source_files_properties on how to set\r\n\n#      this property.\r\n\n#\r\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\r\n\n#   -- When enabled the static version of the CUDA runtime library will be used\r\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\r\n\n#      this option, then it will be silently disabled.\r\n\n#\r\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\r\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\r\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\r\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\r\n\n#      always print the output.\r\n\n#\r\n\n# The script creates the following macros (in alphebetical order)::\r\n\n#\r\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\r\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\r\n\n#      you are in emulation mode or not.\r\n\n#\r\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\r\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\r\n\n#      whether you are in emulation mode or not.\r\n\n#\r\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\r\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\r\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\r\n\n#      specified.  All of the non CUDA C files are compiled using the standard\r\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\r\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\r\n\n#      added automatically to include_directories().  Some standard CMake target\r\n\n#      calls can be used on the target after calling this macro\r\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\r\n\n#      properties that adjust compilation flags will not affect code compiled by\r\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\r\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\r\n\n#\r\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\r\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\r\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\r\n\n#\r\n\n#   CUDA_BUILD_CLEAN_TARGET()\r\n\n#   -- Creates a convience target that deletes all the dependency files\r\n\n#      generated.  You should make clean after running this target to ensure the\r\n\n#      dependency files get regenerated.\r\n\n#\r\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\r\n\n#                 [OPTIONS ...] )\r\n\n#   -- Returns a list of generated files from the input source files to be used\r\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\r\n\n#\r\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\r\n\n#   -- Returns a list of PTX files generated from the input source files.\r\n\n#\r\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\r\n\n#   -- Returns a list of FATBIN files generated from the input source files.\r\n\n#\r\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\r\n\n#   -- Returns a list of CUBIN files generated from the input source files.\r\n\n#\r\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\r\n\n#                                                        cuda_target\r\n\n#                                                        object_files )\r\n\n#   -- Compute the name of the intermediate link file used for separable\r\n\n#      compilation.  This file name is typically passed into\r\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\r\n\n#      based on cuda_target the list of objects files that need separable\r\n\n#      compilation as specified by object_files.  If the object_files list is\r\n\n#      empty, then output_file_var will be empty.  This function is called\r\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\r\n\n#      this is a function and not a macro.\r\n\n#\r\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\r\n\n#   -- Sets the directories that should be passed to nvcc\r\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\r\n\n#      files.\r\n\n#\r\n\n#\r\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\r\n\n#                                            nvcc_flags object_files)\r\n\n#   -- Generates the link object required by separable compilation from the given\r\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\r\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\r\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\r\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\r\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\r\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\r\n\n#      instead of a macro.\r\n\n#\r\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\r\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\r\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\r\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\r\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\r\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\r\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\r\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\r\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\r\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\r\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\r\n\n#      Example:\r\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\r\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\r\n\n#\r\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\r\n\n#      Note that this is a function instead of a macro.\r\n\n#\r\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\r\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\r\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\r\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\r\n\n#      function under the hood.\r\n\n#\r\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\r\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\r\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\r\n\n#      or have the HEADER_FILE_ONLY property are ignored.\r\n\n#\r\n\n#      The arguments passed in after OPTIONS are extra command line options to\r\n\n#      give to nvcc.  You can also specify per configuration options by\r\n\n#      specifying the name of the configuration followed by the options.  General\r\n\n#      options must precede configuration specific options.  Not all\r\n\n#      configurations need to be specified, only the ones provided will be used.\r\n\n#\r\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\r\n\n#         DEBUG -g\r\n\n#         RELEASE --use_fast_math\r\n\n#         RELWITHDEBINFO --use_fast_math;-g\r\n\n#         MINSIZEREL --use_fast_math\r\n\n#\r\n\n#      For certain configurations (namely VS generating object files with\r\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\r\n\n#      be produced for the given cuda file.  This is because when you add the\r\n\n#      cuda file to Visual Studio it knows that this file produces an object file\r\n\n#      and will link in the resulting object file automatically.\r\n\n#\r\n\n#      This script will also generate a separate cmake script that is used at\r\n\n#      build time to invoke nvcc.  This is for several reasons.\r\n\n#\r\n\n#        1. nvcc can return negative numbers as return values which confuses\r\n\n#        Visual Studio into thinking that the command succeeded.  The script now\r\n\n#        checks the error codes and produces errors when there was a problem.\r\n\n#\r\n\n#        2. nvcc has been known to not delete incomplete results when it\r\n\n#        encounters problems.  This confuses build systems into thinking the\r\n\n#        target was generated when in fact an unusable file exists.  The script\r\n\n#        now deletes the output files if there was an error.\r\n\n#\r\n\n#        3. By putting all the options that affect the build into a file and then\r\n\n#        make the build rule dependent on the file, the output files will be\r\n\n#        regenerated when the options change.\r\n\n#\r\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\r\n\n#      determine when to target the object compilation for a shared library.\r\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\r\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\r\n\n#      objects intended for shared libraries.  A preprocessor macro,\r\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\r\n\n#      detected.\r\n\n#\r\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\r\n\n#\r\n\n#\r\n\n#\r\n\n# The script defines the following variables::\r\n\n#\r\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\r\n\n#   CUDA_VERSION_MINOR    -- The minor version.\r\n\n#   CUDA_VERSION\r\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\r\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\r\n\n#\r\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\r\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\r\n\n#                            SDK.  This script will not directly support finding\r\n\n#                            specific libraries or headers, as that isn't\r\n\n#                            supported by NVIDIA.  If you want to change\r\n\n#                            libraries when the path changes see the\r\n\n#                            FindCUDA.cmake script for an example of how to clear\r\n\n#                            these variables.  There are also examples of how to\r\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\r\n\n#                            libraries, if you so choose (at your own risk).\r\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\r\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\r\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\r\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\r\n\n#                            implementation (alternative to:\r\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\r\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\r\n\n#                            implementation (alternative to:\r\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\r\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\r\n\n#                                 Only available for CUDA version 5.5+\r\n\n#   CUDA_cudadevrt_LIBRARY -- Device runtime library.\r\n\n#                             Required for separable compilation.\r\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\r\n\n#                            Only available for CUDA version 4.0+.\r\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\r\n\n#                            Only available for CUDA version 3.2+.\r\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\r\n\n#                            Only available for CUDA version 7.0+.\r\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\r\n\n#                            Only available for CUDA version 3.2+.\r\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\r\n\n#                            Only available for CUDA version 4.0+.\r\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\r\n\n#                            Only available for CUDA version 5.5+.\r\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\r\n\n#                            Only available for CUDA version 5.5+.\r\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\r\n\n#                            Only available for CUDA version 5.5+.\r\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\r\n\n#                            Only available for CUDA version 3.2+.\r\n\n#                            Windows only.\r\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\r\n\n#                            Only available for CUDA version 3.2+.\r\n\n#                            Windows only.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n\n#\r\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#   Copyright (c) 2007-2009\r\n\n#   Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#   for the text of the license.\r\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n\n#\r\n\n###############################################################################\r\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\r\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\r\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\r\n\n# processed.  Using this variable, we can pull out the current path, and\r\n\n# provide a way to get access to the other files we need local to here.\r\n",
        "Line" : 371,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\r\n",
        "Line" : 386,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\r\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\r\n\n##\r\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\r\n\n# it doesn't exist then we need to create an empty one, so we can\r\n\n# include it.\r\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\r\n\n# depends on exist.  If they don't then we should clear the dependency\r\n\n# file and regenerate it later.  This covers the case where a header\r\n\n# file has disappeared or moved.\r\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\r\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\r\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\r\n\n# hours figuring out why it didn't work.\r\n",
        "Line" : 408,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\r\n\n# invocation and rebuild the dependencies.\r\n\n#message(\"including dependency_file = ${dependency_file}\")\r\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\r\n\n# here.  If they aren't there we need to just blank this variable and\r\n\n# make the file regenerate again.\r\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\r\n\n#     message(\"CUDA_NVCC_DEPEND set\")\r\n\n#   else()\r\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\r\n\n#   endif()\r\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\r\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\r\n",
        "Line" : 431,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\r\n",
        "Line" : 433,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\r\n\n# No dependencies, so regenerate the file.\r\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\r\n\n# No incoming dependencies, so we need to generate them.  Make the\r\n\n# output depend on the dependency file itself, which should cause the\r\n\n# rule to re-run.\r\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\r\n",
        "Line" : 449,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Setup variables' defaults\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\r\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\r\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\r\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\r\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\r\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\r\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\r\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\r\n\n# unhandled -dumpspecs option to clang. Also in case neither\r\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\r\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\r\n\n# nvcc use its own default C compiler.\r\n\n# Only care about this on APPLE with clang to avoid\r\n\n# following symlinks to things like ccache\r\n",
        "Line" : 493,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\r\n\n# go back to using CMAKE_C_COMPILER\r\n",
        "Line" : 502,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\r\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\r\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\r\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\r\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\r\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\r\n\n# for completeness.  We need run this loop in order to accomodate the addition\r\n\n# of extra configuration types.  Duplicate entries will be removed by\r\n\n# REMOVE_DUPLICATES.\r\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Locate CUDA, Set Build Type, etc.\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\r\n",
        "Line" : 563,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\r\n",
        "Line" : 565,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\r\n\n# if they have then clear the cache variables, so that will be detected again.\r\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\r\n\n#  End of unset()\r\n\n#\r\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\r\n\n#  Start looking for things\r\n\n#\r\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search for the cuda distribution.\r\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\r\n",
        "Line" : 612,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Now search default paths\r\n",
        "Line" : 624,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# We need to force this back into the cache.\r\n",
        "Line" : 635,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Support for NVPACK\r\n",
        "Line" : 652,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Support for arm cross compilation\r\n",
        "Line" : 655,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Support for aarch64 cross compilation\r\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\r\n",
        "Line" : 672,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\r\n",
        "Line" : 678,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\r\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 695,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compute the version.\r\n",
        "Line" : 700,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Need to set these based off of the cached value\r\n",
        "Line" : 707,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Always set this convenience variable\r\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\r\n",
        "Line" : 716,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Header included in toolkit\r\n",
        "Line" : 718,
        "CharPositionInLine" : 21
      },
      "56" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\r\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\r\n\n# and old paths.\r\n",
        "Line" : 741,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\r\n\n# (lib/Win32) and the old path (lib).\r\n",
        "Line" : 745,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 757,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# CUDA_LIBRARIES\r\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\r\n",
        "Line" : 778,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\r\n",
        "Line" : 792,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# If not available, silently disable the option.\r\n",
        "Line" : 796,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\r\n",
        "Line" : 807,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\r\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\r\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\r\n\n# when doing the find_package command here.\r\n",
        "Line" : 813,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\r\n",
        "Line" : 830,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\r\n",
        "Line" : 839,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\r\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\r\n\n# dependencies are brough in, but for the static version there are additional libraries\r\n\n# and linker commands needed.\r\n\n# Initialize to empty\r\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\r\n\n# that one instead of cudart.\r\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\r\n\n# the static cuda runtime can find it at runtime.\r\n",
        "Line" : 862,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\r\n\n# some platforms.\r\n",
        "Line" : 870,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#######################\r\n\n# Look for some of the toolkit helper libraries\r\n",
        "Line" : 879,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#######################\r\n\n# Disable emulation for v3.1 onward\r\n",
        "Line" : 886,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\r\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\r\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cusparse showed up in version 3.2\r\n",
        "Line" : 903,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# In CUDA 5.5 NPP was splitted onto 3 separate libraries.\r\n",
        "Line" : 913,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# cusolver showed up in version 7.0\r\n",
        "Line" : 922,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "########################\r\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\r\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\r\n",
        "Line" : 934,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\r\n\n# environment variables.\r\n",
        "Line" : 946,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\r\n",
        "Line" : 958,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\r\n\n#   cutil.h\r\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\r\n\n#   PATH_SUFFIXES \"common/inc\"\r\n\n#   DOC \"Location of cutil.h\"\r\n\n#   NO_DEFAULT_PATH\r\n\n#   )\r\n\n# # Now search system paths\r\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\r\n",
        "Line" : 960,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\r\n",
        "Line" : 970,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\r\n",
        "Line" : 973,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\r\n\n# # to get these confused, so we are setting the name based on the word size of\r\n\n# # the build.\r\n",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\r\n\n#   set(cuda_cutil_name cutil64)\r\n\n# else()\r\n\n#   set(cuda_cutil_name cutil32)\r\n\n# endif()\r\n",
        "Line" : 979,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\r\n\n#   NAMES cutil ${cuda_cutil_name}\r\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\r\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\r\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\r\n\n#   DOC \"Location of cutil library\"\r\n\n#   NO_DEFAULT_PATH\r\n\n#   )\r\n\n# # Now search system paths\r\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\r\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\r\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\r\n",
        "Line" : 985,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "#############################\r\n\n# Check for required components\r\n",
        "Line" : 1000,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Macros\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1025,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "###############################################################################\r\n\n# Add include directories to pass to the nvcc command.\r\n",
        "Line" : 1031,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "##############################################################################\r\n",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "##############################################################################\r\n\n# Separate the OPTIONS out from the sources\r\n\n#\r\n",
        "Line" : 1046,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Assume this is a file\r\n",
        "Line" : 1070,
        "CharPositionInLine" : 8
      },
      "95" : {
        "Text" : "##############################################################################\r\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\r\n\n#\r\n",
        "Line" : 1077,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\r\n",
        "Line" : 1083,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\r\n",
        "Line" : 1088,
        "CharPositionInLine" : 8
      },
      "98" : {
        "Text" : "##############################################################################\r\n\n# Helper to add the include directory for CUDA only once\r\n",
        "Line" : 1099,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\r\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\r\n",
        "Line" : 1118,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "##############################################################################\r\n\n# Helper to avoid clashes of files with the same basename but different paths.\r\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\r\n\n# add this path when there is a conflict, since by the time a second collision\r\n\n# in names is detected it's already too late to fix the first one.  For\r\n\n# consistency sake the relative path will be added to all files.\r\n",
        "Line" : 1137,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\r\n\n# Only deal with CMake style paths from here on out\r\n",
        "Line" : 1144,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\r\n\n# file(GLOB_RECURSE) is used to pick up the files.\r\n",
        "Line" : 1148,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\r\n\n# CMake source.\r\n",
        "Line" : 1159,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Remove leading /\r\n",
        "Line" : 1162,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "# Avoid absolute paths by removing ':'\r\n",
        "Line" : 1164,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Avoid relative paths that go up the tree\r\n",
        "Line" : 1166,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid spaces\r\n",
        "Line" : 1168,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\r\n\n# basename can make a path that looked like path/../basename turn into\r\n\n# path/.. (notice the trailing slash).\r\n",
        "Line" : 1171,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\r\n",
        "Line" : 1177,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "##############################################################################\r\n\n# This helper macro populates the following variables and setups up custom\r\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\r\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\r\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\r\n\n# a .cpp or .ptx file.\r\n\n# INPUT:\r\n\n#   cuda_target         - Target name\r\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\r\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\r\n\n#   OPTIONS             - Extra options to NVCC\r\n\n# OUTPUT:\r\n\n#   generated_files     - List of generated files\r\n\n##############################################################################\r\n\n##############################################################################\r\n",
        "Line" : 1180,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# Put optional arguments in list.\r\n",
        "Line" : 1198,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\r\n\n# remove it from the list.\r\n",
        "Line" : 1200,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\r\n",
        "Line" : 1210,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\r\n",
        "Line" : 1215,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Emulation if the card isn't present.\r\n",
        "Line" : 1219,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Emulation.\r\n",
        "Line" : 1221,
        "CharPositionInLine" : 4
      },
      "117" : {
        "Text" : "# Device mode.  No flags necessary.\r\n",
        "Line" : 1224,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\r\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\r\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\r\n\n# $(VCInstallDir)/bin.\r\n",
        "Line" : 1250,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\r\n\n# the script.  We need to defer the decision until compilation time, because\r\n\n# for VS projects we won't know if we are making a debug or release build\r\n\n# until build time.\r\n",
        "Line" : 1260,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\r\n",
        "Line" : 1270,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\r\n\n# cuda_compile_* functions), need to query directory properties to get include directories\r\n\n# and compile definitions.\r\n",
        "Line" : 1273,
        "CharPositionInLine" : 4
      },
      "122" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\r\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\r\n\n# include dirs set by the user, whether via directory properties or target properties\r\n",
        "Line" : 1282,
        "CharPositionInLine" : 4
      },
      "123" : {
        "Text" : "# Do the same thing with compile definitions\r\n",
        "Line" : 1287,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Reset these variables\r\n",
        "Line" : 1292,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\r\n\n# respected in CUDA_ADD_LIBRARY.\r\n",
        "Line" : 1302,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# SHARED, MODULE\r\n",
        "Line" : 1305,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# STATIC\r\n",
        "Line" : 1311,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# CUDA_HOST_FLAGS\r\n",
        "Line" : 1317,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\r\n\n# compiling objects for shared libraries.\r\n",
        "Line" : 1319,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\r\n\n# always need to set the SHARED_FLAGS, though.\r\n",
        "Line" : 1325,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\r\n",
        "Line" : 1334,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\r\n\n# we convert the strings to lists (like we want).\r\n",
        "Line" : 1337,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\r\n",
        "Line" : 1341,
        "CharPositionInLine" : 6
      },
      "134" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\r\n\n# like it is currently), we can remove the quotes around the\r\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\r\n",
        "Line" : 1361,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\r\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\r\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\r\n\n# specific c++11 flag.\r\n",
        "Line" : 1367,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\r\n\n# the main flag instead of the configuration specific flags.\r\n",
        "Line" : 1372,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# Reset the output variable\r\n",
        "Line" : 1384,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# Iterate over the macro arguments and create custom\r\n\n# commands for all the .cu files.\r\n",
        "Line" : 1387,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\r\n",
        "Line" : 1390,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\r\n",
        "Line" : 1392,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\r\n",
        "Line" : 1399,
        "CharPositionInLine" : 6
      },
      "142" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\r\n",
        "Line" : 1422,
        "CharPositionInLine" : 8
      },
      "143" : {
        "Text" : "# Determine output directory\r\n",
        "Line" : 1430,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\r\n",
        "Line" : 1443,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\r\n\n# generated_file_path in them get passed in through as a command line\r\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\r\n\n# instead of configure time.\r\n",
        "Line" : 1461,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Setup properties for obj files:\r\n",
        "Line" : 1472,
        "CharPositionInLine" : 6
      },
      "147" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\r\n",
        "Line" : 1476,
        "CharPositionInLine" : 31
      },
      "148" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\r\n",
        "Line" : 1480,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\r\n",
        "Line" : 1492,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "# Convience string for output ###########################################\r\n",
        "Line" : 1495,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# Build the NVCC made dependency file ###################################\r\n",
        "Line" : 1502,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# Configure the build script\r\n",
        "Line" : 1510,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\r\n\n# can have bad things happen with dependencies.  Here we check an option\r\n\n# to see if this is the behavior they want.\r\n",
        "Line" : 1517,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# Create up the comment string\r\n",
        "Line" : 1534,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Build the generated file and dependency file ##########################\r\n",
        "Line" : 1547,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\r\n",
        "Line" : 1550,
        "CharPositionInLine" : 8
      },
      "157" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\r\n",
        "Line" : 1554,
        "CharPositionInLine" : 8
      },
      "158" : {
        "Text" : "# Make sure the build system knows the file is generated.\r\n",
        "Line" : 1568,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\r\n",
        "Line" : 1573,
        "CharPositionInLine" : 6
      },
      "160" : {
        "Text" : "# Set the return parameter\r\n",
        "Line" : 1581,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Separable Compilation Link\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1596,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\r\n",
        "Line" : 1602,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\r\n",
        "Line" : 1614,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# This is an object file not to be compiled, but only\r\n\n# be linked.\r\n\n# This file is generated during the build\r\n",
        "Line" : 1620,
        "CharPositionInLine" : 27
      },
      "165" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\r\n",
        "Line" : 1625,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\r\n",
        "Line" : 1633,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# Match VERBATIM check below.\r\n",
        "Line" : 1637,
        "CharPositionInLine" : 6
      },
      "168" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\r\n",
        "Line" : 1645,
        "CharPositionInLine" : 4
      },
      "169" : {
        "Text" : "# Add config specific flags\r\n",
        "Line" : 1650,
        "CharPositionInLine" : 6
      },
      "170" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\r\n",
        "Line" : 1660,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\r\n",
        "Line" : 1667,
        "CharPositionInLine" : 4
      },
      "172" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\r\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\r\n\n# we work around that issue by compiling the intermediate link object as a\r\n\n# pre-link custom command in that situation.\r\n",
        "Line" : 1672,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "# VS 2010 and 2012 have this problem.\r\n",
        "Line" : 1678,
        "CharPositionInLine" : 6
      },
      "174" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# ADD LIBRARY\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1710,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1719,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1722,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\r\n\n# compilation.\r\n",
        "Line" : 1727,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# Add the library.\r\n",
        "Line" : 1731,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\r\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\r\n\n# variable will have been defined.\r\n",
        "Line" : 1738,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\r\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n",
        "Line" : 1753,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# ADD EXECUTABLE\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1763,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1772,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1774,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\r\n\n# compilation.\r\n",
        "Line" : 1777,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# Add the library.\r\n",
        "Line" : 1781,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\r\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\r\n\n# variable will have been defined.\r\n",
        "Line" : 1788,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\r\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n",
        "Line" : 1797,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# (Internal) helper for manually added cuda source files with specific targets\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1807,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\r\n",
        "Line" : 1813,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1824,
        "CharPositionInLine" : 2
      },
      "191" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1827,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1835,
        "CharPositionInLine" : 0
      },
      "193" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE PTX\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1844,
        "CharPositionInLine" : 0
      },
      "194" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE FATBIN\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1853,
        "CharPositionInLine" : 0
      },
      "195" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE CUBIN\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1862,
        "CharPositionInLine" : 0
      },
      "196" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA ADD CUFFT TO TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1872,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA ADD CUBLAS TO TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1885,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA BUILD CLEAN TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1898,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\r\n\n# target.  You should also make clean after running this target to get the\r\n\n# build system to generate all the code again.\r\n",
        "Line" : 1904,
        "CharPositionInLine" : 2
      },
      "200" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\r\n\n# This is useful so that the files won't persist in the list after targets\r\n\n# have been removed.\r\n",
        "Line" : 1915,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 201
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "fee2648bc842c35b101b140a8a3397821e821558",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  Copyright (c) 2007-2009\r\n\n#  Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n\n#\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\r\n\n# This converts a file written in makefile syntax into one that can be included\r\n\n# by CMake.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\r\n\n#\r\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\r\n\n#                          ON : Extra output\r\n\n#\r\n\n# input_file:FILEPATH=<>   Path to dependecy file in makefile format\r\n\n#\r\n\n# output_file:FILEPATH=<>  Path to file with dependencies in CMake readable variable\r\n\n#\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"FOUND DEPENDS\")\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\r\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\r\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\r\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\r\n\n# path.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we check to see if we have a file, before asking if it is not a directory.\r\n\n# if(NOT IS_DIRECTORY \"\") will return TRUE.\r\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\r\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\r\n\n# just /include.\r\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\r\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove the duplicate entries and sort them.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "c8b82cca4f739998c9c354ea78a55bf4dbc69ab7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  Copyright (c) 2007-2009\r\n\n#  Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n\n#\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\r\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\r\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\r\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\r\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\r\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\r\n\n# message(\"Skipping ${entry}\")\r\n\n# set(skip TRUE)\r\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\r\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\r\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\r\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\r\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\r\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\r\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\r\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "b640fcb9ec9da84f9caeecd5d66883d22b3a85b4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\r\n\n# This file runs the nvcc commands to produce the desired output file along with\r\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\r\n\n# file checks the output of each command and if the command fails it deletes the\r\n\n# output files.\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\r\n\n#\r\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\r\n\n#                          ON : Describe each step\r\n\n#\r\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\r\n\n#                               RelWithDebInfo, but it should match one of the\r\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\r\n\n#                               configuration used when compiling the code.  If\r\n\n#                               blank or unspecified Debug is assumed as this is\r\n\n#                               what CMake does.\r\n\n#\r\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\r\n\n#\r\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\r\n\n#                                                   in if build_cubin is true.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\r\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\r\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\r\n",
        "Line" : 60,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\r\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\r\n",
        "Line" : 62,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\r\n",
        "Line" : 63,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\r\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\r\n",
        "Line" : 65,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\r\n\n# order to force this file to be run again if it changes.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\r\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\r\n",
        "Line" : 69,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\r\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\r\n",
        "Line" : 72,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\r\n",
        "Line" : 73,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\r\n",
        "Line" : 75,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\r\n",
        "Line" : 76,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\r\n",
        "Line" : 77,
        "CharPositionInLine" : 69
      },
      "22" : {
        "Text" : "# string\r\n",
        "Line" : 78,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\r\n",
        "Line" : 79,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\r\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\r\n\n# been chosen by FindCUDA.cmake.\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\r\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\r\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\r\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\r\n\n# Add the build specific configuration flags\r\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\r\n\n#\r\n\n#   status  - Status message to print if verbose is true\r\n\n#   command - COMMAND argument from the usual execute_process argument structure\r\n\n#   ARGN    - Remaining arguments are the command with arguments\r\n\n#\r\n\n#   CUDA_result - return value from running the command\r\n\n#\r\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\r\n\n# and other return variables are present after executing the process.\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\r\n\n# and spaces, anything else is left up to the user to fix if they want to\r\n\n# copy and paste a runnable command line.\r\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\r\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\r\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\r\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\r\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\r\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\r\n\n# for dependency generation and hope for the best.\r\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\r\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\r\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Note that this will remove all occurances of -G.\r\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\r\n\n# can cause incorrect dependencies when #including files based on this macro which is\r\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\r\n\n# define this for now until a future version fixes this bug.\r\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the dependency file\r\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\r\n\n# quotes just around the filenames for the input_file and output_file variables.\r\n\n# CMake will pass the quotes through and not be able to find the file.\r\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Copy the file if it is different\r\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Delete the temporary file\r\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Generate the code\r\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\r\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Cubin resource report commands.\r\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Run with -cubin to produce resource usage report.\r\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Execute the parser script.\r\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 54
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "a06ac2bb859bc87337b5c00d160ab488677021ee",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\r\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\r\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\r\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\r\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\r\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\r\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\r\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\r\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\r\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\r\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\r\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\r\n\n#      Example:\r\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\r\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\r\n\n#\r\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\r\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\r\n\n# Usage:\r\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\r\n\n#\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\r\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\r\n\n# Usage:\r\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\r\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\r\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\r\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\r\n",
        "Line" : 126,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\r\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\r\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\r\n",
        "Line" : 179,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\r\n",
        "Line" : 183,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\r\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCURL.cmake" : {
      "ObjectId" : "a97b3e7b7c1af5aeff62c1e8d18ee62912b0a279",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCURL\r\n\n# --------\r\n\n#\r\n\n# Find curl\r\n\n#\r\n\n# Find the native CURL headers and libraries.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CURL_INCLUDE_DIRS   - where to find curl/curl.h, etc.\r\n\n#   CURL_LIBRARIES      - List of libraries when using curl.\r\n\n#   CURL_FOUND          - True if curl found.\r\n\n#   CURL_VERSION_STRING - the version of curl found (since CMake 2.8.8)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library (sorted from most current/relevant entry to least).\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Windows MSVC prebuilts:\r\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Windows older \"Win32 - MSVC\" prebuilts (libcurl.lib, e.g. libcurl-7.15.5-win32-msvc.zip):\r\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCVS.cmake" : {
      "ObjectId" : "2048b595a13abc1c1358de781273038bad4e33c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCVS\r\n\n# -------\r\n\n#\r\n\n#\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    CVS_EXECUTABLE - path to cvs command line client\r\n\n#    CVS_FOUND - true if the command line client was found\r\n\n#\r\n\n# Example usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    find_package(CVS)\r\n\n#    if(CVS_FOUND)\r\n\n#      message(\"CVS found: ${CVS_EXECUTABLE}\")\r\n\n#    endif()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CVSNT\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# WinCVS (in case CVSNT was installed in the same directory)\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TortoiseCVS (in case CVSNT was installed in the same directory)\r\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set CVS_FOUND to TRUE if\r\n\n# all listed variables are TRUE\r\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCoin3D.cmake" : {
      "ObjectId" : "5ddcfc891ab14645f81d7e55ce1c29ae07df538f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCoin3D\r\n\n# ----------\r\n\n#\r\n\n# Find Coin3D (Open Inventor)\r\n\n#\r\n\n# Coin3D is an implementation of the Open Inventor API.  It provides\r\n\n# data structures and algorithms for 3D visualization.\r\n\n#\r\n\n# This module defines the following variables\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   COIN3D_FOUND         - system has Coin3D - Open Inventor\r\n\n#   COIN3D_INCLUDE_DIRS  - where the Inventor include directory can be found\r\n\n#   COIN3D_LIBRARIES     - Link to this to use Coin3D\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCups.cmake" : {
      "ObjectId" : "ad89756f300a4a55a728f8b9ec2ad66d89b2d1c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCups\r\n\n# --------\r\n\n#\r\n\n# Try to find the Cups printing system\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CUPS_FOUND - system has Cups\r\n\n#   CUPS_INCLUDE_DIR - the Cups include directory\r\n\n#   CUPS_LIBRARIES - Libraries needed to use Cups\r\n\n#   CUPS_VERSION_STRING - version of Cups found (since CMake 2.8.8)\r\n\n#   Set CUPS_REQUIRE_IPP_DELETE_ATTRIBUTE to TRUE if you need a version which\r\n\n#   features this function (i.e. at least 1.1.19)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ippDeleteAttribute is new in cups-1.1.19 (and used by kdeprint)\r\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCurses.cmake" : {
      "ObjectId" : "8add57b1d4d4e7e1c35d70c20794f8707ff86aeb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCurses\r\n\n# ----------\r\n\n#\r\n\n# Find the curses or ncurses include file and library.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n# ``CURSES_FOUND``\r\n\n#   True if Curses is found.\r\n\n# ``CURSES_INCLUDE_DIRS``\r\n\n#   The include directories needed to use Curses.\r\n\n# ``CURSES_LIBRARIES``\r\n\n#   The libraries needed to use Curses.\r\n\n# ``CURSES_HAVE_CURSES_H``\r\n\n#   True if curses.h is available.\r\n\n# ``CURSES_HAVE_NCURSES_H``\r\n\n#   True if ncurses.h is available.\r\n\n# ``CURSES_HAVE_NCURSES_NCURSES_H``\r\n\n#   True if ``ncurses/ncurses.h`` is available.\r\n\n# ``CURSES_HAVE_NCURSES_CURSES_H``\r\n\n#   True if ``ncurses/curses.h`` is available.\r\n\n#\r\n\n# Set ``CURSES_NEED_NCURSES`` to ``TRUE`` before the\r\n\n# ``find_package(Curses)`` call if NCurses functionality is required.\r\n\n#\r\n\n# Backward Compatibility\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variable are provided for backward compatibility:\r\n\n#\r\n\n# ``CURSES_INCLUDE_DIR``\r\n\n#   Path to Curses include.  Use ``CURSES_INCLUDE_DIRS`` instead.\r\n\n# ``CURSES_LIBRARY``\r\n\n#   Path to Curses library.  Use ``CURSES_LIBRARIES`` instead.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# http://cygwin.com/ml/cygwin-announce/2010-01/msg00002.html\r\n\n# cygwin ncurses stopped providing curses.h symlinks see above\r\n\n# message.  Cygwin is an ncurses package, so force ncurses on\r\n\n# cygwin if the curses.h is missing\r\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Not sure the logic is correct here.\r\n\n# If NCurses is required, use the function wsyncup() to check if the library\r\n\n# has NCurses functionality (at least this is where it breaks on NetBSD).\r\n\n# If wsyncup is in curses, use this one.\r\n\n# If not, try to find ncurses and check if this has the symbol.\r\n\n# Once the ncurses library is found, search the ncurses.h header first, but\r\n\n# some web pages also say that even with ncurses there is not always a ncurses.h:\r\n\n# http://osdir.com/ml/gnome.apps.mc.devel/2002-06/msg00029.html\r\n\n# So at first try ncurses.h, if not found, try to find curses.h under the same\r\n\n# prefix as the library was found, if still not found, try curses.h with the\r\n\n# default search paths.\r\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use CURSES_NCURSES_INCLUDE_PATH if set, for compatibility.\r\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Previous versions of FindCurses provided these values.\r\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Previous versions of FindCurses provided these values.\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Report whether each possible header name exists in the include directory.\r\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Previous versions of FindCurses provided these values.\r\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Need to provide the *_LIBRARIES\r\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Provide the *_INCLUDE_DIRS result.\r\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# compatibility\r\n",
        "Line" : 191,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 12
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCxxTest.cmake" : {
      "ObjectId" : "dc06c9948eeb1f4b5ae9bbee869bdc15f783bca4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCxxTest\r\n\n# -----------\r\n\n#\r\n\n# Find CxxTest\r\n\n#\r\n\n# Find the CxxTest suite and declare a helper macro for creating unit\r\n\n# tests and integrating them with CTest.  For more details on CxxTest\r\n\n# see http://cxxtest.tigris.org\r\n\n#\r\n\n# INPUT Variables\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    CXXTEST_USE_PYTHON [deprecated since 1.3]\r\n\n#        Only used in the case both Python & Perl\r\n\n#        are detected on the system to control\r\n\n#        which CxxTest code generator is used.\r\n\n#        Valid only for CxxTest version 3.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        NOTE: In older versions of this Find Module,\r\n\n#        this variable controlled if the Python test\r\n\n#        generator was used instead of the Perl one,\r\n\n#        regardless of which scripting language the\r\n\n#        user had installed.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    CXXTEST_TESTGEN_ARGS (since CMake 2.8.3)\r\n\n#        Specify a list of options to pass to the CxxTest code\r\n\n#        generator.  If not defined, --error-printer is\r\n\n#        passed.\r\n\n#\r\n\n#\r\n\n#\r\n\n# OUTPUT Variables\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    CXXTEST_FOUND\r\n\n#        True if the CxxTest framework was found\r\n\n#    CXXTEST_INCLUDE_DIRS\r\n\n#        Where to find the CxxTest include directory\r\n\n#    CXXTEST_PERL_TESTGEN_EXECUTABLE\r\n\n#        The perl-based test generator\r\n\n#    CXXTEST_PYTHON_TESTGEN_EXECUTABLE\r\n\n#        The python-based test generator\r\n\n#    CXXTEST_TESTGEN_EXECUTABLE (since CMake 2.8.3)\r\n\n#        The test generator that is actually used (chosen using user preferences\r\n\n#        and interpreters found in the system)\r\n\n#    CXXTEST_TESTGEN_INTERPRETER (since CMake 2.8.3)\r\n\n#        The full path to the Perl or Python executable on the system, on\r\n\n#        platforms where the script cannot be executed using its shebang line.\r\n\n#\r\n\n#\r\n\n#\r\n\n# MACROS for optional use by CMake users:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     CXXTEST_ADD_TEST(<test_name> <gen_source_file> <input_files_to_testgen...>)\r\n\n#        Creates a CxxTest runner and adds it to the CTest testing suite\r\n\n#        Parameters:\r\n\n#            test_name               The name of the test\r\n\n#            gen_source_file         The generated source filename to be\r\n\n#                                    generated by CxxTest\r\n\n#            input_files_to_testgen  The list of header files containing the\r\n\n#                                    CxxTest::TestSuite's to be included in\r\n\n#                                    this runner\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        #==============\r\n\n#        Example Usage:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#            find_package(CxxTest)\r\n\n#            if(CXXTEST_FOUND)\r\n\n#                include_directories(${CXXTEST_INCLUDE_DIR})\r\n\n#                enable_testing()\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#                CXXTEST_ADD_TEST(unittest_foo foo_test.cc\r\n\n#                                  ${CMAKE_CURRENT_SOURCE_DIR}/foo_test.h)\r\n\n#                target_link_libraries(unittest_foo foo) # as needed\r\n\n#            endif()\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#               This will (if CxxTest is found):\r\n\n#               1. Invoke the testgen executable to autogenerate foo_test.cc in the\r\n\n#                  binary tree from \"foo_test.h\" in the current source directory.\r\n\n#               2. Create an executable and test called unittest_foo.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#       #=============\r\n\n#       Example foo_test.h:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#           #include <cxxtest/TestSuite.h>\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#           class MyTestSuite : public CxxTest::TestSuite\r\n\n#           {\r\n\n#           public:\r\n\n#              void testAddition( void )\r\n\n#              {\r\n\n#                 TS_ASSERT( 1 + 1 > 1 );\r\n\n#                 TS_ASSERT_EQUALS( 1 + 1, 2 );\r\n\n#              }\r\n\n#           };\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version 1.4 (11/18/10) (CMake 2.8.4)\r\n\n#     Issue 11384: Added support to the CXX_ADD_TEST macro so header\r\n\n#                  files (containing the tests themselves) show up in\r\n\n#                  Visual Studio and other IDEs.\r\n\n#\r\n\n# Version 1.3 (8/19/10) (CMake 2.8.3)\r\n\n#     Included patch by Simone Rossetto to check if either Python or Perl\r\n\n#     are present in the system.  Whichever intepreter that is detected\r\n\n#     is now used to run the test generator program.  If both interpreters\r\n\n#     are detected, the CXXTEST_USE_PYTHON variable is obeyed.\r\n\n#\r\n\n#     Also added support for CXXTEST_TESTGEN_ARGS, for manually specifying\r\n\n#     options to the CxxTest code generator.\r\n\n# Version 1.2 (3/2/08)\r\n\n#     Included patch from Tyler Roscoe to have the perl & python binaries\r\n\n#     detected based on CXXTEST_INCLUDE_DIR\r\n\n# Version 1.1 (2/9/08)\r\n\n#     Clarified example to illustrate need to call target_link_libraries()\r\n\n#     Changed commands to lowercase\r\n\n#     Added licensing info\r\n\n# Version 1.0 (1/8/08)\r\n\n#     Fixed CXXTEST_INCLUDE_DIRS so it will work properly\r\n\n#     Eliminated superfluous CXXTEST_FOUND assignment\r\n\n#     Cleaned up and added more documentation\r\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================\r\n\n# CXXTEST_ADD_TEST (public macro)\r\n\n#=============================================================\r\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================\r\n\n# main()\r\n\n#=============================================================\r\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindCygwin.cmake" : {
      "ObjectId" : "4b3bea432c1d42d01fb87d08116a039390b686ff",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindCygwin\r\n\n# ----------\r\n\n#\r\n\n# this module looks for Cygwin\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindDCMTK.cmake" : {
      "ObjectId" : "1d846307193e4551439b756514af9ff0ea20ec79",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindDCMTK\r\n\n# ---------\r\n\n#\r\n\n# Find DCMTK libraries and applications\r\n\n#\r\n\n# The module defines the following variables::\r\n\n#\r\n\n#  DCMTK_INCLUDE_DIRS  - Directories to include to use DCMTK\r\n\n#  DCMTK_LIBRARIES     - Files to link against to use DCMTK\r\n\n#  DCMTK_FOUND         - If false, don't try to use DCMTK\r\n\n#  DCMTK_DIR           - (optional) Source directory for DCMTK\r\n\n#\r\n\n# Compatibility\r\n\n# ^^^^^^^^^^^^^\r\n\n#\r\n\n# This module is able to find a version of DCMTK that does or does not export\r\n\n# a *DCMTKConfig.cmake* file. It applies a two step process:\r\n\n#\r\n\n# * Step 1:  Attempt to find DCMTK version providing a *DCMTKConfig.cmake* file.\r\n\n# * Step 2:  If step 1 failed, rely on *FindDCMTK.cmake* to set `DCMTK_*` variables details below.\r\n\n#\r\n\n#\r\n\n# `Recent DCMTK\r\n\n# <http://git.dcmtk.org/web?p=dcmtk.git;a=commit;h=662ae187c493c6b9a73dd5e3875372cebd0c11fe>`_\r\n\n# provides a *DCMTKConfig.cmake* :manual:`package configuration file\r\n\n# <cmake-packages(7)>`. To exclusively use the package configuration file\r\n\n# (recommended when possible), pass the `NO_MODULE` option to\r\n\n# :command:`find_package`. For example, `find_package(DCMTK NO_MODULE)`.\r\n\n# This requires official DCMTK snapshot *3.6.1_20140617* or newer.\r\n\n#\r\n\n#\r\n\n# Until all clients update to the more recent DCMTK, build systems will need\r\n\n# to support different versions of DCMTK.\r\n\n#\r\n\n# On any given system, the following combinations of DCMTK versions could be\r\n\n# considered:\r\n\n#\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# |        |   SYSTEM DCMTK      |      LOCAL DCMTK      |     Supported ?   |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case A |   NA                |      [ ] DCMTKConfig  |         YES       |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case B |   NA                |      [X] DCMTKConfig  |         YES       |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case C |   [ ] DCMTKConfig   |      NA               |         YES       |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case D |   [X] DCMTKConfig   |      NA               |         YES       |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case E |   [ ] DCMTKConfig   |      [ ] DCMTKConfig  |         YES (*)   |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case F |   [X] DCMTKConfig   |      [ ] DCMTKConfig  |         NO        |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case G |   [ ] DCMTKConfig   |      [X] DCMTKConfig  |         YES       |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n# | Case H |   [X] DCMTKConfig   |      [X] DCMTKConfig  |         YES       |\r\n\n# +--------+---------------------+-----------------------+-------------------+\r\n\n#\r\n\n#  (*) See Troubleshooting section.\r\n\n#\r\n\n# Legend:\r\n\n#\r\n\n#   NA ...............: Means that no System or Local DCMTK is available\r\n\n#\r\n\n#   [ ] DCMTKConfig ..: Means that the version of DCMTK does NOT export a DCMTKConfig.cmake file.\r\n\n#\r\n\n#   [X] DCMTKConfig ..: Means that the version of DCMTK exports a DCMTKConfig.cmake file.\r\n\n#\r\n\n#\r\n\n# Troubleshooting\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# What to do if my project finds a different version of DCMTK?\r\n\n#\r\n\n# Remove DCMTK entry from the CMake cache per :command:`find_package`\r\n\n# documentation.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# Written for VXL by Amitha Perera.\r\n\n# Upgraded for GDCM by Mathieu Malaterre.\r\n\n# Modified for EasyViz by Thomas Sondergaard.\r\n\n#\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ensure that DCMTK_DIR is set to a reasonable default value\r\n\n# so that DCMTK libraries can be found on a standard Unix distribution.\r\n\n# It also overwrite the value of DCMTK_DIR after this one has been\r\n\n# set by a successful discovery of DCMTK by the unpatched FindDCMTK.cmake module\r\n\n# distributed with CMake (as of 0167cea)\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\r\n\n# Step1: Attempt to find a version of DCMTK providing a DCMTKConfig.cmake file.\r\n\n#\r\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Restore the value reset by the previous call to 'find_package(DCMTK QUIET NO_MODULE)'\r\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\r\n\n# Step2: Attempt to find a version of DCMTK that does NOT provide a DCMTKConfig.cmake file.\r\n\n#\r\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# prefer DCMTK_DIR over default system paths like /usr/lib\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# this is given to FIND_LIBRARY or FIND_PATH\r\n",
        "Line" : 135,
        "CharPositionInLine" : 63
      },
      "9" : {
        "Text" : "# Find all libraries, store debug and release separately\r\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Find Release libraries\r\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Find Debug libraries\r\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Add libraries to variable according to build type\r\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Hack - Not having a DCMTKConfig.cmake file to read the settings from, we will attempt to\r\n\n# find the library in all cases.\r\n\n# Ideally, pthread library should be discovered only if DCMTK_WITH_THREADS is enabled.\r\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\r\n\n# SPECIFIC CASE FOR DCMTK BUILD DIR as DCMTK_DIR\r\n\n# (as opposed to a DCMTK install dir)\r\n\n# Have to find the source directory.\r\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# add the 'include' path so eg\r\n\n#include \"dcmtk/dcmimgle/dcmimage.h\"\r\n\n# works\r\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Compatibility: This variable is deprecated\r\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Workaround bug in packaging of DCMTK 3.6.0 on Debian.\r\n\n# See http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=637687\r\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindDart.cmake" : {
      "ObjectId" : "5b7318bf6515b5c12a384d449c5a848eb11e9fa7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindDart\r\n\n# --------\r\n\n#\r\n\n# Find DART\r\n\n#\r\n\n# This module looks for the dart testing software and sets DART_ROOT to\r\n\n# point to where it found it.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindDevIL.cmake" : {
      "ObjectId" : "77ae672e5bdbaadc687d51ef2982946d38287150",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindDevIL\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module locates the developer's image library.\r\n\n# http://openil.sourceforge.net/\r\n\n#\r\n\n# This module sets:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    IL_LIBRARIES -   the name of the IL library. These include the full path to\r\n\n#                     the core DevIL library. This one has to be linked into the\r\n\n#                     application.\r\n\n#    ILU_LIBRARIES -  the name of the ILU library. Again, the full path. This\r\n\n#                     library is for filters and effects, not actual loading. It\r\n\n#                     doesn't have to be linked if the functionality it provides\r\n\n#                     is not used.\r\n\n#    ILUT_LIBRARIES - the name of the ILUT library. Full path. This part of the\r\n\n#                     library interfaces with OpenGL. It is not strictly needed\r\n\n#                     in applications.\r\n\n#    IL_INCLUDE_DIR - where to find the il.h, ilu.h and ilut.h files.\r\n\n#    IL_FOUND -       this is set to TRUE if all the above variables were set.\r\n\n#                     This will be set to false if ILU or ILUT are not found,\r\n\n#                     even if they are not needed. In most systems, if one\r\n\n#                     library is found all the others are as well. That's the\r\n\n#                     way the DevIL developers release it.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Add version support.\r\n\n# Tested under Linux and Windows (MSVC)\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"IL_INCLUDE_DIR is ${IL_INCLUDE_DIR}\")\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#message(\"IL_LIBRARIES is ${IL_LIBRARIES}\")\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#message(\"ILUT_LIBRARIES is ${ILUT_LIBRARIES}\")\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#message(\"ILU_LIBRARIES is ${ILU_LIBRARIES}\")\r\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindDoxygen.cmake" : {
      "ObjectId" : "7069a4f24b8d2f9969da1b702a17565abfd3fd99",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindDoxygen\r\n\n# -----------\r\n\n#\r\n\n# This module looks for Doxygen and the path to Graphviz's dot\r\n\n#\r\n\n# Doxygen is a documentation generation tool.  Please see\r\n\n# http://www.doxygen.org\r\n\n#\r\n\n# This module accepts the following optional variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    DOXYGEN_SKIP_DOT       = If true this module will skip trying to find Dot\r\n\n#                             (an optional component often used by Doxygen)\r\n\n#\r\n\n#\r\n\n#\r\n\n# This modules defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    DOXYGEN_EXECUTABLE     = The path to the doxygen command.\r\n\n#    DOXYGEN_FOUND          = Was Doxygen found or not?\r\n\n#    DOXYGEN_VERSION        = The version reported by doxygen --version\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    DOXYGEN_DOT_EXECUTABLE = The path to the dot program used by doxygen.\r\n\n#    DOXYGEN_DOT_FOUND      = Was Dot found or not?\r\n\n#\r\n\n# For compatibility with older versions of CMake, the now-deprecated\r\n\n# variable ``DOXYGEN_DOT_PATH`` is set to the path to the directory\r\n\n# containing ``dot`` as reported in ``DOXYGEN_DOT_EXECUTABLE``.\r\n\n# The path may have forward slashes even on Windows and is not\r\n\n# suitable for direct substitution into a ``Doxyfile.in`` template.\r\n\n# If you need this value, use :command:`get_filename_component`\r\n\n# to compute it from ``DOXYGEN_DOT_EXECUTABLE`` directly, and\r\n\n# perhaps the :command:`file(TO_NATIVE_PATH)` command to prepare\r\n\n# the path for a Doxygen configuration file.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For backwards compatibility support\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ===== Rationale for OS X AppBundle mods below =====\r\n\n#     With the OS X GUI version, Doxygen likes to be installed to /Applications and\r\n\n#     it contains the doxygen executable in the bundle. In the versions I've\r\n\n#     seen, it is located in Resources, but in general, more often binaries are\r\n\n#     located in MacOS.\r\n\n#\r\n\n#     NOTE: The official Doxygen.app that is distributed for OS X uses non-standard\r\n\n#     conventions.  Instead of the command-line \"doxygen\" tool being placed in\r\n\n#     Doxygen.app/Contents/MacOS, \"Doxywizard\" is placed there instead and\r\n\n#     \"doxygen\" is placed in Contents/Resources.  This is most likely done\r\n\n#     so that something happens when people double-click on the Doxygen.app\r\n\n#     package.  Unfortunately, CMake gets confused by this as when it sees the\r\n\n#     bundle it uses \"Doxywizard\" as the executable to use instead of\r\n\n#     \"doxygen\".  Therefore to work-around this issue we temporarily disable\r\n\n#     the app-bundle feature, just for this CMake module:\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  Save the old setting\r\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Disable the App-bundle detection feature\r\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#     FYI:\r\n\n#     In the older versions of OS X Doxygen, dot was included with the\r\n\n#     Doxygen bundle. But the new versions require you to download\r\n\n#     Graphviz.app which contains \"dot\" in it's bundle.\r\n\n# ============== End OSX stuff ================\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\r\n\n# Find Doxygen...\r\n\n#\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\r\n\n# Find Dot...\r\n\n#\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The Doxyfile wants the path to Dot, not the entire path and executable\r\n",
        "Line" : 126,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#\r\n\n# Backwards compatibility...\r\n\n#\r\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Restore the old app-bundle setting setting\r\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Maintain the _FOUND variables as \"YES\" or \"NO\" for backwards compatibility\r\n\n# (allows people to stuff them directly into Doxyfile with configure_file())\r\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For backwards compatibility support\r\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindEXPAT.cmake" : {
      "ObjectId" : "b13306e31025ecc058e0f86bdb0e5fe969d6580c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindEXPAT\r\n\n# ---------\r\n\n#\r\n\n# Find expat\r\n\n#\r\n\n# Find the native EXPAT headers and libraries.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   EXPAT_INCLUDE_DIRS - where to find expat.h, etc.\r\n\n#   EXPAT_LIBRARIES    - List of libraries when using expat.\r\n\n#   EXPAT_FOUND        - True if expat found.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the header file.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the library.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Copy the results to the output variables.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindFLEX.cmake" : {
      "ObjectId" : "c08f3865719ce9a2f9f2831f0632f9b06c4ed59b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindFLEX\r\n\n# --------\r\n\n#\r\n\n# Find flex executable and provides a macro to generate custom build rules\r\n\n#\r\n\n#\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FLEX_FOUND - true is flex executable is found\r\n\n#   FLEX_EXECUTABLE - the path to the flex executable\r\n\n#   FLEX_VERSION - the version of flex\r\n\n#   FLEX_LIBRARIES - The flex libraries\r\n\n#   FLEX_INCLUDE_DIRS - The path to the flex headers\r\n\n#\r\n\n#\r\n\n#\r\n\n# The minimum required version of flex can be specified using the\r\n\n# standard syntax, e.g.  find_package(FLEX 2.5.13)\r\n\n#\r\n\n#\r\n\n#\r\n\n# If flex is found on the system, the module provides the macro:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FLEX_TARGET(Name FlexInput FlexOutput\r\n\n#               [COMPILE_FLAGS <string>]\r\n\n#               [DEFINES_FILE <string>]\r\n\n#               )\r\n\n#\r\n\n# which creates a custom command to generate the <FlexOutput> file from\r\n\n# the <FlexInput> file.  If COMPILE_FLAGS option is specified, the next\r\n\n# parameter is added to the flex command line. If flex is configured to\r\n\n# output a header file, the DEFINES_FILE option may be used to specify its\r\n\n# name. Name is an alias used to get details of this custom command.\r\n\n# Indeed the macro defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FLEX_${Name}_DEFINED - true is the macro ran successfully\r\n\n#   FLEX_${Name}_OUTPUTS - the source file generated by the custom rule, an\r\n\n#   alias for FlexOutput\r\n\n#   FLEX_${Name}_INPUT - the flex source file, an alias for ${FlexInput}\r\n\n#   FLEX_${Name}_OUTPUT_HEADER - the header flex output, if any.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Flex scanners oftenly use tokens defined by Bison: the code generated\r\n\n# by Flex depends of the header generated by Bison.  This module also\r\n\n# defines a macro:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ADD_FLEX_BISON_DEPENDENCY(FlexTarget BisonTarget)\r\n\n#\r\n\n# which adds the required dependency between a scanner and a parser\r\n\n# where <FlexTarget> and <BisonTarget> are the first parameters of\r\n\n# respectively FLEX_TARGET and BISON_TARGET macros.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ====================================================================\r\n\n#   Example:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    find_package(BISON)\r\n\n#    find_package(FLEX)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)\r\n\n#    FLEX_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp)\r\n\n#    ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    include_directories(${CMAKE_CURRENT_BINARY_DIR})\r\n\n#    add_executable(Foo\r\n\n#       Foo.cc\r\n\n#       ${BISON_MyParser_OUTPUTS}\r\n\n#       ${FLEX_MyScanner_OUTPUTS}\r\n\n#    )\r\n\n#   ====================================================================\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# older versions of flex printed \"/full/path/to/executable version X.Y\"\r\n\n# newer versions use \"basename(executable) X.Y\"\r\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#============================================================\r\n\n# FLEX_TARGET (public macro)\r\n\n#============================================================\r\n\n#\r\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#============================================================\r\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#============================================================\r\n\n# ADD_FLEX_BISON_DEPENDENCY (public macro)\r\n\n#============================================================\r\n\n#\r\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#============================================================\r\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindFLTK.cmake" : {
      "ObjectId" : "6ed55bb06bda9f15de763f66a9d7358765c4725d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindFLTK\r\n\n# --------\r\n\n#\r\n\n# Find the native FLTK includes and library\r\n\n#\r\n\n#\r\n\n#\r\n\n# By default FindFLTK.cmake will search for all of the FLTK components\r\n\n# and add them to the FLTK_LIBRARIES variable.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    You can limit the components which get placed in FLTK_LIBRARIES by\r\n\n#    defining one or more of the following three options:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      FLTK_SKIP_OPENGL, set to true to disable searching for opengl and\r\n\n#                        the FLTK GL library\r\n\n#      FLTK_SKIP_FORMS, set to true to disable searching for fltk_forms\r\n\n#      FLTK_SKIP_IMAGES, set to true to disable searching for fltk_images\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      FLTK_SKIP_FLUID, set to true if the fluid binary need not be present\r\n\n#                       at build time\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following variables will be defined:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      FLTK_FOUND, True if all components not skipped were found\r\n\n#      FLTK_INCLUDE_DIR, where to find include files\r\n\n#      FLTK_LIBRARIES, list of fltk libraries you should link against\r\n\n#      FLTK_FLUID_EXECUTABLE, where to find the Fluid tool\r\n\n#      FLTK_WRAP_UI, This enables the FLTK_WRAP_UI command\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following cache variables are assigned but should not be used.\r\n\n# See the FLTK_LIBRARIES variable instead.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      FLTK_BASE_LIBRARY   = the full path to fltk.lib\r\n\n#      FLTK_GL_LIBRARY     = the full path to fltk_gl.lib\r\n\n#      FLTK_FORMS_LIBRARY  = the full path to fltk_forms.lib\r\n\n#      FLTK_IMAGES_LIBRARY = the full path to fltk_images.lib\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  Platform dependent libraries required by FLTK\r\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If FLTK_INCLUDE_DIR is already defined we assigne its value to FLTK_DIR\r\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If FLTK has been built using CMake we try to find everything directly\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Search only if the location is not already known.\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get the system search path as a list.\r\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Construct a set of paths relative to the system search path.\r\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\r\n\n# Look for an installation or build tree.\r\n\n#\r\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Look for an environment variable FLTK_DIR.\r\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Look in places relative to the system executable search path.\r\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Look in standard UNIX install locations.\r\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Help the user find it if we cannot.\r\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Check if FLTK was built using CMake\r\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Fluid\r\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# mark_as_advanced(FLTK_FLUID_EXECUTABLE)\r\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Add the extra libraries\r\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# if FLTK was not built using CMake\r\n\n# Find fluid executable.\r\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Use location of fluid to help find everything else.\r\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#\r\n\n# Try to find FLTK include dir using fltk-config\r\n\n#\r\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Use fltk-config to generate a list of possible include directories\r\n",
        "Line" : 202,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# fltk 1.1.9 has Fl.H (#8376)\r\n",
        "Line" : 226,
        "CharPositionInLine" : 33
      },
      "22" : {
        "Text" : "#\r\n\n# Try to find FLTK library\r\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Find the extra libraries needed for the fltk_images library.\r\n",
        "Line" : 256,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# The EXEC_PROGRAM will not be inherited into subdirectories from\r\n\n# the file that originally included this module.  Save the answer.\r\n",
        "Line" : 264,
        "CharPositionInLine" : 10
      },
      "25" : {
        "Text" : "# Append all of the required libraries together (by default, everything)\r\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# The following deprecated settings are for compatibility with CMake 1.4\r\n",
        "Line" : 303,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindFLTK2.cmake" : {
      "ObjectId" : "320ce9eb3663191bf95419fec22d68e856dacb8b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindFLTK2\r\n\n# ---------\r\n\n#\r\n\n# Find the native FLTK2 includes and library\r\n\n#\r\n\n# The following settings are defined\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FLTK2_FLUID_EXECUTABLE, where to find the Fluid tool\r\n\n#   FLTK2_WRAP_UI, This enables the FLTK2_WRAP_UI command\r\n\n#   FLTK2_INCLUDE_DIR, where to find include files\r\n\n#   FLTK2_LIBRARIES, list of fltk2 libraries\r\n\n#   FLTK2_FOUND, Don't use FLTK2 if false.\r\n\n#\r\n\n# The following settings should not be used in general.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FLTK2_BASE_LIBRARY   = the full path to fltk2.lib\r\n\n#   FLTK2_GL_LIBRARY     = the full path to fltk2_gl.lib\r\n\n#   FLTK2_IMAGES_LIBRARY = the full path to fltk2_images.lib\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  Platform dependent libraries required by FLTK2\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If FLTK2_INCLUDE_DIR is already defined we assign its value to FLTK2_DIR\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If FLTK2 has been built using CMake we try to find everything directly\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Search only if the location is not already known.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get the system search path as a list.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Construct a set of paths relative to the system search path.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\r\n\n# Look for an installation or build tree.\r\n\n#\r\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Look for an environment variable FLTK2_DIR.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Look in places relative to the system executable search path.\r\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Look in standard UNIX install locations.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Help the user find it if we cannot.\r\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If FLTK2 was found, load the configuration file to get the rest of the\r\n\n# settings.\r\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check if FLTK2 was built using CMake\r\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Fluid\r\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Add the extra libraries\r\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# if FLTK2 was not built using CMake\r\n\n# Find fluid executable.\r\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Use location of fluid to help find everything else.\r\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Find the extra libraries needed for the fltk_images library.\r\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# The EXEC_PROGRAM will not be inherited into subdirectories from\r\n\n# the file that originally included this module.  Save the answer.\r\n",
        "Line" : 207,
        "CharPositionInLine" : 10
      },
      "21" : {
        "Text" : "# The following deprecated settings are for compatibility with CMake 1.4\r\n",
        "Line" : 238,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# make FIND_PACKAGE friendly\r\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 23
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindFreetype.cmake" : {
      "ObjectId" : "849a629b1634f66504ae3ace9963013cb9a0b1b8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindFreetype\r\n\n# ------------\r\n\n#\r\n\n# Locate FreeType library\r\n\n#\r\n\n# This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   FREETYPE_LIBRARIES, the library to link against\r\n\n#   FREETYPE_FOUND, if false, do not try to link to FREETYPE\r\n\n#   FREETYPE_INCLUDE_DIRS, where to find headers.\r\n\n#   FREETYPE_VERSION_STRING, the version of freetype found (since CMake 2.8.8)\r\n\n#   This is the concatenation of the paths:\r\n\n#   FREETYPE_INCLUDE_DIR_ft2build\r\n\n#   FREETYPE_INCLUDE_DIR_freetype2\r\n\n#\r\n\n#\r\n\n#\r\n\n# $FREETYPE_DIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$FREETYPE_DIR used in building FREETYPE.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by Eric Wing.\r\n\n# Modifications by Alexander Neundorf.\r\n\n# This file has been renamed to \"FindFreetype.cmake\" instead of the correct\r\n\n# \"FindFreeType.cmake\" in order to be compatible with the one from KDE4, Alex.\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Ugh, FreeType seems to use some #include trickery which\r\n\n# makes this harder than it should be. It looks like they\r\n\n# put ft2build.h in a common/easier-to-find location which\r\n\n# then contains a #include to a more specific header in a\r\n\n# more specific location (#include <freetype/config/ftheader.h>).\r\n\n# Then from there, they need to set a bunch of #define's\r\n\n# so you can do something like:\r\n\n# #include FT_FREETYPE_H\r\n\n# Unfortunately, using CMake's mechanisms like include_directories()\r\n\n# wants explicit full paths and this trickery doesn't work too well.\r\n\n# I'm going to attempt to cut out the middleman and hope\r\n\n# everything still works.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set the user variables\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGCCXML.cmake" : {
      "ObjectId" : "6b11068160e26bd7ba771660578ec8134d7bb011",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGCCXML\r\n\n# ----------\r\n\n#\r\n\n# Find the GCC-XML front-end executable.\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module will define the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GCCXML - the GCC-XML front-end executable.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGDAL.cmake" : {
      "ObjectId" : "b20fb990cd8c5905f75099d70702cb888891345a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGDAL\r\n\n# --------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Locate gdal\r\n\n#\r\n\n# This module accepts the following environment variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     GDAL_DIR or GDAL_ROOT - Specify the location of GDAL\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module defines the following CMake variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     GDAL_FOUND - True if libgdal is found\r\n\n#     GDAL_LIBRARY - A variable pointing to the GDAL library\r\n\n#     GDAL_INCLUDE_DIR - Where to find the headers\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# $GDALDIR is an environment variable that would\r\n\n# correspond to the ./configure --prefix=$GDAL_DIR\r\n\n# used in building gdal.\r\n\n#\r\n\n# Created by Eric Wing. I'm not a gdal user, but OpenSceneGraph uses it\r\n\n# for osgTerrain so I whipped this module together for completeness.\r\n\n# I actually don't know the conventions or where files are typically\r\n\n# placed in distros.\r\n\n# Any real gdal users are encouraged to correct this (but please don't\r\n\n# break the OS X framework stuff when doing so which is what usually seems\r\n\n# to happen).\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This makes the presumption that you are include gdal.h like\r\n\n#\r\n\n#include \"gdal.h\"\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Fink\r\n",
        "Line" : 56,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 57,
        "CharPositionInLine" : 17
      },
      "6" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 58,
        "CharPositionInLine" : 15
      },
      "7" : {
        "Text" : "# Use gdal-config to obtain the library version (this should hopefully\r\n\n# allow us to -lgdal1.x.y where x.y are correct version)\r\n\n# For some reason, libgdal development packages do not contain\r\n\n# libgdal.so...\r\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Fink\r\n",
        "Line" : 73,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 74,
        "CharPositionInLine" : 23
      },
      "10" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 75,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 11
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGIF.cmake" : {
      "ObjectId" : "26f1d0b415459165d9677944b8339859973868ef",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGIF\r\n\n# -------\r\n\n#\r\n\n# This finds the GIF library (giflib)\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ``GIF_FOUND``\r\n\n#   True if giflib was found\r\n\n# ``GIF_LIBRARIES``\r\n\n#   Libraries to link to in order to use giflib\r\n\n# ``GIF_INCLUDE_DIR``\r\n\n#   where to find the headers\r\n\n# ``GIF_VERSION``\r\n\n#   3, 4 or a full version string (eg 5.1.4) for versions >= 4.1.6\r\n\n#\r\n\n# The minimum required version of giflib can be specified using the\r\n\n# standard syntax, e.g.  find_package(GIF 4)\r\n\n#\r\n\n# $GIF_DIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$GIF_DIR\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by Eric Wing.\r\n\n# Modifications by Alexander Neundorf, Ben Campbell\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the gif library can have many names :-/\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# see readme.txt\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Very basic version detection.\r\n\n# The GIF_LIB_VERSION string in gif_lib.h seems to be unreliable, since it seems\r\n\n# to be always \" Version 2.0, \" in versions 3.x of giflib.\r\n\n# In version 4 the member UserData was added to GifFileType, so we check for this\r\n\n# one.\r\n\n# Versions after 4.1.6 define GIFLIB_MAJOR, GIFLIB_MINOR, and GIFLIB_RELEASE\r\n\n# see http://giflib.sourceforge.net/gif_lib.html#compatibility\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check for the specific version defines (>=4.1.6 only)\r\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# yay - got exact version info\r\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# use UserData field to sniff version instead\r\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGLEW.cmake" : {
      "ObjectId" : "7e515e69bf214a5801795a69b5b8c1bc1c1f6b94",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGLEW\r\n\n# --------\r\n\n#\r\n\n# Find the OpenGL Extension Wrangler Library (GLEW)\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the :prop_tgt:`IMPORTED` target ``GLEW::GLEW``,\r\n\n# if GLEW has been found.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GLEW_INCLUDE_DIRS - include directories for GLEW\r\n\n#   GLEW_LIBRARIES - libraries to link against GLEW\r\n\n#   GLEW_FOUND - true if GLEW has been found and can be used\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGLU.cmake" : {
      "ObjectId" : "e5168413e6c4e4388f83dcafe4e4ab0128327d66",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use of this file is deprecated, and is here for backwards compatibility with CMake 1.4\r\n\n# GLU library is now found by FindOpenGL.cmake\r\n\n#\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGLUT.cmake" : {
      "ObjectId" : "ad987880875bbdaadc49dec51c0b408a5f20968b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGLUT\r\n\n# --------\r\n\n#\r\n\n# try to find glut library and include files.\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the :prop_tgt:`IMPORTED` targets:\r\n\n#\r\n\n# ``GLUT::GLUT``\r\n\n#  Defined if the system has GLUT.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GLUT_INCLUDE_DIR, where to find GL/glut.h, etc.\r\n\n#   GLUT_LIBRARIES, the libraries to link against\r\n\n#   GLUT_FOUND, If false, do not try to use GLUT.\r\n\n#\r\n\n# Also defined, but not for general use are:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GLUT_glut_LIBRARY = the full path to the glut library.\r\n\n#   GLUT_Xmu_LIBRARY  = the full path to the Xmu library.\r\n\n#   GLUT_Xi_LIBRARY   = the full path to the Xi Library.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Cocoa should always be a Framework, but we check to make sure.\r\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Is -lXi and -lXmu required on all platforms that have it?\r\n\n# If not, we need some way to figure out what platform we are on.\r\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#The following deprecated settings are for backwards compatibility with CMake1.4\r\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGSL.cmake" : {
      "ObjectId" : "f7ecade155223890e79fb2f9ca4e55052169951b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGSL\r\n\n# --------\r\n\n#\r\n\n# Find the native GSL includes and libraries.\r\n\n#\r\n\n# The GNU Scientific Library (GSL) is a numerical library for C and C++\r\n\n# programmers. It is free software under the GNU General Public\r\n\n# License.\r\n\n#\r\n\n# Imported Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# If GSL is found, this module defines the following :prop_tgt:`IMPORTED`\r\n\n# targets::\r\n\n#\r\n\n#  GSL::gsl      - The main GSL library.\r\n\n#  GSL::gslcblas - The CBLAS support library used by GSL.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables in your project::\r\n\n#\r\n\n#  GSL_FOUND          - True if GSL found on the local system\r\n\n#  GSL_INCLUDE_DIRS   - Location of GSL header files.\r\n\n#  GSL_LIBRARIES      - The GSL libraries.\r\n\n#  GSL_VERSION        - The version of the discovered GSL install.\r\n\n#\r\n\n# Hints\r\n\n# ^^^^^\r\n\n#\r\n\n# Set ``GSL_ROOT_DIR`` to a directory that contains a GSL installation.\r\n\n#\r\n\n# This script expects to find libraries at ``$GSL_ROOT_DIR/lib`` and the GSL\r\n\n# headers at ``$GSL_ROOT_DIR/include/gsl``.  The library directory may\r\n\n# optionally provide Release and Debug folders.  For Unix-like systems, this\r\n\n# script will use ``$GSL_ROOT_DIR/bin/gsl-config`` (if found) to aid in the\r\n\n# discovery GSL.\r\n\n#\r\n\n# Cache Variables\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module may set the following variables depending on platform and type\r\n\n# of GSL installation discovered.  These variables may optionally be set to\r\n\n# help this module find the correct files::\r\n\n#\r\n\n#  GSL_CBLAS_LIBRARY       - Location of the GSL CBLAS library.\r\n\n#  GSL_CBLAS_LIBRARY_DEBUG - Location of the debug GSL CBLAS library (if any).\r\n\n#  GSL_CONFIG_EXECUTABLE   - Location of the ``gsl-config`` script (if any).\r\n\n#  GSL_LIBRARY             - Location of the GSL library.\r\n\n#  GSL_LIBRARY_DEBUG       - Location of the debug GSL library (if any).\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\r\n\n# If the user has provided ``GSL_ROOT_DIR``, use it!  Choose items found\r\n\n# at this location over system locations.\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\r\n\n# As a first try, use the PkgConfig module.  This will work on many\r\n\n# *NIX systems.  See :module:`findpkgconfig`\r\n\n# This will return ``GSL_INCLUDEDIR`` and ``GSL_LIBDIR`` used below.\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================================\r\n\n# Set GSL_INCLUDE_DIRS and GSL_LIBRARIES. If we skipped the PkgConfig step, try\r\n\n# to find the libraries at $GSL_ROOT_DIR (if provided) or in standard system\r\n\n# locations.  These find_library and find_path calls will prefer custom\r\n\n# locations over standard locations (HINTS).  If the requested file is not found\r\n\n# at the HINTS location, standard system locations will be still be searched\r\n\n# (/usr/lib64 (Redhat), lib/i386-linux-gnu (Debian)).\r\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do we also have debug versions?\r\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we didn't use PkgConfig, try to find the version via gsl-config or by\r\n\n# reading gsl_version.h.\r\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 1. If gsl-config exists, query for the version.\r\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# 2. If gsl-config is not available, try looking in gsl/gsl_version.h\r\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# might also try scraping the directory name for a regex match \"gsl-X.X\"\r\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#=============================================================================\r\n\n# handle the QUIETLY and REQUIRED arguments and set GSL_FOUND to TRUE if all\r\n\n# listed variables are TRUE\r\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#=============================================================================\r\n\n# Register imported libraries:\r\n\n# 1. If we can find a Windows .dll file (or if we can find both Debug and\r\n\n#    Release libraries), we will set appropriate target properties for these.\r\n\n# 2. However, for most systems, we will only register the import location and\r\n\n#    include directory.\r\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Look for dlls, or Release and Debug libraries.\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Windows systems with dll libraries.\r\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Windows with dlls, but only Release libraries.\r\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# If we have both Debug and Release libraries\r\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# For all other environments (ones without dll libraries), create\r\n\n# the imported library targets.\r\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGTK.cmake" : {
      "ObjectId" : "f7f83297c70a27b1b83da40d26758ed5ab6b98cb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGTK\r\n\n# -------\r\n\n#\r\n\n# try to find GTK (and glib) and GTKGLArea\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GTK_INCLUDE_DIR   - Directories to include to use GTK\r\n\n#   GTK_LIBRARIES     - Files to link against to use GTK\r\n\n#   GTK_FOUND         - GTK was found\r\n\n#   GTK_GL_FOUND      - GTK's GL features were found\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't even bother under WIN32\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Some Linux distributions (e.g. Red Hat) have glibconfig.h\r\n\n# and glib.h in different directories, so we need to look\r\n\n# for both.\r\n\n#  - Atanas Georgiev <atanas@cs.columbia.edu>\r\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\r\n\n# The 12 suffix is thanks to the FreeBSD ports collection\r\n\n#\r\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Assume that if gtk and glib were found, the other\r\n\n# supporting libraries have also been found.\r\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGTK2.cmake" : {
      "ObjectId" : "3478b491135e9c1619f4a1d7bdaf63a4c15caaed",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGTK2\r\n\n# --------\r\n\n#\r\n\n# FindGTK2.cmake\r\n\n#\r\n\n# This module can find the GTK2 widget libraries and several of its\r\n\n# other optional components like gtkmm, glade, and glademm.\r\n\n#\r\n\n# NOTE: If you intend to use version checking, CMake 2.6.2 or later is\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        required.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Specify one or more of the following components as you call this find\r\n\n# module.  See example below.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    gtk\r\n\n#    gtkmm\r\n\n#    glade\r\n\n#    glademm\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following variables will be defined for your use\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    GTK2_FOUND - Were all of your specified components found?\r\n\n#    GTK2_INCLUDE_DIRS - All include directories\r\n\n#    GTK2_LIBRARIES - All libraries\r\n\n#    GTK2_TARGETS - All imported targets\r\n\n#    GTK2_DEFINITIONS - Additional compiler flags\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    GTK2_VERSION - The version of GTK2 found (x.y.z)\r\n\n#    GTK2_MAJOR_VERSION - The major version of GTK2\r\n\n#    GTK2_MINOR_VERSION - The minor version of GTK2\r\n\n#    GTK2_PATCH_VERSION - The patch version of GTK2\r\n\n#\r\n\n#\r\n\n#\r\n\n# Optional variables you can define prior to calling this module:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    GTK2_DEBUG - Enables verbose debugging of the module\r\n\n#    GTK2_ADDITIONAL_SUFFIXES - Allows defining additional directories to\r\n\n#                               search for include files\r\n\n#\r\n\n#\r\n\n#\r\n\n# ================= Example Usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    Call find_package() once, here are some examples to pick from:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    Require GTK 2.6 or later\r\n\n#        find_package(GTK2 2.6 REQUIRED gtk)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    Require GTK 2.10 or later and Glade\r\n\n#        find_package(GTK2 2.10 REQUIRED gtk glade)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    Search for GTK/GTKMM 2.8 or later\r\n\n#        find_package(GTK2 2.8 COMPONENTS gtk gtkmm)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    if(GTK2_FOUND)\r\n\n#       include_directories(${GTK2_INCLUDE_DIRS})\r\n\n#       add_executable(mygui mygui.cc)\r\n\n#       target_link_libraries(mygui ${GTK2_LIBRARIES})\r\n\n#    endif()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version 1.6 (CMake 3.0)\r\n\n#   * Create targets for each library\r\n\n#   * Do not link libfreetype\r\n\n# Version 1.5 (CMake 2.8.12)\r\n\n#   * 14236: Detect gthread library\r\n\n#            Detect pangocairo on windows\r\n\n#            Detect pangocairo with gtk module instead of with gtkmm\r\n\n#   * 14259: Use vc100 libraries with VS 11\r\n\n#   * 14260: Export a GTK2_DEFINITIONS variable to set /vd2 when appropriate\r\n\n#            (i.e. MSVC)\r\n\n#   * Use the optimized/debug syntax for _LIBRARY and _LIBRARIES variables when\r\n\n#     appropriate. A new set of _RELEASE variables was also added.\r\n\n#   * Remove GTK2_SKIP_MARK_AS_ADVANCED option, as now the variables are\r\n\n#     marked as advanced by SelectLibraryConfigurations\r\n\n#   * Detect gmodule, pangoft2 and pangoxft libraries\r\n\n# Version 1.4 (10/4/2012) (CMake 2.8.10)\r\n\n#   * 12596: Missing paths for FindGTK2 on NetBSD\r\n\n#   * 12049: Fixed detection of GTK include files in the lib folder on\r\n\n#            multiarch systems.\r\n\n# Version 1.3 (11/9/2010) (CMake 2.8.4)\r\n\n#   * 11429: Add support for detecting GTK2 built with Visual Studio 10.\r\n\n#            Thanks to Vincent Levesque for the patch.\r\n\n# Version 1.2 (8/30/2010) (CMake 2.8.3)\r\n\n#   * Merge patch for detecting gdk-pixbuf library (split off\r\n\n#     from core GTK in 2.21).  Thanks to Vincent Untz for the patch\r\n\n#     and Ricardo Cruz for the heads up.\r\n\n# Version 1.1 (8/19/2010) (CMake 2.8.3)\r\n\n#   * Add support for detecting GTK2 under macports (thanks to Gary Kramlich)\r\n\n# Version 1.0 (8/12/2010) (CMake 2.8.3)\r\n\n#   * Add support for detecting new pangommconfig.h header file\r\n\n#     (Thanks to Sune Vuorela & the Debian Project for the patch)\r\n\n#   * Add support for detecting fontconfig.h header\r\n\n#   * Call find_package(Freetype) since it's required\r\n\n#   * Add support for allowing users to add additional library directories\r\n\n#     via the GTK2_ADDITIONAL_SUFFIXES variable (kind of a future-kludge in\r\n\n#     case the GTK developers change versions on any of the directories in the\r\n\n#     future).\r\n\n# Version 0.8 (1/4/2010)\r\n\n#   * Get module working under MacOSX fink by adding /sw/include, /sw/lib\r\n\n#     to PATHS and the gobject library\r\n\n# Version 0.7 (3/22/09)\r\n\n#   * Checked into CMake CVS\r\n\n#   * Added versioning support\r\n\n#   * Module now defaults to searching for GTK if COMPONENTS not specified.\r\n\n#   * Added HKCU prior to HKLM registry key and GTKMM specific environment\r\n\n#      variable as per mailing list discussion.\r\n\n#   * Added lib64 to include search path and a few other search paths where GTK\r\n\n#      may be installed on Unix systems.\r\n\n#   * Switched to lowercase CMake commands\r\n\n#   * Prefaced internal variables with _GTK2 to prevent collision\r\n\n#   * Changed internal macros to functions\r\n\n#   * Enhanced documentation\r\n\n# Version 0.6 (1/8/08)\r\n\n#   Added GTK2_SKIP_MARK_AS_ADVANCED option\r\n\n# Version 0.5 (12/19/08)\r\n\n#   Second release to cmake mailing list\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================\r\n\n# _GTK2_GET_VERSION\r\n\n# Internal function to parse the version number in gtkversion.h\r\n\n#   _OUT_major = Major version number\r\n\n#   _OUT_minor = Minor version number\r\n\n#   _OUT_micro = Micro version number\r\n\n#   _gtkversion_hdr = Header file to parse\r\n\n#=============================================================\r\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#=============================================================\r\n\n# _GTK2_SIGCXX_GET_VERSION\r\n\n# Internal function to parse the version number in\r\n\n# sigc++config.h\r\n\n#   _OUT_major = Major version number\r\n\n#   _OUT_minor = Minor version number\r\n\n#   _OUT_micro = Micro version number\r\n\n#   _sigcxxversion_hdr = Header file to parse\r\n\n#=============================================================\r\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The header does not have the version macros; assume it is ``0.0.0``.\r\n",
        "Line" : 226,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#=============================================================\r\n\n# _GTK2_FIND_INCLUDE_DIR\r\n\n# Internal function to find the GTK include directories\r\n\n#   _var = variable to set (_INCLUDE_DIR is appended)\r\n\n#   _hdr = header file to look for\r\n\n#=============================================================\r\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If these ever change, things will break.\r\n",
        "Line" : 248,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#\r\n\n# NOTE: The following suffixes cause searching for header files in both of\r\n\n# these directories:\r\n\n#         /usr/include/<pkg>\r\n\n#         /usr/lib/<pkg>/include\r\n\n#\r\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# for /usr/lib/gtk-2.0/include\r\n",
        "Line" : 278,
        "CharPositionInLine" : 45
      },
      "10" : {
        "Text" : "#=============================================================\r\n\n# _GTK2_FIND_LIBRARY\r\n\n# Internal function to find libraries packaged with GTK2\r\n\n#   _var = library variable to create (_LIBRARY is appended)\r\n\n#=============================================================\r\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Not GTK versions per se but the versions encoded into Windows\r\n\n# import libraries (GtkMM 2.14.1 has a gtkmm-vc80-2_4.lib for example)\r\n\n# Also the MSVC libraries use _ for . (this is handled below)\r\n",
        "Line" : 340,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add vc80/vc90/vc100 midfixes\r\n",
        "Line" : 354,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Up to gtkmm-win 2.22.0-2 there are no vc110 libraries but vc100 can be used\r\n",
        "Line" : 362,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# For some silly reason the MSVC libraries use _ instead of .\r\n\n# in the version fields\r\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# And for debug\r\n",
        "Line" : 399,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# Copy list back to original names\r\n",
        "Line" : 406,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#=============================================================\r\n\n# _GTK2_ADD_TARGET\r\n\n# Internal function to create targets for GTK2\r\n\n#   _var = target to create\r\n\n#=============================================================\r\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Do not create the target if dependencies are missing\r\n",
        "Line" : 537,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "#=============================================================\r\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\r\n\n# main()\r\n\n#\r\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Assume they only want GTK\r\n",
        "Line" : 606,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#\r\n\n# If specified, enforce version number\r\n\n#\r\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# If we can't find the GTK include dir, we can't do version checking\r\n",
        "Line" : 638,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# If the version check fails, exit out of the module here\r\n",
        "Line" : 654,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "#\r\n\n# On MSVC, according to https://wiki.gnome.org/gtkmm/MSWindows, the /vd2 flag needs to be\r\n\n# passed to the compiler in order to use gtkmm\r\n\n#\r\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\r\n\n# Find all components\r\n\n#\r\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Left for compatibility with previous versions.\r\n",
        "Line" : 684,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Since sigc++ 2.5.1 c++11 support is required\r\n",
        "Line" : 768,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# These are the features needed by clients in order to include the\r\n\n# project headers:\r\n",
        "Line" : 775,
        "CharPositionInLine" : 16
      },
      "30" : {
        "Text" : "#\r\n\n# Solve for the GTK2 version if we haven't already\r\n\n#\r\n",
        "Line" : 865,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#\r\n\n# Try to enforce components\r\n\n#\r\n",
        "Line" : 876,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# This gets set to GTK2_FOUND\r\n",
        "Line" : 880,
        "CharPositionInLine" : 40
      },
      "33" : {
        "Text" : "# Unset our variables.\r\n",
        "Line" : 945,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 34
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGTest.cmake" : {
      "ObjectId" : "1770118ebaaaf8b212766c7cf90eda13ff13d9e0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGTest\r\n\n# ---------\r\n\n#\r\n\n# Locate the Google C++ Testing Framework.\r\n\n#\r\n\n# Imported targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\r\n\n#\r\n\n# ``GTest::GTest``\r\n\n#   The Google Test ``gtest`` library, if found; adds Thread::Thread\r\n\n#   automatically\r\n\n# ``GTest::Main``\r\n\n#   The Google Test ``gtest_main`` library, if found\r\n\n#\r\n\n#\r\n\n# Result variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables in your project:\r\n\n#\r\n\n# ``GTEST_FOUND``\r\n\n#   Found the Google Testing framework\r\n\n# ``GTEST_INCLUDE_DIRS``\r\n\n#   the directory containing the Google Test headers\r\n\n#\r\n\n# The library variables below are set as normal variables.  These\r\n\n# contain debug/optimized keywords when a debugging library is found.\r\n\n#\r\n\n# ``GTEST_LIBRARIES``\r\n\n#   The Google Test ``gtest`` library; note it also requires linking\r\n\n#   with an appropriate thread library\r\n\n# ``GTEST_MAIN_LIBRARIES``\r\n\n#   The Google Test ``gtest_main`` library\r\n\n# ``GTEST_BOTH_LIBRARIES``\r\n\n#   Both ``gtest`` and ``gtest_main``\r\n\n#\r\n\n# Cache variables\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following cache variables may also be set:\r\n\n#\r\n\n# ``GTEST_ROOT``\r\n\n#   The root directory of the Google Test installation (may also be\r\n\n#   set as an environment variable)\r\n\n# ``GTEST_MSVC_SEARCH``\r\n\n#   If compiling with MSVC, this variable can be set to ``MT`` or\r\n\n#   ``MD`` (the default) to enable searching a GTest build tree\r\n\n#\r\n\n#\r\n\n# Example usage\r\n\n# ^^^^^^^^^^^^^\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     enable_testing()\r\n\n#     find_package(GTest REQUIRED)\r\n\n#\r\n\n#     add_executable(foo foo.cc)\r\n\n#     target_link_libraries(foo GTest::GTest GTest::Main)\r\n\n#\r\n\n#     add_test(AllTestsInFoo foo)\r\n\n#\r\n\n#\r\n\n# Deeper integration with CTest\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# If you would like each Google test to show up in CTest as a test you\r\n\n# may use the following macro::\r\n\n#\r\n\n#     GTEST_ADD_TESTS(executable extra_args files...)\r\n\n#\r\n\n# ``executable``\r\n\n#   the path to the test executable\r\n\n# ``extra_args``\r\n\n#   a list of extra arguments to be passed to executable enclosed in\r\n\n#   quotes (or ``\"\"`` for none)\r\n\n# ``files...``\r\n\n#   a list of source files to search for tests and test fixtures.  Or\r\n\n#   ``AUTO`` to find them from executable target\r\n\n#\r\n\n# However, note that this macro will slow down your tests by running\r\n\n# an executable for each test and test fixture.\r\n\n#\r\n\n# Example usage::\r\n\n#\r\n\n#      set(FooTestArgs --foo 1 --bar 2)\r\n\n#      add_executable(FooTest FooUnitTest.cc)\r\n\n#      GTEST_ADD_TESTS(FooTest \"${FooTestArgs}\" AUTO)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# Thanks to Daniel Blezek <blezek@gmail.com> for the GTEST_ADD_TESTS code\r\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# obtain sources used for building that executable\r\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Parameterized tests have a different signature for the filter\r\n",
        "Line" : 116,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "#\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The provided /MD project files for Google Test add -md suffixes to the\r\n\n# library names.\r\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGettext.cmake" : {
      "ObjectId" : "512ccb0eb9c0efda4f8dda72c7a8999ca647b871",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGettext\r\n\n# -----------\r\n\n#\r\n\n# Find GNU gettext tools\r\n\n#\r\n\n# This module looks for the GNU gettext tools.  This module defines the\r\n\n# following values:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GETTEXT_MSGMERGE_EXECUTABLE: the full path to the msgmerge tool.\r\n\n#   GETTEXT_MSGFMT_EXECUTABLE: the full path to the msgfmt tool.\r\n\n#   GETTEXT_FOUND: True if gettext has been found.\r\n\n#   GETTEXT_VERSION_STRING: the version of gettext found (since CMake 2.8.8)\r\n\n#\r\n\n#\r\n\n#\r\n\n# Additionally it provides the following macros:\r\n\n#\r\n\n# GETTEXT_CREATE_TRANSLATIONS ( outputFile [ALL] file1 ...  fileN )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     This will create a target \"translations\" which will convert the\r\n\n#     given input po files into the binary output mo file. If the\r\n\n#     ALL option is used, the translations will also be created when\r\n\n#     building the default target.\r\n\n#\r\n\n# GETTEXT_PROCESS_POT_FILE( <potfile> [ALL] [INSTALL_DESTINATION <destdir>]\r\n\n# LANGUAGES <lang1> <lang2> ...  )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      Process the given pot file to mo files.\r\n\n#      If INSTALL_DESTINATION is given then automatically install rules will\r\n\n#      be created, the language subdirectory will be taken into account\r\n\n#      (by default use share/locale/).\r\n\n#      If ALL is specified, the pot file is processed when building the all traget.\r\n\n#      It creates a custom target \"potfile\".\r\n\n#\r\n\n# GETTEXT_PROCESS_PO_FILES( <lang> [ALL] [INSTALL_DESTINATION <dir>]\r\n\n# PO_FILES <po1> <po2> ...  )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      Process the given po files to mo files for the given language.\r\n\n#      If INSTALL_DESTINATION is given then automatically install rules will\r\n\n#      be created, the language subdirectory will be taken into account\r\n\n#      (by default use share/locale/).\r\n\n#      If ALL is specified, the po files are processed when building the all traget.\r\n\n#      It creates a custom target \"pofiles\".\r\n\n#\r\n\n# .. note::\r\n\n#   If you wish to use the Gettext library (libintl), use :module:`FindIntl`.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make it a real variable, so we can modify it here\r\n",
        "Line" : 92,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGit.cmake" : {
      "ObjectId" : "dc2d8c87e4f8067ec4a99bf4c2d52921a2db8bd4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGit\r\n\n# -------\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ``GIT_EXECUTABLE``\r\n\n#   Path to Git command-line client.\r\n\n# ``Git_FOUND``, ``GIT_FOUND``\r\n\n#   True if the Git command-line client was found.\r\n\n# ``GIT_VERSION_STRING``\r\n\n#   The version of Git found.\r\n\n#\r\n\n# Example usage:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    find_package(Git)\r\n\n#    if(Git_FOUND)\r\n\n#      message(\"Git found: ${GIT_EXECUTABLE}\")\r\n\n#    endif()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for 'git' or 'eg' (easy git)\r\n\n#\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prefer .cmd variants on Windows unless running in a Makefile\r\n\n# in the MSYS shell.\r\n\n#\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GitHub search path for Windows\r\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# SourceTree search path for Windows\r\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# First search the PATH and specific locations.\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Now look for installations in Git/ directories under typical installation\r\n\n# prefixes on Windows.  Exclude PATH from this search because VS 2017's\r\n\n# command prompt happens to have a PATH entry with a Git/ subdirectory\r\n\n# containing a minimal git not meant for general use.\r\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGnuTLS.cmake" : {
      "ObjectId" : "64205205daa6d605dfd235cd3072c9db3d0ee32b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGnuTLS\r\n\n# ----------\r\n\n#\r\n\n# Try to find the GNU Transport Layer Security library (gnutls)\r\n\n#\r\n\n#\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GNUTLS_FOUND - System has gnutls\r\n\n#   GNUTLS_INCLUDE_DIR - The gnutls include directory\r\n\n#   GNUTLS_LIBRARIES - The libraries needed to use gnutls\r\n\n#   GNUTLS_DEFINITIONS - Compiler switches required for using gnutls\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note that this doesn't try to find the gnutls-extra package.\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# in cache already\r\n",
        "Line" : 25,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# try using pkg-config to get the directories and then use these values\r\n\n# in the find_path() and find_library() calls\r\n\n# also fills in GNUTLS_DEFINITIONS, although that isn't normally useful\r\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindGnuplot.cmake" : {
      "ObjectId" : "5197e4464bb815e2f90dc277faab007b0f9ff535",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindGnuplot\r\n\n# -----------\r\n\n#\r\n\n# this module looks for gnuplot\r\n\n#\r\n\n#\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GNUPLOT_FOUND - system has Gnuplot\r\n\n#   GNUPLOT_EXECUTABLE - the Gnuplot executable\r\n\n#   GNUPLOT_VERSION_STRING - the version of Gnuplot found (since CMake 2.8.8)\r\n\n#\r\n\n#\r\n\n#\r\n\n# GNUPLOT_VERSION_STRING will not work for old versions like 3.7.1.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for compatibility\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindHDF5.cmake" : {
      "ObjectId" : "95ed9dc2f7212607d32c8ff79f2bf896be589257",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindHDF5\r\n\n# --------\r\n\n#\r\n\n# Find HDF5, a library for reading and writing self describing array data.\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module invokes the HDF5 wrapper compiler that should be installed\r\n\n# alongside HDF5.  Depending upon the HDF5 Configuration, the wrapper\r\n\n# compiler is called either h5cc or h5pcc.  If this succeeds, the module\r\n\n# will then call the compiler with the -show argument to see what flags\r\n\n# are used when compiling an HDF5 client application.\r\n\n#\r\n\n# The module will optionally accept the COMPONENTS argument.  If no\r\n\n# COMPONENTS are specified, then the find module will default to finding\r\n\n# only the HDF5 C library.  If one or more COMPONENTS are specified, the\r\n\n# module will attempt to find the language bindings for the specified\r\n\n# components.  The only valid components are C, CXX, Fortran, HL, and\r\n\n# Fortran_HL.  If the COMPONENTS argument is not given, the module will\r\n\n# attempt to find only the C bindings.\r\n\n#\r\n\n# On UNIX systems, this module will read the variable\r\n\n# HDF5_USE_STATIC_LIBRARIES to determine whether or not to prefer a\r\n\n# static link to a dynamic link for HDF5 and all of it's dependencies.\r\n\n# To use this feature, make sure that the HDF5_USE_STATIC_LIBRARIES\r\n\n# variable is set before the call to find_package.\r\n\n#\r\n\n# To provide the module with a hint about where to find your HDF5\r\n\n# installation, you can set the environment variable HDF5_ROOT.  The\r\n\n# Find module will then look in this path when searching for HDF5\r\n\n# executables, paths, and libraries.\r\n\n#\r\n\n# Both the serial and parallel HDF5 wrappers are considered and the first\r\n\n# directory to contain either one will be used.  In the event that both appear\r\n\n# in the same directory the serial version is preferentially selected. This\r\n\n# behavior can be reversed by setting the variable HDF5_PREFER_PARALLEL to\r\n\n# true.\r\n\n#\r\n\n# In addition to finding the includes and libraries required to compile\r\n\n# an HDF5 client application, this module also makes an effort to find\r\n\n# tools that come with the HDF5 distribution that may be useful for\r\n\n# regression testing.\r\n\n#\r\n\n# This module will define the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   HDF5_FOUND - true if HDF5 was found on the system\r\n\n#   HDF5_VERSION - HDF5 version in format Major.Minor.Release\r\n\n#   HDF5_INCLUDE_DIRS - Location of the hdf5 includes\r\n\n#   HDF5_INCLUDE_DIR - Location of the hdf5 includes (deprecated)\r\n\n#   HDF5_DEFINITIONS - Required compiler definitions for HDF5\r\n\n#   HDF5_LIBRARIES - Required libraries for all requested bindings\r\n\n#   HDF5_HL_LIBRARIES - Required libraries for the HDF5 high level API for all\r\n\n#                       bindings, if the HL component is enabled\r\n\n#\r\n\n# Available components are: C CXX Fortran and HL.  For each enabled language\r\n\n# binding, a corresponding HDF5_${LANG}_LIBRARIES variable will be defined.\r\n\n# If the HL component is enabled, then an HDF5_${LANG}_HL_LIBRARIES will\r\n\n# also be defined.  With all components enabled, the following variables will be defined:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   HDF5_C_LIBRARIES - Required libraries for the HDF5 C bindings\r\n\n#   HDF5_CXX_LIBRARIES - Required libraries for the HDF5 C++ bindings\r\n\n#   HDF5_Fortran_LIBRARIES - Required libraries for the HDF5 Fortran bindings\r\n\n#   HDF5_C_HL_LIBRARIES - Required libraries for the high level C bindings\r\n\n#   HDF5_CXX_HL_LIBRARIES - Required libraries for the high level C++ bindings\r\n\n#   HDF5_Fortran_HL_LIBRARIES - Required libraries for the high level Fortran\r\n\n#                               bindings.\r\n\n#\r\n\n#   HDF5_IS_PARALLEL - Whether or not HDF5 was found with parallel IO support\r\n\n#   HDF5_C_COMPILER_EXECUTABLE - the path to the HDF5 C wrapper compiler\r\n\n#   HDF5_CXX_COMPILER_EXECUTABLE - the path to the HDF5 C++ wrapper compiler\r\n\n#   HDF5_Fortran_COMPILER_EXECUTABLE - the path to the HDF5 Fortran wrapper compiler\r\n\n#   HDF5_C_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary C compiler\r\n\n#                                               which is also the HDF5 wrapper\r\n\n#   HDF5_CXX_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary C++\r\n\n#                                                 compiler which is also\r\n\n#                                                 the HDF5 wrapper\r\n\n#   HDF5_Fortran_COMPILER_EXECUTABLE_NO_INTERROGATE - path to the primary\r\n\n#                                                     Fortran compiler which\r\n\n#                                                     is also the HDF5 wrapper\r\n\n#   HDF5_DIFF_EXECUTABLE - the path to the HDF5 dataset comparison tool\r\n\n#\r\n\n# The following variable can be set to guide the search for HDF5 libraries and includes:\r\n\n#\r\n\n# ``HDF5_ROOT``\r\n\n#   Specify the path to the HDF5 installation to use.\r\n\n#\r\n\n# ``HDF5_NO_FIND_PACKAGE_CONFIG_FILE``\r\n\n#   Set to a true value to skip trying to find ``hdf5-config.cmake``.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This module is maintained by Will Dicharry <wdicharry@stellarscience.com>.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List of the valid HDF5 components\r\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Validate the list of find components.\r\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the extra specified components, ensuring that they are valid.\r\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# only for compatibility\r\n",
        "Line" : 119,
        "CharPositionInLine" : 44
      },
      "7" : {
        "Text" : "# replaced by Fortran and HL\r\n",
        "Line" : 137,
        "CharPositionInLine" : 52
      },
      "8" : {
        "Text" : "# Determine whether to search for serial or parallel executable first\r\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We may have picked up some duplicates in various lists during the above\r\n\n# process for the language bindings (both the C and C++ bindings depend on\r\n\n# libz for example).  Remove the duplicates. It appears that the default\r\n\n# CMake behavior is to remove duplicates from the end of a list. However,\r\n\n# for link lines, this is incorrect since unresolved symbols are searched\r\n\n# for down the link line. Therefore, we reverse the list, remove the\r\n\n# duplicates, and then reverse it again to get the duplicates removed from\r\n\n# the beginning.\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Test first if the current compilers automatically wrap HDF5\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Invoke the HDF5 wrapper compiler.  The compiler return value is stored to the\r\n\n# return_value argument, the text output is stored to the output variable.\r\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Parse a compile line for definitions, includes, library paths, and libraries.\r\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# include directory\r\n",
        "Line" : 355,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# compile definition\r\n",
        "Line" : 358,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# library search path\r\n",
        "Line" : 361,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# library name (hl)\r\n",
        "Line" : 364,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# library name\r\n",
        "Line" : 367,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# library file\r\n",
        "Line" : 370,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Try to find HDF5 using an installed hdf5-config.cmake\r\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#Older versions of hdf5 don't have a static/shared suffix so\r\n\n#if we detect that occurrence clear the suffix\r\n",
        "Line" : 419,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "#cant find this component with our without the suffix\r\n\n#so bail out, and let the following locate HDF5\r\n",
        "Line" : 423,
        "CharPositionInLine" : 16
      },
      "22" : {
        "Text" : "# Only search for languages we've enabled\r\n",
        "Line" : 458,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# First check to see if our regular compiler is one of wrappers\r\n",
        "Line" : 460,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# If this language isn't using the wrapper, then try to seed the\r\n\n# search options with the wrapper\r\n",
        "Line" : 499,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# hdf5 library\r\n",
        "Line" : 528,
        "CharPositionInLine" : 14
      },
      "26" : {
        "Text" : "# external library\r\n",
        "Line" : 534,
        "CharPositionInLine" : 14
      },
      "27" : {
        "Text" : "# hdf5 library\r\n",
        "Line" : 556,
        "CharPositionInLine" : 16
      },
      "28" : {
        "Text" : "# external library\r\n",
        "Line" : 562,
        "CharPositionInLine" : 16
      },
      "29" : {
        "Text" : "# No arguments necessary, all languages can use the compiler wrappers\r\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Compiler wrappers aren't being used by the build but were found and used\r\n\n# to determine necessary include and library flags\r\n",
        "Line" : 624,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# seed the initial lists of libraries to find with items we know we need\r\n",
        "Line" : 661,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# find the HDF5 include directories\r\n",
        "Line" : 672,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# find the HDF5 libraries\r\n",
        "Line" : 690,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# According to bug 1643 on the CMake bug tracker, this is the\r\n\n# preferred method for searching for a static library.\r\n\n# See https://gitlab.kitware.com/cmake/cmake/issues/1643.  We search\r\n\n# first for the full static library name, but fall back to a\r\n\n# generic search on the name if the static search fails.\r\n",
        "Line" : 693,
        "CharPositionInLine" : 16
      },
      "35" : {
        "Text" : "# Append the libraries for this language binding to the list of all\r\n\n# required libraries.\r\n",
        "Line" : 723,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# According to bug 1643 on the CMake bug tracker, this is the\r\n\n# preferred method for searching for a static library.\r\n\n# See https://gitlab.kitware.com/cmake/cmake/issues/1643.  We search\r\n\n# first for the full static library name, but fall back to a\r\n\n# generic search on the name if the static search fails.\r\n",
        "Line" : 730,
        "CharPositionInLine" : 20
      },
      "37" : {
        "Text" : "# Append the libraries for this language binding to the list of all\r\n\n# required libraries.\r\n",
        "Line" : 757,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# If the HDF5 include directory was found, open H5pubconf.h to determine if\r\n\n# HDF5 was compiled with parallel IO support\r\n",
        "Line" : 770,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# For backwards compatibility we set HDF5_INCLUDE_DIR to the value of\r\n\n# HDF5_INCLUDE_DIRS\r\n",
        "Line" : 809,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# If HDF5_REQUIRED_VARS is empty at this point, then it's likely that\r\n\n# something external is trying to explicitly pass already found\r\n\n# locations\r\n",
        "Line" : 815,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindHSPELL.cmake" : {
      "ObjectId" : "7091d5bdb322e892f44a213c4eefa60d67220807",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindHSPELL\r\n\n# ----------\r\n\n#\r\n\n# Try to find Hspell\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   HSPELL_FOUND - system has Hspell\r\n\n#   HSPELL_INCLUDE_DIR - the Hspell include directory\r\n\n#   HSPELL_LIBRARIES - The libraries needed to use Hspell\r\n\n#   HSPELL_DEFINITIONS - Compiler switches required for using Hspell\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   HSPELL_VERSION_STRING - The version of Hspell found (x.y)\r\n\n#   HSPELL_MAJOR_VERSION  - the major version of Hspell\r\n\n#   HSPELL_MINOR_VERSION  - The minor version of Hspell\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindHTMLHelp.cmake" : {
      "ObjectId" : "6da31c0962c63a6899c87c87df0455984bb46704",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindHTMLHelp\r\n\n# ------------\r\n\n#\r\n\n# This module looks for Microsoft HTML Help Compiler\r\n\n#\r\n\n# It defines:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    HTML_HELP_COMPILER     : full path to the Compiler (hhc.exe)\r\n\n#    HTML_HELP_INCLUDE_PATH : include path to the API (htmlhelp.h)\r\n\n#    HTML_HELP_LIBRARY      : full path to the library (htmlhelp.lib)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindHg.cmake" : {
      "ObjectId" : "c737c4e06571a44aaa37861a60993640046659ff",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindHg\r\n\n# ------\r\n\n#\r\n\n# Extract information from a mercurial working copy.\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    HG_EXECUTABLE - path to mercurial command line client (hg)\r\n\n#    HG_FOUND - true if the command line client was found\r\n\n#    HG_VERSION_STRING - the version of mercurial found\r\n\n#\r\n\n# If the command line client executable is found the following macro is defined:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   HG_WC_INFO(<dir> <var-prefix>)\r\n\n#\r\n\n# Hg_WC_INFO extracts information of a mercurial working copy\r\n\n# at a given location.  This macro defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <var-prefix>_WC_CHANGESET - current changeset\r\n\n#   <var-prefix>_WC_REVISION - current revision\r\n\n#\r\n\n# Example usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    find_package(Hg)\r\n\n#    if(HG_FOUND)\r\n\n#      message(\"hg found: ${HG_EXECUTABLE}\")\r\n\n#      HG_WC_INFO(${PROJECT_SOURCE_DIR} Project)\r\n\n#      message(\"Current revision is ${Project_WC_REVISION}\")\r\n\n#      message(\"Current changeset is ${Project_WC_CHANGESET}\")\r\n\n#    endif()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindICU.cmake" : {
      "ObjectId" : "4b1775f3566417294618ad60526e60fc9156033e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindICU\r\n\n# -------\r\n\n#\r\n\n# Find the International Components for Unicode (ICU) libraries and\r\n\n# programs.\r\n\n#\r\n\n# This module supports multiple components.\r\n\n# Components can include any of: ``data``, ``i18n``, ``io``, ``le``,\r\n\n# ``lx``, ``test``, ``tu`` and ``uc``.\r\n\n#\r\n\n# Note that on Windows ``data`` is named ``dt`` and ``i18n`` is named\r\n\n# ``in``; any of the names may be used, and the appropriate\r\n\n# platform-specific library name will be automatically selected.\r\n\n#\r\n\n# This module reports information about the ICU installation in\r\n\n# several variables.  General variables::\r\n\n#\r\n\n#   ICU_VERSION - ICU release version\r\n\n#   ICU_FOUND - true if the main programs and libraries were found\r\n\n#   ICU_LIBRARIES - component libraries to be linked\r\n\n#   ICU_INCLUDE_DIRS - the directories containing the ICU headers\r\n\n#\r\n\n# Imported targets::\r\n\n#\r\n\n#   ICU::<C>\r\n\n#\r\n\n# Where ``<C>`` is the name of an ICU component, for example\r\n\n# ``ICU::i18n``.\r\n\n#\r\n\n# ICU programs are reported in::\r\n\n#\r\n\n#   ICU_GENCNVAL_EXECUTABLE - path to gencnval executable\r\n\n#   ICU_ICUINFO_EXECUTABLE - path to icuinfo executable\r\n\n#   ICU_GENBRK_EXECUTABLE - path to genbrk executable\r\n\n#   ICU_ICU-CONFIG_EXECUTABLE - path to icu-config executable\r\n\n#   ICU_GENRB_EXECUTABLE - path to genrb executable\r\n\n#   ICU_GENDICT_EXECUTABLE - path to gendict executable\r\n\n#   ICU_DERB_EXECUTABLE - path to derb executable\r\n\n#   ICU_PKGDATA_EXECUTABLE - path to pkgdata executable\r\n\n#   ICU_UCONV_EXECUTABLE - path to uconv executable\r\n\n#   ICU_GENCFU_EXECUTABLE - path to gencfu executable\r\n\n#   ICU_MAKECONV_EXECUTABLE - path to makeconv executable\r\n\n#   ICU_GENNORM2_EXECUTABLE - path to gennorm2 executable\r\n\n#   ICU_GENCCODE_EXECUTABLE - path to genccode executable\r\n\n#   ICU_GENSPREP_EXECUTABLE - path to gensprep executable\r\n\n#   ICU_ICUPKG_EXECUTABLE - path to icupkg executable\r\n\n#   ICU_GENCMN_EXECUTABLE - path to gencmn executable\r\n\n#\r\n\n# ICU component libraries are reported in::\r\n\n#\r\n\n#   ICU_<C>_FOUND - ON if component was found\r\n\n#   ICU_<C>_LIBRARIES - libraries for component\r\n\n#\r\n\n# Note that ``<C>`` is the uppercased name of the component.\r\n\n#\r\n\n# This module reads hints about search results from::\r\n\n#\r\n\n#   ICU_ROOT - the root of the ICU installation\r\n\n#\r\n\n# The environment variable ``ICU_ROOT`` may also be used; the\r\n\n# ICU_ROOT variable takes precedence.\r\n\n#\r\n\n# The following cache variables may also be set::\r\n\n#\r\n\n#   ICU_<P>_EXECUTABLE - the path to executable <P>\r\n\n#   ICU_INCLUDE_DIR - the directory containing the ICU headers\r\n\n#   ICU_<C>_LIBRARY - the library for component <C>\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#   In most cases none of the above variables will require setting,\r\n\n#   unless multiple ICU versions are available and a specific version\r\n\n#   is required.\r\n\n#\r\n\n# Other variables one may set to control this module are::\r\n\n#\r\n\n#   ICU_DEBUG - Set to ON to enable debug output from FindICU.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Written by Roger Leigh <rleigh@codelibre.net>\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The ICU checks are contained in a function due to the large number\r\n\n# of temporary variables needed.\r\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up search paths, taking compiler into account.  Search ICU_ROOT,\r\n\n# with ICU_ROOT in the environment as a fallback if unset.\r\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# 64-bit binary directory\r\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# 64-bit library directory\r\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Generic 64-bit and 32-bit directories\r\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Find all ICU programs\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Find include directory\r\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Get version\r\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Find all ICU libraries\r\n",
        "Line" : 164,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Special case deliberate library naming mismatches between Unix\r\n\n# and Windows builds\r\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Note there is no debug variant at present\r\n",
        "Line" : 183,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Note there is no debug variant at present\r\n",
        "Line" : 188,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 15
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindIce.cmake" : {
      "ObjectId" : "461ce43cb3de72a120030c6b82b3c345d1c39e81",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindIce\r\n\n# -------\r\n\n#\r\n\n# Find the ZeroC Internet Communication Engine (ICE) programs,\r\n\n# libraries and datafiles.\r\n\n#\r\n\n# This module supports multiple components.\r\n\n# Components can include any of: ``Freeze``, ``Glacier2``, ``Ice``,\r\n\n# ``IceBox``, ``IceDB``, ``IceGrid``, ``IcePatch``, ``IceSSL``,\r\n\n# ``IceStorm``, ``IceUtil``, ``IceXML``, or ``Slice``.\r\n\n#\r\n\n# This module reports information about the Ice installation in\r\n\n# several variables.  General variables::\r\n\n#\r\n\n#   Ice_VERSION - Ice release version\r\n\n#   Ice_FOUND - true if the main programs and libraries were found\r\n\n#   Ice_LIBRARIES - component libraries to be linked\r\n\n#   Ice_INCLUDE_DIRS - the directories containing the Ice headers\r\n\n#   Ice_SLICE_DIRS - the directories containing the Ice slice interface\r\n\n#                    definitions\r\n\n#\r\n\n# Imported targets::\r\n\n#\r\n\n#   Ice::<C>\r\n\n#\r\n\n# Where ``<C>`` is the name of an Ice component, for example\r\n\n# ``Ice::Glacier2``.\r\n\n#\r\n\n# Ice slice programs are reported in::\r\n\n#\r\n\n#   Ice_SLICE2CPP_EXECUTABLE - path to slice2cpp executable\r\n\n#   Ice_SLICE2CS_EXECUTABLE - path to slice2cs executable\r\n\n#   Ice_SLICE2FREEZEJ_EXECUTABLE - path to slice2freezej executable\r\n\n#   Ice_SLICE2FREEZE_EXECUTABLE - path to slice2freeze executable\r\n\n#   Ice_SLICE2HTML_EXECUTABLE - path to slice2html executable\r\n\n#   Ice_SLICE2JAVA_EXECUTABLE - path to slice2java executable\r\n\n#   Ice_SLICE2JS_EXECUTABLE - path to slice2js executable\r\n\n#   Ice_SLICE2PHP_EXECUTABLE - path to slice2php executable\r\n\n#   Ice_SLICE2PY_EXECUTABLE - path to slice2py executable\r\n\n#   Ice_SLICE2RB_EXECUTABLE - path to slice2rb executable\r\n\n#\r\n\n# Ice programs are reported in::\r\n\n#\r\n\n#   Ice_GLACIER2ROUTER_EXECUTABLE - path to glacier2router executable\r\n\n#   Ice_ICEBOX_EXECUTABLE - path to icebox executable\r\n\n#   Ice_ICEBOXADMIN_EXECUTABLE - path to iceboxadmin executable\r\n\n#   Ice_ICEBOXD_EXECUTABLE - path to iceboxd executable\r\n\n#   Ice_ICEBOXNET_EXECUTABLE - path to iceboxnet executable\r\n\n#   Ice_ICEGRIDADMIN_EXECUTABLE - path to icegridadmin executable\r\n\n#   Ice_ICEGRIDNODE_EXECUTABLE - path to icegridnode executable\r\n\n#   Ice_ICEGRIDNODED_EXECUTABLE - path to icegridnoded executable\r\n\n#   Ice_ICEGRIDREGISTRY_EXECUTABLE - path to icegridregistry executable\r\n\n#   Ice_ICEGRIDREGISTRYD_EXECUTABLE - path to icegridregistryd executable\r\n\n#   Ice_ICEPATCH2CALC_EXECUTABLE - path to icepatch2calc executable\r\n\n#   Ice_ICEPATCH2CLIENT_EXECUTABLE - path to icepatch2client executable\r\n\n#   Ice_ICEPATCH2SERVER_EXECUTABLE - path to icepatch2server executable\r\n\n#   Ice_ICESERVICEINSTALL_EXECUTABLE - path to iceserviceinstall executable\r\n\n#   Ice_ICESTORMADMIN_EXECUTABLE - path to icestormadmin executable\r\n\n#   Ice_ICESTORMMIGRATE_EXECUTABLE - path to icestormmigrate executable\r\n\n#\r\n\n# Ice db programs (Windows only; standard system versions on all other\r\n\n# platforms) are reported in::\r\n\n#\r\n\n#   Ice_DB_ARCHIVE_EXECUTABLE - path to db_archive executable\r\n\n#   Ice_DB_CHECKPOINT_EXECUTABLE - path to db_checkpoint executable\r\n\n#   Ice_DB_DEADLOCK_EXECUTABLE - path to db_deadlock executable\r\n\n#   Ice_DB_DUMP_EXECUTABLE - path to db_dump executable\r\n\n#   Ice_DB_HOTBACKUP_EXECUTABLE - path to db_hotbackup executable\r\n\n#   Ice_DB_LOAD_EXECUTABLE - path to db_load executable\r\n\n#   Ice_DB_LOG_VERIFY_EXECUTABLE - path to db_log_verify executable\r\n\n#   Ice_DB_PRINTLOG_EXECUTABLE - path to db_printlog executable\r\n\n#   Ice_DB_RECOVER_EXECUTABLE - path to db_recover executable\r\n\n#   Ice_DB_STAT_EXECUTABLE - path to db_stat executable\r\n\n#   Ice_DB_TUNER_EXECUTABLE - path to db_tuner executable\r\n\n#   Ice_DB_UPGRADE_EXECUTABLE - path to db_upgrade executable\r\n\n#   Ice_DB_VERIFY_EXECUTABLE - path to db_verify executable\r\n\n#   Ice_DUMPDB_EXECUTABLE - path to dumpdb executable\r\n\n#   Ice_TRANSFORMDB_EXECUTABLE - path to transformdb executable\r\n\n#\r\n\n# Ice component libraries are reported in::\r\n\n#\r\n\n#   Ice_<C>_FOUND - ON if component was found\r\n\n#   Ice_<C>_LIBRARIES - libraries for component\r\n\n#\r\n\n# Note that ``<C>`` is the uppercased name of the component.\r\n\n#\r\n\n# This module reads hints about search results from::\r\n\n#\r\n\n#   Ice_HOME - the root of the Ice installation\r\n\n#\r\n\n# The environment variable ``ICE_HOME`` may also be used; the\r\n\n# Ice_HOME variable takes precedence.\r\n\n#\r\n\n# The following cache variables may also be set::\r\n\n#\r\n\n#   Ice_<P>_EXECUTABLE - the path to executable <P>\r\n\n#   Ice_INCLUDE_DIR - the directory containing the Ice headers\r\n\n#   Ice_SLICE_DIR - the directory containing the Ice slice interface\r\n\n#                   definitions\r\n\n#   Ice_<C>_LIBRARY - the library for component <C>\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#   In most cases none of the above variables will require setting,\r\n\n#   unless multiple Ice versions are available and a specific version\r\n\n#   is required.  On Windows, the most recent version of Ice will be\r\n\n#   found through the registry.  On Unix, the programs, headers and\r\n\n#   libraries will usually be in standard locations, but Ice_SLICE_DIRS\r\n\n#   might not be automatically detected (commonly known locations are\r\n\n#   searched).  All the other variables are defaulted using Ice_HOME,\r\n\n#   if set.  It's possible to set Ice_HOME and selectively specify\r\n\n#   alternative locations for the other components; this might be\r\n\n#   required for e.g. newer versions of Visual Studio if the\r\n\n#   heuristics are not sufficient to identify the correct programs and\r\n\n#   libraries for the specific Visual Studio version.\r\n\n#\r\n\n# Other variables one may set to control this module are::\r\n\n#\r\n\n#   Ice_DEBUG - Set to ON to enable debug output from FindIce.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Written by Roger Leigh <rleigh@codelibre.net>\r\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The Ice checks are contained in a function due to the large number\r\n\n# of temporary variables needed.\r\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Released versions of Ice, including generic short forms\r\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set up search paths, taking compiler into account.  Search Ice_HOME,\r\n\n# with ICE_HOME in the environment as a fallback if unset.\r\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# 64-bit path suffix\r\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# 64-bit library directory\r\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# VS 8.0\r\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# VS 9.0\r\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# VS 10.0\r\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# VS 11.0\r\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# VS 12.0\r\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# VS 14.0\r\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# For compatibility with ZeroC Windows builds.\r\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Earlier Ice (3.3) builds don't use vcnnn subdirectories, but are harmless to check.\r\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Generic 64-bit and 32-bit directories\r\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# On Windows, look in the registry for install locations.  Different\r\n\n# versions of Ice install support different compiler versions.\r\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Ice 3.3 releases use a Visual Studio year suffix and value is\r\n\n# enclosed in double quotes, though only the leading quote is\r\n\n# returned by get_filename_component.\r\n",
        "Line" : 209,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Ice 3.4+ releases don't use a suffix\r\n",
        "Line" : 224,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Prefer 64-bit variants if present (and using a 64-bit compiler)\r\n",
        "Line" : 237,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Find all Ice programs\r\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Get version.\r\n",
        "Line" : 302,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Execute in C locale for safety\r\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# restore the previous LC_ALL\r\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Make short version\r\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Find include directory\r\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# In common use on Linux, MacOS X (homebrew) and FreeBSD; prefer\r\n\n# version-specific dir\r\n",
        "Line" : 332,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Find slice directory\r\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Find all Ice libraries\r\n",
        "Line" : 351,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 30
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindIcotool.cmake" : {
      "ObjectId" : "a6af2719d74cacd37d5afa6ed47d6d95fddff10c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindIcotool\r\n\n# -----------\r\n\n#\r\n\n# Find icotool\r\n\n#\r\n\n# This module looks for icotool.  This module defines the following\r\n\n# values:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ICOTOOL_EXECUTABLE: the full path to the icotool tool.\r\n\n#   ICOTOOL_FOUND: True if icotool has been found.\r\n\n#   ICOTOOL_VERSION_STRING: the version of icotool found.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindImageMagick.cmake" : {
      "ObjectId" : "454d5c85cd4c3fffddfb2ad4e716098c006badf7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindImageMagick\r\n\n# ---------------\r\n\n#\r\n\n# Find the ImageMagick binary suite.\r\n\n#\r\n\n# This module will search for a set of ImageMagick tools specified as\r\n\n# components in the FIND_PACKAGE call.  Typical components include, but\r\n\n# are not limited to (future versions of ImageMagick might have\r\n\n# additional components not listed here):\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   animate\r\n\n#   compare\r\n\n#   composite\r\n\n#   conjure\r\n\n#   convert\r\n\n#   display\r\n\n#   identify\r\n\n#   import\r\n\n#   mogrify\r\n\n#   montage\r\n\n#   stream\r\n\n#\r\n\n#\r\n\n#\r\n\n# If no component is specified in the FIND_PACKAGE call, then it only\r\n\n# searches for the ImageMagick executable directory.  This code defines\r\n\n# the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ImageMagick_FOUND                  - TRUE if all components are found.\r\n\n#   ImageMagick_EXECUTABLE_DIR         - Full path to executables directory.\r\n\n#   ImageMagick_<component>_FOUND      - TRUE if <component> is found.\r\n\n#   ImageMagick_<component>_EXECUTABLE - Full path to <component> executable.\r\n\n#   ImageMagick_VERSION_STRING         - the version of ImageMagick found\r\n\n#                                        (since CMake 2.8.8)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ImageMagick_VERSION_STRING will not work for old versions like 5.2.3.\r\n\n#\r\n\n# There are also components for the following ImageMagick APIs:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Magick++\r\n\n#   MagickWand\r\n\n#   MagickCore\r\n\n#\r\n\n#\r\n\n#\r\n\n# For these components the following variables are set:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ImageMagick_FOUND                    - TRUE if all components are found.\r\n\n#   ImageMagick_INCLUDE_DIRS             - Full paths to all include dirs.\r\n\n#   ImageMagick_LIBRARIES                - Full paths to all libraries.\r\n\n#   ImageMagick_<component>_FOUND        - TRUE if <component> is found.\r\n\n#   ImageMagick_<component>_INCLUDE_DIRS - Full path to <component> include dirs.\r\n\n#   ImageMagick_<component>_LIBRARIES    - Full path to <component> libraries.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Example Usages:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   find_package(ImageMagick)\r\n\n#   find_package(ImageMagick COMPONENTS convert)\r\n\n#   find_package(ImageMagick COMPONENTS convert mogrify display)\r\n\n#   find_package(ImageMagick COMPONENTS Magick++)\r\n\n#   find_package(ImageMagick COMPONENTS Magick++ convert)\r\n\n#\r\n\n#\r\n\n#\r\n\n# Note that the standard FIND_PACKAGE features are supported (i.e.,\r\n\n# QUIET, REQUIRED, etc.).\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---------------------------------------------------------------------\r\n\n# Helper functions\r\n\n#---------------------------------------------------------------------\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# old version have only indep dir\r\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Construct per-component include directories.\r\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Add the per-component include directories to the full include dirs.\r\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#---------------------------------------------------------------------\r\n\n# Start Actual Work\r\n\n#---------------------------------------------------------------------\r\n\n# Try to find a ImageMagick installation binary path.\r\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Find each component. Search for all tools in same dir\r\n\n# <ImageMagick_EXECUTABLE_DIR>; otherwise they should be found\r\n\n# independently and not in a cohesive module such as this one.\r\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DEPRECATED: forced components for backward compatibility\r\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# if no components were requested explicitly put all (default) executables\r\n\n# in the list\r\n",
        "Line" : 222,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# No components were requested, and none of the default components were\r\n\n# found. Just insert mogrify into the list of the default components to\r\n\n# find so FPHSA below has something to check\r\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#---------------------------------------------------------------------\r\n\n# Standard Package Output\r\n\n#---------------------------------------------------------------------\r\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Maintain consistency with all other variables.\r\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#---------------------------------------------------------------------\r\n\n# DEPRECATED: Setting variables for backward compatibility.\r\n\n#---------------------------------------------------------------------\r\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindIntl.cmake" : {
      "ObjectId" : "efb90d20ee16e93a86026f9215dab447eb5487d6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindIntl\r\n\n# --------\r\n\n#\r\n\n# Find the Gettext libintl headers and libraries.\r\n\n#\r\n\n# This module reports information about the Gettext libintl\r\n\n# installation in several variables.  General variables::\r\n\n#\r\n\n#   Intl_FOUND - true if the libintl headers and libraries were found\r\n\n#   Intl_INCLUDE_DIRS - the directory containing the libintl headers\r\n\n#   Intl_LIBRARIES - libintl libraries to be linked\r\n\n#\r\n\n# The following cache variables may also be set::\r\n\n#\r\n\n#   Intl_INCLUDE_DIR - the directory containing the libintl headers\r\n\n#   Intl_LIBRARY - the libintl library (if any)\r\n\n#\r\n\n# .. note::\r\n\n#   On some platforms, such as Linux with GNU libc, the gettext\r\n\n#   functions are present in the C standard library and libintl\r\n\n#   is not required.  ``Intl_LIBRARIES`` will be empty in this\r\n\n#   case.\r\n\n#\r\n\n# .. note::\r\n\n#   If you wish to use the Gettext tools (``msgmerge``,\r\n\n#   ``msgfmt``, etc.), use :module:`FindGettext`.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Written by Roger Leigh <rleigh@codelibre.net>\r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find include directory\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find all Intl libraries\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindJNI.cmake" : {
      "ObjectId" : "b9db2a53ee480c0b9b41f82f0cd27139be45dcac",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindJNI\r\n\n# -------\r\n\n#\r\n\n# Find JNI java libraries.\r\n\n#\r\n\n# This module finds if Java is installed and determines where the\r\n\n# include files and libraries are.  It also determines what the name of\r\n\n# the library is.  The caller may set variable JAVA_HOME to specify a\r\n\n# Java installation prefix explicitly.\r\n\n#\r\n\n# This module sets the following result variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   JNI_INCLUDE_DIRS      = the include dirs to use\r\n\n#   JNI_LIBRARIES         = the libraries to use\r\n\n#   JNI_FOUND             = TRUE if JNI headers and libraries were found.\r\n\n#   JAVA_AWT_LIBRARY      = the path to the jawt library\r\n\n#   JAVA_JVM_LIBRARY      = the path to the jvm library\r\n\n#   JAVA_INCLUDE_PATH     = the include path to jni.h\r\n\n#   JAVA_INCLUDE_PATH2    = the include path to jni_md.h\r\n\n#   JAVA_AWT_INCLUDE_PATH = the include path to jawt.h\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Expand {libarch} occurences to java_libarch subdirectory(-ies) and set ${_var}\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine java arch-specific library subdir\r\n\n# Mostly based on openjdk/jdk/make/common/shared/Platform.gmk as of openjdk\r\n\n# 1.6.0_18 + icedtea patches. However, it would be much better to base the\r\n\n# guess on the first part of the GNU config.guess platform triplet.\r\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Subdir is \"arm\" for both big-endian (arm) and little-endian (armel).\r\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# mips* machines are bi-endian mostly so processor does not tell\r\n\n# endianess of the underlying system.\r\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Both flavours can run on the same processor\r\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# s390 binaries can run on s390x machines\r\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Append default list architectures if CMAKE_SYSTEM_PROCESSOR was empty or\r\n\n# system is non-Linux (where the code above has not been well tested)\r\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Sometimes ${CMAKE_SYSTEM_PROCESSOR} is added to the list to prefer\r\n\n# current value to a hardcoded list. Remove possible duplicates.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Save CMAKE_FIND_FRAMEWORK\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# can this one be removed according to #8821 ? Alex\r\n",
        "Line" : 141,
        "CharPositionInLine" : 59
      },
      "12" : {
        "Text" : "# fedora\r\n",
        "Line" : 143,
        "CharPositionInLine" : 67
      },
      "13" : {
        "Text" : "# Debian specific paths for default JVM\r\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Arch Linux specific paths for default JVM\r\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Ubuntu specific paths for default JVM\r\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Ubuntu 15.10\r\n\n# Ubuntu 15.10\r\n\n# Ubuntu 15.10\r\n",
        "Line" : 152,
        "CharPositionInLine" : 62
      },
      "17" : {
        "Text" : "# OpenBSD specific paths for default JVM\r\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# SuSE specific paths for default JVM\r\n",
        "Line" : 160,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# IBM SDK, Java Technology Edition, specific paths\r\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# can this one be removed according to #8821 ? Alex\r\n",
        "Line" : 195,
        "CharPositionInLine" : 49
      },
      "21" : {
        "Text" : "# ubuntu 15.10\r\n\n# ubuntu 15.10\r\n\n# ubuntu 15.10\r\n",
        "Line" : 197,
        "CharPositionInLine" : 49
      },
      "22" : {
        "Text" : "# Debian specific path for default JVM\r\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Arch specific path for default JVM\r\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# OpenBSD specific path for default JVM\r\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# SuSE specific paths for default JVM\r\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Find headers matching the library.\r\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# add in the include path\r\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Restore CMAKE_FIND_FRAMEWORK\r\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindJPEG.cmake" : {
      "ObjectId" : "e8555e29166972f34c4560d7524dc0d72e88a98a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindJPEG\r\n\n# --------\r\n\n#\r\n\n# Find JPEG\r\n\n#\r\n\n# Find the native JPEG includes and library This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   JPEG_INCLUDE_DIR, where to find jpeglib.h, etc.\r\n\n#   JPEG_LIBRARIES, the libraries needed to use JPEG.\r\n\n#   JPEG_FOUND, If false, do not try to use JPEG.\r\n\n#\r\n\n# also defined, but not for general use are\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   JPEG_LIBRARY, where to find the JPEG library.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Deprecated declarations.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindJasper.cmake" : {
      "ObjectId" : "381ed40f889e8916a97e11c2afd703571c55c898",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindJasper\r\n\n# ----------\r\n\n#\r\n\n# Try to find the Jasper JPEG2000 library\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   JASPER_FOUND - system has Jasper\r\n\n#   JASPER_INCLUDE_DIR - the Jasper include directory\r\n\n#   JASPER_LIBRARIES - the libraries needed to use Jasper\r\n\n#   JASPER_VERSION_STRING - the version of Jasper found (since CMake 2.8.8)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindJava.cmake" : {
      "ObjectId" : "2a64efc39297e8abe347a81110706e2573e82d50",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindJava\r\n\n# --------\r\n\n#\r\n\n# Find Java\r\n\n#\r\n\n# This module finds if Java is installed and determines where the\r\n\n# include files and libraries are.  The caller may set variable JAVA_HOME\r\n\n# to specify a Java installation prefix explicitly.\r\n\n#\r\n\n# See also the :module:`FindJNI` module to find Java development tools.\r\n\n#\r\n\n# Specify one or more of the following components as you call this find module. See example below.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Runtime     = User just want to execute some Java byte-compiled\r\n\n#   Development = Development tools (java, javac, javah and javadoc), includes Runtime component\r\n\n#   IdlJ        = idl compiler for Java\r\n\n#   JarSigner   = signer tool for jar\r\n\n#\r\n\n#\r\n\n# This module sets the following result variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Java_JAVA_EXECUTABLE      = the full path to the Java runtime\r\n\n#   Java_JAVAC_EXECUTABLE     = the full path to the Java compiler\r\n\n#   Java_JAVAH_EXECUTABLE     = the full path to the Java header generator\r\n\n#   Java_JAVADOC_EXECUTABLE   = the full path to the Java documentation generator\r\n\n#   Java_IDLJ_EXECUTABLE      = the full path to the Java idl compiler\r\n\n#   Java_JAR_EXECUTABLE       = the full path to the Java archiver\r\n\n#   Java_JARSIGNER_EXECUTABLE = the full path to the Java jar signer\r\n\n#   Java_VERSION_STRING       = Version of java found, eg. 1.6.0_12\r\n\n#   Java_VERSION_MAJOR        = The major version of the package found.\r\n\n#   Java_VERSION_MINOR        = The minor version of the package found.\r\n\n#   Java_VERSION_PATCH        = The patch version of the package found.\r\n\n#   Java_VERSION_TWEAK        = The tweak version of the package found (after '_')\r\n\n#   Java_VERSION              = This is set to: $major.$minor.$patch(.$tweak)\r\n\n#\r\n\n#\r\n\n#\r\n\n# The minimum required version of Java can be specified using the\r\n\n# standard CMake syntax, e.g.  find_package(Java 1.5)\r\n\n#\r\n\n# NOTE: ${Java_VERSION} and ${Java_VERSION_STRING} are not guaranteed to\r\n\n# be identical.  For example some java version may return:\r\n\n# Java_VERSION_STRING = 1.5.0_17 and Java_VERSION = 1.5.0.17\r\n\n#\r\n\n# another example is the Java OEM, with: Java_VERSION_STRING = 1.6.0-oem\r\n\n# and Java_VERSION = 1.6.0\r\n\n#\r\n\n# For these components the following variables are set:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Java_FOUND                    - TRUE if all components are found.\r\n\n#   Java_<component>_FOUND        - TRUE if <component> is found.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Example Usages:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   find_package(Java)\r\n\n#   find_package(Java COMPONENTS Runtime)\r\n\n#   find_package(Java COMPONENTS Development)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The HINTS option should only be used for values computed from the system.\r\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Hard-coded guesses should still go in PATHS. This ensures that the user\r\n\n# environment can always override hard guesses.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sun-java output to stderr\r\n",
        "Line" : 123,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "# extract major/minor version and patch level from \"java -version\" output\r\n\n# Tested on linux using\r\n\n# 1. Sun / Sun OEM\r\n\n# 2. OpenJDK 1.6\r\n\n# 3. GCJ 1.5\r\n\n# 4. Kaffe 1.4.2\r\n\n# 5. OpenJDK 1.7.x on OpenBSD\r\n",
        "Line" : 136,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# This is most likely Sun / OpenJDK, or maybe GCJ-java compat layer\r\n",
        "Line" : 144,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Kaffe style\r\n",
        "Line" : 147,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# OpenJDK ver 1.7.x on OpenBSD\r\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# warning tweak version can be empty:\r\n",
        "Line" : 160,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# check case where tweak is not defined\r\n",
        "Line" : 162,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# User just want to execute some Java byte-compiled\r\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Check for Development\r\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# LEGACY\r\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindKDE3.cmake" : {
      "ObjectId" : "5cb7213061d2464145a35da21c59f533a4d946be",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindKDE3\r\n\n# --------\r\n\n#\r\n\n# Find the KDE3 include and library dirs, KDE preprocessors and define a some macros\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n# ``KDE3_DEFINITIONS``\r\n\n#   compiler definitions required for compiling KDE software\r\n\n# ``KDE3_INCLUDE_DIR``\r\n\n#   the KDE include directory\r\n\n# ``KDE3_INCLUDE_DIRS``\r\n\n#   the KDE and the Qt include directory, for use with include_directories()\r\n\n# ``KDE3_LIB_DIR``\r\n\n#   the directory where the KDE libraries are installed, for use with link_directories()\r\n\n# ``QT_AND_KDECORE_LIBS``\r\n\n#   this contains both the Qt and the kdecore library\r\n\n# ``KDE3_DCOPIDL_EXECUTABLE``\r\n\n#   the dcopidl executable\r\n\n# ``KDE3_DCOPIDL2CPP_EXECUTABLE``\r\n\n#   the dcopidl2cpp executable\r\n\n# ``KDE3_KCFGC_EXECUTABLE``\r\n\n#   the kconfig_compiler executable\r\n\n# ``KDE3_FOUND``\r\n\n#   set to TRUE if all of the above has been found\r\n\n#\r\n\n# The following user adjustable options are provided:\r\n\n#\r\n\n# ``KDE3_BUILD_TESTS``\r\n\n#   enable this to build KDE testcases\r\n\n#\r\n\n# It also adds the following macros (from KDE3Macros.cmake) SRCS_VAR is\r\n\n# always the variable which contains the list of source files for your\r\n\n# application or library.\r\n\n#\r\n\n# KDE3_AUTOMOC(file1 ...  fileN)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     Call this if you want to have automatic moc file handling.\r\n\n#     This means if you include \"foo.moc\" in the source file foo.cpp\r\n\n#     a moc file for the header foo.h will be created automatically.\r\n\n#     You can set the property SKIP_AUTOMAKE using set_source_files_properties()\r\n\n#     to exclude some files in the list from being processed.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_MOC_FILES(SRCS_VAR file1 ...  fileN )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     If you don't use the KDE3_AUTOMOC() macro, for the files\r\n\n#     listed here moc files will be created (named \"foo.moc.cpp\")\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_DCOP_SKELS(SRCS_VAR header1.h ...  headerN.h )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     Use this to generate DCOP skeletions from the listed headers.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_DCOP_STUBS(SRCS_VAR header1.h ...  headerN.h )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#      Use this to generate DCOP stubs from the listed headers.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_UI_FILES(SRCS_VAR file1.ui ...  fileN.ui )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     Use this to add the Qt designer ui files to your application/library.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_KCFG_FILES(SRCS_VAR file1.kcfgc ...  fileN.kcfgc )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     Use this to add KDE kconfig compiler files to your application/library.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_INSTALL_LIBTOOL_FILE(target)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     This will create and install a simple libtool file for the given target.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_EXECUTABLE(name file1 ...  fileN )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     Currently identical to add_executable(), may provide some advanced\r\n\n#     features in the future.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_KPART(name [WITH_PREFIX] file1 ...  fileN )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     Create a KDE plugin (KPart, kioslave, etc.) from the given source files.\r\n\n#     If WITH_PREFIX is given, the resulting plugin will have the prefix \"lib\",\r\n\n#     otherwise it won't.\r\n\n#     It creates and installs an appropriate libtool la-file.\r\n\n#\r\n\n#\r\n\n#\r\n\n# KDE3_ADD_KDEINIT_EXECUTABLE(name file1 ...  fileN )\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     Create a KDE application in the form of a module loadable via kdeinit.\r\n\n#     A library named kdeinit_<name> will be created and a small executable\r\n\n#     which links to it.\r\n\n#\r\n\n#\r\n\n#\r\n\n# The option KDE3_ENABLE_FINAL to enable all-in-one compilation is no\r\n\n# longer supported.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Author: Alexander Neundorf <neundorf@kde.org>\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If Qt4 has already been found, fail.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(QT_MIN_VERSION \"3.0.0\")\r\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#this line includes FindQt.cmake, which searches the Qt library and headers\r\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#now try to find some kde stuff\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# at first the KDE include directory\r\n\n# kpassdlg.h comes from kdeui and doesn't exist in KDE4 anymore\r\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#now the KDE library directory\r\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#now search for the dcop utilities\r\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#SET KDE3_FOUND\r\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# add some KDE specific stuff\r\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# set compiler flags only if KDE3 has actually been found\r\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# use flags for gnu compiler\r\n",
        "Line" : 272,
        "CharPositionInLine" : 32
      },
      "13" : {
        "Text" : "# gnu gcc 2.96 does not work with flags\r\n\n# I guess 2.95 also doesn't then\r\n",
        "Line" : 275,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#only on linux, but NOT e.g. on FreeBSD:\r\n",
        "Line" : 282,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# works on FreeBSD, NOT tested on NetBSD and OpenBSD\r\n",
        "Line" : 289,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# if no special buildtype is selected, add -O2 as default optimization\r\n",
        "Line" : 295,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "#set(CMAKE_SHARED_LINKER_FLAGS \"-avoid-version -module -Wl,--no-undefined -Wl,--allow-shlib-undefined\")\r\n\n#set(CMAKE_SHARED_LINKER_FLAGS \"-Wl,--fatal-warnings -avoid-version -Wl,--no-undefined -lc\")\r\n\n#set(CMAKE_MODULE_LINKER_FLAGS \"-Wl,--fatal-warnings -avoid-version -Wl,--no-undefined -lc\")\r\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# KDE3Macros.cmake contains all the KDE specific macros\r\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#bail out if something wasn't found\r\n",
        "Line" : 346,
        "CharPositionInLine" : 3
      },
      "20" : {
        "Text" : "#add the found Qt and KDE include directories to the current include path\r\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindKDE4.cmake" : {
      "ObjectId" : "66c63eeb41f7459bba339915d459f49d3912bfd5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindKDE4\r\n\n# --------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Find KDE4 and provide all necessary variables and macros to compile\r\n\n# software for it.  It looks for KDE 4 in the following directories in\r\n\n# the given order:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_INSTALL_PREFIX\r\n\n#   KDEDIRS\r\n\n#   /opt/kde4\r\n\n#\r\n\n#\r\n\n#\r\n\n# Please look in FindKDE4Internal.cmake and KDE4Macros.cmake for more\r\n\n# information.  They are installed with the KDE 4 libraries in\r\n\n# $KDEDIRS/share/apps/cmake/modules/.\r\n\n#\r\n\n# Author: Alexander Neundorf <neundorf@kde.org>\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If Qt3 has already been found, fail.\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# when cross compiling, searching kde4-config in order to run it later on\r\n\n# doesn't make a lot of sense. We'll have to do something about this.\r\n\n# Searching always in the target environment ? Then we get at least the correct one,\r\n\n# still it can't be used to run it. Alex\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For KDE4 kde-config has been renamed to kde4-config\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# the suffix must be used since KDEDIRS can be a list of directories which don't have bin/ appended\r\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# when cross compiling, KDE4_DATA_DIR may be already preset\r\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# when cross compiling, don't run kde4-config but use its location as install dir\r\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# then ask kde4-config for the kde data dirs\r\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# then check the data dirs for FindKDE4Internal.cmake\r\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# if it has been found...\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# use FindKDE4Internal.cmake to do the rest\r\n",
        "Line" : 96,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 12
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLAPACK.cmake" : {
      "ObjectId" : "d8ae4a88572f3a9a9e6f41d575fbfda8a82153e2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLAPACK\r\n\n# ----------\r\n\n#\r\n\n# Find LAPACK library\r\n\n#\r\n\n# This module finds an installed fortran library that implements the\r\n\n# LAPACK linear-algebra interface (see http://www.netlib.org/lapack/).\r\n\n#\r\n\n# The approach follows that taken for the autoconf macro file,\r\n\n# acx_lapack.m4 (distributed at\r\n\n# http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\r\n\n#\r\n\n# This module sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LAPACK_FOUND - set to true if a library implementing the LAPACK interface\r\n\n#     is found\r\n\n#   LAPACK_LINKER_FLAGS - uncached list of required linker flags (excluding -l\r\n\n#     and -L).\r\n\n#   LAPACK_LIBRARIES - uncached list of libraries (using full path name) to\r\n\n#     link against to use LAPACK\r\n\n#   LAPACK95_LIBRARIES - uncached list of libraries (using full path name) to\r\n\n#     link against to use LAPACK95\r\n\n#   LAPACK95_FOUND - set to true if a library implementing the LAPACK f95\r\n\n#     interface is found\r\n\n#   BLA_STATIC  if set on this determines what kind of linkage we do (static)\r\n\n#   BLA_VENDOR  if set checks only the specified vendor, if not set checks\r\n\n#      all the possibilities\r\n\n#   BLA_F95     if set on tries to find the f95 interfaces for BLAS/LAPACK\r\n\n#\r\n\n# List of vendors (BLA_VENDOR) valid in this module:\r\n\n#\r\n\n# * Intel(mkl)\r\n\n# * OpenBLAS\r\n\n# * ACML\r\n\n# * Apple\r\n\n# * NAS\r\n\n# * Generic\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check the language being used\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: move this stuff to separate module\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\r\n\n# given by _list.  If the combination is found, this macro checks (using the\r\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\r\n\n# combination using the name of a routine given by _name using the linker\r\n\n# flags given by _flags.  If the combination of libraries is found and passes\r\n\n# the link test, LIBRARIES is set to the list of complete library paths that\r\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# N.B. _prefix is the prefix applied to the names of all cached variables that\r\n\n# are generated internally and marked advanced by this macro.\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# for ubuntu's libblas3gf and liblapack3gf packages\r\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Test this combination of libraries.\r\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#  message(\"DEBUG: CMAKE_REQUIRED_LIBRARIES = ${CMAKE_REQUIRED_LIBRARIES}\")\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(\"DEBUG: ${LIBRARIES} = ${${LIBRARIES}}\")\r\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#acml lapack\r\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Apple LAPACK library?\r\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Generic LAPACK library?\r\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#intel lapack\r\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# old\r\n",
        "Line" : 273,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# new >= 10.3\r\n",
        "Line" : 276,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# old\r\n",
        "Line" : 286,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# new >= 10.3\r\n",
        "Line" : 289,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# First try empty lapack libs\r\n",
        "Line" : 294,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Then try the search libs\r\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 20
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLATEX.cmake" : {
      "ObjectId" : "6be014235c43c1c36413f1c029692204bf24e4ae",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLATEX\r\n\n# ---------\r\n\n#\r\n\n# Find Latex\r\n\n#\r\n\n# This module finds an installed Latex and determines the location\r\n\n# of the compiler.  Additionally the module looks for Latex-related\r\n\n# software like BibTeX.\r\n\n#\r\n\n# This module sets the following result variables::\r\n\n#\r\n\n#   LATEX_FOUND:          whether found Latex and requested components\r\n\n#   LATEX_<component>_FOUND:  whether found <component>\r\n\n#   LATEX_COMPILER:       path to the LaTeX compiler\r\n\n#   PDFLATEX_COMPILER:    path to the PdfLaTeX compiler\r\n\n#   XELATEX_COMPILER:     path to the XeLaTeX compiler\r\n\n#   LUALATEX_COMPILER:    path to the LuaLaTeX compiler\r\n\n#   BIBTEX_COMPILER:      path to the BibTeX compiler\r\n\n#   BIBER_COMPILER:       path to the Biber compiler\r\n\n#   MAKEINDEX_COMPILER:   path to the MakeIndex compiler\r\n\n#   XINDY_COMPILER:       path to the xindy compiler\r\n\n#   DVIPS_CONVERTER:      path to the DVIPS converter\r\n\n#   DVIPDF_CONVERTER:     path to the DVIPDF converter\r\n\n#   PS2PDF_CONVERTER:     path to the PS2PDF converter\r\n\n#   PDFTOPS_CONVERTER:    path to the pdftops converter\r\n\n#   LATEX2HTML_CONVERTER: path to the LaTeX2Html converter\r\n\n#   HTLATEX_COMPILER:     path to the htlatex compiler\r\n\n#\r\n\n# Possible components are::\r\n\n#\r\n\n#   PDFLATEX\r\n\n#   XELATEX\r\n\n#   LUALATEX\r\n\n#   BIBTEX\r\n\n#   BIBER\r\n\n#   MAKEINDEX\r\n\n#   XINDY\r\n\n#   DVIPS\r\n\n#   DVIPDF\r\n\n#   PS2PDF\r\n\n#   PDFTOPS\r\n\n#   LATEX2HTML\r\n\n#   HTLATEX\r\n\n#\r\n\n# Example Usages::\r\n\n#\r\n\n#   find_package(LATEX)\r\n\n#   find_package(LATEX COMPONENTS PDFLATEX)\r\n\n#   find_package(LATEX COMPONENTS BIBTEX PS2PDF)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find the MikTex binary path (look for its package manager).\r\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Try to find the GhostScript binary path (look for gswin32).\r\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# try to find Latex and the related programs\r\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# find pdflatex\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# find xelatex\r\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# find lualatex\r\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# find bibtex\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# find biber\r\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# find makeindex\r\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# find xindy\r\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# find dvips\r\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# find dvipdf\r\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# find ps2pdf\r\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# find pdftops\r\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find latex2html\r\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# find htlatex\r\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLTTngUST.cmake" : {
      "ObjectId" : "81afed02a89dfe21fb1c837f26d40de54895af3e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLTTngUST\r\n\n# ------------\r\n\n#\r\n\n# This module finds the `LTTng-UST <http://lttng.org/>`__ library.\r\n\n#\r\n\n# Imported target\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following :prop_tgt:`IMPORTED` target:\r\n\n#\r\n\n# ``LTTng::UST``\r\n\n#   The LTTng-UST library, if found\r\n\n#\r\n\n# Result variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module sets the following\r\n\n#\r\n\n# ``LTTNGUST_FOUND``\r\n\n#   ``TRUE`` if system has LTTng-UST\r\n\n# ``LTTNGUST_INCLUDE_DIRS``\r\n\n#   The LTTng-UST include directories\r\n\n# ``LTTNGUST_LIBRARIES``\r\n\n#   The libraries needed to use LTTng-UST\r\n\n# ``LTTNGUST_VERSION_STRING``\r\n\n#   The LTTng-UST version\r\n\n# ``LTTNGUST_HAS_TRACEF``\r\n\n#   ``TRUE`` if the ``tracef()`` API is available in the system's LTTng-UST\r\n\n# ``LTTNGUST_HAS_TRACELOG``\r\n\n#   ``TRUE`` if the ``tracelog()`` API is available in the system's LTTng-UST\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find tracef() and tracelog() support\r\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# get version\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# add libdl to required libraries\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLibArchive.cmake" : {
      "ObjectId" : "2a02ed825d9fabdd9182b80c33652cdd0b31bd5a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLibArchive\r\n\n# --------------\r\n\n#\r\n\n# Find libarchive library and headers\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LibArchive_FOUND        - true if libarchive was found\r\n\n#   LibArchive_INCLUDE_DIRS - include search path\r\n\n#   LibArchive_LIBRARIES    - libraries to link\r\n\n#   LibArchive_VERSION      - libarchive 3-component version number\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Extract the version number from the header.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The version string appears in one of three known formats in the header:\r\n\n#  #define ARCHIVE_LIBRARY_VERSION \"libarchive 2.4.12\"\r\n\n#  #define ARCHIVE_VERSION_STRING \"libarchive 2.8.4\"\r\n\n#  #define ARCHIVE_VERSION_ONLY_STRING \"3.2.0\"\r\n\n# Match any format.\r\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLibLZMA.cmake" : {
      "ObjectId" : "79deb1fdc8907fb10edb2296024608308447dbe6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLibLZMA\r\n\n# -----------\r\n\n#\r\n\n# Find LibLZMA\r\n\n#\r\n\n# Find LibLZMA headers and library\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LIBLZMA_FOUND             - True if liblzma is found.\r\n\n#   LIBLZMA_INCLUDE_DIRS      - Directory where liblzma headers are located.\r\n\n#   LIBLZMA_LIBRARIES         - Lzma libraries to link against.\r\n\n#   LIBLZMA_HAS_AUTO_DECODER  - True if lzma_auto_decoder() is found (required).\r\n\n#   LIBLZMA_HAS_EASY_ENCODER  - True if lzma_easy_encoder() is found (required).\r\n\n#   LIBLZMA_HAS_LZMA_PRESET   - True if lzma_lzma_preset() is found (required).\r\n\n#   LIBLZMA_VERSION_MAJOR     - The major version of lzma\r\n\n#   LIBLZMA_VERSION_MINOR     - The minor version of lzma\r\n\n#   LIBLZMA_VERSION_PATCH     - The patch version of lzma\r\n\n#   LIBLZMA_VERSION_STRING    - version number as a string (ex: \"5.0.3\")\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We're using new code known now as XZ, even library still been called LZMA\r\n\n# it can be found in http://tukaani.org/xz/\r\n\n# Avoid using old codebase\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLibXml2.cmake" : {
      "ObjectId" : "a6b767bbf25539cbb46b3ffedfcb9f904e78b1ef",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLibXml2\r\n\n# -----------\r\n\n#\r\n\n# Try to find the LibXml2 xml processing library\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LIBXML2_FOUND - System has LibXml2\r\n\n#   LIBXML2_INCLUDE_DIR - The LibXml2 include directory\r\n\n#   LIBXML2_LIBRARIES - The libraries needed to use LibXml2\r\n\n#   LIBXML2_DEFINITIONS - Compiler switches required for using LibXml2\r\n\n#   LIBXML2_XMLLINT_EXECUTABLE - The XML checking tool xmllint coming with LibXml2\r\n\n#   LIBXML2_VERSION_STRING - the version of LibXml2 found (since CMake 2.8.8)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\r\n\n# in the find_path() and find_library() calls\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# for backwards compat. with KDE 4.0.x:\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLibXslt.cmake" : {
      "ObjectId" : "a1e2d34b41d8cb7c9e9a9934deba3caae39444d1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLibXslt\r\n\n# -----------\r\n\n#\r\n\n# Try to find the LibXslt library\r\n\n#\r\n\n# Once done this will define\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LIBXSLT_FOUND - system has LibXslt\r\n\n#   LIBXSLT_INCLUDE_DIR - the LibXslt include directory\r\n\n#   LIBXSLT_LIBRARIES - Link these to LibXslt\r\n\n#   LIBXSLT_DEFINITIONS - Compiler switches required for using LibXslt\r\n\n#   LIBXSLT_VERSION_STRING - version of LibXslt found (since CMake 2.8.8)\r\n\n#\r\n\n# Additionally, the following two variables are set (but not required\r\n\n# for using xslt):\r\n\n#\r\n\n# ``LIBXSLT_EXSLT_LIBRARIES``\r\n\n#   Link to these if you need to link against the exslt library.\r\n\n# ``LIBXSLT_XSLTPROC_EXECUTABLE``\r\n\n#   Contains the full path to the xsltproc executable if found.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\r\n\n# in the find_path() and find_library() calls\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLua.cmake" : {
      "ObjectId" : "1660c076ed0edd5dc8ba66be4ae2652adb0530ee",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLua\r\n\n# -------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Locate Lua library This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LUA_FOUND          - if false, do not try to link to Lua\r\n\n#   LUA_LIBRARIES      - both lua and lualib\r\n\n#   LUA_INCLUDE_DIR    - where to find lua.h\r\n\n#   LUA_VERSION_STRING - the version of Lua found\r\n\n#   LUA_VERSION_MAJOR  - the major version of Lua\r\n\n#   LUA_VERSION_MINOR  - the minor version of Lua\r\n\n#   LUA_VERSION_PATCH  - the patch version of Lua\r\n\n#\r\n\n#\r\n\n#\r\n\n# Note that the expected include convention is\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   #include \"lua.h\"\r\n\n#\r\n\n# and not\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   #include <lua/lua.h>\r\n\n#\r\n\n# This is because, the lua location is not standardized and may exist in\r\n\n# locations other than lua/\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a function only to have all the variables inside go away automatically\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# once there is a different major version supported this should become a loop\r\n",
        "Line" : 52,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# once there is a different major version supported this should become a loop\r\n",
        "Line" : 65,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# At least 5.[012] have different ways to express the version\r\n\n# so all of them need to be tested. Lua 5.2 defines LUA_VERSION\r\n\n# and LUA_RELEASE as joined by the C preprocessor, so avoid those.\r\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Fink\r\n",
        "Line" : 131,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 132,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 133,
        "CharPositionInLine" : 19
      },
      "9" : {
        "Text" : "# include the math library for Unix\r\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# include dl library for statically-linked Lua library\r\n",
        "Line" : 178,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\r\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\r\n\n# all listed variables are TRUE\r\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLua50.cmake" : {
      "ObjectId" : "b67404cf6e36dcf1ca050cf8724768daee74e1fe",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLua50\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Locate Lua library This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LUA50_FOUND, if false, do not try to link to Lua\r\n\n#   LUA_LIBRARIES, both lua and lualib\r\n\n#   LUA_INCLUDE_DIR, where to find lua.h and lualib.h (and probably lauxlib.h)\r\n\n#\r\n\n#\r\n\n#\r\n\n# Note that the expected include convention is\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   #include \"lua.h\"\r\n\n#\r\n\n# and not\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   #include <lua/lua.h>\r\n\n#\r\n\n# This is because, the lua location is not standardized and may exist in\r\n\n# locations other than lua/\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\r\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 43,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 44,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# In an OS X framework, lualib is usually included as part of the framework\r\n\n# (like GLU in OpenGL.framework)\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# include the math library for Unix\r\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\r\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\r\n\n# all listed variables are TRUE\r\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindLua51.cmake" : {
      "ObjectId" : "fb05a305f0c724192b66681ef4b169b7053470c1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindLua51\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Locate Lua library This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LUA51_FOUND, if false, do not try to link to Lua\r\n\n#   LUA_LIBRARIES\r\n\n#   LUA_INCLUDE_DIR, where to find lua.h\r\n\n#   LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\r\n\n#\r\n\n#\r\n\n#\r\n\n# Note that the expected include convention is\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   #include \"lua.h\"\r\n\n#\r\n\n# and not\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   #include <lua/lua.h>\r\n\n#\r\n\n# This is because, the lua location is not standardized and may exist in\r\n\n# locations other than lua/\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\r\n",
        "Line" : 43,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 44,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 45,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# include the math library for Unix\r\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\r\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\r\n\n# all listed variables are TRUE\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindMFC.cmake" : {
      "ObjectId" : "fdf9d201b00c7d88b3f23477a169402ff2c0b46d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindMFC\r\n\n# -------\r\n\n#\r\n\n# Find MFC on Windows\r\n\n#\r\n\n# Find the native MFC - i.e.  decide if an application can link to the\r\n\n# MFC libraries.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   MFC_FOUND - Was MFC support found\r\n\n#\r\n\n# You don't need to include anything or link anything to use it.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assume no MFC support\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only attempt the try_compile call if it has a chance to succeed:\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindMPEG.cmake" : {
      "ObjectId" : "b2458bae30027840c2b74fcd89e478aaf3cc71c8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindMPEG\r\n\n# --------\r\n\n#\r\n\n# Find the native MPEG includes and library\r\n\n#\r\n\n# This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   MPEG_INCLUDE_DIR, where to find MPEG.h, etc.\r\n\n#   MPEG_LIBRARIES, the libraries required to use MPEG.\r\n\n#   MPEG_FOUND, If false, do not try to use MPEG.\r\n\n#\r\n\n# also defined, but not for general use are\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   MPEG_mpeg2_LIBRARY, where to find the MPEG library.\r\n\n#   MPEG_vo_LIBRARY, where to find the vo library.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindMPEG2.cmake" : {
      "ObjectId" : "86b9fa67e1a68eec9e6600108f554d13d73afa18",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindMPEG2\r\n\n# ---------\r\n\n#\r\n\n# Find the native MPEG2 includes and library\r\n\n#\r\n\n# This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   MPEG2_INCLUDE_DIR, path to mpeg2dec/mpeg2.h, etc.\r\n\n#   MPEG2_LIBRARIES, the libraries required to use MPEG2.\r\n\n#   MPEG2_FOUND, If false, do not try to use MPEG2.\r\n\n#\r\n\n# also defined, but not for general use are\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   MPEG2_mpeg2_LIBRARY, where to find the MPEG2 library.\r\n\n#   MPEG2_vo_LIBRARY, where to find the vo library.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#some native mpeg2 installations will depend\r\n\n#on libSDL, if found, add it in.\r\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindMPI.cmake" : {
      "ObjectId" : "d1e83a8cbfca81c3247221a5c269ec078f5c037f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindMPI\r\n\n# -------\r\n\n#\r\n\n# Find a Message Passing Interface (MPI) implementation\r\n\n#\r\n\n# The Message Passing Interface (MPI) is a library used to write\r\n\n# high-performance distributed-memory parallel applications, and is\r\n\n# typically deployed on a cluster.  MPI is a standard interface (defined\r\n\n# by the MPI forum) for which many implementations are available.  All\r\n\n# of them have somewhat different include paths, libraries to link\r\n\n# against, etc., and this module tries to smooth out those differences.\r\n\n#\r\n\n# Variables\r\n\n# ^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables per language in your\r\n\n# project, where <lang> is one of C, CXX, or Fortran:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    MPI_<lang>_FOUND           TRUE if FindMPI found MPI flags for <lang>\r\n\n#    MPI_<lang>_COMPILER        MPI Compiler wrapper for <lang>\r\n\n#    MPI_<lang>_COMPILE_FLAGS   Compilation flags for MPI programs\r\n\n#    MPI_<lang>_INCLUDE_PATH    Include path(s) for MPI header\r\n\n#    MPI_<lang>_LINK_FLAGS      Linking flags for MPI programs\r\n\n#    MPI_<lang>_LIBRARIES       All libraries to link MPI programs against\r\n\n#\r\n\n# Additionally, FindMPI sets the following variables for running MPI\r\n\n# programs from the command line:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    MPIEXEC                    Executable for running MPI programs\r\n\n#    MPIEXEC_NUMPROC_FLAG       Flag to pass to MPIEXEC before giving\r\n\n#                               it the number of processors to run on\r\n\n#    MPIEXEC_PREFLAGS           Flags to pass to MPIEXEC directly\r\n\n#                               before the executable to run.\r\n\n#    MPIEXEC_POSTFLAGS          Flags to pass to MPIEXEC after other flags\r\n\n#\r\n\n# Usage\r\n\n# ^^^^^\r\n\n#\r\n\n# To use this module, simply call FindMPI from a CMakeLists.txt file, or\r\n\n# run ``find_package(MPI)``, then run CMake.  If you are happy with the\r\n\n# auto-detected configuration for your language, then you're done.  If\r\n\n# not, you have two options:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    1. Set MPI_<lang>_COMPILER to the MPI wrapper (mpicc, etc.) of your\r\n\n#       choice and reconfigure.  FindMPI will attempt to determine all the\r\n\n#       necessary variables using THAT compiler's compile and link flags.\r\n\n#    2. If this fails, or if your MPI implementation does not come with\r\n\n#       a compiler wrapper, then set both MPI_<lang>_LIBRARIES and\r\n\n#       MPI_<lang>_INCLUDE_PATH.  You may also set any other variables\r\n\n#       listed above, but these two are required.  This will circumvent\r\n\n#       autodetection entirely.\r\n\n#\r\n\n# When configuration is successful, ``MPI_<lang>_COMPILER`` will be set to\r\n\n# the compiler wrapper for <lang>, if it was found.  ``MPI_<lang>_FOUND``\r\n\n# and other variables above will be set if any MPI implementation was\r\n\n# found for <lang>, regardless of whether a compiler was found.\r\n\n#\r\n\n# When using ``MPIEXEC`` to execute MPI applications, you should typically\r\n\n# use all of the ``MPIEXEC`` flags as follows:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} PROCS\r\n\n#      ${MPIEXEC_PREFLAGS} EXECUTABLE ${MPIEXEC_POSTFLAGS} ARGS\r\n\n#\r\n\n# where ``PROCS`` is the number of processors on which to execute the\r\n\n# program, ``EXECUTABLE`` is the MPI program, and ``ARGS`` are the arguments to\r\n\n# pass to the MPI program.\r\n\n#\r\n\n# Backward Compatibility\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# For backward compatibility with older versions of FindMPI, these\r\n\n# variables are set, but deprecated:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    MPI_FOUND           MPI_COMPILER        MPI_LIBRARY\r\n\n#    MPI_COMPILE_FLAGS   MPI_INCLUDE_PATH    MPI_EXTRA_LIBRARY\r\n\n#    MPI_LINK_FLAGS      MPI_LIBRARIES\r\n\n#\r\n\n# In new projects, please use the ``MPI_<lang>_XXX`` equivalents.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# This part detects MPI compilers, attempting to wade through the mess of compiler names in\r\n\n# a sensible way.\r\n\n#\r\n\n# The compilers are detected in this order:\r\n\n#\r\n\n# 1. Try to find the most generic available MPI compiler, as this is usually set up by\r\n\n#    cluster admins.  e.g., if plain old mpicc is available, we'll use it and assume it's\r\n\n#    the right compiler.\r\n\n#\r\n\n# 2. If a generic mpicc is NOT found, then we attempt to find one that matches\r\n\n#    CMAKE_<lang>_COMPILER_ID. e.g. if you are using XL compilers, we'll try to find mpixlc\r\n\n#    and company, but not mpiicc.  This hopefully prevents toolchain mismatches.\r\n\n#\r\n\n# If you want to force a particular MPI compiler other than what we autodetect (e.g. if you\r\n\n# want to compile regular stuff with GNU and parallel stuff with Intel), you can always set\r\n\n# your favorite MPI_<lang>_COMPILER explicitly and this stuff will be ignored.\r\n\n#\r\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Start out with the generic MPI compiler names, as these are most commonly used.\r\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# GNU compiler names\r\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Intel MPI compiler names\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# PGI compiler names\r\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# XLC MPI Compiler names\r\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# append vendor-specific compilers to the list if we either don't know the compiler id,\r\n\n# or if we know it matches the regular compiler.\r\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# clean up the namespace here\r\n",
        "Line" : 156,
        "CharPositionInLine" : 48
      },
      "10" : {
        "Text" : "# Names to try for MPI exec\r\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Grab the path to MPI from the registry if we're on windows.\r\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# MSMPI\r\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# The default path ends with a '\\' and doesn't mix with ';' when appending.\r\n",
        "Line" : 168,
        "CharPositionInLine" : 55
      },
      "14" : {
        "Text" : "# The SDK is installed separately from the runtime\r\n",
        "Line" : 172,
        "CharPositionInLine" : 53
      },
      "15" : {
        "Text" : "# MPICH\r\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Build a list of prefixes to search for MPI.\r\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Intel MPI 5.0.1 will return a zero return code even when the\r\n\n# argument to the MPI compiler wrapper is unknown.  Attempt to\r\n\n# catch this case.\r\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#\r\n\n# interrogate_mpi_compiler(lang try_libs)\r\n\n#\r\n\n# Attempts to extract compiler and linker args from an MPI compiler. The arguments set\r\n\n# by this function are:\r\n\n#\r\n\n#   MPI_<lang>_INCLUDE_PATH    MPI_<lang>_LINK_FLAGS     MPI_<lang>_FOUND\r\n\n#   MPI_<lang>_COMPILE_FLAGS   MPI_<lang>_LIBRARIES\r\n\n#\r\n\n# MPI_<lang>_COMPILER must be set beforehand to the absolute path to an MPI compiler for\r\n\n# <lang>.  Additionally, MPI_<lang>_INCLUDE_PATH and MPI_<lang>_LIBRARIES may be set\r\n\n# to skip autodetection.\r\n\n#\r\n\n# If try_libs is TRUE, this will also attempt to find plain MPI libraries in the usual\r\n\n# way.  In general, this is not as effective as interrogating the compilers, as it\r\n\n# ignores language-specific flags and libraries.  However, some MPI implementations\r\n\n# (Windows implementations) do not have compiler wrappers, so this approach must be used.\r\n\n#\r\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# MPI_${lang}_NO_INTERROGATE will be set to a compiler name when the *regular* compiler was\r\n\n# discovered to be the MPI compiler.  This happens on machines like the Cray XE6 that use\r\n\n# modules to set cc, CC, and ftn to the MPI compilers.  If the user force-sets another MPI\r\n\n# compiler, MPI_${lang}_COMPILER won't be equal to MPI_${lang}_NO_INTERROGATE, and we'll\r\n\n# inspect that compiler anew.  This allows users to set new compilers w/o rm'ing cache.\r\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# If MPI is set already in the cache, don't bother with interrogating the compiler.\r\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Check whether the -showme:compile option works. This indicates that we have either OpenMPI\r\n\n# or a newer version of LAM-MPI, and implies that -showme:link will also work.\r\n",
        "Line" : 233,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# If we appear to have -showme:compile, then we should\r\n\n# also have -showme:link. Try it.\r\n",
        "Line" : 237,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# We probably have -showme:incdirs and -showme:libdirs as well,\r\n\n# so grab that while we're at it.\r\n",
        "Line" : 246,
        "CharPositionInLine" : 10
      },
      "24" : {
        "Text" : "# reset things here if something went wrong.\r\n",
        "Line" : 259,
        "CharPositionInLine" : 10
      },
      "25" : {
        "Text" : "# Older versions of LAM-MPI have \"-showme\". Try to find that.\r\n",
        "Line" : 265,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# MVAPICH uses -compile-info and -link-info.  Try them.\r\n",
        "Line" : 270,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# If we have compile-info, also have link-info.\r\n",
        "Line" : 274,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# make sure we got compile and link.  Reset vars if something's wrong.\r\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "# MPICH just uses \"-show\". Try it.\r\n",
        "Line" : 290,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# We have our command lines, but we might need to copy MPI_COMPILE_CMDLINE\r\n\n# into MPI_LINK_CMDLINE, if we didn't find the link line.\r\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# Here, we're done with the interrogation part, and we'll try to extract args we care\r\n\n# about from what we learned from the compiler wrapper scripts.\r\n",
        "Line" : 307,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# If interrogation came back with something, extract our variable from the MPI command line\r\n",
        "Line" : 310,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Extract compile flags from the compile command line.\r\n",
        "Line" : 312,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Extract include paths from compile command line\r\n",
        "Line" : 325,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# try using showme:incdirs if extracting didn't work.\r\n",
        "Line" : 337,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# If all else fails, just search for mpi.h in the normal include paths.\r\n",
        "Line" : 343,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# Extract linker paths from the link command line\r\n",
        "Line" : 352,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# try using showme:libdirs if extracting didn't work.\r\n",
        "Line" : 361,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# Extract linker flags from the link command line\r\n",
        "Line" : 367,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "# Extract the set of libraries to link against from the link command\r\n\n# line\r\n",
        "Line" : 379,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# The intel wrappers on windows link against static versions of the MPI libraries.\r\n\n# The static libraries are simply listed on the command line without -l.\r\n\n# For instance: \" icl ... impi.lib \"\r\n",
        "Line" : 383,
        "CharPositionInLine" : 10
      },
      "42" : {
        "Text" : "# add the compiler implicit directories because some compilers\r\n\n# such as the intel compiler have libraries that show up\r\n\n# in the showme list that can only be found in the implicit\r\n\n# link directories of the compiler.\r\n",
        "Line" : 390,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Determine full path names for all of the libraries that one needs\r\n\n# to link against in an MPI program\r\n",
        "Line" : 399,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# MPI_LIB is cached by find_library, but we don't want that.  Clear it first.\r\n",
        "Line" : 407,
        "CharPositionInLine" : 10
      },
      "45" : {
        "Text" : "# Sanity check MPI_LIBRARIES to make sure there are enough libraries\r\n",
        "Line" : 418,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# If we didn't have an MPI compiler script to interrogate, attempt to find everything\r\n\n# with plain old find functions.  This is nasty because MPI implementations have LOTS of\r\n\n# different library names, so this section isn't going to be very generic.  We need to\r\n\n# make sure it works for MS MPI, though, since there are no compiler wrappers for that.\r\n",
        "Line" : 427,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Decide between 32-bit and 64-bit libraries for Microsoft's MPI\r\n",
        "Line" : 436,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "# Right now, we only know about the extra libs for C++.\r\n\n# We could add Fortran here (as there is usually libfmpich, etc.), but\r\n\n# this really only has to work with MS MPI on Windows.\r\n\n# Assume that other MPI's are covered by the compiler wrappers.\r\n",
        "Line" : 452,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# If we found MPI, set up all of the appropriate cache entries\r\n",
        "Line" : 472,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# clear out our temporary lib/header detectionv variable here.\r\n",
        "Line" : 479,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# finally set a found variable for each MPI language\r\n",
        "Line" : 484,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# This function attempts to compile with the regular compiler, to see if MPI programs\r\n\n# work with it.  This is a last ditch attempt after we've tried interrogating mpicc and\r\n\n# friends, and after we've tried to find generic libraries.  Works on machines like\r\n\n# Cray XE6, where the modules environment changes what MPI version cc, CC, and ftn use.\r\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# End definitions, commence real work here.\r\n",
        "Line" : 534,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Most mpi distros have some form of mpiexec which gives us something we can reliably look for.\r\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# call get_filename_component twice to remove mpiexec and the directory it exists in (typically bin).\r\n\n# This gives us a fairly reliable base directory to search for /bin /lib and /include from.\r\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#=============================================================================\r\n\n# Backward compatibility input hacks.  Propagate the FindMPI hints to C and\r\n\n# CXX if the respective new versions are not defined.  Translate the old\r\n\n# MPI_LIBRARY and MPI_EXTRA_LIBRARY to respective MPI_${lang}_LIBRARIES.\r\n\n#\r\n\n# Once we find the new variables, we translate them back into their old\r\n\n# equivalents below.\r\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Old input variables.\r\n",
        "Line" : 564,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Set new vars based on their old equivalents, if the new versions are not already set.\r\n",
        "Line" : 567,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Special handling for MPI_LIBRARY and MPI_EXTRA_LIBRARY, which we nixed in the\r\n\n# new FindMPI.  These need to be merged into MPI_<lang>_LIBRARIES\r\n",
        "Line" : 574,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "#=============================================================================\r\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# This loop finds the compilers and sends them off for interrogation.\r\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# If the user supplies a compiler *name* instead of an absolute path, assume that we need to find THAT compiler.\r\n",
        "Line" : 586,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# Get rid of our default list of names and just search for the name the user wants.\r\n",
        "Line" : 589,
        "CharPositionInLine" : 8
      },
      "64" : {
        "Text" : "# If the user specifies a compiler, we don't want to try to search libraries either.\r\n",
        "Line" : 593,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# last ditch try -- if nothing works so far, just try running the regular compiler and\r\n\n# see if we can create an MPI executable.\r\n",
        "Line" : 607,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "#=============================================================================\r\n\n# More backward compatibility stuff\r\n\n#\r\n\n# Bare MPI sans ${lang} vars are set to CXX then C, depending on what was found.\r\n\n# This mimics the behavior of the old language-oblivious FindMPI.\r\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Note that we might still have found Fortran, but you'll need to use MPI_Fortran_FOUND\r\n",
        "Line" : 643,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Chop MPI_LIBRARIES into the old-style MPI_LIBRARY and MPI_EXTRA_LIBRARY, and set them in cache.\r\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#=============================================================================\r\n",
        "Line" : 663,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# unset these vars to cleanup namespace\r\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 71
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindMatlab.cmake" : {
      "ObjectId" : "63b9b26625e574a580bdd4af635064b60f4badc9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindMatlab\r\n\n# ----------\r\n\n#\r\n\n# Finds Matlab installations and provides Matlab tools and libraries to cmake.\r\n\n#\r\n\n# This package first intention is to find the libraries associated with Matlab\r\n\n# in order to be able to build Matlab extensions (mex files). It can also be\r\n\n# used:\r\n\n#\r\n\n# * run specific commands in Matlab\r\n\n# * declare Matlab unit test\r\n\n# * retrieve various information from Matlab (mex extensions, versions and\r\n\n#   release queries, ...)\r\n\n#\r\n\n# The module supports the following components:\r\n\n#\r\n\n# * ``MX_LIBRARY``, ``ENG_LIBRARY`` and ``MAT_LIBRARY``: respectively the MX,\r\n\n#   ENG and MAT libraries of Matlab\r\n\n# * ``MAIN_PROGRAM`` the Matlab binary program.\r\n\n# * ``MEX_COMPILER`` the MEX compiler.\r\n\n# * ``SIMULINK`` the Simulink environment.\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#   The version given to the :command:`find_package` directive is the Matlab\r\n\n#   **version**, which should not be confused with the Matlab *release* name\r\n\n#   (eg. `R2014`).\r\n\n#   The :command:`matlab_get_version_from_release_name` and\r\n\n#   :command:`matlab_get_release_name_from_version` allow a mapping\r\n\n#   from the release name to the version.\r\n\n#\r\n\n# The variable :variable:`Matlab_ROOT_DIR` may be specified in order to give\r\n\n# the path of the desired Matlab version. Otherwise, the behaviour is platform\r\n\n# specific:\r\n\n#\r\n\n# * Windows: The installed versions of Matlab are retrieved from the\r\n\n#   Windows registry\r\n\n# * OS X: The installed versions of Matlab are given by the MATLAB\r\n\n#   paths in ``/Application``. If no such application is found, it falls back\r\n\n#   to the one that might be accessible from the PATH.\r\n\n# * Unix: The desired Matlab should be accessible from the PATH.\r\n\n#\r\n\n# Additional information is provided when :variable:`MATLAB_FIND_DEBUG` is set.\r\n\n# When a Matlab binary is found automatically and the ``MATLAB_VERSION``\r\n\n# is not given, the version is queried from Matlab directly.\r\n\n# On Windows, it can make a window running Matlab appear.\r\n\n#\r\n\n# The mapping of the release names and the version of Matlab is performed by\r\n\n# defining pairs (name, version).  The variable\r\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS` may be provided before the call to\r\n\n# the :command:`find_package` in order to handle additional versions.\r\n\n#\r\n\n# A Matlab scripts can be added to the set of tests using the\r\n\n# :command:`matlab_add_unit_test`. By default, the Matlab unit test framework\r\n\n# will be used (>= 2013a) to run this script, but regular ``.m`` files\r\n\n# returning an exit code can be used as well (0 indicating a success).\r\n\n#\r\n\n# Module Input Variables\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# Users or projects may set the following variables to configure the module\r\n\n# behaviour:\r\n\n#\r\n\n# :variable:`Matlab_ROOT_DIR`\r\n\n#   the root of the Matlab installation.\r\n\n# :variable:`MATLAB_FIND_DEBUG`\r\n\n#   outputs debug information\r\n\n# :variable:`MATLAB_ADDITIONAL_VERSIONS`\r\n\n#   additional versions of Matlab for the automatic retrieval of the installed\r\n\n#   versions.\r\n\n#\r\n\n# Variables defined by the module\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# Result variables\r\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\n#\r\n\n# ``Matlab_FOUND``\r\n\n#   ``TRUE`` if the Matlab installation is found, ``FALSE``\r\n\n#   otherwise. All variable below are defined if Matlab is found.\r\n\n# ``Matlab_ROOT_DIR``\r\n\n#   the final root of the Matlab installation determined by the FindMatlab\r\n\n#   module.\r\n\n# ``Matlab_MAIN_PROGRAM``\r\n\n#   the Matlab binary program. Available only if the component ``MAIN_PROGRAM``\r\n\n#   is given in the :command:`find_package` directive.\r\n\n# ``Matlab_INCLUDE_DIRS``\r\n\n#  the path of the Matlab libraries headers\r\n\n# ``Matlab_MEX_LIBRARY``\r\n\n#   library for mex, always available.\r\n\n# ``Matlab_MX_LIBRARY``\r\n\n#   mx library of Matlab (arrays). Available only if the component\r\n\n#   ``MX_LIBRARY`` has been requested.\r\n\n# ``Matlab_ENG_LIBRARY``\r\n\n#   Matlab engine library. Available only if the component ``ENG_LIBRARY``\r\n\n#   is requested.\r\n\n# ``Matlab_MAT_LIBRARY``\r\n\n#   Matlab matrix library. Available only if the component ``MAT_LIBRARY``\r\n\n#   is requested.\r\n\n# ``Matlab_LIBRARIES``\r\n\n#   the whole set of libraries of Matlab\r\n\n# ``Matlab_MEX_COMPILER``\r\n\n#   the mex compiler of Matlab. Currently not used.\r\n\n#   Available only if the component ``MEX_COMPILER`` is asked\r\n\n#\r\n\n# Cached variables\r\n\n# \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\r\n\n#\r\n\n# ``Matlab_MEX_EXTENSION``\r\n\n#   the extension of the mex files for the current platform (given by Matlab).\r\n\n# ``Matlab_ROOT_DIR``\r\n\n#   the location of the root of the Matlab installation found. If this value\r\n\n#   is changed by the user, the result variables are recomputed.\r\n\n#\r\n\n# Provided macros\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# :command:`matlab_get_version_from_release_name`\r\n\n#   returns the version from the release name\r\n\n# :command:`matlab_get_release_name_from_version`\r\n\n#   returns the release name from the Matlab version\r\n\n#\r\n\n# Provided functions\r\n\n# ^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# :command:`matlab_add_mex`\r\n\n#   adds a target compiling a MEX file.\r\n\n# :command:`matlab_add_unit_test`\r\n\n#   adds a Matlab unit test file as a test to the project.\r\n\n# :command:`matlab_extract_all_installed_versions_from_registry`\r\n\n#   parses the registry for all Matlab versions. Available on Windows only.\r\n\n#   The part of the registry parsed is dependent on the host processor\r\n\n# :command:`matlab_get_all_valid_matlab_roots_from_registry`\r\n\n#   returns all the possible Matlab paths, according to a previously\r\n\n#   given list. Only the existing/accessible paths are kept. This is mainly\r\n\n#   useful for the searching all possible Matlab installation.\r\n\n# :command:`matlab_get_mex_suffix`\r\n\n#   returns the suffix to be used for the mex files\r\n\n#   (platform/architecture dependent)\r\n\n# :command:`matlab_get_version_from_matlab_run`\r\n\n#   returns the version of Matlab, given the full directory of the Matlab\r\n\n#   program.\r\n\n#\r\n\n#\r\n\n# Known issues\r\n\n# ^^^^^^^^^^^^\r\n\n#\r\n\n# **Symbol clash in a MEX target**\r\n\n#   By default, every symbols inside a MEX\r\n\n#   file defined with the command :command:`matlab_add_mex` have hidden\r\n\n#   visibility, except for the entry point. This is the default behaviour of\r\n\n#   the MEX compiler, which lowers the risk of symbol collision between the\r\n\n#   libraries shipped with Matlab, and the libraries to which the MEX file is\r\n\n#   linking to. This is also the default on Windows platforms.\r\n\n#\r\n\n#   However, this is not sufficient in certain case, where for instance your\r\n\n#   MEX file is linking against libraries that are already loaded by Matlab,\r\n\n#   even if those libraries have different SONAMES.\r\n\n#   A possible solution is to hide the symbols of the libraries to which the\r\n\n#   MEX target is linking to. This can be achieved in GNU GCC compilers with\r\n\n#   the linker option ``-Wl,--exclude-libs,ALL``.\r\n\n#\r\n\n# **Tests using GPU resources**\r\n\n#   in case your MEX file is using the GPU and\r\n\n#   in order to be able to run unit tests on this MEX file, the GPU resources\r\n\n#   should be properly released by Matlab. A possible solution is to make\r\n\n#   Matlab aware of the use of the GPU resources in the session, which can be\r\n\n#   performed by a command such as ``D = gpuDevice()`` at the beginning of\r\n\n#   the test script (or via a fixture).\r\n\n#\r\n\n#\r\n\n# Reference\r\n\n# ^^^^^^^^^\r\n\n#\r\n\n# .. variable:: Matlab_ROOT_DIR\r\n\n#\r\n\n#    The root folder of the Matlab installation. If set before the call to\r\n\n#    :command:`find_package`, the module will look for the components in that\r\n\n#    path. If not set, then an automatic search of Matlab\r\n\n#    will be performed. If set, it should point to a valid version of Matlab.\r\n\n#\r\n\n# .. variable:: MATLAB_FIND_DEBUG\r\n\n#\r\n\n#    If set, the lookup of Matlab and the intermediate configuration steps are\r\n\n#    outputted to the console.\r\n\n#\r\n\n# .. variable:: MATLAB_ADDITIONAL_VERSIONS\r\n\n#\r\n\n#   If set, specifies additional versions of Matlab that may be looked for.\r\n\n#   The variable should be a list of strings, organised by pairs of release\r\n\n#   name and versions, such as follows::\r\n\n#\r\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\r\n\n#         \"release_name1=corresponding_version1\"\r\n\n#         \"release_name2=corresponding_version2\"\r\n\n#         ...\r\n\n#         )\r\n\n#\r\n\n#   Example::\r\n\n#\r\n\n#     set(MATLAB_ADDITIONAL_VERSIONS\r\n\n#         \"R2013b=8.2\"\r\n\n#         \"R2013a=8.1\"\r\n\n#         \"R2012b=8.0\")\r\n\n#\r\n\n#   The order of entries in this list matters when several versions of\r\n\n#   Matlab are installed. The priority is set according to the ordering in\r\n\n#   this list.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The currently supported versions. Other version can be added by the user by\r\n\n# providing MATLAB_ADDITIONAL_VERSIONS\r\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# temporary folder for all Matlab runs\r\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_get_version_from_release_name\r\n\n#\r\n\n#   Returns the version of Matlab (17.58) from a release name (R2017k)\r\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_get_release_name_from_version\r\n\n#\r\n\n#   Returns the release name (R2017k) from the version of Matlab (17.58)\r\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# extracts all the supported release names (R2017k...) of Matlab\r\n\n# internal use\r\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# extracts all the supported versions of Matlab\r\n\n# internal use\r\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_extract_all_installed_versions_from_registry\r\n\n#\r\n\n#   This function parses the registry and founds the Matlab versions that are\r\n\n#   installed. The found versions are returned in `matlab_versions`.\r\n\n#   Set `win64` to `TRUE` if the 64 bit version of Matlab should be looked for\r\n\n#   The returned list contains all versions under\r\n\n#   ``HKLM\\\\SOFTWARE\\\\Mathworks\\\\MATLAB`` or an empty list in case an error\r\n\n#   occurred (or nothing found).\r\n\n#\r\n\n#   .. note::\r\n\n#\r\n\n#     Only the versions are provided. No check is made over the existence of the\r\n\n#     installation referenced in the registry,\r\n\n#\r\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# /reg:64 should be added on 64 bits capable OSs in order to enable the\r\n\n# redirection of 64 bits applications\r\n",
        "Line" : 365,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# (internal)\r\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# get the supported versions\r\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# this is a manual population of the versions we want to look for\r\n\n# this can be done as is, but preferably with the call to\r\n\n# matlab_get_supported_versions and variable\r\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# populating the versions we want to look for\r\n\n# set(matlab_supported_versions)\r\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# # Matlab 7\r\n\n# set(matlab_major 7)\r\n\n# foreach(current_matlab_minor RANGE 4 20)\r\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\r\n",
        "Line" : 430,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# endforeach(current_matlab_minor)\r\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# # Matlab 8\r\n\n# set(matlab_major 8)\r\n\n# foreach(current_matlab_minor RANGE 0 5)\r\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# list(APPEND matlab_supported_versions \"${matlab_major}.${current_matlab_minor}\")\r\n",
        "Line" : 436,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# endforeach(current_matlab_minor)\r\n",
        "Line" : 437,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# # taking into account the possible additional versions provided by the user\r\n\n# if(DEFINED MATLAB_ADDITIONAL_VERSIONS)\r\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# list(APPEND matlab_supported_versions MATLAB_ADDITIONAL_VERSIONS)\r\n",
        "Line" : 441,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# endif()\r\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# we order from more recent to older\r\n",
        "Line" : 445,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_get_all_valid_matlab_roots_from_registry\r\n\n#\r\n\n#   Populates the Matlab root with valid versions of Matlab.\r\n\n#   The returned matlab_roots is organized in pairs\r\n\n#   ``(version_number,matlab_root_path)``.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     matlab_get_all_valid_matlab_roots_from_registry(\r\n\n#         matlab_versions\r\n\n#         matlab_roots)\r\n\n#\r\n\n#   ``matlab_versions``\r\n\n#     the versions of each of the Matlab installations\r\n\n#   ``matlab_roots``\r\n\n#     the location of each of the Matlab installations\r\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The matlab_versions comes either from\r\n\n# extract_matlab_versions_from_registry_brute_force or\r\n\n# matlab_extract_all_installed_versions_from_registry.\r\n",
        "Line" : 480,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_get_mex_suffix\r\n\n#\r\n\n#   Returns the extension of the mex files (the suffixes).\r\n\n#   This function should not be called before the appropriate Matlab root has\r\n\n#   been found.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     matlab_get_mex_suffix(\r\n\n#         matlab_root\r\n\n#         mex_suffix)\r\n\n#\r\n\n#   ``matlab_root``\r\n\n#     the root of the Matlab installation\r\n\n#   ``mex_suffix``\r\n\n#     the variable name in which the suffix will be returned.\r\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# todo setup the extension properly. Currently I do not know if this is\r\n\n# sufficient for all win32 distributions.\r\n\n# there is also CMAKE_EXECUTABLE_SUFFIX that could be tweaked\r\n",
        "Line" : 521,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# we first try without suffix, since cmake does not understand a list with\r\n\n# one empty string element\r\n",
        "Line" : 529,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# this call should populate the cache automatically\r\n",
        "Line" : 541,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# the program has been found?\r\n",
        "Line" : 553,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_get_version_from_matlab_run\r\n\n#\r\n\n#   This function runs Matlab program specified on arguments and extracts its\r\n\n#   version.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     matlab_get_version_from_matlab_run(\r\n\n#         matlab_binary_path\r\n\n#         matlab_list_versions)\r\n\n#\r\n\n#   ``matlab_binary_path``\r\n\n#     the location of the `matlab` binary executable\r\n\n#   ``matlab_list_versions``\r\n\n#     the version extracted from Matlab\r\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# the log file is needed since on windows the command executes in a new\r\n\n# window and it is not possible to get back the answer of Matlab\r\n\n# the -wait command is needed on windows, otherwise the call returns\r\n\n# immediately after the program launches itself.\r\n",
        "Line" : 618,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# timeout set to 120 seconds, in case it does not start\r\n\n# note as said before OUTPUT_VARIABLE cannot be used in a platform\r\n\n# independent manner however, not setting it would flush the output of Matlab\r\n\n# in the current console (unix variant)\r\n",
        "Line" : 633,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# if successful, read back the log\r\n",
        "Line" : 667,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_add_unit_test\r\n\n#\r\n\n#   Adds a Matlab unit test to the test set of cmake/ctest.\r\n\n#   This command requires the component ``MAIN_PROGRAM``.\r\n\n#   The unit test uses the Matlab unittest framework (default, available\r\n\n#   starting Matlab 2013b+) except if the option ``NO_UNITTEST_FRAMEWORK``\r\n\n#   is given.\r\n\n#\r\n\n#   The function expects one Matlab test script file to be given.\r\n\n#   In the case ``NO_UNITTEST_FRAMEWORK`` is given, the unittest script file\r\n\n#   should contain the script to be run, plus an exit command with the exit\r\n\n#   value. This exit value will be passed to the ctest framework (0 success,\r\n\n#   non 0 failure). Additional arguments accepted by :command:`add_test` can be\r\n\n#   passed through ``TEST_ARGS`` (eg. ``CONFIGURATION <config> ...``).\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     matlab_add_unit_test(\r\n\n#         NAME <name>\r\n\n#         UNITTEST_FILE matlab_file_containing_unittest.m\r\n\n#         [CUSTOM_MATLAB_COMMAND matlab_command_to_run_as_test]\r\n\n#         [UNITTEST_PRECOMMAND matlab_command_to_run]\r\n\n#         [TIMEOUT timeout]\r\n\n#         [ADDITIONAL_PATH path1 [path2 ...]]\r\n\n#         [MATLAB_ADDITIONAL_STARTUP_OPTIONS option1 [option2 ...]]\r\n\n#         [TEST_ARGS arg1 [arg2 ...]]\r\n\n#         [NO_UNITTEST_FRAMEWORK]\r\n\n#         )\r\n\n#\r\n\n#   The function arguments are:\r\n\n#\r\n\n#   ``NAME``\r\n\n#     name of the unittest in ctest.\r\n\n#   ``UNITTEST_FILE``\r\n\n#     the matlab unittest file. Its path will be automatically\r\n\n#     added to the Matlab path.\r\n\n#   ``CUSTOM_MATLAB_COMMAND``\r\n\n#     Matlab script command to run as the test.\r\n\n#     If this is not set, then the following is run:\r\n\n#     ``runtests('matlab_file_name'), exit(max([ans(1,:).Failed]))``\r\n\n#     where ``matlab_file_name`` is the ``UNITTEST_FILE`` without the extension.\r\n\n#   ``UNITTEST_PRECOMMAND``\r\n\n#     Matlab script command to be ran before the file\r\n\n#     containing the test (eg. GPU device initialisation based on CMake\r\n\n#     variables).\r\n\n#   ``TIMEOUT``\r\n\n#     the test timeout in seconds. Defaults to 180 seconds as the\r\n\n#     Matlab unit test may hang.\r\n\n#   ``ADDITIONAL_PATH``\r\n\n#     a list of paths to add to the Matlab path prior to\r\n\n#     running the unit test.\r\n\n#   ``MATLAB_ADDITIONAL_STARTUP_OPTIONS``\r\n\n#     a list of additional option in order\r\n\n#     to run Matlab from the command line.\r\n\n#     ``-nosplash -nodesktop -nodisplay`` are always added.\r\n\n#   ``TEST_ARGS``\r\n\n#     Additional options provided to the add_test command. These\r\n\n#     options are added to the default options (eg. \"CONFIGURATIONS Release\")\r\n\n#   ``NO_UNITTEST_FRAMEWORK``\r\n\n#     when set, indicates that the test should not\r\n\n#     use the unittest framework of Matlab (available for versions >= R2013a).\r\n\n#   ``WORKING_DIRECTORY``\r\n\n#     This will be the working directory for the test. If specified it will\r\n\n#     also be the output directory used for the log file of the test run.\r\n\n#     If not specifed the temporary directory ``${CMAKE_BINARY_DIR}/Matlab`` will\r\n\n#     be used as the working directory and the log location.\r\n\n#\r\n",
        "Line" : 703,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#.rst:\r\n\n# .. command:: matlab_add_mex\r\n\n#\r\n\n#   Adds a Matlab MEX target.\r\n\n#   This commands compiles the given sources with the current tool-chain in\r\n\n#   order to produce a MEX file. The final name of the produced output may be\r\n\n#   specified, as well as additional link libraries, and a documentation entry\r\n\n#   for the MEX file. Remaining arguments of the call are passed to the\r\n\n#   :command:`add_library` or :command:`add_executable` command.\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#      matlab_add_mex(\r\n\n#          NAME <name>\r\n\n#          [EXECUTABLE | MODULE | SHARED]\r\n\n#          SRC src1 [src2 ...]\r\n\n#          [OUTPUT_NAME output_name]\r\n\n#          [DOCUMENTATION file.txt]\r\n\n#          [LINK_TO target1 target2 ...]\r\n\n#          [...]\r\n\n#      )\r\n\n#\r\n\n#   ``NAME``\r\n\n#     name of the target.\r\n\n#   ``SRC``\r\n\n#     list of source files.\r\n\n#   ``LINK_TO``\r\n\n#     a list of additional link dependencies.  The target links to ``libmex``\r\n\n#     by default. If ``Matlab_MX_LIBRARY`` is defined, it also\r\n\n#     links to ``libmx``.\r\n\n#   ``OUTPUT_NAME``\r\n\n#     if given, overrides the default name. The default name is\r\n\n#     the name of the target without any prefix and\r\n\n#     with ``Matlab_MEX_EXTENSION`` suffix.\r\n\n#   ``DOCUMENTATION``\r\n\n#     if given, the file ``file.txt`` will be considered as\r\n\n#     being the documentation file for the MEX file. This file is copied into\r\n\n#     the same folder without any processing, with the same name as the final\r\n\n#     mex file, and with extension `.m`. In that case, typing ``help <name>``\r\n\n#     in Matlab prints the documentation contained in this file.\r\n\n#   ``MODULE`` or ``SHARED`` may be given to specify the type of library to be\r\n\n#     created. ``EXECUTABLE`` may be given to create an executable instead of\r\n\n#     a library. If no type is given explicitly, the type is ``SHARED``.\r\n\n#\r\n\n#   The documentation file is not processed and should be in the following\r\n\n#   format:\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     % This is the documentation\r\n\n#     function ret = mex_target_output_name(input1)\r\n\n#\r\n",
        "Line" : 809,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# we do not need all this on Windows\r\n\n# pthread options\r\n",
        "Line" : 864,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# we should use try_compile instead, the link flags are discarded from\r\n\n# this compiler_flag function.\r\n\n#check_cxx_compiler_flag(-Wl,--exclude-libs,ALL HAS_SYMBOL_HIDING_CAPABILITY)\r\n",
        "Line" : 871,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# documentation\r\n",
        "Line" : 925,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# documentation\r\n",
        "Line" : 934,
        "CharPositionInLine" : 10
      },
      "41" : {
        "Text" : "# entry point in the mex file + taking care of visibility and symbol clashes.\r\n",
        "Line" : 936,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Apparently, compiling with -pthread generated the proper link flags\r\n\n# and some defines at compilation\r\n",
        "Line" : 944,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# if we do not do that, the symbols linked from eg. boost remain weak and\r\n\n# then clash with the ones defined in the matlab process. So by default\r\n\n# the symbols are hidden.\r\n\n# This also means that for shared libraries (like MEX), the entry point\r\n\n# should be explicitly declared with default visibility, otherwise Matlab\r\n\n# cannot find the entry point.\r\n\n# Note that this is particularly meaningful if the MEX wrapper itself\r\n\n# contains symbols that are clashing with Matlab (that are compiled in the\r\n\n# MEX file). In order to propagate the visibility options to the libraries\r\n\n# to which the MEX file is linked against, the -Wl,--exclude-libs,ALL\r\n\n# option should also be specified.\r\n",
        "Line" : 950,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#  get_target_property(\r\n\n#    _previous_link_flags\r\n\n#    ${${prefix}_NAME}\r\n\n#    LINK_FLAGS)\r\n\n#  if(NOT _previous_link_flags)\r\n\n#    set(_previous_link_flags)\r\n\n#  endif()\r\n",
        "Line" : 969,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\r\n\n#    set_target_properties(${${prefix}_NAME}\r\n\n#      PROPERTIES\r\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,--exclude-libs,ALL\"\r\n\n#        # -Wl,--version-script=${_FindMatlab_SELF_DIR}/MatlabLinuxVisibility.map\"\r\n\n#    )\r\n\n#  elseif(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\")\r\n\n#    # in this case, all other symbols become hidden.\r\n\n#    set_target_properties(${${prefix}_NAME}\r\n\n#      PROPERTIES\r\n\n#        LINK_FLAGS \"${_previous_link_flags} -Wl,-exported_symbol,_mexFunction\"\r\n\n#        #-Wl,-exported_symbols_list,${_FindMatlab_SELF_DIR}/MatlabOSXVisilibity.map\"\r\n\n#    )\r\n\n#  endif()\r\n",
        "Line" : 977,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# (internal)\r\n\n# Used to get the version of matlab, using caching. This basically transforms the\r\n\n# output of the root list, with possible unknown version, to a version\r\n\n#\r\n",
        "Line" : 1005,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# if the version is not trivial, we query matlab for that\r\n\n# we keep track of the location of matlab that induced this version\r\n\n#if(NOT DEFINED Matlab_PROG_VERSION_STRING_AUTO_DETECT)\r\n\n#  set(Matlab_PROG_VERSION_STRING_AUTO_DETECT \"\" CACHE INTERNAL \"internal matlab location for the discovered version\")\r\n\n#endif()\r\n",
        "Line" : 1011,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# the version is known, we just return it\r\n",
        "Line" : 1018,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#\r\n",
        "Line" : 1024,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# do we already have a matlab program?\r\n",
        "Line" : 1027,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# if not found, clear the dependent variables\r\n",
        "Line" : 1044,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# full real path for path comparison\r\n",
        "Line" : 1055,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# is it the same as the previous one?\r\n",
        "Line" : 1060,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# update the location of the program\r\n",
        "Line" : 1066,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# set the version into the cache\r\n",
        "Line" : 1079,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# warning, just in case several versions found (should not happen)\r\n",
        "Line" : 1082,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# return the updated value\r\n",
        "Line" : 1087,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# ###################################\r\n\n# Exploring the possible Matlab_ROOTS\r\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# this variable will get all Matlab installations found in the current system.\r\n",
        "Line" : 1101,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# if the user specifies a possible root, we keep this one\r\n",
        "Line" : 1107,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# if Matlab_ROOT_DIR specified but erroneous\r\n",
        "Line" : 1110,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# NOTFOUND indicates the code below to search for the version automatically\r\n",
        "Line" : 1115,
        "CharPositionInLine" : 4
      },
      "63" : {
        "Text" : "# empty version\r\n",
        "Line" : 1117,
        "CharPositionInLine" : 72
      },
      "64" : {
        "Text" : "# cached version\r\n",
        "Line" : 1119,
        "CharPositionInLine" : 95
      },
      "65" : {
        "Text" : "# if the user does not specify the possible installation root, we look for\r\n\n# one installation using the appropriate heuristics\r\n",
        "Line" : 1126,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# On WIN32, we look for Matlab installation in the registry\r\n\n# if unsuccessful, we look for all known revision and filter the existing\r\n\n# ones.\r\n",
        "Line" : 1131,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# testing if we are able to extract the needed information from the registry\r\n",
        "Line" : 1135,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# the returned list is empty, doing the search on all known versions\r\n",
        "Line" : 1139,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# filtering the results with the registry keys\r\n",
        "Line" : 1149,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# on mac, we look for the /Application paths\r\n\n# this corresponds to the behaviour on Windows. On Linux, we do not have\r\n\n# any other guess.\r\n",
        "Line" : 1155,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# if we have not found anything, we fall back on the PATH\r\n",
        "Line" : 1190,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# At this point, we have no other choice than trying to find it from PATH.\r\n\n# If set by the user, this wont change\r\n",
        "Line" : 1193,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# we then populate the list of roots, with empty version\r\n",
        "Line" : 1201,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# resolve symlinks\r\n",
        "Line" : 1206,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# get the directory (the command below has to be run twice)\r\n\n# this will be the matlab root\r\n",
        "Line" : 1209,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Matlab should be in bin\r\n",
        "Line" : 1212,
        "CharPositionInLine" : 93
      },
      "77" : {
        "Text" : "# take the first possible Matlab root\r\n",
        "Line" : 1235,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# adding a warning in case of ambiguity\r\n",
        "Line" : 1242,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# check if the root changed wrt. the previous defined one, if so\r\n\n# clear all the cached variables for being able to reconfigure properly\r\n",
        "Line" : 1250,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# internal\r\n",
        "Line" : 1266,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "#Matlab_PROG_VERSION_STRING_AUTO_DETECT\r\n",
        "Line" : 1269,
        "CharPositionInLine" : 8
      },
      "82" : {
        "Text" : "# Fix the version, in case this one is NOTFOUND\r\n",
        "Line" : 1283,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# i should be for intel\r\n",
        "Line" : 1310,
        "CharPositionInLine" : 32
      },
      "84" : {
        "Text" : "# This variable goes to the cache.\r\n",
        "Line" : 1356,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# internal\r\n\n# This small stub around find_library is to prevent any pollution of CMAKE_FIND_LIBRARY_PREFIXES in the global scope.\r\n\n# This is the function to be used below instead of the find_library directives.\r\n",
        "Line" : 1368,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# the MEX library/header are required\r\n",
        "Line" : 1380,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# the MEX extension is required\r\n",
        "Line" : 1399,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# the matlab root is required\r\n",
        "Line" : 1402,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# component Mex Compiler\r\n",
        "Line" : 1405,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# component Matlab program\r\n",
        "Line" : 1421,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# Component MX library\r\n",
        "Line" : 1437,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# Component ENG library\r\n",
        "Line" : 1453,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Component MAT library\r\n",
        "Line" : 1469,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# Component Simulink\r\n",
        "Line" : 1485,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 95
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindMotif.cmake" : {
      "ObjectId" : "ec591d324fbd52756df17b0070b7561bd6cbc526",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindMotif\r\n\n# ---------\r\n\n#\r\n\n# Try to find Motif (or lesstif)\r\n\n#\r\n\n# Once done this will define:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   MOTIF_FOUND        - system has MOTIF\r\n\n#   MOTIF_INCLUDE_DIR  - include paths to use Motif\r\n\n#   MOTIF_LIBRARIES    - Link these to use Motif\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindOpenAL.cmake" : {
      "ObjectId" : "872949610daf0af3eca7787f0dfe8a47414f36b1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindOpenAL\r\n\n# ----------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Locate OpenAL This module defines OPENAL_LIBRARY OPENAL_FOUND, if\r\n\n# false, do not try to link to OpenAL OPENAL_INCLUDE_DIR, where to find\r\n\n# the headers\r\n\n#\r\n\n# $OPENALDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OPENALDIR used in building OpenAL.\r\n\n#\r\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\r\n\n# module.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This makes the presumption that you are include al.h like\r\n\n# #include \"al.h\"\r\n\n# and not\r\n\n# #include <AL/al.h>\r\n\n# The reason for this is that the latter is not entirely portable.\r\n\n# Windows/Creative Labs does not by default put their headers in AL/ and\r\n\n# OS X uses the convention <OpenAL/al.h>.\r\n\n#\r\n\n# For Windows, Creative Labs seems to have added a registry key for their\r\n\n# OpenAL 1.1 installer. I have added that key to the list of search paths,\r\n\n# however, the key looks like it could be a little fragile depending on\r\n\n# if they decide to change the 1.00.0000 number for bug fix releases.\r\n\n# Also, they seem to have laid down groundwork for multiple library platforms\r\n\n# which puts the library in an extra subdirectory. Currently there is only\r\n\n# Win32 and I have hardcoded that here. This may need to be adjusted as\r\n\n# platforms are introduced.\r\n\n# The OpenAL 1.0 installer doesn't seem to have a useful key I can use.\r\n\n# I do not know if the Nvidia OpenAL SDK has a registry key.\r\n\n#\r\n\n# For OS X, remember that OpenAL was added by Apple in 10.4 (Tiger).\r\n\n# To support the framework, I originally wrote special framework detection\r\n\n# code in this module which I have now removed with CMake's introduction\r\n\n# of native support for frameworks.\r\n\n# In addition, OpenAL is open source, and it is possible to compile on Panther.\r\n\n# Furthermore, due to bugs in the initial OpenAL release, and the\r\n\n# transition to OpenAL 1.1, it is common to need to override the built-in\r\n\n# framework.\r\n\n# Per my request, CMake should search for frameworks first in\r\n\n# the following order:\r\n\n# ~/Library/Frameworks/OpenAL.framework/Headers\r\n\n# /Library/Frameworks/OpenAL.framework/Headers\r\n\n# /System/Library/Frameworks/OpenAL.framework/Headers\r\n\n#\r\n\n# On OS X, this will prefer the Framework version (if found) over others.\r\n\n# People will have to manually change the cache values of\r\n\n# OPENAL_LIBRARY to override this selection or set the CMake environment\r\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Fink\r\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 66,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 67,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindOpenCL.cmake" : {
      "ObjectId" : "d5c622812bcaca0067800d35c950b128857763d2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindOpenCL\r\n\n# ----------\r\n\n#\r\n\n# Try to find OpenCL\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines :prop_tgt:`IMPORTED` target ``OpenCL::OpenCL``, if\r\n\n# OpenCL has been found.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following variables::\r\n\n#\r\n\n#   OpenCL_FOUND          - True if OpenCL was found\r\n\n#   OpenCL_INCLUDE_DIRS   - include directories for OpenCL\r\n\n#   OpenCL_LIBRARIES      - link against this library to use OpenCL\r\n\n#   OpenCL_VERSION_STRING - Highest supported OpenCL version (eg. 1.2)\r\n\n#   OpenCL_VERSION_MAJOR  - The major version of the OpenCL implementation\r\n\n#   OpenCL_VERSION_MINOR  - The minor version of the OpenCL implementation\r\n\n#\r\n\n# The module will also define two cache variables::\r\n\n#\r\n\n#   OpenCL_INCLUDE_DIR    - the OpenCL include directory\r\n\n#   OpenCL_LIBRARY        - the path to the OpenCL library\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindOpenGL.cmake" : {
      "ObjectId" : "6df919af33b65b3991ce8f08dac2a9d47dc8ded4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindOpenGL\r\n\n# ----------\r\n\n#\r\n\n# FindModule for OpenGL and GLU.\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the :prop_tgt:`IMPORTED` targets:\r\n\n#\r\n\n# ``OpenGL::GL``\r\n\n#  Defined if the system has OpenGL.\r\n\n# ``OpenGL::GLU``\r\n\n#  Defined if the system has GLU.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module sets the following variables:\r\n\n#\r\n\n# ``OPENGL_FOUND``\r\n\n#  True, if the system has OpenGL.\r\n\n# ``OPENGL_XMESA_FOUND``\r\n\n#  True, if the system has XMESA.\r\n\n# ``OPENGL_GLU_FOUND``\r\n\n#  True, if the system has GLU.\r\n\n# ``OPENGL_INCLUDE_DIR``\r\n\n#  Path to the OpenGL include directory.\r\n\n# ``OPENGL_LIBRARIES``\r\n\n#  Paths to the OpenGL and GLU libraries.\r\n\n#\r\n\n# If you want to use just GL you can use these values:\r\n\n#\r\n\n# ``OPENGL_gl_LIBRARY``\r\n\n#  Path to the OpenGL library.\r\n\n# ``OPENGL_glu_LIBRARY``\r\n\n#  Path to the GLU library.\r\n\n#\r\n\n# OSX Specific\r\n\n# ^^^^^^^^^^^^\r\n\n#\r\n\n# On OSX default to using the framework version of OpenGL. People will\r\n\n# have to change the cache values of OPENGL_glu_LIBRARY and\r\n\n# OPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The OpenGL.framework provides both gl and glu\r\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Handle HP-UX cases where we only want to find OpenGL in either hpux64\r\n\n# or hpux32 depending on if we're doing a 64 bit build.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# The first line below is to make sure that the proper headers\r\n\n# are used on a Linux machine with the NVidia drivers installed.\r\n\n# They replace Mesa with NVidia's own library but normally do not\r\n\n# install headers and that causes the linking to\r\n\n# fail since the compiler finds the Mesa headers but NVidia's library.\r\n\n# Make sure the NVIDIA directory comes BEFORE the others.\r\n\n#  - Atanas Georgiev <atanas@cs.columbia.edu>\r\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This deprecated setting is for backward compatibility with CMake1.4\r\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This deprecated setting is for backward compatibility with CMake1.4\r\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# OpenGL:: targets\r\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindOpenMP.cmake" : {
      "ObjectId" : "31be1c76c812af5f72072b32e10bc563be7f0534",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindOpenMP\r\n\n# ----------\r\n\n#\r\n\n# Finds OpenMP support\r\n\n#\r\n\n# This module can be used to detect OpenMP support in a compiler.  If\r\n\n# the compiler supports OpenMP, the flags required to compile with\r\n\n# OpenMP support are returned in variables for the different languages.\r\n\n# The variables may be empty if the compiler does not need a special\r\n\n# flag to support OpenMP.\r\n\n#\r\n\n# The following variables are set:\r\n\n#\r\n\n# ``OpenMP_C_FLAGS``\r\n\n#   Flags to add to the C compiler for OpenMP support.\r\n\n# ``OpenMP_CXX_FLAGS``\r\n\n#   Flags to add to the CXX compiler for OpenMP support.\r\n\n# ``OpenMP_Fortran_FLAGS``\r\n\n#   Flags to add to the Fortran compiler for OpenMP support.\r\n\n# ``OPENMP_FOUND``\r\n\n#   True if openmp is detected.\r\n\n#\r\n\n# The following internal variables are set, if detected:\r\n\n#\r\n\n# ``OpenMP_C_SPEC_DATE``\r\n\n#   Specification date of OpenMP version of C compiler.\r\n\n# ``OpenMP_CXX_SPEC_DATE``\r\n\n#   Specification date of OpenMP version of CXX compiler.\r\n\n# ``OpenMP_Fortran_SPEC_DATE``\r\n\n#   Specification date of OpenMP version of Fortran compiler.\r\n\n#\r\n\n# The specification dates are formatted as integers of the form\r\n\n# ``CCYYMM`` where these represent the decimal digits of the century,\r\n\n# year, and month.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Empty, if compiler automatically accepts openmp\r\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#GNU\r\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#Clang\r\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#Microsoft Visual Studio\r\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#Intel windows\r\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#PathScale, Intel\r\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#Sun\r\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#HP\r\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#IBM XL C/c++\r\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#Portland Group, MIPSpro\r\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Move the flag that matches the compiler to the head of the list,\r\n\n# this is faster and doesn't clutter the output that much. If that\r\n\n# flag doesn't work we will still try all.\r\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# sample openmp source code to test\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# same in Fortran\r\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# (\"${LANG}\" STREQUAL \"Fortran\")\r\n",
        "Line" : 169,
        "CharPositionInLine" : 9
      },
      "16" : {
        "Text" : "# check c compiler\r\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# if these are set then do not try to find them again,\r\n\n# by avoiding any try_compiles for the flags\r\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# check cxx compiler\r\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# if these are set then do not try to find them again,\r\n\n# by avoiding any try_compiles for the flags\r\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# use the same source for CXX as C for now\r\n",
        "Line" : 240,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# check Fortran compiler\r\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# if these are set then do not try to find them again,\r\n\n# by avoiding any try_compiles for the flags\r\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 23
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindOpenSSL.cmake" : {
      "ObjectId" : "df5106140a5fa4ce87ac7bcb7ef93a7fd7c99d48",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindOpenSSL\r\n\n# -----------\r\n\n#\r\n\n# Find the OpenSSL encryption library.\r\n\n#\r\n\n# Imported Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\r\n\n#\r\n\n# ``OpenSSL::SSL``\r\n\n#   The OpenSSL ``ssl`` library, if found.\r\n\n# ``OpenSSL::Crypto``\r\n\n#   The OpenSSL ``crypto`` library, if found.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables in your project:\r\n\n#\r\n\n# ``OPENSSL_FOUND``\r\n\n#   System has the OpenSSL library.\r\n\n# ``OPENSSL_INCLUDE_DIR``\r\n\n#   The OpenSSL include directory.\r\n\n# ``OPENSSL_CRYPTO_LIBRARY``\r\n\n#   The OpenSSL crypto library.\r\n\n# ``OPENSSL_SSL_LIBRARY``\r\n\n#   The OpenSSL SSL library.\r\n\n# ``OPENSSL_LIBRARIES``\r\n\n#   All OpenSSL libraries.\r\n\n# ``OPENSSL_VERSION``\r\n\n#   This is set to ``$major.$minor.$revision$patch`` (e.g. ``0.9.8s``).\r\n\n#\r\n\n# Hints\r\n\n# ^^^^^\r\n\n#\r\n\n# Set ``OPENSSL_ROOT_DIR`` to the root directory of an OpenSSL installation.\r\n\n# Set ``OPENSSL_USE_STATIC_LIBS`` to ``TRUE`` to look for static libraries.\r\n\n# Set ``OPENSSL_MSVC_STATIC_RT`` set ``TRUE`` to choose the MT version of the lib.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# http://www.slproweb.com/products/Win32OpenSSL.html\r\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# /MD and /MDd are the standard values - if someone wants to use\r\n\n# others, the libnames have to change here too\r\n\n# use also ssl and ssleay32 in debug as fallback for openssl < 0.9.8b\r\n\n# enable OPENSSL_MSVC_STATIC_RT to get the libs build /MT (Multithreaded no-DLL)\r\n\n# In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:\r\n\n#   * MD for dynamic-release\r\n\n#   * MDd for dynamic-debug\r\n\n#   * MT for static-release\r\n\n#   * MTd for static-debug\r\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Implementation details:\r\n\n# We are using the libraries located in the VC subdir instead of the parent directory eventhough :\r\n\n# libeay32MD.lib is identical to ../libeay32.lib, and\r\n\n# ssleay32MD.lib is identical to ../ssleay32.lib\r\n\n# enable OPENSSL_USE_STATIC_LIBS to use the static libs located in lib/VC/static\r\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Since OpenSSL 1.1, lib names are like libcrypto32MTd.lib and libssl32MTd.lib\r\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# same player, for MinGW\r\n",
        "Line" : 212,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Not sure what to pick for -say- intel, let's use the toplevel ones and hope someone report issues:\r\n",
        "Line" : 241,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# compat defines\r\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# The version number is encoded as 0xMNNFFPPS: major minor fix patch status\r\n\n# The status gives if this is a developer or prerelease and is ignored here.\r\n\n# Major, minor, and fix directly translate into the version numbers shown in\r\n\n# the string. The patch field translates to the single character suffix that\r\n\n# indicates the bug fix state, which 00 -> nothing, 01 -> a, 02 -> b and so\r\n\n# on.\r\n",
        "Line" : 340,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# 96 is the ASCII code of 'a' minus 1\r\n",
        "Line" : 358,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Once anyone knows how OpenSSL would call the patch versions beyond 'z'\r\n\n# this should be updated to handle that, too. This has not happened yet\r\n\n# so it is simply ignored here for now.\r\n",
        "Line" : 361,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Restore the original find library ordering\r\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindOpenSceneGraph.cmake" : {
      "ObjectId" : "a025bcf98aacedb18edcb3c1b12bb3487952275e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindOpenSceneGraph\r\n\n# ------------------\r\n\n#\r\n\n# Find OpenSceneGraph\r\n\n#\r\n\n# This module searches for the OpenSceneGraph core \"osg\" library as well\r\n\n# as OpenThreads, and whatever additional COMPONENTS (nodekits) that you\r\n\n# specify.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     See http://www.openscenegraph.org\r\n\n#\r\n\n#\r\n\n#\r\n\n# NOTE: To use this module effectively you must either require CMake >=\r\n\n# 2.6.3 with cmake_minimum_required(VERSION 2.6.3) or download and place\r\n\n# FindOpenThreads.cmake, Findosg_functions.cmake, Findosg.cmake, and\r\n\n# Find<etc>.cmake files into your CMAKE_MODULE_PATH.\r\n\n#\r\n\n# ==================================\r\n\n#\r\n\n# This module accepts the following variables (note mixed case)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     OpenSceneGraph_DEBUG - Enable debugging output\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     OpenSceneGraph_MARK_AS_ADVANCED - Mark cache variables as advanced\r\n\n#                                       automatically\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following environment variables are also respected for finding the\r\n\n# OSG and it's various components.  CMAKE_PREFIX_PATH can also be used\r\n\n# for this (see find_library() CMake documentation).\r\n\n#\r\n\n# ``<MODULE>_DIR``\r\n\n#   (where MODULE is of the form \"OSGVOLUME\" and there is a FindosgVolume.cmake file)\r\n\n# ``OSG_DIR``\r\n\n#   ..\r\n\n# ``OSGDIR``\r\n\n#   ..\r\n\n# ``OSG_ROOT``\r\n\n#   ..\r\n\n#\r\n\n#\r\n\n# [CMake 2.8.10]: The CMake variable OSG_DIR can now be used as well to\r\n\n# influence detection, instead of needing to specify an environment\r\n\n# variable.\r\n\n#\r\n\n# This module defines the following output variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     OPENSCENEGRAPH_FOUND - Was the OSG and all of the specified components found?\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     OPENSCENEGRAPH_VERSION - The version of the OSG which was found\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     OPENSCENEGRAPH_INCLUDE_DIRS - Where to find the headers\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     OPENSCENEGRAPH_LIBRARIES - The OSG libraries\r\n\n#\r\n\n#\r\n\n#\r\n\n# ================================== Example Usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   find_package(OpenSceneGraph 2.0.0 REQUIRED osgDB osgUtil)\r\n\n#       # libOpenThreads & libosg automatically searched\r\n\n#   include_directories(${OPENSCENEGRAPH_INCLUDE_DIRS})\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   add_executable(foo foo.cc)\r\n\n#   target_link_libraries(foo ${OPENSCENEGRAPH_LIBRARIES})\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# Naming convention:\r\n\n#  Local variables of the form _osg_foo\r\n\n#  Input variables of the form OpenSceneGraph_FOO\r\n\n#  Output variables of the form OPENSCENEGRAPH_FOO\r\n\n#\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# First we need to find and parse osg/Version\r\n\n#\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Try to ascertain the version...\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\r\n\n# Here we call find_package() on all of the components\r\n\n#\r\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# append to list if module was found OR is required\r\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#\r\n\n# Check each module to see if it's found\r\n\n#\r\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindOpenThreads.cmake" : {
      "ObjectId" : "4124a9ffd4356c3dc322e385dc4fa43528be437a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindOpenThreads\r\n\n# ---------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# OpenThreads is a C++ based threading library.  Its largest userbase\r\n\n# seems to OpenSceneGraph so you might notice I accept OSGDIR as an\r\n\n# environment path.  I consider this part of the Findosg* suite used to\r\n\n# find OpenSceneGraph components.  Each component is separate and you\r\n\n# must opt in to each module.\r\n\n#\r\n\n# Locate OpenThreads This module defines OPENTHREADS_LIBRARY\r\n\n# OPENTHREADS_FOUND, if false, do not try to link to OpenThreads\r\n\n# OPENTHREADS_INCLUDE_DIR, where to find the headers\r\n\n#\r\n\n# $OPENTHREADS_DIR is an environment variable that would correspond to\r\n\n# the ./configure --prefix=$OPENTHREADS_DIR used in building osg.\r\n\n#\r\n\n# [CMake 2.8.10]: The CMake variables OPENTHREADS_DIR or OSG_DIR can now\r\n\n# be used as well to influence detection, instead of needing to specify\r\n\n# an environment variable.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <OpenThreads/Thread>\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To make it easier for one-step automated configuration/builds,\r\n\n# we leverage environmental paths. This is preferable\r\n\n# to the -DVAR=value switches because it insulates the\r\n\n# users from changes we may make in this script.\r\n\n# It also offers a little more flexibility than setting\r\n\n# the CMAKE_*_PATH since we can target specific components.\r\n\n# However, the default CMake behavior will search system paths\r\n\n# before anything else. This is problematic in the cases\r\n\n# where you have an older (stable) version installed, but\r\n\n# are trying to build a newer version.\r\n\n# CMake doesn't offer a nice way to globally control this behavior\r\n\n# so we have to do a nasty \"double FIND_\" in this module.\r\n\n# The first FIND disables the CMAKE_ search paths and only checks\r\n\n# the environmental paths.\r\n\n# If nothing is found, then the second find will search the\r\n\n# standard install paths.\r\n\n# Explicit -DVAR=value arguments should still be able to override everything.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Fink\r\n",
        "Line" : 62,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 63,
        "CharPositionInLine" : 19
      },
      "6" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 64,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPHP4.cmake" : {
      "ObjectId" : "a86ac3b456e02c1d4e7f03c5904f33aa5b79a346",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPHP4\r\n\n# --------\r\n\n#\r\n\n# Find PHP4\r\n\n#\r\n\n# This module finds if PHP4 is installed and determines where the\r\n\n# include files and libraries are.  It also determines what the name of\r\n\n# the library is.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PHP4_INCLUDE_PATH       = path to where php.h can be found\r\n\n#   PHP4_EXECUTABLE         = full path to the php4 binary\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this is a hack for now\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPNG.cmake" : {
      "ObjectId" : "8c9e1240406154319f5d1677758a4a7e6710fe7f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPNG\r\n\n# -------\r\n\n#\r\n\n# Find libpng, the official reference library for the PNG image format.\r\n\n#\r\n\n# Imported targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following :prop_tgt:`IMPORTED` target:\r\n\n#\r\n\n# ``PNG::PNG``\r\n\n#   The libpng library, if found.\r\n\n#\r\n\n# Result variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables in your project:\r\n\n#\r\n\n# ``PNG_INCLUDE_DIRS``\r\n\n#   where to find png.h, etc.\r\n\n# ``PNG_LIBRARIES``\r\n\n#   the libraries to link against to use PNG.\r\n\n# ``PNG_DEFINITIONS``\r\n\n#   You should add_definitions(${PNG_DEFINITIONS}) before compiling code\r\n\n#   that includes png library files.\r\n\n# ``PNG_FOUND``\r\n\n#   If false, do not try to use PNG.\r\n\n# ``PNG_VERSION_STRING``\r\n\n#   the version of the PNG library found (since CMake 2.8.8)\r\n\n#\r\n\n# Obsolete variables\r\n\n# ^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variables may also be set, for backwards compatibility:\r\n\n#\r\n\n# ``PNG_LIBRARY``\r\n\n#   where to find the PNG library.\r\n\n# ``PNG_INCLUDE_DIR``\r\n\n#   where to find the PNG headers (same as PNG_INCLUDE_DIRS)\r\n\n#\r\n\n# Since PNG depends on the ZLib compression library, none of the above\r\n\n# will be defined unless ZLib can be found.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenBSD\r\n",
        "Line" : 55,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : "# For compatibility with versions prior to this multi-config search, honor\r\n\n# any PNG_LIBRARY that is already specified and skip the search.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Set by select_library_configurations(), but we want the one from\r\n\n# find_package_handle_standard_args() below.\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# png.h includes zlib.h. Sigh.\r\n",
        "Line" : 94,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# for backward compatibility\r\n",
        "Line" : 96,
        "CharPositionInLine" : 48
      },
      "7" : {
        "Text" : "# No need to define PNG_USE_DLL here, because it's default for Cygwin.\r\n",
        "Line" : 101,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "190a6e24ce46fdfa2dbbbdecffc4e94d1e08cb7e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nFindPackageHandleStandardArgs\r\n-----------------------------\r\n\r\nThis module provides a function intended to be used in :ref:`Find Modules`\r\nimplementing :command:`find_package(<PackageName>)` calls.  It handles the\r\n``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.\r\nIt also sets the ``<PackageName>_FOUND`` variable.  The package is\r\nconsidered found if all variables listed contain valid results, e.g.\r\nvalid filepaths.\r\n\r\n.. command:: find_package_handle_standard_args\r\n\r\n  There are two signatures::\r\n\r\n    find_package_handle_standard_args(<PackageName>\r\n      (DEFAULT_MSG|<custom-failure-message>)\r\n      <required-var>...\r\n      )\r\n\r\n    find_package_handle_standard_args(<PackageName>\r\n      [FOUND_VAR <result-var>]\r\n      [REQUIRED_VARS <required-var>...]\r\n      [VERSION_VAR <version-var>]\r\n      [HANDLE_COMPONENTS]\r\n      [CONFIG_MODE]\r\n      [FAIL_MESSAGE <custom-failure-message>]\r\n      )\r\n\r\n  The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all\r\n  the variables ``<required-var>...`` are valid and any optional\r\n  constraints are satisfied, and ``FALSE`` otherwise.  A success or\r\n  failure message may be displayed based on the results and on\r\n  whether the ``REQUIRED`` and/or ``QUIET`` option was given to\r\n  the :command:`find_package` call.\r\n\r\n  The options are:\r\n\r\n  ``(DEFAULT_MSG|<custom-failure-message>)``\r\n    In the simple signature this specifies the failure message.\r\n    Use ``DEFAULT_MSG`` to ask for a default message to be computed\r\n    (recommended).  Not valid in the full signature.\r\n\r\n  ``FOUND_VAR <result-var>``\r\n    Obsolete.  Specifies either ``<PackageName>_FOUND`` or\r\n    ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only\r\n    for compatibility with older versions of CMake and is now ignored.\r\n    Result variables of both names are always set for compatibility.\r\n\r\n  ``REQUIRED_VARS <required-var>...``\r\n    Specify the variables which are required for this package.\r\n    These may be named in the generated failure message asking the\r\n    user to set the missing variable values.  Therefore these should\r\n    typically be cache entries such as ``FOO_LIBRARY`` and not output\r\n    variables like ``FOO_LIBRARIES``.\r\n\r\n  ``VERSION_VAR <version-var>``\r\n    Specify the name of a variable that holds the version of the package\r\n    that has been found.  This version will be checked against the\r\n    (potentially) specified required version given to the\r\n    :command:`find_package` call, including its ``EXACT`` option.\r\n    The default messages include information about the required\r\n    version and the version which has been actually found, both\r\n    if the version is ok or not.\r\n\r\n  ``HANDLE_COMPONENTS``\r\n    Enable handling of package components.  In this case, the command\r\n    will report which components have been found and which are missing,\r\n    and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``\r\n    if any of the required components (i.e. not the ones listed after\r\n    the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are\r\n    missing.\r\n\r\n  ``CONFIG_MODE``\r\n    Specify that the calling find module is a wrapper around a\r\n    call to ``find_package(<PackageName> NO_MODULE)``.  This implies\r\n    a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command\r\n    will automatically check whether the package configuration file\r\n    was found.\r\n\r\n  ``FAIL_MESSAGE <custom-failure-message>``\r\n    Specify a custom failure message instead of using the default\r\n    generated message.  Not recommended.\r\n\r\nExample for the simple signature:\r\n\r\n.. code-block:: cmake\r\n\r\n  find_package_handle_standard_args(LibXml2 DEFAULT_MSG\r\n    LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\r\n\r\nThe ``LibXml2`` package is considered to be found if both\r\n``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.\r\nThen also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found\r\nand ``REQUIRED`` was used, it fails with a\r\n:command:`message(FATAL_ERROR)`, independent whether ``QUIET`` was\r\nused or not.  If it is found, success will be reported, including\r\nthe content of the first ``<required-var>``.  On repeated CMake runs,\r\nthe same message will not be printed again.\r\n\r\nExample for the full signature:\r\n\r\n.. code-block:: cmake\r\n\r\n  find_package_handle_standard_args(LibArchive\r\n    REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\r\n    VERSION_VAR LibArchive_VERSION)\r\n\r\nIn this case, the ``LibArchive`` package is considered to be found if\r\nboth ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.\r\nAlso the version of ``LibArchive`` will be checked by using the version\r\ncontained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,\r\nthe default messages will be printed.\r\n\r\nAnother example for the full signature:\r\n\r\n.. code-block:: cmake\r\n\r\n  find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\r\n  find_package_handle_standard_args(Automoc4  CONFIG_MODE)\r\n\r\nIn this case, a ``FindAutmoc4.cmake`` module wraps a call to\r\n``find_package(Automoc4 NO_MODULE)`` and adds an additional search\r\ndirectory for ``automoc4``.  Then the call to\r\n``find_package_handle_standard_args`` produces a proper success/failure\r\nmessage.\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\r\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\r\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\r\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\r\n\n# List them all in the error message:\r\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\r\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\r\n\n# new extended or in the \"old\" mode:\r\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\r\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\r\n\n# when it successfully found the config-file, including version checking:\r\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\r\n\n# user knows better what went wrong (#6375)\r\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\r\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\r\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\r\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\r\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# exact version required\r\n",
        "Line" : 298,
        "CharPositionInLine" : 44
      },
      "16" : {
        "Text" : "# count the dots in the version string\r\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# add one dot because there is one dot more than there are components\r\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\r\n\n# is at most 4 here. Therefore a simple lookup table is used.\r\n",
        "Line" : 304,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# minimum version specified:\r\n",
        "Line" : 334,
        "CharPositionInLine" : 17
      },
      "20" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\r\n",
        "Line" : 345,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# print the result:\r\n",
        "Line" : 366,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPackageMessage.cmake" : {
      "ObjectId" : "1334e2bebb33e0bfc58d6db1fead28c31ec36d5d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPackageMessage\r\n\n# ------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\r\n\n#\r\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\r\n\n# will print a message once for each unique find result.  This is useful\r\n\n# for telling the user where a package was found.  The first argument\r\n\n# specifies the name (XXX) of the package.  The second argument\r\n\n# specifies the message to display.  The third argument lists details\r\n\n# about the find result so that if they change the message will be\r\n\n# displayed again.  The macro also obeys the QUIET argument to the\r\n\n# find_package command.\r\n\n#\r\n\n# Example:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   if(X11_FOUND)\r\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\r\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\r\n\n#   else()\r\n\n#    ...\r\n\n#   endif()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\r\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\r\n\n# message again.\r\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPerl.cmake" : {
      "ObjectId" : "0c64838b6a12e49a293b34bcd03e2634ec26cd25",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPerl\r\n\n# --------\r\n\n#\r\n\n# Find perl\r\n\n#\r\n\n# this module looks for Perl\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PERL_EXECUTABLE     - the full path to perl\r\n\n#   PERL_FOUND          - If false, don't attempt to use perl.\r\n\n#   PERL_VERSION_STRING - version of perl found (since CMake 2.8.8)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### PERL_VERSION\r\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Deprecated settings for compatibility with CMake1.4\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPerlLibs.cmake" : {
      "ObjectId" : "213bc76f1f939e5913e71e81d73b300bf72575e9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPerlLibs\r\n\n# ------------\r\n\n#\r\n\n# Find Perl libraries\r\n\n#\r\n\n# This module finds if PERL is installed and determines where the\r\n\n# include files and libraries are.  It also determines what the name of\r\n\n# the library is.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PERLLIBS_FOUND    = True if perl.h & libperl were found\r\n\n#   PERL_INCLUDE_PATH = path to where perl.h is found\r\n\n#   PERL_LIBRARY      = path to libperl\r\n\n#   PERL_EXECUTABLE   = full path to the perl binary\r\n\n#\r\n\n#\r\n\n#\r\n\n# The minimum required version of Perl can be specified using the\r\n\n# standard syntax, e.g.  find_package(PerlLibs 6.0)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   The following variables are also available if needed\r\n\n#   (introduced after CMake 2.6.4)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PERL_SITESEARCH    = path to the sitesearch install dir\r\n\n#   PERL_SITELIB       = path to the sitelib install directory\r\n\n#   PERL_VENDORARCH    = path to the vendor arch install directory\r\n\n#   PERL_VENDORLIB     = path to the vendor lib install directory\r\n\n#   PERL_ARCHLIB       = path to the arch lib install directory\r\n\n#   PERL_PRIVLIB       = path to the priv lib install directory\r\n\n#   PERL_EXTRA_C_FLAGS = Compilation flags used to build perl\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find the perl executable\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### PERL_PREFIX\r\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "### PERL_ARCHNAME\r\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "### PERL_EXTRA_C_FLAGS\r\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "### PERL_SITESEARCH\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "### PERL_SITELIB\r\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "### PERL_VENDORARCH\r\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "### PERL_VENDORLIB\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "### PERL_ARCHLIB\r\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "### PERL_PRIVLIB\r\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "### PERL_POSSIBLE_LIBRARY_NAMES\r\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "### PERL_INCLUDE_PATH\r\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "### PERL_LIBRARY\r\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Introduced after CMake 2.6.4 to bring module into compliance\r\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# For backward compatibility with CMake before 2.8.8\r\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPhysFS.cmake" : {
      "ObjectId" : "5229954de77900985d72e7663cb67d5a50270438",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPhysFS\r\n\n# ----------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Locate PhysFS library This module defines PHYSFS_LIBRARY, the name of\r\n\n# the library to link against PHYSFS_FOUND, if false, do not try to link\r\n\n# to PHYSFS PHYSFS_INCLUDE_DIR, where to find physfs.h\r\n\n#\r\n\n# $PHYSFSDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$PHYSFSDIR used in building PHYSFS.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\r\n",
        "Line" : 26,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 27,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 28,
        "CharPositionInLine" : 11
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPike.cmake" : {
      "ObjectId" : "60a653149df02b03490ca6edf22bfe7c3bf65c4a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPike\r\n\n# --------\r\n\n#\r\n\n# Find Pike\r\n\n#\r\n\n# This module finds if PIKE is installed and determines where the\r\n\n# include files and libraries are.  It also determines what the name of\r\n\n# the library is.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PIKE_INCLUDE_PATH       = path to where program.h is found\r\n\n#   PIKE_EXECUTABLE         = full path to the pike binary\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPkgConfig.cmake" : {
      "ObjectId" : "089d30648284efc77f706d646edb442f99f244eb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPkgConfig\r\n\n# -------------\r\n\n#\r\n\n# A `pkg-config` module for CMake.\r\n\n#\r\n\n# Finds the ``pkg-config`` executable and add the\r\n\n# :command:`pkg_check_modules` and :command:`pkg_search_module`\r\n\n# commands.\r\n\n#\r\n\n# In order to find the ``pkg-config`` executable, it uses the\r\n\n# :variable:`PKG_CONFIG_EXECUTABLE` variable or the ``PKG_CONFIG``\r\n\n# environment variable first.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### Common stuff ####\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find pkg-config, use PKG_CONFIG if set\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is needed because the module name is \"PkgConfig\" but the name of\r\n\n# this variable has always been PKG_CONFIG_FOUND so this isn't automatically\r\n\n# handled by FPHSA.\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Unsets the given variables\r\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Invokes pkgconfig, cleans up the result and sets variables\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#message(STATUS \"  ${_varname} ... ${_pkgconfig_invoke_result}\")\r\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#[========================================[.rst:\r\n.. command:: pkg_get_variable\r\n\r\n  Retrieves the value of a variable from a package::\r\n\r\n    pkg_get_variable(<RESULT> <MODULE> <VARIABLE>)\r\n\r\n  For example:\r\n\r\n  .. code-block:: cmake\r\n\r\n    pkg_get_variable(GI_GIRDIR gobject-introspection-1.0 girdir)\r\n#]========================================]",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Invokes pkgconfig two times; once without '--static' and once with\r\n\n# '--static'\r\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Splits given arguments into options and a package list\r\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add the content of a variable or an environment variable to a list of\r\n\n# paths\r\n\n# Usage:\r\n\n#  - _pkgconfig_add_extra_path(_extra_paths VAR)\r\n\n#  - _pkgconfig_add_extra_path(_extra_paths ENV VAR)\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# scan the LDFLAGS returned by pkg-config for library directories and\r\n\n# libraries, figure out the absolute paths of that libraries in the\r\n\n# given directories, and create an imported target from them\r\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set the options that are used as long as the .pc file does not provide a library\r\n\n# path to look into\r\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# only look into the given paths from now on\r\n",
        "Line" : 195,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# only create the target if it is linkable, i.e. no executables\r\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "###\r\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# create a better addressable variable of the modules and calculate its size\r\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# give out status message telling checked module\r\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Save the PKG_CONFIG_PATH environment variable, and add paths\r\n\n# from the CMAKE_PREFIX_PATH variables\r\n",
        "Line" : 287,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Create a list of the possible pkgconfig subfolder (depending on\r\n\n# the system\r\n",
        "Line" : 295,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# is this a debian system ?\r\n",
        "Line" : 301,
        "CharPositionInLine" : 41
      },
      "22" : {
        "Text" : "# not debian, check the FIND_LIBRARY_USE_LIB32_PATHS and FIND_LIBRARY_USE_LIB64_PATHS properties\r\n",
        "Line" : 306,
        "CharPositionInLine" : 10
      },
      "23" : {
        "Text" : "# Check if directories exist and eventually append them to the\r\n\n# pkgconfig path list\r\n",
        "Line" : 320,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Prepare and set the environment variable\r\n",
        "Line" : 331,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# remove empty values from the list\r\n",
        "Line" : 333,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Unset variables\r\n",
        "Line" : 343,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# iterate through module list and check whether they exist and match the required version\r\n",
        "Line" : 348,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# check whether version is given\r\n",
        "Line" : 352,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# handle the operands\r\n",
        "Line" : 363,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# create the final query which is of the format:\r\n\n# * --atleast-version <version> <pkg-name>\r\n\n# * --exact-version <version> <pkg-name>\r\n\n# * --max-version <version> <pkg-name>\r\n\n# * --exists <pkg-name>\r\n",
        "Line" : 376,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# execute the query\r\n",
        "Line" : 396,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# evaluate result and tell failures\r\n",
        "Line" : 403,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# fail when requested\r\n",
        "Line" : 414,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# when we are here, we checked whether requested modules\r\n\n# exist. Now, go through them and set variables\r\n",
        "Line" : 419,
        "CharPositionInLine" : 6
      },
      "35" : {
        "Text" : "# iterate through all modules again and set individual variables\r\n",
        "Line" : 425,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# handle case when there is only one package required\r\n",
        "Line" : 427,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# set variables which are combined for multiple modules\r\n",
        "Line" : 447,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Restore the environment variable\r\n",
        "Line" : 463,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "###\r\n\n### User visible macros start here\r\n\n###\r\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#[========================================[.rst:\r\n.. command:: pkg_check_modules\r\n\r\n Checks for all the given modules. ::\r\n\r\n    pkg_check_modules(<PREFIX> [REQUIRED] [QUIET]\r\n                      [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]\r\n                      [IMPORTED_TARGET]\r\n                      <MODULE> [<MODULE>]*)\r\n\r\n\r\n When the ``REQUIRED`` argument was set, macros will fail with an error\r\n when module(s) could not be found.\r\n\r\n When the ``QUIET`` argument is set, no status messages will be printed.\r\n\r\n By default, if :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` is 3.1 or\r\n later, or if :variable:`PKG_CONFIG_USE_CMAKE_PREFIX_PATH` is set, the\r\n :variable:`CMAKE_PREFIX_PATH`, :variable:`CMAKE_FRAMEWORK_PATH`, and\r\n :variable:`CMAKE_APPBUNDLE_PATH` cache and environment variables will\r\n be added to ``pkg-config`` search path.\r\n The ``NO_CMAKE_PATH`` and ``NO_CMAKE_ENVIRONMENT_PATH`` arguments\r\n disable this behavior for the cache variables and the environment\r\n variables, respectively.\r\n The ``IMPORTED_TARGET`` argument will create an imported target named\r\n PkgConfig::<PREFIX>> that can be passed directly as an argument to\r\n :command:`target_link_libraries`.\r\n\r\n It sets the following variables: ::\r\n\r\n    PKG_CONFIG_FOUND          ... if pkg-config executable was found\r\n    PKG_CONFIG_EXECUTABLE     ... pathname of the pkg-config program\r\n    PKG_CONFIG_VERSION_STRING ... the version of the pkg-config program found\r\n                                  (since CMake 2.8.8)\r\n\r\n For the following variables two sets of values exist; first one is the\r\n common one and has the given PREFIX.  The second set contains flags\r\n which are given out when ``pkg-config`` was called with the ``--static``\r\n option. ::\r\n\r\n    <XPREFIX>_FOUND          ... set to 1 if module(s) exist\r\n    <XPREFIX>_LIBRARIES      ... only the libraries (w/o the '-l')\r\n    <XPREFIX>_LIBRARY_DIRS   ... the paths of the libraries (w/o the '-L')\r\n    <XPREFIX>_LDFLAGS        ... all required linker flags\r\n    <XPREFIX>_LDFLAGS_OTHER  ... all other linker flags\r\n    <XPREFIX>_INCLUDE_DIRS   ... the '-I' preprocessor flags (w/o the '-I')\r\n    <XPREFIX>_CFLAGS         ... all required cflags\r\n    <XPREFIX>_CFLAGS_OTHER   ... the other compiler flags\r\n\r\n ::\r\n\r\n    <XPREFIX> = <PREFIX>        for common case\r\n    <XPREFIX> = <PREFIX>_STATIC for static linking\r\n\r\n There are some special variables whose prefix depends on the count of\r\n given modules.  When there is only one module, <PREFIX> stays\r\n unchanged.  When there are multiple modules, the prefix will be\r\n changed to <PREFIX>_<MODNAME>: ::\r\n\r\n    <XPREFIX>_VERSION    ... version of the module\r\n    <XPREFIX>_PREFIX     ... prefix-directory of the module\r\n    <XPREFIX>_INCLUDEDIR ... include-dir of the module\r\n    <XPREFIX>_LIBDIR     ... lib-dir of the module\r\n\r\n ::\r\n\r\n    <XPREFIX> = <PREFIX>  when |MODULES| == 1, else\r\n    <XPREFIX> = <PREFIX>_<MODNAME>\r\n\r\n A <MODULE> parameter can have the following formats: ::\r\n\r\n    {MODNAME}            ... matches any version\r\n    {MODNAME}>={VERSION} ... at least version <VERSION> is required\r\n    {MODNAME}={VERSION}  ... exactly version <VERSION> is required\r\n    {MODNAME}<={VERSION} ... modules must not be newer than <VERSION>\r\n\r\n Examples\r\n\r\n .. code-block:: cmake\r\n\r\n    pkg_check_modules (GLIB2   glib-2.0)\r\n\r\n .. code-block:: cmake\r\n\r\n    pkg_check_modules (GLIB2   glib-2.0>=2.10)\r\n\r\n Requires at least version 2.10 of glib2 and defines e.g.\r\n ``GLIB2_VERSION=2.10.3``\r\n\r\n .. code-block:: cmake\r\n\r\n    pkg_check_modules (FOO     glib-2.0>=2.10 gtk+-2.0)\r\n\r\n Requires both glib2 and gtk2, and defines e.g.\r\n ``FOO_glib-2.0_VERSION=2.10.3`` and ``FOO_gtk+-2.0_VERSION=2.8.20``\r\n\r\n .. code-block:: cmake\r\n\r\n    pkg_check_modules (XRENDER REQUIRED xrender)\r\n\r\n Defines for example::\r\n\r\n   XRENDER_LIBRARIES=Xrender;X11``\r\n   XRENDER_STATIC_LIBRARIES=Xrender;X11;pthread;Xau;Xdmcp\r\n#]========================================]",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# check cached value\r\n",
        "Line" : 587,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "#[========================================[.rst:\r\n.. command:: pkg_search_module\r\n\r\n Same as :command:`pkg_check_modules`, but instead it checks for given\r\n modules and uses the first working one. ::\r\n\r\n    pkg_search_module(<PREFIX> [REQUIRED] [QUIET]\r\n                      [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH]\r\n                      [IMPORTED_TARGET]\r\n                      <MODULE> [<MODULE>]*)\r\n\r\n Examples\r\n\r\n .. code-block:: cmake\r\n\r\n    pkg_search_module (BAR     libxml-2.0 libxml2 libxml>=2)\r\n#]========================================]",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# check cached value\r\n",
        "Line" : 620,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# iterate through all modules and stop at the first working one.\r\n",
        "Line" : 628,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "#[========================================[.rst:\r\n.. variable:: PKG_CONFIG_EXECUTABLE\r\n\r\n Path to the pkg-config executable.\r\n\r\n\r\n.. variable:: PKG_CONFIG_USE_CMAKE_PREFIX_PATH\r\n\r\n Whether :command:`pkg_check_modules` and :command:`pkg_search_module`\r\n should add the paths in :variable:`CMAKE_PREFIX_PATH`,\r\n :variable:`CMAKE_FRAMEWORK_PATH`, and :variable:`CMAKE_APPBUNDLE_PATH`\r\n cache and environment variables to ``pkg-config`` search path.\r\n\r\n If this variable is not set, this behavior is enabled by default if\r\n :variable:`CMAKE_MINIMUM_REQUIRED_VERSION` is 3.1 or later, disabled\r\n otherwise.\r\n#]========================================]",
        "Line" : 652,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "### Local Variables:\r\n\n### mode: cmake\r\n\n### End:\r\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPostgreSQL.cmake" : {
      "ObjectId" : "4c736bad72fda6bee098ed33acd7a73d1d4d2a40",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPostgreSQL\r\n\n# --------------\r\n\n#\r\n\n# Find the PostgreSQL installation.\r\n\n#\r\n\n# This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PostgreSQL_LIBRARIES - the PostgreSQL libraries needed for linking\r\n\n#   PostgreSQL_INCLUDE_DIRS - the directories of the PostgreSQL headers\r\n\n#   PostgreSQL_LIBRARY_DIRS  - the link directories for PostgreSQL libraries\r\n\n#   PostgreSQL_VERSION_STRING - the version of PostgreSQL found (since CMake 2.8.8)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\r\n\n# History:\r\n\n# This module is derived from the module originally found in the VTK source tree.\r\n\n#\r\n\n# ----------------------------------------------------------------------------\r\n\n# Note:\r\n\n# PostgreSQL_ADDITIONAL_VERSIONS is a variable that can be used to set the\r\n\n# version mumber of the implementation of PostgreSQL.\r\n\n# In Windows the default installation of PostgreSQL uses that as part of the path.\r\n\n# E.g C:\\Program Files\\PostgreSQL\\8.4.\r\n\n# Currently, the following version numbers are known to this module:\r\n\n# \"9.6\" \"9.5\" \"9.4\" \"9.3\" \"9.2\" \"9.1\" \"9.0\" \"8.4\" \"8.3\" \"8.2\" \"8.1\" \"8.0\"\r\n\n#\r\n\n# To use this variable just do something like this:\r\n\n# set(PostgreSQL_ADDITIONAL_VERSIONS \"9.2\" \"8.4.4\")\r\n\n# before calling find_package(PostgreSQL) in your CMakeLists.txt file.\r\n\n# This will mean that the versions you set here will be found first in the order\r\n\n# specified before the default ones are searched.\r\n\n#\r\n\n# ----------------------------------------------------------------------------\r\n\n# You may need to manually set:\r\n\n#  PostgreSQL_INCLUDE_DIR  - the path to where the PostgreSQL include files are.\r\n\n#  PostgreSQL_LIBRARY_DIR  - The path to where the PostgreSQL library files are.\r\n\n# If FindPostgreSQL.cmake cannot find the include files or the library files.\r\n\n#\r\n\n# ----------------------------------------------------------------------------\r\n\n# The following variables are set if PostgreSQL is found:\r\n\n#  PostgreSQL_FOUND         - Set to true when PostgreSQL is found.\r\n\n#  PostgreSQL_INCLUDE_DIRS  - Include directories for PostgreSQL\r\n\n#  PostgreSQL_LIBRARY_DIRS  - Link directories for PostgreSQL libraries\r\n\n#  PostgreSQL_LIBRARIES     - The PostgreSQL libraries.\r\n\n#\r\n\n# ----------------------------------------------------------------------------\r\n\n# If you have installed PostgreSQL in a non-standard location.\r\n\n# (Please note that in the following comments, it is assumed that <Your Path>\r\n\n# points to the root directory of the include directory of PostgreSQL.)\r\n\n# Then you have three options.\r\n\n# 1) After CMake runs, set PostgreSQL_INCLUDE_DIR to <Your Path>/include and\r\n\n#    PostgreSQL_LIBRARY_DIR to wherever the library pq (or libpq in windows) is\r\n\n# 2) Use CMAKE_INCLUDE_PATH to set a path to <Your Path>/PostgreSQL<-version>. This will allow find_path()\r\n\n#    to locate PostgreSQL_INCLUDE_DIR by utilizing the PATH_SUFFIXES option. e.g. In your CMakeLists.txt file\r\n\n#    set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} \"<Your Path>/include\")\r\n\n# 3) Set an environment variable called ${PostgreSQL_ROOT} that points to the root of where you have\r\n\n#    installed PostgreSQL, e.g. <Your Path>.\r\n\n#\r\n\n# ----------------------------------------------------------------------------\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define additional search paths for root directories.\r\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\r\n\n# Look for an installation.\r\n\n#\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Look in other places.\r\n",
        "Line" : 107,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Help the user find it if we cannot.\r\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Look in other places.\r\n",
        "Line" : 121,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Help the user find it if we cannot.\r\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The PostgreSQL library.\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Setting some more prefixes for the library\r\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Help the user find it if we cannot.\r\n",
        "Line" : 149,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Some platforms include multiple pg_config.hs for multi-lib configurations\r\n\n# This is a temporary workaround.  A better solution would be to compile\r\n\n# a dummy c file and extract the value of the symbol.\r\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Did we find anything?\r\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Now try to get the include and library path.\r\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindProducer.cmake" : {
      "ObjectId" : "bc256a043fd530c40105f86c035ea601df6822fa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindProducer\r\n\n# ------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Though Producer isn't directly part of OpenSceneGraph, its primary\r\n\n# user is OSG so I consider this part of the Findosg* suite used to find\r\n\n# OpenSceneGraph components.  You'll notice that I accept OSGDIR as an\r\n\n# environment path.\r\n\n#\r\n\n# Each component is separate and you must opt in to each module.  You\r\n\n# must also opt into OpenGL (and OpenThreads?) as these modules won't do\r\n\n# it for you.  This is to allow you control over your own system piece\r\n\n# by piece in case you need to opt out of certain components or change\r\n\n# the Find behavior for a particular module (perhaps because the default\r\n\n# FindOpenGL.cmake module doesn't work with your system as an example).\r\n\n# If you want to use a more convenient module that includes everything,\r\n\n# use the FindOpenSceneGraph.cmake instead of the Findosg*.cmake\r\n\n# modules.\r\n\n#\r\n\n# Locate Producer This module defines PRODUCER_LIBRARY PRODUCER_FOUND,\r\n\n# if false, do not try to link to Producer PRODUCER_INCLUDE_DIR, where\r\n\n# to find the headers\r\n\n#\r\n\n# $PRODUCER_DIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$PRODUCER_DIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <Producer/CameraGroup>\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Try the user's environment request before anything else.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Fink\r\n",
        "Line" : 47,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 48,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 49,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindProtobuf.cmake" : {
      "ObjectId" : "c21bbc9abc5a7540b32fb0ed8059a3419f74fcd4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindProtobuf\r\n\n# ------------\r\n\n#\r\n\n# Locate and configure the Google Protocol Buffers library.\r\n\n#\r\n\n# The following variables can be set and are optional:\r\n\n#\r\n\n# ``Protobuf_SRC_ROOT_FOLDER``\r\n\n#   When compiling with MSVC, if this cache variable is set\r\n\n#   the protobuf-default VS project build locations\r\n\n#   (vsprojects/Debug and vsprojects/Release\r\n\n#   or vsprojects/x64/Debug and vsprojects/x64/Release)\r\n\n#   will be searched for libraries and binaries.\r\n\n# ``Protobuf_IMPORT_DIRS``\r\n\n#   List of additional directories to be searched for\r\n\n#   imported .proto files.\r\n\n# ``Protobuf_DEBUG``\r\n\n#   Show debug messages.\r\n\n#\r\n\n# Defines the following variables:\r\n\n#\r\n\n# ``Protobuf_FOUND``\r\n\n#   Found the Google Protocol Buffers library\r\n\n#   (libprotobuf & header files)\r\n\n# ``Protobuf_VERSION``\r\n\n#   Version of package found.\r\n\n# ``Protobuf_INCLUDE_DIRS``\r\n\n#   Include directories for Google Protocol Buffers\r\n\n# ``Protobuf_LIBRARIES``\r\n\n#   The protobuf libraries\r\n\n# ``Protobuf_PROTOC_LIBRARIES``\r\n\n#   The protoc libraries\r\n\n# ``Protobuf_LITE_LIBRARIES``\r\n\n#   The protobuf-lite libraries\r\n\n#\r\n\n# The following cache variables are also available to set or use:\r\n\n#\r\n\n# ``Protobuf_LIBRARY``\r\n\n#   The protobuf library\r\n\n# ``Protobuf_PROTOC_LIBRARY``\r\n\n#   The protoc library\r\n\n# ``Protobuf_INCLUDE_DIR``\r\n\n#   The include directory for protocol buffers\r\n\n# ``Protobuf_PROTOC_EXECUTABLE``\r\n\n#   The protoc compiler\r\n\n# ``Protobuf_LIBRARY_DEBUG``\r\n\n#   The protobuf library (debug)\r\n\n# ``Protobuf_PROTOC_LIBRARY_DEBUG``\r\n\n#   The protoc library (debug)\r\n\n# ``Protobuf_LITE_LIBRARY``\r\n\n#   The protobuf lite library\r\n\n# ``Protobuf_LITE_LIBRARY_DEBUG``\r\n\n#   The protobuf lite library (debug)\r\n\n#\r\n\n# Example:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#   find_package(Protobuf REQUIRED)\r\n\n#   include_directories(${Protobuf_INCLUDE_DIRS})\r\n\n#   include_directories(${CMAKE_CURRENT_BINARY_DIR})\r\n\n#   protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS foo.proto)\r\n\n#   protobuf_generate_python(PROTO_PY foo.proto)\r\n\n#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})\r\n\n#   target_link_libraries(bar ${Protobuf_LIBRARIES})\r\n\n#\r\n\n# .. note::\r\n\n#   The ``protobuf_generate_cpp`` and ``protobuf_generate_python``\r\n\n#   functions and :command:`add_executable` or :command:`add_library`\r\n\n#   calls only work properly within the same directory.\r\n\n#\r\n\n# .. command:: protobuf_generate_cpp\r\n\n#\r\n\n#   Add custom commands to process ``.proto`` files to C++::\r\n\n#\r\n\n#     protobuf_generate_cpp (<SRCS> <HDRS> [<ARGN>...])\r\n\n#\r\n\n#   ``SRCS``\r\n\n#     Variable to define with autogenerated source files\r\n\n#   ``HDRS``\r\n\n#     Variable to define with autogenerated header files\r\n\n#   ``ARGN``\r\n\n#     ``.proto`` files\r\n\n#\r\n\n# .. command:: protobuf_generate_python\r\n\n#\r\n\n#   Add custom commands to process ``.proto`` files to Python::\r\n\n#\r\n\n#     protobuf_generate_python (<PY> [<ARGN>...])\r\n\n#\r\n\n#   ``PY``\r\n\n#     Variable to define with autogenerated Python files\r\n\n#   ``ARGN``\r\n\n#     ``.proto`` filess\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create an include path for each file specified\r\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Create an include path for each file specified\r\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Backwards compatibility\r\n\n# Define camel case versions of input variables\r\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Internal function: search for normal library as well as a debug one\r\n\n#    if the debug one is specified also include debug/optimized keywords\r\n\n#    in *_LIBRARIES variable\r\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use result recorded by a previous call.\r\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Honor cache entry used by CMake 3.5 and lower.\r\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Internal function: find threads library\r\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\r\n\n# Main.\r\n\n#\r\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc\r\n\n# for each directory where a proto file is referenced.\r\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Google's provided vcproj files generate libraries with a \"lib\"\r\n\n# prefix on Windows\r\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The Protobuf library\r\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#DOC \"The Google Protocol Buffers RELEASE Library\"\r\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The Protobuf Protoc Library\r\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Restore original find library prefixes\r\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find the include directory\r\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Find the protoc Executable\r\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Check Protobuf compiler version to be aligned with libraries version\r\n",
        "Line" : 373,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Backwards compatibility\r\n\n# Define upper case versions of output variables\r\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPythonInterp.cmake" : {
      "ObjectId" : "10442a35d248347678ed4507ae3f7935b33374d7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPythonInterp\r\n\n# ----------------\r\n\n#\r\n\n# Find python interpreter\r\n\n#\r\n\n# This module finds if Python interpreter is installed and determines\r\n\n# where the executables are.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PYTHONINTERP_FOUND         - Was the Python executable found\r\n\n#   PYTHON_EXECUTABLE          - path to the Python interpreter\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PYTHON_VERSION_STRING      - Python version found e.g. 2.5.2\r\n\n#   PYTHON_VERSION_MAJOR       - Python major version found e.g. 2\r\n\n#   PYTHON_VERSION_MINOR       - Python minor version found e.g. 5\r\n\n#   PYTHON_VERSION_PATCH       - Python patch version found e.g. 2\r\n\n#\r\n\n#\r\n\n#\r\n\n# The Python_ADDITIONAL_VERSIONS variable can be used to specify a list\r\n\n# of version numbers that should be taken into account when searching\r\n\n# for Python.  You need to set this variable before calling\r\n\n# find_package(PythonInterp).\r\n\n#\r\n\n# If calling both ``find_package(PythonInterp)`` and\r\n\n# ``find_package(PythonLibs)``, call ``find_package(PythonInterp)`` first to\r\n\n# get the currently active Python version by default with a consistent version\r\n\n# of PYTHON_LIBRARIES.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set up the versions we know about, in the order we will search. Always add\r\n\n# the user supplied additional versions to the front.\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If FindPythonInterp has already found the major and minor version,\r\n\n# insert that version next to get consistent versions of the interpreter and\r\n\n# library.\r\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search for the current active python version first\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Search for newest python version if python executable isn't found\r\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# determine python version string\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# it's called \"Python 2.7\", not \"2.7.0\"\r\n",
        "Line" : 117,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# sys.version predates sys.version_info, so use that\r\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# sys.version was first documented for Python 1.5, so assume\r\n\n# this is older.\r\n",
        "Line" : 136,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindPythonLibs.cmake" : {
      "ObjectId" : "52117fb446e49bd2af19ba78e46f5bd3946e7159",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindPythonLibs\r\n\n# --------------\r\n\n#\r\n\n# Find python libraries\r\n\n#\r\n\n# This module finds if Python is installed and determines where the\r\n\n# include files and libraries are.  It also determines what the name of\r\n\n# the library is.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PYTHONLIBS_FOUND           - have the Python libs been found\r\n\n#   PYTHON_LIBRARIES           - path to the python library\r\n\n#   PYTHON_INCLUDE_PATH        - path to where Python.h is found (deprecated)\r\n\n#   PYTHON_INCLUDE_DIRS        - path to where Python.h is found\r\n\n#   PYTHON_DEBUG_LIBRARIES     - path to the debug library (deprecated)\r\n\n#   PYTHONLIBS_VERSION_STRING  - version of the Python libs found (since CMake 2.8.8)\r\n\n#\r\n\n#\r\n\n#\r\n\n# The Python_ADDITIONAL_VERSIONS variable can be used to specify a list\r\n\n# of version numbers that should be taken into account when searching\r\n\n# for Python.  You need to set this variable before calling\r\n\n# find_package(PythonLibs).\r\n\n#\r\n\n# If you'd like to specify the installation of Python to use, you should\r\n\n# modify the following cache variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   PYTHON_LIBRARY             - path to the python library\r\n\n#   PYTHON_INCLUDE_DIR         - path to where Python.h is found\r\n\n#\r\n\n# If calling both ``find_package(PythonInterp)`` and\r\n\n# ``find_package(PythonLibs)``, call ``find_package(PythonInterp)`` first to\r\n\n# get the currently active Python version by default with a consistent version\r\n\n# of PYTHON_LIBRARIES.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use the executable's path as a hint\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Search for the python framework on Apple.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Save CMAKE_FIND_FRAMEWORK\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# To avoid picking up the system Python.h pre-maturely.\r\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set up the versions we know about, in the order we will search. Always add\r\n\n# the user supplied additional versions to the front.\r\n\n# If FindPythonInterp has already found the major and minor version,\r\n\n# insert that version between the user supplied versions and the stock\r\n\n# version list.\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Avoid finding the .dll in the PATH.  We want the .lib.\r\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Look for the static library in the Python config directory\r\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Avoid finding the .dll in the PATH.  We want the .lib.\r\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This is where the static library is usually located\r\n",
        "Line" : 162,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Don't search for include dir until library location is known\r\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Use the library's install prefix as a hint\r\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# PYTHON_LIBRARY may contain a list because of SelectLibraryConfigurations\r\n\n# which may have been run previously. If it is the case, the list can be:\r\n\n#   optimized;<FILEPATH_TO_RELEASE_LIBRARY>;debug;<FILEPATH_TO_DEBUG_LIBRARY>\r\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Add framework directories to the search paths\r\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# For backward compatibility, set PYTHON_INCLUDE_PATH.\r\n",
        "Line" : 210,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# We use PYTHON_INCLUDE_DIR, PYTHON_LIBRARY and PYTHON_DEBUG_LIBRARY for the\r\n\n# cache entries because they are meant to specify the location of a single\r\n\n# library. We now set the variables listed by the documentation for this\r\n\n# module.\r\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# These variables have been historically named in this module different from\r\n\n# what SELECT_LIBRARY_CONFIGURATIONS() expects.\r\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# SELECT_LIBRARY_CONFIGURATIONS() sets ${PREFIX}_FOUND if it has a library.\r\n\n# Unset this, this prefix doesn't match the module prefix, they are different\r\n\n# for historical reasons.\r\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Restore CMAKE_FIND_FRAMEWORK\r\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# PYTHON_ADD_MODULE(<name> src1 src2 ... srcN) is used to build modules for python.\r\n\n# PYTHON_WRITE_MODULES_HEADER(<filename>) writes a header file you can include\r\n\n# in your sources to initialize the static python modules\r\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Mark these options as advanced\r\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#    target_link_libraries(${_NAME} ${PYTHON_LIBRARIES})\r\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# with configure_file() cmake complains that you may not use a file created using file(WRITE) as input file for configure_file()\r\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindQt.cmake" : {
      "ObjectId" : "5e1cbbb3c02bc75a5df426175e5af2a31f9d8c25",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindQt\r\n\n# ------\r\n\n#\r\n\n# Searches for all installed versions of Qt.\r\n\n#\r\n\n# This should only be used if your project can work with multiple\r\n\n# versions of Qt.  If not, you should just directly use FindQt4 or\r\n\n# FindQt3.  If multiple versions of Qt are found on the machine, then\r\n\n# The user must set the option DESIRED_QT_VERSION to the version they\r\n\n# want to use.  If only one version of qt is found on the machine, then\r\n\n# the DESIRED_QT_VERSION is set to that version and the matching FindQt3\r\n\n# or FindQt4 module is included.  Once the user sets DESIRED_QT_VERSION,\r\n\n# then the FindQt3 or FindQt4 module is included.\r\n\n#\r\n\n# This module can only detect and switch between Qt versions 3 and 4. It\r\n\n# cannot handle Qt5 or any later versions.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   QT_REQUIRED if this is set to TRUE then if CMake can\r\n\n#               not find Qt4 or Qt3 an error is raised\r\n\n#               and a message is sent to the user.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   DESIRED_QT_VERSION OPTION is created\r\n\n#   QT4_INSTALLED is set to TRUE if qt4 is found.\r\n\n#   QT3_INSTALLED is set to TRUE if qt3 is found.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# look for signs of qt3 installations\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# look for qt4 installations\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# now find qmake\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# force user to pick if we have both\r\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# if only one found then pick that one\r\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindQt3.cmake" : {
      "ObjectId" : "b491e18dc73d0105a2a89157fbc4ddf0601630c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindQt3\r\n\n# -------\r\n\n#\r\n\n# Locate Qt include paths and libraries\r\n\n#\r\n\n# This module defines:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   QT_INCLUDE_DIR    - where to find qt.h, etc.\r\n\n#   QT_LIBRARIES      - the libraries to link against to use Qt.\r\n\n#   QT_DEFINITIONS    - definitions to use when\r\n\n#                       compiling code that uses Qt.\r\n\n#   QT_FOUND          - If false, don't try to use Qt.\r\n\n#   QT_VERSION_STRING - the version of Qt found\r\n\n#\r\n\n#\r\n\n#\r\n\n# If you need the multithreaded version of Qt, set QT_MT_REQUIRED to\r\n\n# TRUE\r\n\n#\r\n\n# Also defined, but not for general use are:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   QT_MOC_EXECUTABLE, where to find the moc tool.\r\n\n#   QT_UIC_EXECUTABLE, where to find the uic tool.\r\n\n#   QT_QT_LIBRARY, where to find the Qt library.\r\n\n#   QT_QTMAIN_LIBRARY, where to find the qtmain\r\n\n#    library. This is only required by Qt3 on Windows.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These are around for backwards compatibility\r\n\n# they will be set\r\n\n#  QT_WRAP_CPP, set true if QT_MOC_EXECUTABLE is found\r\n\n#  QT_WRAP_UI set true if QT_UIC_EXECUTABLE is found\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If Qt4 has already been found, fail.\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if qglobal.h is not in the qt_include_dir then set\r\n\n# QT_INCLUDE_DIR to NOTFOUND\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#extract the version string from qglobal.h\r\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Under windows the qt library (MSVC) has the format qt-mtXYZ where XYZ is the\r\n\n# version X.Y.Z, so we need to remove the dots from version\r\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Qt 3 should prefer QTDIR over the PATH\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Qt 3 should prefer QTDIR over the PATH\r\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#support old QT_MIN_VERSION if set, but not if version is supplied by find_package()\r\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# if the include a library are found then we have it\r\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# for version 3\r\n",
        "Line" : 235,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# for version 2\r\n",
        "Line" : 240,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Backwards compatibility for CMake1.4 and 1.2\r\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# for unix add X11 stuff\r\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindQt4.cmake" : {
      "ObjectId" : "7442f23080ca702b40a873631a2fe685c8f347d1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindQt4\r\n\n# -------\r\n\n#\r\n\n# Finding and Using Qt4\r\n\n# ^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module can be used to find Qt4.  The most important issue is that\r\n\n# the Qt4 qmake is available via the system path.  This qmake is then\r\n\n# used to detect basically everything else.  This module defines a\r\n\n# number of :prop_tgt:`IMPORTED` targets, macros and variables.\r\n\n#\r\n\n# Typical usage could be something like:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    set(CMAKE_AUTOMOC ON)\r\n\n#    set(CMAKE_INCLUDE_CURRENT_DIR ON)\r\n\n#    find_package(Qt4 4.4.3 REQUIRED QtGui QtXml)\r\n\n#    add_executable(myexe main.cpp)\r\n\n#    target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)\r\n\n#\r\n\n# .. note::\r\n\n#\r\n\n#  When using :prop_tgt:`IMPORTED` targets, the qtmain.lib static library is\r\n\n#  automatically linked on Windows for :prop_tgt:`WIN32 <WIN32_EXECUTABLE>`\r\n\n#  executables. To disable that globally, set the\r\n\n#  ``QT4_NO_LINK_QTMAIN`` variable before finding Qt4. To disable that\r\n\n#  for a particular executable, set the ``QT4_NO_LINK_QTMAIN`` target\r\n\n#  property to ``TRUE`` on the executable.\r\n\n#\r\n\n# Qt Build Tools\r\n\n# ^^^^^^^^^^^^^^\r\n\n#\r\n\n# Qt relies on some bundled tools for code generation, such as ``moc`` for\r\n\n# meta-object code generation,``uic`` for widget layout and population,\r\n\n# and ``rcc`` for virtual filesystem content generation.  These tools may be\r\n\n# automatically invoked by :manual:`cmake(1)` if the appropriate conditions\r\n\n# are met.  See :manual:`cmake-qt(7)` for more.\r\n\n#\r\n\n# Qt Macros\r\n\n# ^^^^^^^^^\r\n\n#\r\n\n# In some cases it can be necessary or useful to invoke the Qt build tools in a\r\n\n# more-manual way. Several macros are available to add targets for such uses.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_WRAP_CPP(outfiles inputfile ... [TARGET tgt] OPTIONS ...)\r\n\n#         create moc code from a list of files containing Qt class with\r\n\n#         the Q_OBJECT declaration.  Per-directory preprocessor definitions\r\n\n#         are also added.  If the <tgt> is specified, the\r\n\n#         INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from\r\n\n#         the <tgt> are passed to moc.  Options may be given to moc, such as\r\n\n#         those found when executing \"moc -help\".\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)\r\n\n#         create code from a list of Qt designer ui files.\r\n\n#         Options may be given to uic, such as those found\r\n\n#         when executing \"uic -help\"\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)\r\n\n#         create code from a list of Qt resource files.\r\n\n#         Options may be given to rcc, such as those found\r\n\n#         when executing \"rcc -help\"\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_GENERATE_MOC(inputfile outputfile [TARGET tgt])\r\n\n#         creates a rule to run moc on infile and create outfile.\r\n\n#         Use this if for some reason QT4_WRAP_CPP() isn't appropriate, e.g.\r\n\n#         because you need a custom filename for the moc file or something\r\n\n#         similar.  If the <tgt> is specified, the\r\n\n#         INTERFACE_INCLUDE_DIRECTORIES and INTERFACE_COMPILE_DEFINITIONS from\r\n\n#         the <tgt> are passed to moc.\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_ADD_DBUS_INTERFACE(outfiles interface basename)\r\n\n#         Create the interface header and implementation files with the\r\n\n#         given basename from the given interface xml file and add it to\r\n\n#         the list of sources.\r\n\n#\r\n\n#         You can pass additional parameters to the qdbusxml2cpp call by setting\r\n\n#         properties on the input file:\r\n\n#\r\n\n#         INCLUDE the given file will be included in the generate interface header\r\n\n#\r\n\n#         CLASSNAME the generated class is named accordingly\r\n\n#\r\n\n#         NO_NAMESPACE the generated class is not wrapped in a namespace\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_ADD_DBUS_INTERFACES(outfiles inputfile ... )\r\n\n#         Create the interface header and implementation files\r\n\n#         for all listed interface xml files.\r\n\n#         The basename will be automatically determined from the name\r\n\n#         of the xml file.\r\n\n#\r\n\n#         The source file properties described for\r\n\n#         QT4_ADD_DBUS_INTERFACE also apply here.\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_ADD_DBUS_ADAPTOR(outfiles xmlfile parentheader parentclassname\r\n\n#                              [basename] [classname])\r\n\n#         create a dbus adaptor (header and implementation file) from the xml file\r\n\n#         describing the interface, and add it to the list of sources. The adaptor\r\n\n#         forwards the calls to a parent class, defined in parentheader and named\r\n\n#         parentclassname. The name of the generated files will be\r\n\n#         <basename>adaptor.{cpp,h} where basename defaults to the basename of the\r\n\n#         xml file.\r\n\n#         If <classname> is provided, then it will be used as the classname of the\r\n\n#         adaptor itself.\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_GENERATE_DBUS_INTERFACE( header [interfacename] OPTIONS ...)\r\n\n#         generate the xml interface file from the given header.\r\n\n#         If the optional argument interfacename is omitted, the name of the\r\n\n#         interface file is constructed from the basename of the header with\r\n\n#         the suffix .xml appended.\r\n\n#         Options may be given to qdbuscpp2xml, such as those found when\r\n\n#         executing \"qdbuscpp2xml --help\"\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_CREATE_TRANSLATION( qm_files directories ... sources ...\r\n\n#                                 ts_files ... OPTIONS ...)\r\n\n#         out: qm_files\r\n\n#         in:  directories sources ts_files\r\n\n#         options: flags to pass to lupdate, such as -extensions to specify\r\n\n#         extensions for a directory scan.\r\n\n#         generates commands to create .ts (vie lupdate) and .qm\r\n\n#         (via lrelease) - files from directories and/or sources. The ts files are\r\n\n#         created and/or updated in the source tree (unless given with full paths).\r\n\n#         The qm files are generated in the build tree.\r\n\n#         Updating the translations can be done by adding the qm_files\r\n\n#         to the source list of your library/executable, so they are\r\n\n#         always updated, or by adding a custom target to control when\r\n\n#         they get updated/generated.\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_ADD_TRANSLATION( qm_files ts_files ... )\r\n\n#         out: qm_files\r\n\n#         in:  ts_files\r\n\n#         generates commands to create .qm from .ts - files. The generated\r\n\n#         filenames can be found in qm_files. The ts_files\r\n\n#         must exist and are not updated in any way.\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   macro QT4_AUTOMOC(sourcefile1 sourcefile2 ... [TARGET tgt])\r\n\n#         The qt4_automoc macro is obsolete.  Use the CMAKE_AUTOMOC feature instead.\r\n\n#         This macro is still experimental.\r\n\n#         It can be used to have moc automatically handled.\r\n\n#         So if you have the files foo.h and foo.cpp, and in foo.h a\r\n\n#         a class uses the Q_OBJECT macro, moc has to run on it. If you don't\r\n\n#         want to use QT4_WRAP_CPP() (which is reliable and mature), you can insert\r\n\n#         #include \"foo.moc\"\r\n\n#         in foo.cpp and then give foo.cpp as argument to QT4_AUTOMOC(). This will\r\n\n#         scan all listed files at cmake-time for such included moc files and if it\r\n\n#         finds them cause a rule to be generated to run moc at build time on the\r\n\n#         accompanying header file foo.h.\r\n\n#         If a source file has the SKIP_AUTOMOC property set it will be ignored by\r\n\n#         this macro.\r\n\n#         If the <tgt> is specified, the INTERFACE_INCLUDE_DIRECTORIES and\r\n\n#         INTERFACE_COMPILE_DEFINITIONS from the <tgt> are passed to moc.\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  function QT4_USE_MODULES( target [link_type] modules...)\r\n\n#         This function is obsolete. Use target_link_libraries with IMPORTED targets\r\n\n#         instead.\r\n\n#         Make <target> use the <modules> from Qt. Using a Qt module means\r\n\n#         to link to the library, add the relevant include directories for the\r\n\n#         module, and add the relevant compiler defines for using the module.\r\n\n#         Modules are roughly equivalent to components of Qt4, so usage would be\r\n\n#         something like:\r\n\n#          qt4_use_modules(myexe Core Gui Declarative)\r\n\n#         to use QtCore, QtGui and QtDeclarative. The optional <link_type> argument\r\n\n#         can be specified as either LINK_PUBLIC or LINK_PRIVATE to specify the\r\n\n#         same argument to the target_link_libraries call.\r\n\n#\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# A particular Qt library may be used by using the corresponding\r\n\n# :prop_tgt:`IMPORTED` target with the :command:`target_link_libraries`\r\n\n# command:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#   target_link_libraries(myexe Qt4::QtGui Qt4::QtXml)\r\n\n#\r\n\n# Using a target in this way causes :cmake(1)` to use the appropriate include\r\n\n# directories and compile definitions for the target when compiling ``myexe``.\r\n\n#\r\n\n# Targets are aware of their dependencies, so for example it is not necessary\r\n\n# to list ``Qt4::QtCore`` if another Qt library is listed, and it is not\r\n\n# necessary to list ``Qt4::QtGui`` if ``Qt4::QtDeclarative`` is listed.\r\n\n# Targets may be tested for existence in the usual way with the\r\n\n# :command:`if(TARGET)` command.\r\n\n#\r\n\n# The Qt toolkit may contain both debug and release libraries.\r\n\n# :manual:`cmake(1)` will choose the appropriate version based on the build\r\n\n# configuration.\r\n\n#\r\n\n# ``Qt4::QtCore``\r\n\n#  The QtCore target\r\n\n# ``Qt4::QtGui``\r\n\n#  The QtGui target\r\n\n# ``Qt4::Qt3Support``\r\n\n#  The Qt3Support target\r\n\n# ``Qt4::QtAssistant``\r\n\n#  The QtAssistant target\r\n\n# ``Qt4::QtAssistantClient``\r\n\n#  The QtAssistantClient target\r\n\n# ``Qt4::QAxContainer``\r\n\n#  The QAxContainer target (Windows only)\r\n\n# ``Qt4::QAxServer``\r\n\n#  The QAxServer target (Windows only)\r\n\n# ``Qt4::QtDBus``\r\n\n#  The QtDBus target\r\n\n# ``Qt4::QtDeclarative``\r\n\n#  The QtDeclarative target\r\n\n# ``Qt4::QtDesigner``\r\n\n#  The QtDesigner target\r\n\n# ``Qt4::QtDesignerComponents``\r\n\n#  The QtDesignerComponents target\r\n\n# ``Qt4::QtHelp``\r\n\n#  The QtHelp target\r\n\n# ``Qt4::QtMotif``\r\n\n#  The QtMotif target\r\n\n# ``Qt4::QtMultimedia``\r\n\n#  The QtMultimedia target\r\n\n# ``Qt4::QtNetwork``\r\n\n#  The QtNetwork target\r\n\n# ``Qt4::QtNsPLugin``\r\n\n#  The QtNsPLugin target\r\n\n# ``Qt4::QtOpenGL``\r\n\n#  The QtOpenGL target\r\n\n# ``Qt4::QtScript``\r\n\n#  The QtScript target\r\n\n# ``Qt4::QtScriptTools``\r\n\n#  The QtScriptTools target\r\n\n# ``Qt4::QtSql``\r\n\n#  The QtSql target\r\n\n# ``Qt4::QtSvg``\r\n\n#  The QtSvg target\r\n\n# ``Qt4::QtTest``\r\n\n#  The QtTest target\r\n\n# ``Qt4::QtUiTools``\r\n\n#  The QtUiTools target\r\n\n# ``Qt4::QtWebKit``\r\n\n#  The QtWebKit target\r\n\n# ``Qt4::QtXml``\r\n\n#  The QtXml target\r\n\n# ``Qt4::QtXmlPatterns``\r\n\n#  The QtXmlPatterns target\r\n\n# ``Qt4::phonon``\r\n\n#  The phonon target\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n#   Below is a detailed list of variables that FindQt4.cmake sets.\r\n\n#\r\n\n# ``Qt4_FOUND``\r\n\n#  If false, don't try to use Qt 4.\r\n\n# ``QT_FOUND``\r\n\n#  If false, don't try to use Qt. This variable is for compatibility only.\r\n\n# ``QT4_FOUND``\r\n\n#  If false, don't try to use Qt 4. This variable is for compatibility only.\r\n\n# ``QT_VERSION_MAJOR``\r\n\n#  The major version of Qt found.\r\n\n# ``QT_VERSION_MINOR``\r\n\n#  The minor version of Qt found.\r\n\n# ``QT_VERSION_PATCH``\r\n\n#  The patch version of Qt found.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use find_package( Qt4 COMPONENTS ... ) to enable modules\r\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To make sure we don't use QtCore or QtGui when not in COMPONENTS\r\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If Qt3 has already been found, fail.\r\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# convenience macro for dealing with debug/release library names\r\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The name of the imported targets, i.e. the prefix \"Qt4::\" must not change,\r\n\n# since it is stored in EXPORT-files as name of a required library. If the name would change\r\n\n# here, this would lead to the imported Qt4-library targets not being resolved by cmake anymore.\r\n",
        "Line" : 348,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If QT_USE_IMPORTED_TARGETS is enabled, the QT_QTFOO_LIBRARY variables are set to point at these\r\n\n# imported targets. This works better in general, and is also in almost all cases fully\r\n\n# backward compatible. The only issue is when a project A which had this enabled then exports its\r\n\n# libraries via export or export_library_dependencies(). In this case the libraries from project\r\n\n# A will depend on the imported Qt targets, and the names of these imported targets will be stored\r\n\n# in the dependency files on disk. This means when a project B then uses project A, these imported\r\n\n# targets must be created again, otherwise e.g. \"Qt4__QtCore\" will be interpreted as name of a\r\n\n# library file on disk, and not as a target, and linking will fail:\r\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# if the release- as well as the debug-version of the library have been found:\r\n",
        "Line" : 397,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if the generator supports configuration types then set\r\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\r\n",
        "Line" : 399,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\r\n\n# then just use the release libraries\r\n",
        "Line" : 404,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\r\n",
        "Line" : 411,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\r\n",
        "Line" : 418,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# put the value in the cache:\r\n",
        "Line" : 425,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#add the include directory to QT_INCLUDES\r\n",
        "Line" : 439,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Make variables changeable to the advanced user\r\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Restore possibly found qmake and it's version; these are used later\r\n\n# in error message if incorrect version is found\r\n",
        "Line" : 501,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Qt5CoreConfig sets QT_MOC_EXECUTABLE as a non-cache variable to the Qt 5\r\n\n# path to moc.  Unset that variable when Qt 4 and 5 are used together, so\r\n\n# that when find_program looks for moc, it is not set to the Qt 5 version.\r\n\n# If FindQt4 has already put the Qt 4 path in the cache, the unset()\r\n\n# command 'unhides' the (correct) cache variable.\r\n",
        "Line" : 524,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# ask qmake for the mkspecs directory\r\n\n# we do this first because QT_LIBINFIX might be set\r\n",
        "Line" : 538,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# do not replace : on windows as it might be a drive letter\r\n\n# and windows should already use ; as a separator\r\n",
        "Line" : 542,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# ask qmake for the library dir as a hint, then search for QtCore library and use that as a reference for finding the\r\n\n# others and for setting QT_LIBRARY_DIR\r\n",
        "Line" : 570,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# try dropping a hint if trying to use Visual Studio with Qt built by MinGW\r\n",
        "Line" : 598,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# set QT_LIBRARY_DIR based on location of QtCore found.\r\n",
        "Line" : 607,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# ask qmake for the binary dir\r\n",
        "Line" : 632,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# ask qmake for the include dir\r\n",
        "Line" : 649,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Set QT_HEADERS_DIR based on finding QtCore header\r\n",
        "Line" : 665,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Set QT_INCLUDE_DIR based on QT_HEADERS_DIR\r\n",
        "Line" : 683,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Qt/Mac frameworks has two include dirs.\r\n\n# One is the framework include for which CMake will add a -F flag\r\n\n# and the other is an include dir for non-framework Qt modules\r\n",
        "Line" : 686,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Set QT_INCLUDES\r\n",
        "Line" : 695,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# ask qmake for the documentation directory\r\n",
        "Line" : 699,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ask qmake for the plugins directory\r\n",
        "Line" : 706,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# ask qmake for the translations directory\r\n",
        "Line" : 719,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# ask qmake for the imports directory\r\n",
        "Line" : 725,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Make variables changeable to the advanced user\r\n",
        "Line" : 743,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#############################################\r\n\n#\r\n\n# Find out what window system we're using\r\n\n#\r\n\n#############################################\r\n",
        "Line" : 750,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Add QT_INCLUDE_DIR to CMAKE_REQUIRED_INCLUDES\r\n",
        "Line" : 756,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Check for Window system symbols (note: only one should end up being set)\r\n",
        "Line" : 759,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#\r\n\n#############################################\r\n",
        "Line" : 779,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "########################################\r\n\n#\r\n\n#       Setting the INCLUDE-Variables\r\n\n#\r\n\n########################################\r\n",
        "Line" : 784,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# phonon doesn't seem consistent, let's try phonondefs.h for some\r\n\n# installations\r\n",
        "Line" : 837,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Set QT_AXCONTAINER_INCLUDE_DIR and QT_AXSERVER_INCLUDE_DIR\r\n",
        "Line" : 851,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR\r\n",
        "Line" : 862,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Set QT_QTASSISTANT_INCLUDE_DIR\r\n",
        "Line" : 870,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Set QT_QTASSISTANTCLIENT_INCLUDE_DIR\r\n",
        "Line" : 878,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "########################################\r\n\n#\r\n\n#       Setting the LIBRARY-Variables\r\n\n#\r\n\n########################################\r\n",
        "Line" : 886,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# find the libraries\r\n",
        "Line" : 892,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Release framework library file does not exist... Force to NOTFOUND:\r\n",
        "Line" : 905,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# Debug framework library file does not exist... Force to NOTFOUND:\r\n",
        "Line" : 911,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# QtUiTools is sometimes not in the same directory as the other found libraries\r\n\n# e.g. on Mac, its never a framework like the others are\r\n",
        "Line" : 917,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_LIBRARY\r\n",
        "Line" : 923,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Set QT_QTMAIN_LIBRARY\r\n",
        "Line" : 927,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Set QT_QTASSISTANTCLIENT_LIBRARY\r\n",
        "Line" : 933,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Set QT_QTASSISTANT_LIBRARY\r\n",
        "Line" : 937,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Set QT_QTHELP_LIBRARY\r\n",
        "Line" : 941,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "############################################\r\n\n#\r\n\n# Check the existence of the libraries.\r\n\n#\r\n\n############################################\r\n",
        "Line" : 949,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Set QT_xyz_LIBRARY variable and add\r\n\n# library include path to QT_INCLUDES\r\n",
        "Line" : 996,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# platform dependent libraries\r\n",
        "Line" : 1025,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Only public dependencies are listed here.\r\n\n# Eg, QtDBus links to QtXml, but users of QtDBus do not need to\r\n\n# link to QtXml because QtDBus only uses it internally, not in public\r\n\n# headers.\r\n\n# Everything depends on QtCore, but that is covered above already\r\n",
        "Line" : 1041,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# An additional define is required for QT3_SUPPORT\r\n",
        "Line" : 1048,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "#######################################\r\n\n#\r\n\n#       Check the executables of Qt\r\n\n#          ( moc, uic, rcc )\r\n\n#\r\n\n#######################################\r\n",
        "Line" : 1106,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# get the directory of the current file, used later on in the file\r\n",
        "Line" : 1173,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "###############################################\r\n\n#\r\n\n#       configuration/system dependent settings\r\n\n#\r\n\n###############################################\r\n",
        "Line" : 1177,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "#######################################\r\n\n#\r\n\n#       Check the plugins of Qt\r\n\n#\r\n\n#######################################\r\n",
        "Line" : 1186,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# find_library works better than find_file but we need to set prefixes to only match plugins\r\n",
        "Line" : 1237,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# find_library works easier/better than find_file but we need to set suffixes to only match plugins\r\n",
        "Line" : 1254,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "######################################\r\n\n#\r\n\n#       Macros for building Qt files\r\n\n#\r\n\n######################################\r\n",
        "Line" : 1272,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "#support old QT_MIN_VERSION if set, but not if version is supplied by find_package()\r\n",
        "Line" : 1282,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# if components specified in find_package(), make sure each of those pieces were found\r\n",
        "Line" : 1289,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# if no components specified, we'll make a default set of required variables to say Qt is found\r\n",
        "Line" : 1308,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "#######################################\r\n\n#\r\n\n#       compatibility settings\r\n\n#\r\n\n#######################################\r\n\n# Backwards compatibility for CMake1.4 and 1.2\r\n",
        "Line" : 1331,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 70
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindQuickTime.cmake" : {
      "ObjectId" : "2248228a5d1a5c900725f4d309d8d66b09a4f1f3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindQuickTime\r\n\n# -------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# Locate QuickTime This module defines QUICKTIME_LIBRARY\r\n\n# QUICKTIME_FOUND, if false, do not try to link to gdal\r\n\n# QUICKTIME_INCLUDE_DIR, where to find the headers\r\n\n#\r\n\n# $QUICKTIME_DIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$QUICKTIME_DIR\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindRTI.cmake" : {
      "ObjectId" : "80928c1c85b7b026b18a61a48aff3d35e0d6c000",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindRTI\r\n\n# -------\r\n\n#\r\n\n# Try to find M&S HLA RTI libraries\r\n\n#\r\n\n# This module finds if any HLA RTI is installed and locates the standard\r\n\n# RTI include files and libraries.\r\n\n#\r\n\n# RTI is a simulation infrastructure standardized by IEEE and SISO.  It\r\n\n# has a well defined C++ API that assures that simulation applications\r\n\n# are independent on a particular RTI implementation.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   http://en.wikipedia.org/wiki/Run-Time_Infrastructure_(simulation)\r\n\n#\r\n\n#\r\n\n#\r\n\n# This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   RTI_INCLUDE_DIR = the directory where RTI includes file are found\r\n\n#   RTI_LIBRARIES = The libraries to link against to use RTI\r\n\n#   RTI_DEFINITIONS = -DRTI_USES_STD_FSTREAM\r\n\n#   RTI_FOUND = Set to FALSE if any HLA RTI was not found\r\n\n#\r\n\n#\r\n\n#\r\n\n# Report problems to <certi-devel@nongnu.org>\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Detect the CERTI installation, http://www.cert.fr/CERTI\r\n\n# Detect the MAK Technologies RTI installation, http://www.mak.com/products/rti.php\r\n\n# note: the following list is ordered to find the most recent version first\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The MAK RTI has the \"lib\" prefix even on Windows.\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the modified system variables back to the original value.\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# $Id$\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindRuby.cmake" : {
      "ObjectId" : "fe2c7689aeb65074f964aa6325fef8d51bc1c363",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindRuby\r\n\n# --------\r\n\n#\r\n\n# Find Ruby\r\n\n#\r\n\n# This module finds if Ruby is installed and determines where the\r\n\n# include files and libraries are.  Ruby 1.8, 1.9, 2.0 and 2.1 are\r\n\n# supported.\r\n\n#\r\n\n# The minimum required version of Ruby can be specified using the\r\n\n# standard syntax, e.g.  find_package(Ruby 1.8)\r\n\n#\r\n\n# It also determines what the name of the library is.  This code sets\r\n\n# the following variables:\r\n\n#\r\n\n# ``RUBY_EXECUTABLE``\r\n\n#   full path to the ruby binary\r\n\n# ``RUBY_INCLUDE_DIRS``\r\n\n#   include dirs to be used when using the ruby library\r\n\n# ``RUBY_LIBRARY``\r\n\n#   full path to the ruby library\r\n\n# ``RUBY_VERSION``\r\n\n#   the version of ruby which was found, e.g. \"1.8.7\"\r\n\n# ``RUBY_FOUND``\r\n\n#   set to true if ruby ws found successfully\r\n\n#\r\n\n# Also:\r\n\n#\r\n\n# ``RUBY_INCLUDE_PATH``\r\n\n#   same as RUBY_INCLUDE_DIRS, only provided for compatibility reasons, don't use it\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#   RUBY_ARCHDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"archdir\"@:>@)'`\r\n\n#   RUBY_SITEARCHDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"sitearchdir\"@:>@)'`\r\n\n#   RUBY_SITEDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"sitelibdir\"@:>@)'`\r\n\n#   RUBY_LIBDIR=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"libdir\"@:>@)'`\r\n\n#   RUBY_LIBRUBYARG=`$RUBY -r rbconfig -e 'printf(\"%s\",Config::CONFIG@<:@\"LIBRUBYARG_SHARED\"@:>@)'`\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# uncomment the following line to get debug output for this file\r\n\n# set(_RUBY_DEBUG_OUTPUT TRUE)\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the list of possible names of the ruby executable depending\r\n\n# on which version of ruby is required\r\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if 1.9 is required, don't look for ruby18 and ruby1.8, default to version 1.8\r\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we can't construct that if only major version is given\r\n",
        "Line" : 52,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# if we want a version below 1.9, also look for ruby 1.8\r\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# query the ruby version\r\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# query the different directories\r\n",
        "Line" : 97,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# site_ruby\r\n",
        "Line" : 105,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "# vendor_ruby available ?\r\n",
        "Line" : 109,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "# save the results in the cache so we don't have to run ruby the next time again\r\n",
        "Line" : 118,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# In case RUBY_EXECUTABLE could not be executed (e.g. cross compiling)\r\n\n# try to detect which version we found. This is not too good.\r\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# by default assume 1.8.0\r\n",
        "Line" : 154,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "# check whether we found 1.9.x\r\n",
        "Line" : 158,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# check whether we found 2.0.x\r\n",
        "Line" : 163,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# check whether we found 2.1.x\r\n",
        "Line" : 168,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# if ruby > 1.8 is required or if ruby > 1.8 was found, search for the config.h dir\r\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Determine the list of possible names for the ruby library\r\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Set some variables for compatibility with previous version of this file\r\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSDL.cmake" : {
      "ObjectId" : "828785652dcd8ba87c2c7fac1365634580e34a9a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSDL\r\n\n# -------\r\n\n#\r\n\n# Locate SDL library\r\n\n#\r\n\n# This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDL_LIBRARY, the name of the library to link against\r\n\n#   SDL_FOUND, if false, do not try to link to SDL\r\n\n#   SDL_INCLUDE_DIR, where to find SDL.h\r\n\n#   SDL_VERSION_STRING, human-readable string containing the version of SDL\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module responds to the flag:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDL_BUILDING_LIBRARY\r\n\n#     If this is defined, then no SDL_main will be linked in because\r\n\n#     only applications need main().\r\n\n#     Otherwise, it is assumed you are building an application and this\r\n\n#     module will attempt to locate and set the proper link flags\r\n\n#     as part of the returned SDL_LIBRARY variable.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\r\n\n# OS X framework based version.  (Other versions link to -lSDLmain which\r\n\n# this module will try to find on your behalf.) Also for OS X, this\r\n\n# module will automatically add the -framework Cocoa on your behalf.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Additional Note: If you see an empty SDL_LIBRARY_TEMP in your\r\n\n# configuration and no SDL_LIBRARY, it means CMake did not find your SDL\r\n\n# library (SDL.dll, libsdl.so, SDL.framework, etc).  Set\r\n\n# SDL_LIBRARY_TEMP to point to your SDL library, and configure again.\r\n\n# Similarly, if you see an empty SDLMAIN_LIBRARY, you should set this\r\n\n# value as appropriate.  These values are used to generate the final\r\n\n# SDL_LIBRARY variable, but when these values are unset, SDL_LIBRARY\r\n\n# does not get created.\r\n\n#\r\n\n#\r\n\n#\r\n\n# $SDLDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$SDLDIR used in building SDL.  l.e.galup 9-20-02\r\n\n#\r\n\n# Modified by Eric Wing.  Added code to assist with automated building\r\n\n# by using environmental variables and providing a more\r\n\n# controlled/consistent search behavior.  Added new modifications to\r\n\n# recognize OS X frameworks and additional Unix paths (FreeBSD, etc).\r\n\n# Also corrected the header search path to follow \"proper\" SDL\r\n\n# guidelines.  Added a search for SDLmain which is needed by some\r\n\n# platforms.  Added a search for threads which is needed by some\r\n\n# platforms.  Added needed compile switches for MinGW.\r\n\n#\r\n\n# On OSX, this will prefer the Framework version (if found) over others.\r\n\n# People will have to manually change the cache values of SDL_LIBRARY to\r\n\n# override this selection or set the CMake environment\r\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\r\n\n#\r\n\n# Note that the header path has changed from SDL/SDL.h to just SDL.h\r\n\n# This needed to change because \"proper\" SDL convention is #include\r\n\n# \"SDL.h\", not <SDL/SDL.h>.  This is done for portability reasons\r\n\n# because not all systems place things in SDL/ (see FreeBSD).\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\r\n",
        "Line" : 78,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# SDL-1.1 is the name used by FreeBSD ports...\r\n\n# don't confuse it for the version number.\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Hide this cache variable from the user, it's an internal implementation\r\n\n# detail. The documented library variable for the user is SDL_LIBRARY\r\n\n# which is derived from SDL_LIBRARY_TEMP further below.\r\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\r\n\n# SDLmain. This is mainly for Windows and OS X. Other (Unix) platforms\r\n\n# seem to provide SDLmain for compatibility even though they don't\r\n\n# necessarily need it.\r\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# SDL may require threads on your system.\r\n\n# The Apple build may not need an explicit flag because one of the\r\n\n# frameworks may already provide it.\r\n\n# But for non-OSX systems, I will use the CMake Threads package.\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional link flag, -mwindows\r\n\n# It's total link flags should look like -lmingw32 -lSDLmain -lSDL -mwindows\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDLmain\r\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# For OS X, SDL uses Cocoa as a backend so it must link to Cocoa.\r\n\n# CMake doesn't display the -framework Cocoa string in the UI even\r\n\n# though it actually is there if I modify a pre-used variable.\r\n\n# I think it has something to do with the CACHE STRING.\r\n\n# So I use a temporary variable until the end so I can set the\r\n\n# \"real\" variable in one-shot.\r\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\r\n\n# In fact, there seems to be a problem if I used the Threads package\r\n\n# and try using this line, so I'm just skipping it entirely for OS X.\r\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For MinGW library\r\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\r\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSDL_image.cmake" : {
      "ObjectId" : "76ee4b86dc0afa6c538c1793f1eaa804315d9d54",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSDL_image\r\n\n# -------------\r\n\n#\r\n\n# Locate SDL_image library\r\n\n#\r\n\n# This module defines:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDL_IMAGE_LIBRARIES, the name of the library to link against\r\n\n#   SDL_IMAGE_INCLUDE_DIRS, where to find the headers\r\n\n#   SDL_IMAGE_FOUND, if false, do not try to link against\r\n\n#   SDL_IMAGE_VERSION_STRING - human-readable string containing the\r\n\n#                              version of SDL_image\r\n\n#\r\n\n#\r\n\n#\r\n\n# For backward compatibility the following variables are also set:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDLIMAGE_LIBRARY (same value as SDL_IMAGE_LIBRARIES)\r\n\n#   SDLIMAGE_INCLUDE_DIR (same value as SDL_IMAGE_INCLUDE_DIRS)\r\n\n#   SDLIMAGE_FOUND (same value as SDL_IMAGE_FOUND)\r\n\n#\r\n\n#\r\n\n#\r\n\n# $SDLDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$SDLDIR used in building SDL.\r\n\n#\r\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\r\n\n# module, but with modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\r\n",
        "Line" : 48,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# for backward compatibility\r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSDL_mixer.cmake" : {
      "ObjectId" : "2fbebb1822a1d6c1de9eeba864f8d2a53c28401f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSDL_mixer\r\n\n# -------------\r\n\n#\r\n\n# Locate SDL_mixer library\r\n\n#\r\n\n# This module defines:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDL_MIXER_LIBRARIES, the name of the library to link against\r\n\n#   SDL_MIXER_INCLUDE_DIRS, where to find the headers\r\n\n#   SDL_MIXER_FOUND, if false, do not try to link against\r\n\n#   SDL_MIXER_VERSION_STRING - human-readable string containing the\r\n\n#                              version of SDL_mixer\r\n\n#\r\n\n#\r\n\n#\r\n\n# For backward compatibility the following variables are also set:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDLMIXER_LIBRARY (same value as SDL_MIXER_LIBRARIES)\r\n\n#   SDLMIXER_INCLUDE_DIR (same value as SDL_MIXER_INCLUDE_DIRS)\r\n\n#   SDLMIXER_FOUND (same value as SDL_MIXER_FOUND)\r\n\n#\r\n\n#\r\n\n#\r\n\n# $SDLDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$SDLDIR used in building SDL.\r\n\n#\r\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\r\n\n# module, but with modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\r\n",
        "Line" : 48,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# for backward compatibility\r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSDL_net.cmake" : {
      "ObjectId" : "c4153f70743f385ea32a6a673bf64200c2d76f39",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSDL_net\r\n\n# -----------\r\n\n#\r\n\n# Locate SDL_net library\r\n\n#\r\n\n# This module defines:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDL_NET_LIBRARIES, the name of the library to link against\r\n\n#   SDL_NET_INCLUDE_DIRS, where to find the headers\r\n\n#   SDL_NET_FOUND, if false, do not try to link against\r\n\n#   SDL_NET_VERSION_STRING - human-readable string containing the version of SDL_net\r\n\n#\r\n\n#\r\n\n#\r\n\n# For backward compatibility the following variables are also set:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDLNET_LIBRARY (same value as SDL_NET_LIBRARIES)\r\n\n#   SDLNET_INCLUDE_DIR (same value as SDL_NET_INCLUDE_DIRS)\r\n\n#   SDLNET_FOUND (same value as SDL_NET_FOUND)\r\n\n#\r\n\n#\r\n\n#\r\n\n# $SDLDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$SDLDIR used in building SDL.\r\n\n#\r\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\r\n\n# module, but with modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\r\n",
        "Line" : 47,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# for backward compatibility\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSDL_sound.cmake" : {
      "ObjectId" : "b6d42c91bbc5cda0c4ee3d9f80750440cdae8ba1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSDL_sound\r\n\n# -------------\r\n\n#\r\n\n# Locates the SDL_sound library\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module depends on SDL being found and must be called AFTER\r\n\n# FindSDL.cmake is called.\r\n\n#\r\n\n# This module defines\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDL_SOUND_INCLUDE_DIR, where to find SDL_sound.h\r\n\n#   SDL_SOUND_FOUND, if false, do not try to link to SDL_sound\r\n\n#   SDL_SOUND_LIBRARIES, this contains the list of libraries that you need\r\n\n#     to link against.\r\n\n#   SDL_SOUND_EXTRAS, this is an optional variable for you to add your own\r\n\n#     flags to SDL_SOUND_LIBRARIES. This is prepended to SDL_SOUND_LIBRARIES.\r\n\n#     This is available mostly for cases this module failed to anticipate for\r\n\n#     and you must add additional flags. This is marked as ADVANCED.\r\n\n#   SDL_SOUND_VERSION_STRING, human-readable string containing the\r\n\n#     version of SDL_sound\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module also defines (but you shouldn't need to use directly)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    SDL_SOUND_LIBRARY, the name of just the SDL_sound library you would link\r\n\n#    against. Use SDL_SOUND_LIBRARIES for you link instructions and not this one.\r\n\n#\r\n\n# And might define the following as needed\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    MIKMOD_LIBRARY\r\n\n#    MODPLUG_LIBRARY\r\n\n#    OGG_LIBRARY\r\n\n#    VORBIS_LIBRARY\r\n\n#    SMPEG_LIBRARY\r\n\n#    FLAC_LIBRARY\r\n\n#    SPEEX_LIBRARY\r\n\n#\r\n\n#\r\n\n#\r\n\n# Typically, you should not use these variables directly, and you should\r\n\n# use SDL_SOUND_LIBRARIES which contains SDL_SOUND_LIBRARY and the other\r\n\n# audio libraries (if needed) to successfully compile on your system.\r\n\n#\r\n\n# Created by Eric Wing.  This module is a bit more complicated than the\r\n\n# other FindSDL* family modules.  The reason is that SDL_sound can be\r\n\n# compiled in a large variety of different ways which are independent of\r\n\n# platform.  SDL_sound may dynamically link against other 3rd party\r\n\n# libraries to get additional codec support, such as Ogg Vorbis, SMPEG,\r\n\n# ModPlug, MikMod, FLAC, Speex, and potentially others.  Under some\r\n\n# circumstances which I don't fully understand, there seems to be a\r\n\n# requirement that dependent libraries of libraries you use must also be\r\n\n# explicitly linked against in order to successfully compile.  SDL_sound\r\n\n# does not currently have any system in place to know how it was\r\n\n# compiled.  So this CMake module does the hard work in trying to\r\n\n# discover which 3rd party libraries are required for building (if any).\r\n\n# This module uses a brute force approach to create a test program that\r\n\n# uses SDL_sound, and then tries to build it.  If the build fails, it\r\n\n# parses the error output for known symbol names to figure out which\r\n\n# libraries are needed.\r\n\n#\r\n\n# Responds to the $SDLDIR and $SDLSOUNDDIR environmental variable that\r\n\n# would correspond to the ./configure --prefix=$SDLDIR used in building\r\n\n# SDL.\r\n\n#\r\n\n# On OSX, this will prefer the Framework version (if found) over others.\r\n\n# People will have to manually change the cache values of SDL_LIBRARY to\r\n\n# override this selectionor set the CMake environment CMAKE_INCLUDE_PATH\r\n\n# to modify the search paths.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find SDL_sound.h\r\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\r\n",
        "Line" : 92,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# CMake is giving me problems using TRY_COMPILE with the CMAKE_FLAGS\r\n\n# for the :STRING syntax if I have multiple values contained in a\r\n\n# single variable. This is a problem for the SDL_LIBRARY variable\r\n\n# because it does just that. When I feed this variable to the command,\r\n\n# only the first value gets the appropriate modifier (e.g. -I) and\r\n\n# the rest get dropped.\r\n\n# To get multiple single variables to work, I must separate them with a \"\\;\"\r\n\n# I could go back and modify the FindSDL.cmake module, but that's kind of painful.\r\n\n# The solution would be to try something like:\r\n\n# string(APPEND SDL_TRY_COMPILE_LIBRARY_LIST \"\\;${CMAKE_THREAD_LIBS_INIT}\")\r\n\n# Instead, it was suggested on the mailing list to write a temporary CMakeLists.txt\r\n\n# with a temporary test project and invoke that with TRY_COMPILE.\r\n\n# See message thread \"Figuring out dependencies for a library in order to build\"\r\n\n# 2005-07-16\r\n\n#     try_compile(\r\n\n#             MY_RESULT\r\n\n#             ${CMAKE_BINARY_DIR}\r\n\n#             ${PROJECT_SOURCE_DIR}/DetermineSoundLibs.c\r\n\n#             CMAKE_FLAGS\r\n\n#                     -DINCLUDE_DIRECTORIES:STRING=${SDL_INCLUDE_DIR}\\;${SDL_SOUND_INCLUDE_DIR}\r\n\n#                     -DLINK_LIBRARIES:STRING=${SDL_SOUND_LIBRARY}\\;${SDL_LIBRARY}\r\n\n#             OUTPUT_VARIABLE MY_OUTPUT\r\n\n#     )\r\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# To minimize external dependencies, create a sdlsound test program\r\n\n# which will be used to figure out if additional link dependencies are\r\n\n# required for the link phase.\r\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Calling\r\n\n# target_link_libraries(DetermineSoundLibs \"${SDL_SOUND_LIBRARY} ${SDL_LIBRARY})\r\n\n# causes problems when SDL_LIBRARY looks like\r\n\n# /Library/Frameworks/SDL.framework;-framework Cocoa\r\n\n# The ;-framework Cocoa seems to be confusing CMake once the OS X\r\n\n# framework support was added. I was told that breaking up the list\r\n\n# would fix the problem.\r\n",
        "Line" : 156,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# message(\"TMP_TRY_LIBS ${TMP_TRY_LIBS}\")\r\n",
        "Line" : 168,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Write the CMakeLists.txt and test project\r\n\n# Weird, this is still sketchy. If I don't quote the variables\r\n\n# in the TARGET_LINK_LIBRARIES, I seem to loose everything\r\n\n# in the SDL_LIBRARY string after the \"-framework\".\r\n\n# But if I quote the stuff in INCLUDE_DIRECTORIES, it doesn't work.\r\n",
        "Line" : 170,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# message(\"${MY_RESULT}\")\r\n\n# message(${MY_OUTPUT})\r\n",
        "Line" : 191,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "# I expect that MPGLIB, VOC, WAV, AIFF, and SHN are compiled in statically.\r\n\n# I think Timidity is also compiled in statically.\r\n\n# I've never had to explcitly link against Quicktime, so I'll skip that for now.\r\n",
        "Line" : 196,
        "CharPositionInLine" : 5
      },
      "11" : {
        "Text" : "# Find MikMod\r\n",
        "Line" : 202,
        "CharPositionInLine" : 5
      },
      "12" : {
        "Text" : "# Find ModPlug\r\n",
        "Line" : 222,
        "CharPositionInLine" : 5
      },
      "13" : {
        "Text" : "# Find Ogg and Vorbis\r\n",
        "Line" : 243,
        "CharPositionInLine" : 5
      },
      "14" : {
        "Text" : "# Find SMPEG\r\n",
        "Line" : 283,
        "CharPositionInLine" : 5
      },
      "15" : {
        "Text" : "# Find FLAC\r\n",
        "Line" : 304,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "# Hmmm...Speex seems to depend on Ogg. This might be a problem if\r\n\n# the TRY_COMPILE attempt gets blocked at SPEEX before it can pull\r\n\n# in the Ogg symbols. I'm not sure if I should duplicate the ogg stuff\r\n\n# above for here or if two ogg entries will screw up things.\r\n",
        "Line" : 325,
        "CharPositionInLine" : 5
      },
      "17" : {
        "Text" : "# Find OGG (needed for Speex)\r\n",
        "Line" : 347,
        "CharPositionInLine" : 7
      },
      "18" : {
        "Text" : "# We might have already found Ogg for Vorbis, so skip it if so.\r\n",
        "Line" : 348,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 19
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSDL_ttf.cmake" : {
      "ObjectId" : "e941dd44d2a7774f169b548eb0d1651028055c5c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSDL_ttf\r\n\n# -----------\r\n\n#\r\n\n# Locate SDL_ttf library\r\n\n#\r\n\n# This module defines:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDL_TTF_LIBRARIES, the name of the library to link against\r\n\n#   SDL_TTF_INCLUDE_DIRS, where to find the headers\r\n\n#   SDL_TTF_FOUND, if false, do not try to link against\r\n\n#   SDL_TTF_VERSION_STRING - human-readable string containing the version of SDL_ttf\r\n\n#\r\n\n#\r\n\n#\r\n\n# For backward compatibility the following variables are also set:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SDLTTF_LIBRARY (same value as SDL_TTF_LIBRARIES)\r\n\n#   SDLTTF_INCLUDE_DIR (same value as SDL_TTF_INCLUDE_DIRS)\r\n\n#   SDLTTF_FOUND (same value as SDL_TTF_FOUND)\r\n\n#\r\n\n#\r\n\n#\r\n\n# $SDLDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$SDLDIR used in building SDL.\r\n\n#\r\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\r\n\n# module, but with modifications to recognize OS X frameworks and\r\n\n# additional Unix paths (FreeBSD, etc).\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# path suffixes to search inside ENV{SDLDIR}\r\n",
        "Line" : 47,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# for backward compatibility\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSWIG.cmake" : {
      "ObjectId" : "3c7ac14f0d84f1d4f7cb1876d0c4e877c24af261",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSWIG\r\n\n# --------\r\n\n#\r\n\n# Find SWIG\r\n\n#\r\n\n# This module finds an installed SWIG.  It sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SWIG_FOUND - set to true if SWIG is found\r\n\n#   SWIG_DIR - the directory where swig is installed\r\n\n#   SWIG_EXECUTABLE - the path to the swig executable\r\n\n#   SWIG_VERSION   - the version number of the swig executable\r\n\n#\r\n\n#\r\n\n#\r\n\n# The minimum required version of SWIG can be specified using the\r\n\n# standard syntax, e.g.  find_package(SWIG 1.1)\r\n\n#\r\n\n# All information is collected from the SWIG_EXECUTABLE so the version\r\n\n# to be found can be changed from the command line by means of setting\r\n\n# SWIG_EXECUTABLE\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSelfPackers.cmake" : {
      "ObjectId" : "86cdaacf781a0483d221cfb852e955c879f320e4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSelfPackers\r\n\n# ---------------\r\n\n#\r\n\n# Find upx\r\n\n#\r\n\n# This module looks for some executable packers (i.e.  software that\r\n\n# compress executables or shared libs into on-the-fly self-extracting\r\n\n# executables or shared libs.  Examples:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   UPX: http://wildsau.idv.uni-linz.ac.at/mfx/upx.html\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# Set flags\r\n\n#\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSquish.cmake" : {
      "ObjectId" : "0a42d5f41333ee45aadc42c012fec29636cb041f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSquish\r\n\n# ----------\r\n\n#\r\n\n# -- Typical Use\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module can be used to find Squish.  Currently Squish versions 3\r\n\n# and 4 are supported.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SQUISH_FOUND                    If false, don't try to use Squish\r\n\n#   SQUISH_VERSION                  The full version of Squish found\r\n\n#   SQUISH_VERSION_MAJOR            The major version of Squish found\r\n\n#   SQUISH_VERSION_MINOR            The minor version of Squish found\r\n\n#   SQUISH_VERSION_PATCH            The patch version of Squish found\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SQUISH_INSTALL_DIR              The Squish installation directory\r\n\n#                                   (containing bin, lib, etc)\r\n\n#   SQUISH_SERVER_EXECUTABLE        The squishserver executable\r\n\n#   SQUISH_CLIENT_EXECUTABLE        The squishrunner executable\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   SQUISH_INSTALL_DIR_FOUND        Was the install directory found?\r\n\n#   SQUISH_SERVER_EXECUTABLE_FOUND  Was the server executable found?\r\n\n#   SQUISH_CLIENT_EXECUTABLE_FOUND  Was the client executable found?\r\n\n#\r\n\n#\r\n\n#\r\n\n# It provides the function squish_v4_add_test() for adding a squish test\r\n\n# to cmake using Squish 4.x:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    squish_v4_add_test(cmakeTestName\r\n\n#      AUT targetName SUITE suiteName TEST squishTestName\r\n\n#      [SETTINGSGROUP group] [PRE_COMMAND command] [POST_COMMAND command] )\r\n\n#\r\n\n#\r\n\n#\r\n\n# The arguments have the following meaning:\r\n\n#\r\n\n# ``cmakeTestName``\r\n\n#   this will be used as the first argument for add_test()\r\n\n# ``AUT targetName``\r\n\n#   the name of the cmake target which will be used as AUT, i.e. the\r\n\n#   executable which will be tested.\r\n\n# ``SUITE suiteName``\r\n\n#   this is either the full path to the squish suite, or just the\r\n\n#   last directory of the suite, i.e. the suite name. In this case\r\n\n#   the CMakeLists.txt which calls squish_add_test() must be located\r\n\n#   in the parent directory of the suite directory.\r\n\n# ``TEST squishTestName``\r\n\n#   the name of the squish test, i.e. the name of the subdirectory\r\n\n#   of the test inside the suite directory.\r\n\n# ``SETTINGSGROUP group``\r\n\n#   if specified, the given settings group will be used for executing the test.\r\n\n#   If not specified, the groupname will be \"CTest_<username>\"\r\n\n# ``PRE_COMMAND command``\r\n\n#   if specified, the given command will be executed before starting the squish test.\r\n\n# ``POST_COMMAND command``\r\n\n#   same as PRE_COMMAND, but after the squish test has been executed.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    enable_testing()\r\n\n#    find_package(Squish 4.0)\r\n\n#    if (SQUISH_FOUND)\r\n\n#       squish_v4_add_test(myTestName\r\n\n#         AUT myApp\r\n\n#         SUITE ${CMAKE_SOURCE_DIR}/tests/mySuite\r\n\n#         TEST someSquishTest\r\n\n#         SETTINGSGROUP myGroup\r\n\n#         )\r\n\n#    endif ()\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n# For users of Squish version 3.x the macro squish_v3_add_test() is\r\n\n# provided:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    squish_v3_add_test(testName applicationUnderTest testCase envVars testWrapper)\r\n\n#    Use this macro to add a test using Squish 3.x.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   enable_testing()\r\n\n#   find_package(Squish)\r\n\n#   if (SQUISH_FOUND)\r\n\n#     squish_v3_add_test(myTestName myApplication testCase envVars testWrapper)\r\n\n#   endif ()\r\n\n#\r\n\n#\r\n\n#\r\n\n# macro SQUISH_ADD_TEST(testName applicationUnderTest testCase envVars\r\n\n# testWrapper)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    This is deprecated. Use SQUISH_V3_ADD_TEST() if you are using Squish 3.x instead.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search only if the location is not already known.\r\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Get the system search path as a list.\r\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Construct a set of paths relative to the system search path.\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Look for an installation\r\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Look for an environment variable SQUISH_INSTALL_DIR.\r\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look in places relative to the system executable search path.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Look in standard UNIX install locations.\r\n\n#/usr/local/squish\r\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# search for the executables\r\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# find the client program\r\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# find the server program\r\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# record if executables are set\r\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# record if Squish was found\r\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindSubversion.cmake" : {
      "ObjectId" : "176cd91ef7f6c1f7963dc39c726e99928fd095b5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindSubversion\r\n\n# --------------\r\n\n#\r\n\n# Extract information from a subversion working copy\r\n\n#\r\n\n# The module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Subversion_SVN_EXECUTABLE - path to svn command line client\r\n\n#   Subversion_VERSION_SVN - version of svn command line client\r\n\n#   Subversion_FOUND - true if the command line client was found\r\n\n#   SUBVERSION_FOUND - same as Subversion_FOUND, set for compatibility reasons\r\n\n#\r\n\n#\r\n\n#\r\n\n# The minimum required version of Subversion can be specified using the\r\n\n# standard syntax, e.g.  find_package(Subversion 1.4)\r\n\n#\r\n\n# If the command line client executable is found two macros are defined:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Subversion_WC_INFO(<dir> <var-prefix>)\r\n\n#   Subversion_WC_LOG(<dir> <var-prefix>)\r\n\n#\r\n\n# Subversion_WC_INFO extracts information of a subversion working copy\r\n\n# at a given location.  This macro defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <var-prefix>_WC_URL - url of the repository (at <dir>)\r\n\n#   <var-prefix>_WC_ROOT - root url of the repository\r\n\n#   <var-prefix>_WC_REVISION - current revision\r\n\n#   <var-prefix>_WC_LAST_CHANGED_AUTHOR - author of last commit\r\n\n#   <var-prefix>_WC_LAST_CHANGED_DATE - date of last commit\r\n\n#   <var-prefix>_WC_LAST_CHANGED_REV - revision of last commit\r\n\n#   <var-prefix>_WC_INFO - output of command `svn info <dir>'\r\n\n#\r\n\n# Subversion_WC_LOG retrieves the log message of the base revision of a\r\n\n# subversion working copy at a given location.  This macro defines the\r\n\n# variable:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   <var-prefix>_LAST_CHANGED_LOG - last log of base revision\r\n\n#\r\n\n# Example usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   find_package(Subversion)\r\n\n#   if(SUBVERSION_FOUND)\r\n\n#     Subversion_WC_INFO(${PROJECT_SOURCE_DIR} Project)\r\n\n#     message(\"Current revision is ${Project_WC_REVISION}\")\r\n\n#     Subversion_WC_LOG(${PROJECT_SOURCE_DIR} Project)\r\n\n#     message(\"Last changed log is ${Project_LAST_CHANGED_LOG}\")\r\n\n#   endif()\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the subversion commands should be executed with the C locale, otherwise\r\n\n# the message (which are parsed) may be translated, Alex\r\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# restore the previous LC_ALL\r\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# the subversion commands should be executed with the C locale, otherwise\r\n\n# the message (which are parsed) may be translated, Alex\r\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# restore the previous LC_ALL\r\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# This macro can block if the certificate is not signed:\r\n\n# svn ask you to accept the certificate and wait for your answer\r\n\n# This macro requires a svn server network access (Internet most of the time)\r\n\n# and can also be slow since it access the svn server\r\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# for compatibility\r\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindTCL.cmake" : {
      "ObjectId" : "4dff0714e477523625562b8acf5907832d0a764a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindTCL\r\n\n# -------\r\n\n#\r\n\n# TK_INTERNAL_PATH was removed.\r\n\n#\r\n\n# This module finds if Tcl is installed and determines where the include\r\n\n# files and libraries are.  It also determines what the name of the\r\n\n# library is.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   TCL_FOUND              = Tcl was found\r\n\n#   TK_FOUND               = Tk was found\r\n\n#   TCLTK_FOUND            = Tcl and Tk were found\r\n\n#   TCL_LIBRARY            = path to Tcl library (tcl tcl80)\r\n\n#   TCL_INCLUDE_PATH       = path to where tcl.h can be found\r\n\n#   TCL_TCLSH              = path to tclsh binary (tcl tcl80)\r\n\n#   TK_LIBRARY             = path to Tk library (tk tk80 etc)\r\n\n#   TK_INCLUDE_PATH        = path to where tk.h can be found\r\n\n#   TK_WISH                = full path to the wish executable\r\n\n#\r\n\n#\r\n\n#\r\n\n# In an effort to remove some clutter and clear up some issues for\r\n\n# people who are not necessarily Tcl/Tk gurus/developpers, some\r\n\n# variables were moved or removed.  Changes compared to CMake 2.4 are:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    => they were only useful for people writing Tcl/Tk extensions.\r\n\n#    => these libs are not packaged by default with Tcl/Tk distributions.\r\n\n#       Even when Tcl/Tk is built from source, several flavors of debug libs\r\n\n#       are created and there is no real reason to pick a single one\r\n\n#       specifically (say, amongst tcl84g, tcl84gs, or tcl84sgx).\r\n\n#       Let's leave that choice to the user by allowing him to assign\r\n\n#       TCL_LIBRARY to any Tcl library, debug or not.\r\n\n#    => this ended up being only a Win32 variable, and there is a lot of\r\n\n#       confusion regarding the location of this file in an installed Tcl/Tk\r\n\n#       tree anyway (see 8.5 for example). If you need the internal path at\r\n\n#       this point it is safer you ask directly where the *source* tree is\r\n\n#       and dig from there.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindTIFF.cmake" : {
      "ObjectId" : "d67160726cb8faaaba44a71490381c661ea8b70c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindTIFF\r\n\n# --------\r\n\n#\r\n\n# Find the TIFF library (libtiff).\r\n\n#\r\n\n# Imported targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\r\n\n#\r\n\n# ``TIFF::TIFF``\r\n\n#   The TIFF library, if found.\r\n\n#\r\n\n# Result variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables in your project:\r\n\n#\r\n\n# ``TIFF_FOUND``\r\n\n#   true if the TIFF headers and libraries were found\r\n\n# ``TIFF_INCLUDE_DIR``\r\n\n#   the directory containing the TIFF headers\r\n\n# ``TIFF_INCLUDE_DIRS``\r\n\n#   the directory containing the TIFF headers\r\n\n# ``TIFF_LIBRARIES``\r\n\n#   TIFF libraries to be linked\r\n\n#\r\n\n# Cache variables\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following cache variables may also be set:\r\n\n#\r\n\n# ``TIFF_INCLUDE_DIR``\r\n\n#   the directory containing the TIFF headers\r\n\n# ``TIFF_LIBRARY``\r\n\n#   the path to the TIFF library\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindTclStub.cmake" : {
      "ObjectId" : "27f3d947169a97dd3efbc36b084fff6f19b93172",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindTclStub\r\n\n# -----------\r\n\n#\r\n\n# TCL_STUB_LIBRARY_DEBUG and TK_STUB_LIBRARY_DEBUG were removed.\r\n\n#\r\n\n# This module finds Tcl stub libraries.  It first finds Tcl include\r\n\n# files and libraries by calling FindTCL.cmake.  How to Use the Tcl\r\n\n# Stubs Library:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    http://tcl.activestate.com/doc/howto/stubs.html\r\n\n#\r\n\n# Using Stub Libraries:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    http://safari.oreilly.com/0130385603/ch48lev1sec3\r\n\n#\r\n\n# This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   TCL_STUB_LIBRARY       = path to Tcl stub library\r\n\n#   TK_STUB_LIBRARY        = path to Tk stub library\r\n\n#   TTK_STUB_LIBRARY       = path to ttk stub library\r\n\n#\r\n\n#\r\n\n#\r\n\n# In an effort to remove some clutter and clear up some issues for\r\n\n# people who are not necessarily Tcl/Tk gurus/developpers, some\r\n\n# variables were moved or removed.  Changes compared to CMake 2.4 are:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    => these libs are not packaged by default with Tcl/Tk distributions.\r\n\n#       Even when Tcl/Tk is built from source, several flavors of debug libs\r\n\n#       are created and there is no real reason to pick a single one\r\n\n#       specifically (say, amongst tclstub84g, tclstub84gs, or tclstub84sgx).\r\n\n#       Let's leave that choice to the user by allowing him to assign\r\n\n#       TCL_STUB_LIBRARY to any Tcl library, debug or not.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindTclsh.cmake" : {
      "ObjectId" : "f334bdb144f9c36400e71ab5acd0a54e3b7bc636",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindTclsh\r\n\n# ---------\r\n\n#\r\n\n# Find tclsh\r\n\n#\r\n\n# This module finds if TCL is installed and determines where the include\r\n\n# files and libraries are.  It also determines what the name of the\r\n\n# library is.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   TCLSH_FOUND = TRUE if tclsh has been found\r\n\n#   TCL_TCLSH = the path to the tclsh executable\r\n\n#\r\n\n# In cygwin, look for the cygwin version first.  Don't look for it later\r\n\n# to avoid finding the cygwin version on a Win32 build.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindThreads.cmake" : {
      "ObjectId" : "e6005fc3d6bdebdae5629b155c4c5b0d3d3a8831",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindThreads\r\n\n# -----------\r\n\n#\r\n\n# This module determines the thread library of the system.\r\n\n#\r\n\n# The following variables are set\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_THREAD_LIBS_INIT     - the thread library\r\n\n#   CMAKE_USE_SPROC_INIT       - are we using sproc?\r\n\n#   CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?\r\n\n#   CMAKE_USE_PTHREADS_INIT    - are we using pthreads\r\n\n#   CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads\r\n\n#\r\n\n# The following import target is created\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Threads::Threads\r\n\n#\r\n\n# For systems with multiple thread libraries, caller can set\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_THREAD_PREFER_PTHREAD\r\n\n#\r\n\n# If the use of the -pthread compiler and linker flag is preferred then the\r\n\n# caller can set\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   THREADS_PREFER_PTHREAD_FLAG\r\n\n#\r\n\n# Please note that the compiler flag can only be used with the imported\r\n\n# target. Use of both the imported target as well as this switch is highly\r\n\n# recommended for new code.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do we have sproc?\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal helper macro.\r\n\n# Do NOT even think about using it outside of this file!\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Internal helper macro.\r\n\n# Do NOT even think about using it outside of this file!\r\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we did not found -lpthread, -lpthread, or -lthread, look for -pthread\r\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# We have sproc\r\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Do we have pthreads?\r\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\r\n\n# We have pthread.h\r\n\n# Let's check for the library now.\r\n\n#\r\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check if pthread functions are in normal C library\r\n",
        "Line" : 140,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Check for -pthread first if enabled. This is the recommended\r\n\n# way, but not backwards compatible as one must also pass -pthread\r\n\n# as compiler flag then.\r\n",
        "Line" : 148,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# On sun also check for -lthread\r\n",
        "Line" : 158,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Use libcma if it exists and can be used.  It provides more\r\n\n# symbols than the plain pthread library.  CMA threads\r\n\n# have actually been deprecated:\r\n\n#   http://docs.hp.com/en/B3920-90091/ch12s03.html#d0e11395\r\n\n#   http://docs.hp.com/en/947/d8.html\r\n\n# but we need to maintain compatibility here.\r\n\n# The CMAKE_HP_PTHREADS setting actually indicates whether CMA threads\r\n\n# are available.\r\n",
        "Line" : 180,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindUnixCommands.cmake" : {
      "ObjectId" : "573bbde5023b3475a5fd3ff8ee9b82c1b6a79cee",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindUnixCommands\r\n\n# ----------------\r\n\n#\r\n\n# Find Unix commands, including the ones from Cygwin\r\n\n#\r\n\n# This module looks for the Unix commands bash, cp, gzip, mv, rm, and tar\r\n\n# and stores the result in the variables BASH, CP, GZIP, MV, RM, and TAR.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindVulkan.cmake" : {
      "ObjectId" : "31954873f50f813cdda335a2b20eaa35a0f54920",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindVulkan\r\n\n# ----------\r\n\n#\r\n\n# Try to find Vulkan\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines :prop_tgt:`IMPORTED` target ``Vulkan::Vulkan``, if\r\n\n# Vulkan has been found.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following variables::\r\n\n#\r\n\n#   Vulkan_FOUND          - True if Vulkan was found\r\n\n#   Vulkan_INCLUDE_DIRS   - include directories for Vulkan\r\n\n#   Vulkan_LIBRARIES      - link against this library to use Vulkan\r\n\n#\r\n\n# The module will also define two cache variables::\r\n\n#\r\n\n#   Vulkan_INCLUDE_DIR    - the Vulkan include directory\r\n\n#   Vulkan_LIBRARY        - the path to the Vulkan library\r\n\n#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindWget.cmake" : {
      "ObjectId" : "ec07596a6389a823783d6881617d89c1386eea3a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindWget\r\n\n# --------\r\n\n#\r\n\n# Find wget\r\n\n#\r\n\n# This module looks for wget.  This module defines the following values:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   WGET_EXECUTABLE: the full path to the wget tool.\r\n\n#   WGET_FOUND: True if wget has been found.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# WGET option is deprecated.\r\n\n# use WGET_EXECUTABLE instead.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindWish.cmake" : {
      "ObjectId" : "ca45e7fbd952df18fa3271787ca708cf61cd6aef",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindWish\r\n\n# --------\r\n\n#\r\n\n# Find wish installation\r\n\n#\r\n\n# This module finds if TCL is installed and determines where the include\r\n\n# files and libraries are.  It also determines what the name of the\r\n\n# library is.  This code sets the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   TK_WISH = the path to the wish executable\r\n\n#\r\n\n#\r\n\n#\r\n\n# if UNIX is defined, then it will look for the cygwin version first\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindX11.cmake" : {
      "ObjectId" : "435de62b2a27f88dcf8c3f2b085db841c3c57776",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindX11\r\n\n# -------\r\n\n#\r\n\n# Find X11 installation\r\n\n#\r\n\n# Try to find X11 on UNIX systems. The following values are defined\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   X11_FOUND        - True if X11 is available\r\n\n#   X11_INCLUDE_DIR  - include directories to use X11\r\n\n#   X11_LIBRARIES    - link against these to use X11\r\n\n#\r\n\n# and also the following more fine grained variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   X11_ICE_INCLUDE_PATH,          X11_ICE_LIB,        X11_ICE_FOUND\r\n\n#   X11_SM_INCLUDE_PATH,           X11_SM_LIB,         X11_SM_FOUND\r\n\n#   X11_X11_INCLUDE_PATH,          X11_X11_LIB\r\n\n#   X11_Xaccessrules_INCLUDE_PATH,                     X11_Xaccess_FOUND\r\n\n#   X11_Xaccessstr_INCLUDE_PATH,                       X11_Xaccess_FOUND\r\n\n#   X11_Xau_INCLUDE_PATH,          X11_Xau_LIB,        X11_Xau_FOUND\r\n\n#   X11_Xcomposite_INCLUDE_PATH,   X11_Xcomposite_LIB, X11_Xcomposite_FOUND\r\n\n#   X11_Xcursor_INCLUDE_PATH,      X11_Xcursor_LIB,    X11_Xcursor_FOUND\r\n\n#   X11_Xdamage_INCLUDE_PATH,      X11_Xdamage_LIB,    X11_Xdamage_FOUND\r\n\n#   X11_Xdmcp_INCLUDE_PATH,        X11_Xdmcp_LIB,      X11_Xdmcp_FOUND\r\n\n#   X11_Xext_LIB,       X11_Xext_FOUND\r\n\n#   X11_dpms_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_dpms_FOUND\r\n\n#   X11_XShm_INCLUDE_PATH,         (in X11_Xext_LIB),  X11_XShm_FOUND\r\n\n#   X11_Xshape_INCLUDE_PATH,       (in X11_Xext_LIB),  X11_Xshape_FOUND\r\n\n#   X11_xf86misc_INCLUDE_PATH,     X11_Xxf86misc_LIB,  X11_xf86misc_FOUND\r\n\n#   X11_xf86vmode_INCLUDE_PATH,    X11_Xxf86vm_LIB     X11_xf86vmode_FOUND\r\n\n#   X11_Xfixes_INCLUDE_PATH,       X11_Xfixes_LIB,     X11_Xfixes_FOUND\r\n\n#   X11_Xft_INCLUDE_PATH,          X11_Xft_LIB,        X11_Xft_FOUND\r\n\n#   X11_Xi_INCLUDE_PATH,           X11_Xi_LIB,         X11_Xi_FOUND\r\n\n#   X11_Xinerama_INCLUDE_PATH,     X11_Xinerama_LIB,   X11_Xinerama_FOUND\r\n\n#   X11_Xinput_INCLUDE_PATH,       X11_Xinput_LIB,     X11_Xinput_FOUND\r\n\n#   X11_Xkb_INCLUDE_PATH,                              X11_Xkb_FOUND\r\n\n#   X11_Xkblib_INCLUDE_PATH,                           X11_Xkb_FOUND\r\n\n#   X11_Xkbfile_INCLUDE_PATH,      X11_Xkbfile_LIB,    X11_Xkbfile_FOUND\r\n\n#   X11_Xmu_INCLUDE_PATH,          X11_Xmu_LIB,        X11_Xmu_FOUND\r\n\n#   X11_Xpm_INCLUDE_PATH,          X11_Xpm_LIB,        X11_Xpm_FOUND\r\n\n#   X11_XTest_INCLUDE_PATH,        X11_XTest_LIB,      X11_XTest_FOUND\r\n\n#   X11_Xrandr_INCLUDE_PATH,       X11_Xrandr_LIB,     X11_Xrandr_FOUND\r\n\n#   X11_Xrender_INCLUDE_PATH,      X11_Xrender_LIB,    X11_Xrender_FOUND\r\n\n#   X11_Xscreensaver_INCLUDE_PATH, X11_Xscreensaver_LIB, X11_Xscreensaver_FOUND\r\n\n#   X11_Xt_INCLUDE_PATH,           X11_Xt_LIB,         X11_Xt_FOUND\r\n\n#   X11_Xutil_INCLUDE_PATH,                            X11_Xutil_FOUND\r\n\n#   X11_Xv_INCLUDE_PATH,           X11_Xv_LIB,         X11_Xv_FOUND\r\n\n#   X11_XSync_INCLUDE_PATH,        (in X11_Xext_LIB),  X11_XSync_FOUND\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# X11 is never a framework and some header files may be\r\n\n# found in tcl on the mac\r\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Look for includes; keep the list sorted by name of the cmake *_INCLUDE_PATH\r\n\n# variable (which doesn't need to match the include file name).\r\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Solaris lacks XKBrules.h, so we should skip kxkbd there.\r\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Find additional X libraries. Keep list sorted by library name.\r\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# start with empty list\r\n",
        "Line" : 160,
        "CharPositionInLine" : 23
      },
      "7" : {
        "Text" : "# start with empty list\r\n",
        "Line" : 179,
        "CharPositionInLine" : 21
      },
      "8" : {
        "Text" : "# Most of the X11 headers will be in the same directories, avoid\r\n\n# creating a huge list of duplicates.\r\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Deprecated variable for backwards compatibility with CMake 1.4\r\n",
        "Line" : 337,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Translated from an autoconf-generated configure script.\r\n\n# See libs.m4 in autoconf's m4 directory.\r\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# See if XOpenDisplay in X11 works by itself.\r\n",
        "Line" : 353,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Find library needed for dnet_ntoa.\r\n",
        "Line" : 356,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Find library needed for gethostbyname.\r\n",
        "Line" : 368,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Find library needed for connect.\r\n",
        "Line" : 382,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Find library needed for remove.\r\n",
        "Line" : 391,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Find library needed for shmat.\r\n",
        "Line" : 400,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Build the final list of libraries.\r\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# X11_FIND_REQUIRED_<component> could be checked too\r\n",
        "Line" : 502,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindXCTest.cmake" : {
      "ObjectId" : "38261291ed157473b83e31469b14bd2df5997abb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nFindXCTest\r\n----------\r\n\r\nFunctions to help creating and executing XCTest bundles.\r\n\r\nAn XCTest bundle is a CFBundle with a special product-type\r\nand bundle extension. The Mac Developer Library provides more\r\ninformation in the `Testing with Xcode`_ document.\r\n\r\n.. _Testing with Xcode: http://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/testing_with_xcode/\r\n\r\nModule Functions\r\n^^^^^^^^^^^^^^^^\r\n\r\n.. command:: xctest_add_bundle\r\n\r\n  The ``xctest_add_bundle`` function creates a XCTest bundle named\r\n  <target> which will test the target <testee>. Supported target types\r\n  for testee are Frameworks and App Bundles::\r\n\r\n    xctest_add_bundle(\r\n      <target>  # Name of the XCTest bundle\r\n      <testee>  # Target name of the testee\r\n      )\r\n\r\n.. command:: xctest_add_test\r\n\r\n  The ``xctest_add_test`` function adds an XCTest bundle to the\r\n  project to be run by :manual:`ctest(1)`. The test will be named\r\n  <name> and tests <bundle>::\r\n\r\n    xctest_add_test(\r\n      <name>    # Test name\r\n      <bundle>  # Target name of XCTest bundle\r\n      )\r\n\r\nModule Variables\r\n^^^^^^^^^^^^^^^^\r\n\r\nThe following variables are set by including this module:\r\n\r\n.. variable:: XCTest_FOUND\r\n\r\n  True if the XCTest Framework and executable were found.\r\n\r\n.. variable:: XCTest_EXECUTABLE\r\n\r\n  The path to the xctest command line tool used to execute XCTest bundles.\r\n\r\n.. variable:: XCTest_INCLUDE_DIRS\r\n\r\n  The directory containing the XCTest Framework headers.\r\n\r\n.. variable:: XCTest_LIBRARIES\r\n\r\n  The location of the XCTest Framework.\r\n\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# retrieve testee target type\r\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# testee is a Framework\r\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# testee is an App Bundle\r\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# check that bundle is a XCTest Bundle\r\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# get and check testee properties\r\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# register test\r\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# point loader to testee in case rpath is disabled\r\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindXMLRPC.cmake" : {
      "ObjectId" : "2223d423edded2c3f0ae7417d01e9dd1a878e2fb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindXMLRPC\r\n\n# ----------\r\n\n#\r\n\n# Find xmlrpc\r\n\n#\r\n\n# Find the native XMLRPC headers and libraries.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   XMLRPC_INCLUDE_DIRS      - where to find xmlrpc.h, etc.\r\n\n#   XMLRPC_LIBRARIES         - List of libraries when using xmlrpc.\r\n\n#   XMLRPC_FOUND             - True if xmlrpc found.\r\n\n#\r\n\n# XMLRPC modules may be specified as components for this find module.\r\n\n# Modules may be listed by running \"xmlrpc-c-config\".  Modules include:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   c++            C++ wrapper code\r\n\n#   libwww-client  libwww-based client\r\n\n#   cgi-server     CGI-based server\r\n\n#   abyss-server   ABYSS-based server\r\n\n#\r\n\n# Typical usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   find_package(XMLRPC REQUIRED libwww-client)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# First find the config script from which to obtain other values.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check whether we found anything.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Lookup the include directories needed for the components requested.\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use the newer EXECUTE_PROCESS command if it is available.\r\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Parse the include flags.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Convert the compile flags to a CMake list.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Look for -I options.\r\n",
        "Line" : 67,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Lookup the libraries needed for the components requested.\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Use the newer EXECUTE_PROCESS command if it is available.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Parse the library names and directories.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Look for -L flags for directories and -l flags for library names.\r\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Search for each library needed using the directories given.\r\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Look for this library.\r\n",
        "Line" : 117,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# If any library is not found then the whole package is not found.\r\n",
        "Line" : 124,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Build an ordered list of all the libraries needed.\r\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Report the results.\r\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindXalanC.cmake" : {
      "ObjectId" : "87897b94ee11a67207228b3cc45ff0a0e65d6b7b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindXalanC\r\n\n# -----------\r\n\n#\r\n\n# Find the Apache Xalan-C++ XSL transform processor headers and libraries.\r\n\n#\r\n\n# Imported targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\r\n\n#\r\n\n# ``XalanC::XalanC``\r\n\n#   The Xalan-C++ ``xalan-c`` library, if found.\r\n\n#\r\n\n# Result variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables in your project:\r\n\n#\r\n\n# ``XalanC_FOUND``\r\n\n#   true if the Xalan headers and libraries were found\r\n\n# ``XalanC_VERSION``\r\n\n#   Xalan release version\r\n\n# ``XalanC_INCLUDE_DIRS``\r\n\n#   the directory containing the Xalan headers; note\r\n\n#   ``XercesC_INCLUDE_DIRS`` is also required\r\n\n# ``XalanC_LIBRARIES``\r\n\n#   Xalan libraries to be linked; note ``XercesC_LIBRARIES`` is also\r\n\n#   required\r\n\n#\r\n\n# Cache variables\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following cache variables may also be set:\r\n\n#\r\n\n# ``XalanC_INCLUDE_DIR``\r\n\n#   the directory containing the Xalan headers\r\n\n# ``XalanC_LIBRARY``\r\n\n#   the Xalan library\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Written by Roger Leigh <rleigh@codelibre.net>\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find include directory\r\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find all XalanC libraries\r\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# For header-only libraries\r\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindXercesC.cmake" : {
      "ObjectId" : "36053b958468f654caa708c6ce94a59a394fb5ff",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindXercesC\r\n\n# -----------\r\n\n#\r\n\n# Find the Apache Xerces-C++ validating XML parser headers and libraries.\r\n\n#\r\n\n# Imported targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following :prop_tgt:`IMPORTED` targets:\r\n\n#\r\n\n# ``XercesC::XercesC``\r\n\n#   The Xerces-C++ ``xerces-c`` library, if found.\r\n\n#\r\n\n# Result variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module will set the following variables in your project:\r\n\n#\r\n\n# ``XercesC_FOUND``\r\n\n#   true if the Xerces headers and libraries were found\r\n\n# ``XercesC_VERSION``\r\n\n#   Xerces release version\r\n\n# ``XercesC_INCLUDE_DIRS``\r\n\n#   the directory containing the Xerces headers\r\n\n# ``XercesC_LIBRARIES``\r\n\n#   Xerces libraries to be linked\r\n\n#\r\n\n# Cache variables\r\n\n# ^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following cache variables may also be set:\r\n\n#\r\n\n# ``XercesC_INCLUDE_DIR``\r\n\n#   the directory containing the Xerces headers\r\n\n# ``XercesC_LIBRARY``\r\n\n#   the Xerces library\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Written by Roger Leigh <rleigh@codelibre.net>\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find include directory\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find all XercesC libraries\r\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# For header-only libraries\r\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindZLIB.cmake" : {
      "ObjectId" : "724d2a2ae9225031e504165ba66a4507b4cf16f5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindZLIB\r\n\n# --------\r\n\n#\r\n\n# Find the native ZLIB includes and library.\r\n\n#\r\n\n# IMPORTED Targets\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines :prop_tgt:`IMPORTED` target ``ZLIB::ZLIB``, if\r\n\n# ZLIB has been found.\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ZLIB_INCLUDE_DIRS   - where to find zlib.h, etc.\r\n\n#   ZLIB_LIBRARIES      - List of libraries when using zlib.\r\n\n#   ZLIB_FOUND          - True if zlib found.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ZLIB_VERSION_STRING - The version of zlib found (x.y.z)\r\n\n#   ZLIB_VERSION_MAJOR  - The major version of zlib\r\n\n#   ZLIB_VERSION_MINOR  - The minor version of zlib\r\n\n#   ZLIB_VERSION_PATCH  - The patch version of zlib\r\n\n#   ZLIB_VERSION_TWEAK  - The tweak version of zlib\r\n\n#\r\n\n# Backward Compatibility\r\n\n# ^^^^^^^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# The following variable are provided for backward compatibility\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ZLIB_MAJOR_VERSION  - The major version of zlib\r\n\n#   ZLIB_MINOR_VERSION  - The minor version of zlib\r\n\n#   ZLIB_PATCH_VERSION  - The patch version of zlib\r\n\n#\r\n\n# Hints\r\n\n# ^^^^^\r\n\n#\r\n\n# A user may set ``ZLIB_ROOT`` to a zlib installation root to tell this\r\n\n# module where to look.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search ZLIB_ROOT first if it is set.\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Normal search.\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Try each search configuration.\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Allow ZLIB_LIBRARY to be set manually, as the location of the zlib library\r\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# only append a TWEAK version if it exists:\r\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Findosg.cmake" : {
      "ObjectId" : "7a0f8e34845047e16bf24bafc11b8b7eeb635d05",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# Findosg\r\n\n# -------\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n# NOTE: It is highly recommended that you use the new\r\n\n# FindOpenSceneGraph.cmake introduced in CMake 2.6.3 and not use this\r\n\n# Find module directly.\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osg This module defines\r\n\n#\r\n\n# OSG_FOUND - Was the Osg found? OSG_INCLUDE_DIR - Where to find the\r\n\n# headers OSG_LIBRARIES - The libraries to link against for the OSG (use\r\n\n# this)\r\n\n#\r\n\n# OSG_LIBRARY - The OSG library OSG_LIBRARY_DEBUG - The OSG debug\r\n\n# library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgUtil/SceneView>\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgAnimation.cmake" : {
      "ObjectId" : "ad3e0f42f17ee0469d04437ad029cab38f97e0d8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgAnimation\r\n\n# ----------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgAnimation This module defines\r\n\n#\r\n\n# OSGANIMATION_FOUND - Was osgAnimation found? OSGANIMATION_INCLUDE_DIR\r\n\n# - Where to find the headers OSGANIMATION_LIBRARIES - The libraries to\r\n\n# link against for the OSG (use this)\r\n\n#\r\n\n# OSGANIMATION_LIBRARY - The OSG library OSGANIMATION_LIBRARY_DEBUG -\r\n\n# The OSG debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgAnimation/Animation>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgDB.cmake" : {
      "ObjectId" : "3ff086f21fdc3af601ab211065cbacfe8eafa819",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgDB\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgDB This module defines\r\n\n#\r\n\n# OSGDB_FOUND - Was osgDB found? OSGDB_INCLUDE_DIR - Where to find the\r\n\n# headers OSGDB_LIBRARIES - The libraries to link against for the osgDB\r\n\n# (use this)\r\n\n#\r\n\n# OSGDB_LIBRARY - The osgDB library OSGDB_LIBRARY_DEBUG - The osgDB\r\n\n# debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgDB/DatabasePager>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgFX.cmake" : {
      "ObjectId" : "802078a503e710b79b38d84d90411b2c0096549a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgFX\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgFX This module defines\r\n\n#\r\n\n# OSGFX_FOUND - Was osgFX found? OSGFX_INCLUDE_DIR - Where to find the\r\n\n# headers OSGFX_LIBRARIES - The libraries to link against for the osgFX\r\n\n# (use this)\r\n\n#\r\n\n# OSGFX_LIBRARY - The osgFX library OSGFX_LIBRARY_DEBUG - The osgFX\r\n\n# debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgFX/BumpMapping>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgGA.cmake" : {
      "ObjectId" : "b5c5b493bfb8a887955ea68610cf3205227c5dac",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgGA\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgGA This module defines\r\n\n#\r\n\n# OSGGA_FOUND - Was osgGA found? OSGGA_INCLUDE_DIR - Where to find the\r\n\n# headers OSGGA_LIBRARIES - The libraries to link against for the osgGA\r\n\n# (use this)\r\n\n#\r\n\n# OSGGA_LIBRARY - The osgGA library OSGGA_LIBRARY_DEBUG - The osgGA\r\n\n# debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgGA/FlightManipulator>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgIntrospection.cmake" : {
      "ObjectId" : "155a95e7d2dcba8b146ed2e69fd883dba96f913b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgIntrospection\r\n\n# --------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgINTROSPECTION This module defines\r\n\n#\r\n\n# OSGINTROSPECTION_FOUND - Was osgIntrospection found?\r\n\n# OSGINTROSPECTION_INCLUDE_DIR - Where to find the headers\r\n\n# OSGINTROSPECTION_LIBRARIES - The libraries to link for\r\n\n# osgIntrospection (use this)\r\n\n#\r\n\n# OSGINTROSPECTION_LIBRARY - The osgIntrospection library\r\n\n# OSGINTROSPECTION_LIBRARY_DEBUG - The osgIntrospection debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgIntrospection/Reflection>\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgManipulator.cmake" : {
      "ObjectId" : "c487da9b3d91a8ba29d28b58edc495b5befc7c8c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgManipulator\r\n\n# ------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgManipulator This module defines\r\n\n#\r\n\n# OSGMANIPULATOR_FOUND - Was osgManipulator found?\r\n\n# OSGMANIPULATOR_INCLUDE_DIR - Where to find the headers\r\n\n# OSGMANIPULATOR_LIBRARIES - The libraries to link for osgManipulator\r\n\n# (use this)\r\n\n#\r\n\n# OSGMANIPULATOR_LIBRARY - The osgManipulator library\r\n\n# OSGMANIPULATOR_LIBRARY_DEBUG - The osgManipulator debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgManipulator/TrackballDragger>\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgParticle.cmake" : {
      "ObjectId" : "e8523d5e4d36ebee5f7b6cb98785ccc56a1523e1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgParticle\r\n\n# ---------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgParticle This module defines\r\n\n#\r\n\n# OSGPARTICLE_FOUND - Was osgParticle found? OSGPARTICLE_INCLUDE_DIR -\r\n\n# Where to find the headers OSGPARTICLE_LIBRARIES - The libraries to\r\n\n# link for osgParticle (use this)\r\n\n#\r\n\n# OSGPARTICLE_LIBRARY - The osgParticle library\r\n\n# OSGPARTICLE_LIBRARY_DEBUG - The osgParticle debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgParticle/FireEffect>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgPresentation.cmake" : {
      "ObjectId" : "55953714a327c0029ff635c38efd16e2104751a0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgPresentation\r\n\n# -------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgPresentation This module defines\r\n\n#\r\n\n# OSGPRESENTATION_FOUND - Was osgPresentation found?\r\n\n# OSGPRESENTATION_INCLUDE_DIR - Where to find the headers\r\n\n# OSGPRESENTATION_LIBRARIES - The libraries to link for osgPresentation\r\n\n# (use this)\r\n\n#\r\n\n# OSGPRESENTATION_LIBRARY - The osgPresentation library\r\n\n# OSGPRESENTATION_LIBRARY_DEBUG - The osgPresentation debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.  Modified to work with osgPresentation by Robert\r\n\n# Osfield, January 2012.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgPresentation/SlideEventHandler>\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgProducer.cmake" : {
      "ObjectId" : "190ca8b645235e98746b2617f6649fe8bf330eeb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgProducer\r\n\n# ---------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgProducer This module defines\r\n\n#\r\n\n# OSGPRODUCER_FOUND - Was osgProducer found? OSGPRODUCER_INCLUDE_DIR -\r\n\n# Where to find the headers OSGPRODUCER_LIBRARIES - The libraries to\r\n\n# link for osgProducer (use this)\r\n\n#\r\n\n# OSGPRODUCER_LIBRARY - The osgProducer library\r\n\n# OSGPRODUCER_LIBRARY_DEBUG - The osgProducer debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgProducer/OsgSceneHandler>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgQt.cmake" : {
      "ObjectId" : "32156ad596ca29a7dab4b8a44bda53a878982e05",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgQt\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgQt This module defines\r\n\n#\r\n\n# OSGQT_FOUND - Was osgQt found? OSGQT_INCLUDE_DIR - Where to find the\r\n\n# headers OSGQT_LIBRARIES - The libraries to link for osgQt (use this)\r\n\n#\r\n\n# OSGQT_LIBRARY - The osgQt library OSGQT_LIBRARY_DEBUG - The osgQt\r\n\n# debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.  Modified to work with osgQt by Robert Osfield,\r\n\n# January 2012.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgQt/GraphicsWindowQt>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgShadow.cmake" : {
      "ObjectId" : "5306b860e809a042553a33cd9379933499b420b5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgShadow\r\n\n# -------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgShadow This module defines\r\n\n#\r\n\n# OSGSHADOW_FOUND - Was osgShadow found? OSGSHADOW_INCLUDE_DIR - Where\r\n\n# to find the headers OSGSHADOW_LIBRARIES - The libraries to link for\r\n\n# osgShadow (use this)\r\n\n#\r\n\n# OSGSHADOW_LIBRARY - The osgShadow library OSGSHADOW_LIBRARY_DEBUG -\r\n\n# The osgShadow debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgShadow/ShadowTexture>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgSim.cmake" : {
      "ObjectId" : "2add92f08ed10fa1356461537fe901f9092409ad",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgSim\r\n\n# ----------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgSim This module defines\r\n\n#\r\n\n# OSGSIM_FOUND - Was osgSim found? OSGSIM_INCLUDE_DIR - Where to find\r\n\n# the headers OSGSIM_LIBRARIES - The libraries to link for osgSim (use\r\n\n# this)\r\n\n#\r\n\n# OSGSIM_LIBRARY - The osgSim library OSGSIM_LIBRARY_DEBUG - The osgSim\r\n\n# debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgSim/ImpostorSprite>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgTerrain.cmake" : {
      "ObjectId" : "4f03d01086816b700aa38fca6fc1d0dbee1ea588",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgTerrain\r\n\n# --------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgTerrain This module defines\r\n\n#\r\n\n# OSGTERRAIN_FOUND - Was osgTerrain found? OSGTERRAIN_INCLUDE_DIR -\r\n\n# Where to find the headers OSGTERRAIN_LIBRARIES - The libraries to link\r\n\n# for osgTerrain (use this)\r\n\n#\r\n\n# OSGTERRAIN_LIBRARY - The osgTerrain library OSGTERRAIN_LIBRARY_DEBUG -\r\n\n# The osgTerrain debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgTerrain/Terrain>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgText.cmake" : {
      "ObjectId" : "4aedccbf354d59dfda6d00fdf77b716f42cc7ea2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgText\r\n\n# -----------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgText This module defines\r\n\n#\r\n\n# OSGTEXT_FOUND - Was osgText found? OSGTEXT_INCLUDE_DIR - Where to find\r\n\n# the headers OSGTEXT_LIBRARIES - The libraries to link for osgText (use\r\n\n# this)\r\n\n#\r\n\n# OSGTEXT_LIBRARY - The osgText library OSGTEXT_LIBRARY_DEBUG - The\r\n\n# osgText debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgText/Text>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgUtil.cmake" : {
      "ObjectId" : "ae28e0779830659e29de7628dc2bce8359cdadd3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgUtil\r\n\n# -----------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgUtil This module defines\r\n\n#\r\n\n# OSGUTIL_FOUND - Was osgUtil found? OSGUTIL_INCLUDE_DIR - Where to find\r\n\n# the headers OSGUTIL_LIBRARIES - The libraries to link for osgUtil (use\r\n\n# this)\r\n\n#\r\n\n# OSGUTIL_LIBRARY - The osgUtil library OSGUTIL_LIBRARY_DEBUG - The\r\n\n# osgUtil debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgUtil/SceneView>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgViewer.cmake" : {
      "ObjectId" : "7a14855fb4bbe3bb732b733d1524f0d781c73a38",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgViewer\r\n\n# -------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgViewer This module defines\r\n\n#\r\n\n# OSGVIEWER_FOUND - Was osgViewer found? OSGVIEWER_INCLUDE_DIR - Where\r\n\n# to find the headers OSGVIEWER_LIBRARIES - The libraries to link for\r\n\n# osgViewer (use this)\r\n\n#\r\n\n# OSGVIEWER_LIBRARY - The osgViewer library OSGVIEWER_LIBRARY_DEBUG -\r\n\n# The osgViewer debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgViewer/Viewer>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgVolume.cmake" : {
      "ObjectId" : "2c93e7f676e54fc76b462280ba2ef4a102dc521a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgVolume\r\n\n# -------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgVolume This module defines\r\n\n#\r\n\n# OSGVOLUME_FOUND - Was osgVolume found? OSGVOLUME_INCLUDE_DIR - Where\r\n\n# to find the headers OSGVOLUME_LIBRARIES - The libraries to link for\r\n\n# osgVolume (use this)\r\n\n#\r\n\n# OSGVOLUME_LIBRARY - The osgVolume library OSGVOLUME_LIBRARY_DEBUG -\r\n\n# The osgVolume debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# Created by Eric Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgVolume/Volume>\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindosgWidget.cmake" : {
      "ObjectId" : "71216ad25bccde2efb1f860fdaf2eef05bcda601",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindosgWidget\r\n\n# -------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This is part of the Findosg* suite used to find OpenSceneGraph\r\n\n# components.  Each component is separate and you must opt in to each\r\n\n# module.  You must also opt into OpenGL and OpenThreads (and Producer\r\n\n# if needed) as these modules won't do it for you.  This is to allow you\r\n\n# control over your own system piece by piece in case you need to opt\r\n\n# out of certain components or change the Find behavior for a particular\r\n\n# module (perhaps because the default FindOpenGL.cmake module doesn't\r\n\n# work with your system as an example).  If you want to use a more\r\n\n# convenient module that includes everything, use the\r\n\n# FindOpenSceneGraph.cmake instead of the Findosg*.cmake modules.\r\n\n#\r\n\n# Locate osgWidget This module defines\r\n\n#\r\n\n# OSGWIDGET_FOUND - Was osgWidget found? OSGWIDGET_INCLUDE_DIR - Where\r\n\n# to find the headers OSGWIDGET_LIBRARIES - The libraries to link for\r\n\n# osgWidget (use this)\r\n\n#\r\n\n# OSGWIDGET_LIBRARY - The osgWidget library OSGWIDGET_LIBRARY_DEBUG -\r\n\n# The osgWidget debug library\r\n\n#\r\n\n# $OSGDIR is an environment variable that would correspond to the\r\n\n# ./configure --prefix=$OSGDIR used in building osg.\r\n\n#\r\n\n# FindosgWidget.cmake tweaked from Findosg* suite as created by Eric\r\n\n# Wing.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files are presumed to be included like\r\n\n# #include <osg/PositionAttitudeTransform>\r\n\n# #include <osgWidget/Widget>\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Findosg_functions.cmake" : {
      "ObjectId" : "a8708663d845d389942ec9d2b092393bface6ca4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# Findosg_functions\r\n\n# -----------------\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n# This CMake file contains two macros to assist with searching for OSG\r\n\n# libraries and nodekits.  Please see FindOpenSceneGraph.cmake for full\r\n\n# documentation.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# OSG_FIND_PATH\r\n\n#\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Try the user's environment request before anything else.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Fink\r\n",
        "Line" : 33,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 34,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 35,
        "CharPositionInLine" : 21
      },
      "7" : {
        "Text" : "#\r\n\n# OSG_FIND_LIBRARY\r\n\n#\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Fink\r\n",
        "Line" : 59,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 60,
        "CharPositionInLine" : 23
      },
      "10" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 61,
        "CharPositionInLine" : 21
      },
      "11" : {
        "Text" : "# Fink\r\n",
        "Line" : 77,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "# DarwinPorts\r\n",
        "Line" : 78,
        "CharPositionInLine" : 23
      },
      "13" : {
        "Text" : "# Blastwave\r\n",
        "Line" : 79,
        "CharPositionInLine" : 21
      },
      "14" : {
        "Text" : "# They don't have a debug library\r\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# They really have a FOO_LIBRARY_DEBUG\r\n",
        "Line" : 89,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#\r\n\n# OSG_MARK_AS_ADVANCED\r\n\n# Just a convenience function for calling MARK_AS_ADVANCED\r\n\n#\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindwxWidgets.cmake" : {
      "ObjectId" : "9953aa9a556a9020bdd3be4e2eaba93a926c83e6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindwxWidgets\r\n\n# -------------\r\n\n#\r\n\n# Find a wxWidgets (a.k.a., wxWindows) installation.\r\n\n#\r\n\n# This module finds if wxWidgets is installed and selects a default\r\n\n# configuration to use.  wxWidgets is a modular library.  To specify the\r\n\n# modules that you will use, you need to name them as components to the\r\n\n# package:\r\n\n#\r\n\n# find_package(wxWidgets COMPONENTS core base ...)\r\n\n#\r\n\n# There are two search branches: a windows style and a unix style.  For\r\n\n# windows, the following variables are searched for and set to defaults\r\n\n# in case of multiple choices.  Change them if the defaults are not\r\n\n# desired (i.e., these are the only variables you should change to\r\n\n# select a configuration):\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   wxWidgets_ROOT_DIR      - Base wxWidgets directory\r\n\n#                             (e.g., C:/wxWidgets-2.6.3).\r\n\n#   wxWidgets_LIB_DIR       - Path to wxWidgets libraries\r\n\n#                             (e.g., C:/wxWidgets-2.6.3/lib/vc_lib).\r\n\n#   wxWidgets_CONFIGURATION - Configuration to use\r\n\n#                             (e.g., msw, mswd, mswu, mswunivud, etc.)\r\n\n#   wxWidgets_EXCLUDE_COMMON_LIBRARIES\r\n\n#                           - Set to TRUE to exclude linking of\r\n\n#                             commonly required libs (e.g., png tiff\r\n\n#                             jpeg zlib regex expat).\r\n\n#\r\n\n#\r\n\n#\r\n\n# For unix style it uses the wx-config utility.  You can select between\r\n\n# debug/release, unicode/ansi, universal/non-universal, and\r\n\n# static/shared in the QtDialog or ccmake interfaces by turning ON/OFF\r\n\n# the following variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   wxWidgets_USE_DEBUG\r\n\n#   wxWidgets_USE_UNICODE\r\n\n#   wxWidgets_USE_UNIVERSAL\r\n\n#   wxWidgets_USE_STATIC\r\n\n#\r\n\n#\r\n\n#\r\n\n# There is also a wxWidgets_CONFIG_OPTIONS variable for all other\r\n\n# options that need to be passed to the wx-config utility.  For example,\r\n\n# to use the base toolkit found in the /usr/local path, set the variable\r\n\n# (before calling the FIND_PACKAGE command) as such:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   set(wxWidgets_CONFIG_OPTIONS --toolkit=base --prefix=/usr)\r\n\n#\r\n\n#\r\n\n#\r\n\n# The following are set after the configuration is done for both windows\r\n\n# and unix style:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   wxWidgets_FOUND            - Set to TRUE if wxWidgets was found.\r\n\n#   wxWidgets_INCLUDE_DIRS     - Include directories for WIN32\r\n\n#                                i.e., where to find \"wx/wx.h\" and\r\n\n#                                \"wx/setup.h\"; possibly empty for unices.\r\n\n#   wxWidgets_LIBRARIES        - Path to the wxWidgets libraries.\r\n\n#   wxWidgets_LIBRARY_DIRS     - compile time link dirs, useful for\r\n\n#                                rpath on UNIX. Typically an empty string\r\n\n#                                in WIN32 environment.\r\n\n#   wxWidgets_DEFINITIONS      - Contains defines required to compile/link\r\n\n#                                against WX, e.g. WXUSINGDLL\r\n\n#   wxWidgets_DEFINITIONS_DEBUG- Contains defines required to compile/link\r\n\n#                                against WX debug builds, e.g. __WXDEBUG__\r\n\n#   wxWidgets_CXX_FLAGS        - Include dirs and compiler flags for\r\n\n#                                unices, empty on WIN32. Essentially\r\n\n#                                \"`wx-config --cxxflags`\".\r\n\n#   wxWidgets_USE_FILE         - Convenience include file.\r\n\n#\r\n\n#\r\n\n#\r\n\n# Sample usage:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    # Note that for MinGW users the order of libs is important!\r\n\n#    find_package(wxWidgets COMPONENTS net gl core base)\r\n\n#    if(wxWidgets_FOUND)\r\n\n#      include(${wxWidgets_USE_FILE})\r\n\n#      # and for each of your dependent executable/library targets:\r\n\n#      target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\r\n\n#    endif()\r\n\n#\r\n\n#\r\n\n#\r\n\n# If wxWidgets is required (i.e., not an optional part):\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    find_package(wxWidgets REQUIRED net gl core base)\r\n\n#    include(${wxWidgets_USE_FILE})\r\n\n#    # and for each of your dependent executable/library targets:\r\n\n#    target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# FIXME: check this and provide a correct sample usage...\r\n\n#        Remember to connect back to the upper text.\r\n\n# Sample usage with monolithic wx build:\r\n\n#\r\n\n#   find_package(wxWidgets COMPONENTS mono)\r\n\n#   ...\r\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTES\r\n\n#\r\n\n# This module has been tested on the WIN32 platform with wxWidgets\r\n\n# 2.6.2, 2.6.3, and 2.5.3. However, it has been designed to\r\n\n# easily extend support to all possible builds, e.g., static/shared,\r\n\n# debug/release, unicode, universal, multilib/monolithic, etc..\r\n\n#\r\n\n# If you want to use the module and your build type is not supported\r\n\n# out-of-the-box, please contact me to exchange information on how\r\n\n# your system is setup and I'll try to add support for it.\r\n\n#\r\n\n# AUTHOR\r\n\n#\r\n\n# Miguel A. Figueroa-Villanueva (miguelf at ieee dot org).\r\n\n# Jan Woetzel (jw at mip.informatik.uni-kiel.de).\r\n\n#\r\n\n# Based on previous works of:\r\n\n# Jan Woetzel (FindwxWindows.cmake),\r\n\n# Jorgen Bodde and Jerry Fath (FindwxWin.cmake).\r\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO/ideas\r\n\n#\r\n\n# (1) Option/Setting to use all available wx libs\r\n\n# In contrast to expert developer who lists the\r\n\n# minimal set of required libs in wxWidgets_USE_LIBS\r\n\n# there is the newbie user:\r\n\n#   - who just wants to link against WX with more 'magic'\r\n\n#   - doesn't know the internal structure of WX or how it was built,\r\n\n#     in particular if it is monolithic or not\r\n\n#   - want to link against all available WX libs\r\n\n# Basically, the intent here is to mimic what wx-config would do by\r\n\n# default (i.e., `wx-config --libs`).\r\n\n#\r\n\n# Possible solution:\r\n\n#   Add a reserved keyword \"std\" that initializes to what wx-config\r\n\n# would default to. If the user has not set the wxWidgets_USE_LIBS,\r\n\n# default to \"std\" instead of \"base core\" as it is now. To implement\r\n\n# \"std\" will basically boil down to a FOR_EACH lib-FOUND, but maybe\r\n\n# checking whether a minimal set was found.\r\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FIXME: This and all the DBG_MSG calls should be removed after the\r\n\n# module stabilizes.\r\n\n#\r\n\n# Helper macro to control the debugging output globally. There are\r\n\n# two versions for controlling how verbose your output should be.\r\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#  message(STATUS\r\n\n#    \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\r\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  message(STATUS\r\n\n#    \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Clear return values in case the module is loaded more than once.\r\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# DEPRECATED: This is a patch to support the DEPRECATED use of\r\n\n# wxWidgets_USE_LIBS.\r\n\n#\r\n\n# If wxWidgets_USE_LIBS is set:\r\n\n# - if using <components>, then override wxWidgets_USE_LIBS\r\n\n# - else set wxWidgets_FIND_COMPONENTS to wxWidgets_USE_LIBS\r\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add the convenience use file if available.\r\n\n#\r\n\n# Get dir of this file which may reside in:\r\n\n# - CMAKE_MAKE_ROOT/Modules on CMake installation\r\n\n# - CMAKE_MODULE_PATH if user prefers his own specialized version\r\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Prefer an existing customized version, but the user might override\r\n\n# the FindwxWidgets module and not the UsewxWidgets one.\r\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#=====================================================================\r\n\n# Determine whether unix or win32 paths should be used\r\n\n#=====================================================================\r\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#=====================================================================\r\n\n# WIN32_FIND_STYLE\r\n\n#=====================================================================\r\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Useful common wx libs needed by almost all components.\r\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# DEPRECATED: Use find_package(wxWidgets COMPONENTS mono) instead.\r\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# this is default\r\n",
        "Line" : 229,
        "CharPositionInLine" : 47
      },
      "17" : {
        "Text" : "# Add the common (usually required libs) unless\r\n\n# wxWidgets_EXCLUDE_COMMON_LIBRARIES has been set.\r\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# WIN32: Helper MACROS\r\n\n#-------------------------------------------------------------------\r\n\n#\r\n\n# Get filename components for a configuration. For example,\r\n\n#   if _CONFIGURATION = mswunivud, then _UNV=univ, _UCD=u _DBG=d\r\n\n#   if _CONFIGURATION = mswu,      then _UNV=\"\",   _UCD=u _DBG=\"\"\r\n\n#\r\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#\r\n\n# Find libraries associated to a configuration.\r\n\n#\r\n",
        "Line" : 257,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# FIXME: What if both regex libs are available. regex should be\r\n\n# found outside the loop and only wx${LIB}${_UCD}${_DBG}.\r\n\n# Find wxWidgets common libraries.\r\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# for regex\r\n",
        "Line" : 271,
        "CharPositionInLine" : 31
      },
      "22" : {
        "Text" : "# Find wxWidgets multilib base libraries.\r\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Find wxWidgets monolithic library.\r\n",
        "Line" : 309,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Find wxWidgets multilib libraries.\r\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#\r\n\n# Clear all library paths, so that FIND_LIBRARY refinds them.\r\n\n#\r\n\n# Clear a lib, reset its found flag, and mark as advanced.\r\n",
        "Line" : 343,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clear all debug or release library paths (arguments are \"d\" or \"\").\r\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Clear wxWidgets common libraries.\r\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Clear wxWidgets multilib base libraries.\r\n",
        "Line" : 359,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Clear wxWidgets monolithic library.\r\n",
        "Line" : 365,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Clear wxWidgets multilib libraries.\r\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Clear all wxWidgets debug libraries.\r\n",
        "Line" : 374,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Clear all wxWidgets release libraries.\r\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#\r\n\n# Set the wxWidgets_LIBRARIES variable.\r\n\n# Also, Sets output variable wxWidgets_FOUND to FALSE if it fails.\r\n\n#\r\n",
        "Line" : 383,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# WIN32: Start actual work.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Look for an installation tree.\r\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# WX 2.6.x\r\n",
        "Line" : 439,
        "CharPositionInLine" : 123
      },
      "37" : {
        "Text" : "# If wxWidgets_ROOT_DIR changed, clear lib dir.\r\n",
        "Line" : 482,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Select one default tree inside the already determined wx tree.\r\n\n# Prefer static/shared order usually consistent with build\r\n\n# settings.\r\n",
        "Line" : 491,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# prefer shared\r\n\n# prefer shared\r\n",
        "Line" : 530,
        "CharPositionInLine" : 70
      },
      "40" : {
        "Text" : "# prefer static\r\n\n# prefer static\r\n",
        "Line" : 549,
        "CharPositionInLine" : 70
      },
      "41" : {
        "Text" : "# If wxWidgets_LIB_DIR changed, clear all libraries.\r\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# If building shared libs, define WXUSINGDLL to use dllimport.\r\n",
        "Line" : 569,
        "CharPositionInLine" : 6
      },
      "43" : {
        "Text" : "# Search for available configuration types.\r\n",
        "Line" : 575,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# If the selected configuration wasn't found force the default\r\n\n# one. Otherwise, use it but still force a refresh for\r\n\n# updating the doc string with the current list of available\r\n\n# configurations.\r\n",
        "Line" : 589,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# If release config selected, and both release/debug exist.\r\n",
        "Line" : 601,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "# If the option exists (already in cache), force it false.\r\n",
        "Line" : 607,
        "CharPositionInLine" : 10
      },
      "47" : {
        "Text" : "# Get configuration parameters from the name.\r\n",
        "Line" : 615,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# Set wxWidgets lib setup include directory.\r\n",
        "Line" : 618,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# Set wxWidgets main include directory.\r\n",
        "Line" : 627,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "# Find wxWidgets libraries.\r\n",
        "Line" : 635,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# Settings for requested libs (i.e., include dir, libraries, etc.).\r\n",
        "Line" : 641,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# Add necessary definitions for unicode builds\r\n",
        "Line" : 644,
        "CharPositionInLine" : 8
      },
      "53" : {
        "Text" : "# Add necessary definitions for debug builds\r\n",
        "Line" : 649,
        "CharPositionInLine" : 8
      },
      "54" : {
        "Text" : "#=====================================================================\r\n\n# UNIX_FIND_STYLE\r\n\n#=====================================================================\r\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#-----------------------------------------------------------------\r\n\n# UNIX: Helper MACROS\r\n\n#-----------------------------------------------------------------\r\n\n#\r\n\n# Set the default values based on \"wx-config --selected-config\".\r\n\n#\r\n",
        "Line" : 661,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "#\r\n\n# Query a boolean configuration option to determine if the system\r\n\n# has both builds available. If so, provide the selection option\r\n\n# to the user.\r\n\n#\r\n",
        "Line" : 691,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# If option exists (already in cache), force to available one.\r\n",
        "Line" : 716,
        "CharPositionInLine" : 8
      },
      "58" : {
        "Text" : "#\r\n\n# Set wxWidgets_SELECT_OPTIONS to wx-config options for selecting\r\n\n# among multiple builds.\r\n\n#\r\n",
        "Line" : 727,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "#-----------------------------------------------------------------\r\n\n# UNIX: Start actual work.\r\n\n#-----------------------------------------------------------------\r\n\n# Support cross-compiling, only search in the target platform.\r\n",
        "Line" : 745,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# get defaults based on \"wx-config --selected-config\"\r\n",
        "Line" : 758,
        "CharPositionInLine" : 6
      },
      "61" : {
        "Text" : "# for each option: if both builds are available, provide option\r\n",
        "Line" : 761,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : "# process selection to set wxWidgets_SELECT_OPTIONS\r\n",
        "Line" : 767,
        "CharPositionInLine" : 6
      },
      "63" : {
        "Text" : "# run the wx-config program to get cxxflags\r\n",
        "Line" : 771,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# parse definitions from cxxflags;\r\n\n#   drop -D* from CXXFLAGS and the -D prefix\r\n",
        "Line" : 785,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "# parse include dirs from cxxflags; drop -I prefix\r\n",
        "Line" : 796,
        "CharPositionInLine" : 8
      },
      "66" : {
        "Text" : "# run the wx-config program to get the libs\r\n\n# - NOTE: wx-config doesn't verify that the libs requested exist\r\n\n#         it just produces the names. Maybe a TRY_COMPILE would\r\n\n#         be useful here...\r\n",
        "Line" : 814,
        "CharPositionInLine" : 6
      },
      "67" : {
        "Text" : "# extract linkdirs (-L) for rpath (i.e., LINK_DIRECTORIES)\r\n",
        "Line" : 837,
        "CharPositionInLine" : 8
      },
      "68" : {
        "Text" : "# When using wx-config in MSYS, the include paths are UNIX style paths which may or may\r\n\n# not work correctly depending on you MSYS/MinGW configuration.  CMake expects native\r\n\n# paths internally.\r\n",
        "Line" : 852,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "#=====================================================================\r\n\n# Neither UNIX_FIND_STYLE, nor WIN32_FIND_STYLE\r\n\n#=====================================================================\r\n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Check if a specfic version was requested by find_package().\r\n",
        "Line" : 896,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Debug output:\r\n",
        "Line" : 918,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#=====================================================================\r\n\n#=====================================================================\r\n",
        "Line" : 926,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#=====================================================================\r\n\n# Macros for use in wxWidgets apps.\r\n\n# - This module will not fail to find wxWidgets based on the code\r\n\n#   below. Hence, it's required to check for validity of:\r\n\n#\r\n\n# wxWidgets_wxrc_EXECUTABLE\r\n\n#=====================================================================\r\n",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Resource file compiler.\r\n",
        "Line" : 944,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "#\r\n\n# WX_SPLIT_ARGUMENTS_ON(<keyword> <left> <right> <arg1> <arg2> ...)\r\n\n#\r\n\n# Sets <left> and <right> to contain arguments to the left and right,\r\n\n# respectively, of <keyword>.\r\n\n#\r\n\n# Example usage:\r\n\n#  function(WXWIDGETS_ADD_RESOURCES outfiles)\r\n\n#    WX_SPLIT_ARGUMENTS_ON(OPTIONS wxrc_files wxrc_options ${ARGN})\r\n\n#    ...\r\n\n#  endfunction()\r\n\n#\r\n\n#  WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o file.C)\r\n\n#\r\n\n# NOTE: This is a generic piece of code that should be renamed to\r\n\n# SPLIT_ARGUMENTS_ON and put in a file serving the same purpose as\r\n\n# FindPackageStandardArgs.cmake. At the time of this writing\r\n\n# FindQt4.cmake has a QT4_EXTRACT_OPTIONS, which I basically copied\r\n\n# here a bit more generalized. So, there are already two find modules\r\n\n# using this approach.\r\n\n#\r\n",
        "Line" : 950,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# FIXME: Document that the input variables will be cleared.\r\n\n#list(APPEND ${_leftvar}  \"\")\r\n\n#list(APPEND ${_rightvar} \"\")\r\n",
        "Line" : 972,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "#\r\n\n# WX_GET_DEPENDENCIES_FROM_XML(\r\n\n#   <depends>\r\n\n#   <match_pattern>\r\n\n#   <clean_pattern>\r\n\n#   <xml_contents>\r\n\n#   <depends_path>\r\n\n#   )\r\n\n#\r\n\n# FIXME: Add documentation here...\r\n\n#\r\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# make the file have an absolute path\r\n",
        "Line" : 1022,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# append file to dependency list\r\n",
        "Line" : 1027,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "#\r\n\n# WXWIDGETS_ADD_RESOURCES(<sources> <xrc_files>\r\n\n#                         OPTIONS <options> [NO_CPP_CODE])\r\n\n#\r\n\n# Adds a custom command for resource file compilation of the\r\n\n# <xrc_files> and appends the output files to <sources>.\r\n\n#\r\n\n# Example usages:\r\n\n#   WXWIDGETS_ADD_RESOURCES(sources xrc/main_frame.xrc)\r\n\n#   WXWIDGETS_ADD_RESOURCES(sources ${xrc_files} OPTIONS -e -o altname.cxx)\r\n\n#\r\n",
        "Line" : 1034,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Parse files for dependencies.\r\n",
        "Line" : 1048,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# All files have absolute paths or paths relative to the location\r\n\n# of the rc file.\r\n",
        "Line" : 1057,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# get bitmap/bitmap2 files\r\n",
        "Line" : 1061,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# get url files\r\n",
        "Line" : 1070,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# get wxIcon files\r\n",
        "Line" : 1079,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "#\r\n\n# Parse options.\r\n\n#\r\n\n# If NO_CPP_CODE option specified, then produce .xrs file rather\r\n\n# than a .cpp file (i.e., don't add the default --cpp-code option).\r\n",
        "Line" : 1089,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# wxrc's default output filename for cpp code.\r\n",
        "Line" : 1097,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# wxrc's default output filename for xrs file.\r\n",
        "Line" : 1101,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# Get output name for use in ADD_CUSTOM_COMMAND.\r\n\n# - short option scanning\r\n",
        "Line" : 1105,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "#list(REMOVE_AT rc_options ${index} ${filename_index})\r\n",
        "Line" : 1111,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# - long option scanning\r\n",
        "Line" : 1113,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "#string(REGEX REPLACE \"--output=[^;]*;?\" \"\" rc_options \"${rc_options}\")\r\n\n#string(REGEX REPLACE \";$\" \"\" rc_options \"${rc_options}\")\r\n",
        "Line" : 1118,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Add generated header to output file list.\r\n",
        "Line" : 1130,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Add generated file to output file list.\r\n",
        "Line" : 1142,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 95
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FindwxWindows.cmake" : {
      "ObjectId" : "dd16348c34a2c82a870cce8a3af3b9a592beba3d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# FindwxWindows\r\n\n# -------------\r\n\n#\r\n\n# Find wxWindows (wxWidgets) installation\r\n\n#\r\n\n# This module finds if wxWindows/wxWidgets is installed and determines\r\n\n# where the include files and libraries are.  It also determines what\r\n\n# the name of the library is.  Please note this file is DEPRECATED and\r\n\n# replaced by FindwxWidgets.cmake.  This code sets the following\r\n\n# variables:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   WXWINDOWS_FOUND     = system has WxWindows\r\n\n#   WXWINDOWS_LIBRARIES = path to the wxWindows libraries\r\n\n#                         on Unix/Linux with additional\r\n\n#                         linker flags from\r\n\n#                         \"wx-config --libs\"\r\n\n#   CMAKE_WXWINDOWS_CXX_FLAGS  = Compiler flags for wxWindows,\r\n\n#                                essentially \"`wx-config --cxxflags`\"\r\n\n#                                on Linux\r\n\n#   WXWINDOWS_INCLUDE_DIR      = where to find \"wx/wx.h\" and \"wx/setup.h\"\r\n\n#   WXWINDOWS_LINK_DIRECTORIES = link directories, useful for rpath on\r\n\n#                                 Unix\r\n\n#   WXWINDOWS_DEFINITIONS      = extra defines\r\n\n#\r\n\n#\r\n\n#\r\n\n# OPTIONS If you need OpenGL support please\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   set(WXWINDOWS_USE_GL 1)\r\n\n#\r\n\n# in your CMakeLists.txt *before* you include this file.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   HAVE_ISYSTEM      - true required to replace -I by -isystem on g++\r\n\n#\r\n\n#\r\n\n#\r\n\n# For convenience include Use_wxWindows.cmake in your project's\r\n\n# CMakeLists.txt using\r\n\n# include(${CMAKE_CURRENT_LIST_DIR}/Use_wxWindows.cmake).\r\n\n#\r\n\n# USAGE\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   set(WXWINDOWS_USE_GL 1)\r\n\n#   find_package(wxWindows)\r\n\n#\r\n\n#\r\n\n#\r\n\n# NOTES wxWidgets 2.6.x is supported for monolithic builds e.g.\r\n\n# compiled in wx/build/msw dir as:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   nmake -f makefile.vc BUILD=debug SHARED=0 USE_OPENGL=1 MONOLITHIC=1\r\n\n#\r\n\n#\r\n\n#\r\n\n# DEPRECATED\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_WX_CAN_COMPILE\r\n\n#   WXWINDOWS_LIBRARY\r\n\n#   CMAKE_WX_CXX_FLAGS\r\n\n#   WXWINDOWS_INCLUDE_PATH\r\n\n#\r\n\n#\r\n\n#\r\n\n# AUTHOR Jan Woetzel <http://www.mip.informatik.uni-kiel.de/~jw>\r\n\n# (07/2003-01/2006)\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ------------------------------------------------------------------\r\n\n#\r\n\n# -removed OPTION for CMAKE_WXWINDOWS_USE_GL. Force the developer to SET it before calling this.\r\n\n# -major update for wx 2.6.2 and monolithic build option. (10/2005)\r\n\n#\r\n\n# STATUS\r\n\n# tested with:\r\n\n#  cmake 1.6.7, Linux (Suse 7.3), wxWindows 2.4.0, gcc 2.95\r\n\n#  cmake 1.6.7, Linux (Suse 8.2), wxWindows 2.4.0, gcc 3.3\r\n\n#  cmake 1.6.7, Linux (Suse 8.2), wxWindows 2.4.1-patch1,  gcc 3.3\r\n\n#  cmake 1.6.7, MS Windows XP home, wxWindows 2.4.1, MS Visual Studio .net 7 2002 (static build)\r\n\n#  cmake 2.0.5 on Windows XP and Suse Linux 9.2\r\n\n#  cmake 2.0.6 on Windows XP and Suse Linux 9.2, wxWidgets 2.6.2 MONOLITHIC build\r\n\n#  cmake 2.2.2 on Windows XP, MS Visual Studio .net 2003 7.1 wxWidgets 2.6.2 MONOLITHIC build\r\n\n#\r\n\n# TODO\r\n\n#  -OPTION for unicode builds\r\n\n#  -further testing of DLL linking under MS WIN32\r\n\n#  -better support for non-monolithic builds\r\n\n#\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ######################################################################\r\n\n##\r\n\n## Windows specific:\r\n\n##\r\n\n## candidates for root/base directory of wxwindows\r\n\n## should have subdirs include and lib containing include/wx/wx.h\r\n\n## fix the root dir to avoid mixing of headers/libs from different\r\n\n## versions/builds:\r\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "## WX supports monolithic and multiple smaller libs (since 2.5.x), we prefer monolithic for now.\r\n\n## monolithic = WX is built as a single big library\r\n\n## e.g. compile on WIN32 as  \"nmake -f makefile.vc MONOLITHIC=1 BUILD=debug SHARED=0 USE_OPENGL=1\" (JW)\r\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "## GL libs used?\r\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "## avoid mixing of headers and libs between multiple installed WX versions,\r\n\n## select just one tree here:\r\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "## WX 2.6.x\r\n\n## WX 2.4.x\r\n",
        "Line" : 144,
        "CharPositionInLine" : 123
      },
      "8" : {
        "Text" : "# message(\"DBG found WXWINDOWS_ROOT_DIR: ${WXWINDOWS_ROOT_DIR}\")\r\n",
        "Line" : 154,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "## find libs for combination of static/shared with release/debug\r\n\n## be careful if you add something here,\r\n\n## avoid mixing of headers and libs of different wx versions,\r\n\n## there may be multiple WX versions installed.\r\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## monolithic?\r\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "##\r\n\n## required for WXWINDOWS_USE_GL\r\n\n## gl lib is always build separate:\r\n\n##\r\n",
        "Line" : 197,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## untested:\r\n",
        "Line" : 288,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "## WX is built as multiple small pieces libraries instead of monolithic\r\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "## DEPECATED (jw) replaced by more general WXWINDOWS_USE_MONOLITHIC ON/OFF\r\n\n# option(WXWINDOWS_SEPARATE_LIBS_BUILD \"Is wxWindows build with separate libs?\" OFF)\r\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "## HACK: This is very dirty.\r\n\n## because the libs of a particular version are explicitly listed\r\n\n## and NOT searched/verified.\r\n\n## TODO:  Really search for each lib, then decide for\r\n\n## monolithic x debug x shared x GL (=16 combinations) for at least 18 libs\r\n\n## -->  about 288 combinations\r\n\n## thus we need a different approach so solve this correctly ...\r\n",
        "Line" : 310,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "## HACK: feed in to optimized / debug libraries if both were FOUND.\r\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "##\r\n\n## now we should have found all WX libs available on the system.\r\n\n## let the user decide which of the available onse to use.\r\n\n##\r\n",
        "Line" : 370,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "## if there is at least one shared lib available\r\n\n## let user choose whether to use shared or static wxwindows libs\r\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "## default value OFF because wxWindows MSVS default build is static\r\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "## add system libraries wxwindows always seems to depend on\r\n",
        "Line" : 384,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "##  these ones dont seem required, in particular  ctl3d32 is not neccesary (Jan Woetzel 07/2003)\r\n\n#   ctl3d32\r\n",
        "Line" : 393,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "## opengl/glu: TODO/FIXME: better use FindOpenGL.cmake here\r\n\n## assume release versions of glu an dopengl, here.\r\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "##\r\n\n## select between use of  shared or static wxWindows lib then set libs to use\r\n\n## for debug and optimized build.  so the user can switch between debug and\r\n\n## release build e.g. within MS Visual Studio without running cmake with a\r\n\n## different build directory again.\r\n\n##\r\n\n## then add the build specific include dir for wx/setup.h\r\n\n##\r\n",
        "Line" : 411,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "##message(\"DBG wxWindows use shared lib selected.\")\r\n\n## assume that both builds use the same setup(.h) for simplicity\r\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "## shared: both wx (debug and release) found?\r\n\n## assume that both builds use the same setup(.h) for simplicity\r\n",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "##message(\"DBG wx shared: debug and optimized found.\")\r\n",
        "Line" : 427,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "## shared: only debug wx lib found?\r\n",
        "Line" : 443,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "##message(\"DBG wx shared: debug (but no optimized) found.\")\r\n",
        "Line" : 446,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "## shared: only release wx lib found?\r\n",
        "Line" : 459,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "##message(\"DBG wx shared: optimized (but no debug) found.\")\r\n",
        "Line" : 462,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "## shared: none found?\r\n",
        "Line" : 475,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#########################################################################################\r\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "##jw: DEPRECATED if(NOT WXWINDOWS_SEPARATE_LIBS_BUILD)\r\n",
        "Line" : 486,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "## static: both wx (debug and release) found?\r\n\n## assume that both builds use the same setup(.h) for simplicity\r\n",
        "Line" : 488,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "##message(\"DBG wx static: debug and optimized found.\")\r\n",
        "Line" : 491,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "## static: only debug wx lib found?\r\n",
        "Line" : 507,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "##message(\"DBG wx static: debug (but no optimized) found.\")\r\n",
        "Line" : 510,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "## static: only release wx lib found?\r\n",
        "Line" : 523,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "##message(\"DBG wx static: optimized (but no debug) found.\")\r\n",
        "Line" : 526,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "## static: none found?\r\n",
        "Line" : 539,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "## not neccessary in wxWindows 2.4.1 and 2.6.2\r\n\n## but it may fix a previous bug, see\r\n\n## http://lists.wxwindows.org/cgi-bin/ezmlm-cgi?8:mss:37574:200305:mpdioeneabobmgjenoap\r\n",
        "Line" : 549,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# clear:\r\n",
        "Line" : 557,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "## Find the include directories for wxwindows\r\n\n## the first, build specific for wx/setup.h was determined before.\r\n\n## add inc dir for general for \"wx/wx.h\"\r\n",
        "Line" : 563,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "## append the build specific include dir for wx/setup.h:\r\n",
        "Line" : 568,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "## ######################################################################\r\n\n##\r\n\n## UNIX/Linux specific:\r\n\n##\r\n\n## use backquoted wx-config to query and set flags and libs:\r\n\n## 06/2003 Jan Woetzel\r\n\n##\r\n",
        "Line" : 603,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# JW removed option and force the develper th SET it.\r\n\n# option(WXWINDOWS_USE_GL \"use wxWindows with GL support (use additional\r\n\n# --gl-libs for wx-config)?\" OFF)\r\n",
        "Line" : 614,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# wx-config should be in your path anyhow, usually no need to set WXWIN or\r\n\n# search in ../wx or ../../wx\r\n",
        "Line" : 618,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# check whether wx-config was found:\r\n",
        "Line" : 628,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# use shared/static wx lib?\r\n\n# remember: always link shared to use systems GL etc. libs (no static\r\n\n# linking, just link *against* static .a libs)\r\n",
        "Line" : 631,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# do we need additionial wx GL stuff like GLCanvas ?\r\n",
        "Line" : 640,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "##message(\"DBG: WX_CONFIG_ARGS_LIBS=${WX_CONFIG_ARGS_LIBS}===\")\r\n",
        "Line" : 644,
        "CharPositionInLine" : 6
      },
      "52" : {
        "Text" : "# set CXXFLAGS to be fed into CMAKE_CXX_FLAGS by the user:\r\n",
        "Line" : 646,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "# does the compiler support -isystem ?\r\n",
        "Line" : 647,
        "CharPositionInLine" : 24
      },
      "54" : {
        "Text" : "# -isystem seem sto be unsuppored on Mac\r\n",
        "Line" : 648,
        "CharPositionInLine" : 29
      },
      "55" : {
        "Text" : "##message(\"DBG: for compilation:\r\n\n##CMAKE_WXWINDOWS_CXX_FLAGS=${CMAKE_WXWINDOWS_CXX_FLAGS}===\")\r\n",
        "Line" : 658,
        "CharPositionInLine" : 6
      },
      "56" : {
        "Text" : "# keep the back-quoted string for clarity\r\n",
        "Line" : 661,
        "CharPositionInLine" : 6
      },
      "57" : {
        "Text" : "##message(\"DBG2: for linking:\r\n\n##WXWINDOWS_LIBRARIES=${WXWINDOWS_LIBRARIES}===\")\r\n",
        "Line" : 663,
        "CharPositionInLine" : 6
      },
      "58" : {
        "Text" : "# evaluate wx-config output to separate linker flags and linkdirs for\r\n\n# rpath:\r\n",
        "Line" : 666,
        "CharPositionInLine" : 6
      },
      "59" : {
        "Text" : "## extract linkdirs (-L) for rpath\r\n\n## use regular expression to match wildcard equivalent \"-L*<endchar>\"\r\n\n## with <endchar> is a space or a semicolon\r\n",
        "Line" : 672,
        "CharPositionInLine" : 6
      },
      "60" : {
        "Text" : "# message(\"DBG  WXWINDOWS_LINK_DIRECTORIES_WITH_PREFIX=${WXWINDOWS_LINK_DIRECTORIES_WITH_PREFIX}\")\r\n",
        "Line" : 676,
        "CharPositionInLine" : 6
      },
      "61" : {
        "Text" : "## remove prefix -L because we need the pure directory for LINK_DIRECTORIES\r\n\n## replace -L by ; because the separator seems to be lost otherwise (bug or\r\n\n## feature?)\r\n",
        "Line" : 678,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : "# message(\"DBG  WXWINDOWS_LINK_DIRECTORIES=${WXWINDOWS_LINK_DIRECTORIES}\")\r\n",
        "Line" : 683,
        "CharPositionInLine" : 8
      },
      "63" : {
        "Text" : "## replace space separated string by semicolon separated vector to make it\r\n\n## work with LINK_DIRECTORIES\r\n",
        "Line" : 687,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "## we really need wx-config...\r\n",
        "Line" : 699,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "## found all we need.\r\n",
        "Line" : 715,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "## set deprecated variables for backward compatibility:\r\n",
        "Line" : 718,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 67
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FortranCInterface.cmake" : {
      "ObjectId" : "da70b33e62e14d92703bf91ed4a47d60315c5ef4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\r\nFortranCInterface\r\n-----------------\r\n\r\nFortran/C Interface Detection\r\n\r\nThis module automatically detects the API by which C and Fortran\r\nlanguages interact.\r\n\r\nModule Variables\r\n^^^^^^^^^^^^^^^^\r\n\r\nVariables that indicate if the mangling is found:\r\n\r\n``FortranCInterface_GLOBAL_FOUND``\r\n  Global subroutines and functions.\r\n\r\n``FortranCInterface_MODULE_FOUND``\r\n  Module subroutines and functions (declared by \"MODULE PROCEDURE\").\r\n\r\nThis module also provides the following variables to specify\r\nthe detected mangling, though a typical use case does not need\r\nto reference them and can use the `Module Functions`_ below.\r\n\r\n``FortranCInterface_GLOBAL_PREFIX``\r\n  Prefix for a global symbol without an underscore.\r\n\r\n``FortranCInterface_GLOBAL_SUFFIX``\r\n  Suffix for a global symbol without an underscore.\r\n\r\n``FortranCInterface_GLOBAL_CASE``\r\n  The case for a global symbol without an underscore,\r\n  either ``UPPER`` or ``LOWER``.\r\n\r\n``FortranCInterface_GLOBAL__PREFIX``\r\n  Prefix for a global symbol with an underscore.\r\n\r\n``FortranCInterface_GLOBAL__SUFFIX``\r\n  Suffix for a global symbol with an underscore.\r\n\r\n``FortranCInterface_GLOBAL__CASE``\r\n  The case for a global symbol with an underscore,\r\n  either ``UPPER`` or ``LOWER``.\r\n\r\n``FortranCInterface_MODULE_PREFIX``\r\n  Prefix for a module symbol without an underscore.\r\n\r\n``FortranCInterface_MODULE_MIDDLE``\r\n  Middle of a module symbol without an underscore that appears\r\n  between the name of the module and the name of the symbol.\r\n\r\n``FortranCInterface_MODULE_SUFFIX``\r\n  Suffix for a module symbol without an underscore.\r\n\r\n``FortranCInterface_MODULE_CASE``\r\n  The case for a module symbol without an underscore,\r\n  either ``UPPER`` or ``LOWER``.\r\n\r\n``FortranCInterface_MODULE__PREFIX``\r\n  Prefix for a module symbol with an underscore.\r\n\r\n``FortranCInterface_MODULE__MIDDLE``\r\n  Middle of a module symbol with an underscore that appears\r\n  between the name of the module and the name of the symbol.\r\n\r\n``FortranCInterface_MODULE__SUFFIX``\r\n  Suffix for a module symbol with an underscore.\r\n\r\n``FortranCInterface_MODULE__CASE``\r\n  The case for a module symbol with an underscore,\r\n  either ``UPPER`` or ``LOWER``.\r\n\r\nModule Functions\r\n^^^^^^^^^^^^^^^^\r\n\r\n.. command:: FortranCInterface_HEADER\r\n\r\n  The ``FortranCInterface_HEADER`` function is provided to generate a\r\n  C header file containing macros to mangle symbol names::\r\n\r\n    FortranCInterface_HEADER(<file>\r\n                             [MACRO_NAMESPACE <macro-ns>]\r\n                             [SYMBOL_NAMESPACE <ns>]\r\n                             [SYMBOLS [<module>:]<function> ...])\r\n\r\n  It generates in ``<file>`` definitions of the following macros::\r\n\r\n     #define FortranCInterface_GLOBAL (name,NAME) ...\r\n     #define FortranCInterface_GLOBAL_(name,NAME) ...\r\n     #define FortranCInterface_MODULE (mod,name, MOD,NAME) ...\r\n     #define FortranCInterface_MODULE_(mod,name, MOD,NAME) ...\r\n\r\n  These macros mangle four categories of Fortran symbols, respectively:\r\n\r\n  * Global symbols without '_': ``call mysub()``\r\n  * Global symbols with '_'   : ``call my_sub()``\r\n  * Module symbols without '_': ``use mymod; call mysub()``\r\n  * Module symbols with '_'   : ``use mymod; call my_sub()``\r\n\r\n  If mangling for a category is not known, its macro is left undefined.\r\n  All macros require raw names in both lower case and upper case.\r\n\r\n  The options are:\r\n\r\n  ``MACRO_NAMESPACE``\r\n    Replace the default ``FortranCInterface_`` prefix with a given\r\n    namespace ``<macro-ns>``.\r\n\r\n  ``SYMBOLS``\r\n    List symbols to mangle automatically with C preprocessor definitions::\r\n\r\n      <function>          ==> #define <ns><function> ...\r\n      <module>:<function> ==> #define <ns><module>_<function> ...\r\n\r\n    If the mangling for some symbol is not known then no preprocessor\r\n    definition is created, and a warning is displayed.\r\n\r\n  ``SYMBOL_NAMESPACE``\r\n    Prefix all preprocessor definitions generated by the ``SYMBOLS``\r\n    option with a given namespace ``<ns>``.\r\n\r\n.. command:: FortranCInterface_VERIFY\r\n\r\n  The ``FortranCInterface_VERIFY`` function is provided to verify\r\n  that the Fortran and C/C++ compilers work together::\r\n\r\n    FortranCInterface_VERIFY([CXX] [QUIET])\r\n\r\n  It tests whether a simple test executable using Fortran and C (and C++\r\n  when the CXX option is given) compiles and links successfully.  The\r\n  result is stored in the cache entry ``FortranCInterface_VERIFIED_C``\r\n  (or ``FortranCInterface_VERIFIED_CXX`` if ``CXX`` is given) as a boolean.\r\n  If the check fails and ``QUIET`` is not given the function terminates with a\r\n  fatal error message describing the problem.  The purpose of this check\r\n  is to stop a build early for incompatible compiler combinations.  The\r\n  test is built in the ``Release`` configuration.\r\n\r\nExample Usage\r\n^^^^^^^^^^^^^\r\n\r\n.. code-block:: cmake\r\n\r\n   include(FortranCInterface)\r\n   FortranCInterface_HEADER(FC.h MACRO_NAMESPACE \"FC_\")\r\n\r\nThis creates a \"FC.h\" header that defines mangling macros ``FC_GLOBAL()``,\r\n``FC_GLOBAL_()``, ``FC_MODULE()``, and ``FC_MODULE_()``.\r\n\r\n.. code-block:: cmake\r\n\r\n   include(FortranCInterface)\r\n   FortranCInterface_HEADER(FCMangle.h\r\n                            MACRO_NAMESPACE \"FC_\"\r\n                            SYMBOL_NAMESPACE \"FC_\"\r\n                            SYMBOLS mysub mymod:my_sub)\r\n\r\nThis creates a \"FCMangle.h\" header that defines the same ``FC_*()``\r\nmangling macros as the previous example plus preprocessor symbols\r\n``FC_mysub`` and ``FC_mymod_my_sub``.\r\n\r\nAdditional Manglings\r\n^^^^^^^^^^^^^^^^^^^^\r\n\r\nFortranCInterface is aware of possible ``GLOBAL`` and ``MODULE`` manglings\r\nfor many Fortran compilers, but it also provides an interface to specify\r\nnew possible manglings.  Set the variables::\r\n\r\n   FortranCInterface_GLOBAL_SYMBOLS\r\n   FortranCInterface_MODULE_SYMBOLS\r\n\r\nbefore including FortranCInterface to specify manglings of the symbols\r\n``MySub``, ``My_Sub``, ``MyModule:MySub``, and ``My_Module:My_Sub``.\r\nFor example, the code:\r\n\r\n.. code-block:: cmake\r\n\r\n   set(FortranCInterface_GLOBAL_SYMBOLS mysub_ my_sub__ MYSUB_)\r\n     #                                  ^^^^^  ^^^^^^   ^^^^^\r\n   set(FortranCInterface_MODULE_SYMBOLS\r\n       __mymodule_MOD_mysub __my_module_MOD_my_sub)\r\n     #   ^^^^^^^^     ^^^^^   ^^^^^^^^^     ^^^^^^\r\n   include(FortranCInterface)\r\n\r\ntells FortranCInterface to try given ``GLOBAL`` and ``MODULE`` manglings.\r\n(The carets point at raw symbol names for clarity in this example but\r\nare not needed.)\r\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Execute at most once in a project.\r\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Verify that C and Fortran are available.\r\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# MinGW's make tool does not always like () in the path\r\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create the interface detection project if it does not exist.\r\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Load the detection results.\r\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Parse arguments.\r\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Generate macro definitions.\r\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Generate symbol mangling definitions.\r\n",
        "Line" : 270,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Module symbol name.  Parse \"<module>:<function>\" syntax.\r\n",
        "Line" : 279,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Global symbol name.\r\n",
        "Line" : 298,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Store the content.\r\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Check arguments.\r\n",
        "Line" : 319,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Build the verification project if not yet built.\r\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Build a sample project which reports symbols.\r\n",
        "Line" : 346,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# project name\r\n\n# target name\r\n",
        "Line" : 351,
        "CharPositionInLine" : 21
      },
      "19" : {
        "Text" : "# Report results.\r\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Error if compilers are incompatible.\r\n",
        "Line" : 379,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Restore including context policies.\r\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FortranCInterface/CMakeLists.txt" : {
      "ObjectId" : "3480ffea46be4bb40c39dddc4ff04e5815ed4da8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if the C compiler supports '$' in identifiers.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# List manglings of global symbol names to try.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VisualAge\r\n\n# GNU, Intel, HP, SunPro, MIPSpro\r\n\n# GNU g77\r\n\n# Intel on Windows\r\n\n# VisualAge\r\n\n# GNU, Intel, HP, SunPro, MIPSpro\r\n\n# Intel on Windows\r\n",
        "Line" : 17,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# List manglings of module symbol names to try.\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# GNU 4.3\r\n\n# VisualAge\r\n\n# GNU 4.2\r\n\n# GNU 4.3\r\n\n# VisualAge\r\n\n# GNU 4.2\r\n\n# HP\r\n\n# Intel\r\n\n# Intel on Windows\r\n\n# PGI\r\n\n# NAG\r\n\n# HP\r\n\n# Intel\r\n\n# Intel on Windows\r\n\n# PGI\r\n\n# NAG\r\n",
        "Line" : 30,
        "CharPositionInLine" : 26
      },
      "6" : {
        "Text" : "# Note that some compiler manglings cannot be invoked from C:\r\n\n#   MIPSpro uses \"MY_SUB.in.MY_MODULE\"\r\n\n#   SunPro uses \"my_module.my_sub_\"\r\n\n#   PathScale uses \"MY_SUB.in.MY_MODULE\"\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add module symbols only with Fortran90.\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate C symbol sources.\r\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Provide mymodule_ and my_module_ init symbols because:\r\n\n#  - PGI Fortran uses module init symbols\r\n\n# but not for:\r\n\n#  - PathScale Fortran uses module init symbols but module symbols\r\n\n#    use '.in.' so we cannot provide them anyway.\r\n\n#  - Cray Fortran >= 7.3.2 uses module init symbols but module symbols\r\n\n#    use 'mysub$mymodule_' so we cannot provide them anyway.\r\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Skip symbols with '$' if C cannot handle them.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Provide symbols through Fortran.\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Provide symbols through C but fall back to Fortran.\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# In case the Fortran compiler produces PIC by default make sure\r\n\n# the C compiler produces PIC even if it is not its default.\r\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Require symbols through Fortran.\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FortranCInterface/Detect.cmake" : {
      "ObjectId" : "06aa92b8f3b9b342366a4ca478a9ff661d1f3245",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect the Fortran/C interface on the first run or when the\r\n\n# configuration changes.\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Invalidate verification results.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build a sample project which reports symbols.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# project name\r\n\n# target name\r\n",
        "Line" : 33,
        "CharPositionInLine" : 20
      },
      "5" : {
        "Text" : "# Locate the sample project executable.\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Load symbols from INFO:symbol[] strings in the executable.\r\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Parse the symbol names.\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Look for global symbols.\r\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Look for module symbols.\r\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Construct mangling macro definitions.\r\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Summarize what is available.\r\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Record the detection results.\r\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Report the results.\r\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/FortranCInterface/Verify/CMakeLists.txt" : {
      "ObjectId" : "c590e334f32c500ea7428a38f1de9d95fe2d7f95",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The entry point (main) is defined in C; link with the C compiler.\r\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/GNUInstallDirs.cmake" : {
      "ObjectId" : "4b9db510e77c569597a3e46ad777f5c5f5154872",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# GNUInstallDirs\r\n\n# --------------\r\n\n#\r\n\n# Define GNU standard installation directories\r\n\n#\r\n\n# Provides install directory variables as defined by the\r\n\n# `GNU Coding Standards`_.\r\n\n#\r\n\n# .. _`GNU Coding Standards`: https://www.gnu.org/prep/standards/html_node/Directory-Variables.html\r\n\n#\r\n\n# Result Variables\r\n\n# ^^^^^^^^^^^^^^^^\r\n\n#\r\n\n# Inclusion of this module defines the following variables:\r\n\n#\r\n\n# ``CMAKE_INSTALL_<dir>``\r\n\n#\r\n\n#   Destination for files of a given type.  This value may be passed to\r\n\n#   the ``DESTINATION`` options of :command:`install` commands for the\r\n\n#   corresponding file type.\r\n\n#\r\n\n# ``CMAKE_INSTALL_FULL_<dir>``\r\n\n#\r\n\n#   The absolute path generated from the corresponding ``CMAKE_INSTALL_<dir>``\r\n\n#   value.  If the value is not already an absolute path, an absolute path\r\n\n#   is constructed typically by prepending the value of the\r\n\n#   :variable:`CMAKE_INSTALL_PREFIX` variable.  However, there are some\r\n\n#   `special cases`_ as documented below.\r\n\n#\r\n\n# where ``<dir>`` is one of:\r\n\n#\r\n\n# ``BINDIR``\r\n\n#   user executables (``bin``)\r\n\n# ``SBINDIR``\r\n\n#   system admin executables (``sbin``)\r\n\n# ``LIBEXECDIR``\r\n\n#   program executables (``libexec``)\r\n\n# ``SYSCONFDIR``\r\n\n#   read-only single-machine data (``etc``)\r\n\n# ``SHAREDSTATEDIR``\r\n\n#   modifiable architecture-independent data (``com``)\r\n\n# ``LOCALSTATEDIR``\r\n\n#   modifiable single-machine data (``var``)\r\n\n# ``LIBDIR``\r\n\n#   object code libraries (``lib`` or ``lib64``\r\n\n#   or ``lib/<multiarch-tuple>`` on Debian)\r\n\n# ``INCLUDEDIR``\r\n\n#   C header files (``include``)\r\n\n# ``OLDINCLUDEDIR``\r\n\n#   C header files for non-gcc (``/usr/include``)\r\n\n# ``DATAROOTDIR``\r\n\n#   read-only architecture-independent data root (``share``)\r\n\n# ``DATADIR``\r\n\n#   read-only architecture-independent data (``DATAROOTDIR``)\r\n\n# ``INFODIR``\r\n\n#   info documentation (``DATAROOTDIR/info``)\r\n\n# ``LOCALEDIR``\r\n\n#   locale-dependent data (``DATAROOTDIR/locale``)\r\n\n# ``MANDIR``\r\n\n#   man documentation (``DATAROOTDIR/man``)\r\n\n# ``DOCDIR``\r\n\n#   documentation root (``DATAROOTDIR/doc/PROJECT_NAME``)\r\n\n#\r\n\n# If the includer does not define a value the above-shown default will be\r\n\n# used and the value will appear in the cache for editing by the user.\r\n\n#\r\n\n# Special Cases\r\n\n# ^^^^^^^^^^^^^\r\n\n#\r\n\n# The following values of :variable:`CMAKE_INSTALL_PREFIX` are special:\r\n\n#\r\n\n# ``/``\r\n\n#\r\n\n#   For ``<dir>`` other than the ``SYSCONFDIR`` and ``LOCALSTATEDIR``,\r\n\n#   the value of ``CMAKE_INSTALL_<dir>`` is prefixed with ``usr/`` if\r\n\n#   it is not user-specified as an absolute path.  For example, the\r\n\n#   ``INCLUDEDIR`` value ``include`` becomes ``usr/include``.\r\n\n#   This is required by the `GNU Coding Standards`_, which state:\r\n\n#\r\n\n#     When building the complete GNU system, the prefix will be empty\r\n\n#     and ``/usr`` will be a symbolic link to ``/``.\r\n\n#\r\n\n# ``/usr``\r\n\n#\r\n\n#   For ``<dir>`` equal to ``SYSCONFDIR`` or ``LOCALSTATEDIR``, the\r\n\n#   ``CMAKE_INSTALL_FULL_<dir>`` is computed by prepending just ``/``\r\n\n#   to the value of ``CMAKE_INSTALL_<dir>`` if it is not user-specified\r\n\n#   as an absolute path.  For example, the ``SYSCONFDIR`` value ``etc``\r\n\n#   becomes ``/etc``.  This is required by the `GNU Coding Standards`_.\r\n\n#\r\n\n# ``/opt/...``\r\n\n#\r\n\n#   For ``<dir>`` equal to ``SYSCONFDIR`` or ``LOCALSTATEDIR``, the\r\n\n#   ``CMAKE_INSTALL_FULL_<dir>`` is computed by *appending* the prefix\r\n\n#   to the value of ``CMAKE_INSTALL_<dir>`` if it is not user-specified\r\n\n#   as an absolute path.  For example, the ``SYSCONFDIR`` value ``etc``\r\n\n#   becomes ``/etc/opt/...``.  This is defined by the\r\n\n#   `Filesystem Hierarchy Standard`_.\r\n\n#\r\n\n# .. _`Filesystem Hierarchy Standard`: https://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html\r\n\n#\r\n\n# Macros\r\n\n# ^^^^^^\r\n\n#\r\n\n# .. command:: GNUInstallDirs_get_absolute_install_dir\r\n\n#\r\n\n#   ::\r\n\n#\r\n\n#     GNUInstallDirs_get_absolute_install_dir(absvar var)\r\n\n#\r\n\n#   Set the given variable ``absvar`` to the absolute path contained\r\n\n#   within the variable ``var``.  This is to allow the computation of an\r\n\n#   absolute path, accounting for all the special cases documented\r\n\n#   above.  While this macro is used to compute the various\r\n\n#   ``CMAKE_INSTALL_FULL_<dir>`` variables, it is exposed publicly to\r\n\n#   allow users who create additional path variables to also compute\r\n\n#   absolute paths where necessary, using the same logic.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Convert a cache variable to PATH type\r\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create a cache variable with default for a path.\r\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create a cache variable with not default for a path, with a fallback\r\n\n# when unset; used for entries slaved to other entries such as\r\n\n# DATAROOTDIR.\r\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Installation directories\r\n\n#\r\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We check if the variable was manually set and not cached, in order to\r\n\n# allow projects to set the values as normal variables before including\r\n\n# GNUInstallDirs to avoid having the entries cached or user-editable. It\r\n\n# replaces the \"if(NOT DEFINED CMAKE_INSTALL_XXX)\" checks in all the\r\n\n# other cases.\r\n\n# If CMAKE_INSTALL_LIBDIR is defined, if _libdir_set is false, then the\r\n\n# variable is a normal one, otherwise it is a cache one.\r\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If CMAKE_INSTALL_LIBDIR is not defined, it is always executed.\r\n\n# Otherwise:\r\n\n#  * if _libdir_set is false it is not executed (meaning that it is\r\n\n#    not a cache variable)\r\n\n#  * if _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX is not defined it is\r\n\n#    not executed\r\n\n#  * if _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX and\r\n\n#    CMAKE_INSTALL_PREFIX are the same string it is not executed.\r\n\n#    _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX is updated after the\r\n\n#    execution, of this part of code, therefore at the next inclusion\r\n\n#    of the file, CMAKE_INSTALL_LIBDIR is defined, and the 2 strings\r\n\n#    are equal, meaning that the if is not executed the code the\r\n\n#    second time.\r\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Override this default 'lib' with 'lib64' iff:\r\n\n#  - we are on Linux system but NOT cross-compiling\r\n\n#  - we are NOT on debian\r\n\n#  - we are on a 64 bits system\r\n\n# reason is: amd64 ABI: http://www.x86-64.org/documentation/abi.pdf\r\n\n# For Debian with multiarch, use 'lib/${CMAKE_LIBRARY_ARCHITECTURE}' if\r\n\n# CMAKE_LIBRARY_ARCHITECTURE is set (which contains e.g. \"i386-linux-gnu\"\r\n\n# and CMAKE_INSTALL_PREFIX is \"/usr\"\r\n\n# See http://wiki.debian.org/Multiarch\r\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# __LAST_LIBDIR_DEFAULT is the default value that we compute from\r\n\n# _GNUInstallDirs_LAST_CMAKE_INSTALL_PREFIX, not a cache entry for\r\n\n# the value that was last used as the default.\r\n\n# This value is used to figure out whether the user changed the\r\n\n# CMAKE_INSTALL_LIBDIR value manually, or if the value was the\r\n\n# default one. When CMAKE_INSTALL_PREFIX changes, the value is\r\n\n# updated to the new default, unless the user explicitly changed it.\r\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# is this a debian system ?\r\n",
        "Line" : 219,
        "CharPositionInLine" : 38
      },
      "11" : {
        "Text" : "# not debian, rely on CMAKE_SIZEOF_VOID_P:\r\n",
        "Line" : 229,
        "CharPositionInLine" : 11
      },
      "12" : {
        "Text" : "# Save for next run\r\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n\n# Values whose defaults are relative to DATAROOTDIR.  Store empty values in\r\n\n# the cache and store the defaults in local variables if the cache values are\r\n\n# not set explicitly.  This auto-updates the defaults as DATAROOTDIR changes.\r\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------\r\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Handle special cases:\r\n\n# - CMAKE_INSTALL_PREFIX == /\r\n\n# - CMAKE_INSTALL_PREFIX == /usr\r\n\n# - CMAKE_INSTALL_PREFIX == /opt/...\r\n",
        "Line" : 312,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Result directories\r\n\n#\r\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/GenerateExportHeader.cmake" : {
      "ObjectId" : "a041aef539a1a37effb45b50c87075f17808de92",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# GenerateExportHeader\r\n\n# --------------------\r\n\n#\r\n\n# Function for generation of export macros for libraries\r\n\n#\r\n\n# This module provides the function GENERATE_EXPORT_HEADER().\r\n\n#\r\n\n# The ``GENERATE_EXPORT_HEADER`` function can be used to generate a file\r\n\n# suitable for preprocessor inclusion which contains EXPORT macros to be\r\n\n# used in library classes::\r\n\n#\r\n\n#    GENERATE_EXPORT_HEADER( LIBRARY_TARGET\r\n\n#              [BASE_NAME <base_name>]\r\n\n#              [EXPORT_MACRO_NAME <export_macro_name>]\r\n\n#              [EXPORT_FILE_NAME <export_file_name>]\r\n\n#              [DEPRECATED_MACRO_NAME <deprecated_macro_name>]\r\n\n#              [NO_EXPORT_MACRO_NAME <no_export_macro_name>]\r\n\n#              [STATIC_DEFINE <static_define>]\r\n\n#              [NO_DEPRECATED_MACRO_NAME <no_deprecated_macro_name>]\r\n\n#              [DEFINE_NO_DEPRECATED]\r\n\n#              [PREFIX_NAME <prefix_name>]\r\n\n#              [CUSTOM_CONTENT_FROM_VARIABLE <variable>]\r\n\n#    )\r\n\n#\r\n\n#\r\n\n# The target properties :prop_tgt:`CXX_VISIBILITY_PRESET <<LANG>_VISIBILITY_PRESET>`\r\n\n# and :prop_tgt:`VISIBILITY_INLINES_HIDDEN` can be used to add the appropriate\r\n\n# compile flags for targets.  See the documentation of those target properties,\r\n\n# and the convenience variables\r\n\n# :variable:`CMAKE_CXX_VISIBILITY_PRESET <CMAKE_<LANG>_VISIBILITY_PRESET>` and\r\n\n# :variable:`CMAKE_VISIBILITY_INLINES_HIDDEN`.\r\n\n#\r\n\n# By default ``GENERATE_EXPORT_HEADER()`` generates macro names in a file\r\n\n# name determined by the name of the library.  This means that in the\r\n\n# simplest case, users of ``GenerateExportHeader`` will be equivalent to:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    set(CMAKE_CXX_VISIBILITY_PRESET hidden)\r\n\n#    set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\r\n\n#    add_library(somelib someclass.cpp)\r\n\n#    generate_export_header(somelib)\r\n\n#    install(TARGETS somelib DESTINATION ${LIBRARY_INSTALL_DIR})\r\n\n#    install(FILES\r\n\n#     someclass.h\r\n\n#     ${PROJECT_BINARY_DIR}/somelib_export.h DESTINATION ${INCLUDE_INSTALL_DIR}\r\n\n#    )\r\n\n#\r\n\n#\r\n\n# And in the ABI header files:\r\n\n#\r\n\n# .. code-block:: c++\r\n\n#\r\n\n#    #include \"somelib_export.h\"\r\n\n#    class SOMELIB_EXPORT SomeClass {\r\n\n#      ...\r\n\n#    };\r\n\n#\r\n\n#\r\n\n# The CMake fragment will generate a file in the\r\n\n# ``${CMAKE_CURRENT_BINARY_DIR}`` called ``somelib_export.h`` containing the\r\n\n# macros ``SOMELIB_EXPORT``, ``SOMELIB_NO_EXPORT``, ``SOMELIB_DEPRECATED``,\r\n\n# ``SOMELIB_DEPRECATED_EXPORT`` and ``SOMELIB_DEPRECATED_NO_EXPORT``.\r\n\n# They will be followed by content taken from the variable specified by\r\n\n# the ``CUSTOM_CONTENT_FROM_VARIABLE`` option, if any.\r\n\n# The resulting file should be installed with other headers in the library.\r\n\n#\r\n\n# The ``BASE_NAME`` argument can be used to override the file name and the\r\n\n# names used for the macros:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    add_library(somelib someclass.cpp)\r\n\n#    generate_export_header(somelib\r\n\n#      BASE_NAME other_name\r\n\n#    )\r\n\n#\r\n\n#\r\n\n# Generates a file called ``other_name_export.h`` containing the macros\r\n\n# ``OTHER_NAME_EXPORT``, ``OTHER_NAME_NO_EXPORT`` and ``OTHER_NAME_DEPRECATED``\r\n\n# etc.\r\n\n#\r\n\n# The ``BASE_NAME`` may be overridden by specifying other options in the\r\n\n# function.  For example:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    add_library(somelib someclass.cpp)\r\n\n#    generate_export_header(somelib\r\n\n#      EXPORT_MACRO_NAME OTHER_NAME_EXPORT\r\n\n#    )\r\n\n#\r\n\n#\r\n\n# creates the macro ``OTHER_NAME_EXPORT`` instead of ``SOMELIB_EXPORT``, but\r\n\n# other macros and the generated file name is as default:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    add_library(somelib someclass.cpp)\r\n\n#    generate_export_header(somelib\r\n\n#      DEPRECATED_MACRO_NAME KDE_DEPRECATED\r\n\n#    )\r\n\n#\r\n\n#\r\n\n# creates the macro ``KDE_DEPRECATED`` instead of ``SOMELIB_DEPRECATED``.\r\n\n#\r\n\n# If ``LIBRARY_TARGET`` is a static library, macros are defined without\r\n\n# values.\r\n\n#\r\n\n# If the same sources are used to create both a shared and a static\r\n\n# library, the uppercased symbol ``${BASE_NAME}_STATIC_DEFINE`` should be\r\n\n# used when building the static library:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    add_library(shared_variant SHARED ${lib_SRCS})\r\n\n#    add_library(static_variant ${lib_SRCS})\r\n\n#    generate_export_header(shared_variant BASE_NAME libshared_and_static)\r\n\n#    set_target_properties(static_variant PROPERTIES\r\n\n#      COMPILE_FLAGS -DLIBSHARED_AND_STATIC_STATIC_DEFINE)\r\n\n#\r\n\n# This will cause the export macros to expand to nothing when building\r\n\n# the static library.\r\n\n#\r\n\n# If ``DEFINE_NO_DEPRECATED`` is specified, then a macro\r\n\n# ``${BASE_NAME}_NO_DEPRECATED`` will be defined This macro can be used to\r\n\n# remove deprecated code from preprocessor output:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    option(EXCLUDE_DEPRECATED \"Exclude deprecated parts of the library\" FALSE)\r\n\n#    if (EXCLUDE_DEPRECATED)\r\n\n#      set(NO_BUILD_DEPRECATED DEFINE_NO_DEPRECATED)\r\n\n#    endif()\r\n\n#    generate_export_header(somelib ${NO_BUILD_DEPRECATED})\r\n\n#\r\n\n#\r\n\n# And then in somelib:\r\n\n#\r\n\n# .. code-block:: c++\r\n\n#\r\n\n#    class SOMELIB_EXPORT SomeClass\r\n\n#    {\r\n\n#    public:\r\n\n#    #ifndef SOMELIB_NO_DEPRECATED\r\n\n#      SOMELIB_DEPRECATED void oldMethod();\r\n\n#    #endif\r\n\n#    };\r\n\n#\r\n\n# .. code-block:: c++\r\n\n#\r\n\n#    #ifndef SOMELIB_NO_DEPRECATED\r\n\n#    void SomeClass::oldMethod() {  }\r\n\n#    #endif\r\n\n#\r\n\n#\r\n\n# If ``PREFIX_NAME`` is specified, the argument will be used as a prefix to\r\n\n# all generated macros.\r\n\n#\r\n\n# For example:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    generate_export_header(somelib PREFIX_NAME VTK_)\r\n\n#\r\n\n# Generates the macros ``VTK_SOMELIB_EXPORT`` etc.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    ADD_COMPILER_EXPORT_FLAGS( [<output_variable>] )\r\n\n#\r\n\n# The ``ADD_COMPILER_EXPORT_FLAGS`` function adds ``-fvisibility=hidden`` to\r\n\n# :variable:`CMAKE_CXX_FLAGS <CMAKE_<LANG>_FLAGS>` if supported, and is a no-op\r\n\n# on Windows which does not need extra compiler flags for exporting support.\r\n\n# You may optionally pass a single argument to ``ADD_COMPILER_EXPORT_FLAGS``\r\n\n# that will be populated with the ``CXX_FLAGS`` required to enable visibility\r\n\n# support for the compiler/architecture in use.\r\n\n#\r\n\n# This function is deprecated.  Set the target properties\r\n\n# :prop_tgt:`CXX_VISIBILITY_PRESET <<LANG>_VISIBILITY_PRESET>` and\r\n\n# :prop_tgt:`VISIBILITY_INLINES_HIDDEN` instead.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Install this macro separately?\r\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Exclude XL here because it misinterprets -fvisibility=hidden even though\r\n\n# the check_cxx_compiler_flag passes\r\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# NOTE:  Some Embarcadero compilers silently compile __declspec(deprecated)\r\n\n# without error, but this is not a documented feature and the attribute does\r\n\n# not actually generate any warnings.\r\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Option overrides\r\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Default options\r\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Just return if there are no flags to add.\r\n",
        "Line" : 392,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Either return the extra flags needed in the supplied argument, or to the\r\n\n# CMAKE_CXX_FLAGS if no argument is supplied.\r\n",
        "Line" : 402,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/GetPrerequisites.cmake" : {
      "ObjectId" : "a713a0fecfaf44759d5046981527277763155fe5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# GetPrerequisites\r\n\n# ----------------\r\n\n#\r\n\n# Functions to analyze and list executable file prerequisites.\r\n\n#\r\n\n# This module provides functions to list the .dll, .dylib or .so files\r\n\n# that an executable or shared library file depends on.  (Its\r\n\n# prerequisites.)\r\n\n#\r\n\n# It uses various tools to obtain the list of required shared library\r\n\n# files:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    dumpbin (Windows)\r\n\n#    objdump (MinGW on Windows)\r\n\n#    ldd (Linux/Unix)\r\n\n#    otool (Mac OSX)\r\n\n#\r\n\n# The following functions are provided by this module:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    get_prerequisites\r\n\n#    list_prerequisites\r\n\n#    list_prerequisites_by_glob\r\n\n#    gp_append_unique\r\n\n#    is_file_executable\r\n\n#    gp_item_default_embedded_path\r\n\n#      (projects can override with gp_item_default_embedded_path_override)\r\n\n#    gp_resolve_item\r\n\n#      (projects can override with gp_resolve_item_override)\r\n\n#    gp_resolved_file_type\r\n\n#      (projects can override with gp_resolved_file_type_override)\r\n\n#    gp_file_type\r\n\n#\r\n\n# Requires CMake 2.6 or greater because it uses function, break, return\r\n\n# and PARENT_SCOPE.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GET_PREREQUISITES(<target> <prerequisites_var> <exclude_system> <recurse>\r\n\n#                     <exepath> <dirs> [<rpaths>])\r\n\n#\r\n\n# Get the list of shared library files required by <target>.  The list\r\n\n# in the variable named <prerequisites_var> should be empty on first\r\n\n# entry to this function.  On exit, <prerequisites_var> will contain the\r\n\n# list of required shared library files.\r\n\n#\r\n\n# <target> is the full path to an executable file.  <prerequisites_var>\r\n\n# is the name of a CMake variable to contain the results.\r\n\n# <exclude_system> must be 0 or 1 indicating whether to include or\r\n\n# exclude \"system\" prerequisites.  If <recurse> is set to 1 all\r\n\n# prerequisites will be found recursively, if set to 0 only direct\r\n\n# prerequisites are listed.  <exepath> is the path to the top level\r\n\n# executable used for @executable_path replacment on the Mac.  <dirs> is\r\n\n# a list of paths where libraries might be found: these paths are\r\n\n# searched first when a target without any path info is given.  Then\r\n\n# standard system locations are also searched: PATH, Framework\r\n\n# locations, /usr/lib...\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LIST_PREREQUISITES(<target> [<recurse> [<exclude_system> [<verbose>]]])\r\n\n#\r\n\n# Print a message listing the prerequisites of <target>.\r\n\n#\r\n\n# <target> is the name of a shared library or executable target or the\r\n\n# full path to a shared library or executable file.  If <recurse> is set\r\n\n# to 1 all prerequisites will be found recursively, if set to 0 only\r\n\n# direct prerequisites are listed.  <exclude_system> must be 0 or 1\r\n\n# indicating whether to include or exclude \"system\" prerequisites.  With\r\n\n# <verbose> set to 0 only the full path names of the prerequisites are\r\n\n# printed, set to 1 extra informatin will be displayed.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LIST_PREREQUISITES_BY_GLOB(<glob_arg> <glob_exp>)\r\n\n#\r\n\n# Print the prerequisites of shared library and executable files\r\n\n# matching a globbing pattern.  <glob_arg> is GLOB or GLOB_RECURSE and\r\n\n# <glob_exp> is a globbing expression used with \"file(GLOB\" or\r\n\n# \"file(GLOB_RECURSE\" to retrieve a list of matching files.  If a\r\n\n# matching file is executable, its prerequisites are listed.\r\n\n#\r\n\n# Any additional (optional) arguments provided are passed along as the\r\n\n# optional arguments to the list_prerequisites calls.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GP_APPEND_UNIQUE(<list_var> <value>)\r\n\n#\r\n\n# Append <value> to the list variable <list_var> only if the value is\r\n\n# not already in the list.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   IS_FILE_EXECUTABLE(<file> <result_var>)\r\n\n#\r\n\n# Return 1 in <result_var> if <file> is a binary executable, 0\r\n\n# otherwise.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GP_ITEM_DEFAULT_EMBEDDED_PATH(<item> <default_embedded_path_var>)\r\n\n#\r\n\n# Return the path that others should refer to the item by when the item\r\n\n# is embedded inside a bundle.\r\n\n#\r\n\n# Override on a per-project basis by providing a project-specific\r\n\n# gp_item_default_embedded_path_override function.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GP_RESOLVE_ITEM(<context> <item> <exepath> <dirs> <resolved_item_var>\r\n\n#                   [<rpaths>])\r\n\n#\r\n\n# Resolve an item into an existing full path file.\r\n\n#\r\n\n# Override on a per-project basis by providing a project-specific\r\n\n# gp_resolve_item_override function.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GP_RESOLVED_FILE_TYPE(<original_file> <file> <exepath> <dirs> <type_var>\r\n\n#                         [<rpaths>])\r\n\n#\r\n\n# Return the type of <file> with respect to <original_file>.  String\r\n\n# describing type of prerequisite is returned in variable named\r\n\n# <type_var>.\r\n\n#\r\n\n# Use <exepath> and <dirs> if necessary to resolve non-absolute <file>\r\n\n# values -- but only for non-embedded items.\r\n\n#\r\n\n# Possible types are:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    system\r\n\n#    local\r\n\n#    embedded\r\n\n#    other\r\n\n#\r\n\n# Override on a per-project basis by providing a project-specific\r\n\n# gp_resolved_file_type_override function.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   GP_FILE_TYPE(<original_file> <file> <type_var>)\r\n\n#\r\n\n# Return the type of <file> with respect to <original_file>.  String\r\n\n# describing type of prerequisite is returned in variable named\r\n\n# <type_var>.\r\n\n#\r\n\n# Possible types are:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    system\r\n\n#    local\r\n\n#    embedded\r\n\n#    other\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# A file is not executable until proven otherwise:\r\n\n#\r\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If file name ends in .exe on Windows, *assume* executable:\r\n\n#\r\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# A clause could be added here that uses output or return value of dumpbin\r\n\n# to determine ${result_var}. In 99%+? practical cases, the exe name\r\n\n# match will be sufficient...\r\n\n#\r\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Use the information returned from the Unix shell command \"file\" to\r\n\n# determine if ${file_full} should be considered an executable file...\r\n\n#\r\n\n# If the file command's output contains \"executable\" and does *not* contain\r\n\n# \"text\" then it is likely an executable suitable for prerequisite analysis\r\n\n# via the get_prerequisites macro.\r\n\n#\r\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Replace the name of the file in the output with a placeholder token\r\n\n# (the string \" _file_full_ \") so that just in case the path name of\r\n\n# the file contains the word \"text\" or \"executable\" we are not fooled\r\n\n# into thinking \"the wrong thing\" because the file name matches the\r\n\n# other 'file' command output we are looking for...\r\n\n#\r\n",
        "Line" : 231,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#message(STATUS \"file_ov='${file_ov}'\")\r\n",
        "Line" : 240,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#message(STATUS \"executable!\")\r\n",
        "Line" : 242,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#message(STATUS \"but text, so *not* a binary executable!\")\r\n",
        "Line" : 244,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# Also detect position independent executables on Linux,\r\n\n# where \"file\" gives \"shared object ... (uses shared libraries)\"\r\n",
        "Line" : 251,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# \"file\" version 5.22 does not print \"(used shared libraries)\"\r\n\n# but uses \"interpreter\"\r\n",
        "Line" : 258,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# On Windows and Linux, \"embed\" prerequisites in the same directory\r\n\n# as the executable by default:\r\n\n#\r\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# On the Mac, relative to the executable depending on the type\r\n\n# of the thing we are embedding:\r\n\n#\r\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#\r\n\n# The assumption here is that all executables in the bundle will be\r\n\n# in same-level-directories inside the bundle. The parent directory\r\n\n# of an executable inside the bundle should be MacOS or a sibling of\r\n\n# MacOS and all embedded paths returned from here will begin with\r\n\n# \"@executable_path/../\" and will work from all executables in all\r\n\n# such same-level-directories inside the bundle.\r\n\n#\r\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# By default, embed things right next to the main bundle executable:\r\n\n#\r\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Embed .dylibs right next to the main bundle executable:\r\n\n#\r\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Embed frameworks in the embedded \"Frameworks\" directory (sibling of MacOS):\r\n\n#\r\n",
        "Line" : 304,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Provide a hook so that projects can override the default embedded location\r\n\n# of any given library by whatever logic they choose:\r\n\n#\r\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Is it already resolved?\r\n\n#\r\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#\r\n\n# @executable_path references are assumed relative to exepath\r\n\n#\r\n",
        "Line" : 342,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "#message(STATUS \"info: embedded item exists (${ri})\")\r\n",
        "Line" : 349,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "#\r\n\n# @loader_path references are assumed relative to the\r\n\n# PATH of the given \"context\" (presumably another library)\r\n\n#\r\n",
        "Line" : 360,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "#message(STATUS \"info: embedded item exists (${ri})\")\r\n",
        "Line" : 369,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "#\r\n\n# @rpath references are relative to the paths built into the binaries with -rpath\r\n\n# We handle this case like we do for other Unixes\r\n\n#\r\n",
        "Line" : 380,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "#message(STATUS \"info: 'find_file' in exepath/dirs/rpaths (${ri})\")\r\n",
        "Line" : 389,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "#message(STATUS \"info: 'find_file' in exepath/dirs (${ri})\")\r\n",
        "Line" : 403,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "#message(STATUS \"info: 'find_file' found framework (${fw})\")\r\n",
        "Line" : 419,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Using find_program on Windows will find dll files that are in the PATH.\r\n\n# (Converting simple file names into full path names if found.)\r\n\n#\r\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#message(STATUS \"info: 'find_program' in exepath/dirs (${ri})\")\r\n",
        "Line" : 436,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Provide a hook so that projects can override item resolution\r\n\n# by whatever logic they choose:\r\n\n#\r\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "#    message(STATUS \"\r\n\n#******************************************************************************\r\n\n#warning: cannot resolve item '${item}'\r\n\n#\r\n\n#  possible problems:\r\n\n#    need more directories?\r\n\n#    need to use InstallRequiredSystemLibraries?\r\n\n#    run in install tree instead of build tree?\r\n\n#\r\n\n#    context='${context}'\r\n\n#    item='${item}'\r\n\n#    exepath='${exepath}'\r\n\n#    dirs='${dirs}'\r\n\n#    resolved_item_var='${resolved_item_var}'\r\n\n#******************************************************************************\r\n\n#\")\r\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#message(STATUS \"**\")\r\n",
        "Line" : 488,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# canonicalize path\r\n",
        "Line" : 494,
        "CharPositionInLine" : 70
      },
      "34" : {
        "Text" : "# canonicalize path\r\n",
        "Line" : 512,
        "CharPositionInLine" : 72
      },
      "35" : {
        "Text" : "# if cygwin, we can get the properly formed windows paths from cygpath\r\n",
        "Line" : 542,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# Return type string based on computed booleans:\r\n\n#\r\n",
        "Line" : 590,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#message(STATUS \"gp_resolved_file_type: '${file}' '${resolved_file}'\")\r\n\n#message(STATUS \"                type: '${type}'\")\r\n",
        "Line" : 602,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Provide a hook so that projects can override the decision on whether a\r\n\n# library belongs to the system or not by whatever logic they choose:\r\n\n#\r\n",
        "Line" : 615,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#message(STATUS \"**\")\r\n",
        "Line" : 624,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# <setup-gp_tool-vars>\r\n\n#\r\n\n# Try to choose the right tool by default. Caller can set gp_tool prior to\r\n\n# calling this function to force using a different tool.\r\n\n#\r\n",
        "Line" : 690,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# This is how to check for cygwin, har!\r\n",
        "Line" : 702,
        "CharPositionInLine" : 27
      },
      "42" : {
        "Text" : "# Try harder. Maybe we're on MinGW\r\n",
        "Line" : 706,
        "CharPositionInLine" : 13
      },
      "43" : {
        "Text" : "# optional command to pre-filter gp_tool results\r\n",
        "Line" : 719,
        "CharPositionInLine" : 32
      },
      "44" : {
        "Text" : "# objdump generates copious output so we create a grep filter to pre-filter results\r\n",
        "Line" : 745,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# When running dumpbin, it also needs the \"Common7/IDE\" directory in the\r\n\n# PATH. It will already be in the PATH if being run from a Visual Studio\r\n\n# command prompt. Add it to the PATH here in case we are running from a\r\n\n# different command prompt.\r\n\n#\r\n",
        "Line" : 763,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Use cmake paths as a user may have a PATH element ending with a backslash.\r\n\n# This will escape the list delimiter and create havoc!\r\n",
        "Line" : 770,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# only add to the path if it is not already in the path\r\n",
        "Line" : 773,
        "CharPositionInLine" : 6
      },
      "48" : {
        "Text" : "#\r\n\n# </setup-gp_tool-vars>\r\n",
        "Line" : 788,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Track new prerequisites at each new level of recursion. Start with an\r\n\n# empty list at each level:\r\n\n#\r\n",
        "Line" : 801,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Run gp_cmd on the target:\r\n\n#\r\n",
        "Line" : 806,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Exclude delay load dependencies under windows (they are listed in dumpbin output after the message below)\r\n",
        "Line" : 817,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# dumpbin error messages seem to go to stdout\r\n",
        "Line" : 831,
        "CharPositionInLine" : 6
      },
      "53" : {
        "Text" : "# Convert to a list of lines:\r\n\n#\r\n",
        "Line" : 850,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# check for install id and remove it from list, since otool -L can include a\r\n\n# reference to itself\r\n",
        "Line" : 855,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# second line is install name\r\n",
        "Line" : 868,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# trim\r\n",
        "Line" : 871,
        "CharPositionInLine" : 6
      },
      "57" : {
        "Text" : "#message(\"INSTALL ID is \\\"${gp_install_id}\\\"\")\r\n",
        "Line" : 873,
        "CharPositionInLine" : 6
      },
      "58" : {
        "Text" : "# Analyze each line for file names that match the regular expression:\r\n\n#\r\n",
        "Line" : 877,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Extract information from each candidate:\r\n",
        "Line" : 882,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# Use the raw_item as the list entries returned by this function. Use the\r\n\n# gp_resolve_item function to resolve it to an actual full path file if\r\n\n# necessary.\r\n\n#\r\n",
        "Line" : 903,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# Add each item unless it is excluded:\r\n\n#\r\n",
        "Line" : 909,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# If item was really added, this is the first time we have seen it.\r\n\n# Add it to unseen_prereqs so that we can recursively add *its*\r\n\n# prerequisites...\r\n\n#\r\n\n# But first: resolve its name to an absolute full path name such\r\n\n# that the analysis tools can simply accept it as input.\r\n\n#\r\n",
        "Line" : 932,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 63
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/ITKCompatibility.cmake" : {
      "ObjectId" : "90e86af84b11fccb29746bef0f79459bed9d01de",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# work around an old bug in ITK prior to verison 3.0\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/InstallRequiredSystemLibraries.cmake" : {
      "ObjectId" : "5b8b8af9a657f3ff589c184d13cac7c754e34c9a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# InstallRequiredSystemLibraries\r\n\n# ------------------------------\r\n\n#\r\n\n# Include this module to search for compiler-provided system runtime\r\n\n# libraries and add install rules for them.  Some optional variables\r\n\n# may be set prior to including the module to adjust behavior:\r\n\n#\r\n\n# ``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS``\r\n\n#   Specify additional runtime libraries that may not be detected.\r\n\n#   After inclusion any detected libraries will be appended to this.\r\n\n#\r\n\n# ``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP``\r\n\n#   Set to TRUE to skip calling the :command:`install(PROGRAMS)` command to\r\n\n#   allow the includer to specify its own install rule, using the value of\r\n\n#   ``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS`` to get the list of libraries.\r\n\n#\r\n\n# ``CMAKE_INSTALL_DEBUG_LIBRARIES``\r\n\n#   Set to TRUE to install the debug runtime libraries when available\r\n\n#   with MSVC tools.\r\n\n#\r\n\n# ``CMAKE_INSTALL_DEBUG_LIBRARIES_ONLY``\r\n\n#   Set to TRUE to install only the debug runtime libraries with MSVC\r\n\n#   tools even if the release runtime libraries are also available.\r\n\n#\r\n\n# ``CMAKE_INSTALL_UCRT_LIBRARIES``\r\n\n#   Set to TRUE to install the Windows Universal CRT libraries for\r\n\n#   app-local deployment (e.g. to Windows XP).  This is meaningful\r\n\n#   only with MSVC from Visual Studio 2015 or higher.\r\n\n#\r\n\n# ``CMAKE_INSTALL_MFC_LIBRARIES``\r\n\n#   Set to TRUE to install the MSVC MFC runtime libraries.\r\n\n#\r\n\n# ``CMAKE_INSTALL_OPENMP_LIBRARIES``\r\n\n#   Set to TRUE to install the MSVC OpenMP runtime libraries\r\n\n#\r\n\n# ``CMAKE_INSTALL_SYSTEM_RUNTIME_DESTINATION``\r\n\n#   Specify the :command:`install(PROGRAMS)` command ``DESTINATION``\r\n\n#   option.  If not specified, the default is ``bin`` on Windows\r\n\n#   and ``lib`` elsewhere.\r\n\n#\r\n\n# ``CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS``\r\n\n#   Set to TRUE to disable warnings about required library files that\r\n\n#   do not exist.  (For example, Visual Studio Express editions may\r\n\n#   not provide the redistributable files.)\r\n\n#\r\n\n# ``CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT``\r\n\n#   Specify the :command:`install(PROGRAMS)` command ``COMPONENT``\r\n\n#   option.  If not specified, no such option will be used.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# VS 10 and later:\r\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# VS 9 and earlier:\r\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Find the runtime library redistribution directory.\r\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# use old cache entry\r\n",
        "Line" : 91,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : "# Install the manifest that allows DLLs to be loaded from the\r\n\n# directory containing the executable.\r\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Find the runtime library redistribution directory.\r\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# use old cache entry\r\n",
        "Line" : 133,
        "CharPositionInLine" : 50
      },
      "9" : {
        "Text" : "# Install the manifest that allows DLLs to be loaded from the\r\n\n# directory containing the executable.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Find the runtime library redistribution directory.\r\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# use old cache entry\r\n",
        "Line" : 195,
        "CharPositionInLine" : 53
      },
      "12" : {
        "Text" : "# undocumented query\r\n",
        "Line" : 199,
        "CharPositionInLine" : 71
      },
      "13" : {
        "Text" : "# Find the Windows Kits directory.\r\n",
        "Line" : 255,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Glob the list of UCRT DLLs.\r\n",
        "Line" : 267,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Install the manifest that allows DLLs to be loaded from the\r\n\n# directory containing the executable.\r\n",
        "Line" : 306,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# include the language dll's for vs8 as well as the actuall dll's\r\n",
        "Line" : 318,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Install the manifest that allows DLLs to be loaded from the\r\n\n# directory containing the executable.\r\n",
        "Line" : 320,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Install the manifest that allows DLLs to be loaded from the\r\n\n# directory containing the executable.\r\n",
        "Line" : 350,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# include the language dll's for vs9 as well as the actuall dll's\r\n",
        "Line" : 362,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# Install the manifest that allows DLLs to be loaded from the\r\n\n# directory containing the executable.\r\n",
        "Line" : 364,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Starting with VS 15 the MFC DLLs may be in a different directory.\r\n",
        "Line" : 404,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Multi-Byte Character Set versions of MFC are available as optional\r\n\n# addon since Visual Studio 12.  So for version 12 or higher, check\r\n\n# whether they are available and exclude them if they are not.\r\n",
        "Line" : 415,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# include the language dll's as well as the actuall dll's\r\n",
        "Line" : 448,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# MSVC 8 was the first version with OpenMP\r\n\n# Furthermore, there is no debug version of this\r\n",
        "Line" : 465,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# This warning indicates an incomplete Visual Studio installation\r\n\n# or a bug somewhere above here in this file.\r\n\n# If you would like to avoid this warning, fix the real problem, or\r\n\n# set CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS before including\r\n\n# this file.\r\n",
        "Line" : 515,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# This warning indicates an incomplete Watcom installation\r\n\n# or a bug somewhere above here in this file.\r\n\n# If you would like to avoid this warning, fix the real problem, or\r\n\n# set CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS before including\r\n\n# this file.\r\n",
        "Line" : 548,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# Include system runtime libraries in the installation if any are\r\n\n# specified by CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS.\r\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/IntelVSImplicitPath/CMakeLists.txt" : {
      "ObjectId" : "eb74573224ae0a83657b7c4a2384e6683bf838b9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/IntelVSImplicitPath/detect.cmake" : {
      "ObjectId" : "6bc3ee9803410f2016023135cf9c2c58423de1d1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# look at each path and try to find ifconsol.lib\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Internal/FeatureTesting.cmake" : {
      "ObjectId" : "1a2e106f06178ba79d037f1d6fe157e876660d42",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/KDE3Macros.cmake" : {
      "ObjectId" : "bae69607ecc633344b92f509bcb3ccf479ebcf67",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# See FindKDE3.cmake for documentation.\r\n\n#\r\n\n# this file contains the following macros:\r\n\n# KDE3_ADD_DCOP_SKELS\r\n\n# KDE3_ADD_DCOP_STUBS\r\n\n# KDE3_ADD_MOC_FILES\r\n\n# KDE3_ADD_UI_FILES\r\n\n# KDE3_ADD_KCFG_FILES\r\n\n# KDE3_AUTOMOC\r\n\n# KDE3_INSTALL_LIBTOOL_FILE\r\n\n# KDE3_CREATE_FINAL_FILE\r\n\n# KDE3_ADD_KPART\r\n\n# KDE3_ADD_KDEINIT_EXECUTABLE\r\n\n# KDE3_ADD_EXECUTABLE\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#neundorf@kde.org\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#create the kidl and skeletion file for dcop stuff\r\n\n#usage: KDE_ADD_COP_SKELS(foo_SRCS ${dcop_headers})\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#create the moc files and add them to the list of sources\r\n\n#usage: KDE_ADD_MOC_FILES(foo_SRCS ${moc_headers})\r\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#create the implementation files from the ui files and add them to the list of sources\r\n\n#usage: KDE_ADD_UI_FILES(foo_SRCS ${ui_files})\r\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if \"SKIP_AUTOMOC\" is set to true, we will not handle this file here.\r\n\n# here. this is required to make bouic work correctly:\r\n\n# we need to add generated .cpp files to the sources (to compile them),\r\n\n# but we cannot let automoc handle them, as the .cpp files don't exist yet when\r\n\n# cmake is run for the very first time on them -> however the .cpp files might\r\n\n# exist at a later run. at that time we need to skip them, so that we don't add two\r\n\n# different rules for the same moc file\r\n",
        "Line" : 204,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#            set(_header ${CMAKE_CURRENT_SOURCE_DIR}/${_basename}.h)\r\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# only used internally by KDE3_INSTALL_ICONS\r\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# if the string doesn't match the pattern, the result is the full string, so all three have the same content\r\n",
        "Line" : 246,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "#      message(STATUS \"icon: ${_current_ICON} size: ${_size} group: ${_group} name: ${_name}\" )\r\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# first the png icons\r\n",
        "Line" : 279,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "# and now the svg icons\r\n",
        "Line" : 290,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "#   file(APPEND ${_laname} \"dependency_libs='${${_target}_LIB_DEPENDS}'\\n\")\r\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# option(KDE3_ENABLE_FINAL \"Enable final all-in-one compilation\")\r\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#is the first argument is \"WITH_PREFIX\" then keep the standard \"lib\" prefix, otherwise SET the prefix empty\r\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#    if (KDE3_ENABLE_FINAL)\r\n\n#       KDE3_CREATE_FINAL_FILE(${_target_NAME}_final.cpp ${_first_SRC} ${ARGN})\r\n\n#       add_library(${_target_NAME} MODULE  ${_target_NAME}_final.cpp)\r\n\n#    else ()\r\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#    endif ()\r\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#    if (KDE3_ENABLE_FINAL)\r\n\n#       KDE3_CREATE_FINAL_FILE(${_target_NAME}_final.cpp ${ARGN})\r\n\n#       add_library(kdeinit_${_target_NAME} SHARED  ${_target_NAME}_final.cpp)\r\n\n#    else ()\r\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#    endif ()\r\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#    if (KDE3_ENABLE_FINAL)\r\n\n#       KDE3_CREATE_FINAL_FILE(${_target_NAME}_final.cpp ${ARGN})\r\n\n#       add_executable(${_target_NAME} ${_target_NAME}_final.cpp)\r\n\n#    else ()\r\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#    endif ()\r\n",
        "Line" : 395,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/MacroAddFileDependencies.cmake" : {
      "ObjectId" : "afaf099dfe75e6ded941956db6c12609960afc42",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# MacroAddFileDependencies\r\n\n# ------------------------\r\n\n#\r\n\n# MACRO_ADD_FILE_DEPENDENCIES(<_file> depend_files...)\r\n\n#\r\n\n# Using the macro MACRO_ADD_FILE_DEPENDENCIES() is discouraged.  There\r\n\n# are usually better ways to specify the correct dependencies.\r\n\n#\r\n\n# MACRO_ADD_FILE_DEPENDENCIES(<_file> depend_files...) is just a\r\n\n# convenience wrapper around the OBJECT_DEPENDS source file property.\r\n\n# You can just use set_property(SOURCE <file> APPEND PROPERTY\r\n\n# OBJECT_DEPENDS depend_files) instead.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/MatlabTestsRedirect.cmake" : {
      "ObjectId" : "64ab66c37d9833fef5d7107e7823fe2fa0461b1b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is an undocumented internal helper for the FindMatlab\r\n\n# module ``matlab_add_unit_test`` command.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Usage: cmake\r\n\n#   -Dtest_timeout=180\r\n\n#   -Doutput_directory=\r\n\n#   -Dadditional_paths=\"\"\r\n\n#   -Dno_unittest_framework=\"\"\r\n\n#   -DMatlab_PROGRAM=matlab_exe_location\r\n\n#   -DMatlab_ADDITIONAL_STARTUP_OPTIONS=\"\"\r\n\n#   -Dtest_name=name_of_the_test\r\n\n#   -Dcustom_Matlab_test_command=\"\"\r\n\n#   -Dcmd_to_run_before_test=\"\"\r\n\n#   -Dunittest_file_to_run\r\n\n#   -P FindMatlab_TestsRedirect.cmake\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If timeout is -1, then do not put a timeout on the execute_process\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if the working directory is not specified then default\r\n\n# to the output_directory because the log file will go there\r\n\n# if the working_directory is specified it will override the\r\n\n# output_directory\r\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do not use a full path to log file.  Depend on the fact that the log file\r\n\n# is always going to go in the working_directory.  This is because matlab\r\n\n# on unix is a shell script that does not handle spaces in the logfile path.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# we do not want the output twice\r\n",
        "Line" : 89,
        "CharPositionInLine" : 15
      },
      "7" : {
        "Text" : "# print the output in any case.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if we put FATAL_ERROR here, the file is indented.\r\n",
        "Line" : 100,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-Clang-C.cmake" : {
      "ObjectId" : "00bb24c9b761ccce86d9314aa960051f3318f85d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-Clang-CXX.cmake" : {
      "ObjectId" : "f2db246960f63b26bae1380dc8634bac98754a34",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-GNU-ASM.cmake" : {
      "ObjectId" : "0ca602c104c2abd67f635502b43f4a20a4942945",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-GNU-C.cmake" : {
      "ObjectId" : "7b9b5a12c5e038cf6aa709a8fc4193d49d6e7888",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-GNU-CXX.cmake" : {
      "ObjectId" : "5f946c40575e1e126c5cc707e715ad95de849794",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-GNU-Fortran.cmake" : {
      "ObjectId" : "a80a490361def3f227333b4023da4b3bc265e8ff",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-GNU.cmake" : {
      "ObjectId" : "86b2984bee641939e21e6cb5869ccd1bf494e619",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# By default, runtime linking is enabled. All shared objects specified on the command line\r\n\n# will be listed, even if there are no symbols referenced, in the output file.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-VisualAge-C.cmake" : {
      "ObjectId" : "a89759b15443d619b7550af36ca78bb91baf4c52",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-VisualAge-CXX.cmake" : {
      "ObjectId" : "a5aa4b2482708f482d99b60a5d01077d6ffa4dc3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-VisualAge-Fortran.cmake" : {
      "ObjectId" : "3d1f297e1635149a891df65da595ecdf3df3adec",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-XL-ASM.cmake" : {
      "ObjectId" : "18fb607c6abb599074274c5382448d06d844c36e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-XL-C.cmake" : {
      "ObjectId" : "65e4ced795ef2231ef9eaa88ab9fec9c65c2b208",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-XL-CXX.cmake" : {
      "ObjectId" : "0aa9963ed04e741f967e805165acea236c681bda",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-XL-Fortran.cmake" : {
      "ObjectId" : "b91aaf096c756f6817c873c7ebf66e52ee5651e5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX-XL.cmake" : {
      "ObjectId" : "4e5834fbe315768dc93f9b3284b9e79472c01722",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# By default, runtime linking is enabled. All shared objects specified on the command line\r\n\n# will be listed, even if there are no symbols referenced, in the output file.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -shared\r\n",
        "Line" : 22,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/AIX.cmake" : {
      "ObjectId" : "488878619c5a8af4ee3fba961b56418bc3fb701f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# lib\r\n\n# .so\r\n",
        "Line" : 1,
        "CharPositionInLine" : 48
      },
      "1" : {
        "Text" : "# RPATH support on AIX is called libpath.  By default the runtime\r\n\n# libpath is paths specified by -L followed by /usr/lib and /lib.  In\r\n\n# order to prevent the -L paths from being used we must force use of\r\n\n# -Wl,-blibpath:/usr/lib:/lib whether RPATH support is on or not.\r\n\n# When our own RPATH is to be added it may be inserted before the\r\n\n# \"always\" paths.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Files named \"libfoo.a\" may actually be shared libraries.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# since .a can be a static or shared library on AIX, we can not do this.\r\n\n# at some point if we wanted it, we would have to figure out if a .a is\r\n\n# static or shared, then we could add this back:\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n\n#foreach(type SHARED_LIBRARY SHARED_MODULE EXE)\r\n\n#  set(CMAKE_${type}_LINK_STATIC_C_FLAGS \"-bstatic\")\r\n\n#  set(CMAKE_${type}_LINK_DYNAMIC_C_FLAGS \"-bdynamic\")\r\n\n#endforeach()\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/ARTOS-GNU-C.cmake" : {
      "ObjectId" : "d07fa6b48185da6e7e111c0e8ebc953e28c8e7d5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define ARTOS to select proper behaviour and tell preprocessor to accept C++ style comments.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ac doesn't support -g properly and doesn't support the normal gcc optimization options. Just use the defaults set by ac.\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Most projects expect the stdio functions to be available.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/ARTOS.cmake" : {
      "ObjectId" : "01fc1eedf076efd61ae06d05f0b5a8f36441c274",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support for ARTOS RTOS (locamation.com)\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ARTOS does not support shared libs\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Clang-ASM.cmake" : {
      "ObjectId" : "96ab5195dcb3390f6a58f199a6906243dc018dc8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Clang-C.cmake" : {
      "ObjectId" : "b58c1707aff92203badcfdaf383a2ca7c97e66e6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Clang-CXX.cmake" : {
      "ObjectId" : "14c73ce8bac4330dbb80ed89c5d7a008a1f5c201",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Clang.cmake" : {
      "ObjectId" : "186fe112a10698c02530b630de0f8e1738147c1d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support for NVIDIA Nsight Tegra Visual Studio Edition was previously\r\n\n# implemented in the CMake VS IDE generators.  Avoid interfering with\r\n\n# that functionality for now.  Later we may try to integrate this.\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Commonly used Android toolchain files that pre-date CMake upstream support\r\n\n# set CMAKE_SYSTEM_VERSION to 1.  Avoid interfering with them.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The NDK toolchain configuration files at:\r\n\n#\r\n\n#   <ndk>/[build/core/]toolchains/*-clang*/setup.mk\r\n\n#\r\n\n# contain logic to set LLVM_TRIPLE for Clang-based toolchains for each target.\r\n\n# We need to produce the same target here to produce compatible binaries.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Common.cmake" : {
      "ObjectId" : "14dbf60b96977e8eb720f6af36bdd2380410180d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# <ndk>/build/core/definitions.mk\r\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Forward Android-specific platform variables to try_compile projects.\r\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# The NDK toolchain configuration files at:\r\n\n#\r\n\n#   <ndk>/[build/core/]toolchains/*/setup.mk\r\n\n#\r\n\n# contain logic to set TARGET_CFLAGS and TARGET_LDFLAGS (and debug/release\r\n\n# variants) to tell their build system what flags to pass for each ABI.\r\n\n# We need to produce the same flags here to produce compatible binaries.\r\n\n# We initialize these variables here and set them in the compiler-specific\r\n\n# modules that include this one.  Then we use them in the macro below when\r\n\n# it is called.\r\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# <ndk>/build/core/definitions.mk appends the sysroot's include directory\r\n\n# explicitly at the end of the command-line include path so that it\r\n\n# precedes the toolchain's builtin include directories.  This is\r\n\n# necessary so that Android API-version-specific headers are preferred\r\n\n# over those in the toolchain's `include-fixed` directory (which cannot\r\n\n# possibly match all versions).\r\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Determine-C.cmake" : {
      "ObjectId" : "fe6f3a1ce9c071b65b2a55efc5d750dcdebb6dc2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Determine-CXX.cmake" : {
      "ObjectId" : "cdd3ffab38bf56813c54a563b96bcdae60bf97a2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Determine.cmake" : {
      "ObjectId" : "eb386e0104b79cdc8b17ff945ba6af07b8d7a6bc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When CMAKE_SYSTEM_NAME is \"Android\", CMakeDetermineSystem loads this module.\r\n\n# This module detects platform-wide information about the Android target\r\n\n# in order to store it in \"CMakeSystem.cmake\".\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support for NVIDIA Nsight Tegra Visual Studio Edition was previously\r\n\n# implemented in the CMake VS IDE generators.  Avoid interfering with\r\n\n# that functionality for now.  Later we may try to integrate this.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Commonly used Android toolchain files that pre-date CMake upstream support\r\n\n# set CMAKE_SYSTEM_VERSION to 1.  Avoid interfering with them.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If the user provided CMAKE_SYSROOT for us, extract information from it.\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the Android NDK.\r\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: Search harder for the NDK or standalone toolchain.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Select an API.\r\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# https://developer.android.com/ndk/guides/abis.html\r\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Validate inputs.\r\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Select an ABI.\r\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# https://developer.android.com/ndk/guides/application_mk.html\r\n\n# Default is the oldest ARM ABI.\r\n",
        "Line" : 231,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Select a processor.\r\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the user specified both an ABI and a processor then they might not match.\r\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Save the Android-specific information in CMakeSystem.cmake.\r\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Select an ARM variant.\r\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Report the chosen architecture.\r\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-GNU-C.cmake" : {
      "ObjectId" : "5879410dd17404a88413c2931c1530e93e2d7d36",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-GNU-CXX.cmake" : {
      "ObjectId" : "fdab3f35b0d8e2d4b9130e6b91cd85e9e5ab40d3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-GNU.cmake" : {
      "ObjectId" : "e80feef349376557eab0bf0d172c22af5e1b8d21",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support for NVIDIA Nsight Tegra Visual Studio Edition was previously\r\n\n# implemented in the CMake VS IDE generators.  Avoid interfering with\r\n\n# that functionality for now.  Later we may try to integrate this.\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Commonly used Android toolchain files that pre-date CMake upstream support\r\n\n# set CMAKE_SYSTEM_VERSION to 1.  Avoid interfering with them.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android-Initialize.cmake" : {
      "ObjectId" : "954181971060c11550c61a68cc72fbe3699b92fe",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When CMAKE_SYSTEM_NAME is \"Android\", CMakeSystemSpecificInitialize loads this\r\n\n# module.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support for NVIDIA Nsight Tegra Visual Studio Edition was previously\r\n\n# implemented in the CMake VS IDE generators.  Avoid interfering with\r\n\n# that functionality for now.  Later we may try to integrate this.\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Commonly used Android toolchain files that pre-date CMake upstream support\r\n\n# set CMAKE_SYSTEM_VERSION to 1.  Avoid interfering with them.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android.cmake" : {
      "ObjectId" : "cfe3631a0497960608545aa4cf5b125bcf317be7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Android has soname, but binary names must end in \".so\" so we cannot append\r\n\n# a version number.  Also we cannot portably represent symlinks on the host.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Android reportedly ignores RPATH, and we cannot predict the install\r\n\n# location anyway.\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Nsight Tegra Visual Studio Edition takes care of\r\n\n# prefixing library names with '-l'.\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/Determine-Compiler-NDK.cmake" : {
      "ObjectId" : "cb9554a6540750bfe519e772efd8dfe46fc947d4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# In Android NDK releases there is build system toolchain selection logic in\r\n\n# these files:\r\n\n#\r\n\n# * <ndk>/build/core/init.mk\r\n\n# * <ndk>/build/core/setup-toolchain.mk\r\n\n# * <ndk>/[build/core/]toolchains/<toolchain>/{config.mk,setup.mk}\r\n\n#\r\n\n# We parse information out of the ``config.mk`` and ``setup.mk`` files below.\r\n\n#\r\n\n# There is also a \"toolchains\" directory with the prebuilt toolchains themselves:\r\n\n#\r\n\n# * <triple-or-arch>-<gcc-version>/prebuilt/<host>/bin/<triple>-gcc(.exe)?\r\n\n#   The gcc compiler to be invoked.\r\n\n#\r\n\n# * llvm*/prebuilt/<host>/bin/clang\r\n\n#   The clang compiler to be invoked with flags:\r\n\n#     -target <triple>\r\n\n#     -gcc-toolchain <ndk>/toolchains/<triple-or-arch>-<gcc-version>\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Glob available toolchains in the NDK, restricted by any version request.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the newest toolchain version matching the ABI.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check that the toolchain matches the ABI.\r\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check the version.\r\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# already the latest possible\r\n",
        "Line" : 71,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Verify that we have a suitable toolchain.\r\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For clang toolchains we still need to find a gcc toolchain.\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Parse the toolchain setup.mk file to extract information we need.\r\n\n# Their content is not standardized across toolchains or NDK versions,\r\n\n# so we match known cases.  Note that the parsing is stateful across\r\n\n# lines because we need to substitute for some Make variable references.\r\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# We just matched the toolchain prefix with no Make variable references.\r\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# For clang toolchains we need to find more information.\r\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# We just matched the gcc toolchain version number.  Save it for later.\r\n",
        "Line" : 140,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# We just matched the gcc toolchain name with a version number placeholder, so substitute it.\r\n\n# The gcc toolchain version number will have already been extracted from a TOOLCHAIN_VERSION line.\r\n",
        "Line" : 143,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# We just matched the gcc toolchain name without version number.  Save it for later.\r\n",
        "Line" : 147,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# We just matched the toolchain prefix with a name placholder, so substitute it.\r\n\n# The gcc toolchain name will have already been extracted without version number from a TOOLCHAIN_NAME line.\r\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# We just matched the llvm prebuilt binary toolchain version number.  Save it for later.\r\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# We just matched the llvm prebuilt binary toolchain directory name with a version number placeholder,\r\n\n# so substitute it. The llvm prebuilt binary toolchain version number will have already been extracted\r\n\n# from a LLVM_VERSION line.\r\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# We just matched the llvm prebuilt binary toolchain directory name.\r\n",
        "Line" : 162,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# We just matched a placeholder for the name followed by a version number.\r\n\n# The gcc toolchain name will have already been extracted without version number from a TOOLCHAIN_NAME line.\r\n\n# Substitute for the placeholder to get the full gcc toolchain name.\r\n",
        "Line" : 165,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# We just matched the full gcc toolchain name without placeholder.\r\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Fall back to parsing the version and prefix from the tool name.\r\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Identify the host platform.\r\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Help CMakeFindBinUtils locate things.\r\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# _ANDROID_TOOL_PREFIX should now match `gcc -dumpmachine`.\r\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/Determine-Compiler-Standalone.cmake" : {
      "ObjectId" : "e76c06d2462d821ebfb9274e4161b0fbed9dc43e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Help CMakeFindBinUtils locate things.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# _ANDROID_TOOL_PREFIX should now match `gcc -dumpmachine`.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/Determine-Compiler.cmake" : {
      "ObjectId" : "0bbb703250b5b9ae8b60a63df070e9235afa0771",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support for NVIDIA Nsight Tegra Visual Studio Edition was previously\r\n\n# implemented in the CMake VS IDE generators.  Avoid interfering with\r\n\n# that functionality for now.  Later we may try to integrate this.\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Commonly used Android toolchain files that pre-date CMake upstream support\r\n\n# set CMAKE_SYSTEM_VERSION to 1.  Avoid interfering with them.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Identify the host platform.\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Save the Android-specific information in CMake${lang}Compiler.cmake.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-arm64-v8a-Clang.cmake" : {
      "ObjectId" : "2f0f6690e40f3a632486a819924f1ff1fefb0494",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/aarch64-linux-android-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress -Wl,-z,nocopyreloc flag on arm64-v8a\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-arm64-v8a-GNU.cmake" : {
      "ObjectId" : "91eb108a8e1c608bb66337dc05e8d7c593f0b1c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/aarch64-linux-android-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress -Wl,-z,nocopyreloc flag on arm64-v8a\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-armeabi-Clang.cmake" : {
      "ObjectId" : "d40cce80fab39e976c5a7e4abb2b7dd2cfa45a95",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/arm-linux-androideabi-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-armeabi-GNU.cmake" : {
      "ObjectId" : "909c731633f8792d0ca83c10958fb8adace63cd4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/arm-linux-androideabi-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-armeabi-v6-Clang.cmake" : {
      "ObjectId" : "69439686727b0ed6f0ee163f7359279063f67ba5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/arm-linux-androideabi-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-armeabi-v6-GNU.cmake" : {
      "ObjectId" : "cccadfcd540b98f2827d1e9a5931090d6edb51c8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/arm-linux-androideabi-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-armeabi-v7a-Clang.cmake" : {
      "ObjectId" : "0c653e26e9d1ae93bc8042f0606ac6868ca4f2a6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/arm-linux-androideabi-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-armeabi-v7a-GNU.cmake" : {
      "ObjectId" : "1686f57e2cdcc9f6b6a984b9aaf0d698290c71ed",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/arm-linux-androideabi-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-common-Clang.cmake" : {
      "ObjectId" : "0a091c6acac2e3a16453edb60412ee64da86d3bb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\" -Wno-invalid-command-line-argument\"\r\n\n#\" -Wno-unused-command-line-argument\"\r\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-common-GNU.cmake" : {
      "ObjectId" : "a19ef1f5eeba9d44174dd3cf7b9f6daaaf159df0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-common.cmake" : {
      "ObjectId" : "5db9a2383bc0cf36882ff962626d61e68f53777b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-mips-Clang.cmake" : {
      "ObjectId" : "1c42b19cded229f57f095ad4fb27a1e05ae865cf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/mipsel-linux-android-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-mips-GNU.cmake" : {
      "ObjectId" : "6918c92e6390100a6a430bde2462f2c74d4165fa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/mipsel-linux-android-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-mips64-Clang.cmake" : {
      "ObjectId" : "1369a4e99ccc25d81dbcaa6aba971adf31cad6d3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/mips64el-linux-android-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-mips64-GNU.cmake" : {
      "ObjectId" : "3cef8ae7941134331a57e6d5a94e77fc60d4cc57",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/mips64el-linux-android-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-x86-Clang.cmake" : {
      "ObjectId" : "ced30c66a3bf66e2bd2d1c0811e621d988ee639b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/x86-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-x86-GNU.cmake" : {
      "ObjectId" : "74e966229e9ca66afe45550a2dcb9cef0233bfb6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/x86-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-x86_64-Clang.cmake" : {
      "ObjectId" : "65aeb192d8bc701c03af961876673305981eb03a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/x86_64-clang/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/abi-x86_64-GNU.cmake" : {
      "ObjectId" : "192271b3da885c97617f604baed3eae51301d25f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/build/core/toolchains/x86_64-4.9/setup.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-c++.cmake" : {
      "ObjectId" : "dd0031c3629d6d29a01e568aadf56ab082b42aaf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/sources/cxx-stl/llvm-libc++/Android.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the include directory.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# r12 and below\r\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# r13 and above\r\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add the library file.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-c++_shared.cmake" : {
      "ObjectId" : "f724c7cfeab74fe7304797d970e634b49783a128",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-c++_static.cmake" : {
      "ObjectId" : "5193c3fa2e1472e993424f92fc7580d7be7a5e86",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# provided by toolchain\r\n",
        "Line" : 7,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-gabi++.cmake" : {
      "ObjectId" : "98a9c1f810e1a4bccdbc3c10df9b418e8b11b064",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/sources/cxx-stl/gabi++/Android.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-gabi++_shared.cmake" : {
      "ObjectId" : "3b453f4db3e60cacfca2c304347cff7020a9c030",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-gabi++_static.cmake" : {
      "ObjectId" : "ba802dfe5e4ca9ddb1fae0d279722946be499cf7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-gnustl.cmake" : {
      "ObjectId" : "f2304160a06c0344e8c67856d56dc9dc33213d42",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/sources/cxx-stl/gnu-libstdc++/Android.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-gnustl_shared.cmake" : {
      "ObjectId" : "de84a7cb383292e4543d475a9648f0f5dbc9d154",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-gnustl_static.cmake" : {
      "ObjectId" : "d4a4bff7f1f7f1ae502c64ef418011a06298bb10",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-none.cmake" : {
      "ObjectId" : "c46d66cffb6609eabe6f2aea831a4340f4a020cf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-stlport.cmake" : {
      "ObjectId" : "786bbe665073305b31fcf31f2e2c95138e545813",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/sources/cxx-stl/stlport/Android.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-stlport_shared.cmake" : {
      "ObjectId" : "8907cec5a7c93c31b1ccf0a853a30aafb82eb3ff",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-stlport_static.cmake" : {
      "ObjectId" : "612bab16b32a636ea47c294c1fbd8d5c5b72ecb2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Android/ndk-stl-system.cmake" : {
      "ObjectId" : "0a610471520fd23c7d9be78862d26fc874ad646a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# <ndk>/android-ndk-r11c/sources/cxx-stl/system/Android.mk\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BSDOS.cmake" : {
      "ObjectId" : "6c8a8ec408562c8fef27f34fdb2092bafa8bf6fb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BeOS.cmake" : {
      "ObjectId" : "1253e4a4f2d17337aa20d855d9829683d66e7d4e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneL.cmake" : {
      "ObjectId" : "bc1234d8c60900b784ff7743e03badf7bf63ffbf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#the compute nodes on BlueGene/L don't support shared libs\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -pic\r\n",
        "Line" : 4,
        "CharPositionInLine" : 48
      },
      "2" : {
        "Text" : "# -shared\r\n\n# +s, flag for exe link to use shared lib\r\n\n# -rpath\r\n\n# : or empty\r\n",
        "Line" : 5,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : "# lib\r\n\n# .a\r\n",
        "Line" : 13,
        "CharPositionInLine" : 48
      },
      "4" : {
        "Text" : "# .exe\r\n",
        "Line" : 15,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : "# when using IBM xlc we probably don't want to link to -lgcc\r\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# when using the IBM xlC we probably don't want to link to -lgcc\r\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-base.cmake" : {
      "ObjectId" : "ee7736322d6d475a6522ece699cd5337edae71c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# BlueGeneP base platform file.\r\n\n#\r\n\n# NOTE: Do not set your platform to \"BlueGeneP-base\".  This file is included\r\n\n# by the real platform files.  Use one of these two platforms instead:\r\n\n#\r\n\n#     BlueGeneP-dynamic  For dynamically linked builds\r\n\n#     BlueGeneP-static   For statically linked builds\r\n\n#\r\n\n# This platform file tries its best to adhere to the behavior of the MPI\r\n\n# compiler wrappers included with the latest BG/P drivers.\r\n\n#\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# For BGP builds, we're cross compiling, but we don't want to re-root things\r\n\n# (e.g. with CMAKE_FIND_ROOT_PATH) because users may have libraries anywhere on\r\n\n# the shared filesystems, and this may lie outside the root.  Instead, we set the\r\n\n# system directories so that the various system BGP CNK library locations are\r\n\n# searched first.  This is not the clearest thing in the world, given IBM's driver\r\n\n# layout, but this should cover all the standard ones.\r\n\n#\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# default comm layer (used by mpi compiler wrappers)\r\n\n# DCMF, other lower-level comm libraries\r\n\n# other low-level stuff\r\n\n# CNK python installation directory\r\n\n# CNK Linux image -- standard runtime libs, pthread, etc.\r\n",
        "Line" : 28,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "#\r\n\n# This adds directories that find commands should specifically ignore for cross compiles.\r\n\n# Most of these directories are the includeand lib directories for the frontend on BG/P systems.\r\n\n# Not ignoring these can cause things like FindX11 to find a frontend PPC version mistakenly.\r\n\n# We use this on BG instead of re-rooting because backend libraries are typically strewn about\r\n\n# the filesystem, and we can't re-root ALL backend libraries to a single place.\r\n\n#\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\r\n\n# Indicate that this is a unix-like system\r\n\n#\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\r\n\n# Library prefixes, suffixes, extra libs.\r\n\n#\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# lib\r\n\n# .a\r\n",
        "Line" : 61,
        "CharPositionInLine" : 43
      },
      "8" : {
        "Text" : "# lib\r\n\n# .so\r\n\n# .exe\r\n",
        "Line" : 64,
        "CharPositionInLine" : 43
      },
      "9" : {
        "Text" : "#\r\n\n# This macro needs to be called for dynamic library support.  Unfortunately on BGP,\r\n\n# We can't support both static and dynamic links in the same platform file.  The\r\n\n# dynamic link platform file needs to call this explicitly to set up dynamic linking.\r\n\n#\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Flags for XL compilers if we explicitly detected XL\r\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Assume flags for GNU compilers (if the ID is GNU *or* anything else).\r\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Both toolchains use the GNU linker on BG/P, so these options are shared.\r\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# +s, flag for exe link to use shared lib\r\n\n# : or empty\r\n",
        "Line" : 96,
        "CharPositionInLine" : 58
      },
      "14" : {
        "Text" : "#\r\n\n# This macro needs to be called for static builds.  Right now it just adds -Wl,-relax\r\n\n# to the link line.\r\n\n#\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-dynamic-GNU-C.cmake" : {
      "ObjectId" : "2fc8df694f3b48f9ce7dd718518919d90cbf9444",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-dynamic-GNU-CXX.cmake" : {
      "ObjectId" : "082d5f80c317136ef3cbb4102c4a100d0c79f9a6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-dynamic-GNU-Fortran.cmake" : {
      "ObjectId" : "55f5b441b5c4ebd6795e2b0760cd028c3060cbd5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-dynamic-XL-C.cmake" : {
      "ObjectId" : "f3479c233643f29d2ea3bced35e961f93ee29415",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-dynamic-XL-CXX.cmake" : {
      "ObjectId" : "d1e1768ee5150aac0b308ee1687936467b659112",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-dynamic-XL-Fortran.cmake" : {
      "ObjectId" : "d6a625efcd21f1c297bb2b544bf8309bbf12bf80",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-dynamic.cmake" : {
      "ObjectId" : "6ed41c4cd6fb2f0a7579cf70499c7e3c5a8c2faa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-static-GNU-C.cmake" : {
      "ObjectId" : "e381a686b33cba7a6bad971ba2f1e57591454750",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-static-GNU-CXX.cmake" : {
      "ObjectId" : "528f8c3a7e4c4d73672dda25e6f4bf0890b87645",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-static-GNU-Fortran.cmake" : {
      "ObjectId" : "0c0bb3f30ee43f5a274d2c4112e75c436ce9a1bc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-static-XL-C.cmake" : {
      "ObjectId" : "95ea4235ad0979989e334ed9df68d19f8dbcbdaf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-static-XL-CXX.cmake" : {
      "ObjectId" : "39a3d239d0b70330985d1e721a4fc526d531e1fe",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-static-XL-Fortran.cmake" : {
      "ObjectId" : "ab2b041ca48276369eb5895cecd4e702362032c2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneP-static.cmake" : {
      "ObjectId" : "2f2cffe31a9141366bcfb66309e5b72d07148ac7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-base.cmake" : {
      "ObjectId" : "c623bc5fdd0ceba7ebc7663a4e10065a0431f31f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# Blue Gene/Q base platform file.\r\n\n#\r\n\n# NOTE: Do not set your platform to \"BlueGeneQ-base\".  This file is\r\n\n# included by the real platform files.  Use one of these two platforms\r\n\n# instead:\r\n\n#\r\n\n#     BlueGeneQ-dynamic  For dynamically linked executables\r\n\n#     BlueGeneQ-static   For statically linked executables\r\n\n#\r\n\n# The platform you choose doesn't affect whether or not you can build\r\n\n# shared or static libraries -- it ONLY changs whether exeuatbles are linked\r\n\n# statically or dynamically.\r\n\n#\r\n\n# This platform file tries its best to adhere to the behavior of the MPI\r\n\n# compiler wrappers included with the latest BG/P drivers.\r\n\n#\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# This adds directories that find commands should specifically ignore\r\n\n# for cross compiles.  Most of these directories are the includeand\r\n\n# lib directories for the frontend on BG/P systems.  Not ignoring\r\n\n# these can cause things like FindX11 to find a frontend PPC version\r\n\n# mistakenly.  We use this on BG instead of re-rooting because backend\r\n\n# libraries are typically strewn about the filesystem, and we can't\r\n\n# re-root ALL backend libraries to a single place.\r\n\n#\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\r\n\n# Indicate that this is a unix-like system\r\n\n#\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\r\n\n# Library prefixes, suffixes, extra libs.\r\n\n#\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# lib\r\n\n# .a\r\n",
        "Line" : 51,
        "CharPositionInLine" : 43
      },
      "6" : {
        "Text" : "# lib\r\n\n# .so\r\n\n# .exe\r\n",
        "Line" : 54,
        "CharPositionInLine" : 43
      },
      "7" : {
        "Text" : "#\r\n\n# BG/Q supports dynamic libraries regardless of whether we're building\r\n\n# static or dynamic *executables*.\r\n\n#\r\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\r\n\n# For BGQ builds, we're cross compiling, but we don't want to re-root things\r\n\n# (e.g. with CMAKE_FIND_ROOT_PATH) because users may have libraries anywhere on\r\n\n# the shared filesystems, and this may lie outside the root.  Instead, we set the\r\n\n# system directories so that the various system BG CNK library locations are\r\n\n# searched first.  This is not the clearest thing in the world, given IBM's driver\r\n\n# layout, but this should cover all the standard ones.\r\n\n#\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Need to use the version of the comm lib compiled with the right compiler.\r\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# default comm layer (used by mpi compiler wrappers)\r\n\n# PAMI, other lower-level comm libraries\r\n\n# CNK python installation directory\r\n\n# CNK Linux image -- standard runtime libs, pthread, etc.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 64
      },
      "11" : {
        "Text" : "# Add all the system include paths.\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Ensure that the system directories are included with the regular compilers, as users will expect this\r\n\n# to do the same thing as the MPI compilers, which add these flags.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#\r\n\n# Code below does setup for shared libraries.  That this is done\r\n\n# regardless of whether the platform is static or dynamic -- you can make\r\n\n# shared libraries even if you intend to make static executables, you just\r\n\n# can't make a dynamic executable if you use the static platform file.\r\n\n#\r\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Flags for XL compilers if we explicitly detected XL\r\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Assume flags for GNU compilers (if the ID is GNU *or* anything else).\r\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Both toolchains use the GNU linker on BG/P, so these options are shared.\r\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# +s, flag for exe link to use shared lib\r\n\n# : or empty\r\n",
        "Line" : 128,
        "CharPositionInLine" : 58
      },
      "18" : {
        "Text" : "#\r\n\n# This macro needs to be called for dynamic library support.  Unfortunately on BG,\r\n\n# We can't support both static and dynamic links in the same platform file.  The\r\n\n# dynamic link platform file needs to call this explicitly to set up dynamic linking.\r\n\n#\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# For dynamic executables, need to provide special BG/Q arguments.\r\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#\r\n\n# This macro needs to be called for static builds.  Right now it just adds -Wl,-relax\r\n\n# to the link line.\r\n\n#\r\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# For static executables, use default link settings.\r\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-dynamic-GNU-C.cmake" : {
      "ObjectId" : "c3243f1d382067f45fee98688eaf35fe51c34583",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-dynamic-GNU-CXX.cmake" : {
      "ObjectId" : "af0e8ba668534b4e3f18be5c037f31581ac2f414",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-dynamic-GNU-Fortran.cmake" : {
      "ObjectId" : "dcd0c2aabc17c242f3c0492736d591b4cebe683f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-dynamic-XL-C.cmake" : {
      "ObjectId" : "ec3c27e601867221bd18b55cbde81bd257670bb2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-dynamic-XL-CXX.cmake" : {
      "ObjectId" : "19d32c38cca4e7222d61e84b97ac48f1fe2ae4f3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-dynamic-XL-Fortran.cmake" : {
      "ObjectId" : "34cf2a1f7791ae899574bd81a0214a95147e6b98",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-dynamic.cmake" : {
      "ObjectId" : "20fc3862bf91d535eef0113ccac326a5e44ef7e8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-static-GNU-C.cmake" : {
      "ObjectId" : "d60482a9cc556785b7cca9d47d55c195dc458f55",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-static-GNU-CXX.cmake" : {
      "ObjectId" : "8bc60559ea389399bb2e69cfcf1851257ec4f608",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-static-GNU-Fortran.cmake" : {
      "ObjectId" : "430ebccc6e4a5f08120bc98c9ea85de5a4d7c8bc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-static-XL-C.cmake" : {
      "ObjectId" : "9c486b49443362656ccee9ac277f9203bd8edada",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-static-XL-CXX.cmake" : {
      "ObjectId" : "b72944fc27ea7b69336c543a1f1acf19543f96ff",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-static-XL-Fortran.cmake" : {
      "ObjectId" : "5174835e567b7af089fb961ed18a2ed36e98da14",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/BlueGeneQ-static.cmake" : {
      "ObjectId" : "afedb3809aafc710f620d70c5a205401dff840f5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-Clang-C.cmake" : {
      "ObjectId" : "23898ea448c0b28b4d79f0dcac6112fc2acbfb54",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-Clang-CXX.cmake" : {
      "ObjectId" : "3c10506d8ffaad118e1765a6b4613c984fc28817",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-Determine-CXX.cmake" : {
      "ObjectId" : "e49dfce196c144f5d20900699a510abdcca33f29",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Exclude C++ compilers differing from C compiler only by case\r\n\n# because this platform may have a case-insensitive filesystem.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-GNU-C.cmake" : {
      "ObjectId" : "968dded61343deb5c869909eb5a332d3828c0092",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-GNU-CXX.cmake" : {
      "ObjectId" : "646812980a68efe60e38293cd6b05106dc5c81e3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-GNU-Fortran.cmake" : {
      "ObjectId" : "b528d50dd56dafb88ca2d10fd376b8f5d23a44a9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-GNU.cmake" : {
      "ObjectId" : "742df917b9d938a695fdc71fae89c482934e577e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Is -Wl,--enable-auto-import now always default?\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Binary link rules.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# No -fPIC on cygwin\r\n",
        "Line" : 27,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# TODO: Is -Wl,--enable-auto-import now always default?\r\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN-windres.cmake" : {
      "ObjectId" : "f4ae86b73c675a68cb1f0b2b10789c07ecf1b3e8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CYGWIN.cmake" : {
      "ObjectId" : "816451381a3802a19750a95c391a620c74db0d43",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Pass WIN32 legacy setting to scripts.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# .exe\r\n",
        "Line" : 54,
        "CharPositionInLine" : 45
      },
      "2" : {
        "Text" : "# Modules have a different default prefix that shared libs.\r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Shared libraries on cygwin can be named with their version number.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Catamount.cmake" : {
      "ObjectId" : "d9382f1847937eaf8857990ab4aa68dad44de3d7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Catamount, which runs on the compute nodes of Cray machines, e.g. RedStorm, doesn't support shared libs\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -pic\r\n",
        "Line" : 4,
        "CharPositionInLine" : 48
      },
      "2" : {
        "Text" : "# -shared\r\n\n# +s, flag for exe link to use shared lib\r\n\n# -rpath\r\n\n# : or empty\r\n",
        "Line" : 5,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : "# lib\r\n\n# .a\r\n",
        "Line" : 13,
        "CharPositionInLine" : 48
      },
      "4" : {
        "Text" : "# .exe\r\n",
        "Line" : 15,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/CrayLinuxEnvironment.cmake" : {
      "ObjectId" : "310d33dce50854a4db2509586f26da542ba78b3e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compute Node Linux doesn't quite work the same as native Linux so all of this\r\n\n# needs to be custom.  We use the variables defined through Cray's environment\r\n\n# modules to set up the right paths for things.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Guard against multiple messages\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# All cray systems are x86 CPUs and have been for quite some time\r\n\n# Note: this may need to change in the future with 64-bit ARM\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Don't override shared lib support if it's already been set and possibly\r\n\n# overridden elsewhere by the CrayPrgEnv module\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note: Much of this is pulled from UnixPaths.cmake but adjusted to the Cray\r\n\n# environment accordingly\r\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Get the install directory of the running cmake to the search directories\r\n\n# CMAKE_ROOT is CMAKE_INSTALL_PREFIX/share/cmake, so we need to go two levels up\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: Some Cray's have the SYSROOT_DIR variable defined, pointing to a copy\r\n\n# of the NIDs userland.  If so, then we'll use it.  Otherwise, just assume\r\n\n# the userland from the login node is ok\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List common installation prefixes.  These will be used for all\r\n\n# search types.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Standard\r\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# CMake install location\r\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Project install destination.\r\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# User-supplied staging prefix.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Compute the intersection of several lists\r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Enable use of lib64 search path variants by default.\r\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Absoft-Fortran.cmake" : {
      "ObjectId" : "9b7794dcf91728633b96d74553838003992ea0c6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Runs gcc under the hood.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-AppleClang-C.cmake" : {
      "ObjectId" : "f49b998d2ace7c424738d183f6ffe6f9bce0070c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-AppleClang-CXX.cmake" : {
      "ObjectId" : "88f2125b8a2d05d99e365cca2ad0a3bd349019b8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Clang-C.cmake" : {
      "ObjectId" : "83261cd99ff06b891487359a447df4882686007b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Clang-CXX.cmake" : {
      "ObjectId" : "6a656a8da8555799800464a1c23c009d31de1f81",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Clang.cmake" : {
      "ObjectId" : "3e730ee334086ea62fa4b97b49e2b6b03e537d3a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# also tell linker to print verbose output\r\n",
        "Line" : 12,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Determine-CXX.cmake" : {
      "ObjectId" : "e49dfce196c144f5d20900699a510abdcca33f29",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Exclude C++ compilers differing from C compiler only by case\r\n\n# because this platform may have a case-insensitive filesystem.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-GNU-C.cmake" : {
      "ObjectId" : "781a5613058bdd2e581cba8521a98ca90e3bfb66",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-GNU-CXX.cmake" : {
      "ObjectId" : "899ac6d8e45dd1c8272a6c244014392fb1efc816",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-GNU-Fortran.cmake" : {
      "ObjectId" : "213a5d0e599456038d8f1b9267d892323a27a621",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-GNU.cmake" : {
      "ObjectId" : "23996f441456c3c0eed26c5b8553c851a64526cf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# also tell linker to print verbose output\r\n",
        "Line" : 12,
        "CharPositionInLine" : 46
      },
      "3" : {
        "Text" : "# GNU does not have -shared on OS X\r\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Initialize.cmake" : {
      "ObjectId" : "c368a1c403f9c90f7a70e0f14a68c02c06781347",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ask xcode-select where to find /Developer or fall back to ancient location.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Save CMAKE_OSX_ARCHITECTURES from the environment.\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------------------\r\n\n# _CURRENT_OSX_VERSION - as a two-component string: 10.5, 10.6, ...\r\n\n#\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------------------\r\n\n# CMAKE_OSX_DEPLOYMENT_TARGET\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set cache variable - end user may change this during ccmake or cmake-gui configure.\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#----------------------------------------------------------------------------\r\n\n# CMAKE_OSX_SYSROOT\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use the existing value without further computation to choose a default.\r\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Use the value of SDKROOT from the environment.\r\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Find installed SDKs in either Xcode-4.3+ or pre-4.3 SDKs directory.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Select SDK for current OSX version accounting for the known\r\n\n# specially named SDKs.\r\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# find the latest SDK\r\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# pick an SDK that works\r\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Assume developer files are in root (such as Xcode 4.5 command-line tools).\r\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Set cache variable - end user may change this during ccmake or cmake-gui configure.\r\n\n# Choose the type based on the current value.\r\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Transform the cached value to something we can use.\r\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This is a path to the SDK.  Make sure it exists.\r\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Transform the sdk name into a path.\r\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# For non-Xcode generators use the path.\r\n",
        "Line" : 137,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 18
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Intel-C.cmake" : {
      "ObjectId" : "64390dd7589c33056e52f454f3a0e4f0b66a1ba3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Intel-CXX.cmake" : {
      "ObjectId" : "0228f403e586ea35761eb640adc11f594e15d80a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Intel-Fortran.cmake" : {
      "ObjectId" : "9e7577057002acfa2bc2c98bf50895b787821cb4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-Intel.cmake" : {
      "ObjectId" : "ceee81f946329ab50986c3933f857b93a837640c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# also tell linker to print verbose output\r\n",
        "Line" : 12,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-NAG-Fortran.cmake" : {
      "ObjectId" : "c10ea5a70b31ea4a5d0c6b1152e572bfeafb3153",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Runs gcc under the hood.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : "# Need -fpp explicitly on case-insensitive filesystem.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-PGI-C.cmake" : {
      "ObjectId" : "a1d6e5e4f3fdd42e0724f049645e974ef79ed252",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-PGI-CXX.cmake" : {
      "ObjectId" : "fecb977c01d763b07ffe517e95c8653f4968948b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-PGI-Fortran.cmake" : {
      "ObjectId" : "ad284c5a5dff15fab49dc01a605205c601de9449",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-PGI.cmake" : {
      "ObjectId" : "afa0a8e913fdb2e856376427ce1cd629d4c48b83",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-VisualAge-C.cmake" : {
      "ObjectId" : "9500daae581a62cd90fd266142519ffab50b4ece",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-VisualAge-CXX.cmake" : {
      "ObjectId" : "e8e151c981a56b6712260779d73e6611d6c2e359",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-XL-C.cmake" : {
      "ObjectId" : "885b89db3654f3c24b8408e8b0c161a98d9da96a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable shared library versioning.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin-XL-CXX.cmake" : {
      "ObjectId" : "2e87161b5b8472977ed465951a55b5a98e59b816",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable shared library versioning.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Darwin.cmake" : {
      "ObjectId" : "03aab3fa55f7ab9369bb672cae536a76c01e179d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Darwin versions:\r\n\n#   6.x == Mac OSX 10.2 (Jaguar)\r\n\n#   7.x == Mac OSX 10.3 (Panther)\r\n\n#   8.x == Mac OSX 10.4 (Tiger)\r\n\n#   9.x == Mac OSX 10.5 (Leopard)\r\n\n#  10.x == Mac OSX 10.6 (Snow Leopard)\r\n\n#  11.x == Mac OSX 10.7 (Lion)\r\n\n#  12.x == Mac OSX 10.8 (Mountain Lion)\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not use the \"-Wl,-search_paths_first\" flag with the OSX 10.2 compiler.\r\n\n# Done this way because it is too early to do a TRY_COMPILE.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# More desirable, but does not work:\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#include(CheckCXXCompilerFlag)\r\n\n#CHECK_CXX_COMPILER_FLAG(\"-Wl,-search_paths_first\" HAVE_FLAG_SEARCH_PATHS_FIRST)\r\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Enable rpath support for 10.5 and greater where it is known to work.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\r\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\r\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\r\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Enable shared library versioning.\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Xcode does not support -isystem yet.\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Need to list dependent shared libraries on link line.  When building\r\n\n# with -isysroot (for universal binaries), the linker always looks for\r\n\n# dependent libraries under the sysroot.  Listing them on the link\r\n\n# line works around the problem.\r\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Set default framework search path flag for languages known to use a\r\n\n# preprocessor that may find headers in frameworks.\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# default to searching for frameworks first\r\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Older OS X linkers do not report their framework search path\r\n\n# with -v but \"man ld\" documents the following locations.\r\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Treat some paths as implicit so we do not override the SDK versions.\r\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Older OS X tools had more implicit paths.\r\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# set up the default search directories for frameworks\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# add platform developer framework path if exists\r\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Xcode 6\r\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Xcode 5 iOS\r\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Xcode 5 OSX\r\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Warn about known system mis-configuration case.\r\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# default to searching for application bundles first\r\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# set up the default search directories for application bundles\r\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Xcode 4.3+\r\n\n# pre-4.3\r\n",
        "Line" : 190,
        "CharPositionInLine" : 42
      },
      "23" : {
        "Text" : "# Fink\r\n\n# MacPorts\r\n",
        "Line" : 213,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 24
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/DragonFly.cmake" : {
      "ObjectId" : "48a49410d442b784a061d46243025e57e2227564",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DragonFly BSD was forked from FreeBSD and is still very close to it\r\n\n# http://www.dragonflybsd.org\r\n\n# see http://archive.netbsd.se/?ml=dfbsd-users&a=2007-07&m=4678361\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Euros.cmake" : {
      "ObjectId" : "cfd5ff2fc25057fc123199f242526cbf12757ad7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support for EUROS RTOS (euros-embedded.com)\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# EUROS RTOS does not support shared libs\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/FreeBSD.cmake" : {
      "ObjectId" : "2dc5a2c797ba26f3d6f9f1f0b332692b26d00cdc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -pic\r\n",
        "Line" : 4,
        "CharPositionInLine" : 53
      },
      "1" : {
        "Text" : "# -shared\r\n",
        "Line" : 5,
        "CharPositionInLine" : 57
      },
      "2" : {
        "Text" : "# +s, flag for exe link to use shared lib\r\n",
        "Line" : 6,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : "# -rpath\r\n",
        "Line" : 7,
        "CharPositionInLine" : 61
      },
      "4" : {
        "Text" : "# : or empty\r\n",
        "Line" : 8,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : "# Shared libraries with no builtin soname may not be linked safely by\r\n\n# specifying the file path.\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Fuchsia.cmake" : {
      "ObjectId" : "1ae0e7d24a189a89851fc83d6a925166f2757bd2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Shared libraries with no builtin soname may not be linked safely by\r\n\n# specifying the file path.\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/GHS-MULTI-Initialize.cmake" : {
      "ObjectId" : "da35290b96e66bc0fc8390f3e3a8ba4af8b76bcd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Setup Greenhills MULTI specific compilation information\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Assume the C:/ghs/int#### directory that is latest is preferred\r\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#Try to look for known registry values\r\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#int1122\r\n\n#int1104\r\n",
        "Line" : 26,
        "CharPositionInLine" : 143
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/GHS-MULTI.cmake" : {
      "ObjectId" : "a2cd9bad2b9b5a608f9a525fff9f3e1b220e2462",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/GNU.cmake" : {
      "ObjectId" : "508eb20c82ebf61ece52a8d2b0c0ed5e923d98f2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GCC is the default compiler on GNU/Hurd.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/GNUtoMS_lib.cmake" : {
      "ObjectId" : "0c964e8414d482403323ad9f8b95953c49046466",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Usage: cmake -Dlib=lib.bat -Ddef=out.def -Ddll=out.dll -Dimp=out.dll.a -P GNUtoMS_lib.cmake\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# .dll file name\r\n",
        "Line" : 2,
        "CharPositionInLine" : 41
      },
      "2" : {
        "Text" : "# .dll.a -> .lib\r\n",
        "Line" : 3,
        "CharPositionInLine" : 56
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Generic-ADSP-ASM.cmake" : {
      "ObjectId" : "a326f19063086b66c31e26a4a6708367a212fa5a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Generic-ADSP-C.cmake" : {
      "ObjectId" : "a6bacc6eb34f927f3dbc5334fb3f2e668deb5dc2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Generic-ADSP-CXX.cmake" : {
      "ObjectId" : "d18bd533aab19bd4c9c88954ee67a975217a1127",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Generic-ADSP-Common.cmake" : {
      "ObjectId" : "16811b2d9e8dc7363ba3c7be84c1e22c2a3bed74",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# support for the Analog Devices toolchain for their DSPs\r\n\n# Raphael Cotty\" <raphael.cotty (AT) googlemail.com>\r\n\n#\r\n\n# it supports three architectures:\r\n\n# Blackfin\r\n\n# TS (TigerShark)\r\n\n# 21k (Sharc 21xxx)\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if ADSP_PROCESSOR has not been set, but CMAKE_SYSTEM_PROCESSOR has,\r\n\n# assume that this is the processor name to use for the compiler\r\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# if ADSP_PROCESSOR_SILICIUM_REVISION has not been set, use \"none\"\r\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# this file is included from the C and CXX files, so handle both here\r\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# detect architecture\r\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# default if nothing matches\r\n",
        "Line" : 62,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : "# vdk support\r\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# loader support\r\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# BOOT_MODE: prom, flash, spi, spislave, UART, TWI, FIFO\r\n\n# FORMAT: hex, ASCII, binary, include\r\n\n# WIDTH: 8, 16\r\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Generic-SDCC-C.cmake" : {
      "ObjectId" : "3093b08234a73215f1e878fb9c02682830aef38c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file implements basic support for sdcc (http://sdcc.sourceforge.net/)\r\n\n# a free C compiler for 8 and 16 bit microcontrollers.\r\n\n# To use it either a toolchain file is required or cmake has to be run like this:\r\n\n# cmake -DCMAKE_C_COMPILER=sdcc -DCMAKE_SYSTEM_NAME=Generic <dir...>\r\n\n# Since sdcc doesn't support C++, C++ support should be disabled in the\r\n\n# CMakeLists.txt using the project() command:\r\n\n# project(my_project C)\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# lib\r\n",
        "Line" : 12,
        "CharPositionInLine" : 45
      },
      "2" : {
        "Text" : "# .so\r\n",
        "Line" : 13,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : "# intel hex file\r\n",
        "Line" : 16,
        "CharPositionInLine" : 45
      },
      "4" : {
        "Text" : "# find sdcclib as CMAKE_AR\r\n\n# since cmake may already have searched for \"ar\", sdcclib has to\r\n\n# be searched with a different variable name (SDCCLIB_EXECUTABLE)\r\n\n# and must then be forced into the cache\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_C_FLAGS_INIT and CMAKE_EXE_LINKER_FLAGS_INIT should be set in a CMAKE_SYSTEM_PROCESSOR file\r\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# compile a C file into an object file\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# link object files to an executable\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# needs sdcc 2.7.0 + sddclib from cvs\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# not supported by sdcc\r\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Generic.cmake" : {
      "ObjectId" : "499f81873986cb3a85cab03bcb8d09faebce95b3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a platform definition file for platforms without\r\n\n# operating system, typically embedded platforms.\r\n\n# It is used when CMAKE_SYSTEM_NAME is set to \"Generic\"\r\n\n#\r\n\n# It is intentionally empty, since nothing is known\r\n\n# about the platform. So everything has to be specified\r\n\n# in the system/compiler files ${CMAKE_SYSTEM_NAME}-<compiler_basename>.cmake\r\n\n# and/or ${CMAKE_SYSTEM_NAME}-<compiler_basename>-${CMAKE_SYSTEM_PROCESSOR}.cmake\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# (embedded) targets without operating system usually don't support shared libraries\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To help the find_xxx() commands, set at least the following so CMAKE_FIND_ROOT_PATH\r\n\n# works at least for some simple cases:\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-GNU-ASM.cmake" : {
      "ObjectId" : "7d031f4ce484e410d3a56192487db42e700d9a1f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-GNU-C.cmake" : {
      "ObjectId" : "1ae10462e4fb4f1b87e666e15c289b3f397c5a28",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-GNU-CXX.cmake" : {
      "ObjectId" : "1ab96034b52d5d043e80fb46029c917b16d1da8d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-GNU-Fortran.cmake" : {
      "ObjectId" : "07d850d74812ae101ea1a2ff3184739002ebb027",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-GNU.cmake" : {
      "ObjectId" : "5ff65bc4989b4f287410c295e32c74f3c24de937",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-HP-ASM.cmake" : {
      "ObjectId" : "0b1405d836e54f416f0d97d07fe1288085c72bbb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-HP-C.cmake" : {
      "ObjectId" : "630df79f0382f1a97044dd4e0a79c6670ef617aa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-HP-CXX.cmake" : {
      "ObjectId" : "57351d34be52dab9213065d6e52650e5a2f2de63",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-HP-Fortran.cmake" : {
      "ObjectId" : "c8c9c503c7ba916d1400d49a7ce600d47363dd25",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX-HP.cmake" : {
      "ObjectId" : "f48a0c3293cf39ef5b3829a7ecedb94ce3356fb6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/HP-UX.cmake" : {
      "ObjectId" : "107d92927c22f2abf80df26744a3ee13f299a120",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .so\r\n",
        "Line" : 6,
        "CharPositionInLine" : 50
      },
      "1" : {
        "Text" : "# The HP linker needs to find transitive shared library dependencies\r\n\n# in the -L path.  Therefore the runtime path must be added to the\r\n\n# link line with -L flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shared libraries with no builtin soname may not be linked safely by\r\n\n# specifying the file path.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set flags for gcc support\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Look in both 32-bit and 64-bit implict link directories, but tell\r\n\n# CMake not to pass the paths to the linker.  The linker will find the\r\n\n# library for the proper architecture.  In the future we should detect\r\n\n# which path will be used by the linker.  Since the pointer type size\r\n\n# CMAKE_SIZEOF_VOID_P is not set until after this file executes, we\r\n\n# would need to append to CMAKE_SYSTEM_LIBRARY_PATH at a later point\r\n\n# (after CMakeTest(LANG)Compiler.cmake runs for at least one language).\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Initialize C and CXX link type selection flags.  These flags are\r\n\n# used when building a shared library, shared module, or executable\r\n\n# that links to other libraries to select whether to use the static or\r\n\n# shared versions of the libraries.\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Haiku.cmake" : {
      "ObjectId" : "1d4523f504545941a19cb21bd9c7f93b6e4a065c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# process only once\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Determine, if the C or C++ compiler is configured for a secondary\r\n\n# architecture. If so, that will change the search paths we set below. We check\r\n\n# whether the compiler's library search paths contain a\r\n\n# \"/boot/system/develop/lib/<subdir>/\", which we assume to be the secondary\r\n\n# architecture specific subdirectory and extract the name of the architecture\r\n\n# accordingly.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# First of all, find a C or C++ compiler we can run. The \"arg1\" is necessary\r\n\n# here for compilers such as \"distcc gcc-x86\" or \"ccache gcc-x86\"\r\n\n# TODO See CMakeDetermineCompilerId.cmake for some more things we may want to do.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Override CMAKE_*LIBRARY_ARCHITECTURE. This will cause FIND_LIBRARY to search\r\n\n# the libraries in the correct subdirectory first. It still isn't completely\r\n\n# correct, since the parent directories shouldn't be searched at all. The\r\n\n# primary architecture library might still be found, if there isn't one\r\n\n# installed for the secondary architecture or it is installed in a less\r\n\n# specific location.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/IRIX.cmake" : {
      "ObjectId" : "585fdfafe071a34c91461866751335e409f9a75a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -rpath\r\n",
        "Line" : 3,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : "# : or empty\r\n",
        "Line" : 4,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : "# set flags for gcc support\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The IRIX linker needs to find transitive shared library dependencies\r\n\n# in the -L path.\r\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/IRIX64.cmake" : {
      "ObjectId" : "d18ba9c687188a5121a559eb7de5cca40db05667",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -rpath\r\n",
        "Line" : 3,
        "CharPositionInLine" : 61
      },
      "1" : {
        "Text" : "# : or empty\r\n",
        "Line" : 4,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : "# Set default flags init.\r\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# If no -o32, -n32, or -64 flag is given, set a reasonable default.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Check if this is a 64-bit CMake.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Set initial flags to match cmake executable.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Set remaining defaults.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The IRIX linker needs to find transitive shared library dependencies\r\n\n# in the -L path.\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Absoft-Fortran.cmake" : {
      "ObjectId" : "fb822285d80a6b7ac74aa512e3a8fd24bc1e05f4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runs gcc under the hood.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 40
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-CCur-Fortran.cmake" : {
      "ObjectId" : "1e5a1c69c129b7139a7b78c0a311548e68f6e347",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Clang-C.cmake" : {
      "ObjectId" : "b08ea4fd660833d0eb5a56a6f6d48a7ac11b5bcb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Clang-CXX.cmake" : {
      "ObjectId" : "0eb6839dd1582353b14d2d68ca5fe0497a22afc4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Determine-CXX.cmake" : {
      "ObjectId" : "9136e5c8642edf1b1c77690f8c80b1fc261806cb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-GNU-C.cmake" : {
      "ObjectId" : "d0c912362d281e47b36794b914c74df5ad331ec2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-GNU-CXX.cmake" : {
      "ObjectId" : "19e68a7cfdcb34910ff6c235ad5f8ae3135c67ad",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-GNU-Fortran.cmake" : {
      "ObjectId" : "dea3873f3a26c2774b387bbddcffa68714e225a9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-GNU.cmake" : {
      "ObjectId" : "e14f6ebfdfd9f41e1aef873ffa223ca098139d70",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We pass this for historical reasons.  Projects may have\r\n\n# executables that use dlopen but do not set ENABLE_EXPORTS.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Intel-C.cmake" : {
      "ObjectId" : "0f686f68fb6f1e547e7c7a0a51f039d773fc2821",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Intel-CXX.cmake" : {
      "ObjectId" : "5a9c2813a759003030975f86733ef2d338d12830",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Intel-Fortran.cmake" : {
      "ObjectId" : "efdf5fec01d1b55f28fdcfd8ff08782a9fe58233",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-Intel.cmake" : {
      "ObjectId" : "39a6a2519b15e07db58bb681962d947381742b60",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We pass this for historical reasons.  Projects may have\r\n\n# executables that use dlopen but do not set ENABLE_EXPORTS.\r\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# INTERPROCEDURAL_OPTIMIZATION\r\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-NAG-Fortran.cmake" : {
      "ObjectId" : "441f00c2149abf95e1760ceb53f21867e77962c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Runs gcc under the hood.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 41
      },
      "1" : {
        "Text" : "# Need one \"-Wl,\" level to send flag through to gcc.\r\n\n# Use \"-Xlinker\" to get through gcc to real linker.\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PGI-C.cmake" : {
      "ObjectId" : "37170deddc57939451037927188bd805769208e2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PGI-CXX.cmake" : {
      "ObjectId" : "24074e7cf91d6fe740f14caa80b83d011eff3259",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PGI-Fortran.cmake" : {
      "ObjectId" : "7dceebd1d564fb4fa50ee98cb8b097361f5292f9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PGI.cmake" : {
      "ObjectId" : "3c34d2d25852115e6e22600671a6ea5a46788c4e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shared library compile and link flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PathScale-C.cmake" : {
      "ObjectId" : "de86f7fde5bb9e05671e462522e328e7fe76c949",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PathScale-CXX.cmake" : {
      "ObjectId" : "58c9329609b8163cd4f9175641f2f7562e85bf85",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PathScale-Fortran.cmake" : {
      "ObjectId" : "99157ece283600e8969bb4a8a394524e66ccc631",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-PathScale.cmake" : {
      "ObjectId" : "7f078ec96fc5512ba51e6fde075fc14a40053087",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shared library compile and link flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-SunPro-CXX.cmake" : {
      "ObjectId" : "fef3392641602cdfd1da3e44ca0d023c09a4543a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sun C++ 5.9 does not support -Wl, but Sun C++ 5.11 does not work without it.\r\n\n# Query the compiler flags to detect whether to use -Wl.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-TinyCC-C.cmake" : {
      "ObjectId" : "ecb978908f03b4fa90e778b1cd071ef5497ba3f0",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-VisualAge-C.cmake" : {
      "ObjectId" : "cf8b4c0bd53af341c133669aa9f2d287b18a1cdd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-VisualAge-CXX.cmake" : {
      "ObjectId" : "10dca31c37bda457adb8c3f5b992fa6f2c462e1d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-VisualAge-Fortran.cmake" : {
      "ObjectId" : "e69abe48c2e6b9af42dcfc98ecedb7cd19240ef3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-XL-C.cmake" : {
      "ObjectId" : "57da8b277e48fddb996c6a49c3b0c59309dc677d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-XL-CXX.cmake" : {
      "ObjectId" : "7fbb963293391650ae60afe05edd1f0c818eb3bb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-XL-Fortran.cmake" : {
      "ObjectId" : "4c8aa0e488d9303aa91aa16c37f4c52e8131390f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux-como.cmake" : {
      "ObjectId" : "fd8310a92120a6531d7bf04e46be78b51341be0c",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create a shared C++ library\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create a C++ static library\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Linux.cmake" : {
      "ObjectId" : "739698327b239bdabafcfd36cd604e6e873355c1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Shared libraries with no builtin soname may not be linked safely by\r\n\n# specifying the file path.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Debian policy requires that shared libraries be installed without\r\n\n# executable permission.  Fedora policy requires that shared libraries\r\n\n# be installed with the executable permission.  Since the native tools\r\n\n# create shared libraries with execute permission in the first place a\r\n\n# reasonable policy seems to be to install with execute permission by\r\n\n# default.  In order to support debian packages we provide an option\r\n\n# here.  The option default is based on the current distribution, but\r\n\n# packagers can set it explicitly on the command line.\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Store the decision variable in the cache.  This preserves any\r\n\n# setting the user provides on the command line.\r\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Store the decision variable as an internal cache entry to avoid\r\n\n# checking the platform every time.  This option is advanced enough\r\n\n# that only package maintainers should need to adjust it.  They are\r\n\n# capable of providing a setting on the command line.\r\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Match multiarch library directory names.\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Debian has lib32 and lib64 paths only for compatibility so they should not be\r\n\n# searched.\r\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/MP-RAS.cmake" : {
      "ObjectId" : "caaa0553046e57c071aadb0aa94783f4ade98f8d",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/MirBSD.cmake" : {
      "ObjectId" : "882dc941af94c3fffc7fd21c775214f5903b6cd7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/NetBSD.cmake" : {
      "ObjectId" : "b4bcf3abeb61e450bfb664f0d32f2ee9be488286",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -pic\r\n",
        "Line" : 4,
        "CharPositionInLine" : 53
      },
      "1" : {
        "Text" : "# -shared\r\n",
        "Line" : 5,
        "CharPositionInLine" : 57
      },
      "2" : {
        "Text" : "# +s, flag for exe link to use shared lib\r\n",
        "Line" : 6,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : "# -rpath\r\n",
        "Line" : 7,
        "CharPositionInLine" : 61
      },
      "4" : {
        "Text" : "# : or empty\r\n",
        "Line" : 8,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/OSF1.cmake" : {
      "ObjectId" : "af2c5c87d8dbb0cb1c3068c5210e50f0cd510b5b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OSF/1 1.3 from OSF using ELF, and derivatives, including AD2\r\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# -pic\r\n\n# -pic\r\n",
        "Line" : 9,
        "CharPositionInLine" : 48
      },
      "2" : {
        "Text" : "# -shared\r\n",
        "Line" : 16,
        "CharPositionInLine" : 86
      },
      "3" : {
        "Text" : "# include $(CMAKE_BINARY_DIR)/...\r\n",
        "Line" : 30,
        "CharPositionInLine" : 36
      },
      "4" : {
        "Text" : "# include the gcc flags\r\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# use default OSF compiler flags\r\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/OpenBSD.cmake" : {
      "ObjectId" : "c8a7bb5f0e4fcaa2cd47c995a43facba946bcafc",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On OpenBSD, the compile time linker does not share it's configuration with\r\n\n# the runtime linker.  This will extract the library search paths from the\r\n\n# system's ld.so.hints file which will allow CMake to set the appropriate\r\n\n# -rpath-link flags\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OpenBSD has no multilib\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# OpenBSD policy requires that shared libraries be installed without\r\n\n# executable permission.\r\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/OpenVMS.cmake" : {
      "ObjectId" : "e6ecbbb2b586861f9ecd2389ede005abe17b6612",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .exe\r\n",
        "Line" : 8,
        "CharPositionInLine" : 45
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/QNX.cmake" : {
      "ObjectId" : "00c9da62bb52aea28c7e2ec6678890eb88e2c103",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Shared libraries with no builtin soname may not be linked safely by\r\n\n# specifying the file path.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/RISCos.cmake" : {
      "ObjectId" : "d7ad759cbfb8f1643842de6e34b07ff6213c222a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SCO_SV.cmake" : {
      "ObjectId" : "9310bd4046729c38cbad3a831ae487756318b62e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SINIX.cmake" : {
      "ObjectId" : "a56da926d434de26dbeee7e659be39f5aeb17d77",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-GNU-C.cmake" : {
      "ObjectId" : "c6ad7abb329a9e4fcc69bb6d7ca2080331ac74c2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-GNU-CXX.cmake" : {
      "ObjectId" : "a4585f450d56ad489f9763cd712ebc132d6365b3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-GNU-Fortran.cmake" : {
      "ObjectId" : "95329a4cc9705a1633f895dde650765520cbd70a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-GNU.cmake" : {
      "ObjectId" : "539b0beecf12393111aed250cfd9b2a28db45cfa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-PathScale-C.cmake" : {
      "ObjectId" : "0448f1a2bc59c134da5ab62d2f98bfe460022169",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-PathScale-CXX.cmake" : {
      "ObjectId" : "00e1269060d3c6d0121f411aaa5333e2c08cdc71",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-PathScale-Fortran.cmake" : {
      "ObjectId" : "7cb0217ab86a1e4f23984aa691c250bdc77f94de",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS-PathScale.cmake" : {
      "ObjectId" : "07865334f27bd11eaf9acdf6b9e9bcf89241140b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shared library compile and link flags.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/SunOS.cmake" : {
      "ObjectId" : "66149b72eb393b3187e4bdf7862448d066e65645",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The Sun linker needs to find transitive shared library dependencies\r\n\n# in the -L path.\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Shared libraries with no builtin soname may not be linked safely by\r\n\n# specifying the file path.\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Tru64.cmake" : {
      "ObjectId" : "6c8a8ec408562c8fef27f34fdb2092bafa8bf6fb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/ULTRIX.cmake" : {
      "ObjectId" : "1072c4b52aea4615275d737e83c7b7e0c1ad5baf",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/UNIX_SV.cmake" : {
      "ObjectId" : "98df39e984579971ae141efa4f7064090ed1e0a4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/UnixPaths.cmake" : {
      "ObjectId" : "c1887d5ee71e29260344f4832e840ae96f3cf0e3",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Block multiple inclusion because \"CMakeCInformation.cmake\" includes\r\n\n# \"Platform/${CMAKE_SYSTEM_NAME}\" even though the generic module\r\n\n# \"CMakeSystemSpecificInformation.cmake\" already included it.\r\n\n# The extra inclusion is a work-around documented next to the include()\r\n\n# call, so this can be removed when the work-around is removed.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# also add the install directory of the running cmake to the search directories\r\n\n# CMAKE_ROOT is CMAKE_INSTALL_PREFIX/share/cmake, so we need to go two levels up\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List common installation prefixes.  These will be used for all\r\n\n# search types.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Standard\r\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# CMake install location\r\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Project install destination.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# User-supplied staging prefix.\r\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# List common include file locations not under the common prefixes.\r\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Windows API on Cygwin\r\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# X11\r\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Other\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Windows API on Cygwin\r\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# X11\r\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Other\r\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Enable use of lib32 and lib64 search path variants by default.\r\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/UnixWare.cmake" : {
      "ObjectId" : "b99ceb0850140d75dda2e122dedf30569abfe4f6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Borland-C.cmake" : {
      "ObjectId" : "89ffe45b72a81f666648a6611f43ad73ccfa1aba",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Borland-CXX.cmake" : {
      "ObjectId" : "6a81bf633215d08197386f5a119bf41b1dab8016",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Clang-C.cmake" : {
      "ObjectId" : "40a66c2d9eb45e9cf779d36e3d3dd80b96351125",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Clang-CXX.cmake" : {
      "ObjectId" : "6327b684286cc954ea954ba8e7721902c6578616",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Clang.cmake" : {
      "ObjectId" : "31cf70537509d626ec04597bf75c2070c4d107e6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Determine-CXX.cmake" : {
      "ObjectId" : "e49dfce196c144f5d20900699a510abdcca33f29",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Exclude C++ compilers differing from C compiler only by case\r\n\n# because this platform may have a case-insensitive filesystem.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Embarcadero-C.cmake" : {
      "ObjectId" : "516dae68bd8cb8b8de0f09fcd3d6e980d740d843",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Embarcadero-CXX.cmake" : {
      "ObjectId" : "1311a0ab78b1e88712b69e5ccc3a3bc2c6bbaa17",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Embarcadero.cmake" : {
      "ObjectId" : "a1224d35ed463c3e690310346df615406434f148",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Borland target type flags (bcc32 -h -t):\r\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# -tW  GUI App         (implies -U__CONSOLE__)\r\n\n# -tWC Console App     (implies -D__CONSOLE__=1)\r\n\n# -tWD Build a DLL     (implies -D__DLL__=1 -D_DLL=1)\r\n\n# -tWM Enable threads  (implies -D__MT__=1 -D_MT=1)\r\n\n# -tWR Use DLL runtime (implies -D_RTLDLL, and '-tW' too!!)\r\n",
        "Line" : 15,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "# Notes:\r\n\n#  - The flags affect linking so we pass them to the linker.\r\n\n#  - The flags affect preprocessing so we pass them to the compiler.\r\n\n#  - Since '-tWR' implies '-tW' we use '-tWR -tW-' instead.\r\n\n#  - Since '-tW-' disables '-tWD' we use '-tWR -tW- -tWD' for DLLs.\r\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Target is a console application\r\n\n# Target is a shared library\r\n\n# Target is multi-threaded\r\n\n# Target uses the dynamic RTL\r\n\n# Target is a Windows application\r\n",
        "Line" : 27,
        "CharPositionInLine" : 17
      },
      "6" : {
        "Text" : "# uncomment these out to debug makefiles\r\n\n#set(CMAKE_START_TEMP_FILE \"\")\r\n\n#set(CMAKE_END_TEMP_FILE \"\")\r\n\n#set(CMAKE_VERBOSE_MAKEFILE 1)\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Borland cannot handle + in the file name, so mangle object file name\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# extra flags for a win32 exe\r\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# extra flags for a console app\r\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The Borland link tool does not support multiple concurrent\r\n\n# invocations within a single working directory.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Note: This variable is a ';' separated list\r\n",
        "Line" : 75,
        "CharPositionInLine" : 50
      },
      "12" : {
        "Text" : "# ... while this is a space separated string.\r\n",
        "Line" : 76,
        "CharPositionInLine" : 51
      },
      "13" : {
        "Text" : "# compile a source file into an object file\r\n\n# place <DEFINES> outside the response file because Borland refuses\r\n\n# to parse quotes from the response file.\r\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# \"implib -c -w <TARGET_IMPLIB> <TARGET>\"\r\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# place <DEFINES> outside the response file because Borland refuses\r\n\n# to parse quotes from the response file.\r\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Borland >= 5.6 allows -P option for cpp32, <= 5.5 does not\r\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Create a module library.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Create an import library for another target.\r\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Create a shared library.\r\n\n# First create a module and then its import library.\r\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# create a static library\r\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Initial configuration flags.\r\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-G95-Fortran.cmake" : {
      "ObjectId" : "51965e5990c84c663691d0d162b65dc5f642dbf8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-GNU-C-ABI.cmake" : {
      "ObjectId" : "a1f91efc902a3f68c26cff93614973e5d1cef188",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-GNU-C.cmake" : {
      "ObjectId" : "f9c9ee568e437214269be3578590cc492ad8e7db",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-GNU-CXX-ABI.cmake" : {
      "ObjectId" : "2c66549391095a85240c40bc424f78f7361b4463",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-GNU-CXX.cmake" : {
      "ObjectId" : "5bcec9b4ab672213de77d7666792ef8960f0bea1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-GNU-Fortran-ABI.cmake" : {
      "ObjectId" : "b96b276c51ce2470386d54b18101da02b7d3d994",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-GNU-Fortran.cmake" : {
      "ObjectId" : "e719720513408159609d2085e8198761dbe839c5",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gfortran on 64-bit MinGW defines __SIZEOF_POINTER__\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-GNU.cmake" : {
      "ObjectId" : "aafb3e4be4ad56af517bf9f6ec684ab391b076a1",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MinGW can also link to a MS .lib\r\n",
        "Line" : 23,
        "CharPositionInLine" : 42
      },
      "3" : {
        "Text" : "# Empty string: passing the file is enough\r\n",
        "Line" : 36,
        "CharPositionInLine" : 33
      },
      "4" : {
        "Text" : "# Check if GNU ld is too old to support @FILE syntax.\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create archiving rules to support large object file lists for static libraries.\r\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# No -fPIC on Windows\r\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We prefer \"@\" for response files but it is not supported by gcc 3.\r\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The GNU Fortran compiler reports an error:\r\n\n#   no input files; unwilling to write output files\r\n\n# when the response file is passed with \"-Wl,@\".\r\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Use \"-Wl,@\" to pass the response file to the linker.\r\n",
        "Line" : 90,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# The GNU 3.x compilers do not support response files (only linkers).\r\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Link libraries are generated only for the front-end.\r\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Use \"@\" to pass the response file to the front-end.\r\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Binary link rules.\r\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Support very long lists of object files.\r\n\n# TODO: check for which gcc versions this is still needed, not needed for gcc >= 4.4.\r\n\n# Ninja generator doesn't support this work around.\r\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# The gcc/collect2/ld toolchain does not use response files\r\n\n# internally so we cannot pass long object lists.  Instead pass\r\n\n# the object file list in a response file to the archiver to put\r\n\n# them in a temporary archive.  Hand the archive to the linker.\r\n",
        "Line" : 117,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# Find MS development environment setup script for this architecture.\r\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Create helper script to run lib.exe from MS environment.\r\n",
        "Line" : 174,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Teach CMake how to create a MS import library at link time.\r\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 20
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Intel-ASM.cmake" : {
      "ObjectId" : "a1cad7f180d5aba2cc201567fd6d702aeac6a8c2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Intel-C.cmake" : {
      "ObjectId" : "ee563a85c352b20b18d05969744155b095f1ed75",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Intel-CXX.cmake" : {
      "ObjectId" : "7dcc8dd0d5b2b3bcac149bb64d1bb8f2c1c1f14b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Intel-Fortran.cmake" : {
      "ObjectId" : "fba29fb56477987a8e12749fc344150286e0f17a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Intel.cmake" : {
      "ObjectId" : "d84e7a4065ccf43c2b3c84449bae0adb13b434be",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-MSVC-C.cmake" : {
      "ObjectId" : "6836014d808f326c56f9f661fa9dab11d05cfa17",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-MSVC-CXX.cmake" : {
      "ObjectId" : "bbba79b6c866f7356d4f904802373779bf7dfbc6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-MSVC.cmake" : {
      "ObjectId" : "821f7c8a8d886400cf0125db98bf28e178f36593",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_LINKER) runs on an old build tree\r\n\n# (where link was hardcoded) and where CMAKE_LINKER isn't in the cache\r\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\r\n\n# hardcode CMAKE_LINKER here to link, so it behaves as it did before, Alex\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We no longer provide per-version variables.  Use MSVC_VERSION instead.\r\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# default to Debug builds\r\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compute an architecture family from the architecture id.\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Clang/C2 in MSVC14 Update 1 seems to not support -fsantinize (yet?)\r\n\n# set(_RTC1 \"-fsantinize=memory,safe-stack\")\r\n",
        "Line" : 190,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# executable linker flags\r\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# set the machine type\r\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add /debug and /INCREMENTAL:YES to DEBUG and RELWITHDEBINFO also add pdbtype\r\n\n# on versions that support it\r\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# for release and minsize release default to no incremental linking\r\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# for 2005 make sure the manifest is put in the dll with mt\r\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# note: MSVC 14 2015 Update 1 sets -fno-ms-compatibility by default, but this does not allow one to compile many projects\r\n\n# that include MS's own headers. CMake itself is affected project too.\r\n",
        "Line" : 289,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# TODO: Add '-Os' once VS generator maps it properly for Clang\r\n",
        "Line" : 295,
        "CharPositionInLine" : 73
      },
      "CommentCount" : 14
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-NMcl.cmake" : {
      "ObjectId" : "6e8cf65cc887360324b8288d7fca306322837935",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this is for the numega compiler which is really a front\r\n\n# end for visual studio, but adds memory checking code.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-NVIDIA-CUDA.cmake" : {
      "ObjectId" : "16bb291f9a473748055f958c2de154d4b2736c77",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-OpenWatcom-C.cmake" : {
      "ObjectId" : "57a925a2d3692918d873b0b9ee475c86127dbe5a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-OpenWatcom-CXX.cmake" : {
      "ObjectId" : "57a925a2d3692918d873b0b9ee475c86127dbe5a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-OpenWatcom.cmake" : {
      "ObjectId" : "0c71b465c50bbfd45476ae94f8b63fd6eff918f6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module is shared by multiple languages; use include blocker.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note: This variable is a ';' separated list\r\n",
        "Line" : 35,
        "CharPositionInLine" : 39
      },
      "3" : {
        "Text" : "# ... while this is a space separated string.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 40
      },
      "4" : {
        "Text" : "# single/multi-threaded                 /-bm\r\n\n# static/DLL run-time libraries         /-br\r\n\n# default is setup for multi-threaded + DLL run-time libraries\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compile a C++ file into an object file\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# compile a C file into an object file\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# preprocess a C source file\r\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# preprocess a C++ source file\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# create a C shared library\r\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# create a C shared module\r\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# create a C++ static library\r\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# create a C static library\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Watcom-C.cmake" : {
      "ObjectId" : "e77b15f0f5ec841fb561b43a8e15192a22ae0935",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-Watcom-CXX.cmake" : {
      "ObjectId" : "d417e66c37a71a2cbaae8c8a447b712d005a2fce",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-df.cmake" : {
      "ObjectId" : "235d9f59d6ca4b5fe1122039f9bca4a404308377",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# compiler support for fortran CVF compiler on windows\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create a C++ static library\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compile a C++ file into an object file\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# does the compiler support pdbtype and is it the newer compiler\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# executable linker flags\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows-windres.cmake" : {
      "ObjectId" : "f4ae86b73c675a68cb1f0b2b10789c07ecf1b3e8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Windows.cmake" : {
      "ObjectId" : "830d68af299f5e3b909d5cdbc3e3c1c66f554c36",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# lib\r\n",
        "Line" : 13,
        "CharPositionInLine" : 45
      },
      "1" : {
        "Text" : "# .so\r\n",
        "Line" : 14,
        "CharPositionInLine" : 49
      },
      "2" : {
        "Text" : "# .exe\r\n",
        "Line" : 17,
        "CharPositionInLine" : 45
      },
      "3" : {
        "Text" : "# for borland make long command lines are redirected to a file\r\n\n# with the following syntax, see Windows-bcc32.cmake for use\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for nmake make long command lines are redirected to a file\r\n\n# with the following syntax, see Windows-bcc32.cmake for use\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# uncomment these out to debug nmake and borland makefiles\r\n\n#set(CMAKE_START_TEMP_FILE \"\")\r\n\n#set(CMAKE_END_TEMP_FILE \"\")\r\n\n#set(CMAKE_VERBOSE_MAKEFILE 1)\r\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsCE-MSVC-C.cmake" : {
      "ObjectId" : "0dc5b6158b0d67f1150cf548ac56baebe76d29be",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsCE-MSVC-CXX.cmake" : {
      "ObjectId" : "d37b979332f4d6eb628db46be77708df7a7193d4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsCE.cmake" : {
      "ObjectId" : "bc40fe573e1225b1ed9c58bf5cf53d8253f1f28b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsPaths.cmake" : {
      "ObjectId" : "65023b766131f8261d48fe66780cc066cc6e8eb9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Block multiple inclusion because \"CMakeCInformation.cmake\" includes\r\n\n# \"Platform/${CMAKE_SYSTEM_NAME}\" even though the generic module\r\n\n# \"CMakeSystemSpecificInformation.cmake\" already included it.\r\n\n# The extra inclusion is a work-around documented next to the include()\r\n\n# call, so this can be removed when the work-around is removed.\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add the program-files folder(s) to the list of installation\r\n\n# prefixes.\r\n\n#\r\n\n# Windows 64-bit Binary:\r\n\n#   ENV{ProgramFiles(x86)} = [C:\\Program Files (x86)]\r\n\n#   ENV{ProgramFiles} = [C:\\Program Files]\r\n\n#   ENV{ProgramW6432} = [C:\\Program Files] or <not set>\r\n\n#\r\n\n# Windows 32-bit Binary on 64-bit Windows:\r\n\n#   ENV{ProgramFiles(x86)} = [C:\\Program Files (x86)]\r\n\n#   ENV{ProgramFiles} = [C:\\Program Files (x86)]\r\n\n#   ENV{ProgramW6432} = [C:\\Program Files]\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add the CMake install location.\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add other locations.\r\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Project install destination.\r\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# User-supplied staging prefix.\r\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# MinGW (useful when cross compiling from linux with CMAKE_FIND_ROOT_PATH set)\r\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# mingw can also link against dlls which can also be in /bin, so list this too\r\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsPhone-MSVC-C.cmake" : {
      "ObjectId" : "0dc5b6158b0d67f1150cf548ac56baebe76d29be",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsPhone-MSVC-CXX.cmake" : {
      "ObjectId" : "d37b979332f4d6eb628db46be77708df7a7193d4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsPhone.cmake" : {
      "ObjectId" : "bc40fe573e1225b1ed9c58bf5cf53d8253f1f28b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsStore-MSVC-C.cmake" : {
      "ObjectId" : "0dc5b6158b0d67f1150cf548ac56baebe76d29be",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsStore-MSVC-CXX.cmake" : {
      "ObjectId" : "d37b979332f4d6eb628db46be77708df7a7193d4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/WindowsStore.cmake" : {
      "ObjectId" : "bc40fe573e1225b1ed9c58bf5cf53d8253f1f28b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/Xenix.cmake" : {
      "ObjectId" : "6c8a8ec408562c8fef27f34fdb2092bafa8bf6fb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/eCos.cmake" : {
      "ObjectId" : "07067e641ada7d5768af7ac85d48a6ee75ea6db4",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# support for eCos http://ecos.sourceware.org\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Guard against multiple inclusion, which e.g. leads to multiple calls to add_definition() #12987\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -pic\r\n",
        "Line" : 9,
        "CharPositionInLine" : 48
      },
      "3" : {
        "Text" : "# -shared\r\n\n# +s, flag for exe link to use shared lib\r\n\n# -rpath\r\n\n# : or empty\r\n",
        "Line" : 10,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : "# lib\r\n\n# .a\r\n\n# same suffix as if built using UseEcos.cmake\r\n",
        "Line" : 18,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : "# eCos can be built only with gcc\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# find eCos system files\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# special link commands for eCos executables\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# eCos doesn't support shared libs\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/gas.cmake" : {
      "ObjectId" : "e28bd7a9af494cd6b50553081510327c9cda5a09",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to be done\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/kFreeBSD.cmake" : {
      "ObjectId" : "7a111ef9a8f073aae51092abfeb4bf30cbbc8206",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# kFreeBSD looks just like Linux.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Platform/syllable.cmake" : {
      "ObjectId" : "d302f69c67c15101cec9a1a1eeb48f2adba5ea60",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this is the platform file for the Syllable OS (http://www.syllable.org)\r\n\n# Syllable is a free OS (GPL), which is mostly POSIX conform\r\n\n# the linker accepts the rpath related arguments, but this is later on\r\n\n# ignored by the runtime linker\r\n\n# shared libs are found exclusively via the environment variable DLL_PATH,\r\n\n# which may contain also dirs containing the special variable @bindir@\r\n\n# by default @bindir@/lib is part of DLL_PATH\r\n\n# in order to run the cmake tests successfully it is required that also\r\n\n# @bindir@/. and @bindir@/../lib are in DLL_PATH\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -pic\r\n",
        "Line" : 15,
        "CharPositionInLine" : 53
      },
      "2" : {
        "Text" : "# -shared\r\n",
        "Line" : 16,
        "CharPositionInLine" : 57
      },
      "3" : {
        "Text" : "# +s, flag for exe link to use shared lib\r\n",
        "Line" : 17,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : "#set(CMAKE_EXE_EXPORTS_C_FLAG \"-Wl,--export-dynamic\")\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Initialize C link type selection flags.  These flags are used when\r\n\n# building a shared library, shared module, or executable that links\r\n\n# to other libraries to select whether to use the static or shared\r\n\n# versions of the libraries.\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# these are Syllable specific:\r\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/ProcessorCount.cmake" : {
      "ObjectId" : "ae7b04f301d8078cf86c9f093d290404613b8a88",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# ProcessorCount\r\n\n# --------------\r\n\n#\r\n\n# ProcessorCount(var)\r\n\n#\r\n\n# Determine the number of processors/cores and save value in ${var}\r\n\n#\r\n\n# Sets the variable named ${var} to the number of physical cores\r\n\n# available on the machine if the information can be determined.\r\n\n# Otherwise it is set to 0.  Currently this functionality is implemented\r\n\n# for AIX, cygwin, FreeBSD, HPUX, IRIX, Linux, Mac OS X, QNX, Sun and\r\n\n# Windows.\r\n\n#\r\n\n# This function is guaranteed to return a positive integer (>=1) if it\r\n\n# succeeds.  It returns 0 if there's a problem determining the processor\r\n\n# count.\r\n\n#\r\n\n# Example use, in a ctest -S dashboard script:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    include(ProcessorCount)\r\n\n#    ProcessorCount(N)\r\n\n#    if(NOT N EQUAL 0)\r\n\n#      set(CTEST_BUILD_FLAGS -j${N})\r\n\n#      set(ctest_test_args ${ctest_test_args} PARALLEL_LEVEL ${N})\r\n\n#    endif()\r\n\n#\r\n\n#\r\n\n#\r\n\n# This function is intended to offer an approximation of the value of\r\n\n# the number of compute cores available on the current machine, such\r\n\n# that you may use that value for parallel building and parallel\r\n\n# testing.  It is meant to help utilize as much of the machine as seems\r\n\n# reasonable.  Of course, knowledge of what else might be running on the\r\n\n# machine simultaneously should be used when deciding whether to request\r\n\n# a machine's full capacity all for yourself.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A more reliable way might be to compile a small C program that uses the CPUID\r\n\n# instruction, but that again requires compiler support or compiling assembler\r\n\n# code.\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Unknown:\r\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Windows:\r\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#message(\"ProcessorCount: WIN32, trying environment variable\")\r\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Mac, FreeBSD, OpenBSD (systems with sysctl):\r\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#message(\"ProcessorCount: trying sysctl '${ProcessorCount_cmd_sysctl}'\")\r\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Linux (systems with getconf):\r\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#message(\"ProcessorCount: trying getconf '${ProcessorCount_cmd_getconf}'\")\r\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# HPUX (systems with machinfo):\r\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#message(\"ProcessorCount: trying machinfo '${ProcessorCount_cmd_machinfo}'\")\r\n",
        "Line" : 100,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "#message(\"ProcessorCount: trying mpsched -s '${ProcessorCount_cmd_mpsched}'\")\r\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# IRIX (systems with hinv):\r\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#message(\"ProcessorCount: trying hinv '${ProcessorCount_cmd_hinv}'\")\r\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# AIX (systems with lsconf):\r\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#message(\"ProcessorCount: trying lsconf '${ProcessorCount_cmd_lsconf}'\")\r\n",
        "Line" : 144,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# QNX (systems with pidin):\r\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"ProcessorCount: trying pidin '${ProcessorCount_cmd_pidin}'\")\r\n",
        "Line" : 159,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Sun (systems where psrinfo tool is available)\r\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#message(\"ProcessorCount: trying psrinfo -p -v '${ProcessorCount_cmd_prvinfo}'\")\r\n",
        "Line" : 174,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# Sun (systems where uname -X emits \"NumCPU\" in its output):\r\n",
        "Line" : 176,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "#message(\"ProcessorCount: trying uname -X '${ProcessorCount_cmd_uname}'\")\r\n",
        "Line" : 186,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Execute this code when all previously attempted methods return empty\r\n\n# output:\r\n\n#\r\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Systems with /proc/cpuinfo:\r\n",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "#message(\"ProcessorCount: trying cpuinfo '${cpuinfo_file}'\")\r\n",
        "Line" : 200,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Haiku\r\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#message(\"ProcessorCount: trying sysinfo '${ProcessorCount_cmd_sysinfo}'\")\r\n",
        "Line" : 214,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Since cygwin builds of CMake do not define WIN32 anymore, but they still\r\n\n# run on Windows, and will still have this env var defined:\r\n\n#\r\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#message(\"ProcessorCount: last fallback, trying environment variable\")\r\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Ensure an integer return (avoid inadvertently returning an empty string\r\n\n# or an error string)... If it's not a decimal integer, return 0:\r\n\n#\r\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 31
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Qt4ConfigDependentSettings.cmake" : {
      "ObjectId" : "5c3594a7058c89c811e6f5b675ea134f358adf64",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# Qt4ConfigDependentSettings\r\n\n# --------------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This file is included by FindQt4.cmake, don't include it directly.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################\r\n\n#\r\n\n#       configuration/system dependent settings\r\n\n#\r\n\n###############################################\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find dependencies for some Qt modules\r\n\n# when doing builds against a static Qt, they are required\r\n\n# when doing builds against a shared Qt, they are not required\r\n\n# if a user needs the dependencies, and they couldn't be found, they can set\r\n\n# the variables themselves.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On Windows, qconfig.pri has \"shared\" for shared library builds\r\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# On other platforms, check file extension to know if its static\r\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# build using shared Qt needs -DQT_DLL on Windows\r\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QtOpenGL dependencies\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## system png\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## system jpeg\r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## system tiff\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## system mng\r\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# for X11, get X11 library directory\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## X11 SM\r\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Xi\r\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Xrender\r\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Xrandr\r\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Xcursor\r\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Xinerama\r\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Xfixes\r\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## fontconfig\r\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## system-freetype\r\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## system-zlib\r\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## openssl\r\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## dbus\r\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## glib\r\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Qt 4.2.0+ uses glib-2.0\r\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Qt 4.5+ also links to gobject-2.0\r\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "## clock-monotonic, just see if we need to link with rt\r\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# X11 libraries Qt always depends on\r\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Qt 4.0, 4.1, 4.2 use QuickTime\r\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Qt 4.2+ use AppKit\r\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 32
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Qt4Macros.cmake" : {
      "ObjectId" : "37d859d203846242bdd18f41914c2e908fec7ae2",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# Qt4Macros\r\n\n# ---------\r\n\n#\r\n\n#\r\n\n#\r\n\n# This file is included by FindQt4.cmake, don't include it directly.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################\r\n\n#\r\n\n#       Macros for building Qt files\r\n\n#\r\n\n######################################\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# macro used to create the names of output files preserving relative dirs\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# absolute path\r\n",
        "Line" : 57,
        "CharPositionInLine" : 48
      },
      "5" : {
        "Text" : "# helper macro to set up a moc rule\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For Windows, create a parameters file to work around command line length limit\r\n\n# Pass the parameters in a file.  Set the working directory to\r\n\n# be that containing the parameters file and reference it by\r\n\n# just the file name.  This is necessary because the moc tool on\r\n\n# MinGW builds does not seem to handle spaces in the path to the\r\n\n# file given with the @ syntax.\r\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# get include dirs and flags\r\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# dont run automoc on this file\r\n",
        "Line" : 154,
        "CharPositionInLine" : 73
      },
      "9" : {
        "Text" : "# QT4_WRAP_CPP(outfiles inputfile ... )\r\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# get include dirs\r\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# QT4_WRAP_UI(outfiles inputfile ... )\r\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# QT4_ADD_RESOURCES(outfiles inputfile ... )\r\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#  parse file for dependencies\r\n\n#  all files are absolute paths or relative to the location of the qrc file\r\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Since this cmake macro is doing the dependency scanning for these files,\r\n\n# let's make a configured file and add it as a dependency so cmake is run\r\n\n# again when dependencies need to be recomputed.\r\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# The .qrc file does not exist (yet). Let's add a dependency and hope\r\n\n# that it will be generated later\r\n",
        "Line" : 226,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# get the part before the \".xml\" suffix\r\n",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# _customName OPTIONS -some -options )\r\n",
        "Line" : 291,
        "CharPositionInLine" : 43
      },
      "18" : {
        "Text" : "# _optionalBasename _optionalClassName)\r\n",
        "Line" : 318,
        "CharPositionInLine" : 69
      },
      "19" : {
        "Text" : "# if \"SKIP_AUTOMOC\" is set to true, we will not handle this file here.\r\n\n# This is required to make uic work correctly:\r\n\n# we need to add generated .cpp files to the sources (to compile them),\r\n\n# but we cannot let automoc handle them, as the .cpp files don't exist yet when\r\n\n# cmake is run for the very first time on them -> however the .cpp files might\r\n\n# exist at a later run. at that time we need to skip them, so that we don't add two\r\n\n# different rules for the same moc file\r\n",
        "Line" : 370,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# make a .pro file to call lupdate on, so we don't make our commands too\r\n\n# long for some systems\r\n",
        "Line" : 427,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 21
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/SelectLibraryConfigurations.cmake" : {
      "ObjectId" : "de10343ed3804b3ee65f1777ee36965cec2ad217",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# SelectLibraryConfigurations\r\n\n# ---------------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# select_library_configurations( basename )\r\n\n#\r\n\n# This macro takes a library base name as an argument, and will choose\r\n\n# good values for basename_LIBRARY, basename_LIBRARIES,\r\n\n# basename_LIBRARY_DEBUG, and basename_LIBRARY_RELEASE depending on what\r\n\n# has been found and set.  If only basename_LIBRARY_RELEASE is defined,\r\n\n# basename_LIBRARY will be set to the release value, and\r\n\n# basename_LIBRARY_DEBUG will be set to basename_LIBRARY_DEBUG-NOTFOUND.\r\n\n# If only basename_LIBRARY_DEBUG is defined, then basename_LIBRARY will\r\n\n# take the debug value, and basename_LIBRARY_RELEASE will be set to\r\n\n# basename_LIBRARY_RELEASE-NOTFOUND.\r\n\n#\r\n\n# If the generator supports configuration types, then basename_LIBRARY\r\n\n# and basename_LIBRARIES will be set with debug and optimized flags\r\n\n# specifying the library to be used for the given configuration.  If no\r\n\n# build type has been set or the generator in use does not support\r\n\n# configuration types, then basename_LIBRARY and basename_LIBRARIES will\r\n\n# take only the release value, or the debug value if the release one is\r\n\n# not set.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This macro was adapted from the FindQt4 CMake module and is maintained by Will\r\n\n# Dicharry <wdicharry@stellarscience.com>.\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if the generator supports configuration types or CMAKE_BUILD_TYPE\r\n\n# is set, then set optimized and debug options.\r\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/SquishTestScript.cmake" : {
      "ObjectId" : "461ccac91b4bbd5bcbac67b4e301ae454c56b57f",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# SquishTestScript\r\n\n# ----------------\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n# This script launches a GUI test using Squish.  You should not call the\r\n\n# script directly; instead, you should access it via the SQUISH_ADD_TEST\r\n\n# macro that is defined in FindSquish.cmake.\r\n\n#\r\n\n# This script starts the Squish server, launches the test on the client,\r\n\n# and finally stops the squish server.  If any of these steps fail\r\n\n# (including if the tests do not pass) then a fatal error is raised.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# print out the variable that we are using\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# parse enviornment variables\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# record Qt lib directory\r\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# run the test\r\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check for an error with running the test\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/SystemInformation.cmake" : {
      "ObjectId" : "dcf9d17c5197c54017ecb339dd17dc22d07debd8",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# first get the standard information for th platform\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# include other files if they are present, such as when run from within the\r\n\n# binary tree\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/TestBigEndian.cmake" : {
      "ObjectId" : "aaf5185c07fb43800b2b579f5d66e34fa57dbdcd",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# TestBigEndian\r\n\n# -------------\r\n\n#\r\n\n# Define macro to determine endian type\r\n\n#\r\n\n# Check if the system is big endian or little endian\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   TEST_BIG_ENDIAN(VARIABLE)\r\n\n#   VARIABLE - variable to store the result to\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# on mac, if there are universal binaries built both will be true\r\n\n# return the result depending on the machine on which cmake runs\r\n",
        "Line" : 70,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/TestCXXAcceptsFlag.cmake" : {
      "ObjectId" : "6bd99b2a944262982dc86f7320f05322cb3d5a28",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# TestCXXAcceptsFlag\r\n\n# ------------------\r\n\n#\r\n\n# Deprecated.  See :module:`CheckCXXCompilerFlag`.\r\n\n#\r\n\n# Check if the CXX compiler accepts a flag.\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#  CHECK_CXX_ACCEPTS_FLAG(<flags> <variable>)\r\n\n#\r\n\n# ``<flags>``\r\n\n#  the flags to try\r\n\n# ``<variable>``\r\n\n#  variable to store the result\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/TestForANSIForScope.cmake" : {
      "ObjectId" : "7bf350e03317c3eef27404004b8c0d84351736fa",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# TestForANSIForScope\r\n\n# -------------------\r\n\n#\r\n\n# Check for ANSI for scope support\r\n\n#\r\n\n# Check if the compiler restricts the scope of variables declared in a\r\n\n# for-init-statement to the loop body.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_NO_ANSI_FOR_SCOPE - holds result\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/TestForANSIStreamHeaders.cmake" : {
      "ObjectId" : "12e5f9fd851b29ac50e277808fe51c492fae96ce",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# TestForANSIStreamHeaders\r\n\n# ------------------------\r\n\n#\r\n\n# Test for compiler support of ANSI stream headers iostream, etc.\r\n\n#\r\n\n# check if the compiler supports the standard ANSI iostream header\r\n\n# (without the .h)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_NO_ANSI_STREAM_HEADERS - defined by the results\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/TestForSSTREAM.cmake" : {
      "ObjectId" : "1d0624436e6786b871f2bb63c093e2202ad1310a",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# TestForSSTREAM\r\n\n# --------------\r\n\n#\r\n\n# Test for compiler support of ANSI sstream header\r\n\n#\r\n\n# check if the compiler supports the standard ANSI sstream header\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_NO_ANSI_STRING_STREAM - defined by the results\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/TestForSTDNamespace.cmake" : {
      "ObjectId" : "dcf105469c23580bebbfd93dcfcbbda80e60294e",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# TestForSTDNamespace\r\n\n# -------------------\r\n\n#\r\n\n# Test for std:: namespace support\r\n\n#\r\n\n# check if the compiler supports std:: on stl classes\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   CMAKE_NO_STD_NAMESPACE - defined by the results\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UseEcos.cmake" : {
      "ObjectId" : "f0a87de78fe799e14ac9646c9dc506c40202718b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UseEcos\r\n\n# -------\r\n\n#\r\n\n# This module defines variables and macros required to build eCos application.\r\n\n#\r\n\n# This file contains the following macros:\r\n\n# ECOS_ADD_INCLUDE_DIRECTORIES() - add the eCos include dirs\r\n\n# ECOS_ADD_EXECUTABLE(name source1 ...  sourceN ) - create an eCos\r\n\n# executable ECOS_ADJUST_DIRECTORY(VAR source1 ...  sourceN ) - adjusts\r\n\n# the path of the source files and puts the result into VAR\r\n\n#\r\n\n# Macros for selecting the toolchain: ECOS_USE_ARM_ELF_TOOLS() - enable\r\n\n# the ARM ELF toolchain for the directory where it is called\r\n\n# ECOS_USE_I386_ELF_TOOLS() - enable the i386 ELF toolchain for the\r\n\n# directory where it is called ECOS_USE_PPC_EABI_TOOLS() - enable the\r\n\n# PowerPC toolchain for the directory where it is called\r\n\n#\r\n\n# It contains the following variables: ECOS_DEFINITIONS\r\n\n# ECOSCONFIG_EXECUTABLE ECOS_CONFIG_FILE - defaults to ecos.ecc, if your\r\n\n# eCos configuration file has a different name, adjust this variable for\r\n\n# internal use only:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   ECOS_ADD_TARGET_LIB\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# first check that ecosconfig is available\r\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check that ECOS_REPOSITORY is set correctly\r\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check that tclsh (coming with TCL) is available, otherwise ecosconfig doesn't work\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#add the globale include-diretories\r\n\n#usage: ECOS_ADD_INCLUDE_DIRECTORIES()\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#check for ProjectSources.txt one level higher\r\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#the ecos include directory\r\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#we want to compile for the xscale processor, in this case the following macro has to be called\r\n\n#usage: ECOS_USE_ARM_ELF_TOOLS()\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#for linking\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#for compiling\r\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#for the obj-tools\r\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#usage: ECOS_USE_PPC_EABI_TOOLS()\r\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#for linking\r\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#for compiling\r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#for the obj-tools\r\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#usage: ECOS_USE_I386_ELF_TOOLS()\r\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#for linking\r\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#for compiling\r\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#for the obj-tools\r\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#since the actual sources are located one level upwards\r\n\n#a \"../\" has to be prepended in front of every source file\r\n\n#call the following macro to achieve this, the first parameter\r\n\n#is the name of the new list of source files with adjusted paths,\r\n\n#followed by all source files\r\n\n#usage: ECOS_ADJUST_DIRECTORY(adjusted_SRCS ${my_srcs})\r\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# the default ecos config file name\r\n\n# maybe in future also out-of-source builds may be possible\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#creates the dependency from all source files on the ecos target.ld,\r\n\n#adds the command for compiling ecos\r\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# when building out-of-source, create the ecos/ subdir\r\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#sources depend on target.ld\r\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# get the directory of the current file, used later on in the file\r\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#macro for creating an executable ecos application\r\n\n#the first parameter is the name of the executable,\r\n\n#the second is the list of all source files (where the path\r\n\n#has been adjusted beforehand by calling ECOS_ADJUST_DIRECTORY()\r\n\n#usage: ECOS_ADD_EXECUTABLE(my_app ${adjusted_SRCS})\r\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#definitions, valid for all ecos projects\r\n\n#the optimization and \"-g\" for debugging has to be enabled\r\n\n#in the project-specific CMakeLists.txt\r\n",
        "Line" : 175,
        "CharPositionInLine" : 3
      },
      "28" : {
        "Text" : "#the executable depends on ecos target.ld\r\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# when using nmake makefiles, the custom buildtype supresses the default cl.exe flags\r\n\n# and the rules for creating objects are adjusted for gcc\r\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# special link commands for ecos-executables\r\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# some strict compiler flags\r\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#create a binary file\r\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#and an srec file\r\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#add the created files to the clean-files\r\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UseJava.cmake" : {
      "ObjectId" : "d7c0356d32ddc3dfe33fb3ab49266014ec899cf6",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UseJava\r\n\n# -------\r\n\n#\r\n\n# Use Module for Java\r\n\n#\r\n\n# This file provides functions for Java.  It is assumed that\r\n\n# FindJava.cmake has already been loaded.  See FindJava.cmake for\r\n\n# information on how to load Java into your CMake project.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  add_jar(target_name\r\n\n#          [SOURCES] source1 [source2 ...] [resource1 ...]\r\n\n#          [INCLUDE_JARS jar1 [jar2 ...]]\r\n\n#          [ENTRY_POINT entry]\r\n\n#          [VERSION version]\r\n\n#          [OUTPUT_NAME name]\r\n\n#          [OUTPUT_DIR dir]\r\n\n#          )\r\n\n#\r\n\n# This command creates a <target_name>.jar.  It compiles the given\r\n\n# source files (source) and adds the given resource files (resource) to\r\n\n# the jar file.  Source files can be java files or listing files\r\n\n# (prefixed by '@').  If only resource files are given then just a jar file\r\n\n# is created.  The list of include jars are added to the classpath when\r\n\n# compiling the java sources and also to the dependencies of the target.\r\n\n# INCLUDE_JARS also accepts other target names created by add_jar.  For\r\n\n# backwards compatibility, jar files listed as sources are ignored (as\r\n\n# they have been since the first version of this module).\r\n\n#\r\n\n# The default OUTPUT_DIR can also be changed by setting the variable\r\n\n# CMAKE_JAVA_TARGET_OUTPUT_DIR.\r\n\n#\r\n\n# Additional instructions:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    To add compile flags to the target you can set these flags with\r\n\n#    the following variable:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        set(CMAKE_JAVA_COMPILE_FLAGS -nowarn)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    To add a path or a jar file to the class path you can do this\r\n\n#    with the CMAKE_JAVA_INCLUDE_PATH variable.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        set(CMAKE_JAVA_INCLUDE_PATH /usr/share/java/shibboleet.jar)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    To use a different output name for the target you can set it with:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        add_jar(foobar foobar.java OUTPUT_NAME shibboleet.jar)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    To use a different output directory than CMAKE_CURRENT_BINARY_DIR\r\n\n#    you can set it with:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        add_jar(foobar foobar.java OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    To define an entry point in your jar you can set it with the ENTRY_POINT\r\n\n#    named argument:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        add_jar(example ENTRY_POINT com/examples/MyProject/Main)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    To define a custom manifest for the jar, you can set it with the manifest\r\n\n#    named argument:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        add_jar(example MANIFEST /path/to/manifest)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    To add a VERSION to the target output name you can set it using\r\n\n#    the VERSION named argument to add_jar. This will create a jar file with the\r\n\n#    name shibboleet-1.0.0.jar and will create a symlink shibboleet.jar\r\n\n#    pointing to the jar with the version information.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     If the target is a JNI library, utilize the following commands to\r\n\n#     create a JNI symbolic link:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        set(CMAKE_JNI_TARGET TRUE)\r\n\n#        add_jar(shibboleet shibbotleet.java VERSION 1.2.0)\r\n\n#        install_jar(shibboleet ${LIB_INSTALL_DIR}/shibboleet)\r\n\n#        install_jni_symlink(shibboleet ${JAVA_LIB_INSTALL_DIR})\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#     If a single target needs to produce more than one jar from its\r\n\n#     java source code, to prevent the accumulation of duplicate class\r\n\n#     files in subsequent jars, set/reset CMAKE_JAR_CLASSES_PREFIX prior\r\n\n#     to calling the add_jar() function:\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        set(CMAKE_JAR_CLASSES_PREFIX com/redhat/foo)\r\n\n#        add_jar(foo foo.java)\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#        set(CMAKE_JAR_CLASSES_PREFIX com/redhat/bar)\r\n\n#        add_jar(bar bar.java)\r\n\n#\r\n\n#\r\n\n#\r\n\n# Target Properties:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    The add_jar() function sets some target properties. You can get these\r\n\n#    properties with the\r\n\n#       get_property(TARGET <target_name> PROPERTY <propery_name>)\r\n\n#    command.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    INSTALL_FILES      The files which should be installed. This is used by\r\n\n#                       install_jar().\r\n\n#    JNI_SYMLINK        The JNI symlink which should be installed.\r\n\n#                       This is used by install_jni_symlink().\r\n\n#    JAR_FILE           The location of the jar file so that you can include\r\n\n#                       it.\r\n\n#    CLASSDIR           The directory where the class files can be found. For\r\n\n#                       example to use them with javah.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  find_jar(<VAR>\r\n\n#           name | NAMES name1 [name2 ...]\r\n\n#           [PATHS path1 [path2 ... ENV var]]\r\n\n#           [VERSIONS version1 [version2]]\r\n\n#           [DOC \"cache documentation string\"]\r\n\n#           )\r\n\n#\r\n\n# This command is used to find a full path to the named jar.  A cache\r\n\n# entry named by <VAR> is created to stor the result of this command.\r\n\n# If the full path to a jar is found the result is stored in the\r\n\n# variable and the search will not repeated unless the variable is\r\n\n# cleared.  If nothing is found, the result will be <VAR>-NOTFOUND, and\r\n\n# the search will be attempted again next time find_jar is invoked with\r\n\n# the same variable.  The name of the full path to a file that is\r\n\n# searched for is specified by the names listed after NAMES argument.\r\n\n# Additional search locations can be specified after the PATHS argument.\r\n\n# If you require special a version of a jar file you can specify it with\r\n\n# the VERSIONS argument.  The argument after DOC will be used for the\r\n\n# documentation string in the cache.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  install_jar(target_name destination)\r\n\n#  install_jar(target_name DESTINATION destination [COMPONENT component])\r\n\n#\r\n\n# This command installs the TARGET_NAME files to the given DESTINATION.\r\n\n# It should be called in the same scope as add_jar() or it will fail.\r\n\n#\r\n\n# Target Properties:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    The install_jar() function sets the INSTALL_DESTINATION target property\r\n\n#    on jars so installed. This property holds the DESTINATION as described\r\n\n#    above, and is used by install_jar_exports(). You can get this property\r\n\n#    with the\r\n\n#       get_property(TARGET <target_name> PROPERTY INSTALL_DESTINATION)\r\n\n#    command.\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  install_jni_symlink(target_name destination)\r\n\n#  install_jni_symlink(target_name DESTINATION destination [COMPONENT component])\r\n\n#\r\n\n# This command installs the TARGET_NAME JNI symlinks to the given\r\n\n# DESTINATION.  It should be called in the same scope as add_jar() or it\r\n\n# will fail.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  install_jar_exports(TARGETS jar1 [jar2 ...]\r\n\n#                      FILE export_filename\r\n\n#                      DESTINATION destination [COMPONENT component])\r\n\n#\r\n\n# This command installs a target export file export_filename for the named jar\r\n\n# targets to the given DESTINATION. Its function is similar to that of\r\n\n# install(EXPORTS).\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  export_jars(TARGETS jar1 [jar2 ...]\r\n\n#              FILE export_filename)\r\n\n#\r\n\n# This command writes a target export file export_filename for the named jar\r\n\n# targets. Its function is similar to that of export().\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  create_javadoc(<VAR>\r\n\n#                 PACKAGES pkg1 [pkg2 ...]\r\n\n#                 [SOURCEPATH <sourcepath>]\r\n\n#                 [CLASSPATH <classpath>]\r\n\n#                 [INSTALLPATH <install path>]\r\n\n#                 [DOCTITLE \"the documentation title\"]\r\n\n#                 [WINDOWTITLE \"the title of the document\"]\r\n\n#                 [AUTHOR TRUE|FALSE]\r\n\n#                 [USE TRUE|FALSE]\r\n\n#                 [VERSION TRUE|FALSE]\r\n\n#                 )\r\n\n#\r\n\n# Create java documentation based on files or packages.  For more\r\n\n# details please read the javadoc manpage.\r\n\n#\r\n\n# There are two main signatures for create_javadoc.  The first signature\r\n\n# works with package names on a path with source files:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    Example:\r\n\n#    create_javadoc(my_example_doc\r\n\n#      PACKAGES com.exmaple.foo com.example.bar\r\n\n#      SOURCEPATH \"${CMAKE_CURRENT_SOURCE_DIR}\"\r\n\n#      CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\r\n\n#      WINDOWTITLE \"My example\"\r\n\n#      DOCTITLE \"<h1>My example</h1>\"\r\n\n#      AUTHOR TRUE\r\n\n#      USE TRUE\r\n\n#      VERSION TRUE\r\n\n#    )\r\n\n#\r\n\n#\r\n\n#\r\n\n# The second signature for create_javadoc works on a given list of\r\n\n# files.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    create_javadoc(<VAR>\r\n\n#                   FILES file1 [file2 ...]\r\n\n#                   [CLASSPATH <classpath>]\r\n\n#                   [INSTALLPATH <install path>]\r\n\n#                   [DOCTITLE \"the documentation title\"]\r\n\n#                   [WINDOWTITLE \"the title of the document\"]\r\n\n#                   [AUTHOR TRUE|FALSE]\r\n\n#                   [USE TRUE|FALSE]\r\n\n#                   [VERSION TRUE|FALSE]\r\n\n#                  )\r\n\n#\r\n\n#\r\n\n#\r\n\n# Example:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    create_javadoc(my_example_doc\r\n\n#      FILES ${example_SRCS}\r\n\n#      CLASSPATH ${CMAKE_JAVA_INCLUDE_PATH}\r\n\n#      WINDOWTITLE \"My example\"\r\n\n#      DOCTITLE \"<h1>My example</h1>\"\r\n\n#      AUTHOR TRUE\r\n\n#      USE TRUE\r\n\n#      VERSION TRUE\r\n\n#    )\r\n\n#\r\n\n#\r\n\n#\r\n\n# Both signatures share most of the options.  These options are the same\r\n\n# as what you can find in the javadoc manpage.  Please look at the\r\n\n# manpage for CLASSPATH, DOCTITLE, WINDOWTITLE, AUTHOR, USE and VERSION.\r\n\n#\r\n\n# The documentation will be by default installed to\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    ${CMAKE_INSTALL_PREFIX}/share/javadoc/<VAR>\r\n\n#\r\n\n#\r\n\n#\r\n\n# if you don't set the INSTALLPATH.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#  create_javah(TARGET <target>\r\n\n#               GENERATED_FILES <VAR>\r\n\n#               CLASSES <class>...\r\n\n#               [CLASSPATH <classpath>...]\r\n\n#               [DEPENDS <depend>...]\r\n\n#               [OUTPUT_NAME <path>|OUTPUT_DIR <path>]\r\n\n#               )\r\n\n#\r\n\n# Create C header files from java classes. These files provide the connective glue\r\n\n# that allow your Java and C code to interact.\r\n\n#\r\n\n# There are two main signatures for create_javah.  The first signature\r\n\n# returns generated files through variable specified by GENERATED_FILES option:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    Example:\r\n\n#    Create_javah(GENERATED_FILES files_headers\r\n\n#      CLASSES org.cmake.HelloWorld\r\n\n#      CLASSPATH hello.jar\r\n\n#    )\r\n\n#\r\n\n#\r\n\n#\r\n\n# The second signature for create_javah creates a target which encapsulates\r\n\n# header files generation.\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    Example:\r\n\n#    Create_javah(TARGET target_headers\r\n\n#      CLASSES org.cmake.HelloWorld\r\n\n#      CLASSPATH hello.jar\r\n\n#    )\r\n\n#\r\n\n#\r\n\n#\r\n\n# Both signatures share same options.\r\n\n#\r\n\n#  ``CLASSES <class>...``\r\n\n#    Specifies Java classes used to generate headers.\r\n\n#\r\n\n#  ``CLASSPATH <classpath>...``\r\n\n#    Specifies various paths to look up classes. Here .class files, jar files or targets\r\n\n#    created by command add_jar can be used.\r\n\n#\r\n\n#  ``DEPENDS <depend>...``\r\n\n#    Targets on which the javah target depends\r\n\n#\r\n\n#  ``OUTPUT_NAME <path>``\r\n\n#    Concatenates the resulting header files for all the classes listed by option CLASSES\r\n\n#    into <path>. Same behavior as option '-o' of javah tool.\r\n\n#\r\n\n#  ``OUTPUT_DIR <path>``\r\n\n#    Sets the directory where the header files will be generated. Same behavior as option\r\n\n#    '-d' of javah tool. If not specified, ${CMAKE_CURRENT_BINARY_DIR} is used as output directory.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define helper scripts\r\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# In CMake < 2.8.12, add_jar used variables which were set prior to calling\r\n\n# add_jar for customizing the behavior of add_jar. In order to be backwards\r\n\n# compatible, check if any of those variables are set, and use them to\r\n\n# initialize values of the named arguments. (Giving the corresponding named\r\n\n# argument will override the value set here.)\r\n\n#\r\n\n# New features should use named arguments only.\r\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# reset\r\n",
        "Line" : 466,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Ignored for backward compatibility\r\n",
        "Line" : 564,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Create the list of files to compile.\r\n",
        "Line" : 602,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Compile the java files and create a list of class files\r\n",
        "Line" : 614,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# NOTE: this command generates an artificial dependency file\r\n",
        "Line" : 616,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# create an empty java_class_filelist\r\n",
        "Line" : 638,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# create the jar file\r\n",
        "Line" : 644,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Add the target and make sure we have the latest resource files.\r\n",
        "Line" : 684,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# ckeck parameters\r\n",
        "Line" : 1249,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# handle javah options\r\n",
        "Line" : 1268,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# CLASSPATH can specify directories, jar files or targets created with add_jar command\r\n",
        "Line" : 1272,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# compute output names\r\n",
        "Line" : 1313,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# finalize custom command arguments\r\n",
        "Line" : 1321,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Parse and validate arguments\r\n",
        "Line" : 1341,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Set content of generated exports file\r\n",
        "Line" : 1355,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Generate exports file\r\n",
        "Line" : 1364,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Parse and validate arguments\r\n",
        "Line" : 1373,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Determine relative path from installed export file to install prefix\r\n",
        "Line" : 1394,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Set up unique location for generated exports file\r\n",
        "Line" : 1407,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Set content of generated exports file\r\n",
        "Line" : 1411,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Generate and install exports file\r\n",
        "Line" : 1420,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 25
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UseJavaClassFilelist.cmake" : {
      "ObjectId" : "c507ce88efe991a780ff89c4ee85e764ece5f060",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UseJavaClassFilelist\r\n\n# --------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n# This script create a list of compiled Java class files to be added to\r\n\n# a jar file.  This avoids including cmake files which get created in\r\n\n# the binary directory.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# file(GLOB_RECURSE foo RELATIVE) is broken so we need this.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# write to file\r\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UseJavaSymlinks.cmake" : {
      "ObjectId" : "1e22e21970b0d0fd5b26b5f6a85de2ec33b75e69",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UseJavaSymlinks\r\n\n# ---------------\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n# Helper script for UseJava.cmake\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UsePkgConfig.cmake" : {
      "ObjectId" : "beee14035cea19ffb0f4973fd0dc40b37368e766",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UsePkgConfig\r\n\n# ------------\r\n\n#\r\n\n# Obsolete pkg-config module for CMake, use FindPkgConfig instead.\r\n\n#\r\n\n#\r\n\n#\r\n\n# This module defines the following macro:\r\n\n#\r\n\n# PKGCONFIG(package includedir libdir linkflags cflags)\r\n\n#\r\n\n# Calling PKGCONFIG will fill the desired information into the 4 given\r\n\n# arguments, e.g.  PKGCONFIG(libart-2.0 LIBART_INCLUDE_DIR\r\n\n# LIBART_LINK_DIR LIBART_LINK_FLAGS LIBART_CFLAGS) if pkg-config was NOT\r\n\n# found or the specified software package doesn't exist, the variable\r\n\n# will be empty when the function returns, otherwise they will contain\r\n\n# the respective information\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# reset the variables at the beginning\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if pkg-config has been found\r\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# and if the package of interest also exists for pkg-config, then get the information\r\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# if pkg-config has NOT been found, INFORM the user\r\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UseQt4.cmake" : {
      "ObjectId" : "f19cb287eef5e18080c20ffc0a48a2035daaae85",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UseQt4\r\n\n# ------\r\n\n#\r\n\n# Use Module for QT4\r\n\n#\r\n\n# Sets up C and C++ to use Qt 4.  It is assumed that FindQt.cmake has\r\n\n# already been loaded.  See FindQt.cmake for information on how to load\r\n\n# Qt 4 into your CMake project.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# list dependent modules, so dependent libraries are added\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Qt modules  (in order of dependence)\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UseSWIG.cmake" : {
      "ObjectId" : "33bf179fe22707ebd607607a62489f074aed2ca9",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UseSWIG\r\n\n# -------\r\n\n#\r\n\n# Defines the following macros for use with SWIG:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    SWIG_ADD_LIBRARY(<name>\r\n\n#                     [TYPE <SHARED|MODULE|STATIC|USE_BUILD_SHARED_LIBS>]\r\n\n#                     LANGUAGE <language>\r\n\n#                     SOURCES <file>...\r\n\n#                     )\r\n\n#      - Define swig module with given name and specified language\r\n\n#    SWIG_LINK_LIBRARIES(name [ libraries ])\r\n\n#      - Link libraries to swig module\r\n\n#\r\n\n# Source files properties on module files can be set before the invocation\r\n\n# of the SWIG_ADD_LIBRARY macro to specify special behavior of SWIG.\r\n\n#\r\n\n# The source file property CPLUSPLUS calls SWIG in c++ mode, e.g.::\r\n\n#\r\n\n#    set_property(SOURCE mymod.i PROPERTY CPLUSPLUS ON)\r\n\n#    swig_add_library(mymod LANGUAGE python SOURCES mymod.i)\r\n\n#\r\n\n# The source file property SWIG_FLAGS adds custom flags to the SWIG executable.\r\n\n#\r\n\n# The source-file property SWIG_MODULE_NAME have to be provided to specify the actual\r\n\n# import name of the module in the target language if it cannot be scanned automatically\r\n\n# from source or different from the module file basename.::\r\n\n#\r\n\n#    set_property(SOURCE mymod.i PROPERTY SWIG_MODULE_NAME mymod_realname)\r\n\n#\r\n\n# To get the name of the swig module target library, use: ${SWIG_MODULE_${name}_REAL_NAME}.\r\n\n#\r\n\n# Also some variables can be set to specify special behavior of SWIG.\r\n\n#\r\n\n# CMAKE_SWIG_FLAGS can be used to add special flags to all swig calls.\r\n\n#\r\n\n# CMAKE_SWIG_OUTDIR allows one to specify where to write\r\n\n# the language specific files (swig -outdir option).\r\n\n#\r\n\n# SWIG_OUTFILE_DIR allows one to specify where to write the output file\r\n\n# (swig -o option).  If not specified, CMAKE_SWIG_OUTDIR is used.\r\n\n#\r\n\n# The name-specific variable SWIG_MODULE_<name>_EXTRA_DEPS may be used to specify extra\r\n\n# dependencies for the generated modules.\r\n\n#\r\n\n# If the source file generated by swig need some special flag you can use::\r\n\n#\r\n\n#    set_source_files_properties( ${swig_generated_file_fullname}\r\n\n#                                 PROPERTIES COMPILE_FLAGS \"-bla\")\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\r\n\n# For given swig module initialize variables associated with it\r\n\n#\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# swig will produce a module.py containing an 'import _modulename' statement,\r\n\n# which implies having a corresponding _modulename.so (*NIX), _modulename.pyd (Win32),\r\n\n# unless the -noproxy flag is used\r\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# This makes sure that the name used in the generated DllImport\r\n\n# matches the library name created by CMake\r\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\r\n\n# For a given language, input file, and output file, determine extra files that\r\n\n# will be generated. This is internal swig macro.\r\n\n#\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# try to get module name from \"%module foo\" syntax\r\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# try to get module name from \"%module (options=...) foo\" syntax\r\n",
        "Line" : 112,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# fallback to file basename\r\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#\r\n\n# Take swig (*.i) file and add proper custom commands for it\r\n\n#\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If CMAKE_SWIG_OUTDIR was specified then pass it to -outdir\r\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# add the language into the name of the file (i.e. TCL_wrap)\r\n\n# this allows for the same .i file to be wrapped into different languages\r\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#message(\"Full path to source file: ${swig_source_file_fullname}\")\r\n\n#message(\"Full path to the output file: ${swig_generated_file_fullname}\")\r\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# default is c, so add c++ flag if it is c++\r\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Let's create the ${swig_outdir} at execution time, in case dir contains $(OutDir)\r\n",
        "Line" : 201,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#\r\n\n# Create Swig module\r\n\n#\r\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# In java you want:\r\n\n#      System.loadLibrary(\"LIBRARY\");\r\n\n# then JNI will look for a library whose name is platform dependent, namely\r\n\n#   MacOS  : libLIBRARY.jnilib\r\n\n#   Windows: LIBRARY.dll\r\n\n#   Linux  : libLIBRARY.so\r\n",
        "Line" : 290,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# this is only needed for the python case where a _modulename.so is generated\r\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Python extension modules on Windows must have the extension \".pyd\"\r\n\n# instead of \".dll\" as of Python 2.5.  Older python versions do support\r\n\n# this suffix.\r\n\n# http://docs.python.org/whatsnew/ports.html#SECTION0001510000000000000000\r\n\n# <quote>\r\n\n# Windows: .dll is no longer supported as a filename extension for extension modules.\r\n\n# .pyd is now the only filename extension that will be searched for.\r\n\n# </quote>\r\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# In ruby you want:\r\n\n#      require 'LIBRARY'\r\n\n# then ruby will look for a library whose name is platform dependent, namely\r\n\n#   MacOS  : LIBRARY.bundle\r\n\n#   Windows: LIBRARY.dll\r\n\n#   Linux  : LIBRARY.so\r\n",
        "Line" : 319,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#\r\n\n# Like TARGET_LINK_LIBRARIES but for swig modules\r\n\n#\r\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/Use_wxWindows.cmake" : {
      "ObjectId" : "f1befeae075bb7aff115f700936cdb7336004484",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# Use_wxWindows\r\n\n# -------------\r\n\n#\r\n\n#\r\n\n#\r\n\n#\r\n\n# This convenience include finds if wxWindows is installed and set the\r\n\n# appropriate libs, incdirs, flags etc.  author Jan Woetzel <jw -at-\r\n\n# mip.informatik.uni-kiel.de> (07/2003)\r\n\n#\r\n\n# USAGE:\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    just include Use_wxWindows.cmake\r\n\n#    in your projects CMakeLists.txt\r\n\n#\r\n\n# include( ${CMAKE_MODULE_PATH}/Use_wxWindows.cmake)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    if you are sure you need GL then\r\n\n#\r\n\n# set(WXWINDOWS_USE_GL 1)\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#    *before* you include this file.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -----------------------------------------------------\r\n\n# 16.Feb.2004: changed INCLUDE to FIND_PACKAGE to read from users own non-system CMAKE_MODULE_PATH (Jan Woetzel JW)\r\n\n# 07/2006: rewrite as FindwxWidgets.cmake, kept for backward compatibility JW\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#message(\"DBG Use_wxWindows.cmake:  WXWINDOWS_INCLUDE_DIR=${WXWINDOWS_INCLUDE_DIR} WXWINDOWS_LINK_DIRECTORIES=${WXWINDOWS_LINK_DIRECTORIES}     WXWINDOWS_LIBRARIES=${WXWINDOWS_LIBRARIES}  CMAKE_WXWINDOWS_CXX_FLAGS=${CMAKE_WXWINDOWS_CXX_FLAGS} WXWINDOWS_DEFINITIONS=${WXWINDOWS_DEFINITIONS}\")\r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/UsewxWidgets.cmake" : {
      "ObjectId" : "b1056fb7f9e03a4df18241720f2ee7b9853a2a81",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# UsewxWidgets\r\n\n# ------------\r\n\n#\r\n\n# Convenience include for using wxWidgets library.\r\n\n#\r\n\n# Determines if wxWidgets was FOUND and sets the appropriate libs,\r\n\n# incdirs, flags, etc.  INCLUDE_DIRECTORIES and LINK_DIRECTORIES are\r\n\n# called.\r\n\n#\r\n\n# USAGE\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   # Note that for MinGW users the order of libs is important!\r\n\n#   find_package(wxWidgets REQUIRED net gl core base)\r\n\n#   include(${wxWidgets_USE_FILE})\r\n\n#   # and for each of your dependent executable/library targets:\r\n\n#   target_link_libraries(<YourTarget> ${wxWidgets_LIBRARIES})\r\n\n#\r\n\n#\r\n\n#\r\n\n# DEPRECATED\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   LINK_LIBRARIES is not called in favor of adding dependencies per target.\r\n\n#\r\n\n#\r\n\n#\r\n\n# AUTHOR\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   Jan Woetzel <jw -at- mip.informatik.uni-kiel.de>\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# debug message and logging.\r\n\n# comment these out for distribution\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  set(LOGFILE \"${PROJECT_BINARY_DIR}/CMakeOutput.log\")\r\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#  file(APPEND ${LOGFILE} \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}):   ${_MSG}\\n\")\r\n\n#  message(STATUS \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}): ${_MSG}\")\r\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Flags are expected to be a string here, not a list.\r\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# DEPRECATED JW\r\n\n# just for backward compatibility: add deps to all targets\r\n\n# library projects better use advanced find_package(wxWidgets) directly.\r\n\n#if(wxWidgets_LIBRARIES)\r\n\n#  link_libraries(${wxWidgets_LIBRARIES})\r\n\n#  # BUG: str too long:  MSG(\"wxWidgets_LIBRARIES=${wxWidgets_LIBRARIES}\")\r\n\n#  if(LOGFILE)\r\n\n#    file(APPEND ${LOGFILE} \"${CMAKE_CURRENT_LIST_FILE}(${CMAKE_CURRENT_LIST_LINE}):   ${wxWidgets_LIBRARIES}\\n\")\r\n\n#  endif()\r\n\n#endif()\r\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/VTKCompatibility.cmake" : {
      "ObjectId" : "5a4f0c96d7ecf4135cf5134aa83254a1539dafdb",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# work around an old bug in VTK\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for very old VTK (versions prior to 4.2)\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/WriteBasicConfigVersionFile.cmake" : {
      "ObjectId" : "ba6e9295a7629107b181e9e3cc157d7706cad4f7",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# WriteBasicConfigVersionFile\r\n\n# ---------------------------\r\n\n#\r\n\n#\r\n\n#\r\n\n# ::\r\n\n#\r\n\n#   WRITE_BASIC_CONFIG_VERSION_FILE( filename\r\n\n#     [VERSION major.minor.patch]\r\n\n#     COMPATIBILITY (AnyNewerVersion|SameMajorVersion)\r\n\n#     )\r\n\n#\r\n\n#\r\n\n#\r\n\n# Deprecated, see WRITE_BASIC_PACKAGE_VERSION_FILE(), it is identical.\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/WriteCompilerDetectionHeader.cmake" : {
      "ObjectId" : "a1621caf038a711aa193dca8f489f0ccac5bdc1b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\r\n\n# WriteCompilerDetectionHeader\r\n\n# ----------------------------\r\n\n#\r\n\n# This module provides the function write_compiler_detection_header().\r\n\n#\r\n\n# The ``WRITE_COMPILER_DETECTION_HEADER`` function can be used to generate\r\n\n# a file suitable for preprocessor inclusion which contains macros to be\r\n\n# used in source code::\r\n\n#\r\n\n#    write_compiler_detection_header(\r\n\n#              FILE <file>\r\n\n#              PREFIX <prefix>\r\n\n#              [OUTPUT_FILES_VAR <output_files_var> OUTPUT_DIR <output_dir>]\r\n\n#              COMPILERS <compiler> [...]\r\n\n#              FEATURES <feature> [...]\r\n\n#              [VERSION <version>]\r\n\n#              [PROLOG <prolog>]\r\n\n#              [EPILOG <epilog>]\r\n\n#              [ALLOW_UNKNOWN_COMPILERS]\r\n\n#              [ALLOW_UNKNOWN_COMPILER_VERSIONS]\r\n\n#    )\r\n\n#\r\n\n# The ``write_compiler_detection_header`` function generates the\r\n\n# file ``<file>`` with macros which all have the prefix ``<prefix>``.\r\n\n#\r\n\n# By default, all content is written directly to the ``<file>``.  The\r\n\n# ``OUTPUT_FILES_VAR`` may be specified to cause the compiler-specific\r\n\n# content to be written to separate files.  The separate files are then\r\n\n# available in the ``<output_files_var>`` and may be consumed by the caller\r\n\n# for installation for example.  The ``OUTPUT_DIR`` specifies a relative\r\n\n# path from the main ``<file>`` to the compiler-specific files. For example:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    write_compiler_detection_header(\r\n\n#      FILE climbingstats_compiler_detection.h\r\n\n#      PREFIX ClimbingStats\r\n\n#      OUTPUT_FILES_VAR support_files\r\n\n#      OUTPUT_DIR compilers\r\n\n#      COMPILERS GNU Clang MSVC Intel\r\n\n#      FEATURES cxx_variadic_templates\r\n\n#    )\r\n\n#    install(FILES\r\n\n#      ${CMAKE_CURRENT_BINARY_DIR}/climbingstats_compiler_detection.h\r\n\n#      DESTINATION include\r\n\n#    )\r\n\n#    install(FILES\r\n\n#      ${support_files}\r\n\n#      DESTINATION include/compilers\r\n\n#    )\r\n\n#\r\n\n#\r\n\n# ``VERSION`` may be used to specify the API version to be generated.\r\n\n# Future versions of CMake may introduce alternative APIs.  A given\r\n\n# API is selected by any ``<version>`` value greater than or equal\r\n\n# to the version of CMake that introduced the given API and less\r\n\n# than the version of CMake that introduced its succeeding API.\r\n\n# The value of the :variable:`CMAKE_MINIMUM_REQUIRED_VERSION`\r\n\n# variable is used if no explicit version is specified.\r\n\n# (As of CMake version |release| there is only one API version.)\r\n\n#\r\n\n# ``PROLOG`` may be specified as text content to write at the start of the\r\n\n# header. ``EPILOG`` may be specified as text content to write at the end\r\n\n# of the header\r\n\n#\r\n\n# At least one ``<compiler>`` and one ``<feature>`` must be listed.  Compilers\r\n\n# which are known to CMake, but not specified are detected and a preprocessor\r\n\n# ``#error`` is generated for them.  A preprocessor macro matching\r\n\n# ``<PREFIX>_COMPILER_IS_<compiler>`` is generated for each compiler\r\n\n# known to CMake to contain the value ``0`` or ``1``.\r\n\n#\r\n\n# Possible compiler identifiers are documented with the\r\n\n# :variable:`CMAKE_<LANG>_COMPILER_ID` variable.\r\n\n# Available features in this version of CMake are listed in the\r\n\n# :prop_gbl:`CMAKE_C_KNOWN_FEATURES` and\r\n\n# :prop_gbl:`CMAKE_CXX_KNOWN_FEATURES` global properties.\r\n\n# The ``{c,cxx}_std_*`` meta-features are ignored if requested.\r\n\n#\r\n\n# See the :manual:`cmake-compile-features(7)` manual for information on\r\n\n# compile features.\r\n\n#\r\n\n# ``ALLOW_UNKNOWN_COMPILERS`` and ``ALLOW_UNKNOWN_COMPILER_VERSIONS`` cause\r\n\n# the module to generate conditions that treat unknown compilers as simply\r\n\n# lacking all features.  Without these options the default behavior is to\r\n\n# generate a ``#error`` for unknown compilers.\r\n\n#\r\n\n# Feature Test Macros\r\n\n# ===================\r\n\n#\r\n\n# For each compiler, a preprocessor macro is generated matching\r\n\n# ``<PREFIX>_COMPILER_IS_<compiler>`` which has the content either ``0``\r\n\n# or ``1``, depending on the compiler in use. Preprocessor macros for\r\n\n# compiler version components are generated matching\r\n\n# ``<PREFIX>_COMPILER_VERSION_MAJOR`` ``<PREFIX>_COMPILER_VERSION_MINOR``\r\n\n# and ``<PREFIX>_COMPILER_VERSION_PATCH`` containing decimal values\r\n\n# for the corresponding compiler version components, if defined.\r\n\n#\r\n\n# A preprocessor test is generated based on the compiler version\r\n\n# denoting whether each feature is enabled.  A preprocessor macro\r\n\n# matching ``<PREFIX>_COMPILER_<FEATURE>``, where ``<FEATURE>`` is the\r\n\n# upper-case ``<feature>`` name, is generated to contain the value\r\n\n# ``0`` or ``1`` depending on whether the compiler in use supports the\r\n\n# feature:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#    write_compiler_detection_header(\r\n\n#      FILE climbingstats_compiler_detection.h\r\n\n#      PREFIX ClimbingStats\r\n\n#      COMPILERS GNU Clang AppleClang MSVC Intel\r\n\n#      FEATURES cxx_variadic_templates\r\n\n#    )\r\n\n#\r\n\n# .. code-block:: c++\r\n\n#\r\n\n#    #if ClimbingStats_COMPILER_CXX_VARIADIC_TEMPLATES\r\n\n#    template<typename... T>\r\n\n#    void someInterface(T t...) { /* ... */ }\r\n\n#    #else\r\n\n#    // Compatibility versions\r\n\n#    template<typename T1>\r\n\n#    void someInterface(T1 t1) { /* ... */ }\r\n\n#    template<typename T1, typename T2>\r\n\n#    void someInterface(T1 t1, T2 t2) { /* ... */ }\r\n\n#    template<typename T1, typename T2, typename T3>\r\n\n#    void someInterface(T1 t1, T2 t2, T3 t3) { /* ... */ }\r\n\n#    #endif\r\n\n#\r\n\n# Symbol Macros\r\n\n# =============\r\n\n#\r\n\n# Some additional symbol-defines are created for particular features for\r\n\n# use as symbols which may be conditionally defined empty:\r\n\n#\r\n\n# .. code-block:: c++\r\n\n#\r\n\n#    class MyClass ClimbingStats_FINAL\r\n\n#    {\r\n\n#        ClimbingStats_CONSTEXPR int someInterface() { return 42; }\r\n\n#    };\r\n\n#\r\n\n# The ``ClimbingStats_FINAL`` macro will expand to ``final`` if the\r\n\n# compiler (and its flags) support the ``cxx_final`` feature, and the\r\n\n# ``ClimbingStats_CONSTEXPR`` macro will expand to ``constexpr``\r\n\n# if ``cxx_constexpr`` is supported.\r\n\n#\r\n\n# The following features generate corresponding symbol defines:\r\n\n#\r\n\n# ========================== =================================== =================\r\n\n#         Feature                          Define                      Symbol\r\n\n# ========================== =================================== =================\r\n\n# ``c_restrict``              ``<PREFIX>_RESTRICT``               ``restrict``\r\n\n# ``cxx_constexpr``           ``<PREFIX>_CONSTEXPR``              ``constexpr``\r\n\n# ``cxx_deleted_functions``   ``<PREFIX>_DELETED_FUNCTION``       ``= delete``\r\n\n# ``cxx_extern_templates``    ``<PREFIX>_EXTERN_TEMPLATE``        ``extern``\r\n\n# ``cxx_final``               ``<PREFIX>_FINAL``                  ``final``\r\n\n# ``cxx_noexcept``            ``<PREFIX>_NOEXCEPT``               ``noexcept``\r\n\n# ``cxx_noexcept``            ``<PREFIX>_NOEXCEPT_EXPR(X)``       ``noexcept(X)``\r\n\n# ``cxx_override``            ``<PREFIX>_OVERRIDE``               ``override``\r\n\n# ========================== =================================== =================\r\n\n#\r\n\n# Compatibility Implementation Macros\r\n\n# ===================================\r\n\n#\r\n\n# Some features are suitable for wrapping in a macro with a backward\r\n\n# compatibility implementation if the compiler does not support the feature.\r\n\n#\r\n\n# When the ``cxx_static_assert`` feature is not provided by the compiler,\r\n\n# a compatibility implementation is available via the\r\n\n# ``<PREFIX>_STATIC_ASSERT(COND)`` and\r\n\n# ``<PREFIX>_STATIC_ASSERT_MSG(COND, MSG)`` function-like macros. The macros\r\n\n# expand to ``static_assert`` where that compiler feature is available, and\r\n\n# to a compatibility implementation otherwise. In the first form, the\r\n\n# condition is stringified in the message field of ``static_assert``.  In\r\n\n# the second form, the message ``MSG`` is passed to the message field of\r\n\n# ``static_assert``, or ignored if using the backward compatibility\r\n\n# implementation.\r\n\n#\r\n\n# The ``cxx_attribute_deprecated`` feature provides a macro definition\r\n\n# ``<PREFIX>_DEPRECATED``, which expands to either the standard\r\n\n# ``[[deprecated]]`` attribute or a compiler-specific decorator such\r\n\n# as ``__attribute__((__deprecated__))`` used by GNU compilers.\r\n\n#\r\n\n# The ``cxx_alignas`` feature provides a macro definition\r\n\n# ``<PREFIX>_ALIGNAS`` which expands to either the standard ``alignas``\r\n\n# decorator or a compiler-specific decorator such as\r\n\n# ``__attribute__ ((__aligned__))`` used by GNU compilers.\r\n\n#\r\n\n# The ``cxx_alignof`` feature provides a macro definition\r\n\n# ``<PREFIX>_ALIGNOF`` which expands to either the standard ``alignof``\r\n\n# decorator or a compiler-specific decorator such as ``__alignof__``\r\n\n# used by GNU compilers.\r\n\n#\r\n\n# ============================= ================================ =====================\r\n\n#           Feature                          Define                     Symbol\r\n\n# ============================= ================================ =====================\r\n\n# ``cxx_alignas``                ``<PREFIX>_ALIGNAS``             ``alignas``\r\n\n# ``cxx_alignof``                ``<PREFIX>_ALIGNOF``             ``alignof``\r\n\n# ``cxx_nullptr``                ``<PREFIX>_NULLPTR``             ``nullptr``\r\n\n# ``cxx_static_assert``          ``<PREFIX>_STATIC_ASSERT``       ``static_assert``\r\n\n# ``cxx_static_assert``          ``<PREFIX>_STATIC_ASSERT_MSG``   ``static_assert``\r\n\n# ``cxx_attribute_deprecated``   ``<PREFIX>_DEPRECATED``          ``[[deprecated]]``\r\n\n# ``cxx_attribute_deprecated``   ``<PREFIX>_DEPRECATED_MSG``      ``[[deprecated]]``\r\n\n# ``cxx_thread_local``           ``<PREFIX>_THREAD_LOCAL``        ``thread_local``\r\n\n# ============================= ================================ =====================\r\n\n#\r\n\n# A use-case which arises with such deprecation macros is the deprecation\r\n\n# of an entire library.  In that case, all public API in the library may\r\n\n# be decorated with the ``<PREFIX>_DEPRECATED`` macro.  This results in\r\n\n# very noisy build output when building the library itself, so the macro\r\n\n# may be may be defined to empty in that case when building the deprecated\r\n\n# library:\r\n\n#\r\n\n# .. code-block:: cmake\r\n\n#\r\n\n#   add_library(compat_support ${srcs})\r\n\n#   target_compile_definitions(compat_support\r\n\n#     PRIVATE\r\n\n#       CompatSupport_DEPRECATED=\r\n\n#   )\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version which introduced this function\r\n",
        "Line" : 292,
        "CharPositionInLine" : 26
      },
      "3" : {
        "Text" : "# ignored\r\n",
        "Line" : 382,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# ignored\r\n",
        "Line" : 384,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/ecos_clean.cmake" : {
      "ObjectId" : "15658e1ed84f6bca39f4a428b351440d45222e6b",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# remove all directories, which consist of lower-case letters only\r\n\n# this skips e.g. CVS/ and .subversion/\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cli/vendor/cmake/share/cmake-3.8/Modules/kde3uic.cmake" : {
      "ObjectId" : "5e6899e34c39f32cfd963946441ec36db32bfbed",
      "LastModified" : "2019-03-04T12:23:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\r\n\n# file Copyright.txt or https://cmake.org/licensing for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# used internally by KDE3Macros.cmake\r\n\n# neundorf@kde.org\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "templates/build/cmake/FindHAL.cmake" : {
      "ObjectId" : "02adfa9866e6fa8b17b42424ddf755390a127c26",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindHAL\r\n\n# Author: Chris Williams\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\r\n\n# Created: 2014.12.02\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generated by CMake 3.1.3\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------\r\n\n# Generated CMake target import file.\r\n\n#----------------------------------------------------------------\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Commands may need to know the format version.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Protect against multiple inclusion, which would fail when already imported targets are added once more.\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Taken and slightly modified from build's HAL_Targets.cmake file\r\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create imported target HAL\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This file does not depend on other imported targets which have\r\n\n# been exported from the same project but in a separate export set.\r\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Commands beyond this point should not need to know the version.\r\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "templates/build/cmake/FindJavaScriptCore.cmake" : {
      "ObjectId" : "7597b62d01d22d9bd8748e4516ab91d3b56e7e00",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindJavaScriptCore\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's JavaScriptCore_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target JavaScriptCore\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindLayoutEngine.cmake" : {
      "ObjectId" : "ffb1d0478219ee1237204802402a765a639efee9",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindLayoutEngine\r\n\n# Author: Chris Williams\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\r\n\n# Created: 2014.12.02\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#----------------------------------------------------------------\r\n\n# Generated CMake target import file.\r\n\n#----------------------------------------------------------------\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Commands may need to know the format version.\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Protect against multiple inclusion, which would fail when already imported targets are added once more.\r\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create imported target LayoutEngine\r\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create imported target LayoutEngine\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This file does not depend on other imported targets which have\r\n\n# been exported from the same project but in a separate export set.\r\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Commands beyond this point should not need to know the version.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "templates/build/cmake/FindTitaniumKit.cmake" : {
      "ObjectId" : "1f2259ac77f2450e4d61f5a0589e0d6e207fd540",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumKit\r\n\n# Author: Chris Williams\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\r\n\n# Created: 2014.12.02\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Generated by CMake 3.1.3\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#----------------------------------------------------------------\r\n\n# Generated CMake target import file.\r\n\n#----------------------------------------------------------------\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Commands may need to know the format version.\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Protect against multiple inclusion, which would fail when already imported targets are added once more.\r\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Taken and slightly modified from build's TitaniumKit_Targets.cmake file\r\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create imported target TitaniumKit\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make sure the targets which have been exported in some other\r\n\n# export set exist.\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Commands beyond this point should not need to know the version.\r\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "templates/build/cmake/FindTitaniumWindows.cmake" : {
      "ObjectId" : "08941c26424317d7d7ff891182884ee55a6df297",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows\r\n\n# Author: Chris Williams\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\r\n\n# Created: 2014.12.02\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Targets.cmake file\r\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Filesystem.cmake" : {
      "ObjectId" : "5e70e1869a598c58d99c8a73d02c0ee2438d655b",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Filesystem\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Filesystem_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Filesystem\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Global.cmake" : {
      "ObjectId" : "8a3c938c735d9b3153571dd767c41a3b2e81d6d0",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Global\r\n\n# Author: Chris Williams\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\r\n\n# Created: 2014.12.02\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Global_Targets.cmake file\r\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Global\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Map.cmake" : {
      "ObjectId" : "628653094f44e812c0157300b095a513cda5ac32",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Map\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Map_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Map\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Media.cmake" : {
      "ObjectId" : "981bcd51f47912ada77b2fc642e4414c9b2b42db",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Media\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Media_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Media\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Network.cmake" : {
      "ObjectId" : "914367189e2422a12580660ee21a948495786ca7",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Network\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Network_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Network\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Sensors.cmake" : {
      "ObjectId" : "9db1f2cc70d6c0b6a8d6162e45536537dc8b38de",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Sensors\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Sensors_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Sensors\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Ti.cmake" : {
      "ObjectId" : "768af41a3b79204b6e4038ee80bdbcbadb6990de",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Ti\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris William\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_Ti_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Ti\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_UI.cmake" : {
      "ObjectId" : "759630509c8d100d8b5ca66d82da5c2a73dcd634",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_UI\r\n\n# Author: Chris Williams\r\n\n#\r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# Licensed under the terms of the Apache Public License.\r\n\n# Please see the LICENSE included with this distribution for details.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\r\n\n# Created: 2014.12.02\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from build's TitaniumWindows_UI_Targets.cmake file\r\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_UI\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/FindTitaniumWindows_Utility.cmake" : {
      "ObjectId" : "59f5c9d3cfeed55b5ec246bec7333e468161951b",
      "LastModified" : "2018-11-06T09:39:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindTitaniumWindows_Utility\n\n# Author: Chris Williams\n\n#\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\n\n# Licensed under the terms of the Apache Public License.\n\n# Please see the LICENSE included with this distribution for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Author: Chris Williams\n\n# Created: 2014.12.02\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Taken and slightly modified from bUtilityld's TitaniumWindows_Utility_Targets.cmake file\n\n# INTERFACE_INCLUDE_DIRECTORIES is modified to point to our pre-packaged include dir for module\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create imported target TitaniumWindows_Utility\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "templates/build/cmake/internal_utils.cmake" : {
      "ObjectId" : "b63ee894dd35d89b4c2eebff6c9e8a2792f5a50f",
      "LastModified" : "2016-04-29T12:48:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Author: Matt Langston <mlangston@appcelerator.com>\r\n\n# Created: 2013.03.12\r\n\n# \r\n\n# Copyright (c) 2014 by Appcelerator, Inc. All Rights Reserved.\r\n\n# \r\n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\r\n\n# may not use this software or any of it's contents except in\r\n\n# compliance with the License. The full text of the license is in the\r\n\n# file LICENSE.txt in the top-level directory of this project, or you\r\n\n# may obtain a copy of the License at\r\n\n# \r\n\n# http://www.apache.org/licenses/LICENSE-2.0\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Defines functions and macros useful for building.\r\n\n#\r\n\n# Note:\r\n\n#\r\n\n# - The functions/macros defined in this file may depend on option()\r\n\n#   definitions, and thus must be called *after* the options have been\r\n\n#   defined.\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Defines the compiler/linker flags used to build.  You can tweak\r\n\n# these definitions to suit your needs.  A variable's value is empty\r\n\n# before it's explicitly assigned to.\r\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\r\n\n# with one of them.\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared\r\n\n# library.  ARGN refers to additional arguments after 'cxx_flags'.\r\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\r\n\n#\r\n\n# Helper functions for creating build targets.\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\r\n\n#\r\n\n# Creates a named C++ executable that depends on the given libraries\r\n\n# and is built from the given source files with the given compiler\r\n\n# flags.\r\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#   # To support mixing linking in static and dynamic libraries, link each\r\n\n#   # library in with an extra call to target_link_libraries.\r\n\n#   foreach (lib \"${libs}\")\r\n\n#     target_link_libraries(${name} ${lib})\r\n\n#   endforeach()\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\r\n\n#\r\n\n# Creates a named target that depends on the given libs and is built\r\n\n# from the given source files.  dir/name.cpp is implicitly included in\r\n\n# the source file list.\r\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\r\n\n#\r\n\n# Creates a named C++ test that depends on the given libs and is built\r\n\n# from the given source files with the given compiler flags.\r\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cxx_test(name libs srcs...)\r\n\n#\r\n\n# Creates a named test target that depends on the given libs and is\r\n\n# built from the given source files.  Unlike cxx_test_with_flags,\r\n\n# name.cpp is already implicitly included in the source file list.\r\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# py_test(name)\r\n\n#\r\n\n# Creates a Python test with the given name whose main module is in\r\n\n# test/name.py.  It does nothing if Python is not installed.\r\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\r\n\n# all Linux environments to be google3 and try to use google3\r\n\n# features.\r\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\r\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is\r\n\n# known only at ctest runtime (by calling ctest -c\r\n\n# <Configuration>), so we have to escape $ to delay variable\r\n\n# substitution here.\r\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Print all defined properties of the given target (i.e. those without\r\n\n# a value of -NOTFOUND).\r\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#message(STATUS \"*** ${CMAKE_PROPERTY_LIST} ***\")\r\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We don't want properties like these:\r\n\n#\r\n\n# make version 2.8.9\r\n\n# COMPILE_DEFINITIONS_<CONFIG>\r\n\n# <CONFIG>_OUTPUT_NAME\r\n\n# VS_GLOBAL_<variable>\r\n\n# XCODE_ATTRIBUTE_<an-attribute>\r\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# This is how to do it using grep:\r\n\n# cmake --help-property-list | grep -v -E \"(<.+>| )\"\r\n",
        "Line" : 173,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#message(STATUS \"*** ${PROPERTY} ***\")\r\n",
        "Line" : 176,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 20
    }
  },
  "FileTypes" : {
    "CMAKE" : 829
  },
  "ElapsedTime" : 5191
}