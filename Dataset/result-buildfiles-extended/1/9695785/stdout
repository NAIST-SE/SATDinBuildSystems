{
  "Repository" : "9695785",
  "Revision" : "HEAD",
  "ObjectId" : "5110b41ac818ecfb058d2516f56a6eece40ca907",
  "CommitTime" : "2019-04-20T23:51:45Z",
  "Files" : {
    "cpp/BoostParts/CMakeLists.txt" : {
      "ObjectId" : "d7da5965f89fe3d3eb957003d6b2e715d3371c4b",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2011, 2012  Google Inc.\n\n#\n\n# This file is part of YouCompleteMe.\n\n#\n\n# YouCompleteMe is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# YouCompleteMe is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with YouCompleteMe.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The interesting parts of Boost have been extracted using\n\n# the BCP tool:\n\n#   http://www.boost.org/doc/libs/1_54_0/tools/bcp/doc/html/index.html\n\n#\n\n# See the top-level update_boost.sh script for details on how bcp is called to\n\n# generate BoostParts.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############################################################################\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# No warnings. We just use Boost as is so warnings coming from it are just\n\n# noise.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################################\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Linking fails without this on some platforms, notably anything x64.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#############################################################################\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Special compiler and linker flags for MSVC\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# SunOS needs this setting for thread support\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "cpp/CMakeLists.txt" : {
      "ObjectId" : "f48234766b6a113503aa14884f681e2e6d1d852c",
      "LastModified" : "2019-04-05T20:06:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2011-2018 ycmd contributors\n\n#\n\n# This file is part of ycmd.\n\n#\n\n# ycmd is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ycmd is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with ycmd.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OSX requires CMake >= 2.8.12, see YCM issue #1439\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake 2.8.11 is the latest available version on RHEL/CentOS 7\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Get the core version\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check if platform is 64 bit\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############################################################################\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Linux distribution detection.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Red Hat and CentOS detection.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Gentoo detection. Needed because Gentoo is a special snowflake that puts\n\n# llvm in weird places.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#############################################################################\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Turning on this flag tells cmake to emit a compile_commands.json file.\n\n# This file can be used to load compilation flags into YCM. See here for more\n\n# details: http://clang.llvm.org/docs/JSONCompilationDatabase.html\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#############################################################################\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This is needed so that on macs, the library is built in both 32 bit and 64 bit\n\n# versions. Without this python might refuse to load the module, depending on\n\n# how python was built.\n\n# On Mac, boost needs to be compiled universal as well, if used instead of the\n\n# included BoostParts lib. For brew, that's\n\n# \"brew install boost --universal\"\n\n# If the user chose to use the system libclang.dylib (or the libclang.dylib\n\n# binary downloaded from llvm.org) on a mac, then we don't specify universal\n\n# binary building since the system libclang on macs is not  universal (and thus\n\n# linking would fail with universal).\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#############################################################################\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# To shut up the warning about CMake policy CMP0042\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#############################################################################\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Linux machines don't necessarily have libc++ installed alongside clang,\n\n# but HAS_LIBCXX11 doesn't always trigger for machines that DO have libc++. We\n\n# know that at least all the Mac OS versions we support that use Clang have\n\n# libc++, so we're safe there. On FreeBSD 9 libc++ is an optional build\n\n# toggle. On FreeBSD 10 it is the default.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Ninja will by default prevent Clang from outputting diagnostics in color, so\n\n# we force color output\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#############################################################################\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# MSVC has symbols hidden by default. On GCC and Clang we need to explicitly\n\n# set the visibility to hidden to achieve the same result and then manually\n\n# expose what we need. This results in smaller ycm_core dynamic library and thus\n\n# a shorter loading time and higher performance.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#############################################################################\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# MSVC has snprintf since version 14 which is newer than what we support.\n\n# *NOT* defining HAVE_SNPRINTF will break compiling the bundled boost libraries.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#############################################################################\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Force release build by default, speed is of the essence\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#############################################################################\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Determining the presence of C++11 support in the compiler\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#############################################################################\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# For MSVC enable UNICODE and compilation on multiple processors. Increase the\n\n# number of sections that an object file can hold. This is needed for storing\n\n# the Unicode table. Also, force MSVC to treat source files as UTF-8 encoded.\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# BOOST_ALL_NO_LIB turns off MSVC library autolinking\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Enables Python compilation for 64-bit Windows. Already defined by Python\n\n# headers when compiling with MSVC.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#############################################################################\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Cygwin needs its hand held a bit; see issue #473\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Platform-specific advice goes here. In particular, we have plenty of users\n\n# in corporate environments on RHEL/CentOS, where the default system compiler\n\n# is too old.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# on RHEL and CentOS, users require the devtoolset-3 or greater. However, we\n\n# recommended the devtoolset-6 because it is the newest at the time of\n\n# writing. And why not.\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Finally, just check if it is installed and they just need to activate it.\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Note: build.py always explicitly sets this option, so the default used here\n\n# rarely matters.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# 3.5 is ONLY the mininum\n",
        "Line" : 257,
        "CharPositionInLine" : 43
      },
      "37" : {
        "Text" : "#############################################################################\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "cpp/ycm/CMakeLists.txt" : {
      "ObjectId" : "3851e3d9047d9024fd308af7a4ee0acd2738938d",
      "LastModified" : "2019-04-05T20:06:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2011-2019 ycmd contributors\n\n#\n\n# This file is part of YouCompleteMe.\n\n#\n\n# YouCompleteMe is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# YouCompleteMe is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with YouCompleteMe.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if the Clang archive is already downloaded and its checksum is\n\n# correct.  If this is not the case, remove it if needed and download it.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Copy and extract the Clang archive in the building directory.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# We determine PATH_TO_LLVM_ROOT by searching the libclang library path in\n\n# CMake build folder.\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# file( GLOB_RECURSE ... ) returns a list of files. Take the first one.\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# We know that LLVM root is parent to the directory containing libclang so we\n\n# need to go up two directories:\n\n#\n\n#   /path/to/llvm/root/lib/libclang.so/../.. = /path/to/llvm/root/\n\n#\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Need TEMP because find_library does not work with an option variable\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# This is a workaround for a CMake bug with include_directories(SYSTEM ...)\n\n# on Mac OS X. Bug report: http://public.kitware.com/Bug/view.php?id=10837\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The test and benchmark sources are a part of a different target, so we remove\n\n# them. The CMakeFiles cpp file is picked up when the user creates an in-source\n\n# build, and we don't want that. We also remove client-specific code.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The SYSTEM flag makes sure that -isystem[header path] is passed to the\n\n# compiler instead of the standard -I[header path]. Headers included with\n\n# -isystem do not generate warnings (and they shouldn't; e.g. boost warnings are\n\n# just noise for us since we won't be changing them).\n\n# Since there is no -isystem flag equivalent on Windows, headers from external\n\n# projects may conflict with our headers and override them. We prevent that by\n\n# including these directories after ours.\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#############################################################################\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# One can use the system libclang.[so|dylib] like so:\n\n#   cmake -DUSE_SYSTEM_LIBCLANG=1 [...]\n\n# One can also explicitly pick the external libclang.[so|dylib] for use like so:\n\n#   cmake -DEXTERNAL_LIBCLANG_PATH=/path/to/libclang.so [...]\n\n# The final .so we build will then first look in the same dir in which it is\n\n# located for libclang.so. This is provided by the rpath = $ORIGIN feature.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# On Debian-based systems, llvm installs into /usr/lib/llvm-x.y.\n",
        "Line" : 270,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# On FreeBSD , llvm install into /usr/local/llvm-xy\n",
        "Line" : 272,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Need TEMP because find_library does not work with an option variable\n\n# On Debian-based systems only a symlink to libclang.so.1 is created\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Setting this to true makes sure that libraries we build will have our\n\n# rpath set even without having to do \"make install\"\n",
        "Line" : 292,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Add directories from all libraries outside the build tree to the rpath.\n\n# This makes the dynamic linker able to find non system libraries that\n\n# our libraries require, in particular the Python one (from pyenv for\n\n# instance).\n",
        "Line" : 296,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# On Linux, the library target is a symlink of the soversion one.  Since it\n\n# will be copied in the project folder, we need the symlinked library.\n",
        "Line" : 304,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Needed on Linux machines, but not on Macs and OpenBSD\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#############################################################################\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Remove all previous libclang libraries.\n",
        "Line" : 342,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# When building with MSVC, we need to copy libclang.dll instead of libclang.lib\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "#############################################################################\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# We don't want the \"lib\" prefix, it can screw up python when it tries to search\n\n# for our module\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# DLL platforms put dlls in the RUNTIME_OUTPUT_DIRECTORY\n\n# First for the generic no-config case (e.g. with mingw)\n",
        "Line" : 371,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Second, for multi-config builds (e.g. msvc)\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# This is the extension for compiled Python modules on Windows\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# This is the extension for compiled Python modules in Cygwin and msys\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Even on macs, we want a .so extension instead of a .dylib which is what\n\n# cmake would give us by default. Python won't recognize a .dylib as a module,\n\n# but it will recognize a .so\n",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#############################################################################\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# For some reason, Xcode is too dumb to understand the -isystem flag and thus\n\n# borks on warnings in Boost.\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# We want all warnings, and warnings should be treated as errors\n",
        "Line" : 406,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#############################################################################\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# SunOS needs this setting for thread support\n",
        "Line" : 413,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "###############################################################################\n",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "cpp/ycm/benchmarks/CMakeLists.txt" : {
      "ObjectId" : "518f4ea259d37d89a041062e775bde14839941cc",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2017 ycmd contributors\n\n#\n\n# This file is part of ycmd.\n\n#\n\n# ycmd is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# ycmd is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with ycmd.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We don't want to test the benchmark library.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We don't want benchmark sources in this target.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build benchmark and ycm_core_benchmarks targets in cmake ycm/benchmarks\n\n# folder.\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cpp/ycm/benchmarks/benchmark/CMakeLists.txt" : {
      "ObjectId" : "f7f1566f5693e878139237971720ce2f64a00fd5",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake 3.1\n\n# export EXE_LINKER_FLAGS to try_run\n",
        "Line" : 6,
        "CharPositionInLine" : 12
      },
      "1" : {
        "Text" : "# Make sure we can import out CMake functions\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Read the git tags to determine the project version\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tell the user what versions we are using\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The version of the libraries\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Import our CMake modules\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Try and enable C++11. Don't use C++14 because it doesn't work in some\n\n# configurations.\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Turn compiler warnings up to 11\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#ICC17u2: Many false positives for Wstrict-aliasing\n",
        "Line" : 102,
        "CharPositionInLine" : 52
      },
      "11" : {
        "Text" : "# ICC17u2: overloaded virtual function \"benchmark::Fixture::SetUp\" is only partially overridden\n\n# (because of deprecated overload)\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# On most UNIX like platforms g++ and clang++ define _GNU_SOURCE as a\n\n# predefined macro, which turns on all of the wonderful libc extensions.\n\n# However g++ doesn't do this in Cygwin so we have to define it ourselfs\n\n# since we depend on GNU/POSIX/BSD extensions.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Link time optimisation\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Coverage build type\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Adding -nodefaultlibs directly to CMAKE_<TYPE>_LINKER_FLAGS will break\n\n# configuration checks such as 'find_package(Threads)'\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# -lc++ cannot be added directly to CMAKE_<TYPE>_LINKER_FLAGS because\n\n# linker flags appear before all linker inputs and -lc++ must appear after.\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# C++ feature checks\n\n# Determine the correct regular expression engine to use\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Ensure we have pthreads\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set up directories\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build the targets\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cpp/ycm/benchmarks/benchmark/cmake/AddCXXCompilerFlag.cmake" : {
      "ObjectId" : "0b176ba27f1f7043b8d6c0a10e365bd199fb9ec7",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Adds a compiler flag if it is supported by the compiler\n\n#\n\n# This function checks that the supplied compiler flag is supported and then\n\n# adds it to the corresponding compiler flags\n\n#\n\n#  add_cxx_compiler_flag(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(AddCXXCompilerFlag)\n\n# add_cxx_compiler_flag(-Wall)\n\n# add_cxx_compiler_flag(-no-strict-aliasing RELEASE)\n\n# Requires CMake 2.6+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/ycm/benchmarks/benchmark/cmake/CXXFeatureCheck.cmake" : {
      "ObjectId" : "6efe6a84ee4936867167774654743159ad61e18a",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Compile and run code to check for C++ features\n\n#\n\n# This functions compiles a source file under the `cmake` folder\n\n# and adds the corresponding `HAVE_[FILENAME]` flag to the CMake\n\n# environment\n\n#\n\n#  cxx_feature_check(<FLAG> [<VARIANT>])\n\n#\n\n# - Example\n\n#\n\n# include(CXXFeatureCheck)\n\n# cxx_feature_check(STD_REGEX)\n\n# Requires CMake 2.8.12+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/ycm/benchmarks/benchmark/cmake/GetGitVersion.cmake" : {
      "ObjectId" : "8dd948004597acda5a70464ac01bf810747f55ff",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git tags\n\n#\n\n# This function inspects the annotated git tags for the project and returns a string\n\n# into a CMake variable\n\n#\n\n#  get_git_version(<var>)\n\n#\n\n# - Example\n\n#\n\n# include(GetGitVersion)\n\n# get_git_version(GIT_VERSION)\n\n#\n\n# Requires CMake 2.8.11+\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Work out if the repository is dirty\n",
        "Line" : 34,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 2
    },
    "cpp/ycm/benchmarks/benchmark/src/CMakeLists.txt" : {
      "ObjectId" : "244484b8b057a1c20eb0bd85cfa66b2260864169",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow the source files to find headers in src/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link threads.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need extra libraries on Windows\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Install target (will install the library to specified CMAKE_INSTALL_PREFIX variable)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cpp/ycm/tests/CMakeLists.txt" : {
      "ObjectId" : "fe7c36db80428db02cb9ade771bf68193cc21444",
      "LastModified" : "2019-04-05T20:06:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (C) 2011 Google Inc.\n\n#\n\n# This file is part of YouCompleteMe.\n\n#\n\n# YouCompleteMe is free software: you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# YouCompleteMe is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with YouCompleteMe.  If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The gtest library triggers warnings, so we turn them off; it's not up to us to\n\n# fix gtest warnings, it's up to upstream.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Override BUILD_SHARED_LIBS option in gmock and gtest CMakeLists\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# We don't want gmock sources in this target\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is needed to compile tests with the gtest shared library\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Fix gtest build on MSVC 11.  See: http://stackoverflow.com/a/8274747\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Build gmock and ycm_core_tests targets in cmake ycm/tests folder\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ycm_core must be linked after Boost libraries on Windows.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# There is no portable way of discovering the absolute path of the executable,\n\n# but whereami library supports all OS's on which we run tests regularly plus\n\n# some *BSD flavours on top of that.\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cpp/ycm/tests/cmake/FindGMock.cmake" : {
      "ObjectId" : "ad857de94b2c5883e4dd08cb5a486f3d6edd25b7",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate the Google C++ Mocking Framework.\n\n# (This file is almost an identical copy of the original FindGTest.cmake file,\n\n#  feel free to use it as it is or modify it for your own needs.)\n\n#\n\n#\n\n# Defines the following variables:\n\n#\n\n#   GMOCK_FOUND - Found the Google Testing framework\n\n#   GMOCK_INCLUDE_DIRS - Include directories\n\n#\n\n# Also defines the library variables below as normal\n\n# variables. These contain debug/optimized keywords when\n\n# a debugging library is found.\n\n#\n\n#   GMOCK_BOTH_LIBRARIES - Both libgmock & libgmock-main\n\n#   GMOCK_LIBRARIES - libgmock\n\n#   GMOCK_MAIN_LIBRARIES - libgmock-main\n\n#\n\n# Accepts the following variables as input:\n\n#\n\n#   GMOCK_ROOT - (as a CMake or environment variable)\n\n#                The root directory of the gmock install prefix\n\n#\n\n#   GMOCK_MSVC_SEARCH - If compiling with MSVC, this variable can be set to\n\n#                       \"MD\" or \"MT\" to enable searching a gmock build tree\n\n#                       (defaults: \"MD\")\n\n#\n\n#-----------------------\n\n# Example Usage:\n\n#\n\n#    find_package(GMock REQUIRED)\n\n#    include_directories(${GMOCK_INCLUDE_DIRS})\n\n#\n\n#    add_executable(foo foo.cc)\n\n#    target_link_libraries(foo ${GMOCK_BOTH_LIBRARIES})\n\n#\n\n#=============================================================================\n\n# This file is released under the MIT licence:\n\n#\n\n# Copyright (c) 2011 Matej Svec\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n\n# of this software and associated documentation files (the \"Software\"), to\n\n# deal in the Software without restriction, including without limitation the\n\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n\n# sell copies of the Software, and to permit persons to whom the Software is\n\n# furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included in\n\n# all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n\n# IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The provided /MD project files for Google Mock add -md suffixes to the\n\n# library names.\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cpp/ycm/tests/gmock/CMakeLists.txt" : {
      "ObjectId" : "4cc66372b315b2b19dbd01301c453528ce7bd8ca",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 56,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 62,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 147,
        "CharPositionInLine" : 43
      },
      "21" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 24
    },
    "cpp/ycm/tests/gmock/Makefile.am" : {
      "ObjectId" : "7ad45888fb8505100124d5e8ef82ce2cb0d943f8",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Script for diagnosing compiler errors in programs that use Google\n\n# Mock.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "cpp/ycm/tests/gmock/gtest/CMakeLists.txt" : {
      "ObjectId" : "bd78cfe675bd5b986194645c0905a1170c78da09",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 52,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Where Google Test's libraries can be found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 184,
        "CharPositionInLine" : 43
      },
      "20" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 206,
        "CharPositionInLine" : 46
      },
      "24" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 25
    },
    "cpp/ycm/tests/gmock/gtest/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cpp/ycm/tests/gmock/gtest/cmake/internal_utils.cmake" : {
      "ObjectId" : "93e6dbb7c196d33706425ffbe3fcf3ed48d07f03",
      "LastModified" : "2018-03-18T19:10:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 122,
        "CharPositionInLine" : 32
      },
      "22" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 36
    },
    "ycmd/tests/java/testdata/simple_maven_project/pom.xml" : {
      "ObjectId" : "8254e4f7c89bc0c64cd8349cb61f6b555d7e5859",
      "LastModified" : "2019-04-05T20:06:37Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 14,
    "AUTOMAKE" : 2,
    "MAVEN" : 1
  },
  "ElapsedTime" : 3555
}