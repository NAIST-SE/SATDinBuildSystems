{
  "Repository" : "72259",
  "Revision" : "HEAD",
  "ObjectId" : "58c67b6813e761bcfc6918d5d3e257f2c6c51614",
  "CommitTime" : "2019-04-19T01:46:45Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "79d2269ca9d58c5f5ad1cf1e77c717a3ad2fbe23",
      "LastModified" : "2019-03-25T20:01:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Please ensure that any changes remain compliant with 2.8.10.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Version numbering - should be bumped for each release\n\n# Note that for \"beta\" releases, we should start at x.90.0 -- we've\n\n# had too many 1.100.1 releases. :-)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This should be phased out in preference for just using the target name\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This would be better handled with external projects...\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up our path handling, inspired by the path handling used in KDE\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Windows - bin dir = lib dir to load libraries\n",
        "Line" : 53,
        "CharPositionInLine" : 7
      },
      "6" : {
        "Text" : "# Ensure a fresh file is made each time CMake is run\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Place binaries and libraries in the root of the build directory\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This is preferable on WIndows for example - bin = lib directory.\n",
        "Line" : 85,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "#GLIBC_2.4\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Static building\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# set cl flags for static compiling\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# note: static libraries are specified when running cmake\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Should we attempt to use the system inchi library?\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# FIXME: not used on windows... - inconsistency\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# configure checks\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Longstanding unsolved problem with compression under Windows\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# wxWidgets instructions based on http://wiki.wxwidgets.org/CMake\n\n#find_package(wxWidgets COMPONENTS base core REQUIRED)\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Ensure that CharacterSet=\"0\" in the project files\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Single-Byte Character Set (requires CMake 2.8.8)\n",
        "Line" : 184,
        "CharPositionInLine" : 27
      },
      "20" : {
        "Text" : "# dlhandler_win32.cpp assumes multibyte character set\n",
        "Line" : 190,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# The following line is required for check_include_file(rpc/xdr.h ...) below\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Force OPENBABEL_USE_SYSTEM_INCHI to ON, as this should be using the binary\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# BSDs don't link against libdl, but rather libc\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Cygwin may be missing an XDR function: https://www.gnu.org/software/gnulib/manual/html_node/xdrstdio_005fcreate.html\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Get the GCC version - from KDE4 cmake files\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Add some visibility support when using GCC\n\n# note: Altough MinGW g++ 4.4 passes this test, visibility can't be used\n",
        "Line" : 277,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Now check if we can use visibility to selectively export symbols\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# We have all the parts necessary - use visibility support\n",
        "Line" : 300,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# To avoid warnings when linking the plugins and exes\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Intel C++ Compiler\n\n# Note: Windows version uses different options!\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Set some linker flags\n",
        "Line" : 358,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fvisibility=hidden\")\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# define WITH_SSE2 to enable the SSE2 instruction set.\n\n# Available on Pentium 4, Athlon 64, and newer CPUs.\n\n# TODO: Remove this? Should be handled by -march=native and only enabled if OPTIMIZE_NATIVE is ON\n",
        "Line" : 384,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#Find if OpenMP support is enabled\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Some rpath handling for Linux and Mac\n",
        "Line" : 407,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Three build types are available: Release, Debug, RelWithDebInfo.\n\n# We default to Release.\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#define various build types\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#cjh\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# find and setup Eigen2\n",
        "Line" : 455,
        "CharPositionInLine" : 23
      },
      "40" : {
        "Text" : "#cjh\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# First try find system rapidjson\n",
        "Line" : 467,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Otherwise download rapidjson to openbabel source directory\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Should we enable optimizations for the native CPU architecture?\n\n# (this will speed up JSON handling, similarity calculations and maybe those involving Eigen)\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Tell rapidjson which extensions are available\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Should we build the GUI? Default is yes on Linux or Windows, not Mac.\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Do we want to build the tests?\n",
        "Line" : 544,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Should the language bindings be regenereted?\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Build bindings only\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Point to library if building bindings only\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Should all bindings be built?\n",
        "Line" : 562,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Should PHP bindings be built\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Should Python bindings be built?\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Should Ruby bindings be built?\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Should Perl bindings be built?\n",
        "Line" : 574,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Should Java bindings be built?\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Should R bindings be built?\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Should CSharp bindings be built?\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# A minimal build with just two formats (SMI, SDF) useful for developers\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Create the Config and ConfigVersion files in the build directory, useful to\n\n# build against an uninstalled OpenBabel build. Simply set OpenBabel2_DIR to\n\n# point at the build directory and call find_package(OpenBabel2)\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Now to configure the installed config file.\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# from https://cmake.org/Wiki/RecipeAddUninstallTarget\n\n########### Add uninstall target ###############\n",
        "Line" : 636,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 62
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "4b432527adbeb309f69e683fdbb3e15f7d5211f7",
      "LastModified" : "2010-11-22T05:51:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindCairo.cmake" : {
      "ObjectId" : "f2c259dffe1997de83833c64cc84d1c67ec9850f",
      "LastModified" : "2013-07-11T20:47:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find Cairo\n\n# Once done this will define\n\n#\n\n#  CAIRO_FOUND - system has Cairo\n\n#  CAIRO_CFLAGS - the Cairo CFlags\n\n#  CAIRO_INCLUDE_DIRS - the Cairo include directories\n\n#  CAIRO_LIBRARIES - Link these to use Cairo\n\n#\n\n# Copyright (C) 2007, 2010, Pino Toscano, <pino@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindEigen2.cmake" : {
      "ObjectId" : "da95bb0f547d2bb4f0a6db170dfab76ee368a219",
      "LastModified" : "2011-05-19T18:34:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen2 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen2 2.0.3)\n\n# to require version 2.0.3 to newer of Eigen2.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN2_FOUND - system has eigen lib with correct version\n\n#  EIGEN2_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN2_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindEigen3.cmake" : {
      "ObjectId" : "9c546a05d859b18c49554d7ee7221cc486b7760e",
      "LastModified" : "2011-05-19T18:34:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindInchi.cmake" : {
      "ObjectId" : "188db0d8e5320dc681660c36c8cc0346c4031950",
      "LastModified" : "2013-07-11T20:39:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Inchi lib\n\n# Once done this will define\n\n#\n\n#  INCHI_FOUND - system has eigen lib\n\n#  INCHI_INCLUDE_DIR - the eigen include directory\n\n#  INCHI_LIBRARIES - the inchi library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2010 Marcus D. Hanwell, <marcus@cryos.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindRapidJSON.cmake" : {
      "ObjectId" : "afa9611a9f88a08bcd2cf66f5742c5754ad4b4da",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find RapidJSON\n\n#\n\n# This module makes use of the following variable:\n\n#\n\n# RAPIDJSON_INCLUDE_DIR   - Path to RapidJSON include directory\n\n#\n\n# This module will define the following variables:\n\n#\n\n# RAPIDJSON_FOUND         - True if RapidJSON was found\n\n# RAPIDJSON_INCLUDE_DIRS  - Path to RapidJSON include directory\n\n# RAPIDJSON_VERSION       - The version of RapidJSON that was found\n\n#\n\n# Copyright (C) 2018 by Matt Swain <m.swain@me.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use pkg-config to get the include dir and use it as a hint in find_path\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Find include path with hints from manually specified RAPIDJSON_INCLUDE_DIR and pkg-config\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Get the version from pkg-config otherwise parse from the header file\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/modules/OptimizeNative.cmake" : {
      "ObjectId" : "6589f0f6874a11a5bf1b3596ea9ed6735b089ce0",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check support for native CPU architecture optimizations\r\n\n#\r\n\n# This module will define the following variables:\r\n\n#\r\n\n# NATIVE_FLAGS - compiler flags to enable supported native optimizations\r\n\n# HAVE_SSE2    - SSE2 supported\r\n\n# HAVE_SSE4_2  - SSE4.2 supported\r\n\n# HAVE_AVX     - AVX supported\r\n\n# HAVE_AVX2    - AVX2 supported\r\n\n# HAVE_NEON    - ARM NEON supported\r\n\n#\r\n\n# Copyright (C) 2018 by Matt Swain <m.swain@me.com>\r\n\n# Redistribution and use is allowed according to the terms of the BSD license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# /arch:SSE4 flag doesn't exist?\r\n",
        "Line" : 19,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# Store current CMAKE_REQUIRED_FLAGS so we can reset to this afterwards\r\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Reset CMAKE_REQUIRED_FLAGS\r\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check if __ARM_NEON is defined  TODO: Not sure this works\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set native flags to all supported\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For gcc, clang, intel, just use -march=native to automatically enable all supported flags\r\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# -msse2 -msse4.2 -mavx -mavx2\r\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# For MSVC, enable flags individually (Don't set /arch:SSE2 if CMAKE_CL_64 - it is on by default)\r\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "cmake/modules/UsePythonTest.cmake" : {
      "ObjectId" : "21dfb2b0ce3583cfc08de677665c8e581ccdb230",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add a python test from a python file\n\n# One cannot simply do:\n\n# SET(ENV{PYTHONPATH} ${LIBRARY_OUTPUT_PATH})\n\n# SET(my_test \"from test_mymodule import *\\;test_mymodule()\")\n\n# ADD_TEST(PYTHON-TEST-MYMODULE  python -c ${my_test})\n\n# Since cmake is only transmitting the ADD_TEST line to ctest thus you are loosing\n\n# the env var. The only way to store the env var is to physically write in the cmake script\n\n# whatever PYTHONPATH you want and then add the test as 'cmake -P python_test.cmake'\n\n# \n\n# Usage:\n\n# SET_SOURCE_FILES_PROPERTIES(test.py PROPERTIES PYTHONPATH\n\n#   \"${LIBRARY_OUTPUT_PATH}:${VTK_DIR}\")\n\n# ADD_PYTHON_TEST(PYTHON-TEST test.py)\n\n#\n\n#  Copyright (c) 2006-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set CMake Policy regarding the use of the @VARNAME@ below\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note the corresponding POP at the end of the file\n",
        "Line" : 24,
        "CharPositionInLine" : 21
      },
      "3" : {
        "Text" : "# Need python interpreter:\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Make sure we handle systems w/o python (e.g. chroot)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Byte compile recursively a directory (DIRNAME)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# First get the path:\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Find the python script:\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# add test, use DIRNAME to create uniq name for the test:\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "498298904ca297332d4564374072b2e5ac81e9e8",
      "LastModified" : "2019-03-05T13:47:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Open Babel data files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "8cd71f121ea53df0c9579e3056872c7af3097efd",
      "LastModified" : "2019-03-02T15:02:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This processes our Doxyfile.in and substitutes paths to generate\n\n# a final Doxyfile\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# This creates a new target to build documentation.\n\n# It runs ${DOXYGEN} which is the full path and executable to\n\n# Doxygen on your system, set by the FindDoxygen.cmake module\n\n# It runs the final generated Doxyfile against it.\n\n# The DOT_PATH is substituted into the Doxyfile.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "doc/examples/CMakeLists.txt" : {
      "ObjectId" : "7e312cec4849553c2daac04c2a446240e9fe8c41",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/examples/static_executable/CMakeLists.txt" : {
      "ObjectId" : "c75f10c58e9c1f52643e2b2e6b3dce64dd5735d3",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This script can be used to create static executables linking to the static\n\n# OpenBabel2 library.\n\n#\n\n# This script requires OpenBabel to be build and installed. For example:\n\n#\n\n#  cd openbabel-2.3\n\n#  mkdir build\n\n#  cd build\n\n#  cmake -DBUILD_SHARED=OFF -DCMAKE_INSTALL_PREFIX=/home/me/some/path ..\n\n#  make\n\n#  make install\n\n#\n\n# To compile your static executable:\n\n#\n\n#  cd myproject\n\n#  mkdir build\n\n#  cd build\n\n#  cmake -DOpenBabel2_DIR=/home/me/some/path/lib/openbabel ..\n\n#  make\n\n#\n\n# All plugins are inside the static libopenbabel.a but the symbols for the\n\n# plugin classes have to be undefined. Plugins can be disabled by removing\n\n# the class names from the format_classes, descriptor_classes, ... lists below.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This line is required for cmake backwards compatibility.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Name of your project\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Create a list of source files (easier to maintain)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the name for the executable\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Set compile flags for various compilers.\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set cl flags for static compiling\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Note: static libraries are specified when running cmake\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Use -static flag to create static executable\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Make sure we find static libraries\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Set the path containing OpenBabel2Config.cmake, needed for find_package below.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# Find and setup OpenBabel2.\n\n#\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Dependencies\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The executable\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Link against imported openbabel target\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Prevent -Wl,-Bdynamic from being added to the end of the link line.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "1273c264461aacf7ed5e5773995d9b19481ff289",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "openbabel-2.0.pc.cmake" : {
      "ObjectId" : "9d18c271b323ba0f2d92ed5faf82fff1ed460ce6",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "b349d02ea82124a83d435d0c3e91a19fa46f2526",
      "LastModified" : "2019-03-25T20:01:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Library versioning (used in Mac Python bindings)x\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module finds an installed SWIG. It sets the following variables:\n\n# SWIG_FOUND - set to true if SWIG is found\n\n# SWIG_DIR - the directory where swig is installed\n\n# SWIG_EXECUTABLE - the path to the swig executable\n\n# SWIG_VERSION   - the version number of the swig executable\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# The following needs to be kept in synch with ..\\CMakeLists.txt\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################\n\n# Python\n\n###################\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Don't link against Python library on Mac\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Link against Python library on Linux and Windows\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "###################\n\n# Java\n\n###################\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "###################\n\n# R\n\n###################\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8,
      "Errorlog" : "line 262:24 token recognition error at: '\"'s/reg\\.finalizer(\\(.*\\)) /reg.finalizer(\\1'\nline 549:16 token recognition error at: '\"\\n        OUTPUT_NAME openbabel-php)\\n    if(NOT BINDINGS_ONLY)\\n      add_dependencies(bindings_php openbabel)\\n    endif()\\n\\n    install(TARGETS bindings_php\\n            LIBRARY DESTINATION ${PHP_EXTENSION_DIR}\\n\\t    COMPONENT bindings_php)\\n    install(FILES ${openbabel_SOURCE_DIR}/scripts/php/openbabel.php\\n            DESTINATION ${LIB_INSTALL_DIR}\\n\\t    COMPONENT bindings_php)\\n\\tinstall(FILES ${openbabel_SOURCE_DIR}/scripts/php/baphpel.php\\n\\t        DESTINATION ${LIB_INSTALL_DIR}\\n\\t    COMPONENT bindings_php)\\n\\nendif (DO_PHP_BINDINGS)\\n\u0000'\n"
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "7bd372313d1fa020c3e89da97c37e10e7d17970e",
      "LastModified" : "2019-04-16T08:50:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Library versioning\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if eigen is available, compile QEq, EQeq, and QTPIE charge models\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the C math library\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make sure to find the static library with .a suffix (see CMAKE_FIND_LIBRARY_SUFFIXES)\n",
        "Line" : 222,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# dl library if it is found and we are doing a shared build\n",
        "Line" : 230,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Set the output name to openbabel-2 (preserves old behaviour). Is this desired?\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Export the openbabel target, for use in other projects\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/GUI/CMakeLists.txt" : {
      "ObjectId" : "54bf0c96b794a8b9282ffc36f8a74611d257cee4",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/config.h.cmake" : {
      "ObjectId" : "78b2ccc864ed65f1dabc6f426a3fb53360d13092",
      "LastModified" : "2019-03-02T15:02:15Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* src/config.h.in.  Generated from configure.in by autoheader.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Where the data files are located */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* The version of Open Babel */",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Version check macro\n   Can be used like #if (OB_VERSION >= OB_VERSION_CHECK(2, 2, 99)) */",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* OB_VERSION is (major << 16) + (minor << 8) + patch */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* The file extension used for shared modules */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "// If we are using a recent GCC version with visibility support use it",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Used to export symbols for DLL / shared library builds */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "// Supress warning on deprecated functions",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "// Supress warning that compiler is ignoring C++ exception specification",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "// Supress warning on signed/unsigned comparison with < or > (harmless, but maybe should be fixed)",
        "Line" : 102,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "// Supress warning on forcing int etc. value to bool 'true' or 'false' (performance warning)",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "//",
        "Line" : 106,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "/* have <conio.h> */",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* have <sys/time.h> */",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* have <time.h> */",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* have <sstream> */",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* have symbol clock_t */",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* have symbol rint */",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* have symbol snprintf */",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* have symbol sranddev */",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* have symbol strcasecmp */",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* have symbol strncasecmp */",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* have struct clock_t */",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* shared pointer implementation to be used */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* header to be included for shared pointers */",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "src/formats/CMakeLists.txt" : {
      "ObjectId" : "baebb48f558ff42d6b7d1cf1a26b705eb3e52d4e",
      "LastModified" : "2018-02-17T15:10:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/formats/formats.cmake" : {
      "ObjectId" : "58e4f16bad93198336c26990391b73e64a8532cc",
      "LastModified" : "2019-03-25T20:01:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# genbankformat can currently only be built statically\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cairo can generate several formats (e.g. PDF, PNG): if implemented, they\n\n# can be added here\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Inchi settings for shared builds\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Inchi settings for static builds\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#  add_definitions(-DINCHI_LINK_AS_DLL)\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/formats/libinchi/CMakeLists.txt" : {
      "ObjectId" : "ca7c919b62eed6a28cfde246835073742d5906ff",
      "LastModified" : "2019-03-25T20:01:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# inchi code has lots of warnings, so let's ignore them\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "4c7390a92c7cb0dd6ffac78b37d3f5ac42d1e107",
      "LastModified" : "2019-03-25T20:01:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# define TESTDATADIR for tests that need input files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define FORMATDIR for location of format plugin binaries\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########################################################\n\n#  new tests using obtest.h\n\n############################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################ Add new tests here\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##################################\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# Relocatable binaries on linux using -static-libgcc. (GCC only)\n\n#\n",
        "Line" : 115,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# make sure the linker will find the static libstdc++\n",
        "Line" : 119,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "############################################################\n\n#  old-style tests using \"not ok\"\n\n############################################################\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# files in test/inchi -- both .sdf and .txt\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "############################################################\n\n#  roundtrip\n\n############################################################\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "###########################\n\n# Tests wrapped in Python #\n\n###########################\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The following tests should work okay in MinGW, it's just that the calling\n\n# script needs some work. On Cygwin, there's some weird DLL problems when\n\n# calling from Python.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###############################\n\n# Tests using Python bindings #\n\n###############################\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "############################################################\n\n# Test 2D depiction using ImageMagick utilities\n\n############################################################\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Example: add_depict_test(${CMAKE_SOURCE_DIR}/test/files/aromatics.smi aromatics ${CMAKE_SOURCE_DIR}/test/files/alias.png)\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "bf36d01e4d9ece279de0824d42c125c333854c27",
      "LastModified" : "2019-04-16T08:50:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# obgrep, obrms, obspectrophore -- require getopt\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "###############################################################################\n\n#\n\n# Build STATIC babel with all plugins taken from the static libopenbabel.a\n\n#\n\n###############################################################################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set libs to imported openbabel target\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make sure to find the static library with .a suffix (see CMAKE_FIND_LIBRARY_SUFFIXES)\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#\n\n# Relocatable binaries on linux using -static-libgcc. (GCC only)\n\n#\n",
        "Line" : 102,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# make sure the linker will find the static libstdc++\n",
        "Line" : 106,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "#\n\n# Default static build using GNU-like compiler.\n\n#\n",
        "Line" : 119,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# APPLE doesn't use -static\n",
        "Line" : 125,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# build a static babel only\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Prevent -Wl,-Bdynamic from being added to the end of the link line.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    }
  },
  "FileTypes" : {
    "CMAKE" : 23,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 5442
}