{
  "Repository" : "81335",
  "Revision" : "HEAD",
  "ObjectId" : "3978e9653b577ce774c1d0b52f92c57067c5da36",
  "CommitTime" : "2019-04-18T14:18:30Z",
  "Files" : {
    ".conan/test_package/CMakeLists.txt" : {
      "ObjectId" : "db05659904e4c55ea9ca233d4765995b9fc485c8",
      "LastModified" : "2018-11-19T14:27:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindGcov.cmake" : {
      "ObjectId" : "414171134c208bcb8ec9a37c2659cec0f7292b0b",
      "LastModified" : "2019-04-10T07:42:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include required Modules\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for gcov binary.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Gcov evaluation is dependent on the used compiler. Check gcov support for\n\n# each compiler that is used. If gcov binary was already found for this\n\n# compiler, do not try to find it again.\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Some distributions like OSX (homebrew) ship gcov with the compiler\n\n# version appended as gcov-x. To find this binary we'll build the\n\n# suggested binary name with the compiler version.\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Some distributions like Debian ship llvm-cov with the compiler\n\n# version appended as llvm-cov-x.y. To find this binary we'll build\n\n# the suggested binary name with the compiler version.\n",
        "Line" : 39,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# llvm-cov prior version 3.5 seems to be not working with coverage\n\n# evaluation tools, but these versions are compatible with the gcc\n\n# gcov tool.\n",
        "Line" : 45,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# set additional parameters\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Fall back to gcov binary if llvm-cov was not found or is\n\n# incompatible. This is the default on OSX, but may crash on\n\n# recent Linux versions.\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add a new global target for all gcov targets. This target could be used to\n\n# generate the gcov files for the whole project instead of calling <TARGET>-gcov\n\n# for each target.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This function will add gcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# Gcov on any source file of <TNAME> once and store the gcov file in the same\n\n# directory.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# call gcov\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# add target for gcov evaluation of <TNAME>\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# add evaluation target to the global gcov target.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 16
    },
    "CMake/FindLcov.cmake" : {
      "ObjectId" : "beb925ae06efb0de816b8a95c16782dbeffeef4a",
      "LastModified" : "2018-11-19T14:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configuration\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for Gcov which is used by Lcov.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This function will add lcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# geninfo on any source file of <TNAME> once and store the info file in the same\n\n# directory.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# capture initial coverage data\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# capture coverage data after execution\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# include required Modules\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for required lcov binaries.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# enable genhtml C++ demangeling, if c++filt is found.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# enable no-external flag for lcov, if available.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If Lcov was not found, exit module now.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create directories to be used.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This function will merge lcov files to a single target file. Additional lcov\n\n# flags may be set with setting LCOV_EXTRA_FLAGS before calling this function.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Remove ${OUTFILE} from ${ARGV} and generate lcov parameters with files.\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Generate merged file.\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Add a new global target to generate initial coverage reports for all targets.\n\n# This target will be used to generate the global initial info file, which is\n\n# used to gather even empty report data.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This function will add initial capture of coverage data for target <TNAME>,\n\n# which is needed to get also data for objects, which were not loaded at\n\n# execution time. It will call geninfo for every source file of <TNAME> once and\n\n# store the info file in the same directory.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# generate empty coverage files\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 178,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add geninfo file generation to global lcov-geninfo target\n",
        "Line" : 184,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 196,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Add a new global target to generate coverage reports for all targets. This\n\n# target will be used to generate the global info file.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This function will add capture of coverage data for target <TNAME>, which is\n\n# needed to get also data for objects, which were not loaded at execution time.\n\n# It will call geninfo for every source file of <TNAME> once and store the info\n\n# file in the same directory.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 243,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Generate coverage files. If no .gcda file was generated during\n\n# execution, the empty coverage file will be used instead.\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 273,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# add geninfo file generation to global lcov-capture target\n",
        "Line" : 278,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Add target for generating html output for this target only.\n",
        "Line" : 284,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 301,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 307,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Add a new global target for all lcov targets. This target could be used to\n\n# generate the lcov html output for the whole project instead of calling\n\n# <TARGET>-geninfo and <TARGET>-genhtml for each target. It will also be\n\n# used to generate a html site for all project data together instead of one\n\n# for each target.\n",
        "Line" : 312,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Add a new global target to generate the lcov html report for the whole project\n\n# instead of calling <TARGET>-genhtml for each target (to create an own report\n\n# for each target). Instead of the lcov target it does not require geninfo for\n\n# all targets, so you have to call <TARGET>-geninfo to generate the info files\n\n# the targets you'd like to have in your report or lcov-geninfo for generating\n\n# info files for all targets before calling lcov-genhtml.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "CMake/Findcodecov.cmake" : {
      "ObjectId" : "2c0f2fee5fdcc92c0a3333f8a8dc586cebf47b68",
      "LastModified" : "2019-04-10T07:42:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in the package base directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add an option to choose, if coverage should be enabled or not. If enabled\n\n# marked targets will be build with coverage support and appropriate targets\n\n# will be added. If disabled coverage will be ignored for *ALL* targets.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gcc and clang\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# gcc and clang fallback\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation. If coverage is disabled or not supported, this function will\n\n# simply do nothing.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# only add coverage for target, if coverage is support and enabled.\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Add global target to gather coverage information after all targets have been\n\n# added. Other evaluation functions could be added here, after checks for the\n\n# specific module have been passed.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add lcov evaluation\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Exit this module, if coverage is disabled. add_coverage is defined before this\n\n# return, so this module can be exited now safely without breaking any build-\n\n# scripts.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Find the reuired flags foreach language.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Coverage flags are not dependent on language, but the used compiler. So\n\n# instead of searching flags foreach language, search flags foreach compiler\n\n# used.\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# CheckFortranCompilerFlag was introduced in CMake 3.x. To be\n\n# compatible with older Cmake versions, we will check if this\n\n# module is present before we use it. Otherwise we will define\n\n# Fortran coverage support as not available.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Helper function to get the language of a source file.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Helper function to get the relative path of the source file destination path.\n\n# This path is needed by FindGcov and FindLcov cmake files to locate the\n\n# captured data.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If expression was found, SOURCEFILE is a generator-expression for an\n\n# object library. Currently we found no way to call this function automatic\n\n# for the referenced target, so it must be called in the directoryso of the\n\n# object library definition.\n",
        "Line" : 159,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get the right path for file\n",
        "Line" : 174,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Check if all sources for target use the same compiler. If a target uses\n\n# e.g. C and Fortran mixed and uses different compilers (e.g. clang and\n\n# gfortran) this can trigger huge problems, because different compilers may\n\n# use different implementations for code coverage.\n",
        "Line" : 186,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# If expression was found, FILE is a generator-expression for an object\n\n# library. Object libraries will be ignored.\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# A warning has been printed before, so just return if flags for this\n\n# compiler aren't available.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# enable coverage for target\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Add gcov files generated by compiler to clean target.\n",
        "Line" : 237,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Include modules for parsing the collected data and output it in a readable\n\n# format (like gcov and lcov).\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "CMake/MiscFunctions.cmake" : {
      "ObjectId" : "262f7cd8292afcef9f6612c337d2a931ede37c98",
      "LastModified" : "2018-11-19T14:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#checks that the given hard-coded list contains all headers + sources in the given folder\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "549ee17884c72dc116ce83bcee38d995f7e658c9",
      "LastModified" : "2019-04-18T11:47:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect if Catch is being bundled,\n\n# disable testsuite in that case\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Provide path for scripts\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# define some folders\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add catch as a 'linkable' target\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# depend on some obvious c++11 features so the dependency is transitively added dependents\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# provide a namespaced alias for clients to 'link' against if catch is included as a sub-project\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Only perform the installation steps when Catch is not being used as\n\n# a subproject via `add_subdirectory`, or the destinations will break,\n\n# see https://github.com/catchorg/Catch2/issues/1373\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# create and install an export set for catch target as Catch2::Catch\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# By default, FooConfigVersion is tied to architecture that it was\n\n# generated on. Because Catch2 is header-only, it is arch-independent\n\n# and thus Catch2ConfigVersion should not be tied to the architecture\n\n# it was generated on.\n\n#\n\n# CMake does not provide a direct customization point for this in\n\n# `write_basic_package_version_file`, but it can be accomplished\n\n# indirectly by temporarily undefining `CMAKE_SIZEOF_VOID_P`.\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Install documentation\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Install CMake scripts\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Install debugger helpers\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## Provide some pkg-config integration\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# CPack/CMake started taking the package version from project version 3.12\n\n# So we need to set the version manually for older CMake versions\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 14
    },
    "contrib/Catch.cmake" : {
      "ObjectId" : "486e323318cb16a7a65bcf4e26244086d8497617",
      "LastModified" : "2018-11-19T14:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nCatch\n-----\n\nThis module defines a function to help use the Catch test framework.\n\nThe :command:`catch_discover_tests` discovers tests by asking the compiled test\nexecutable to enumerate its tests.  This does not require CMake to be re-run\nwhen tests change.  However, it may not work in a cross-compiling environment,\nand setting test properties is less convenient.\n\nThis command is intended to replace use of :command:`add_test` to register\ntests, and will create a separate CTest test for each Catch test case.  Note\nthat this is in some cases less efficient, as common set-up and tear-down logic\ncannot be shared by multiple test cases executing in the same instance.\nHowever, it provides more fine-grained pass/fail information to CTest, which is\nusually considered as more beneficial.  By default, the CTest test name is the\nsame as the Catch name; see also ``TEST_PREFIX`` and ``TEST_SUFFIX``.\n\n.. command:: catch_discover_tests\n\n  Automatically add tests with CTest by querying the compiled test executable\n  for available tests::\n\n    catch_discover_tests(target\n                         [TEST_SPEC arg1...]\n                         [EXTRA_ARGS arg1...]\n                         [WORKING_DIRECTORY dir]\n                         [TEST_PREFIX prefix]\n                         [TEST_SUFFIX suffix]\n                         [PROPERTIES name1 value1...]\n                         [TEST_LIST var]\n    )\n\n  ``catch_discover_tests`` sets up a post-build command on the test executable\n  that generates the list of tests by parsing the output from running the test\n  with the ``--list-test-names-only`` argument.  This ensures that the full\n  list of tests is obtained.  Since test discovery occurs at build time, it is\n  not necessary to re-run CMake when the list of tests changes.\n  However, it requires that :prop_tgt:`CROSSCOMPILING_EMULATOR` is properly set\n  in order to function in a cross-compiling environment.\n\n  Additionally, setting properties on tests is somewhat less convenient, since\n  the tests are not available at CMake time.  Additional test properties may be\n  assigned to the set of tests as a whole using the ``PROPERTIES`` option.  If\n  more fine-grained test control is needed, custom content may be provided\n  through an external CTest script using the :prop_dir:`TEST_INCLUDE_FILES`\n  directory property.  The set of discovered tests is made accessible to such a\n  script via the ``<target>_TESTS`` variable.\n\n  The options are:\n\n  ``target``\n    Specifies the Catch executable, which must be a known CMake executable\n    target.  CMake will substitute the location of the built executable when\n    running the test.\n\n  ``TEST_SPEC arg1...``\n    Specifies test cases, wildcarded test cases, tags and tag expressions to\n    pass to the Catch executable with the ``--list-test-names-only`` argument.\n\n  ``EXTRA_ARGS arg1...``\n    Any extra arguments to pass on the command line to each test case.\n\n  ``WORKING_DIRECTORY dir``\n    Specifies the directory in which to run the discovered test cases.  If this\n    option is not provided, the current binary directory is used.\n\n  ``TEST_PREFIX prefix``\n    Specifies a ``prefix`` to be prepended to the name of each discovered test\n    case.  This can be useful when the same test executable is being used in\n    multiple calls to ``catch_discover_tests()`` but with different\n    ``TEST_SPEC`` or ``EXTRA_ARGS``.\n\n  ``TEST_SUFFIX suffix``\n    Similar to ``TEST_PREFIX`` except the ``suffix`` is appended to the name of\n    every discovered test case.  Both ``TEST_PREFIX`` and ``TEST_SUFFIX`` may\n    be specified.\n\n  ``PROPERTIES name1 value1...``\n    Specifies additional properties to be set on all tests discovered by this\n    invocation of ``catch_discover_tests``.\n\n  ``TEST_LIST var``\n    Make the list of tests available in the variable ``var``, rather than the\n    default ``<target>_TESTS``.  This can be useful when the same test\n    executable is being used in multiple calls to ``catch_discover_tests()``.\n    Note that this variable is only available in CTest.\n\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Generate a unique name based on the extra arguments\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Define rule to generate test list for aforementioned test executable\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add discovered tests to directory TEST_INCLUDE_FILES\n",
        "Line" : 151,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add discovered tests as directory TEST_INCLUDE_FILE if possible\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "###############################################################################\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "contrib/CatchAddTests.cmake" : {
      "ObjectId" : "ca5ebc17e599a82425bf8ba2ffb98c1ca1cb4252",
      "LastModified" : "2019-04-18T11:47:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# form a bracket_argument\n",
        "Line" : 17,
        "CharPositionInLine" : 44
      },
      "2" : {
        "Text" : "# convert to list of tags\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use escape commas to handle properly test cases with commans inside the name\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ...and add to script\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Run test executable to get list of available tests\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Catch --list-test-names-only reports the number of tests, so 0 is... surprising\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Parse output\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# lines without leading whitespaces are catch output not tests\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# strip leading spaces and tabs\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Create a list of all discovered tests, which users may use to e.g. set\n\n# properties on the tests\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Write CTest script\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "contrib/ParseAndAddCatchTests.cmake" : {
      "ObjectId" : "925d932819621028968173aa07c930ff0d096853",
      "LastModified" : "2019-04-18T11:47:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#==================================================================================================#\n\n#  supported macros                                                                                #\n\n#    - TEST_CASE,                                                                                  #\n\n#    - SCENARIO,                                                                                   #\n\n#    - TEST_CASE_METHOD,                                                                           #\n\n#    - CATCH_TEST_CASE,                                                                            #\n\n#    - CATCH_SCENARIO,                                                                             #\n\n#    - CATCH_TEST_CASE_METHOD.                                                                     #\n\n#                                                                                                  #\n\n#  Usage                                                                                           #\n\n# 1. make sure this module is in the path or add this otherwise:                                   #\n\n#    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake.modules/\")              #\n\n# 2. make sure that you've enabled testing option for the project by the call:                     #\n\n#    enable_testing()                                                                              #\n\n# 3. add the lines to the script for testing target (sample CMakeLists.txt):                       #\n\n#        project(testing_target)                                                                   #\n\n#        set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_SOURCE_DIR}/cmake.modules/\")          #\n\n#        enable_testing()                                                                          #\n\n#                                                                                                  #\n\n#        find_path(CATCH_INCLUDE_DIR \"catch.hpp\")                                                  #\n\n#        include_directories(${INCLUDE_DIRECTORIES} ${CATCH_INCLUDE_DIR})                          #\n\n#                                                                                                  #\n\n#        file(GLOB SOURCE_FILES \"*.cpp\")                                                           #\n\n#        add_executable(${PROJECT_NAME} ${SOURCE_FILES})                                           #\n\n#                                                                                                  #\n\n#        include(ParseAndAddCatchTests)                                                            #\n\n#        ParseAndAddCatchTests(${PROJECT_NAME})                                                    #\n\n#                                                                                                  #\n\n# The following variables affect the behavior of the script:                                       #\n\n#                                                                                                  #\n\n#    PARSE_CATCH_TESTS_VERBOSE (Default OFF)                                                       #\n\n#    -- enables debug messages                                                                     #\n\n#    PARSE_CATCH_TESTS_NO_HIDDEN_TESTS (Default OFF)                                               #\n\n#    -- excludes tests marked with [!hide], [.] or [.foo] tags                                     #\n\n#    PARSE_CATCH_TESTS_ADD_FIXTURE_IN_TEST_NAME (Default ON)                                       #\n\n#    -- adds fixture class name to the test name                                                   #\n\n#    PARSE_CATCH_TESTS_ADD_TARGET_IN_TEST_NAME (Default ON)                                        #\n\n#    -- adds cmake target name to the test name                                                    #\n\n#    PARSE_CATCH_TESTS_ADD_TO_CONFIGURE_DEPENDS (Default OFF)                                      #\n\n#    -- causes CMake to rerun when file with tests changes so that new tests will be discovered    #\n\n#                                                                                                  #\n\n# One can also set (locally) the optional variable OptionalCatchTestLauncher to precise the way    #\n\n# a test should be run. For instance to use test MPI, one can write                                #\n\n#     set(OptionalCatchTestLauncher ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} ${NUMPROC})                 #\n\n# just before calling this ParseAndAddCatchTests function                                          #\n\n#                                                                                                  #\n\n# The AdditionalCatchParameters optional variable can be used to pass extra argument to the test   #\n\n# command. For example, to include successful tests in the output, one can write                   #\n\n#     set(AdditionalCatchParameters --success)                                                     #\n\n#                                                                                                  #\n\n# After the script, the ParseAndAddCatchTests_TESTS property for the target, and for each source   #\n\n# file in the target is set, and contains the list of the tests extracted from that target, or     #\n\n# from that file. This is useful, for example to add further labels or properties to the tests.    #\n\n#                                                                                                  #\n\n#==================================================================================================#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This removes the contents between\n\n#  - block comments (i.e. /* ... */)\n\n#  - full line comments (i.e. // ... )\n\n# contents have been read into '${CppCode}'.\n\n# !keep partial line comments\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Worker function\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If SourceFile is an object library, do not scan it (as it is not a file). Exit without giving a warning about a missing file.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# According to CMake docs EXISTS behavior is well-defined only for full paths.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Remove block and fullline comments\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Find definition of test names\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Strip newlines\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Get test type and fixture if applicable\n",
        "Line" : 124,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Get string parts of test definition\n",
        "Line" : 129,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Strip wrapping quotation marks\n",
        "Line" : 132,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Validate that a test name and tags have been provided\n",
        "Line" : 136,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Assign name and tags\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# add target to labels to enable running all tests added from this target\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# remove target from labels if the test is hidden\n",
        "Line" : 160,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# unset tags variable from previous loop\n",
        "Line" : 167,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# Escape commas in the test spec\n",
        "Line" : 189,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Add the test and set its properties\n",
        "Line" : 192,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Old CMake versions do not document VERSION_GREATER_EQUAL, so we use VERSION_GREATER with 3.8 instead\n",
        "Line" : 194,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# entry point\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "65dc5f54ace8426fef8aebd2097a6417eec0524b",
      "LastModified" : "2019-04-18T11:47:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Build examples.\n\n#\n\n# Requires CATCH_BUILD_EXAMPLES to be defined 'true', see ../CMakeLists.txt.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define folders used:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# single-file sources:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# multiple-file modules:\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# main for idiomatic test sources:\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# sources to combine with 000-CatchMain.cpp:\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# main-s for reporter-specific test sources:\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# sources to combine with 200-Rpt-CatchMain{Reporter}.cpp:\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check if all sources are listed, warn if not:\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# create target names:\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# define program targets:\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_library( CatchMainAutomake OBJECT ${EXAMPLES_DIR}/200-Rpt-CatchMain.cpp ${HEADER_DIR}/catch2/catch.hpp )\n\n#add_library( CatchMainTap      OBJECT ${EXAMPLES_DIR}/200-Rpt-CatchMain.cpp ${HEADER_DIR}/catch2/catch.hpp )\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#target_compile_definitions( CatchMainAutomake PRIVATE CATCH_EXAMPLE_RPT_1=\\\"include/reporters/catch_reporter_automake.hpp\\\" )\n\n#target_compile_definitions( CatchMainTap      PRIVATE CATCH_EXAMPLE_RPT_1=\\\"include/reporters/catch_reporter_tap.hpp\\\" )\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#add_executable( 207-Rpt-AutomakeReporter ${EXAMPLES_DIR}/207-Rpt-AutomakeReporter.cpp $<TARGET_OBJECTS:CatchMainAutomake> ${HEADER_DIR}/catch2/catch.hpp )\n\n#add_executable( 207-Rpt-TapReporter      ${EXAMPLES_DIR}/207-Rpt-TapReporter.cpp      $<TARGET_OBJECTS:CatchMainTap>      ${HEADER_DIR}/catch2/catch.hpp )\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#foreach( name ${TARGETS_REPORTERS_TESTS} )\n\n#    add_executable( ${name} ${EXAMPLES_DIR}/${name}.cpp $<TARGET_OBJECTS:CatchMain> ${HEADER_DIR}/catch2/catch.hpp )\n\n#endforeach()\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Add desired warnings\n",
        "Line" : 144,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Clang specific warning go here\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Actually keep these\n",
        "Line" : 150,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 18
    },
    "misc/CMakeLists.txt" : {
      "ObjectId" : "bf80846cdc6484050d02486946e4a66cd976c404",
      "LastModified" : "2018-11-19T14:27:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "projects/CMakeLists.txt" : {
      "ObjectId" : "3fbd9b42851ad1014b969612a06460a73c8a6cdc",
      "LastModified" : "2019-04-18T11:47:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####\n\n# Temporary workaround for VS toolset changes in 2017\n\n# We need to disable <UseFullPaths> property, but CMake doesn't support it\n\n# until 3.13 (not yet released)\n\n####\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Temporary workaround\n",
        "Line" : 12,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# define the sources of the self test\n\n# Please keep these ordered alphabetically\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# A set of impl files that just #include a single header\n\n# Please keep these ordered alphabetically\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Please keep these ordered alphabetically\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Specify the headers, too, so CLion recognises them as project files\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Provide some groupings for IDEs\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add per compiler options\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Clang specific options go here\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# override default warning level\n",
        "Line" : 313,
        "CharPositionInLine" : 77
      },
      "13" : {
        "Text" : "# Force MSVC to consider everything as encoded in utf-8\n",
        "Line" : 318,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# configure unit tests via CTest\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# AppVeyor has a Python 2.7 in path, but doesn't have .py files as autorunnable\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "projects/ExtraTests/CMakeLists.txt" : {
      "ObjectId" : "c0dd82d8f07ab1087b712ff5db552238f6348ba9",
      "LastModified" : "2018-11-19T14:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Build extra tests.\n\n#\n\n# Requires CATCH_BUILD_EXTRA_TESTS to be defined 'true', see ../CMakeLists.txt.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# define folders used:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The spaces are important -> They disambiguate between CATCH_REQUIRE\n\n# and REQUIRE without prefix.\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#    $<$<CXX_COMPILER_ID:Clang>:-fno-exceptions>\n\n#    $<$<CXX_COMPILER_ID:GNU>:-fno-exceptions>\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Shared config\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 13
  },
  "ElapsedTime" : 5589
}