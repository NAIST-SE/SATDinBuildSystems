{
  "Repository" : "22074082",
  "Revision" : "HEAD",
  "ObjectId" : "68cb475cbe56b92208260dabb07e78078b858dd3",
  "CommitTime" : "2019-04-10T18:38:57Z",
  "Files" : {
    "CMake/Common.cmake" : {
      "ObjectId" : "661d733984ec032555e308d86f35f235055b27b7",
      "LastModified" : "2019-01-09T15:36:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create_source_group(relativeSourcePath sourceGroupName files)\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\r\n\n# Creates a source group with the specified name relative to the relative path\r\n\n# specified.\r\n\n#\r\n\n# Parameters:\r\n\n#    - sourceGroupName: Name of the source group to create.\r\n\n#    - relativeSourcePath: Relative path to the files.\r\n\n#    - sourceFiles: Files to add to the source group.\r\n\n#\r\n\n# For example if you have the following directory structure:\r\n\n#\r\n\n#    - ExampleApplication\r\n\n#        - include\r\n\n#            - Main.h\r\n\n#                - Window\r\n\n#                    Window.h\r\n\n#        - source\r\n\n#            - Main.cpp\r\n\n#                - Window\r\n\n#                    Window.cpp\r\n\n#\r\n\n# You can get your list of files and call create_source_group the following way\r\n\n#\r\n\n#    file(GLOB_RECURSE my_source_files ${CMAKE_CURRENT_SOURCE_DIR}/source/*)\r\n\n#    create_source_group(\"Source Files\"  \"${CMAKE_CURRENT_SOURCE_DIR}/source\" ${my_source_files})\r\n\n#    file(GLOB_RECURSE my_header_files ${CMAKE_CURRENT_SOURCE_DIR}/include/*)\r\n\n#    create_source_group(\"Header Files\" \"${CMAKE_CURRENT_SOURCE_DIR}/include\" ${my_header_files})\r\n\n#    add_executable(ExampleApplication ${my_source_files} ${my_header_files})\r\n\n#\r\n\n# Then the generated solution would look like this\r\n\n#\r\n\n#    - ExampleApplication (project)\r\n\n#        - Header Files\r\n\n#            - Main.h\r\n\n#                - Window\r\n\n#                    Window.h\r\n\n#        - Source Files\r\n\n#            - Main.cpp\r\n\n#                - Window\r\n\n#                    Window.cpp\r\n\n#\r\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#dont know why but foreach skip first element if we use ARGN\r\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#Grab cpp and h  files from path recursively\r\n",
        "Line" : 70,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#add dummy element \r\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#Create ide source groups that repilicates folder structure \r\n",
        "Line" : 78,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#Grab cpp and h  files from path recursively\r\n",
        "Line" : 84,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# can we avoid this?\r\n",
        "Line" : 90,
        "CharPositionInLine" : 22
      },
      "8" : {
        "Text" : "#set_target_properties(${_PLUGIN_NAME} PROPERTIES SUFFIX .galp)\r\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#gass_get_header_directories(HEADER_SUBDIRS)\r\n\n#foreach(INC_DIR ${HEADER_SUBDIRS})\r\n\n#\ttarget_include_directories(${_PLUGIN_NAME} PRIVATE  $<BUILD_INTERFACE:${INC_DIR}>)\r\n\n#endforeach()\r\n",
        "Line" : 142,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# prefix of output variables\r\n",
        "Line" : 157,
        "CharPositionInLine" : 20
      },
      "11" : {
        "Text" : "# list of names of the boolean arguments (only defined ones will be true)\r\n",
        "Line" : 158,
        "CharPositionInLine" : 30
      },
      "12" : {
        "Text" : "# list of names of mono-valued arguments\r\n",
        "Line" : 159,
        "CharPositionInLine" : 20
      },
      "13" : {
        "Text" : "# list of names of multi-valued arguments (output variables are lists)\r\n",
        "Line" : 160,
        "CharPositionInLine" : 141
      },
      "14" : {
        "Text" : "# arguments of the function to parse, here we take the all original ones\r\n",
        "Line" : 161,
        "CharPositionInLine" : 16
      },
      "15" : {
        "Text" : "#message(\"${_LIB_NAME} PUBLIC ${CUR_DEP}\")\r\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#INSTALL(FILES ${PARSED_ARGS_HEADER_FILES} DESTINATION include)\r\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# prefix of output variables\r\n",
        "Line" : 208,
        "CharPositionInLine" : 20
      },
      "18" : {
        "Text" : "# list of names of the boolean arguments (only defined ones will be true)\r\n\n# list of names of mono-valued arguments\r\n",
        "Line" : 209,
        "CharPositionInLine" : 11
      },
      "19" : {
        "Text" : "# list of names of multi-valued arguments (output variables are lists)\r\n",
        "Line" : 211,
        "CharPositionInLine" : 71
      },
      "20" : {
        "Text" : "# arguments of the function to parse, here we take the all original ones\r\n",
        "Line" : 212,
        "CharPositionInLine" : 16
      },
      "21" : {
        "Text" : "#message(\"${DEP_NAME} INTERFACE_COMPILE_DEFINITIONS ${PARSED_ARGS_DEFINITIONS}\")\r\n",
        "Line" : 222,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "#store all binary filenames in list, used when configuring consumer find scripts\r\n",
        "Line" : 229,
        "CharPositionInLine" : 3
      },
      "23" : {
        "Text" : "#store all binary filenames in list, used when configuring consumer find scripts\r\n",
        "Line" : 238,
        "CharPositionInLine" : 3
      },
      "24" : {
        "Text" : "# prefix of output variables\r\n",
        "Line" : 247,
        "CharPositionInLine" : 20
      },
      "25" : {
        "Text" : "# list of names of the boolean arguments (only defined ones will be true)\r\n\n# list of names of mono-valued arguments\r\n",
        "Line" : 248,
        "CharPositionInLine" : 11
      },
      "26" : {
        "Text" : "# list of names of multi-valued arguments (output variables are lists)\r\n",
        "Line" : 250,
        "CharPositionInLine" : 15
      },
      "27" : {
        "Text" : "# arguments of the function to parse, here we take the all original ones\r\n",
        "Line" : 251,
        "CharPositionInLine" : 16
      },
      "28" : {
        "Text" : "#Fix dlopen linkage issue on Ubuntu:\r\n\n#https://stackoverflow.com/questions/19926466/undefined-reference-to-dlopen-since-ubuntu-upgrade\r\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "#message(\"${_LIB_NAME} PUBLIC ${CUR_DEP}\")\r\n",
        "Line" : 272,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "#copy configurations to enable execution from build folder\r\n",
        "Line" : 283,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "#install executable\r\n",
        "Line" : 288,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "#install configuration files\r\n",
        "Line" : 292,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "#Fix dlopen linkage issue on Ubuntu:\r\n\n#https://stackoverflow.com/questions/19926466/undefined-reference-to-dlopen-since-ubuntu-upgrade\r\n",
        "Line" : 300,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "#install executable\r\n",
        "Line" : 311,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "#install configuration files\r\n",
        "Line" : 315,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 36
    },
    "CMake/DepTargets.cmake" : {
      "ObjectId" : "e3972d2689ccab29abf8bffc7fada14d3105be50",
      "LastModified" : "2019-02-27T09:09:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This file hold \"proxy\" build targets for dependencies that can be \n\n#used by any GASS lib by just refering to dependencies like \n\n#internal targets\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Boost\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#find_package(AngelScript REQUIRED)\n\n#gass_create_dep_target(AngelScript INCLUDE_DIRS ${ANGELSCRIPT_INCLUDE_DIRS} LIBRARIES ${ANGELSCRIPT_LIBRARIES})\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#FindOgre.cmake use environment var OGRE_HOME\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#check if we need to add boost include dirs\n",
        "Line" : 69,
        "CharPositionInLine" : 42
      },
      "5" : {
        "Text" : "#Check if boost include dirs already added by GASSCore\n",
        "Line" : 70,
        "CharPositionInLine" : 28
      },
      "6" : {
        "Text" : "#set(SKYX_DIR   $ENV{SKYX_HOME} CACHE PATH \"SkyX folder\")\n",
        "Line" : 83,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#set(HYDRAX_DIR $ENV{HYDRAX_HOME} CACHE PATH \"Hydrax folder\")\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#only use alut in Linux\n",
        "Line" : 123,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#RakNet\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#set(RAKNET_DIR  $ENV{RAKNET_HOME} CACHE PATH \"RakNet folder\")\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#OSG\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#install osg plugins to subfolder\n",
        "Line" : 156,
        "CharPositionInLine" : 41
      },
      "13" : {
        "Text" : "#store all plugin filenames in list, used when configuring consumer find scripts\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#PhysX\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# if(GASS_INSTALL_DEP_BINARIES AND WIN32)\n",
        "Line" : 173,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# FILE(COPY ${PX_BINARIES_REL} DESTINATION  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/release)\n\n# FILE(COPY ${PX_BINARIES_DBG} DESTINATION  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug)\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# install(FILES ${PX_BINARIES_REL} DESTINATION ${GASS_INSTALL_BIN_DIR_RELEASE} CONFIGURATIONS Release)\n\n# install(FILES ${PX_BINARIES_DBG} DESTINATION ${GASS_INSTALL_BIN_DIR_DEBUG} CONFIGURATIONS Debug)\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# endif()\n",
        "Line" : 179,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "#set(CMAKE_MODULE_PATH\n\n#\t${CMAKE_MODULE_PATH}\n\n#\t$ENV{OSGEARTHDIR}/CMakeModules)\n",
        "Line" : 187,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "#install osg plugins to subfolder\n",
        "Line" : 208,
        "CharPositionInLine" : 41
      },
      "21" : {
        "Text" : "#store all plugin filenames in list, used when configuring consumer find scripts\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "CMake/FindALUT.cmake" : {
      "ObjectId" : "364018e26a62feef235ac8084ccff9d9401f1639",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - try to find the OpenAL ALUT library\r\n\n#\r\n\n# Users may optionally supply:\r\n\n#  ALUT_ROOT_DIR - a prefix to start searching.\r\n\n#\r\n\n# Cache Variables: (probably not for direct use in your scripts)\r\n\n#  ALUT_INCLUDE_DIR\r\n\n#  ALUT_LIBRARY\r\n\n#\r\n\n# Non-cache variables you might use in your CMakeLists.txt:\r\n\n#  ALUT_FOUND\r\n\n#  ALUT_INCLUDE_DIRS\r\n\n#  ALUT_LIBRARIES\r\n\n#  ALUT_WORKAROUND_INCLUDE_DIRS - add these to your include path with\r\n\n#   include_directories(${ALUT_WORKAROUND_INCLUDE_DIRS} ${ALUT_INCLUDE_DIRS})\r\n\n#   so you can always #include <AL/al.h> and #include <AL/alut.h> even on\r\n\n#   Mac where the paths might differ.\r\n\n#\r\n\n# Requires these CMake modules:\r\n\n#  FindPackageHandleStandardArgs (known included with CMake >=2.6.2)\r\n\n#\r\n\n# Original Author:\r\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\r\n\n# http://academic.cleardefinition.com\r\n\n# Iowa State University HCI Graduate Program/VRAC\r\n\n#\r\n\n# Copyright Iowa State University 2009-2010.\r\n\n# Distributed under the Boost Software License, Version 1.0.\r\n\n# (See accompanying file LICENSE_1_0.txt or copy at\r\n\n# http://www.boost.org/LICENSE_1_0.txt)\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Share search paths with OpenAL\r\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\r\n\n# Configure ALUT\r\n\n###\r\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\r\n\n# Prereq: OpenAL\r\n\n###\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On Mac OS X, the ALUT headers were in the OpenAL framework until 10.4.7\r\n\n# If we found ALUT headers elsewhere, it's probably freealut which may\r\n\n# define the same symbols as the library in the framework (?)\r\n\n# so we might want to save/restore the CMake variable that controls searching\r\n\n# in frameworks\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set xxx_FOUND to TRUE if\r\n\n# all listed variables are TRUE\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# OpenAL is in a framework - need a workaround\r\n",
        "Line" : 114,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# ALUT is in the OpenAL framework - need a workaround\r\n",
        "Line" : 122,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 8
    },
    "CMake/FindAngelScript.cmake" : {
      "ObjectId" : "e8ba842e7e017433c66c83b240c6b2c19235fbb9",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindGASSSharedLibraries.cmake" : {
      "ObjectId" : "539c08a4ab2449b12f790259c52ea2431643e5d3",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Used to gather all dlls needed for samples to run\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TBB\r\n",
        "Line" : 3,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#MY GUI\r\n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#OpenAL\r\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#OIS\r\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#SKYX\r\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#Ogre\r\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#${MYGUI_BIN_FILES_RELEASE}\r\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#${MYGUI_BIN_FILES_DEBUG}\r\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "CMake/FindGASSSimThirdParty.cmake" : {
      "ObjectId" : "89dd9659d2feae1216292001109ff0e4e4aefbf7",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#angle script, assume that ANGELSCRIPT_HOME hold this lib\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/FindHydrax.cmake" : {
      "ObjectId" : "51cf7c4198c3830b60cb2fe1f9ccde1ef2e38ee1",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindMyGUI.cmake" : {
      "ObjectId" : "0eb8ac8e95836e9595be548945582d7cd420bf55",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindODE.cmake" : {
      "ObjectId" : "e1503faab43f17e18ef2a70978509edadd604a44",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Open Dynamics Engine library\r\n\n# Once done this will define:\r\n\n#\r\n\n#  ODE_FOUND - system has the ODE library\r\n\n#  ODE_INCLUDE_DIRS - the ODE include directory (include ODE headers with <ode/headername.h>)\r\n\n#  ODE_LIBRARIES - the ODE library\r\n\n#  ODE_DEFINITIONS - additional definitions necessary to use ODE (usually the precision flag)\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ODE has already been found and the necessary variables are cached\r\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Find ODE\r\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use PkgConfig if possible\r\n\n#if (NOT WIN32)\r\n\n#    find_package(PkgConfig)\r\n\n#    pkg_check_modules(PC_ODE ode)\r\n\n#endif (NOT WIN32)\r\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Find include dir\r\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Decide if ODE was found\r\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Find out extra definitions needed for ODE.\r\n\n# This is mostly needed for the ODE's precision selector:\r\n\n#  ODE can be built either in single-precision (default) or double-precision mode. The app has\r\n\n#  to be built in the same mode, otherwise things will crash.\r\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# If PkgConfig found anything, then use its results, otherwise use ode-config script\r\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Take the definitions from PkgConfig results\r\n",
        "Line" : 61,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Try to use ode-config\r\n",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# Show messages\r\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Show the ODE precision if the definitions were detected\r\n",
        "Line" : 79,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 12
    },
    "CMake/FindOGRE.cmake" : {
      "ObjectId" : "bf35ef73d1cc03f2b694f2a2dd59bc1623c4ed85",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# This file is part of the CMake build system for OGRE\r\n\n#     (Object-oriented Graphics Rendering Engine)\r\n\n# For the latest info, see http://www.ogre3d.org/\r\n\n#\r\n\n# The contents of this file are placed in the public domain. Feel\r\n\n# free to make use of it in any way you like.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find OGRE\r\n\n# If you have multiple versions of Ogre installed, use the CMake or\r\n\n# the environment variable OGRE_HOME to point to the path where the\r\n\n# desired Ogre version can be found.\r\n\n# By default this script will look for a dynamic Ogre build. If you\r\n\n# need to link against static Ogre libraries, set the CMake variable\r\n\n# OGRE_STATIC to TRUE.\r\n\n#\r\n\n# Once done, this will define\r\n\n#\r\n\n#  OGRE_FOUND - system has OGRE\r\n\n#  OGRE_INCLUDE_DIRS - the OGRE include directories \r\n\n#  OGRE_LIBRARIES - link these to use the OGRE core\r\n\n#  OGRE_BINARY_REL - location of the main Ogre binary (win32 non-static only, release)\r\n\n#  OGRE_BINARY_DBG - location of the main Ogre binaries (win32 non-static only, debug)\r\n\n#\r\n\n# Additionally this script searches for the following optional\r\n\n# parts of the Ogre package:\r\n\n#  Plugin_BSPSceneManager, Plugin_CgProgramManager,\r\n\n#  Plugin_OctreeSceneManager, Plugin_OctreeZone,\r\n\n#  Plugin_ParticleFX, Plugin_PCZSceneManager,\r\n\n#  RenderSystem_GL, RenderSystem_GL3Plus,\r\n\n#  RenderSystem_GLES, RenderSystem_GLES2,\r\n\n#  RenderSystem_Direct3D9, RenderSystem_Direct3D11\r\n\n#  Paging, Terrain, Volume, Overlay\r\n\n#\r\n\n# For each of these components, the following variables are defined:\r\n\n#\r\n\n#  OGRE_${COMPONENT}_FOUND - ${COMPONENT} is available\r\n\n#  OGRE_${COMPONENT}_INCLUDE_DIRS - additional include directories for ${COMPONENT}\r\n\n#  OGRE_${COMPONENT}_LIBRARIES - link these to use ${COMPONENT} \r\n\n#  OGRE_${COMPONENT}_BINARY_REL - location of the component binary (win32 non-static only, release)\r\n\n#  OGRE_${COMPONENT}_BINARY_DBG - location of the component binary (win32 non-static only, debug)\r\n\n#\r\n\n# Finally, the following variables are defined:\r\n\n#\r\n\n#  OGRE_PLUGIN_DIR_REL - The directory where the release versions of\r\n\n#       the OGRE plugins are located\r\n\n#  OGRE_PLUGIN_DIR_DBG - The directory where the debug versions of\r\n\n#       the OGRE plugins are located\r\n\n#  OGRE_MEDIA_DIR - The directory where the OGRE sample media is\r\n\n#       located, if available\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get path, convert backslashes as ${ENV_${var}}\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine whether to search for a dynamic or static build\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# construct search paths from environmental hints and\r\n\n# OS specific guesses\r\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If both OGRE_BUILD and OGRE_SOURCE are set, prepare to find Ogre in a build dir\r\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# redo search if any of the environmental hints changed\r\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try to locate Ogre via pkg-config\r\n",
        "Line" : 161,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# try to find framework on OSX\r\n",
        "Line" : 164,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# locate Ogre include files\r\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# determine Ogre version\r\n",
        "Line" : 179,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# determine configuration settings\r\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# If working from source rather than SDK, add samples include\r\n",
        "Line" : 234,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# look for required Ogre dependencies in case of static build and/or threading\r\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# find binaries\r\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#########################################################\r\n\n# Find Ogre components\r\n\n#########################################################\r\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find binaries\r\n",
        "Line" : 391,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# look for Paging component\r\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# look for Terrain component\r\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# look for Property component\r\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# look for RTShaderSystem component\r\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# look for Volume component\r\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# look for Overlay component\r\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#########################################################\r\n\n# Find Ogre plugins\r\n\n#########################################################        \r\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# On Unix, the plugins might have no prefix\r\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# strip RenderSystem_ or Plugin_ prefix from plugin name\r\n",
        "Line" : 425,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# header files for plugins are not usually needed, but find them anyway if they are present\r\n",
        "Line" : 429,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# find link libraries for plugins\r\n",
        "Line" : 436,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# look for plugin dirs\r\n",
        "Line" : 456,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# find binaries\r\n",
        "Line" : 482,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# check if dependencies for plugins are met\r\n",
        "Line" : 512,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# look for the media directory\r\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "CMake/FindOIS.cmake" : {
      "ObjectId" : "14648df4671744efa876f8dd799ea72b46a42d2d",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find OIS includes and library\r\n\n#\r\n\n# This module defines\r\n\n#  OIS_INCLUDE_DIRS\r\n\n#  OIS_LIBRARIES, the libraries to link against to use OIS.\r\n\n#  OIS_FOUND, If false, do not try to use OIS\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 13,
        "CharPositionInLine" : 28
      },
      "2" : {
        "Text" : "#ADDED BY JH\r\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMake/FindOSGEarth.cmake" : {
      "ObjectId" : "a1a7ad52b3294b221bf06054c429fbafaeec32d9",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module defines\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OSGEARTH_LIBRARY\n\n# OSGEARTH_FOUND, if false, do not try to link to osg\n\n# OSGEARTH_INCLUDE_DIRS, where to find the headers\n\n# OSGEARTH_INCLUDE_DIR, where to find the source headers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# to use this module, set variables to point to the osg build\n\n# directory, and source directory, respectively\n\n# OSGEARTHDIR or OSGEARTH_SOURCE_DIR: osg source directory, typically OpenSceneGraph\n\n# OSGEARTH_DIR or OSGEARTH_BUILD_DIR: osg build directory, place in which you've\n\n#    built osg via cmake\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Header files are presumed to be included like\n\n# #include <osg/PositionAttitudeTransform>\n\n# #include <osgUtil/SceneView>\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###### headers ######\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Fink\n",
        "Line" : 30,
        "CharPositionInLine" : 13
      },
      "6" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 31,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "# Blastwave\n",
        "Line" : 32,
        "CharPositionInLine" : 18
      },
      "8" : {
        "Text" : "###### libraries ######\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "CMake/FindOSGEarthExt.cmake" : {
      "ObjectId" : "b948f730a720b81a111ac02da6af44c6fdb93fae",
      "LastModified" : "2019-01-16T13:12:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FindOSGEarth extention that add binary lists\n\n#This file will call FindOSGEarth that will get you libraries and include folders\n\n#Output from this file is debug and release binaries (including thirdparty binaries)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Output vars\n\n#OSGEARTH_BINARIES_REL : release binaries \n\n#OSGEARTH_PLUGINS_BINARIES_REL : release plugin-binaries: \n\n#OSGEARTH_BINARIES_DBG : debug binaries \n\n#OSGEARTH_PLUGINS_BINARIES_DBG : debug plugin-binaries: \n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Input vars\n\n#OSGEARTH_ROOT,OSGEARTHDIR,OSGEARTH_DIR or OSGEARTHHOME: Environment var holding path to osgEarth\n\n#OSG_DIR, OSGDIR. OSG_HOME or OSG_ROOT : Environment var holding path to osg\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#find osg version\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#find osgEarth version\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#MSVC 2017\n",
        "Line" : 76,
        "CharPositionInLine" : 33
      },
      "6" : {
        "Text" : "#assume linux\n",
        "Line" : 136,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 7
    },
    "CMake/FindOSGExt.cmake" : {
      "ObjectId" : "2c7b3d2cea8f3f6d7a4cdff022599d7afa9c488c",
      "LastModified" : "2019-01-16T13:12:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#This is an extension of the standard FindOpenSceneGraph find_package\r\n\n#This extension first call the native version (with all it's commands) \r\n\n#and then added the following variables:\r\n\n#OSG_VERSION\r\n\n#OSG_BINARIES_REL\r\n\n#OSG_BINARIES_DBG\r\n\n#OSGPLUGIN_BINARIES_REL\r\n\n#OSGPLUGIN_BINARIES_REL\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(OSG_VERSION ${OSGExt_FIND_VERSION})\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# prefix of output variables\r\n",
        "Line" : 22,
        "CharPositionInLine" : 20
      },
      "3" : {
        "Text" : "# list of names of mono-valued arguments\r\n",
        "Line" : 24,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# list of names of multi-valued arguments (output variables are lists)\r\n\n# arguments of the function to parse, here we take the all original ones\r\n",
        "Line" : 25,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# prefix of output variables\r\n",
        "Line" : 35,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# list of names of mono-valued arguments\r\n",
        "Line" : 37,
        "CharPositionInLine" : 11
      },
      "7" : {
        "Text" : "# list of names of multi-valued arguments (output variables are lists)\r\n\n# arguments of the function to parse, here we take the all original ones\r\n",
        "Line" : 38,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "#assume linux\r\n",
        "Line" : 68,
        "CharPositionInLine" : 7
      },
      "9" : {
        "Text" : "#thirdparty shared libs\t\t\t\r\n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#MSVC 2017\r\n",
        "Line" : 114,
        "CharPositionInLine" : 34
      },
      "11" : {
        "Text" : "#MSVC 2017\r\n",
        "Line" : 129,
        "CharPositionInLine" : 34
      },
      "12" : {
        "Text" : "# Different names depending on VS version\r\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "#MSVC 2013\r\n",
        "Line" : 134,
        "CharPositionInLine" : 32
      },
      "14" : {
        "Text" : "#this plug-in list works with 3.2.1\r\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#dw\r\n",
        "Line" : 153,
        "CharPositionInLine" : 5
      },
      "16" : {
        "Text" : "#exr\r\n",
        "Line" : 155,
        "CharPositionInLine" : 5
      },
      "17" : {
        "Text" : "#gif\r\n",
        "Line" : 158,
        "CharPositionInLine" : 5
      },
      "18" : {
        "Text" : "#nvtt\r\n",
        "Line" : 171,
        "CharPositionInLine" : 5
      },
      "19" : {
        "Text" : "#qfont\r\n",
        "Line" : 189,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "#message(\"osgdb_${_OSG_PLUGIN}${_SHARED_LIB_EXT}\")\r\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 21
    },
    "CMake/FindOpenALExt.cmake" : {
      "ObjectId" : "084839b165d562dde32df77612740cb6ba747f3d",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindPagedGeometry.cmake" : {
      "ObjectId" : "38849b95a8c6a4a2a2725caab18d515cce293db4",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindPhysX3.cmake" : {
      "ObjectId" : "4ffe98e2a5a744529e66e3f77a9512a4db81c13f",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find PHYSX3\r\n\n# Find the native PHYSX3 headers and libraries.\r\n\n#\r\n\n#  PHYSX3_INCLUDE_DIR -  where to find the include files of PHYSX3\r\n\n#  PHYSX3_LIBRARIES    - List of libraries when using PHYSX3.\r\n\n#  PHYSX3_FOUND        - True if PHYSX3 found.\r\n\n#  PHYSX3_FLAGS        - Flags needed for physx to build \r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Decide which libraires to add\r\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for the libraries.\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# unset libraries so that they are always looked for. This is because we want it to automatically\r\n\n# update if the PHYSX3_LIB_TYPE is changed.\r\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#message(${PX_LIB_NAME}  ${PHYSX3_INSTALL_DIR}/Lib/${PHYSX3_MSVC_DIR}${LIB}/${PHYSX3_LIB}${PHYSX3_LIB_TYPE_SUFFIX}_${ARCH})\r\n\n# FIND RELEASE LIBS\r\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# To avoid undefined symbols at runtime we need to include the entire static library in our shared library\r\n",
        "Line" : 128,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#FIND DEBUG LIBS\r\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# To avoid undefined symbols at runtime we need to include the entire static library in our shared library\r\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "#ADDED BY JH\r\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#STRING(TOUPPER ${PHYSX3_BIN} _upper_lib_name)\r\n\n#SET( PX_BIN_NAME_REL PHYSX3_${_upper_bin_name}_BINARY )\r\n\n#SET( PX_BIN_NAME_DBG PHYSX3_${_upper_bin_name}_DEBUG_BINARY )\r\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Copy the results to the output variables.\r\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Report the results.\r\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "CMake/FindPkgMacros.cmake" : {
      "ObjectId" : "885ba46d303de887dc56a24a8caecb9ed644576c",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# This file is part of the CMake build system for OGRE\r\n\n#     (Object-oriented Graphics Rendering Engine)\r\n\n# For the latest info, see http://www.ogre3d.org/\r\n\n#\r\n\n# The contents of this file are placed in the public domain. Feel\r\n\n# free to make use of it in any way you like.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################\r\n\n# Provides some common functionality for the FindPackage modules\r\n\n##################################################################\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Begin processing of package\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Display a status message unless FIND_QUIETLY is set\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Get environment variable, define it as ENV_$var and make sure backslashes are converted to forward slashes\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# replace won't work if var is blank\r\n",
        "Line" : 31,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Construct search paths for includes and libraries from a PREFIX_PATH\r\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# clear cache variables if a certain variable changed\r\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test against internal check variable\r\n\n# HACK: Apparently, adding a variable to the cache cleans up the list\r\n\n# a bit. We need to also remove any empty strings from the list, but\r\n\n# at the same time ensure that we are actually dealing with a list.\r\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Try to get some hints from pkg-config, if available\r\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Couple a set of release AND debug libraries (or frameworks)\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Generate debug names from given release names\r\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add the parent dir from DIR to VAR \r\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Do the final processing for the package find.\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# skip if already processed during this run\r\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Slightly customised framework finder\r\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# These could be arrays of paths, add each individually to the search paths\r\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "CMake/FindQTPropertyBrowser.cmake" : {
      "ObjectId" : "4d65427368a49993481a2bb35db408fd0ba33a00",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindRakNet.cmake" : {
      "ObjectId" : "75206b4aa422a4c88451305d9f8c2b419a60e84e",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindRakNet4.cmake" : {
      "ObjectId" : "d773360cc61611bed180513c1a25c26f7bc10315",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindSkyX.cmake" : {
      "ObjectId" : "9416385bcc3051004f2945726d17e6d58073a251",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMake/FindTBB.cmake" : {
      "ObjectId" : "2ae77de06d3fbde26926db16e84e6b0091ff9cd3",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\r\n\n# FindTBB.cmake can be found at https://code.google.com/p/findtbb/\r\n\n# Written by Hannes Hofmann <hannes.hofmann _at_ informatik.uni-erlangen.de>\r\n\n# Improvements by Gino van den Bergen <gino _at_ dtecta.com>,\r\n\n#   Florian Uhlig <F.Uhlig _at_ gsi.de>,\r\n\n#   Jiri Marsik <jiri.marsik89 _at_ gmail.com>\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# Copyright (c) 2011 Hannes Hofmann\r\n\n#\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\r\n\n# of this software and associated documentation files (the \"Software\"), to deal\r\n\n# in the Software without restriction, including without limitation the rights\r\n\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n\n# copies of the Software, and to permit persons to whom the Software is\r\n\n# furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included in\r\n\n# all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n\n# THE SOFTWARE.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# GvdB: This module uses the environment variable TBB_ARCH_PLATFORM which defines architecture and compiler.\r\n\n#   e.g. \"ia32/vc8\" or \"em64t/cc4.1.0_libc2.4_kernel2.6.16.21\"\r\n\n#   TBB_ARCH_PLATFORM is set by the build script tbbvars[.bat|.sh|.csh], which can be found\r\n\n#   in the TBB installation directory (TBB_INSTALL_DIR).\r\n\n#\r\n\n# GvdB: Mac OS X distribution places libraries directly in lib directory.\r\n\n#\r\n\n# For backwards compatibility, you may explicitely set the CMake variables TBB_ARCHITECTURE and TBB_COMPILER.\r\n\n# TBB_ARCHITECTURE [ ia32 | em64t | itanium ]\r\n\n#   which architecture to use\r\n\n# TBB_COMPILER e.g. vc9 or cc3.2.3_libc2.3.2_kernel2.4.21 or cc4.0.1_os10.4.9\r\n\n#   which compiler to use (detected automatically on Windows)\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This module respects\r\n\n# TBB_INSTALL_DIR or $ENV{TBB21_INSTALL_DIR} or $ENV{TBB_INSTALL_DIR}\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This module defines\r\n\n# TBB_INCLUDE_DIRS, where to find task_scheduler_init.h, etc.\r\n\n# TBB_LIBRARY_DIRS, where to find libtbb, libtbbmalloc\r\n\n# TBB_DEBUG_LIBRARY_DIRS, where to find libtbb_debug, libtbbmalloc_debug\r\n\n# TBB_INSTALL_DIR, the base TBB install directory\r\n\n# TBB_LIBRARIES, the libraries to link against to use TBB.\r\n\n# TBB_DEBUG_LIBRARIES, the libraries to link against to use TBB with debug symbols.\r\n\n# TBB_FOUND, If false, don't try to use TBB.\r\n\n# TBB_INTERFACE_VERSION, as defined in tbb/tbb_stddef.h\r\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# has em64t/vc8 em64t/vc9\r\n\n# has ia32/vc7.1 ia32/vc8 ia32/vc9\r\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Todo: add other Windows compilers such as ICL.\r\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# MAC\r\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# libs: libtbb.dylib, libtbbmalloc.dylib, *_debug\r\n",
        "Line" : 94,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# default flavor on apple: ia32/cc4.0.1_os10.4.9\r\n\n# Jiri: There is no reason to presume there is only one flavor and\r\n\n#       that user's setting of variables should be ignored.\r\n",
        "Line" : 99,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# LINUX\r\n",
        "Line" : 113,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#:petfo\r\n",
        "Line" : 118,
        "CharPositionInLine" : 50
      },
      "12" : {
        "Text" : "#:petfo\r\n",
        "Line" : 119,
        "CharPositionInLine" : 64
      },
      "13" : {
        "Text" : "# has em64t/cc3.2.3_libc2.3.2_kernel2.4.21 em64t/cc3.3.3_libc2.3.3_kernel2.6.5\r\n\n#    em64t/cc3.4.3_libc2.3.4_kernel2.6.9 em64t/cc4.1.0_libc2.4_kernel2.6.16.21\r\n\n# has ia32/*\r\n\n# has itanium/*\r\n",
        "Line" : 120,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#pkg_check_modules(PK_TBBMALLOC REQUIRED tbbmalloc)\r\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# SUN\r\n\n# not yet supported\r\n\n# has em64t/cc3.4.3_kernel5.10\r\n\n# has ia32/*\r\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-- Clear the public variables\r\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#-- Find TBB install dir and set ${_TBB_INSTALL_DIR} and cached ${TBB_INSTALL_DIR}\r\n\n# first: use CMake variable TBB_INSTALL_DIR\r\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# second: use environment variable\r\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Intel recommends setting TBB21_INSTALL_DIR\r\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# third: try to find path automatically\r\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# sanity check\r\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# finally: set the cached CMake variable TBB_INSTALL_DIR\r\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#-- A macro to rewrite the paths of the library. This is necessary, because\r\n\n#   find_library() always found the em64t/vc9 version of the TBB libs\r\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#    if (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\r\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#    endif (NOT \"${_TBB_ARCHITECTURE}\" STREQUAL \"em64t\")\r\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#-- Look for include directory and set ${TBB_INCLUDE_DIR}\r\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Jiri: tbbvars now sets the CPATH environment variable to the directory\r\n\n#       containing the headers.\r\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#-- Look for libraries\r\n\n# GvdB: $ENV{TBB_ARCH_PLATFORM} is set by the build script tbbvars[.bat|.sh|.csh]\r\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Jiri: This block isn't mutually exclusive with the previous one\r\n\n#       (hence no else), instead I test if the user really specified\r\n\n#       the variables in question.\r\n",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# HH: deprecated\r\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Jiri: It doesn't hurt to look in more places, so I store the hints from\r\n\n#       ENV{TBB_ARCH_PLATFORM} and the TBB_ARCHITECTURE and TBB_COMPILER\r\n\n#       variables and search them both.\r\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# GvdB: Mac OS X distribution places libraries directly in lib directory.\r\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Jiri: No reason not to check the default paths. From recent versions,\r\n\n#       tbbvars has started exporting the LIBRARY_PATH and LD_LIBRARY_PATH\r\n\n#       variables, which now point to the directories of the lib files.\r\n\n#       It all makes more sense to use the ${_TBB_LIBRARY_DIR} as a HINTS\r\n\n#       argument instead of the implicit PATHS as it isn't hard-coded\r\n\n#       but computed by system introspection. Searching the LIBRARY_PATH\r\n\n#       and LD_LIBRARY_PATH environment variables is now even more important\r\n\n#       that tbbvars doesn't export TBB_ARCH_PLATFORM and it facilitates\r\n\n#       the use of TBB built from sources.\r\n\n#message(${_TBB_LIBRARY_DIR})\r\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#Check if we dlls found, clould be static build\r\n",
        "Line" : 267,
        "CharPositionInLine" : 3
      },
      "35" : {
        "Text" : "#Extract path from TBB_LIBRARY name\r\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY)\r\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY)\r\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#-- Look for debug libraries\r\n\n# Jiri: Changed the same way as for the release libraries.\r\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\r\n\n#       Extract path from TBB_LIBRARY_DEBUG name\r\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#TBB_CORRECT_LIB_DIR(TBB_LIBRARY_DEBUG)\r\n\n#TBB_CORRECT_LIB_DIR(TBB_MALLOC_LIBRARY_DEBUG)\r\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#if(WIN32)\r\n\n#\tset (TBB_LIBRARIES ${TBB_LIBRARIES} ${TBB_MALLOC_LIBRARY})\r\n\n#endif()\r\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Jiri: Self-built TBB stores the debug libraries in a separate directory.\r\n",
        "Line" : 317,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# do only throw fatal, if this pkg is REQUIRED\r\n",
        "Line" : 327,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 43
    },
    "CMake/FindTinyXML2.cmake" : {
      "ObjectId" : "a4b4a323973d8538957b20883950a9edb2b04aff",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    pkg_check_modules(PK_TINYXML2_DEBUG REQUIRED tinyxml2-debug)\r\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "911af995ad55f77f054d96ae8f64a02dcbef2a02",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 96,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "CMake/PreprocessorUtils.cmake" : {
      "ObjectId" : "6c366fffda28a7aa513ba34407aa99eb4fdf6e0c",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\r\n\n# This file is part of the CMake build system for OGRE\r\n\n#     (Object-oriented Graphics Rendering Engine)\r\n\n# For the latest info, see http://www.ogre3d.org/\r\n\n#\r\n\n# The contents of this file are placed in the public domain. Feel\r\n\n# free to make use of it in any way you like.\r\n\n#-------------------------------------------------------------------\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "81ceba20c990a017380ec33d51a15b7fdbe26ae5",
      "LastModified" : "2019-02-25T21:17:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The version number.\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Force to always compile with W4\r\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# turn on -Wall and -Wextra, but skip  long-long and unused-parameter warnings\r\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#static libs\r\n\n#dynamic libs\r\n\n#dlls and exe\r\n",
        "Line" : 45,
        "CharPositionInLine" : 60
      },
      "4" : {
        "Text" : "# Enable INSTALL project to be built by default. Inactivated for every configuration otherwise.\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#boost settings\r\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#suppress warnings\r\n",
        "Line" : 114,
        "CharPositionInLine" : 43
      },
      "7" : {
        "Text" : "#CMAKE_POLICY(SET CMP0022 OLD)\r\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#-- Add an Option to toggle the generation of the API documentation\r\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#REQUIRED dot\r\n\n#OPTIONAL dia mscgen\r\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#)\r\n",
        "Line" : 137,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#-- Configure the Template Doxyfile for our specific project\r\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#-- Add a custom target to run Doxygen when ever the project is built\r\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# IF you do NOT want the documentation to be generated EVERY time you build the project\r\n\n# then leave out the 'ALL' keyword from the above command.\r\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Install CMake files in order to re-use them in other projects\r\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "applications/CMakeLists.txt" : {
      "ObjectId" : "866ec4d8f933ad13e5c62246b2dcb9c5d6b2a44d",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "applications/GASSEd/CMakeLists.txt" : {
      "ObjectId" : "288c37875629db12ee47e73fe4e2bea20456e37e",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#prepapre search dirs for find_package\r\n\n#set (CMAKE_PREFIX_PATH \"C:/Qt/Qt5.6.0/5.6/msvc2013_64\")\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add osg plugin if requested\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#find_package(Qt5Core)\r\n\n#find_package(Qt5Widgets QUIET)\r\n\n#find_package(Qt5Gui QUIET)\r\n\n#find_package(Qt5OpenGL QUIET)\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use the required module from Qt5.\r\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#HACK to get qt-binaries, findqt don't return binaries nor root/install path, \r\n\n#we use the Qt5_DIR to get path dir\r\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#message(${QT5_BIN_DIR})\r\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "samples/CMakeLists.txt" : {
      "ObjectId" : "2adffaf082b0464f6d2df3fe916c7f86e4f512d1",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/core/CMakeLists.txt" : {
      "ObjectId" : "db157475143d6cd6ada230897a8cee6c29647f54",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/core/reflection/CMakeLists.txt" : {
      "ObjectId" : "d1b076ea577ef6442d6e63dfd990180bac6327a0",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(LIB_NAME \"SampleCoreReflection\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set(CPP_FILES ${LIB_NAME}.cpp)\n\n# set(H_FILES)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add_executable (${LIB_NAME} ${CPP_FILES} ${H_FILES})\n\n# target_link_libraries(${LIB_NAME} GASSCore)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install(TARGETS ${LIB_NAME}  RUNTIME DESTINATION ${GASS_INSTALL_BIN_DIR_RELEASE} CONFIGURATIONS Release)\n\n# install(TARGETS ${LIB_NAME}  RUNTIME DESTINATION ${GASS_INSTALL_BIN_DIR_DEBUG} CONFIGURATIONS Debug)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "samples/sim/CMakeLists.txt" : {
      "ObjectId" : "f8e2d3477ec21c34c07613df5630977ad6c59dae",
      "LastModified" : "2019-01-16T13:12:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#copy data to build folder\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_SUBDIRECTORY(rtc)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#install data\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "samples/sim/editor/CMakeLists.txt" : {
      "ObjectId" : "d6492ee24fef58d2033937e22473f32f8f2e2a41",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/sim/gui/CMakeLists.txt" : {
      "ObjectId" : "5ea658d58e4e52cbf732f36bde4d077bfd29a454",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/sim/network/CMakeLists.txt" : {
      "ObjectId" : "e48d9dc8c7f67b5fc7fa72816b82f39a6836b5ed",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/sim/ogre/CMakeLists.txt" : {
      "ObjectId" : "57841be783fd5d559dc5d13b8e0aa4c808602ee8",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/sim/osgearth/CMakeLists.txt" : {
      "ObjectId" : "437c7840f805ec12efbd4ee22d5402fd48c6c7a0",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/sim/physics/CMakeLists.txt" : {
      "ObjectId" : "ed62b6ec484aa4e41552b85ab6d79de8bea769ec",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/sim/rtc/CMakeLists.txt" : {
      "ObjectId" : "65deee6fbe449df2ecbba3f9029046d5e30f70e9",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "samples/sim/vehicle/CMakeLists.txt" : {
      "ObjectId" : "760cd463a9d170dae1344cdca64756c33f71ee84",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "d8b549c7f236ca30dab11c40809eea3f79908d3b",
      "LastModified" : "2019-02-26T21:35:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Core/CMakeLists.txt" : {
      "ObjectId" : "db907e1a0dbf8305606b32aefd68ec48dd628129",
      "LastModified" : "2019-03-28T20:54:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add all source files from current directory (recursively)\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Add dependency for timer\r\n",
        "Line" : 144,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#install config and version headers\r\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "source/Dependencies/Angelscript/CMakeLists.txt" : {
      "ObjectId" : "75fd6db57bb5418b8d94c1f5d7832a3106e80fa0",
      "LastModified" : "2019-02-27T09:10:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmake_policy(SET CMP0003 NEW)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_definitions(\"-D_CRT_SECURE_NO_WARNINGS -DANGELSCRIPT_EXPORT -D_LIB\")\n\n#set(CMAKE_DEBUG_POSTFIX  \"_d\" CACHE STRING \"add a postfix, usually d on windows\")\n\n# Fix x64 issues on Linux\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(LIBRARY_OUTPUT_PATH  ${PROJECT_SOURCE_DIR}/lib)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/bin)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#add_subdirectory(../samples/game/projects/cmake/ ./game)\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#install(TARGETS Angelscript\n\n#        RUNTIME DESTINATION bin\n\n#        LIBRARY DESTINATION lib\n\n#        ARCHIVE DESTINATION lib)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "source/Modules/CMakeLists.txt" : {
      "ObjectId" : "0dcdcb4b59fd70a1ef8159ea31e177db5f61f365",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Modules/Editor/CMakeLists.txt" : {
      "ObjectId" : "15305cb9980e816ab447acbe48a0dcef1225e87d",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#gass_get_source_from_current_dir(CPP_FILES H_FILES)\r\n\n#gass_setup_lib(GASSEditorModule\r\n\n#\t\t\t\t\tBUILDTYPE ${GASS_BUILDTYPE}\r\n\n#\t\t\t\t\tSOURCE_FILES ${CPP_FILES} \r\n\n#\t\t\t\t\tHEADER_FILES ${H_FILES}\r\n\n#\t\t\t\t\tPUBLIC_DEPS GASSSim\r\n\n#\t\t\t\t\tPRIVATE_DEFINITIONS EDITOR_MODULE_EXPORTS ${GASS_COMMON_DEFINITIONS} )\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/Plugins/AI/CMakeLists.txt" : {
      "ObjectId" : "8a326940f3db1bea0ead9d225fc5f6c8535d715c",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set lib name here!\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set include directories\r\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add all source files from current directory (recursively)\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Add some folders where to search for dependency libraries\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Add project dependency libs\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "source/Plugins/Base/CMakeLists.txt" : {
      "ObjectId" : "cd894d69bca38c58bf8d8edfa9bf2dc83865ac89",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/CMakeLists.txt" : {
      "ObjectId" : "ac5271c82a69466c50613c21c806d97869ee689e",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#always build depdency free plugins \r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#All plugins that have depdencies should be optional\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#no need to build ogre dependent plugins if we dont have the ogre rendersystem plugin active\r\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#ADD_SUBDIRECTORY(RakNet4)\r\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "source/Plugins/Environment/CMakeLists.txt" : {
      "ObjectId" : "b95e1ece0f410411e108b4cbe06b488bf3e334da",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/Game/CMakeLists.txt" : {
      "ObjectId" : "7abfb2b96b78a8f7ffc6c84ede23b997a52ed20c",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} DESTINATION include/plugins FILES_MATCHING PATTERN \"*.h\" PATTERN \".svn\" EXCLUDE)\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "source/Plugins/Input/CMakeLists.txt" : {
      "ObjectId" : "409f40cccd51f4a9e243dfaf99d7d961891607a8",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/MyGUI/CMakeLists.txt" : {
      "ObjectId" : "258fe7e9c2e64037e0e3ddf62cf6ed162a9127e1",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add osg and ogre stuff\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_library (${LIB_NAME} ${GASS_BUILDTYPE}  ${CPP_FILES} ${H_FILES})\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# target_include_directories(${LIB_NAME}\r\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# PUBLIC  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\r\n\n# PUBLIC  $<BUILD_INTERFACE:${MYGUI_INCLUDE_DIRS}>\r\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# PUBLIC  $<BUILD_INTERFACE:${OPENSCENEGRAPH_INCLUDE_DIRS}>\r\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# PUBLIC  $<BUILD_INTERFACE:${OGRE_INCLUDE_DIR}>\t\r\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# )\r\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# target_link_libraries(${LIB_NAME} GASSSim ${MYGUI_LIBRARIES})\r\n\n# target_compile_definitions(${LIB_NAME} PRIVATE ${GASS_COMMON_DEFINITIONS})\r\n\n# gass_install_plugin_target()\r\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if(GASS_INSTALL_DEP_BINARIES)\r\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# FILE(COPY ${MYGUI_BINARIES_REL} DESTINATION  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/release)\r\n\n# FILE(COPY ${MYGUI_BINARIES_DBG} DESTINATION  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug)\r\n",
        "Line" : 88,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# install(FILES ${MYGUI_BINARIES_REL} DESTINATION ${GASS_INSTALL_BIN_DIR_RELEASE} CONFIGURATIONS Release)\r\n\n# install(FILES ${MYGUI_BINARIES_DBG} DESTINATION ${GASS_INSTALL_BIN_DIR_DEBUG} CONFIGURATIONS Debug)\r\n",
        "Line" : 91,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# endif()",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "source/Plugins/ODE/CMakeLists.txt" : {
      "ObjectId" : "6c1e12631bca1d45323621ffdd6b8e93e171dfac",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/OIS/CMakeLists.txt" : {
      "ObjectId" : "f88b9d63858d5ee32e753488bf4acb76776af546",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/OSG/CMakeLists.txt" : {
      "ObjectId" : "206c57950365c02fa9534219b12ff7f39abe221e",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/OSGEarth/CMakeLists.txt" : {
      "ObjectId" : "c81b882769d48d029fe73ce5c6bff707fff6e430",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/Ogre/CMakeLists.txt" : {
      "ObjectId" : "d7f97d6fea14c283190c24eb724accfa70a2c74c",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/OpenAL/CMakeLists.txt" : {
      "ObjectId" : "c5b7511441cc2a5788417ff7ed47b79111d14937",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/PagedGeometry/CMakeLists.txt" : {
      "ObjectId" : "b06556e7614468363d9e7cbb93a1d6e9571a2b41",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/PhysX3/CMakeLists.txt" : {
      "ObjectId" : "a77fd98298dbb8a7b3e8c82fc6f48b4b4c4396c1",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RakNet/CMakeLists.txt" : {
      "ObjectId" : "071acd3a57a84134b8bb6800b2ff31b40bec83b9",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RakNet4/CMakeLists.txt" : {
      "ObjectId" : "e31541d6111f2c7719282973e49204b5504515c8",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set lib name here!\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add all source files from current directory (recursively)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Enable class export \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Add project dependency libs\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "source/Plugins/RecastNavigation/API/Detour/CMakeLists.txt" : {
      "ObjectId" : "e05ed11fa6d9ce2ffd91d07175c58f3a2f27cfa8",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RecastNavigation/API/DetourCrowd/CMakeLists.txt" : {
      "ObjectId" : "0c34e1bd34714c84e5ad30d916f60fac93d268ee",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RecastNavigation/API/DetourTileCache/CMakeLists.txt" : {
      "ObjectId" : "dd481a436e85caf9ce852bed00d9f6e3155c846d",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RecastNavigation/API/Recast/CMakeLists.txt" : {
      "ObjectId" : "202304897f9bc39e385093a05ef324e768355378",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RecastNavigation/API/Utils/CMakeLists.txt" : {
      "ObjectId" : "6139a90badde26e0c8922f34409ecfe5bf91dd3f",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RecastNavigation/CMakeLists.txt" : {
      "ObjectId" : "d4a662fdd519a295306c71ac20d315348eb9d31b",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Plugins/RoadNetwork/CMakeLists.txt" : {
      "ObjectId" : "c7b99b7c9775975e9a339e5b881018192ea426f3",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(LIB_NAME \"GASSPluginRoadNetwork\")\r\n\n# add_source_from_current_dir()\r\n\n# add_library (${LIB_NAME} ${GASS_BUILDTYPE}  ${CPP_FILES} ${H_FILES})\r\n\n# target_include_directories(${LIB_NAME}\r\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PRIVATE  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\r\n\n# PRIVATE  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/RoadLib>)\r\n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# target_link_libraries(${LIB_NAME} GASSSim)\r\n\n# target_compile_definitions(${LIB_NAME} PRIVATE ${GASS_COMMON_DEFINITIONS} )\r\n\n# gass_install_plugin_target()\t\r\n\n#TODO: copy interface files in cmake generate\r\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "source/Plugins/Script/CMakeLists.txt" : {
      "ObjectId" : "a880929ce67e9a2e0a294eff750fa9d5350f1989",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set lib name here!\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set ogre sdk include directories\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add all source files from current directory (recursively)\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Enable class export \r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Add some folders where to search for dependency libraries\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Add project dependency libs\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "source/Plugins/Vehicle/CMakeLists.txt" : {
      "ObjectId" : "e206519d8461647da5ef70cb5c9e1bbec53edd05",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/Sim/CMakeLists.txt" : {
      "ObjectId" : "02cf7ee0a532699922a92b03ced3d74ce21ec830",
      "LastModified" : "2019-02-26T21:35:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Add dependency guid\r\n",
        "Line" : 4,
        "CharPositionInLine" : 3
      },
      "1" : {
        "Text" : "#gass_get_source_from_current_dir(CPP_FILES H_FILES)\r\n\n#source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX \"Source Files\" FILES ${CPP_FILES})\r\n\n#source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} PREFIX \"Header Files\" FILES ${H_FILES})\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "source/Test/CMakeLists.txt" : {
      "ObjectId" : "1ca97c5e439e52eb77a585eb7a08d76e48f126a2",
      "LastModified" : "2018-09-06T00:22:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# When adding more tests, list them in GASS_TEST_SOURCES\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#create_source_group(\"Test Files\" \"${CMAKE_CURRENT_SOURCE_DIR}\" ${GASS_TEST_SOURCES})\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Setup catch test framework, which only consist of one header file.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_library(Catch INTERFACE)\n\n#target_include_directories(Catch INTERFACE ${CATCH_INCLUDE_DIR})\n\n#add_executable(GassMathTest ${GASS_MATH_TEST_SOURCES})\n\n#target_link_libraries(GassMathTest Catch GASSCore)\n\n#add_test(NAME MathTest COMMAND GassMathTest)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 74
  },
  "ElapsedTime" : 1617
}