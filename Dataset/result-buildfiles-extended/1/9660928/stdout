{
  "Repository" : "9660928",
  "Revision" : "HEAD",
  "ObjectId" : "15e370280d8e55c2878a9beddf355f76f5c39b76",
  "CommitTime" : "2019-04-15T11:18:17Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4ac96795b24867bf0c0ca5fd4d5ed00b9db5f665",
      "LastModified" : "2019-02-18T06:22:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#\n\n# TODO:\n\n#\n\n# - some documentation targets still missing\n\n# - installing documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Build system setup\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the project name.\n\n# We use C++ in a few cases.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Restrict configuration types to the selected build type.\n\n# Note: This needs to be done before the project command\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Search in the `cmake' directory for additional CMake modules.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Search in `deps' directories for dependency files.\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Search for C header files in these directories.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Put libraries into `lib'.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Lists of all the source files.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Our own CMake macros and functions.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Build options\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# actual CMake variable\n",
        "Line" : 98,
        "CharPositionInLine" : 40
      },
      "12" : {
        "Text" : "# On some 64-bit platforms, libraries should be installed into `lib64'\n\n# instead of `lib'.  Set this to 64 to do that.\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# Platforms and drivers.\n\n#\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# Addons.\n\n#\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# Wrappers.\n\n#\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Documentation.\n\n#\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# For developers.\n\n#\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# Minor options.\n\n#\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Set up compilers\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Guess VCINSTALLDIR from the value of CMAKE_C_COMPILER if it's not set.\n\n# XXX CMAKE_C_COMPILER will often be simply \"cl\" so this won't work.\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Install in VCINSTALLDIR by default\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# For alplatf.h\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Guess MINGDIR from the value of CMAKE_C_COMPILER if it's not set.\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Search in MINGDIR for headers and libraries.\n",
        "Line" : 262,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Install to MINGDIR\n",
        "Line" : 269,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Check for a common problem (at the time of writing).\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# This flag is required on some versions of Mac OS X to avoid linker\n\n# problems with global variables which are not explicitly initialised.\n",
        "Line" : 306,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Tell the compiler it can use SSE instructions on x86 architectures.\n\n# If compatibility with Pentium 2's and below is required then the user\n\n# should switch WANT_ALLOW_SSE off.\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Workaround for a possible bug in CMake.  Even if we set this variable in\n\n# the toolchain file when cross-compiling, as we should, it is empty.\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# CMake reports \"x86\" on my Windows Vista machine\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Flags for other compilers should be added here.\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Build types\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Warnings.\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Unfortunately we can't use this flag when magic main is used,\n\n# the mangled_main won't have a forward declaration.\n",
        "Line" : 400,
        "CharPositionInLine" : 8
      },
      "35" : {
        "Text" : "# Helps to ensure the Windows port remains compatible with MSVC.\n",
        "Line" : 405,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# Debugging.\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Profiling.\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Begin tests\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Driver configuration\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n# These are the conventions for this CMakeFile.\n\n#\n\n# The WANT_* variables indicate whether the user wants to have an optional\n\n# feature enabled, i.e. whether they have selected something in the CMake UI.\n\n#\n\n# The CAN_* variables indicate whether a feature *can* be enabled on this\n\n# system/platform.  As these variable values are cached, CAN_ variables could\n\n# be set even though the user has turned a corresponding WANT_* variable\n\n# off---it might have been tested and set in a previous run.\n\n#\n\n# The SUPPORT_* variables are the conjunction of WANT_FEATURE and CAN_FEATURE,\n\n# i.e. the user wants it and the system can support it.\n\n#\n\n# Those variables are internal to the CMake build.  Allegro header files use\n\n# preprocessor constants with names like ALLEGRO_WITH_* and ALLEGRO_HAVE_*.\n\n# Sometimes we make use of those variables in this CMakeFile as well, but\n\n# generally that's just due to sloppiness.\n\n#\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# We assume that the OpenGL library is not very old.\n",
        "Line" : 586,
        "CharPositionInLine" : 12
      },
      "42" : {
        "Text" : "# prefer GLVND if available\n",
        "Line" : 588,
        "CharPositionInLine" : 38
      },
      "43" : {
        "Text" : "# on cmake 2.8.1 OpenGL ES is not found in the iphone case\n\n# XXX incorporate IPHONE case into FindOpenGLES/2\n",
        "Line" : 602,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# on cmake 2.8.1 OpenGL ES is not found in the iphone case\n\n# XXX incorporate IPHONE case into FindOpenGLES/2\n",
        "Line" : 641,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "#\n\n# Unix-specific\n\n#\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# includes MACOSX\n",
        "Line" : 673,
        "CharPositionInLine" : 9
      },
      "47" : {
        "Text" : "#\n\n# SDL\n\n#\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#\n\n# X Window System\n\n#\n",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# not MACOSX\n",
        "Line" : 703,
        "CharPositionInLine" : 50
      },
      "50" : {
        "Text" : "#\n\n# Windows\n\n#\n",
        "Line" : 791,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# At least some copies of dinput.h redefine some types multiple times.\n\n# We must add the directory as a system directory so that the compiler\n\n# will suppress such errors.\n",
        "Line" : 799,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# Xinput support for xbox compatible controllers.\n",
        "Line" : 808,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Main library\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 837,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# List of source files need to compile Allegro in this configuration on\n\n# this platform.\n",
        "Line" : 851,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Libraries that we always need to link against on this platform.\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# not MACOSX\n",
        "Line" : 860,
        "CharPositionInLine" : 17
      },
      "57" : {
        "Text" : "# Header files that we need to install.\n",
        "Line" : 924,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# ALLEGRO_LIB_BUILD is defined for all Allegro sources (core and addon)\n\n# ALLEGRO_SRC is defined only while compiling the core sources (its use is\n\n# to get the DLL #defines right under Windows for creating DLL export\n\n# functions when it is defined or import DLL functions when it is not).\n",
        "Line" : 976,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Addons and examples should link with this target.\n",
        "Line" : 988,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n# Add-ons\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 993,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# For OSX, we need to set the header location inside the framework for each\n\n# file (relative to the current directory, so for example when the\n\n# AllegroImage framework is built we need to set the path for\n\n# allegro5/allegro_image.h but when the AllegroMonolith framework is built\n\n# we need to set the path for addons/image/allegro5/allegro_image.h -\n\n# otherwise the header is silently missing).\n",
        "Line" : 1006,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Produce configuration file\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1025,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# All relevant variables must be set before here.\n",
        "Line" : 1035,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Android\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1041,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n# Demo\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1052,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# XXX disabled because it breaks MSVC's intellisense for some reason\n",
        "Line" : 1058,
        "CharPositionInLine" : 29
      },
      "67" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n# Examples\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1064,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n# Tests\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1074,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n# contrib/Luajit\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1084,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   pkg-config files\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1094,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# XXX these should be configurable separately\n",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Install pkg-config files on Unix, and when cross-compiling on Unix.\n",
        "Line" : 1113,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Our pkg-config files are now named allegro*-5.pc, which will\n\n# work across branches. Allegro 5.0.8 and prior used the names\n\n# allegro*-5.0.pc so on the 5.0 branch we will continue to install\n\n# those files, for backwards compatibility.\n",
        "Line" : 1126,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# For static linking: get extra libraries to link with.\n",
        "Line" : 1135,
        "CharPositionInLine" : 16
      },
      "75" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Documentation\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1151,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Wrappers\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 1161,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set sts=4 sw=4 et:\n",
        "Line" : 1171,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 78
    },
    "addons/CMakeLists.txt" : {
      "ObjectId" : "3e71563e7dc13334d2aad364e0e05cbc513316d3",
      "LastModified" : "2019-01-21T19:47:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FOO_LINK_WITH and SUPPORT_FOO need to be propagated up to the parent scope so\n\n# examples know if they can use the FOO addon, and what to link against.\n\n# FOO_LINK_WITH should be the name of a single target.  The target should\n\n# automatically pull in dependencies so they don't need to be listed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try compiling with the extra dependencies.\n",
        "Line" : 100,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# there's a circular dependency between Harfbuzz and Freetype, so one of them has to be\n\n# repeated to ensure proper static linking order\n",
        "Line" : 115,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "# FindPhysFS.cmake in cmake-2.6.2 doesn't call this but it should.\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Does this copy of PhysicsFS require zlib to be linked separately?\n\n# FindPhysFS should really figure this out for us, but it doesn't.\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# SUPPORT_MAIN and MAIN_LINK_WITH are spelt as such in this scope,\n\n# but are prefixed with ALLEGRO in the parent scope.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "addons/acodec/CMakeLists.txt" : {
      "ObjectId" : "33a56696a14376680e0075955d4c9bfcb53904d2",
      "LastModified" : "2017-10-06T04:21:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# built-in enhanced port of A4 loader\n",
        "Line" : 25,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "# For dynamic loading, we want to make sure that CMake has found an import\n\n# library and not a static library. We assume that the name of the DLL to load\n\n# is the same as the import library, bar the extension.\n\n#\n\n# With MSVC, static libraries and import libraries share the same extension.\n\n# Luckily the MSVC static libraries for FLAC and Vorbis are named with a\n\n# _static suffix.\n\n# With MinGW, static libraries end with .a, and import libraries end with\n\n# .dll.a so we can tell them apart. (The regex for this is a bodge.)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Guess the name of dlltool from gcc.\n",
        "Line" : 42,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Not sure this is the best way.\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Guess from the basename.\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#\n\n# FLAC\n\n#\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# FLAC requires libm on Android, doesn't seem to hurt elsewhere either.\n",
        "Line" : 87,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "#\n\n# MOD audio\n\n#\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Vorbis/Tremor\n\n#\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# mimic regular libogg/libvorbis\n",
        "Line" : 217,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# libm is required when linking statically.\n",
        "Line" : 228,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "#\n\n# Opus\n\n#\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# libm is required when linking statically.\n",
        "Line" : 287,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "addons/acodec/allegro5/internal/aintern_acodec_cfg.h.cmake" : {
      "ObjectId" : "56f3f19444a59964ac98c03b2fc1ed87b9b8ab0d",
      "LastModified" : "2016-04-26T02:38:42Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Define if the library should be loaded dynamically. */",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "addons/audio/CMakeLists.txt" : {
      "ObjectId" : "ca3ab15e6344fb57f17b48a9a464be632b6db534",
      "LastModified" : "2016-04-26T02:38:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The platform conditions are not really necessary but prevent confusing the\n\n# user, e.g. it's pretty weird to get a warning about missing DSound on Unix.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Should check the presence just to be sure.\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "addons/audio/allegro5/internal/aintern_audio_cfg.h.cmake" : {
      "ObjectId" : "a865fd8c3820a94b93fe38c695d352138e196a3c",
      "LastModified" : "2012-04-30T01:50:54Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "addons/color/CMakeLists.txt" : {
      "ObjectId" : "4aa2ec7816ad5cf882e619f52f98a4e8f342c91d",
      "LastModified" : "2016-04-26T02:38:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "addons/font/CMakeLists.txt" : {
      "ObjectId" : "b924bd7fad58e2e755e5bd83ca3d907dc327d197",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "addons/image/CMakeLists.txt" : {
      "ObjectId" : "3f2952a8656cfa38ebb0d2a1431ac4ed50fa190b",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Accumulate these.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ALLEGRO_CFG_IIO_HAVE_* are the available libraries.\n\n# ALLEGRO_CFG_IIO_SUPPORT_* are the supported formats.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# First look for native libraries and mark any supported image\n\n# type as found, so that the associated third party libraries \n\n# don't need to be used.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Now look for third party libraries to handle the unsupported formats\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# HAVE_PNG means libpng is available (and should be used)\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# HAVE_JPG means libjpeg is available (and should be used)\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "addons/image/allegro5/internal/aintern_image_cfg.h.cmake" : {
      "ObjectId" : "b40e16d444043d6c43624aaf9fac46086fd87150",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* which libraries are present and needed? */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* which formats are supported and wanted? */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "addons/main/CMakeLists.txt" : {
      "ObjectId" : "c8a589d691fdfb0199166a38401ae1c86f08cf40",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: set sts=4 sw=4 et:\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "addons/memfile/CMakeLists.txt" : {
      "ObjectId" : "ca293e33fe67b7d7ebe57b5a90c633d9bd27ce9e",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "addons/native_dialog/CMakeLists.txt" : {
      "ObjectId" : "7d02dfa747c1a12fcd6fbd05d81f6a3d267dd3fb",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Note: allegro_dialog NOT allegro_native_dialog.\n",
        "Line" : 65,
        "CharPositionInLine" : 3
      },
      "1" : {
        "Text" : "# Note: allegro_dialog NOT allegro_native_dialog.\n",
        "Line" : 75,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# vim: set sts=4 sw=4 et:\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "addons/native_dialog/allegro5/internal/aintern_native_dialog_cfg.h.cmake" : {
      "ObjectId" : "3369e4979c59fbc2f8f3c526b3e92a5075770a74",
      "LastModified" : "2012-04-30T01:50:54Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "addons/physfs/CMakeLists.txt" : {
      "ObjectId" : "e194bd2c993b5212706370ad6b28dff53c30e644",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This allows the monolith build to find the files.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "addons/primitives/CMakeLists.txt" : {
      "ObjectId" : "b65a2c5ed054dc88318bb5bbc1c34ab49135c851",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add this file conditionally.\n\n# The Debian folks want to remove it because it contains precompiled code.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "addons/ttf/CMakeLists.txt" : {
      "ObjectId" : "43974e5812dda007a9bbfa69cfc48b819194371b",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "addons/ttf/allegro5/internal/aintern_ttf_cfg.h.cmake" : {
      "ObjectId" : "48072f234f832afca65fd62f7264a9f912c65a1a",
      "LastModified" : "2008-08-25T14:37:42Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "addons/video/CMakeLists.txt" : {
      "ObjectId" : "61a322bae3470d1d4b624f3351900e372d67f475",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For monolith build.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "addons/video/allegro5/internal/aintern_video_cfg.h.cmake" : {
      "ObjectId" : "449a97ec7d69ca0864b99240818e6d2f7a972461",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "android/CMakeLists.txt" : {
      "ObjectId" : "f2b9ae53422571deba2fe383f00dd0a5c7946cc6",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/AllegroFindFFMPEG.cmake" : {
      "ObjectId" : "948b8da262efc379c4022aed9337b5e1daeeea2d",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FFMPEG\n\n#\n\n#  FFMPEG_FOUND       - true if FFMPEG is found\n\n#  FFMPEG_CFLAGS      - required compiler flags\n\n#  FFMPEG_LDFLAGS     - required linker flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -lavcodec -lavformat -lswscale\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Windos and OSX\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/AllegroFindOSS.cmake" : {
      "ObjectId" : "9536603b3100508f46cbc119ae45331fc116e9d9",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Open Sound System\n\n#\n\n#  OSS_FOUND       - True if OSS headers found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file is Allegro-specific and requires the following variables to be\n\n# set elsewhere:\n\n#   ALLEGRO_HAVE_MACHINE_SOUNDCARD_H\n\n#   ALLEGRO_HAVE_LINUX_SOUNDCARD_H\n\n#   ALLEGRO_HAVE_SYS_SOUNDCARD_H\n\n#   ALLEGRO_HAVE_SOUNDCARD_H\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set OSS_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/AndroidApp.cmake" : {
      "ObjectId" : "975cb0586b57ebd1e18e152668c90e94247433f1",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The APK to output. We always build the examples in debug mode as\n\n# a release version would need to be signed.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Build the application as a shared library.\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Get the path of the application's shared object.\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# How to make the APK.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Useful targets for testing.\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cmake/Common.cmake" : {
      "ObjectId" : "a9f3ac812c3f7b0e73e1b06728135db081cafae2",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Infer which subdirectory this header file should be installed.\n",
        "Line" : 3,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# If we have inferred correctly then it should be under allegro5.\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# MACOSX_PACKAGE_LOCATION is also used in install_our_headers.\n",
        "Line" : 13,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Normally CMake caches the \"failure\" result of a compile test, preventing it\n\n# from re-running. These helpers delete the cache variable on failure so that\n\n# CMake will try again next time.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Oh my. CMake really is bad for this - but I couldn't find a better\n\n# way.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Watch out for -framework options (OS X)\n",
        "Line" : 62,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Remove absolute path.\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Remove .a/.so/.dylib.\n",
        "Line" : 67,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# Remove -l prefix if it's there already.\n",
        "Line" : 72,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Make sure we don't include our own libraries.\n\n# FIXME: Use a global list instead of a very unstable regexp.\n",
        "Line" : 75,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# BUILD_SHARED_LIBS controls whether this is a shared or static library.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Compile with multiple processors\n",
        "Line" : 90,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# /Zl instructs MSVC to not mention the CRT used at all,\n\n# allowing the static libraries to be combined with any CRT version\n\n# in the final dll/exe.\n",
        "Line" : 99,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "# TODO: The -static is a bit of a hack for MSYS2 to force the static linking of pthreads.\n\n# There has to be a better way.\n",
        "Line" : 107,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Construct the output name.\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Put version numbers on DLLs but not on import libraries nor static\n\n# archives.  Make MinGW not add a lib prefix to DLLs, to match MSVC.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Suppress errors about _mangled_main_address being undefined on Mac OS X.\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Specify a list of libraries to be linked into the specified target.\n\n# Library dependencies are transitive by default.  Any target which links\n\n# with this target will therefore pull in these dependencies automatically.\n",
        "Line" : 165,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Set list of dependencies that the user would need to explicitly link with\n\n# if static linking.\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Record in a custom target property 'ANDROID_LOAD_LIBS' the list of shared\n\n# objects that will need to be bundled with the APK and loaded manually if\n\n# linking with this target.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Doesn't work, see below.\n\n# PUBLIC_HEADER DESTINATION \"include\"\n",
        "Line" : 227,
        "CharPositionInLine" : 12
      },
      "21" : {
        "Text" : "# Unfortunately, CMake's PUBLIC_HEADER support doesn't install into nested\n\n# directories well, otherwise we could rely on install(TARGETS) to install\n\n# header files associated with the target.  Instead we use the install(FILES)\n\n# to install headers.  We reuse the MACOSX_PACKAGE_LOCATION property,\n\n# substituting the \"Headers\" prefix with \"include\".\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# FIXME:We want those as project attributes, not target attributes, but I don't know how\n",
        "Line" : 258,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# We have to add an icon to every executable on IPhone else\n\n# cmake won't create a resource copy build phase for us.\n\n# And re-creating those by hand would be a major pain.\n",
        "Line" : 261,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# Ads a target for an executable target `nm`.\n\n#\n\n# Arguments:\n\n#\n\n#    SRCS - Sources. If empty, assumes it to be ${nm}.c\n\n#    LIBS - Libraries to link to.\n\n#    DEFINES - Additional defines.\n\n#\n\n# Free variable: EXECUTABLE_TYPE\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# none\n",
        "Line" : 283,
        "CharPositionInLine" : 15
      },
      "26" : {
        "Text" : "# none\n",
        "Line" : 284,
        "CharPositionInLine" : 21
      },
      "27" : {
        "Text" : "# Compile with multiple processors\n",
        "Line" : 314,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Recreate data directory for out-of-source builds.\n\n# Note: a symlink is unsafe as make clean will delete the contents\n\n# of the pointed-to directory.\n\n#\n\n# Files are only copied if they don't are inside a .svn folder so we\n\n# won't end up with read-only .svn folders in the build folder.\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# This macro is called by each addon. It expects the following variables to\n\n# exist:\n\n#\n\n# ${ADDON}_SOURCES\n\n# ${ADDON}_INCLUDE_FILES\n\n# ${ADDON}_INCLUDE_DIRECTORIES\n\n# ${ADDON}_LINK_DIRECTORIES\n\n# ${ADDON}_DEFINES\n\n# ${ADDON}_LIBRARIES\n\n#\n\n# This is useful so we can build the monolith library without having any other\n\n# special code for it in the addon CMakeLists.txt files.\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set ft=cmake sts=4 sw=4 et:\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "cmake/FileList.cmake" : {
      "ObjectId" : "a9dcf453ecb04556098af8b992fcb8de62326f85",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Only files which need to be installed.\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Only files which need to be installed.\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/FindCg.cmake" : {
      "ObjectId" : "f6a5e68e3dee3dbc2f218408a1c7bad8a100e3af",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NVIDIA Texture Tools 2.0 is licensed under the MIT license.\n\n# Copyright (c) 2007 NVIDIA Corporation\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Try to find NVIDIA's Cg compiler, runtime libraries, and include path.\n\n# Once done this will define\n\n#\n\n# CG_FOUND =system has NVIDIA Cg and it can be used. \n\n# CG_INCLUDE_PATH = directory where cg.h resides\n\n# CG_LIBRARY = full path to libCg.so (Cg.DLL on win32)\n\n# CG_GL_LIBRARY = full path to libCgGL.so (CgGL.dll on win32)\n\n# CG_D3D9_LIBRARY = full path to cgD3D9.dll\n\n# CG_COMPILER = full path to cgc (cgc.exe on win32)\n\n# \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On OSX default to using the framework version of Cg.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the include  dir\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Since we are using Cg framework, we must link to it.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Note, we use weak linking, so that it works even when Cg is not available.\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/FindDUMB.cmake" : {
      "ObjectId" : "644bcc895a37b14f5fc68439be3686f2122535af",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find DUMB\n\n# Find the native DUMB includes and libraries\n\n#\n\n#  DUMB_INCLUDE_DIR - where to find DUMB headers.\n\n#  DUMB_LIBRARIES   - List of libraries when using libDUMB.\n\n#  DUMB_FOUND       - True if libDUMB found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set DUMB_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindDXGuid.cmake" : {
      "ObjectId" : "504cb3f4e49699fda6adb829aae32c50b5f46557",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find dxguid\n\n# Find the dxguid libraries\n\n#\n\n#  DXGUID_LIBRARIES   - List of libraries\n\n#  DXGUID_FOUND       - True if dxguid found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set DXGUID_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindDirectX.cmake" : {
      "ObjectId" : "17a780e3ff0e081456fa1f053801611c25cb88c9",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds various DirectX components:\n\n#\n\n#  DINPUT\n\n#  D3D9\n\n#  D3DX9\n\n#  DSOUND\n\n#  XINPUT\n\n#\n\n#  For each component, this will fill out the following variables\n\n#\n\n#  ${COMPONENT}_INCLUDE_DIR - Where to find the component header.\n\n#  ${COMPONENT}_LIBRARIES   - List of libraries when using the component.\n\n#  ${COMPONENT}_FOUND       - True if the component is found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set ${name}_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/FindENet.cmake" : {
      "ObjectId" : "b05f1887731c77dda8563d4a91e9d3c0ba6fcc6f",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ENet\n\n# Find the native ENet includes and libraries\n\n#\n\n#  ENET_INCLUDE_DIR - where to find ENet headers.\n\n#  ENET_LIBRARIES   - List of libraries when using libenet.\n\n#  ENET_FOUND       - True if libenet found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set ENET_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindFLAC.cmake" : {
      "ObjectId" : "7de8a06cae5121e65e342ad33b770343e334479f",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find FLAC\n\n# Find the native FLAC includes and libraries\n\n#\n\n#  FLAC_INCLUDE_DIR - where to find FLAC headers.\n\n#  FLAC_LIBRARIES   - List of libraries when using libFLAC.\n\n#  FLAC_FOUND       - True if libFLAC found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# MSVC built libraries can name them *_static, which is good as it\n\n# distinguishes import libraries from static libraries with the same extension.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set FLAC_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindGDIPLUS.cmake" : {
      "ObjectId" : "56956cdfe62584da8310efc32934a9f177e7cd1b",
      "LastModified" : "2017-12-27T06:40:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find GDI+\n\n# Find the GDI+ includes and libraries\n\n#\n\n#  GDIPLUS_INCLUDE_DIR - where to find gdiplus.h\n\n#  GDIPLUS_LIBRARIES   - List of libraries when using GDI+.\n\n#  GDIPLUS_FOUND       - True if GDI+ found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set GDIPLUS_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindHarfBuzz.cmake" : {
      "ObjectId" : "f94d17c3b0119b2864453c13f0962c18e928c340",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindHarfBuzz\n\n# ------------\n\n#\n\n# Find the HarfBuzz text shaping engine includes and library.\n\n#\n\n# Imported Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following :prop_tgt:`IMPORTED` target:\n\n#\n\n# ``HarfBuzz::HarfBuzz``\n\n#   The Harfbuzz ``harfbuzz`` library, if found\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module will set the following variables in your project:\n\n#\n\n# ``HARFBUZZ_FOUND``\n\n#   true if the HarfBuzz headers and libraries were found\n\n# ``HARFBUZZ_INCLUDE_DIRS``\n\n#   directories containing the Harfbuzz headers.\n\n# ``HARFBUZZ_LIBRARIES``\n\n#   the library to link against\n\n# ``HARFBUZZ_VERSION_STRING``\n\n#   the version of harfbuzz found\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by Ebrahim Byagowi.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# on Windows, ensure paths are in canonical format (forward slahes):\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# set the user variables\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindOgg.cmake" : {
      "ObjectId" : "1a4efcec88673ba3a58ec497ac13c42e27b68e9b",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ogg\n\n# Find the native ogg includes and libraries\n\n#\n\n#  OGG_INCLUDE_DIR - where to find ogg.h, etc.\n\n#  OGG_LIBRARIES   - List of libraries when using ogg.\n\n#  OGG_FOUND       - True if ogg found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# MSVC built ogg may be named ogg_static.\n\n# The provided project files name the library with the lib prefix.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set OGG_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/FindOpenGLES1.cmake" : {
      "ObjectId" : "c220434710d8b323fd7b2fc4e3d3cb254cc23ddf",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenGLES\n\n# Find the native OpenGLES includes and libraries\n\n#\n\n#  OPENGLES1_INCLUDE_DIR - where to find GLES/gl.h, etc.\n\n#  OPENGLES1_LIBRARIES   - List of libraries when using OpenGLES.\n\n#  OPENGLES1_FOUND       - True if OpenGLES found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set OPENGLES1_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindOpenGLES2.cmake" : {
      "ObjectId" : "e33acc1cfdc7efe0a145e0979ce25c94156a4429",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenGLES2\n\n# Find the native OpenGLES2 includes and libraries\n\n#\n\n#  OPENGLES2_INCLUDE_DIR - where to find GLES2/gl.h, etc.\n\n#  OPENGLES2_LIBRARIES   - List of libraries when using OpenGLES.\n\n#  OPENGLES2_FOUND       - True if OpenGLES found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set OPENGLES2_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindOpenSL.cmake" : {
      "ObjectId" : "f0d8d6242c6f9ca7345ebb24d4f090b9a88a750d",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find OpenSL (actually OpenSLES)\n\n# Find the OpenSLES includes and libraries\n\n#\n\n#  OPENSL_INCLUDE_DIR - where to find dsound.h\n\n#  OPENSL_LIBRARIES   - List of libraries when using dsound.\n\n#  OPENSL_FOUND       - True if dsound found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set OPENSL_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindOpus.cmake" : {
      "ObjectId" : "771d4d0443692fae974470a0ed8b1c4e8da52ed4",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find opus\n\n# Find the native opus includes and libraries\n\n#\n\n#  OPUS_INCLUDE_DIR - where to find opus.h, etc.\n\n#  OPUS_LIBRARIES   - List of libraries when using opus(file).\n\n#  OPUS_FOUND       - True if opus found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# MSVC built opus may be named opus_static\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# The provided project files name the library with the lib prefix.\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set OPUS_FOUND\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# to TRUE if all listed variables are TRUE.\n",
        "Line" : 23,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 6
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "acf645021a59801d56995269bc18b80a6deec156",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# CMake - Cross Platform Makefile Generator\n\n# Copyright 2000-2017 Kitware, Inc. and Contributors\n\n# All rights reserved.\n\n# \n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# \n\n# * Redistributions of source code must retain the above copyright\n\n#   notice, this list of conditions and the following disclaimer.\n\n# \n\n# * Redistributions in binary form must reproduce the above copyright\n\n#   notice, this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n# \n\n# * Neither the name of Kitware, Inc. nor the names of Contributors\n\n#   may be used to endorse or promote products derived from this\n\n#   software without specific prior written permission.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 93,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 94,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 95,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 146,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 163,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 170,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 175,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 177,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "cmake/FindTheora.cmake" : {
      "ObjectId" : "629f16c85b664fbc0d835a48f2d001815544f81a",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find theora\n\n# Find the native theora includes and libraries\n\n#\n\n#  THEORA_INCLUDE_DIR - where to find theora.h, etc.\n\n#  THEORA_LIBRARIES   - List of libraries when using theora.\n\n#  THEORA_FOUND       - True if theora found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# MSVC built theora may be named *_static\n\n# The provided project files name the library with the lib prefix.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set THEORA_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/FindTremor.cmake" : {
      "ObjectId" : "510712bc6dda86abc7239a335a6d6a385d1025ed",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Tremor\n\n#\n\n#  TREMOR_INCLUDE_DIR - where to find Tremor headers.\n\n#  TREMOR_LIBRAY      - List of libraries when using libTremor.\n\n#  TREMOR_FOUND       - True if Tremor found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set TREMOR_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindVorbis.cmake" : {
      "ObjectId" : "b183c3aa7bb4f3d5208186e7112d7e5208d49bb5",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbis\n\n# Find the native vorbis includes and libraries\n\n#\n\n#  VORBIS_INCLUDE_DIR - where to find vorbis.h, etc.\n\n#  VORBIS_LIBRARIES   - List of libraries when using vorbis(file).\n\n#  VORBIS_FOUND       - True if vorbis found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# MSVC built vorbis may be named vorbis_static\n\n# The provided project files name the library with the lib prefix.\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBIS_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "cmake/FindWebP.cmake" : {
      "ObjectId" : "969708ec187745cce9b1af083ede1ff72c430701",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find WebP.\n\n# Once done, this will define\n\n#\n\n#  WEBP_FOUND - system has WebP.\n\n#  WEBP_INCLUDE_DIRS - the WebP. include directories\n\n#  WEBP_LIBRARIES - link these to use WebP.\n\n#\n\n# Copyright (C) 2012 Raphael Kubo da Costa <rakuco@webkit.org>\n\n# Copyright (C) 2013 Igalia S.L.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1.  Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n# 2.  Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS\n\n# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Toolchain-android.cmake" : {
      "ObjectId" : "81259f8084e55a159275e9e14622fbb59fb3f7f6",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#setup build targets, mutually exclusive\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# specify the cross compiler\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#there may be a way to make cmake deduce these TODO deduce the rest of the tools\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set these flags for client use\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# where is the target environment \n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# only search for libraries and includes in the ndk toolchain\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Setup arm specific stuff\n\n#It is recommended to use the -mthumb compiler flag to force the generation\n\n#of 16-bit Thumb-1 instructions (the default being 32-bit ARM ones).\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#these are required flags for android armv7-a\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#-Wl,-L${LIBCPP_LINK_DIR},-lstdc++,-lsupc++\n\n#-L${LIBCPP_LINK_DIR} -lstdc++ -lsupc++\n\n#Also, this is *required* to use the following linker flags that routes around\n\n#a CPU bug in some Cortex-A8 implementations:\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#set these global flags for cmake client scripts to change behavior\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/Toolchain-iphone.cmake" : {
      "ObjectId" : "1a53439095d0b8c6b58155c7446e7a8bfdd4ff82",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Toolchain-mingw.cmake" : {
      "ObjectId" : "6dff20b762944c6f54d87c8b26a752b213d36bc5",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use this command to build the Windows port of Allegro\n\n# with a mingw cross compiler:\n\n#\n\n#   cmake -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-mingw.cmake .\n\n#\n\n# or for out of source:\n\n#\n\n#   cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-mingw.cmake ..\n\n#\n\n# You will need at least CMake 2.6.0.\n\n#\n\n# Adjust the following paths to suit your environment.\n\n#\n\n# This file was based on http://www.cmake.org/Wiki/CmakeMingw\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assume the target architecture.\n\n# XXX for some reason the value set here gets cleared before we reach the\n\n# main CMakeLists.txt; see that file for a workaround.\n\n# set(CMAKE_SYSTEM_PROCESSOR i686)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Which compilers to use for C and C++, and location of target\n\n# environment.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# First look in standard location as used by Debian/Ubuntu/etc.\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# First look in standard location as used by Debian/Ubuntu/etc.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# You can get a MinGW environment using the script at <http://mxe.cc>.\n\n# It downloads and builds MinGW and most of the dependencies for you.\n\n# You can use the toolchain file generated by MXE called `mxe-conf.cmake'\n\n# or you can use this file by adjusting the above and following paths.\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Else fill in local path which the user will likely adjust.\n\n# This is the location assumed by <http://www.libsdl.org/extras/win32/cross/>\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Tell pkg-config not to look at the target environment's .pc files.\n\n# Setting PKG_CONFIG_LIBDIR sets the default search directory, but we have to\n\n# set PKG_CONFIG_PATH as well to prevent pkg-config falling back to the host's\n\n# path.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/Toolchain-openwiz.cmake" : {
      "ObjectId" : "215672485766a5b8af3b4d39ba031aa40c61f626",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Toolchain-raspberrypi.cmake" : {
      "ObjectId" : "17fedbc471bd3092f313c209dd7234b32930b908",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "contrib/luajit/CMakeLists.txt" : {
      "ObjectId" : "a6f422e383e54b1a3593104f2b80fab2240b109e",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Construct list of files whose modification should trigger a rebuild of\n\n# the Python API.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "demos/cosmic_protector/CMakeLists.txt" : {
      "ObjectId" : "8063b63524ac5a03851f3f378fa60363900c0247",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mac OS X bundle support.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "demos/skater/CMakeLists.txt" : {
      "ObjectId" : "bf1115da3393fb649d471192d0df4a4369b5038e",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mac OS X bundle support.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MACOSX_BUNDLE_ICON_FILE \"Icon.icns\"\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vi: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "demos/speed/CMakeLists.txt" : {
      "ObjectId" : "bf1850c4e7e8af9680c99c0582a7d5d1e1af81f0",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prefer local headers to system directories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "ac2cc935a7430cdcda30791d12417da43bbb66ef",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sh is only used for a developer-only target.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Pandoc 1.10 changed handling of internal cross-references in Texinfo writer,\n\n# and LaTeX writer thereabouts.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(STATUS \"Pandoc version is compatible\")\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# extraargs...\n",
        "Line" : 86,
        "CharPositionInLine" : 31
      },
      "8" : {
        "Text" : "# Use native Windows syntax to avoid \"c:/foo.txt\" being treated as a\n\n# remote URI by Pandoc 1.5 and 1.6.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# The source file is a generated Texinfo file.\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Writing to stdout suppresses the table of contents.\n\n# To get the table of contents, use `makeinfo -o ${output}`.\n",
        "Line" : 113,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Stick the ALLEGRO_VERSION into a file included by the latex template\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Copy CSS files.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set sts=4 sw=4 et:\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "docs/Refman.cmake" : {
      "ObjectId" : "86482f76dee8d2d914f0f16aa352bc2d3dd447d3",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Put these in the order that they should appear in the Info or PDF manual.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Paths\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Protos\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The protos file is a list of function prototypes and type declarations\n\n# which can then be embedded into the documentation.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Rebuilding the documentation whenever a source file changes is irritating,\n\n# especially as public prototypes rarely change.  Thus we keep a second file\n\n# called protos.timestamp which reflects the last time that the protos file\n\n# changed.  We declare _that_ file as the dependency of other targets.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We can get into a situation where the protos file is newer than the source\n\n# files (up-to-date) but the protos.timestamp is older than the source files.\n\n# If the protos and protos.timestamp files are identical then each time\n\n# you run make, it will compare them and find them equal, so protos.timestamp\n\n# won't be updated.  However that check is instantaneous.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ALL_SRCS is split into multiple lists, otherwise the make_protos command\n\n# line is too long for Windows >:-( We use relative paths for the same reason.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# For testing (command line too long for Windows)\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   HTML\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The html_refs file contains link definitions for each API entry.\n\n# It's used to resolve references across HTML pages.\n\n# The search_index.js file contains definitions for the autosuggest widget.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Man pages\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Figure out the man pages that would be generated from this file.\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Info\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   LaTeX (PDF)\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Repeat three times to get cross references correct.\n",
        "Line" : 414,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Tags file\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n#\n\n#   Consistency check\n\n#\n\n#-----------------------------------------------------------------------------#\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set sts=4 sw=4 et:\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "docs/src/refman/allegro_version.tex.cmake" : {
      "ObjectId" : "339bb2c1c9bbddecafedc785f8995d7a740b5995",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "ee58687f21e32b00c4f59e00bfcfe00b05a28d74",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The physfs example directly includes physfs.h\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# List dependencies explicitly for loading by Android APKs.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Lists of data files to add to Android APKs, to appear after the DATA keyword.\n\n# DATA_IMAGES is a special case that includes the DATA keyword.\n\n# Examples don't necessarily use every file in the list.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-----------------------------------------------------------------------------#\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# UTF-8 strings are problematic under MSVC.\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# In some configurations CURL pulls in dependencies which we don't check for.\n\n# This example isn't important so it's disabled by default to prevent problems.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# select() is in the Winsock library.\n",
        "Line" : 248,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Only build the enet examples if libenet is installed\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# example(ex_ogre3d ex_ogre3d.cpp)\n\n# include_directories(/usr/include/OGRE)\n\n# target_link_libraries(ex_ogre3d OgreMain)\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This is useful for developers to add temporary test programs.\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "examples/Helper.cmake" : {
      "ObjectId" : "c143ec9ca60a6f0a6cb457aad3f7177237e1cdce",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Conditionally build an example program.  If any of its arguments is the exact\n\n# string \"x\", do nothing.  Otherwise strip off the \"x\" prefixes on arguments\n\n# and link to that target.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use cmake_parse_arguments first.\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# none\n",
        "Line" : 7,
        "CharPositionInLine" : 21
      },
      "3" : {
        "Text" : "# Parse what remains of the argument list manually.\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If no sources are listed assume a single C source file.\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Prepend the base libraries.\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Popup error messages.\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Monolith contains all other libraries which were enabled.\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Append the extra, non-Allegro libraries.\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# We need stdout and stderr available from cmd.exe,\n\n# so we must not use WIN32 here.\n",
        "Line" : 61,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "#-----------------------------------------------------------------------------#\n\n# vim: set ts=8 sts=4 sw=4 et:\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "include/allegro5/platform/alplatf.h.cmake" : {
      "ObjectId" : "dfab5e5587cf4184e247cc55f1647ef8516746c4",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* alplatf.h is generated from alplatf.h.cmake */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/*---------------------------------------------------------------------------*/",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 if you have the corresponding header file. */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 if the corresponding functions are available. */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 if procfs reveals argc and argv */",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/*---------------------------------------------------------------------------*/",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define if target machine is little endian. */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Define if target machine is big endian. */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define if target platform is Darwin. */",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/*---------------------------------------------------------------------------*/",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define if you need support for X-Windows. */",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define if XCursor ARGB extension is available. */",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define if XF86VidMode extension is supported. */",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define if Xinerama extension is supported. */",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define if XRandR extension is supported. */",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if XIM extension is supported. */",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define if XInput 2.2 X11 extension is supported. */",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define if Xpm is found. Useful on Ubuntu Unity to set icon. */",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/*---------------------------------------------------------------------------*/",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define if target platform is linux. */",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define if we are building with SDL backend. */",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/*---------------------------------------------------------------------------*/\n/* vi: set ft=c ts=3 sts=3 sw=3 et: */",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "indent.pro" : {
      "ObjectId" : "8e0847c002d3e2834e53c91ccff1f21028944d7c",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "python/CMakeLists.txt" : {
      "ObjectId" : "f802d5a249a98c14fadf94a5328dd444763d2b80",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Construct list of files whose modification should trigger a rebuild of\n\n# the Python API.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "7b87a6e64c0c9c199b2dfff68c63919a713787d1",
      "LastModified" : "2019-04-15T11:16:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# vim: set sts=4 sw=4 et:\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 54,
    "CMAKESOURCE" : 7,
    "QMAKE" : 1
  },
  "ElapsedTime" : 3707
}