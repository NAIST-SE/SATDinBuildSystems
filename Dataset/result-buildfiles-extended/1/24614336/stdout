{
  "Repository" : "24614336",
  "Revision" : "HEAD",
  "ObjectId" : "14c1e5c5b9fd0cc202492d3e6c537f0164700e67",
  "CommitTime" : "2019-04-15T17:42:56Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4d2225de196bebdd2add20a0754e7295af9936a8",
      "LastModified" : "2019-04-15T17:42:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# WAVM configuration options\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The sanitizers are only available when compiling with Clang and GCC.\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# libfuzzer is only available when compiling with Clang.\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Disable the runtime on 32-bit platforms.\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Allow disabling the runtime on 64-bit platforms.\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Find an installed build of LLVM\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Convert LLVM_DEFINITIONS and LLVM_INCLUDE_DIRS from strings of space-separated elements to\n\n# CMake lists (strings with semicolon-separated elements).\n",
        "Line" : 49,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Tell MASM to create SAFESEH-compatible object files on Win32.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Bind some variables to useful paths.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If no build type is specified, default to RelWithDebInfo\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Enable MAXOSX_RPATH by default\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Enable cmake's testing infrastructure\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Enable folders when generating Visual Studio solutions\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Put executables/DLLs in the <build>/bin directory.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# This is a hack around the fact that CMake doesn't allow generator expressions in INSTALL_RPATH.\n\n# This means that platforms that need an RPATH but have multi-configuration generators (i.e. Xcode)\n\n# can't install the shared libraries into a configuration-dependent directory, so only one\n\n# configuration may be installed at a time.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If MSVC LTO is enabled, remove the /INCREMENTAL option from the link flags to avoid link warnings.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Install Include/WAVM to <install root>/include/WAVM\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Generate Inline/Config.h in the build/install directories from Inline/Config.h.in in the source\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# A function that sets compile options that are common to all WAVM targets.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add the WAVM public include directory.\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# Target C++11.\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Compile files in parallel.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Compile with all warnings, and fatal warnings.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Disable warnings\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# conditional expression is constant\n\n# unreferenced formal parameter\n\n# assignment operator could not be generated\n\n# 'inline': used more than once\n\n# cast truncates constant value\n\n# structure was padded due to alignment specifier\n\n# unary minus operator applied to unsigned type, result still unsigned\n",
        "Line" : 149,
        "CharPositionInLine" : 59
      },
      "25" : {
        "Text" : "# /DELAYLOAD:... ignored; no imports found from ...\n",
        "Line" : 157,
        "CharPositionInLine" : 63
      },
      "26" : {
        "Text" : "# Compile with all warnings and fatal warnings\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Disable RTTI to allow linking against a build of LLVM that was compiled without it.\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Ensure that even static libraries are relocatable so they can be linked into a .so\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Optionally enable the undefined-behavior sanitizer.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Optionally enable the thread sanitizer.\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Optionally enable Clang's libfuzzer.\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Link with the static sanitizer runtimes instead of the shared sanitize runtimes on GCC.\n\n# This matches the default behavior for Clang.\n",
        "Line" : 201,
        "CharPositionInLine" : 3
      },
      "33" : {
        "Text" : "# Don't eliminate frame pointers: this makes thread forking work robustly if one of the\n\n# sanitizers requires a frame pointer, and makes ASAN's stack trace on malloc much better\n\n# without using the slow libunwind path.\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Install RelWithDebInfo binaries to bin, and all others to bin/WAVM/config\n",
        "Line" : 226,
        "CharPositionInLine" : 3
      },
      "35" : {
        "Text" : "# Older versions of CMake can't handle target_link_libraries on the monolithic WAVM library\n\n# when invoked from a source directory other than the root directory where the WAVM target is\n\n# defined. To get around this, accumulate the libraries this component needs to link with in an\n\n# internal config variable, which seems to be the closest thing CMake has to a global variable.\n\n# After processing all library components, this root directory CMakeLists.txt invokes\n\n# target_link_libraries with the accumulated libraries.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# CMake also scopes the effect of set_source_files_properties to targets created by the same list\n\n# file, so to set the header-only flag on source files in the WAVM monolib, it's necessary to\n\n# accumulate the set of header-only files in a global variable while processing subdirectory list\n\n# files, and then set the source file properties at the end of this list file.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Translate the relative source and header file paths to absolute paths.\n\n# Older versions of CMake will use the source directory where a target is defined as the root\n\n# for relative paths in the target's sources, which breaks when adding the source files to The\n\n# monolithic WAVM library defined in the root directory.\n",
        "Line" : 252,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Directly add the component's source files to the monolithic WAVM library.\n",
        "Line" : 265,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# Add the non-compiled source files to a global list that will be flagged as \"header-only\".\n",
        "Line" : 268,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# Add the libraries this component depends on to the global list of libraries to link the\n\n# monolithic WAVM library with.\n",
        "Line" : 272,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# Add the component's include directories and definitions.\n",
        "Line" : 279,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Set up the component's API definitions.\n",
        "Line" : 283,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# Add the executable's link libraries.\n",
        "Line" : 304,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Ignore the PRIVATE_LIB_COMPONENTS and PUBLIC_LIB_COMPONENTS, and just link the executable with\n\n# the monolithic WAVM library.\n",
        "Line" : 308,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# Create a WAVM library that will include all WAVM library components.\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Process the CMake scripts in subdirectories.\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Add the library dependencies accumulated from the various library components as link dependencies\n\n# of the monolithic WAVM library.\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Set the non-compiled source files accumulated from the various library components as header-only,\n\n# which includes the files in IDE projects, but doesn't compile them.\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Create a CMake package in <build>/lib/cmake/WAVM containing the WAVM library targets.\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Create a CMake package in <install root>/lib/cmake/WAVM containing the WAVM library targets.\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Create a dummy target to hold various files in the project root\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Add an option to include the Wavix runtime in the WAVM build.\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 53
    },
    "Examples/CMakeLists.txt" : {
      "ObjectId" : "39bed8379be14ffdf60fd82f1c24bdeacd0ee9b0",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Include/WAVM/Inline/CMakeLists.txt" : {
      "ObjectId" : "5e311c6b001d29bdbcdfc6bbc97b5a2585b791f1",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Include/WAVM/Inline/xxhash/CMakeLists.txt" : {
      "ObjectId" : "c3a46d091d2026dc383aa7c247aca6273363ba5a",
      "LastModified" : "2018-09-18T21:01:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/Emscripten/CMakeLists.txt" : {
      "ObjectId" : "517823d646abcc188670402e91eaa3721d4983c9",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/IR/CMakeLists.txt" : {
      "ObjectId" : "6bd6ee6e82e4bfcc87273dda91fa731625f14ea0",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/LLVMJIT/CMakeLists.txt" : {
      "ObjectId" : "38afa0905f4e926f01386b72079935ccdbb213ea",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the LLVM libraries to link with.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create the LLVMJIT target.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Lib/Logging/CMakeLists.txt" : {
      "ObjectId" : "55c46760a48cab25ed99cc01a38e3a388967437f",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/NFA/CMakeLists.txt" : {
      "ObjectId" : "b72b4c55db0b95162af2c3c69e348e60a8f83d16",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/Platform/CMakeLists.txt" : {
      "ObjectId" : "b983c38072ebb473c75ac1e2c736269c436a81f9",
      "LastModified" : "2019-04-01T23:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Using if(CMAKE_SYSTEM_NAME STREQUAL Wavix) doesn't work because Wavix is interpreted as a\n\n# reference to the Wavix target in this project.\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# This can't be set in the WAVMUnwind target's public include directories without adding the\n\n# libunwind headers to the install, so just set it manually for the Platform component.\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "Lib/RegExp/CMakeLists.txt" : {
      "ObjectId" : "dd00f58f77ea7eb4c24a3311fb89c4294dcb1fc8",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/Runtime/CMakeLists.txt" : {
      "ObjectId" : "74af56343ef3fd8d3c4ecb5d84ffb43e32684826",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/ThreadTest/CMakeLists.txt" : {
      "ObjectId" : "0a5a3907a2448281a88fa1dcefe0ab8f2543f795",
      "LastModified" : "2019-03-19T03:29:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/WASI/CMakeLists.txt" : {
      "ObjectId" : "d7d15fba9229dffcd31baaa683c1aeb815331715",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/WASM/CMakeLists.txt" : {
      "ObjectId" : "2a600675fee1a1eb145b46ac0f0d218d2511c632",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/WASTParse/CMakeLists.txt" : {
      "ObjectId" : "186c35eafec574bc98217515c377a71dabc919a7",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/WASTPrint/CMakeLists.txt" : {
      "ObjectId" : "9ae7baae7b80567dd6faa0d0f63c840e89c7022c",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Lib/wavm-c/CMakeLists.txt" : {
      "ObjectId" : "50d4766c1b22e1158792fa88ee4a78f715bb2b58",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Programs/wavm-as/CMakeLists.txt" : {
      "ObjectId" : "7b04c4108a6f15d796a0b52ca1a1be8c6f270257",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Programs/wavm-compile/CMakeLists.txt" : {
      "ObjectId" : "323550ae561e9634cbdffdb4198e5c92032c3f49",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Programs/wavm-disas/CMakeLists.txt" : {
      "ObjectId" : "8ba1543341cd94f4ebca262d58898aae6924aded",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Programs/wavm-run-wasi/CMakeLists.txt" : {
      "ObjectId" : "0a322a253767b24474a55c08dbf04d4c26395ceb",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Programs/wavm-run/CMakeLists.txt" : {
      "ObjectId" : "c9b8c944b3743dd0163c9bfc36194839eae2f8d4",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Test/Benchmarks/CMakeLists.txt" : {
      "ObjectId" : "169a282df761871f00a2bbce6610cdc29034b5dd",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Test/CMakeLists.txt" : {
      "ObjectId" : "6ac7983ad2b151f46c65bd0e47b7e1f6fba4d7ea",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper functions for adding WAST test scripts.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Test/Containers/CMakeLists.txt" : {
      "ObjectId" : "82d2f60540799f6fd9ea4bbcebc8e0dfe21757df",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Test/DumpTestModules/CMakeLists.txt" : {
      "ObjectId" : "63b4faf50220042b73221646adde84336032bec1",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Test/RunTestScript/CMakeLists.txt" : {
      "ObjectId" : "a465881d35a1ac2dc4ffad9529bbd82f19544f55",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Test/fuzz/CMakeLists.txt" : {
      "ObjectId" : "0a1b54995e859260510b855ae585fd74504365ab",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Test/spec/CMakeLists.txt" : {
      "ObjectId" : "c965f16b2f4751a83e745a48a71af735b78bb959",
      "LastModified" : "2019-04-05T23:20:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#skip-stack-guard-page.wast\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "Test/wavm-c/CMakeLists.txt" : {
      "ObjectId" : "032d1f900bfef72afe760260c7854d0d9b1d8c44",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/dtoa/CMakeLists.txt" : {
      "ObjectId" : "15e5df2a06e72d8c898f537f1039dc6d3c6b0d86",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/libunwind/CMakeLists.txt" : {
      "ObjectId" : "a997959afaf1fc92386819a8853332e254894be8",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# When using static linking for the WAVM libraries, the WAVMUnwind library needs to be\n\n# installed. Otherwise, it will just be linked into the WAVM .so/.dylib files.\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# Target C++11.\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Compile as a static library, but use -fPIC to make sure it can be linked into a shared object.\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# disable warning: 'variable' may be used uninitialized in this function\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# disable warning: 'variable' set but not used\n",
        "Line" : 61,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "ThirdParty/libunwind/cmake/Modules/HandleCompilerRT.cmake" : {
      "ObjectId" : "9bf88bb4c279e421e982a56adc052517acbc47df",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/libunwind/cmake/config-ix.cmake" : {
      "ObjectId" : "2d4da649f6dafb94b7c5b29b2b6260354b5d5fa0",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libunwind is built with -nodefaultlibs, so we want all our checks to also\n\n# use this option, otherwise we may end up with an inconsistency between\n\n# the flags we think we require during configuration (if the checks are\n\n# performed without -nodefaultlibs) and the flags that are actually\n\n# required during compilation (which has the -nodefaultlibs). libc is\n\n# required for the link to go through. We remove sanitizers from the\n\n# configuration checks to avoid spurious link errors.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mingw64 requires quite a few \"C\" runtime libraries in order for basic\n\n# programs to link successfully with -nodefaultlibs.\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Check compiler flags\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ThirdParty/libunwind/docs/CMakeLists.txt" : {
      "ObjectId" : "c226f2f5b8e8d3d8f9c192c08f35d0ff581cf87c",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/libunwind/src/CMakeLists.txt" : {
      "ObjectId" : "5c7a4c7309faf7c6ac8ea49ef5f88c3845bb8d1f",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Force them all into the headers dir on MSVC, otherwise they end up at\n\n# project scope because they don't have extensions.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Generate library list.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup flags.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add a object library that contains the compiled source files.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build the shared library.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build the static library.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add a meta-target for both libraries.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "ThirdParty/libunwind/test/CMakeLists.txt" : {
      "ObjectId" : "97917b820a396fbb6fe40fe03aa22d7fa89b4694",
      "LastModified" : "2019-04-03T00:04:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for add_lit_testsuite\n",
        "Line" : 1,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 38
  },
  "ElapsedTime" : 1590
}