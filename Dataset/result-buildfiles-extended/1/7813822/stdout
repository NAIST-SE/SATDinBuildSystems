{
  "Repository" : "7813822",
  "Revision" : "HEAD",
  "ObjectId" : "30d336d68213de7d07a2c9414f43d25564a37625",
  "CommitTime" : "2019-04-10T15:45:34Z",
  "Files" : {
    "Diminuto/Makefile" : {
      "ObjectId" : "0d50bc330bb844819d728ac367db20223c2b7605",
      "LastModified" : "2019-04-10T15:05:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# vi: set ts=4 shiftwidth=4:\n\n# Copyright 2008-2019 Digital Aggregates Corporation\n\n# Licensed under the terms in LICENSE.txt\n\n# author:Chip Overclock\n\n# mailto:coverclock@diag.com\n\n# https://github.com/coverclock/com-diag-diminuto\n\n# \"Chip Overclock\" is a registered trademark.\n\n# \"Digital Aggregates Corporation\" is a registered trademark.\n\n#\n\n#\tmake all\t\t\t\t\t\t# Build libraries, unit tests, executable programs.\n\n#\tmake clean\t\t\t\t\t\t# Remove OUT directory for current TARGET.\n\n#\tmake pristine\t\t\t\t\t# Remove all OUT directories.\n\n#\tsudo make install\t\t\t\t# Install libraries, binaries, headers under /usr/local.\n\n#\t. out/host/bin/setup\t\t\t# Sets up PATH and LD_LIBRARY_PATH after build.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########## Customizations\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# API changes that may require that applications be modified.\n",
        "Line" : 25,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# Only functionality or features added with no legacy API changes.\n\n# Only bugs fixed with no API changes or new functionality.\n",
        "Line" : 26,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Disclaimer: the only target that I routinely build and test for is \"host\", my\n\n# X86_64 Ubuntu build server. While Diminuto has been built, tested, and used\n\n# on all of these other targets at one time or another, the current version has\n\n# only been tested on whatever project I'm currently working on. The targets\n\n# listed below are more or less in chronological order, from earliest to latest.\n\n# The hardware for some of these targets isn't even available to me anymore.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#TARGET\t\t\t\t:=\tarroyo# Build for the AT91RM9200-EK running roll-your-own.\n\n#TARGET\t\t\t\t:=\tbetty# Build for the Raspberry Pi 2 running Raspbian.\n\n#TARGET\t\t\t\t:=\tcascada# Build for the BeagleBoard C4 running Angstrom.\n\n#TARGET\t\t\t\t:=\tcobbler# Build for the Raspberry Pi version B running Raspbian.\n\n#TARGET\t\t\t\t:=\tcontraption# Build for the BeagleBoard C4 running Android 2.2 but with glibc.\n\n#TARGET\t\t\t\t:=\tcorset# Build for CyanogenMod 10.2 on a Nexus-7 running Android/bionic.\n\n#TARGET\t\t\t\t:=\tdiminuto# Build for the AT91RM9200-EK running BuildRoot.\n\n#TARGET\t\t\t\t:=\tdumpling# Build for the Raspberry Pi Version B running buildroot/uClibc.\n\n#TARGET\t\t\t\t:=\thost1204# Build for the x86 running Ubuntu 12.04 LTS.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build for the x86_64 running Ubuntu 14.04 LTS.\n",
        "Line" : 45,
        "CharPositionInLine" : 17
      },
      "7" : {
        "Text" : "#TARGET\t\t\t\t:=\torchard# Mac OS X 10.9.5 running on a Mac Mini \"late 2012\".\n\n#TARGET\t\t\t\t:=\tpetticoat# Build inside cros_sdk chroot for the x86-generic running Chromium OS.\n\n#TARGET\t\t\t\t:=\tschoolmarm# Windows 8.1 Pro running Cygwin 2.850.\n\n#TARGET\t\t\t\t:=\tstampede# Build for the Nvidia Jetson TK1 running Ubuntu 14.04.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Some civilian, defense, or intelligence agencies (e.g. the U.S. Federal\n\n# Aviation Administration or FAA) require that software builds for safety\n\n# critical or national security applications generate exactly the same binary\n\n# images bit for bit if the source code has not changed. (This is theoretically\n\n# a more stringent requirement than requiring that checksums or cryptographic\n\n# hashes are the same, although in practice it is the same thing.) This allows\n\n# agency inspectors to verify the integrity of the binary software images. This\n\n# makes embedding build timestamps inside compiled translation units problematic.\n\n# Avoid using the built-in C macros __DATE__ and __TIME__, and consider using the\n\n# faketime(1) utility to spoof the system time during builds.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This stuff all gets embedded in the vintage application.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is where I store collateral associated with projects that I have\n\n# downloaded off the web and use without alteration. Examples: Linux kernel\n\n# sources, toolchains, etc.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########## Directories\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Archive files for static linking\n\n# Utilities or stripped binaries\n\n# Build configuration files\n\n# Generated dependencies and other make files\n\n# Documentation\n\n# Loadable kernel modules\n\n# Miscellaneous files\n\n# Functional tests\n\n# Generated files\n\n# Header files\n\n# Shared objects for dynamic linking\n\n# Loadable user modules\n\n# C object modules\n\n# C++ object modules\n\n# Build artifacts\n\n# Library components\n\n# Unstripped executable binaries\n\n# Kernel module build directory\n\n# Compressed tarballs\n\n# Unit tests\n",
        "Line" : 81,
        "CharPositionInLine" : 17
      },
      "13" : {
        "Text" : "########## Configuration\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########## Configuration Makefile\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "########## Commands and Option Flags\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#CPPFLAGS\t\t\t:=\t$(CDEFINES) -I $(SRC_DIR) -I $(INC_DIR) -I $(OUT)/$(INC_DIR) $(CPPARCH)\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#CFLAGS\t\t\t\t:=\t$(CARCH) -g -fprofile-arcs -ftest-coverage\n\n#CFLAGS\t\t\t\t:=\t$(CARCH) -O3\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#CXXFLAGS\t\t\t:=\t$(CXXARCH) -g -fprofile-arcs -ftest-coverage\n\n#CXXFLAGS\t\t\t:=\t$(CXXARCH) -O3\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#BROWSER\t\t\t:=\tepiphany\n\n#BROWSER\t\t\t:=\tevince\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "########## Build Artifacts\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "########## Main Entry Points\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# On the Raspberry Pi, this is what worked for me:\n\n# sudo apt-get install raspberrypi-kernel-headers\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "########## Packaging and Distribution\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Useful for copying the executables over to another target for which they were\n\n# cross compiled.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Useful for given someone a tarball of the actual source distribution that\n\n# is guaranteed to at least build.\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Useful for copying a tarball of the current development source base to a\n\n# target for which there is no cross compiler toolchain.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Useful for backing a complete backup before doing something that may turn\n\n# out to be profoundly stupid, like running a transformative script across all\n\n# the source files. Sure, your local and remote repos should save you, but what\n\n# if they didn't?\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "########## Target C Libraries\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "########## Target C++ Libraries\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "########## Target Unstripped Binaries\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "########## Target Aliases\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "########## Unit Tests\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Generally if the unit tests work they exit with an exit code of zero;\n\n# otherwise they exit with something else (or core dump). But left to their\n\n# own devices, the unit tests aren't very chatty. If you want to see more log\n\n# output from them, you can tune the logging using the environmental variable\n\n# COM_DIAG_DIMINUTO_LOG_MASK. For example, this bash command turns on\n\n# everything.\n\n#\n\n#\texport COM_DIAG_DIMINUTO_LOG_MASK=0xffff\n\n#\n\n# The Diminuto logging system sends log messages to the system log (syslog)\n\n# when the emitter is a kernel-space module or the emitting process is a child\n\n# of process 1 (that is, the emitting process is a daemon). Unfortunately\n\n# different GNU/Linux distributions write syslog messages to different places.\n\n# My current Ubuntu server uses \"/var/log/syslog\". Your mileage may vary.\n\n#\n\n# Some platforms may route syslog messages from processes to the kernel log\n\n# buffer in memory by writing them to \"/dev/kmesg\". You can adjust the level of\n\n# logging used by the kernel. Level 8 means \"everything\".\n\n#\n\n#\techo 8 > /proc/sys/kernel/printk\n\n#\n\n# The kernel log memory buffer can be displayed by using the \"dmesg\" utility.\n\n#\n\n# Even though the Android bionic library supports the openlog(3) and syslog(3)\n\n# functions, syslog appears to be broken in the CyanogenMod 10.2 that I use.\n\n# The library expects to send the log message as a datagram to a UNIX domain\n\n# socket at \"/dev/kmsg\". But since that's a character device driver as described\n\n# above, any attempt to connect(2) to it results in the connection being refused\n\n# (you can use strace(1) to see this). This smells like a BSD (bionic) versus\n\n# Linux (kernel) incompatibility.\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "########## Functional Tests\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Most (perhaps all) functional tests require a special hardware test\n\n# fixture to run them. That's why they are functional tests instead of\n\n# unit tests.\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "########## Generated Source Files\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# For embedding in a system where it can be executed from a shell.\n\n#\n\n# The major.minor.build is emitted to standard error, a bunch more\n\n# metadata to standard output. Hence, they can be redirected to separate\n\n# files.\n\n#\n\n# Some of the information in this binary executable may be sensitive, for\n\n# example, the Directory or the User. That's why it's in a form that doesn't\n\n# have to be distributed with the product, unlike the shared objects.\n\n#\n\n# This program also serves as a unit test, so be careful about removing stuff\n\n# from it that looks redundant or unused.\n\n#\n\n# The stdout stream from vintage is designed so that you can source it\n\n# into a variety of tools including bash. e.g. eval $(vintage 2> /dev/null) .\n\n#\n\n# NOTE: in the generated C code below, whether you should have \\\\n or \\n in the\n\n# echo statements seems to depend on what version of make you are running. I've\n\n# tried to automate this - having this Makefile determine your make version - but\n\n# have not yet discovered the fu necessary to make that work reliably.\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# For embedding in an application where it can be interrogated or displayed.\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# For embedding in the library archive and shared object.\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# For embedding in an application where it can be interrogated or displayed.\n",
        "Line" : 598,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For embedding in the library archive and shared object.\n",
        "Line" : 607,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# For embedding in an application where it can be interrogated or displayed.\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# For embedding in the library archive and shared object.\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# For executing from the command line during testing.\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# For generating a setup script for a bash shell (for example, \"bash generate > setup\").\n\n# (Because the Android bash doesn't seem to implement BASH_ARGV.)\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# For generating a setup script for a bash shell (for example, \"bash generate > setup\").\n\n# (Because the Android bash doesn't seem to implement BASH_ARGV.)\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# For sourcing into a bash shell (for example, \". setup\").\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# For sourcing into a bash shell (for example, \". setup\").\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "########## User-Space Loadable Modules\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# These archives will be linked into the shared object in their entirety.\n",
        "Line" : 663,
        "CharPositionInLine" : 19
      },
      "51" : {
        "Text" : "########## Kernel-Space Loadable Modules\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Was your kernel built with CONFIG_MODULES=y?\n\n# Especially problematic in Android kernels.\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# e.g. DRIVERS=modules_prepare or DRIVERS=mrproper or DRIVERS=menuconfig\n",
        "Line" : 704,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "########## Helpers\n",
        "Line" : 708,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "########## Documentation\n",
        "Line" : 730,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# When I upgraded to Ubuntu 14.04, a pile of latex macros used by the Doxygen\n\n# PDF generation were missing. I was never able to figure out what (if any)\n\n# Ubuntu package they might have been in (although I did install a boatload\n\n# of packages for TeX and Latex). In the end I just kept rerunning the make\n\n# step below, examining the refman.log output file in the output directory,\n\n# and figuring out what Latex macro packages from CTAN to manually download,\n\n# install in a subdirectory of /usr/share/texmf/tex/latex, and then run texhash.\n\n# It was very tedious. Here's a list of what I installed.\n\n# https://www.ctan.org/tex-archive/macros/latex/contrib/xtab\n\n# https://www.ctan.org/tex-archive/macros/latex/contrib/multirow\n\n# https://www.ctan.org/pkg/sectsty\n\n# https://www.ctan.org/tex-archive/macros/latex/contrib/tocloft\n",
        "Line" : 744,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "########## Diffs and Patches\n",
        "Line" : 778,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "########## Rules\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "########## Dependencies\n",
        "Line" : 814,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "########## Installation\n",
        "Line" : 861,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "########## Sanity\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 62
    },
    "Makefile" : {
      "ObjectId" : "3c23111f8b58163e07bb51849c7c83df32031790",
      "LastModified" : "2019-02-14T16:37:07Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# vi: set ts=4 shiftwidth=4:\n\n# Copyright 2017-2019 Digital Aggregates Corporation\n\n# author:Chip Overclock\n\n# mailto:coverclock@diag.com\n\n# https://github.com/coverclock/com-diag-diminuto\n\n# \"Chip Overclock\" is a registered trademark.\n\n# \"Digital Aggregates Corporation\" is a registered trademark.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 724
}