{
  "Repository" : "20594511",
  "Revision" : "HEAD",
  "ObjectId" : "6ecef423cf557b71fdecceac8a9dc169052dae92",
  "CommitTime" : "2019-04-13T15:21:40Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6a473ac305d3ee4b14a87a28f4c176bf433a0413",
      "LastModified" : "2019-03-22T13:54:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Documentation: Some useful options:\n\n# -DCMAKE_CXX_COMPILER:STRING=clang++   -DCMAKE_C_COMPILER:STRING=clang .\n\n# -DCMAKE_BUILD_TYPE:STRING=Debug (default Release)\n\n# -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON (default OFF)\n\n# -DBUILD_TESTING=ON (default OFF) for python tests\n\n# -DBUILD_CPPUNIT_TEST=ON (default OFF) for unit tests\n\n# -DUSE_DUAL_ABI=ON (default OFF)  https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html\n\n# -D Boost_NO_SYSTEM_PATHS=true (default false) -D BOOST_ROOT=PATH_where_to_find_boost\n\n# -D AIROUTER=true (default false)\n\n# -D JPSFIRE=true (default false)\n\n#--------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Options for  jpscore\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# test units & python tests are not generated.\n",
        "Line" : 65,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : "# To generate a compilation database \"compilation_commands.json\" for clang_check\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#  set (CMAKE_BUILD_TYPE Release)\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#------------------ set important directories --------------------\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Debug messages\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ========================== build platform ==========================\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ZLIB_WINAPI)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# no need for this msg. It comes from cmake.findgit()\n",
        "Line" : 129,
        "CharPositionInLine" : 24
      },
      "11" : {
        "Text" : "# the commit's SHA1, and whether the building workspace was dirty or not\n\n# describe --match=NeVeRmAtCh --always --tags --abbrev=40 --dirty\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# branch\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# the date of the commit\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# the subject of the commit\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# string(REGEX REPLACE \"\\#\" \"\" GIT_COMMIT_SUBJECT ${GIT_COMMIT_SUBJECT})\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# even if not in a git repository we need to define these\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#http://stackoverflow.com/questions/1487752/how-do-i-instruct-cmake-to-look-for-libraries-installed-by-macports\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Detect if the \"port\" command is valid on this system; if so, return full path\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# \"/opt/local/bin/port\" doesn't have libs, so we get the parent directory\n",
        "Line" : 189,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# \"/opt/local/bin\" doesn't have libs, so we get the parent directory\n",
        "Line" : 191,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# \"/opt/local\" is where MacPorts lives, add `/lib` suffix and link\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# SET(CMAKE_SYSTEM_NAME Darwin)\n\n# # Add MacPorts\n\n# INCLUDE_DIRECTORIES(/opt/local/include)\n",
        "Line" : 196,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# LINK_DIRECTORIES(/opt/local/lib)\n",
        "Line" : 200,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# Recommendation, also add a \"brew --prefix\" custom command to detect a homebrew build environment\n",
        "Line" : 203,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# in case boost is a non-default location\n\n# SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} \"C:/win32libs/boost\")\n\n# SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} \"C:/win32libs/boost/lib\")\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# find the correct OpenMP flag\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fopenmp\")\n\n# somehow find_package(openmp) does not work properly with clang\n",
        "Line" : 234,
        "CharPositionInLine" : 8
      },
      "29" : {
        "Text" : "#statically link all gcc stuffs\n\n#set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -static\")\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#boost\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#CGAL\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# for AI router\n",
        "Line" : 256,
        "CharPositionInLine" : 32
      },
      "33" : {
        "Text" : "# test all cpp-files in Utest\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Name for custom target.\n",
        "Line" : 271,
        "CharPositionInLine" : 13
      },
      "35" : {
        "Text" : "# Name of the test driver executable that runs the tests.\n",
        "Line" : 272,
        "CharPositionInLine" : 22
      },
      "36" : {
        "Text" : "# NOTE! This should always have a ZERO as exit code\n\n# otherwise the coverage generation will not complete.\n",
        "Line" : 273,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# Name of output directory.\n",
        "Line" : 275,
        "CharPositionInLine" : 28
      },
      "38" : {
        "Text" : "#  file(GLOB test_py_files \"${CMAKE_TEST_DIR}/*/runtest*.py\")\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# add sources and headers\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#voronoi/VoronoiDiagramGenerator.cpp\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#floorfield\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#routing/ff_router/LocalFloorfieldViaFM.cpp\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#routing/ff_router/FFKit.cpp\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#floorfield\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#global_shortest\n",
        "Line" : 352,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "#general\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#quickest\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#Smoke router\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#floorfield\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#routing/ff_router/LocalFloorfieldViaFM.h\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#routing/ff_router/FFKit.h\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#floorfield\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#general\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#global_shortest\n",
        "Line" : 466,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#quickest\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#Smoke router\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#voronoi/VoronoiDiagramGenerator.h\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#AI router\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#AI router trips\n\n#routing/ai_router_trips/AIRouterTrips.cpp\n\n#routing/ai_router_trips/BrainStorage.cpp\n\n#routing/ai_router_trips/cognitiveMap/associations.cpp\n\n#routing/ai_router_trips/cognitiveMap/connection.cpp\n\n#routing/ai_router_trips/cognitiveMap/cognitivemap.cpp\n\n#routing/ai_router_trips/cognitiveMap/landmark.cpp\n\n#routing/ai_router_trips/cognitiveMap/region.cpp\n\n#routing/ai_router_trips/cognitiveMap/landmarknetwork.cpp\n\n#routing/ai_router_trips/cognitiveMap/internnavigationnetwork.cpp\n\n#routing/ai_router_trips/perception/visualsystem.cpp\n\n#routing/ai_router_trips/perception/visibleenvironment.cpp\n\n#routing/ai_router_trips/perception/cgalgeometry.cpp\n\n#routing/ai_router_trips/perception/sign.cpp\n\n#routing/ai_router_trips/Cortex.cpp\n",
        "Line" : 586,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#AI router\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#AI router trips\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# ----- add here 3th party\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# todo make this system\n",
        "Line" : 661,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# c++17 ----\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# link to lib filesystem\n",
        "Line" : 670,
        "CharPositionInLine" : 50
      },
      "66" : {
        "Text" : "#message(WARNING \"I don't know how to link filesystem with ${CMAKE_CXX_COMPILER_ID}\")\n",
        "Line" : 673,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "#add_library ( core SHARED ${source_files} )\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# force all boost libraries to dynamic link (we already disabled\n\n# autolinking, so I don't know why we need this, but we do!)\n",
        "Line" : 686,
        "CharPositionInLine" : 8
      },
      "69" : {
        "Text" : "# add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n",
        "Line" : 689,
        "CharPositionInLine" : 8
      },
      "70" : {
        "Text" : "# suppress warnings in boost libraries with attribute SYSTEM\n",
        "Line" : 697,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "#target_link_libraries(jpscore ${MPFR_LIBRARIES})\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "#message(STATUS \"CGAL_LIB_VERSION: \" ${CGAL_LIB_VERSION})\n",
        "Line" : 729,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "#link_directories(${CGAL_LIBRARIES_DIR})\n\n#link_directories(${)\n",
        "Line" : 731,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "#message(STATUS \"CGAL_3rdparty\" ${CGAL_3RD_PARTY_LIBRARIES})\n\n#target_link_libraries(jpscore ${CGAL_LIBRARIES})\n",
        "Line" : 734,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "##if (JPS_AS_A_SERVICE)\n\n#find_package(Protobuf REQUIRED)\n\n#set(GRPC_DIR \"${CMAKE_SOURCE_DIR}/cmake_modules/\")\n\n#find_package(GRPC REQUIRED)\n\n#file(GLOB ProtoFiles \"${CMAKE_SOURCE_DIR}/hybrid/*.proto\")\n\n#PROTOBUF_GENERATE_CPP(ProtoSources ProtoHeaders ${ProtoFiles})\n\n#PROTOBUF_GENERATE_GRPC_CPP(ProtoGRPCSources ProtoGRPCHeaders ${ProtoFiles})\n\n#\n\n#include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#set(hybrid_source_files\n\n#        ${ProtoSources}\n\n#        ${ProtoGRPCSources}\n\n#        hybrid/JPSserver.cpp\n\n#        hybrid/HybridSimulationManager.cpp\n\n#        hybrid/Latches.cpp\n\n#        hybrid/GeometryFromProtobufLoader.cpp\n\n#        hybrid/PedDistributionFromProtobufLoader.cpp\n\n#        hybrid/IniFromProtobufLoader.cpp\n\n#        hybrid/IniFileWriter.cpp hybrid/SimObserver.cpp hybrid/SimObserver.h)\n\n#\n\n#set(hybrid_header_files\n\n#        ${ProtoHeaders}\n\n#        ${ProtoGRPCHeaders}\n\n#        hybrid/JPSserver.h\n\n#        hybrid/HybridSimulationManager.h\n\n#        hybrid/Latches.h\n\n#        hybrid/GeometryFromProtobufLoader.h\n\n#        hybrid/PedDistributionFromProtobufLoader.h\n\n#        hybrid/IniFromProtobufLoader.h\n\n#        hybrid/IniFileWriter.h)\n\n#add_library(hybrid STATIC ${hybrid_source_files})\n\n#target_link_libraries(hybrid grpc++ grpc protobuf dl)\n\n#target_link_libraries(core hybrid)\n\n##endif (JPS_AS_A_SERVICE)\n",
        "Line" : 749,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#----------------------------------------------------------------------\n\n# enable as many warnings as possible\n",
        "Line" : 784,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# issue all the warnings demanded by strict iso c and iso c++\n\n# set(warning_flags \"${warning_flags} -pedantic\")\n\n# treat warnings as errors\n\n#set(warning_flags \"${warning_flags} -Werror\")\n\n# definition shadows another\n\n#set(warning_flags \"${warning_flags} -Wshadow\")\n\n# do not issue warnings for system headers\n\n# set(warning_flags \"${warning_flags} -Wno-system-headers\")\n\n# overloaded virtual function has a different signature\n\n# set(warning_flags \"${warning_flags} -Woverloaded-virtual\")\n\n# make string constants const char*\n\n# set(warning_flags \"${warning_flags} -Wwrite-strings\")\n\n#----------------------------------------------------------------------\n\n#---------------------------- compiler -------------------------------\n\n# Initialize CXXFLAGS.\n",
        "Line" : 787,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#    set(CMAKE_CXX_FLAGS_RELEASE        \"${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG\")\n",
        "Line" : 805,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "#--------------------\n\n# if (APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n\n#     SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n\n#     SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n\n#     SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++\")\n\n#     SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++\")\n\n#     SET(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -stdlib=libc++\")\n\n# endif (APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n",
        "Line" : 808,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# #if (NOT CMAKE_GENERATOR MATCHES \"Xcode|Visual Studio\")\n\n# include(CheckCXXCompilerFlag)\n\n# CHECK_CXX_COMPILER_FLAG(\"-std=c++11\" COMPILER_SUPPORTS_CXX11)\n\n# CHECK_CXX_COMPILER_FLAG(\"-std=c++0x\" COMPILER_SUPPORTS_CXX0X)\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# if (COMPILER_SUPPORTS_CXX11)\n\n#     set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\n\n# elseif (COMPILER_SUPPORTS_CXX0X)\n\n#     set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++0x\")\n\n# else ()\n\n#     message(FATAL_ERROR \"The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.\")\n\n# endif ()\n\n#endif ()\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "#add_compile_options(cnpy PRIVATE \"/W4\" \"WX-\")\n",
        "Line" : 834,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "#---------------------\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# PGI ++ Flags\n\n# if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"PGI\")\n\n#     set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} --c++11 -Minform=inform\")\n\n# endif ()\n",
        "Line" : 872,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# ----------------------------- cTest ------------------------------------------\n",
        "Line" : 884,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# adds another build target, which is test for Makefile generators\n",
        "Line" : 890,
        "CharPositionInLine" : 19
      },
      "87" : {
        "Text" : "# adding Dart support\n",
        "Line" : 891,
        "CharPositionInLine" : 17
      },
      "88" : {
        "Text" : "# test if code compiles and runs default setting. Takes about 30 seconds\n",
        "Line" : 893,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# -- new clean geometry tests\n",
        "Line" : 904,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# message (STATUS \"Add python test: \" ${test} \" | test_src: \" ${PYTHON_EXECUTABLE} \" \" ${test_src})\n",
        "Line" : 925,
        "CharPositionInLine" : 12
      },
      "91" : {
        "Text" : "# set (test_parameters \"${CMAKE_SOURCE_DIR}\")\n\n# add_test(NAME flow  COMMAND \"${CMAKE_TEST_DIR}/testflow.py\" \"${test_parameters}\")\n",
        "Line" : 928,
        "CharPositionInLine" : 8
      },
      "92" : {
        "Text" : "# ------------- CPACK ------------------------------\n",
        "Line" : 944,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "#CPACK_NSIS_URL_INFO_ABOUT\n",
        "Line" : 965,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# install(FILES \"${Boost_INCLUDE_DIR}/../bin/boost_system-vc141-mt-x32-1_67.dll\"\n\n#         \"${Boost_INCLUDE_DIR}/../bin/boost_filesystem-vc141-mt-x32-1_67.dll\"\n\n#         \"${Boost_INCLUDE_DIR}/../bin/zlib1.dll\"\n\n#         DESTINATION bin\n\n#         COMPONENT applications)\n",
        "Line" : 974,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "#set(CPACK_PACKAGE_ICON \"${CMAKE_SOURCE_DIR}\\\\\\\\hw.bmp\")\n",
        "Line" : 986,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "#install(DIRECTORY \"${PROJECT_SOURCE_DIR}/demos/\" DESTINATION \"demos\")\n",
        "Line" : 990,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 97
    },
    "cmake_modules/CodeCoverage.cmake" : {
      "ObjectId" : "16c7e6f6affb6433e5674628901c912750ab36b3",
      "LastModified" : "2019-02-25T16:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 128,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 132,
        "CharPositionInLine" : 9
      },
      "10" : {
        "Text" : "# Setup target\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 159,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 170,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 174,
        "CharPositionInLine" : 9
      },
      "19" : {
        "Text" : "# Run tests\n",
        "Line" : 178,
        "CharPositionInLine" : 3
      },
      "20" : {
        "Text" : "# Running gcovr\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 188,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 194,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 23
    },
    "cmake_modules/grpc-config.cmake" : {
      "ObjectId" : "0fd17f787d330a2df88e6c6ff20e3f3456b7d035",
      "LastModified" : "2019-02-25T16:37:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get full path to plugin\n",
        "Line" : 22,
        "CharPositionInLine" : 46
      },
      "1" : {
        "Text" : "# This variable is common for all types of output.\n",
        "Line" : 30,
        "CharPositionInLine" : 42
      },
      "2" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 3
  },
  "ElapsedTime" : 2083
}