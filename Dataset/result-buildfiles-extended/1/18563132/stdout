{
  "Repository" : "18563132",
  "Revision" : "HEAD",
  "ObjectId" : "748268f9a11f6473cfeb55827459cea1e1d7b2d5",
  "CommitTime" : "2019-04-10T16:15:55Z",
  "Files" : {
    "rotors_comm/CMakeLists.txt" : {
      "ObjectId" : "8babec8c4b2bf05d0b0f679786e428ce24185d59",
      "LastModified" : "2016-06-19T14:21:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Declare the service files to be built\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rotors_control/CMakeLists.txt" : {
      "ObjectId" : "e42c7e86d7ea7a485edfccf0774c35dded327e34",
      "LastModified" : "2018-12-06T18:00:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_description/CMakeLists.txt" : {
      "ObjectId" : "61b565ad93ef06a6c9adefd44e8422cf20f919bc",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_evaluation/CMakeLists.txt" : {
      "ObjectId" : "0287c2c4d981a07e252b0591756e5cd728495e96",
      "LastModified" : "2016-06-19T14:21:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo/CMakeLists.txt" : {
      "ObjectId" : "de8c465533c8341c4bc829b64d229426f20ee5d5",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------#\n\n# Generation of SDF models #\n\n#--------------------------#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need Gazebo version >= 3.0.0 to generate iris.sdf file\n\n# (gz sdf ... command needs to be available)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Creates shell commands to generate .sdf file\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "rotors_gazebo/models/grass_plane/CMakeLists.txt" : {
      "ObjectId" : "9e1ccdccbd8f16959b09501592eb2b9f1ff7adb0",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo/models/grass_plane/materials/CMakeLists.txt" : {
      "ObjectId" : "2e0c22a78d7a455a4ff8402fa69c9ffa80d396f3",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo/models/grass_plane/materials/scripts/CMakeLists.txt" : {
      "ObjectId" : "129ba7a20d3455317a6565302eceb497ecff1ea4",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo/models/grass_plane/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "d7547877dd3bdf2e50fbd9bd7d38f28861db28bb",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo/models/vrc_heightmap_1/CMakeLists.txt" : {
      "ObjectId" : "56ff22260035fbbd70f2e4d7c9a6a7c76a1ead5f",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo/models/vrc_heightmap_1/materials/CMakeLists.txt" : {
      "ObjectId" : "240c30121b437834759fe97d85f2e6bf276519de",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo/models/vrc_heightmap_1/materials/textures/CMakeLists.txt" : {
      "ObjectId" : "7649cf3cb019a5b198708fa6ffbe7f9ecf2a5fe3",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_gazebo_plugins/CMakeLists.txt" : {
      "ObjectId" : "1564017476a087066c8b3b2960a4b81173266b52",
      "LastModified" : "2018-12-13T10:13:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Optional arguments to be passed into file\n\n# ADDITIONAL_INCLUDE_DIRS           string  Additional include directories to add to every build target (PX4 uses this).\n\n# BUILD_MAVLINK_INTERFACE_PLUGIN    bool    Build mavlink_interface_plugin (requires mav dependency).\n\n# BUILD_OCTOMAP_PLUGIN              bool    Build the optical map plugin (requires Octomap).\n\n# BUILD_OPTICAL_FLOW_PLUGIN         bool    Build the optical flow plugin (requires OpenCV).\n\n# MAVLINK_HEADER_DIR                string  Location of MAVLink header files. If not provided, this CMakeLists.txt file will\n\n#                                               search the default locations (e.g. ROS) for them. This variable is only required\n\n#                                               if BUILD_MAVLINK_INTERFACE_PLUGIN=TRUE.\n\n# NO_ROS                            bool    Build without any ROS dependencies.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#if ( ${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR} )\n\n#  message( FATAL_ERROR \"In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt.\" )\n\n#endif()\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(STATUS \"rotors_gazebo_plugins CMakeLists.txt called.\")\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# =============================================================================================== #\n\n# ========================== SET DEFAULTS FOR PASSED-IN VARIABLES =============================== #\n\n# =============================================================================================== #\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add any additional include directories as specified by the calling process (either user or another CMake file).\n\n# ASL: Doesn't use this, catkin manages the mav_comm dependency\n\n# PX4: Provides include directory for mav_msgs, so that \"mav_msgs/default_topics.h\" can be found and used.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Initialise a list which will keep track of all targets\n\n# that need to be installed.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# =============================================================================================== #\n\n# ======================================== STATUS MESSAGES ====================================== #\n\n# =============================================================================================== #\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Specify C++11 standard\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Provides a compiler flag notifying the preprocessor about\n\n# the MAVLink Interface plugin build status\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# To enable assertions when compiled in release mode.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ============================================== #\n\n# =================== YAML_CPP ================= #\n\n# ============================================== #\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ============================================== #\n\n# =================== PROTOBUF ================= #\n\n# ============================================== #\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# protobuf required for publishing/subscribing to Gazebo\n\n# messages\n\n# WARNING: THIS MUST BE RUN AFTER PROTOBUF_IMPORT_DIRS IS SETUP\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Protobuf version check\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# After running this block of code,\n\n# we should have something similar to\n\n# GAZEBO_MSG_INCLUDE_DIRS = /usr/include/gazebo-7/gazebo/msgs\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get lists of all .proto files in the msgs directory\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Finally, generate the .cpp files from the .proto files\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Create a shared library of protobuf messages (.so extension on Linux platforms)\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This causes mav_msgs to be linked with every created library in this file from this\n\n# point forward.\n\n# NOTE: This is deprecated, should be using target_link_libraries instead\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ============================================== #\n\n# ==================== CATKIN ================== #\n\n# ============================================== #\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#CFG_EXTRAS rotors_gazebo_plugins.cmake\n",
        "Line" : 226,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "#CFG_EXTRAS rotors_gazebo_plugins.cmake\n",
        "Line" : 235,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Including GAZEBO_MSG_INCLUDE_DIRS here allows the .cpp files generated by custom .proto files to find\n\n# the .cpp/hpp files generated by the built-in Gazebo .proto files\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# =============================================================================================== #\n\n# ========================================= USER LIBRARIES ====================================== #\n\n# =============================================================================================== #\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# SORTED IN ALPHABETICAL ORDER (by \"plugin\" name, keep it this way!)\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#========================================= BAG PLUGIN ===========================================//\n\n# Entire GazeboBagPlugin is a heavy ROS dependency, and so rather than passing messages to\n\n# GazeboRosInterfacePlugin, this entire library is only included if ROS is present.\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#================================= CONTROLLER INTERFACE PLUGIN ==================================//\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#=================================== GEOTAGGED IMAGES PLUGIN ====================================//\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#===================================== FW DYNAMICS PLUGIN =======================================//\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#========================================= GPS PLUGIN ===========================================//\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#========================================= IMU PLUGIN ===========================================//\n",
        "Line" : 304,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "#========================================= NoisyDepth PLUGIN ======================================//\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# As the depth camera plugins .so's are not part of any cmake accessible library,\n\n# but the plugin path is path is, we iterate over all paths until plugin folder is found.\n",
        "Line" : 317,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#======================================== LIDAR PLUGIN ==========================================//\n",
        "Line" : 334,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#===================================== MAGNETOMETER PLUGIN ======================================//\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#================================= MAVLINK INTERFACE PLUGIN =====================================//\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# needed to ensure mavros is actually built by the time we call find_package\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# We need the MAVLink headers.\n",
        "Line" : 368,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# First, check to see if MAVLink headers were passed in as variable\n",
        "Line" : 372,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# fist check if there's a mavlink dir in the current workspace\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# If ROS is installed, we should be able to find them at the path below\n",
        "Line" : 384,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Check mavros version\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Note that this library includes TWO .cpp files.\n",
        "Line" : 406,
        "CharPositionInLine" : 3
      },
      "43" : {
        "Text" : "#==================================== MOTOR MODEL PLUGIN ========================================//\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#==================================== MULTIROTOR BASE PLUGIN ====================================//\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#====================================== OCTOMAP PLUGIN ==========================================//\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Conditionally built since it requires Octomap as a dependency\n\n# ASL uses this, PX4 does not\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#======================================= ODOMETRY PLUGIN ========================================//\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#===================================== OPTICAL FLOW PLUGIN ======================================//\n\n# Since the optical flow plugin depends on external code (PX4/OpticalFlow), this is\n\n# only conditionally built\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Check to make sure the correct Gazebo version is available.\n",
        "Line" : 459,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# OpticalFlow needs to be built and installed by the calling script, as it is very\n\n# unlikely that this package already exists on the users computer.\n\n# In PX4 this is done with a call to ExternalProject_Add().\n",
        "Line" : 466,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "#======================================= PRESSURE PLUGIN ========================================//\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#===================================== ROS INTERFACE PLUGIN =====================================//\n\n# This entire plugin is only built if ROS is a dependency\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#========================================= WIND PLUGIN ==========================================//\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# =============================================================================================== #\n\n# ======================================= EXTERNAL LIBRARIES ==================================== #\n\n# =============================================================================================== #\n",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# liftdrag_plugin is provided by Gazebo, but not guaranteed to be on system.\n\n# Naming has not been changed to match rotors convetion, due to this being an external\n\n# code soure.\n\n# Linux is not consistent with plugin availability, even on Gazebo 7\n\n#if(\"${GAZEBO_VERSION}\" VERSION_LESS \"7.0\")\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Install all targets that were defined above (some conditionally) and added to the\n\n# variable targets_to_install\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#message(FATAL_ERROR \"Reached EOF.\")\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 58
    },
    "rotors_gazebo_plugins/cmake/FindEigen.cmake" : {
      "ObjectId" : "8587367d331b5d266459f543d0e2c25b1b1dd3b0",
      "LastModified" : "2017-02-15T15:55:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\n\n# \n\n# CMake script for finding the Eigen library.\n\n# \n\n# http://eigen.tuxfamily.org/index.php?title=Main_Page\n\n# \n\n# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD\n\n# license.\n\n# \n\n# \n\n# Input variables:\n\n# \n\n# - Eigen_ROOT_DIR (optional): When specified, header files and libraries\n\n#   will be searched for in `${Eigen_ROOT_DIR}/include` and\n\n#   `${Eigen_ROOT_DIR}/libs` respectively, and the default CMake search order\n\n#   will be ignored. When unspecified, the default CMake search order is used.\n\n#   This variable can be specified either as a CMake or environment variable.\n\n#   If both are set, preference is given to the CMake variable.\n\n#   Use this variable for finding packages installed in a nonstandard location,\n\n#   or for enforcing that one of multiple package installations is picked up.\n\n# \n\n# Cache variables (not intended to be used in CMakeLists.txt files)\n\n# \n\n# - Eigen_INCLUDE_DIR: Absolute path to package headers.\n\n# \n\n# \n\n# Output variables:\n\n# \n\n# - Eigen_FOUND: Boolean that indicates if the package was found\n\n# - Eigen_INCLUDE_DIRS: Paths to the necessary header files\n\n# - Eigen_VERSION: Version of Eigen library found\n\n# - Eigen_DEFINITIONS: Definitions to be passed on behalf of eigen\n\n# \n\n# \n\n# Example usage:\n\n# \n\n#   # Passing the version means Eigen_FOUND will only be TRUE if a\n\n#   # version >= the provided version is found.\n\n#   find_package(Eigen 3.1.2)\n\n#   if(NOT Eigen_FOUND)\n\n#     # Error handling\n\n#   endif()\n\n#   ...\n\n#   add_definitions(${Eigen_DEFINITIONS})\n\n#   ...\n\n#   include_directories(${Eigen_INCLUDE_DIRS} ...)\n\n# \n\n###############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Backwards Compatibility\n",
        "Line" : 61,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 2
    },
    "rotors_gazebo_plugins/cmake/FindGlog.cmake" : {
      "ObjectId" : "fc559bfac667a38d2711705b45d0e9c3fcdbc3ef",
      "LastModified" : "2017-06-15T20:31:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2013 Google Inc. All rights reserved.\n\n# http://code.google.com/p/ceres-solver/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n\n# FindGlog.cmake - Find Google glog logging library.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# GLOG_FOUND: TRUE iff glog is found.\n\n# GLOG_INCLUDE_DIRS: Include directories for glog.\n\n# GLOG_LIBRARIES: Libraries required to link glog.\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# GLOG_INCLUDE_DIRS_HINTS: List of additional directories in which to\n\n#                          search for glog includes, e.g: /timbuktu/include.\n\n# GLOG_LIBRARY_DIRS_HINTS: List of additional directories in which to\n\n#                          search for glog libraries, e.g: /timbuktu/lib.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# GLOG_INCLUDE_DIR: Include directory for glog, not including the\n\n#                   include directory of any dependencies.\n\n# GLOG_LIBRARY: glog library, not including the libraries of any\n\n#               dependencies.\n\n# Called if we failed to find glog or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make results of search visible in the CMake GUI if glog has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use SEND_ERROR which emits an error\n\n# that prevents generation, but continues configuration.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# TODO: Add standard Windows search locations for glog.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Mac OS X\n",
        "Line" : 88,
        "CharPositionInLine" : 30
      },
      "6" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 89,
        "CharPositionInLine" : 35
      },
      "7" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 94,
        "CharPositionInLine" : 26
      },
      "8" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Mark internally as found, then verify. GLOG_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Glog does not seem to provide any record of the version in its\n\n# source tree, thus cannot extract version.\n\n# Catch case when caller has set GLOG_INCLUDE_DIR in the cache / GUI and\n\n# thus FIND_[PATH/LIBRARY] are not called, but specified locations are\n\n# invalid, otherwise we would report the library as found.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# TODO: This regex for glog library is pretty primitive, could it be better?\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Only mark internal variables as advanced if we found glog, otherwise\n\n# leave them visible in the standard GUI for the user to set manually.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "rotors_hil_interface/CMakeLists.txt" : {
      "ObjectId" : "cf36de1fdc5155483933f4d964715687388e815c",
      "LastModified" : "2017-06-15T20:31:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We still have to call catkin package for this to be a valid package,\n\n# even if empty.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "rotors_joy_interface/CMakeLists.txt" : {
      "ObjectId" : "f91094432be763520b956a9958354c331095f53d",
      "LastModified" : "2017-06-15T20:31:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rotors_simulator/CMakeLists.txt" : {
      "ObjectId" : "6c2440fabda99ca6ff9c70d1b0fc0d05dee409f1",
      "LastModified" : "2017-06-15T20:31:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rqt_rotors/CMakeLists.txt" : {
      "ObjectId" : "783d45b591c480b5e767a17dcf2a9001f4bf9952",
      "LastModified" : "2017-06-15T20:31:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We still have to call catkin package for this to be a valid package,\n\n# even if empty.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 19
  },
  "ElapsedTime" : 3635
}