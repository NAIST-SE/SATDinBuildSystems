{
  "Repository" : "7075935",
  "Revision" : "HEAD",
  "ObjectId" : "d467d0f9fb3373139504e22150a9c57973f278a2",
  "CommitTime" : "2018-08-25T16:12:25Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "7ea04015cee657713092649a47c41ba28d616288",
      "LastModified" : "2018-08-25T16:12:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_definitions(-DDATA_DIR=\"${PROJECT_SOURCE_DIR}/data/\")\n\n#add_definitions(-DUSR_DIR=\"${PROJECT_SOURCE_DIR}/usr/\")\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/chipmunk/CMakeLists.txt" : {
      "ObjectId" : "edeb4727030c048f90716efe5b9e6747afe2235e",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# don't use MAKE_BACKWARDS_COMPATIBILITY but policies instead\n",
        "Line" : 2,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# to change the prefix, run cmake with the parameter:\n\n#   -D CMAKE_INSTALL_PREFIX=/my/prefix\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# to change the build type, run cmake with the parameter:\n\n#   -D CMAKE_BUILD_TYPE=<build-type>\n\n# run \"cmake --help-variable CMAKE_BUILD_TYPE\" for details\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# other options for the build, you can i.e. activate the shared library by passing\n\n#   -D BUILD_SHARED=ON\n\n# to cmake. Other options analog\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sanity checks...\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# these need the static lib too\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# always use gnu99\n",
        "Line" : 50,
        "CharPositionInLine" : 51
      },
      "7" : {
        "Text" : "# extend release-profile with fast-math\n",
        "Line" : 54,
        "CharPositionInLine" : 68
      },
      "8" : {
        "Text" : "# extend debug-profile with -Wall\n",
        "Line" : 55,
        "CharPositionInLine" : 58
      },
      "CommentCount" : 9
    },
    "ext/chipmunk/src/CMakeLists.txt" : {
      "ObjectId" : "2e817ea7178d5690cadb5894b6ced454ba1a0eb9",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to compile the code as C++.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# set the lib's version number\n\n# But avoid on Android because symlinks to version numbered .so's don't work with Android's Java-side loadLibrary.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# need to explicitly link to the math library because the CMake/Android toolchains may not do it automatically\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "# Tell MSVC to compile the code as C++.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Sets chipmunk_static to output \"libchipmunk.a\" not \"libchipmunk_static.a\"\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# FIXME: change to PUBLIC_HEADER to allow building frameworks\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "ext/glfw/CMake/amd64-mingw32msvc.cmake" : {
      "ObjectId" : "705e251d3917f3787eca55aa3b3b0e303aee548f",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ext/glfw/CMake/i586-mingw32msvc.cmake" : {
      "ObjectId" : "393ddbda3019706378b25bb3d1abb634a3936866",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ext/glfw/CMake/i686-pc-mingw32.cmake" : {
      "ObjectId" : "9a46aef7b3457c8382fe16b3ad2e5a776f7f5f7d",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "#Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ext/glfw/CMake/i686-w64-mingw32.cmake" : {
      "ObjectId" : "9bd60936de2ed08f365601fbbfe404adbb37853a",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ext/glfw/CMake/modules/FindEGL.cmake" : {
      "ObjectId" : "0929c920de87f5c65f9bc504c334246752890608",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find EGL\n\n#\n\n# EGL_INCLUDE_DIR\n\n# EGL_LIBRARY\n\n# EGL_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/glfw/CMake/modules/FindGLESv1.cmake" : {
      "ObjectId" : "3c779295b35c89e2ade50706c1b72491f6c3f769",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find GLESv1\n\n#\n\n# GLESv1_INCLUDE_DIR\n\n# GLESv1_LIBRARY\n\n# GLESv1_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/glfw/CMake/modules/FindGLESv2.cmake" : {
      "ObjectId" : "0a2f810a9e2108fc6f970bcdd1d37d0bd92280dd",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find GLESv2\n\n#\n\n# GLESv2_INCLUDE_DIR\n\n# GLESv2_LIBRARY\n\n# GLESv2_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ext/glfw/CMake/x86_64-w64-mingw32.cmake" : {
      "ObjectId" : "84b2c701ec1d9e2ee0b72f3031cfccb4a81d205e",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "ext/glfw/CMakeLists.txt" : {
      "ObjectId" : "b6032a49ef301893cf5fa1cf46002224b5b747bd",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Set compiler specific flags\n\n#--------------------------------------------------------------------\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Detect and select backend APIs\n\n#--------------------------------------------------------------------\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Win32 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The DLL links against winmm; the static library loads it\n\n# That way, both code paths receive testing\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# HACK: When building on MinGW, WINVER and UNICODE need to be defined before\n\n# the inclusion of stddef.h (by glfw3.h), which is itself included before\n\n# win32_platform.h.  We define them here until a saner solution can be found\n\n# NOTE: MinGW-w64 and Visual C++ do /not/ need this hack.\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use WGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use X11 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Check for XRandR (modern resolution switching and gamma control)\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Check for XInput (high-resolution cursor motion)\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Backwards compatibility (bug in CMake 2.8.7)\n",
        "Line" : 218,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Check for Xf86VidMode (fallback gamma control)\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Backwards compatibility (see CMake bug 0006976)\n",
        "Line" : 234,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Check for Xkb (X keyboard extension)\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use GLX for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check for dlopen support as a fallback\n",
        "Line" : 283,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use EGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Cocoa for window creation and NSOpenGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Export GLFW library dependencies\n\n#--------------------------------------------------------------------\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Choose library output name\n\n#--------------------------------------------------------------------\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# On Unix-like systems, shared libraries can use the soname system.\n",
        "Line" : 377,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Create generated files\n\n#--------------------------------------------------------------------\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add subdirectories\n\n#--------------------------------------------------------------------\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Install files other than the library\n\n# The library is installed by src/CMakeLists.txt\n\n#--------------------------------------------------------------------\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Only generate this target if no higher-level project already has\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 26
    },
    "ext/glfw/docs/CMakeLists.txt" : {
      "ObjectId" : "45a6162e83e91ce41065a176375d4fa9225f0bfd",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ext/glfw/examples/CMakeLists.txt" : {
      "ObjectId" : "01998196fe509ba6043fedc4ee48a1f305be1f58",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HACK: This is NOTFOUND on OS X 10.8\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Set fancy names for bundles\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set boring names for executables\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "ext/glfw/src/CMakeLists.txt" : {
      "ObjectId" : "6817192af18f91593f20144dee044ce939acd1b1",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason, CMake doesn't know about .m\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Include version information in the output\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# The GLFW DLL needs a special compile-time macro and import library name\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Append -fno-common to the compile flags to work around a bug in\n\n# Apple's GCC\n",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "ext/glfw/tests/CMakeLists.txt" : {
      "ObjectId" : "94ac755b942a967eff051de18511a8aaeb24133b",
      "LastModified" : "2014-01-18T05:44:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# HACK: This is NOTFOUND on OS X 10.8\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "ext/gorilla/build/CMakeLists.txt" : {
      "ObjectId" : "6220f4fcee4a4c1635ae130b92594a92b841ba8c",
      "LastModified" : "2014-07-31T04:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The Prefix Hack!\n",
        "Line" : 39,
        "CharPositionInLine" : 49
      },
      "1" : {
        "Text" : "# NOTE: Linux/Mac OpenAL support not yet implemented!\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# OGG/Vorbis\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTE: Linux/Mac OpenAL support not yet implemented!\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "ext/luajit/CMakeLists.txt" : {
      "ObjectId" : "3c6b26ffb024da503363c8fb9934930c8a4d2919",
      "LastModified" : "2014-07-31T04:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMakeLists.txt has been first taken from LuaDist\n\n# Copyright (C) 2007-2011 LuaDist.\n\n# Created by Peter Drahoš\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# Debugged and (now seriously) modified by Ronan Collobert, for Torch7\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# not editable\n",
        "Line" : 18,
        "CharPositionInLine" : 37
      },
      "2" : {
        "Text" : "# not editable\n",
        "Line" : 19,
        "CharPositionInLine" : 36
      },
      "3" : {
        "Text" : "# not editable\n",
        "Line" : 23,
        "CharPositionInLine" : 47
      },
      "4" : {
        "Text" : "# not editable\n",
        "Line" : 25,
        "CharPositionInLine" : 68
      },
      "5" : {
        "Text" : "# Ugly warnings\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Various includes\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LuaJIT specific\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "######\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## SOURCES\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## GENERATE\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## COMPILE\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#IF(WIN32)\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#add_executable(luajit src/luajit.c)\n\n#target_link_libraries(luajit libluajit)\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#ELSE()\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#IF(WITH_AMALG)\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#add_executable(luajit src/luajit.c src/ljamalg.c ${DEPS})\n",
        "Line" : 300,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#ELSE()\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "#add_executable(luajit src/luajit.c ${SRC_LJCORE} ${DEPS})\n",
        "Line" : 302,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "#ENDIF()\n\n#target_link_libraries(luajit ${LIBS})\n\n#SET_TARGET_PROPERTIES(luajit PROPERTIES ENABLE_EXPORTS ON)\n",
        "Line" : 303,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#ENDIF()\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#INSTALL(TARGETS libluajit luajit\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#EXPORT torch-exports\n\n#RUNTIME DESTINATION \"${INSTALL_BIN_SUBDIR}\"\n\n#LIBRARY DESTINATION \"${INSTALL_LIB_SUBDIR}\"\n\n#ARCHIVE DESTINATION \"${INSTALL_LIB_SUBDIR}\")\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#INSTALL(FILES\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#src/jit/bc.lua src/jit/v.lua src/jit/dump.lua src/jit/dis_x86.lua src/jit/dis_x64.lua src/jit/dis_arm.lua\n\n#src/jit/dis_ppc.lua src/jit/dis_mips.lua src/jit/dis_mipsel.lua src/jit/bcsave.lua ${CMAKE_CURRENT_BINARY_DIR}/vmdef.lua\n\n#DESTINATION \"${INSTALL_LUA_PATH_SUBDIR}/jit\")\n",
        "Line" : 315,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 25
    },
    "ext/luajit/Makefile" : {
      "ObjectId" : "e56b457e7a51f615492cdb090bffb9078554321f",
      "LastModified" : "2014-07-31T04:28:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT top level Makefile for installation. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Note: src/Makefile has many more configurable options.\n\n#\n\n# ##### This Makefile is NOT useful for Windows! #####\n\n# For MSVC, please follow the instructions given in src/msvcbuild.bat.\n\n# For MinGW and Cygwin, cd to src and run make with the Makefile there.\n\n#\n\n# Copyright (C) 2005-2013 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#\n\n# Change the installation path as needed. This automatically adjusts\n\n# the paths in src/luaconf.h, too. Note: PREFIX must be an absolute path!\n\n#\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##############################################################################\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "ext/luajit/src/Makefile" : {
      "ObjectId" : "0469934397789ffebd6587ed2eae2ada3e2c2935",
      "LastModified" : "2014-07-31T04:28:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##############################################################################\n\n# LuaJIT Makefile. Requires GNU Make.\n\n#\n\n# Please read doc/install.html before changing any variables!\n\n#\n\n# Suitable for POSIX platforms (Linux, *BSD, OSX etc.).\n\n# Also works with MinGW and Cygwin on Windows.\n\n# Please check msvcbuild.bat for building with MSVC on Windows.\n\n#\n\n# Copyright (C) 2005-2012 Mike Pall. See Copyright Notice in luajit.h\n\n##############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n#############################  COMPILER OPTIONS  #############################\n\n##############################################################################\n\n# These options mainly affect the speed of the JIT compiler itself, not the\n\n# speed of the JIT-compiled code. Turn any of the optional settings on by\n\n# removing the '#' in front of them. Make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\" if you change any options.\n\n#\n\n# LuaJIT builds as a native 32 or 64 bit binary by default.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Use this if you want to force a 32 bit build on a 64 bit multilib OS.\n\n#CC= gcc -m32\n\n#\n\n# Since the assembler part does NOT maintain a frame pointer, it's pointless\n\n# to slow down the C part by not omitting it. Debugging, tracebacks and\n\n# unwinding are not affected -- the assembler part has frame unwind\n\n# information and GCC emits it where needed (x64) or with -g (see CCDEBUG).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use this if you want to generate a smaller binary (but it's slower):\n\n#CCOPT= -Os -fomit-frame-pointer\n\n# Note: it's no longer recommended to use -O3 with GCC 4.x.\n\n# The I-Cache bloat usually outweighs the benefits from aggressive inlining.\n\n#\n\n# Target-specific compiler options:\n\n#\n\n# x86 only: it's recommended to compile at least for i686. Better yet,\n\n# compile for an architecture that has SSE2, too (-msse -msse2).\n\n#\n\n# x86/x64 only: For GCC 4.2 or higher and if you don't intend to distribute\n\n# the binaries to a different machine you could also use: -march=native\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Uncomment the next line to generate debug information:\n\n#CCDEBUG= -g\n\n#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Uncomment the next line to enable more warnings:\n\n#CCWARN+= -Wextra -Wdeclaration-after-statement -Wredundant-decls -Wshadow -Wpointer-arith\n\n#\n\n##############################################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##############################################################################\n\n################################  BUILD MODE  ################################\n\n##############################################################################\n\n# The default build mode is mixed mode on POSIX. On Windows this is the same\n\n# as dynamic mode.\n\n#\n\n# Mixed mode creates a static + dynamic library and a statically linked luajit.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Static mode creates a static library and a statically linked luajit.\n\n#BUILDMODE= static\n\n#\n\n# Dynamic mode creates a dynamic library and a dynamically linked luajit.\n\n# Note: this executable will only run when the library is installed!\n\n#BUILDMODE= dynamic\n\n#\n\n##############################################################################\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##############################################################################\n\n#################################  FEATURES  #################################\n\n##############################################################################\n\n# Enable/disable these features as needed, but make sure you force a full\n\n# recompile with \"make clean\", followed by \"make\".\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Permanently disable the FFI extension to reduce the size of the LuaJIT\n\n# executable. But please consider that the FFI library is compiled-in,\n\n# but NOT loaded by default. It only allocates any memory, if you actually\n\n# make use of it.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_FFI\n\n#\n\n# Features from Lua 5.2 that are unlikely to break existing code are\n\n# enabled by default. Some other features that *might* break some existing\n\n# code (e.g. __pairs or os.execute() return values) can be enabled here.\n\n# Note: this does not provide full compatibility with Lua 5.2 at this time.\n\n#XCFLAGS+= -DLUAJIT_ENABLE_LUA52COMPAT\n\n#\n\n# Disable the JIT compiler, i.e. turn LuaJIT into a pure interpreter.\n\n#XCFLAGS+= -DLUAJIT_DISABLE_JIT\n\n#\n\n# Some architectures (e.g. PPC) can use either single-number (1) or\n\n# dual-number (2) mode. Uncomment one of these lines to override the\n\n# default mode. Please see LJ_ARCH_NUMMODE in lj_arch.h for details.\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=1\n\n#XCFLAGS+= -DLUAJIT_NUMMODE=2\n\n#\n\n##############################################################################\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##############################################################################\n\n############################  DEBUGGING SUPPORT  #############################\n\n##############################################################################\n\n# Enable these options as needed, but make sure you force a full recompile\n\n# with \"make clean\", followed by \"make\".\n\n# Note that most of these are NOT suitable for benchmarking or release mode!\n\n#\n\n# Use the system provided memory allocator (realloc) instead of the\n\n# bundled memory allocator. This is slower, but sometimes helpful for\n\n# debugging. It's helpful for Valgrind's memcheck tool, too. This option\n\n# cannot be enabled on x64, since the built-in allocator is mandatory.\n\n#XCFLAGS+= -DLUAJIT_USE_SYSMALLOC\n\n#\n\n# This define is required to run LuaJIT under Valgrind. The Valgrind\n\n# header files must be installed. You should enable debug information, too.\n\n# Use --suppressions=lj.supp to avoid some false positives.\n\n#XCFLAGS+= -DLUAJIT_USE_VALGRIND\n\n#\n\n# This is the client for the GDB JIT API. GDB 7.0 or higher is required\n\n# to make use of it. See lj_gdbjit.c for details. Enabling this causes\n\n# a non-negligible overhead, even when not running under GDB.\n\n#XCFLAGS+= -DLUAJIT_USE_GDBJIT\n\n#\n\n# Turn on assertions for the Lua/C API to debug problems with lua_* calls.\n\n# This is rather slow -- use only while developing C libraries/embeddings.\n\n#XCFLAGS+= -DLUA_USE_APICHECK\n\n#\n\n# Turn on assertions for the whole LuaJIT VM. This significantly slows down\n\n# everything. Use only if you suspect a problem with LuaJIT itself.\n\n#XCFLAGS+= -DLUA_USE_ASSERT\n\n#\n\n##############################################################################\n\n# You probably don't need to change anything below this line!\n\n##############################################################################\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##############################################################################\n\n# Flags and options for host and target.\n\n##############################################################################\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# You can override the following variables at the make command line:\n\n#   CC       HOST_CC       STATIC_CC       DYNAMIC_CC\n\n#   CFLAGS   HOST_CFLAGS   TARGET_CFLAGS\n\n#   LDFLAGS  HOST_LDFLAGS  TARGET_LDFLAGS  TARGET_SHLDFLAGS\n\n#   LIBS     HOST_LIBS     TARGET_LIBS\n\n#   CROSS    HOST_SYS      TARGET_SYS      TARGET_FLAGS\n\n#\n\n# Cross-compilation examples:\n\n#   make HOST_CC=\"gcc -m32\" CROSS=i586-mingw32msvc- TARGET_SYS=Windows\n\n#   make HOST_CC=\"gcc -m32\" CROSS=powerpc-linux-gnu-\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If left blank, minilua is built and used. You can supply an installed\n\n# copy of (plain) Lua 5.1 or 5.2, plus Lua BitOp. E.g. with: HOST_LUA=lua\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##############################################################################\n\n# System detection.\n\n##############################################################################\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##############################################################################\n\n# Files and pathnames.\n\n##############################################################################\n",
        "Line" : 356,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##############################################################################\n\n# Build mode handling.\n\n##############################################################################\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Mixed mode defaults.\n",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Mixed mode is not supported on Windows. And static mode doesn't work well.\n\n# C modules cannot be loaded, because they bind to lua51.dll.\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#Q=\n\n#E= @:\n",
        "Line" : 562,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "##############################################################################\n\n# Make targets.\n\n##############################################################################\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22,
      "Errorlog" : "line 529:19 token recognition error at: '\\m'\nline 530:19 token recognition error at: '\\b'\nline 583:10 token recognition error at: '\"s| [^ ]*/dasm_\\S'\nline 584:29 token recognition error at: '\\1'\nline 585:24 token recognition error at: '\\S'\nline 586:22 token recognition error at: '\\S'\nline 587:21 token recognition error at: '\\S'\nline 682:42 token recognition error at: '\"\\n\\n##############################################################################\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "CMAKE" : 18,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1497
}