{
  "Repository" : "2280824",
  "Revision" : "HEAD",
  "ObjectId" : "9aee4844bfd7b6e0ffd90292816beb1f660f89e1",
  "CommitTime" : "2019-04-17T08:50:56Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "ba36b01162c834c8150269f7951798bf6351760b",
      "LastModified" : "2017-04-28T14:56:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Test CMake version\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for CMake 2.6 corrected behaviour (see \"cmake --help-policy CMP0003\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Suppress cmake policy warning in included rtt_macros.cmake file in CMake >= 3.0.2 (see \"cmake --help-policy CMP0026\")\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################################\n\n#                                                 #\n\n#       Start project customization section       #\n\n#                                                 #\n\n###################################################\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Load the optional orocos-rtt.cmake file.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Setup the default settings\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# On Windows, the default CMAKE_INSTALL_PREFIX is either:\n\n# C:\\Program Files\\orocos-rtt or C:\\Program Files (x86)\\orocos-rtt\n\n# However, we want it to be either:\n\n# C:\\Program Files\\orocos or C:\\Program Files (x86)\\orocos\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Export file name\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# The installation dir suffix for the 'orocos' directory\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# defaults to the target name\n",
        "Line" : 63,
        "CharPositionInLine" : 39
      },
      "10" : {
        "Text" : "# Make compilation verbose\n\n#SET(CMAKE_VERBOSE_MAKEFILE TRUE)\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "###################################################\n\n#                                                 #\n\n#       End project customization section         #\n\n#                                                 #\n\n###################################################\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# turn on code coverage of tests\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# coverage requires test\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# MESSAGE(\"Looking for compiler:\")\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###################################################\n\n#                                                 #\n\n#       Do some global set-up & checking          #\n\n#                                                 #\n\n###################################################\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Find all installed libraries, compiler etc.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Uninstall target\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###########################################################\n\n#                                                         #\n\n# Visit subdirs                                           #\n\n#                                                         #\n\n###########################################################\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#############################\n\n#                           #\n\n# Building Doxygen documents#\n\n#                           #\n\n#############################\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "###############################\n\n#                             #\n\n# Package configuration files #\n\n#                             #\n\n###############################\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Folder lib/cmake is searched by default in CMake >= 2.6.3\n",
        "Line" : 150,
        "CharPositionInLine" : 45
      },
      "22" : {
        "Text" : "# Prefix used in other projects to distinguish imported targets from regular ones\n",
        "Line" : 151,
        "CharPositionInLine" : 40
      },
      "23" : {
        "Text" : "# Main package configuration file + target specific file\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Version file\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Exported targets\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Package use file + helper files\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Install package.xml\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Install an env-hook in etc/orocos/${OROCOS_TARGET}/profile.d\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Install a catkin env-hook if catkin is installed\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "UseOROCOS-RTT-helpers.cmake" : {
      "ObjectId" : "7cea8ebe585c24a29ad166f4df0d357a5ef06bab",
      "LastModified" : "2019-04-17T08:05:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Parses arguments or options\n\n#\n\n# From: http://www.cmake.org/Wiki/CMakeMacroParseArguments\n\n#\n\n# For each item in options, PARSE_ARGUMENTS will create a variable\n\n# with that name, prefixed with prefix_. So, for example, if prefix is\n\n# MY_MACRO and options is OPTION1;OPTION2, then PARSE_ARGUMENTS will\n\n# create the variables MY_MACRO_OPTION1 and MY_MACRO_OPTION2. These\n\n# variables will be set to true if the option exists in the command\n\n# line or false otherwise.\n\n#\n\n# For each item in arg_names, PARSE_ARGUMENTS will create a variable\n\n# with that name, prefixed with prefix_. Each variable will be filled\n\n# with the arguments that occur after the given arg_name is encountered\n\n# up to the next arg_name or the end of the arguments. All options are\n\n# removed from these lists. PARSE_ARGUMENTS also creates a\n\n# prefix_DEFAULT_ARGS variable containing the list of all arguments up\n\n# to the first arg_name encountered.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Parses an Autoproj or rosbuild manifest.xml file and stores the dependencies in RESULT.\n\n# Relies on xpath. If no manifest is found, returns an empty RESULT.\n\n#\n\n# Usage: orocos_get_manifest_deps DEPS)\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"Deps are: '${DEPS}'\")\n",
        "Line" : 88,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#message(\"Dependencies are: '${${RESULT}}'\")\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# Find a package, pick up its compile and link flags. It does this by locating\n\n# and reading the .pc file generated by that package. In case no such .pc file\n\n# exists (or is not found), it is assumed that no flags are necessary.\n\n#\n\n# This macro is called by orocos_use_package()\n\n#\n\n# It sets these variables for each package:\n\n#   ${PACKAGE}_LIBRARIES        The fully resolved link libraries for this package.\n\n#   ${PACKAGE}_INCLUDE_DIRS     The include directories for this package.\n\n#   ${PACKAGE}_LIBRARY_DIRS     The library directories for this package.\n\n#   ${PACKAGE}_CFLAGS_OTHER     The compile flags other than -I for this package.\n\n#   ${PACKAGE}_LDFLAGS_OTHER    The linker flags other than -L and -l for thfully resolved link libraries for this package.\n\n#   ${PACKAGE}_<LIB>_LIBRARY    Each fully resolved link library <LIB> in the above list.\n\n# \n\n# Usage: orocos_find_package( pkg-name [OROCOS_ONLY] [REQUIRED] [VERBOSE]\")\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Try to use rosbuild to find PACKAGE\n",
        "Line" : 122,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# use rospack to find package directories of *all* dependencies.\n\n# We need these because a .pc file may depend on another .pc file in another package.\n\n# This package + the packages this package depends on:\n",
        "Line" : 124,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# call orocos_use_package recursively for dependees\n",
        "Line" : 130,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Avoid using a package that has already been found\n",
        "Line" : 135,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# add PACKAGE_PATH/lib/pkgconfig to the PKG_CONFIG_PATH\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Now we are ready to get the flags from the .pc files:\n",
        "Line" : 147,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Disable caching in FindPkgConfig.cmake as otherwise changes in\n\n# Orocos .pc files are not detected before the cmake cache is deleted\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Add DESTDIR to INCLUDE_DIRS and set CMAKE_FIND_ROOT_PATH if the DESTDIR environment variable is defined\n",
        "Line" : 159,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Use find_libraries to find each library:\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Two options: COMP_LIB is an absolute path-to-lib (must start with ':') or just a libname:\n",
        "Line" : 173,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# absolute path (shared lib):\n",
        "Line" : 176,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "# absolute path (static lib):\n",
        "Line" : 180,
        "CharPositionInLine" : 10
      },
      "17" : {
        "Text" : "# libname:\n",
        "Line" : 183,
        "CharPositionInLine" : 10
      },
      "18" : {
        "Text" : "# Add some output variables (note these are accessible outside of this scope since this is a macro)\n\n# We don't want to cache these\n",
        "Line" : 194,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# The flags are space separated, so no need to quote here:\n",
        "Line" : 201,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "#\n\n# Find a package, pick up its include dirs and link with its libraries.\n\n# It does this by locating and reading the .pc file generated by that package.\n\n# In case no such .pc file exists (or is not found), it is assumed that no\n\n# flags are necessary.\n\n#\n\n# This macro is called for you by UseOrocos-RTT.cmake for each dependency\n\n# listed in your rosbuild or Autoproj manifest.xml file. \n\n#\n\n# By default, this will add linker flags from all the dependencies to all\n\n# targets in this scope unless OROCOS_NO_AUTO_LINKING is set to True.\n\n# \n\n# Internally it calls orocos_find_package(), which exports serveral variables\n\n# containing build flags exported by dependencies. See the\n\n# orocos_find_package() documentation for more details.\n\n#   \n\n# It will also aggregate the following variables for all packages found in this\n\n# scope:\n\n#   USE_OROCOS_PACKAGES\n\n#   USE_OROCOS_LIBRARIES\n\n#   USE_OROCOS_INCLUDE_DIRS\n\n#   USE_OROCOS_LIBRARY_DIRS\n\n#   USE_OROCOS_CFLAGS_OTHER\n\n#   USE_OROCOS_LDFLAGS_OTHER\n\n#  \n\n#   USE_OROCOS_COMPILE_FLAGS    All exported compile flags from packages within the current scope.\n\n#   USE_OROCOS_LINK_FLAGS       All exported link flags from packages within the current scope.\n\n#\n\n# Usage: orocos_use_package( pkg-name [OROCOS_ONLY] [REQUIRED] [VERBOSE]\")\n\n#\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Check a flag so we don't over-link\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Check if ${PACKAGE}_OROCOS_PACKAGE is defined in this workspace\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# The package has been generated in the same workspace. Just use the exported targets and include directories.\n",
        "Line" : 263,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Use add_dependencies(target ${USE_OROCOS_EXPORTED_TARGETS}) to make sure that a target is built AFTER\n\n# all targets created by other packages that have been orocos_use_package'd in the current scope.\n",
        "Line" : 270,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Get the package and dependency build flags\n",
        "Line" : 275,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Make sure orocos found it, instead of someone else\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Include the aggregated include directories\n\n# CMake 2.8.8 added support for per-target INCLUDE_DIRECTORIES. The include directories will only be added to targets created\n\n# with the orocos_*() macros. For older versions we have to set INCLUDE_DIRECTORIES per-directory.\n\n# See https://github.com/orocos-toolchain/rtt/pull/85 for details.\n",
        "Line" : 296,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Set a flag so we don't over-link (Don't cache this, it should remain per project)\n",
        "Line" : 304,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# Store aggregated variables\n",
        "Line" : 307,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Remove duplicates from aggregated variables\n",
        "Line" : 315,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Backwards compatibility\n\n# Add compiler and linker flags to the USE_OROCOS_XXX_FLAGS variables used in the orocos_add_x macros\n",
        "Line" : 335,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "#message(WARNING \"Per-target INCLUDE_DIRECTORIES are not supported in CMake ${CMAKE_VERSION}.\")\n",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# strip DESTDIR from all RPATH entries...\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# ... and remove duplicates\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# For non-DESTDIR installs, append directories in the linker search path to the INSTALL_RPATH.\n\n# This was the default behavior of RTT before version 2.8.\n",
        "Line" : 439,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Set INSTALL_NAME_DIR for MacOS X to tell users of this library how to find it:\n",
        "Line" : 458,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# cope with CMake 3.x\n",
        "Line" : 465,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 38
    },
    "UseOROCOS-RTT.cmake" : {
      "ObjectId" : "cd4d613bc896de82427a27023030d558ea7d643a",
      "LastModified" : "2019-04-17T08:05:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n#\n\n# CMake package use file for OROCOS-RTT.\n\n# It is assumed that find_package(OROCOS-RTT ...) has already been invoked.\n\n# See orocos-rtt-config.cmake for information on how to load OROCOS-RTT into your CMake project.\n\n# To include this file from your CMake project, the OROCOS-RTT_USE_FILE_PATH variable is used:\n\n#   include(${OROCOS-RTT_USE_FILE_PATH}/UseOROCOS-RTT.cmake) \n\n# or even shorter:\n\n#   include(${OROCOS-RTT_USE_FILE})\n\n#\n\n########################################################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake 2.8.8 added support for per-target INCLUDE_DIRECTORIES. The include directories will only be added to targets created\n\n# with the orocos_*() macros. For older versions we have to set INCLUDE_DIRECTORIES per-directory.\n\n# See https://github.com/orocos-toolchain/rtt/pull/85 for details.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Preprocessor definitions\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Check for client meta-buildsystem tools\n\n# \n\n# Tool support for:\n\n#   - catkin\n\n#   - rosbuild\n\n#\n\n# If the client is using rosbuild, and has called rosbuild_init(), then we\n\n# will assume that he or she wants to build targets with rosbuild libraries.\n\n# \n\n# If the client has not called rosbuild_init() then we check if\n\n# `find_package(catkin ...)` has been called (explicitly by the user\n\n# or implicitly by building using `catkin_make`) or in the case of\n\n# `catkin_make_isolated` if CATKIN_DEVEL_PREFIX is set and if there\n\n# is a `package.xml` file in the.  project's source folder. If yes,\n\n# and catkin has been found, then we can assume this is a catkin\n\n# build.\n\n#\n\n# rosbuild- or catkin build-style build can be enforced or forbidden by setting\n\n# the ORO_USE_ROSBUILD or ORO_USE_CATKIN cmake variable explicitly.\n\n#\n\n# Note that within one build folder all packages have to use the same buildsystem.\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Prevent double inclusion ! This file is not robust against that !\n",
        "Line" : 57,
        "CharPositionInLine" : 61
      },
      "5" : {
        "Text" : "# This is for not allowing undefined symbols when using gcc\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Suppress API decoration warnings in Win32:\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# On windows, the CMAKE_INSTALL_PREFIX is forced to the Orocos-RTT path.\n\n# There's two alternatives to disable this behavior:\n\n#\n\n# 1. Use the ORO_DEFAULT_INSTALL_PREFIX variable to modify the default\n\n#    installation path:\n\n#\n\n#     set(ORO_DEFAULT_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})\n\n#     include(${OROCOS-RTT_USE_FILE_PATH}/UseOROCOS-RTT.cmake)\n\n#\n\n# 2. Force a non-default CMAKE_INSTALL_PREFIX prior to executing cmake:\n\n#\n\n#     cmake -DCMAKE_INSTALL_PREFIX=\"<your install prefix>\" [...]\n\n#\n\n# In all cases, the Orocos macros will always honor any change to the cached\n\n# CMAKE_INSTALL_PREFIX variable.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# For backwards compatibility. Was only used on WIN32 targets:\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Set to true to indicate that these macros are available.\n",
        "Line" : 123,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# By default, install libs in /target/ subdir in order to allow\n\n# multi-target installs.\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Enable auto-linking\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Infer package name from directory name.\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Modify default rosbuild output paths if using Eclipse\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#set the default path for built executables to the \"bin\" directory\n",
        "Line" : 143,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "#set the default path for built libraries to the \"lib\" directory\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Set output directories for rosbuild in-source builds,\n\n# but respect deprecated LIBRARY_OUTPUT_PATH, EXECUTABLE_OUTPUT_PATH and ARCHIVE_OUTPUT_PATH variables\n\n# as they are set by rosbuild_init() and commonly used in rosbuild CMakeLists.txt files\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# We only need the direct dependencies, the rest is resolved by the .pc\n\n# files.\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Parse package.xml file in ${PROJECT_SOURCE_DIR}/package.xml to set ${PROJECT_NAME}_VERSION and ${PROJECT_NAME}_BUILD_DEPENDS\n",
        "Line" : 186,
        "CharPositionInLine" : 5
      },
      "19" : {
        "Text" : "# Set output directories for catkin\n",
        "Line" : 191,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Get catkin build_depend dependencies\n",
        "Line" : 197,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# We use OROCOS_ONLY so that we only find .pc files with the orocos target on them\n",
        "Line" : 199,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# Set output directories relative to CMAKE_LIBRARY_OUTPUT_DIRECTORY or built in the current binary directory (cmake default).\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Fall back to manually processing the Autoproj manifest.xml file.\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#message(\"orocos_get_manifest_deps are: ${DEPS}\")\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Output the library and runtime destinations\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Necessary for correctly building mixed libraries on win32.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Components should add themselves by calling 'OROCOS_COMPONENT' \n\n# instead of 'ADD_LIBRARY' in CMakeLists.txt.\n\n# You can set a variable COMPONENT_VERSION x.y.z to set a version or \n\n# specify the optional VERSION parameter. For ros builds, the version\n\n# number is ignored.\n\n#\n\n# Usage: orocos_component( COMPONENT_NAME src1 src2 src3 [INSTALL lib/orocos/${PROJECT_NAME}] [VERSION x.y.z] )\n\n#\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Extract install directory:\n",
        "Line" : 250,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Export target\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Set library name:\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Set component version:\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Clear the dependencies such that a target switch can be detected:\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Use rosbuild in ros environments:\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Prepare component lib for out-of-the-ordinary lib directories\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "#${OROCOS-RTT_TYPEKIT_LIBRARIES} \n",
        "Line" : 308,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# Only link in case there is something *and* the user didn't opt-out:\n",
        "Line" : 311,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Add exported target dependencies\n",
        "Line" : 319,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Install\n\n# On win32, component runtime (.dll) should go in orocos folder\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Necessary for .pc file generation\n",
        "Line" : 332,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Utility libraries should add themselves by calling 'orocos_library()'\n\n# instead of 'ADD_LIBRARY' in CMakeLists.txt.\n\n# You can set a variable COMPONENT_VERSION x.y.z to set a version or\n\n# specify the optional VERSION parameter. For ros builds, the version\n\n# number is ignored.\n\n#\n\n# Usage: orocos_library( libraryname src1 src2 src3 [VERSION x.y.z] )\n\n#\n",
        "Line" : 338,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Export target\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# Clear the dependencies such that a target switch can be detected:\n",
        "Line" : 375,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "#${OROCOS-RTT_TYPEKIT_LIBRARIES} \n",
        "Line" : 405,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "# Only link in case there is something *and* the user didn't opt-out:\n",
        "Line" : 408,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Add exported target dependencies\n",
        "Line" : 416,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Install\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Necessary for .pc file generation\n",
        "Line" : 424,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Executables should add themselves by calling 'orocos_executable()'\n\n# instead of 'ADD_EXECUTABLE' in CMakeLists.txt.\n\n#\n\n# Usage: orocos_executable( executablename src1 src2 src3 [INSTALL bin] )\n\n#\n",
        "Line" : 430,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Export target\n",
        "Line" : 451,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Only link in case there is something *and* the user didn't opt-out:\n",
        "Line" : 489,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# Add exported target dependencies\n",
        "Line" : 497,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# We install the exe, the user must make sure that the install dir is not\n\n# beneath the ROS package (if any).\n",
        "Line" : 502,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Configure an executable to work with Orocos.\n\n# The caller is responsible for any ADD_EXECUTABLE(), ADD_TEST(), or INSTALL()\n\n# calls for this target.\n\n# WARNING the target name is *not* suffixed with OROCOS_TARGET. That is left\n\n# to the caller, if necessary.\n\n#\n\n# Usage: orocos_configure_executable( executablename src1 src2 src3 [INSTALL bin] )\n\n#\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# TODO      rosbuild_add_executable(${EXE_TARGET_NAME} ${SOURCES} )\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Only link in case there is something *and* the user didn't opt-out:\n",
        "Line" : 553,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Add exported target dependencies\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Type headers should add themselves by calling 'orocos_typegen_headers()'\n\n# They will be processed by typegen to generate a typekit from it, with the\n\n# name of the current project. You may also pass additional options to typegen\n\n# before listing your header files. \n\n# \n\n# Use 'DEPENDS <packagename> ...' to add dependencies on other (typegen) packages.\n\n# This macro passes the -x OROCOS_TARGET flag to typegen automatically, so there\n\n# is no need to include the -OROCOS_TARGET suffix in the <packagename>\n\n#\n\n# NOTE: if you use a subdir for your headers, e.g. include/robotdata.hpp, it\n\n# will install this header into pkgname/include/robotdata.hpp ! Most likely\n\n# not what you want. So call this macro from the include dir itself.\n\n#\n\n# Usage: orocos_typegen_headers( robotdata.hpp sensordata.hpp DEPENDS orocos_kdl )\n\n#\n",
        "Line" : 567,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Works in top level source dir:\n",
        "Line" : 594,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "#re-check for typegen each time !\n",
        "Line" : 595,
        "CharPositionInLine" : 38
      },
      "60" : {
        "Text" : "# Working directory is necessary to be able to find the source files.\n",
        "Line" : 605,
        "CharPositionInLine" : 6
      },
      "61" : {
        "Text" : "# work around generated manifest.xml file:\n\n#execute_process( COMMAND ${CMAKE_COMMAND} -E remove -f ${CMAKE_SOURCE_DIR}/typekit/manifest.xml )\n",
        "Line" : 609,
        "CharPositionInLine" : 6
      },
      "62" : {
        "Text" : "# typekit libraries should add themselves by calling 'orocos_typekit()' \n\n# instead of 'ADD_LIBRARY' in CMakeLists.txt.\n\n# You can set a variable COMPONENT_VERSION x.y.z to set a version or \n\n# specify the optional VERSION parameter. For ros builds, the version\n\n# number is ignored.\n\n#\n\n# Usage: orocos_typekit( typekitname src1 src2 src3 [INSTALL lib/orocos/project/types] [VERSION x.y.z] )\n\n#\n",
        "Line" : 620,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# Export target\n",
        "Line" : 644,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "# Clear the dependencies such that a target switch can be detected:\n",
        "Line" : 664,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Only link in case there is something *and* the user didn't opt-out:\n",
        "Line" : 688,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Add exported target dependencies\n",
        "Line" : 696,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# On win32, typekit runtime (.dll) should go in orocos/types folder\n",
        "Line" : 701,
        "CharPositionInLine" : 4
      },
      "68" : {
        "Text" : "# Necessary for .pc file generation\n",
        "Line" : 708,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# plugin libraries should add themselves by calling 'orocos_plugin()' \n\n# instead of 'ADD_LIBRARY' in CMakeLists.txt.\n\n# You can set a variable COMPONENT_VERSION x.y.z to set a version or \n\n# specify the optional VERSION parameter. For ros builds, the version\n\n# number is ignored.\n\n#\n\n# Usage: orocos_plugin( pluginname src1 src2 src3 [INSTALL lib/orocos/project/plugins] [VERSION x.y.z])\n\n#\n",
        "Line" : 714,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Export target\n",
        "Line" : 738,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Clear the dependencies such that a target switch can be detected:\n",
        "Line" : 758,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "#${OROCOS-RTT_TYPEKIT_LIBRARIES} \n",
        "Line" : 782,
        "CharPositionInLine" : 6
      },
      "73" : {
        "Text" : "# Only link in case there is something *and* the user didn't opt-out:\n",
        "Line" : 785,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# Add exported target dependencies\n",
        "Line" : 793,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# On win32, plugins runtime (.dll) should go in orocos/plugins folder\n",
        "Line" : 798,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Necessary for .pc file generation\n",
        "Line" : 805,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# service libraries should add themselves by calling 'orocos_service()' \n\n# instead of 'ADD_LIBRARY' in CMakeLists.txt.\n\n#\n\n# Usage: orocos_service( servicename src1 src2 src3 )\n\n#\n",
        "Line" : 811,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "#\n\n# Components supply header files and directories which should be included when\n\n# using these components. Each component should use this macro\n\n# to install its header-files. They are installed by default\n\n# in include/orocos/${PROJECT_NAME}\n\n#\n\n# Usage example: orocos_install_header(\n\n#                  FILES hardware.hpp control.hpp\n\n#                  DIRECTORY include/${PROJECT_NAME}\n\n#                )\n\n#\n",
        "Line" : 820,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "#\n\n# Adds the uninstall target, not present by default in CMake.\n\n#\n\n# Usage example: orocos_uninstall_target()\n",
        "Line" : 856,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "#\n\n# Generate package files for the whole project. Do this as the very last\n\n# step in your project's CMakeLists.txt file.\n\n#\n\n# Allows to set a name for the .pc file (without extension)\n\n# and a version (defaults to 1.0). The name and version you provide will\n\n# be used unmodified.\n\n#\n\n# If you didn't specify VERSION but COMPONENT_VERSION has been set,\n\n# that variable will be used to set the version number.\n\n#\n\n# You may specify a dependency list of .pc files to depend on with DEPENDS. You will need this\n\n# to set the include paths correctly if a public header of\n\n# this package includes a header of another (non-Orocos) package. This dependency\n\n# will end up in the Requires: field of the .pc file.\n\n#\n\n# You may specify a dependency list of .pc files of Orocos packages with DEPENDS_TARGETS\n\n# This is similar to DEPENDS, but the -<target> suffix is added for every package name.\n\n# This dependency will end up in the Requires: field of the .pc file.\n\n#\n\n# orocos_generate_package( [name] [VERSION version] [DEPENDS packagenames....])\n\n#\n",
        "Line" : 873,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Check version\n",
        "Line" : 903,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# Create filename\n",
        "Line" : 919,
        "CharPositionInLine" : 4
      },
      "83" : {
        "Text" : "# Append -subdir-subdir-... to pc name:\n",
        "Line" : 927,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# Create dependency list\n",
        "Line" : 937,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# Create lib-path list\n",
        "Line" : 944,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "#install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/manifest.xml DESTINATION  lib/orocos${OROCOS_SUFFIX}/level0 )\n",
        "Line" : 983,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Add ORO_CREATE_PC_INCLUDE_DIRS arguments to ${PROJECT_NAME}_EXPORTED_INCLUDE_DIRS\n",
        "Line" : 985,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# If the directory ${PROJECT_SOURCE_DIR}/include/orocos exists, always export it as a fallback\n",
        "Line" : 996,
        "CharPositionInLine" : 6
      },
      "89" : {
        "Text" : "# Generate additional pkg-config files for other build toolchains\n",
        "Line" : 1002,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# For ros package trees, we install the .pc file also next to the manifest file:\n",
        "Line" : 1006,
        "CharPositionInLine" : 6
      },
      "91" : {
        "Text" : "#set(PC_LIB_DIR \"\\${libdir}/orocos${OROCOS_SUFFIX}\") # Without package name suffix !\n",
        "Line" : 1008,
        "CharPositionInLine" : 6
      },
      "92" : {
        "Text" : "# For catkin workspaces we also install a pkg-config file in the develspace\n",
        "Line" : 1029,
        "CharPositionInLine" : 6
      },
      "93" : {
        "Text" : "#set(PC_LIB_DIR \"\\${libdir}/orocos${OROCOS_SUFFIX}/${PROJECT_NAME}\")\n",
        "Line" : 1038,
        "CharPositionInLine" : 6
      },
      "94" : {
        "Text" : "# Create install target for orocos installed package directory\n",
        "Line" : 1043,
        "CharPositionInLine" : 6
      },
      "95" : {
        "Text" : "# Append exported targets, libraries and include directories of all dependencies\n",
        "Line" : 1047,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# Store a list of exported targets, libraries and include directories on the cache so that other packages within the same workspace can use them.\n",
        "Line" : 1068,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Also set the uninstall target:\n",
        "Line" : 1087,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "# Create install target for orocos installed package directory\n",
        "Line" : 1090,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Call catkin_package() here if the user has not called it before.\n",
        "Line" : 1093,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# no package name given in orocos_generate_package()\n",
        "Line" : 1096,
        "CharPositionInLine" : 43
      },
      "101" : {
        "Text" : "# Always assume that catkin is a buildtool_depend. This silently disables a FATAL_ERROR in catkin_package().\n\n# See https://github.com/ros/catkin/commit/7482dda520e94db5b532b57220dfefb10eeda15b\n",
        "Line" : 1100,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 102
    },
    "config/CreatePCFlags.cmake" : {
      "ObjectId" : "28617896c0e8e141bdc254ac9dd25090376e8f41",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This macro converts CMake lists of defines, include dirs and link libraries to pkg-config\n\n# style defines, include directives and link directives. The first three arguments are inputs\n\n# The last three arguments are the outputs (any existing content in the output vars is deleted.)\n\n# The first three arguments MUST be lists passed as a single argument. \n\n# The last three arguments will be strings.\n\n#\n\n# Usage: create_pc_flags( \"${INCLUDES}\" \"${LIBS}\" PC_INCLUDES PC_LIBS )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MESSAGE(\"Got cmlibs: ${CM_LIBRARIES}\")\n\n# MESSAGE(\"Got cmcflags: ${CM_INCLUDES}\")\n\n# MESSAGE(\"Got cmdefs: ${CM_DEFINES}\")\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# WARNING: WE HAVE TO STORE THE MACRO ARG IN A TEMP VAR, OTHERWISE, the while() is always false !\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#message(\"item: ${ITEM}\")\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# MESSAGE(\"Computed pclibs: ${${PC_LIBRARIES}}\")\n\n# MESSAGE(\"Computed pccflags: ${${PC_INCLUDES}}\")\n\n# MESSAGE(\"Computed pcdefs: ${${PC_DEFINES}}\")\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "config/FindACE.cmake" : {
      "ObjectId" : "1040db0f9f73c75a0f84350fbae6d222e24ea4cc",
      "LastModified" : "2010-08-27T10:03:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding ACE.\n\n# If the optional ACE_ROOT_DIR environment variable exists, header files and\n\n# libraries will be searched in the ACE_ROOT_DIR/include and ACE_ROOT_DIR/libs\n\n# directories, respectively. Otherwise the default CMake search process will be\n\n# used.\n\n#\n\n# This script creates the following variables:\n\n#  ACE_FOUND: Boolean that indicates if the package was found\n\n#  ACE_INCLUDE_DIRS: Paths to the necessary header files\n\n#  ACE_LIBRARIES: Package libraries\n\n#  ACE_LIBRARY_DIRS: Path to package libraries\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# See if ACE_ROOT is not already set in CMake\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# See if ACE_ROOT is set in process environment\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# If ACE_ROOT is available, set up our hints\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set ACE_LIBRARY ala boost: debug;libdebug;optimized;lib\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#message(\"ACE_LIBRARY found: ${ACE_LIBRARY}\")\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#message(\"ACED_LIBRARY found: ${ACED_LIBRARY}\")\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Set ACE_FOUND honoring the QUIET and REQUIRED arguments\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Output variables\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include dirs\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Libraries\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Link dirs\n\n#get_filename_component(ACE_LIBRARY_DIRS ${ACE_LIBRARY} PATH)\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Advanced options for not cluttering the cmake UIs\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "config/FindBoost.cmake" : {
      "ObjectId" : "67637bf46a4a82a9820a29fe3be5caf8881d9580",
      "LastModified" : "2011-05-24T15:17:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Boost include dirs and libraries\n\n# Usage of this module as follows:\n\n#\n\n# NOTE: Take note of the Boost_ADDITIONAL_VERSIONS variable below.\n\n# Due to Boost naming conventions and limitations in CMake this find\n\n# module is NOT future safe with respect to Boost version numbers,\n\n# and may break.\n\n#\n\n# == Using Header-Only libraries from within Boost: ==\n\n#\n\n#   find_package( Boost 1.36.0 )\n\n#   if(Boost_FOUND)\n\n#      include_directories(${Boost_INCLUDE_DIRS})\n\n#      add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n#\n\n# == Using actual libraries from within Boost: ==\n\n#\n\n#   set(Boost_USE_STATIC_LIBS   ON)\n\n#   set(Boost_USE_MULTITHREADED ON)\n\n#   find_package( Boost 1.36.0 COMPONENTS date_time filesystem system ... )\n\n#\n\n#   if(Boost_FOUND)\n\n#      include_directories(${Boost_INCLUDE_DIRS})\n\n#      add_executable(foo foo.cc)\n\n#      target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n#\n\n# The components list needs to contain actual names of boost libraries only,\n\n# such as \"date_time\" for \"libboost_date_time\".  If you're using parts of\n\n# Boost that contain header files only (e.g. foreach) you do not need to\n\n# specify COMPONENTS.\n\n#\n\n# You should provide a minimum version number that should be used. If you provide this \n\n# version number and specify the REQUIRED attribute, this module will fail if it\n\n# can't find the specified or a later version. If you specify a version number this is\n\n# automatically put into the considered list of version numbers and thus doesn't need\n\n# to be specified in the Boost_ADDITIONAL_VERSIONS variable (see below).\n\n#\n\n# NOTE for Visual Studio Users:\n\n#     Automatic linking is used on MSVC & Borland compilers by default when\n\n#     #including things in Boost.  It's important to note that setting\n\n#     Boost_USE_STATIC_LIBS to OFF is NOT enough to get you dynamic linking,\n\n#     should you need this feature.  Automatic linking typically uses static\n\n#     libraries with a few exceptions (Boost.Python is one).\n\n#\n\n#     Please see the section below near Boost_LIB_DIAGNOSTIC_DEFINITIONS for\n\n#     more details.  Adding a TARGET_LINK_LIBRARIES() as shown in the example\n\n#     above appears to cause VS to link dynamically if Boost_USE_STATIC_LIBS\n\n#     gets set to OFF.  It is suggested you avoid automatic linking since it\n\n#     will make your application less portable.\n\n#\n\n# =========== The mess that is Boost_ADDITIONAL_VERSIONS (sorry?) ============\n\n#\n\n# OK, so the Boost_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# boost version numbers that should be taken into account when searching\n\n# for Boost. Unfortunately boost puts the version number into the\n\n# actual filename for the libraries, so this variable will certainly be needed\n\n# in the future when new Boost versions are released.\n\n#\n\n# Currently this module searches for the following version numbers:\n\n# 1.33, 1.33.0, 1.33.1, 1.34, 1.34.0, 1.34.1, 1.35, 1.35.0, 1.35.1,\n\n# 1.36, 1.36.0, 1.36.1, 1.37, 1.37.0, 1.38, 1.38.0, 1.39, 1.39.0,\n\n# 1.40, 1.40.0, 1.41, 1.41.0\n\n#\n\n# NOTE: If you add a new major 1.x version in Boost_ADDITIONAL_VERSIONS you should\n\n# add both 1.x and 1.x.0 as shown above.  Official Boost include directories\n\n# omit the 3rd version number from include paths if it is 0 although not all\n\n# binary Boost releases do so.\n\n#\n\n# SET(Boost_ADDITIONAL_VERSIONS \"1.78\" \"1.78.0\" \"1.79\" \"1.79.0\")\n\n#\n\n# ===================================== ============= ========================\n\n#\n\n# Variables used by this module, they can change the default behaviour and\n\n# need to be set before calling find_package:\n\n#\n\n#   Boost_USE_MULTITHREADED      Can be set to OFF to use the non-multithreaded\n\n#                                boost libraries.  If not specified, defaults\n\n#                                to ON.\n\n#\n\n#   Boost_USE_STATIC_LIBS        Can be set to ON to force the use of the static\n\n#                                boost libraries. Defaults to OFF.\n\n#\n\n# Other Variables used by this module which you may want to set.\n\n#\n\n#   Boost_ADDITIONAL_VERSIONS    A list of version numbers to use for searching\n\n#                                the boost include directory.  Please see\n\n#                                the documentation above regarding this\n\n#                                annoying, but necessary variable :(\n\n#\n\n#   Boost_DEBUG                  Set this to TRUE to enable debugging output\n\n#                                of FindBoost.cmake if you are having problems.\n\n#                                Please enable this before filing any bug\n\n#                                reports.\n\n#\n\n#   Boost_DETAILED_FAILURE_MSG   FindBoost doesn't output detailed information\n\n#                                about why it failed or how to fix the problem\n\n#                                unless this is set to TRUE or the REQUIRED\n\n#                                keyword is specified in find_package().\n\n#                                  [Since CMake 2.8.0]\n\n# \n\n#   Boost_COMPILER               Set this to the compiler suffix used by Boost\n\n#                                (e.g. \"-gcc43\") if FindBoost has problems finding\n\n#                                the proper Boost installation\n\n#\n\n# These last three variables are available also as environment variables:\n\n#\n\n#   BOOST_ROOT or BOOSTROOT      The preferred installation prefix for searching for\n\n#                                Boost.  Set this if the module has problems finding\n\n#                                the proper Boost installation.\n\n#\n\n#   BOOST_INCLUDEDIR             Set this to the include directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#\n\n#   BOOST_LIBRARYDIR             Set this to the lib directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#\n\n# Variables defined by this module:\n\n#\n\n#   Boost_FOUND                         System has Boost, this means the include dir was\n\n#                                       found, as well as all the libraries specified in\n\n#                                       the COMPONENTS list.\n\n#\n\n#   Boost_INCLUDE_DIRS                  Boost include directories: not cached\n\n#\n\n#   Boost_INCLUDE_DIR                   This is almost the same as above, but this one is\n\n#                                       cached and may be modified by advanced users\n\n#\n\n#   Boost_LIBRARIES                     Link to these to use the Boost libraries that you\n\n#                                       specified: not cached\n\n#\n\n#   Boost_LIBRARY_DIRS                  The path to where the Boost library files are.\n\n#\n\n#   Boost_VERSION                       The version number of the boost libraries that\n\n#                                       have been found, same as in version.hpp from Boost\n\n#\n\n#   Boost_LIB_VERSION                   The version number in filename form as\n\n#                                       it's appended to the library filenames\n\n#\n\n#   Boost_MAJOR_VERSION                 major version number of boost\n\n#   Boost_MINOR_VERSION                 minor version number of boost\n\n#   Boost_SUBMINOR_VERSION              subminor version number of boost\n\n#\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS    [WIN32 Only] You can call\n\n#                                       add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#                                       to have diagnostic information about Boost's\n\n#                                       automatic linking outputted during compilation time.\n\n#\n\n# For each component you specify in find_package(), the following (UPPER-CASE)\n\n# variables are set.  You can use these variables if you would like to pick and\n\n# choose components for your targets instead of just using Boost_LIBRARIES.\n\n#\n\n#   Boost_${COMPONENT}_FOUND            True IF the Boost library \"component\" was found.\n\n#\n\n#   Boost_${COMPONENT}_LIBRARY          Contains the libraries for the specified Boost\n\n#                                       \"component\" (includes debug and optimized keywords\n\n#                                       when needed).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2009 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n\n############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#######################################################################\n\n# For downward compatibility with CMake 2.6.0 the VERSION_LESS\n\n# functionality is being replaced with the help of following MACRO\n\n#\n\n# Input: a_in - value, not variable\n\n#        b_in - value, not variable\n\n#        result_out - variable with value:\n\n#                         -1 : a_in <  b_in\n\n#                          0 : a_in == b_in\n\n#                          1 : a_in >  b_in\n\n#\n\n# Written by James Bigler.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Since SEPARATE_ARGUMENTS using ' ' as the separation token,\n\n# replace '.' with ' ' to allow easy tokenization of the string.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Check the size of each list to see if they are equal.\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Pad the shorter list with zeros.\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Note that range needs to be one less than the length as the for\n\n# loop is inclusive (silly CMake).\n",
        "Line" : 221,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# a is shorter\n",
        "Line" : 224,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# b is shorter\n",
        "Line" : 229,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# PAD out if we need to\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Since shorter is an alias for b, we need to get to it by by dereferencing shorter.\n",
        "Line" : 238,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Only continue to compare things as long as they are equal\n",
        "Line" : 246,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# LESS\n",
        "Line" : 249,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# GREATER\n",
        "Line" : 253,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "# Copy out the return result\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "######################################################################\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "######################################################################\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 285,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 290,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 294,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 298,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 305,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Remove superfluous \"debug\" / \"optimized\" keywords from\n\n# Boost_LIBRARY_DIRS\n",
        "Line" : 315,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 328,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\n\n# A convenience function for marking desired components\n\n# as found or not\n\n#\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#\n\n# End functions/macros\n\n#  \n\n#-------------------------------------------------------------------------------\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 378,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n",
        "Line" : 384,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 393,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 397,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 402,
        "CharPositionInLine" : 12
      },
      "34" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 409,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# in cache already\n",
        "Line" : 444,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Need to search for boost\n",
        "Line" : 463,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 467,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 477,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 486,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# If BOOST_ROOT was defined in the environment, use it.\n",
        "Line" : 506,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# If BOOSTROOT was defined in the environment, use it.\n",
        "Line" : 511,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# If BOOST_INCLUDEDIR was defined in the environment, use it.\n",
        "Line" : 516,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# If BOOST_LIBRARYDIR was defined in the environment, use it.\n",
        "Line" : 521,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR \n\n# ------------------------------------------------------------------------\n\n# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n",
        "Line" : 556,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Build a list of path suffixes for each version.\n",
        "Line" : 562,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 565,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 570,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "# For BoostPro's underscores (and others?)\n",
        "Line" : 581,
        "CharPositionInLine" : 8
      },
      "52" : {
        "Text" : "# First check the default ones \n",
        "Line" : 596,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 603,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 613,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n\n# Read the whole file:\n\n#\n",
        "Line" : 617,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 652,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 656,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 669,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# Good luck!\n",
        "Line" : 689,
        "CharPositionInLine" : 20
      },
      "60" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 690,
        "CharPositionInLine" : 35
      },
      "61" : {
        "Text" : "# Good luck!\n",
        "Line" : 691,
        "CharPositionInLine" : 20
      },
      "62" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 692,
        "CharPositionInLine" : 35
      },
      "63" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 700,
        "CharPositionInLine" : 38
      },
      "64" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 709,
        "CharPositionInLine" : 38
      },
      "65" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 712,
        "CharPositionInLine" : 10
      },
      "66" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 716,
        "CharPositionInLine" : 16
      },
      "67" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 720,
        "CharPositionInLine" : 16
      },
      "68" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 725,
        "CharPositionInLine" : 14
      },
      "69" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 769,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 808,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# Search first in the user specified locations \n",
        "Line" : 818,
        "CharPositionInLine" : 1
      },
      "72" : {
        "Text" : "# Consider system default pathes once custom search failed\n",
        "Line" : 842,
        "CharPositionInLine" : 1
      },
      "73" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 874,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 886,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# If the user requested an exact version of Boost, check\n\n# that. We already know that the Boost version we have is >= the\n\n# requested version.\n",
        "Line" : 910,
        "CharPositionInLine" : 6
      },
      "76" : {
        "Text" : "# If the user didn't specify a patchlevel, it's 0.\n",
        "Line" : 915,
        "CharPositionInLine" : 6
      },
      "77" : {
        "Text" : "# We'll set Boost_FOUND true again if we have an exact version match.\n",
        "Line" : 920,
        "CharPositionInLine" : 6
      },
      "78" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 934,
        "CharPositionInLine" : 6
      },
      "79" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 966,
        "CharPositionInLine" : 6
      },
      "80" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 987,
        "CharPositionInLine" : 6
      },
      "81" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_PATH may not exist.\n",
        "Line" : 990,
        "CharPositionInLine" : 6
      },
      "82" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1000,
        "CharPositionInLine" : 8
      },
      "83" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in it's requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1046,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# show the Boost_INCLUDE_DIRS AND Boost_LIBRARIES variables only in the advanced view\n",
        "Line" : 1059,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 85
    },
    "config/FindCorba.cmake" : {
      "ObjectId" : "b792257ff57afe271862874a4c0c7ff192e2da46",
      "LastModified" : "2011-05-24T15:17:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Detect CORBA using user's CORBA_IMPLEMENTATION\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for TAO and ACE\n",
        "Line" : 7,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "#note: capital T\n",
        "Line" : 9,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : "#note: small T\n",
        "Line" : 12,
        "CharPositionInLine" : 44
      },
      "4" : {
        "Text" : "# Copy flags:\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Flag used in rtt-corba-config.h\n",
        "Line" : 26,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Including a TAO header is sufficient to depend on this library.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# We noticed TAO depends on librt as well on Linux platforms\n",
        "Line" : 36,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Copy flags:\n",
        "Line" : 51,
        "CharPositionInLine" : 5
      },
      "9" : {
        "Text" : "# Flag used in rtt-corba-config.h\n",
        "Line" : 56,
        "CharPositionInLine" : 5
      },
      "10" : {
        "Text" : "# Including an Omniorb header is sufficient to depend on this library.\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Bail if we were required to find all components and missed at least one\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "config/FindEcos.cmake" : {
      "ObjectId" : "f91e901948c9e6260c2cbc9661db442ea30e0934",
      "LastModified" : "2009-06-04T09:09:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This macro is a dirty hack, Orocos specific. Don't base your macros on it, look into the other\n\n# Find*cmake files for better examples\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This script creates the following variables:\n\n#  Ecos_FOUND: Boolean that indicates if the package was found\n\n#  Ecos_INCLUDE_DIRS: Paths to the necessary header files\n\n#  Ecos_LIBRARIES: Package libraries\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "config/FindLcov.cmake" : {
      "ObjectId" : "8191c7aaa89baaa79ad99eb582a8562098f0b49a",
      "LastModified" : "2011-03-14T13:18:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding lcov.\n\n# The default CMake search process is used to locate files.\n\n#\n\n# This script creates the following variables:\n\n#\n\n#  LCOV_FOUND               Boolean that indicates if the package was found\n\n#  LCOV_LCOV_EXECUTABLE     Where to find the 'lcov' tool\n\n#  LCOV_GENHTML_EXECUTABLE  Where to find the 'genhtml' tool\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set LCOV_FOUND honoring the QUIET and REQUIRED arguments\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Advanced options for not cluttering the cmake UIs\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "config/FindLog4cpp.cmake" : {
      "ObjectId" : "04f4bcedbe7133c99532a79643cba52f35619a44",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding Log4cpp.\n\n# The default CMake search process is used to locate files.\n\n#\n\n# This script creates the following variables:\n\n#  LOG4CPP_FOUND: Boolean that indicates if the package was found\n\n#  LOG4CPP_INCLUDE_DIRS: Paths to the necessary header files\n\n#  LOG4CPP_LIBRARIES: Package libraries\n\n#  LOG4CPP_LIBRARY_DIRS: Path to package libraries\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set LOG4CPP_FOUND honoring the QUIET and REQUIRED arguments\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Output variables\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include dirs\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Libraries\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Link dirs\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Advanced options for not cluttering the cmake UIs\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "config/FindOmniORB.cmake" : {
      "ObjectId" : "56c98925985aec3ae90bc5ecbf8f285c5640e9ac",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find the omniORB libraries and include dir\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# OMNIORB4_INCLUDE_DIR  - Directories to include to use omniORB\n\n# OMNIORB4_LIBRARIES    - Files to link against to use omniORB\n\n# OMNIORB4_CLIENT_LIBRARIES    - Files to link against if you included an omniORB header\n\n# OMNIORB4_IDL_COMPILER\n\n# OMNIORB4_FOUND        - When false, don't try to use omniORB\n\n# OMNIORB4_DIR          - (optional) Suggested installation directory to search\n\n# OMNIORB_IDL_FLAGS     - (optional) Set flags for to use corba\n\n# OMNIORB_CPP_FLAGS     - (optional) Set flags for to use corba\n\n#\n\n# OMNIORB4_DIR can be used to make it simpler to find the various include\n\n# directories and compiled libraries when omniORB was not installed in the\n\n# usual/well-known directories (e.g. because you made an in tree-source\n\n# compilation or because you installed it in an \"unusual\" directory).\n\n# Just set OMNIORB4_DIR it to your specific installation directory\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#### For the list of required libraries for omniORB see\n\n# http://www.omniorb-support.com/pipermail/omniorb-list/2005-May/026666.html\n\n# Basically, look at\n\n#  - omniORB-4.0.5/README.*\n\n#  - omniORB-4.0.5/readmes/*\n\n# Platfrom dependencies might (only?) happen for Win32/VC++ (sigh):\n\n# \"Because of a bug in VC++, unless you require the dynamic interfaces, it\n\n#  is suggested that you use a smaller stub library called msvcstub.lib.\"\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  MESSAGE(${OMNITHREAD_LIB_EXT})\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# OMNIORB4_CLIENT_LIBRARIES\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# mandatory on FC2 and graal\n\n# mandatory on FC2 and graal\n",
        "Line" : 125,
        "CharPositionInLine" : 44
      },
      "6" : {
        "Text" : "# mandatory on FC2 and graal\n\n# mandatory on FC2 and graal\n",
        "Line" : 139,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : "#-DCORBA_IS_OMNIORB)\n",
        "Line" : 145,
        "CharPositionInLine" : 24
      },
      "8" : {
        "Text" : "# Bail if we were required to find all components and missed at least one\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Generate all files required for a corba server app.\n\n# ORO_ADD_CORBA_SERVERS( foo_SRCS foo_HPPS file.idl ... )\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CMake atrocity: if none of these OUTPUT files is used in a target in\n\n# the current CMakeLists.txt file, the ADD_CUSTOM_COMMAND is plainly\n\n# ignored and left out of the make files.\n",
        "Line" : 180,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 11
    },
    "config/FindPthread.cmake" : {
      "ObjectId" : "59c5a8dfdb42d79dec1b386058a1981e5df2e80c",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding libpthread/pthread.h\n\n# If the optional PTHREAD_ROOT_DIR environment variable exists, header files and\n\n# libraries will be searched in the PTHREAD_ROOT_DIR/include and PTHREAD_ROOT_DIR/lib\n\n# directories, respectively. Otherwise the default CMake search process will be\n\n# used.\n\n#\n\n# This script creates the following variables:\n\n#  PTHREAD_FOUND: Boolean that indicates if the package was found\n\n#  PTHREAD_INCLUDE_DIRS: Paths to the necessary header files\n\n#  PTHREAD_LIBRARIES: Package libraries\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get hint from environment variable (if any)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files to find\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libraries to find\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use location specified by environment variable\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Use default CMake search process\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "config/FindRTAI.cmake" : {
      "ObjectId" : "4bb14cb65d9987bb512c65afc2595f305b3eb7aa",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding RTAI/LXRT.\n\n# If the optional RTAI_ROOT_DIR environment variable exists, header files and\n\n# libraries will be searched in the RTAI_ROOT_DIR/include and RTAI_ROOT_DIR/lib\n\n# directories, respectively. Otherwise the default CMake search process will be\n\n# used.\n\n#\n\n# This script creates the following variables:\n\n#  RTAI_FOUND: Boolean that indicates if the package was found\n\n#  RTAI_INCLUDE_DIRS: Paths to the necessary header files\n\n#  RTAI_LIBRARIES: Package libraries\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get hint from environment variable (if any)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files to find\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libraries to find\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use location specified by environment variable\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Use default CMake search process\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If user provides Linux source dir, check and append it as well\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# We check for both the source dir or an installation dir:\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "config/FindTAO.cmake" : {
      "ObjectId" : "491920ff4d9c8319c18260ce271bd9f57880770f",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This Find function defines:\n\n# TAO_FOUND\n\n# TAO_INCLUDE_DIRS\n\n# TAO_LIBRARIES\n\n# TAO_CLIENT_LIBRARIES\n\n# TAO_DEFINITIONS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Verify that we got some ACE up in this joint\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# See if TAO_ROOT is not already set in CMake, ignore if hints are set correctly\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# See if TAO_ROOT is set in process environment\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# If ACE_ROOT is set, maybe TAO is there too\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If TAO_ROOT is available, set up our hints\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# See if headers are present.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set TAO_LIBRARY ala boost: debug;libdebug;optimized;lib\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(\"TAO_LIBRARY found: ${TAO_LIBRARY}\")\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#message(\"TAOD_LIBRARY found: ${TAOD_LIBRARY}\")\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# A test for seeing which version of TAO.. :-(\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# try to find orbsvcs. May be in two locations.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# See what components were requested\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# special case for the IDL compiler program\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# Find a TAO shared library\n",
        "Line" : 125,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Set TAO_LIBRARY ala boost: debug;libdebug;optimized;lib\n",
        "Line" : 128,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#Tweaking:\n",
        "Line" : 159,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# Mac OS X needs this define (or _POSIX_C_SOURCE) to pick up some type\n\n# definitions that ACE/TAO needs. Personally, I think this is a bug in\n\n# ACE/TAO, but ....\n",
        "Line" : 161,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Bail if we were required to find all components and missed at least one\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Generate all files required for a corba server app.\n\n# ORO_ADD_CORBA_SERVERS( foo_SRCS foo_HPPS file.idl ... ) \n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# From TAO 1.5 onwards, the _T files are no longer generated\n",
        "Line" : 199,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# CMake atrocity: if none of these OUTPUT files is used in a target in the current CMakeLists.txt file,\n\n# the ADD_CUSTOM_COMMAND is plainly ignored and left out of the make files.\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "config/FindXenomai.cmake" : {
      "ObjectId" : "8ea44c95129910fb2c2325af10834565d89f254b",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding the XENOMAI native skin.\n\n# If the optional XENOMAI_ROOT_DIR environment variable exists, header files and\n\n# libraries will be searched in the XENOMAI_ROOT_DIR/include and XENOMAI_ROOT_DIR/lib\n\n# directories, respectively. Otherwise the default CMake search process will be\n\n# used.\n\n#\n\n# This script creates the following variables:\n\n#  XENOMAI_FOUND: Boolean that indicates if the package was found\n\n#  XENOMAI_INCLUDE_DIRS: Paths to the necessary header files\n\n#  XENOMAI_LIBRARIES: Package libraries\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get hint from environment variable (if any)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files to find\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libraries to find\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use location specified by environment variable\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Use default CMake search process\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "config/FindXenomaiPosix.cmake" : {
      "ObjectId" : "94220858426e8d61f4b65e7f4879160f22636ae1",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding the XENOMAI Posix skin.\n\n# If the optional XENOMAI_ROOT_DIR environment variable exists, header files and\n\n# libraries will be searched in the XENOMAI_ROOT_DIR/include and XENOMAI_ROOT_DIR/lib\n\n# directories, respectively. Otherwise the default CMake search process will be\n\n# used.\n\n#\n\n# This script creates the following variables:\n\n#  XENOMAI_POSIX_FOUND: Boolean that indicates if the package was found\n\n#  XENOMAI_POSIX_INCLUDE_DIRS: Paths to the necessary header files\n\n#  XENOMAI_POSIX_LIBRARIES: Package libraries\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get hint from environment variable (if any)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header files to find\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libraries to find\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use location specified by environment variable\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Use default CMake search process\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Set the include dir variables and the libraries and let libfind_process do the rest.\n\n# NOTE: Singular variables for this library, plural for libraries this this lib depends on.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "config/FindXerces.cmake" : {
      "ObjectId" : "075132212e96e38fe975988aea899929aaa9639a",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# CMake script for finding XERCES.\n\n# If the optional XERCES_ROOT_DIR environment variable exists, header files and\n\n# libraries will be searched in the XERCES_ROOT_DIR/include and XERCES_ROOT_DIR/libs\n\n# directories, respectively. Otherwise the default CMake search process will be\n\n# used.\n\n#\n\n# This script creates the following variables:\n\n#  XERCES_FOUND: Boolean that indicates if the package was found\n\n#  XERCES_INCLUDE_DIRS: Paths to the necessary header files\n\n#  XERCES_LIBRARIES: Package libraries\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get hint from environment variable (if any)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search path for nonstandard locations\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find headers and libraries\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set Xerces_FOUND honoring the QUIET and REQUIRED arguments\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Output variables\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include dirs\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Libraries\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Advanced options for not cluttering the cmake UIs\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "config/LibFindMacros.cmake" : {
      "ObjectId" : "5c648ff6e3c876485b299b345aa5f96ae8e362fd",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Damn CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# NOTE: else case not included in original file\n",
        "Line" : 75,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 9
    },
    "config/SelectOneLibrary.cmake" : {
      "ObjectId" : "b1320c84cd53713844dec7a6b15a6e0238536093",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# As some libraries are actually a list of libraries (e.g. \"debug;xxx-d.lib;optimized;xxx.lib\")\n\n# and we can't deal with that in pkgconfig, we take\n\n# 1) the library for this build type, or\n\n# 2) the library if only one is listed, or\n\n# 3) the release version if available and the build type is one of the release types, or\n\n# 4) we error out.\n\n#\n\n# EXPECTED USAGE\n\n#\n\n#  SELECT_ONE_LIBRARY(\"Boost_THREAD_LIBRARY\" BOOST_THREAD_LIB)\n\n#  LIST(APPEND OROCOS-RTT_USER_LINK_LIBS ${BOOST_THREAD_LIB})\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# found nothing particular to this build type, but\n\n# for all release-related types, use release (if available)\n",
        "Line" : 32,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# these two if's have to be done separately for some reason ... :-(\n",
        "Line" : 35,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "config/check_depend.cmake" : {
      "ObjectId" : "3fb780ec674623ae377b36c4edce27bd6917f1aa",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Modules path (for searching FindXXX.cmake files)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###########################################################\n\n#                                                         #\n\n# Some global options we need to set here                 #\n\n#                                                         #\n\n###########################################################\n\n#\n\n# STATIC or SHARED\n\n#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# CORBA\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# CORBA Remote OperationCallers in C++\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Force remoting when CORBA is enabled.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Is modified by target selection below\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########################################################\n\n#                                                         #\n\n# Look for dependencies required by individual components #\n\n#                                                         #\n\n###########################################################\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Look for boost We look up all components in one place because this macro does\n\n# not support multiple invocations in some CMake versions.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Look for boost\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(STATUS \"Boost found in ${Boost_INCLUDE_DIR}\")  # already printed by find_package(Boost)\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# We don't link with boost here. It depends on the options set by the user.\n\n#list(APPEND OROCOS-RTT_LIBRARIES ${Boost_LIBRARIES} )\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Look for linux capabilities (7)\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Look for Xerces \n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If a nonstandard path is used when crosscompiling, uncomment the following lines\n\n# IF(NOT CMAKE_CROSS_COMPILE) # NOTE: There now exists a standard CMake variable named CMAKE_CROSSCOMPILING\n\n#   set(XERCES_ROOT_DIR /path/to/xerces CACHE INTERNAL \"\" FORCE) # you can also use set(ENV{XERCES_ROOT_DIR} /path/to/xerces)\n\n# ENDIF(NOT CMAKE_CROSS_COMPILE)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Look for Boost Uuid or libuuid\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Check for OS/Target specific dependencies:\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Setup flags for RTAI/LXRT\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Setup flags for Xenomai\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Input for .pc and .cmake generated files:\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Direct input only for .pc file:\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Setup flags for GNU/Linux\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# For libraries used in inline (fosi/template) code.\n",
        "Line" : 203,
        "CharPositionInLine" : 65
      },
      "22" : {
        "Text" : "# Setup flags for Mac-OSX\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Force OFF on mqueue transport on macosx\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# see also src/CMakeLists.txt as it adds the boost_thread library to OROCOS_RTT_LIBRARIES\n",
        "Line" : 235,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Setup flags for ecos\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# We can't really use 'UseEcos.cmake' because we're building a library\n\n# and not a final application\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Force OFF on mqueue transport on WIN32 platform\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "#--enable-all-export and --enable-auto-import are already set by cmake.\n\n#but we need it here for the unit tests as well.\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# The machine type is tested using compiler macros in rtt-config.h.in\n\n# Add found include dirs.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\n\n# Set compiler specific options\n\n#\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Disable line wrapping for g++ such that eclipse can parse the errors.\n",
        "Line" : 310,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#\n\n# Set flags for code coverage, and setup coverage target\n\n#\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# for required flags see\n\n# http://git.benboeckel.net/?p=chasmd.git;a=blob;f=CMakeLists.txt\n\n# http://www.cmake.org/Wiki/CTest:Coverage\n\n# man gcov\n",
        "Line" : 325,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# coverage\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# all coverage data\n",
        "Line" : 340,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# RTT-only coverage data\n",
        "Line" : 342,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# generate based on RTT-only data\n",
        "Line" : 344,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# todo dependancy of coverage on test?\n",
        "Line" : 349,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#\n\n# Check for Doxygen and enable documentation building\n\n#\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n# Detect CORBA using user's CORBA_IMPLEMENTATION\n\n#\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 41
    },
    "config/rtt_macros.cmake" : {
      "ObjectId" : "845f3b29495f82ed27ded4b49b8aaabdc6ed5c25",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Include and link against required stuff\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# RTT supplies header files which should be included when \n\n# using RTT. Each subdir should use this macro\n\n# to supply its header-files.\n\n#\n\n# Usage: GLOBAL_ADD_INCLUDE( RELATIVE_LOCATION hpp1, hpp2 ...)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Sources should add themselves by calling 'GLOBAL_ADD_SRC' \n\n# instead of 'ADD_LIBRARY' in CMakeLists.txt.\n\n#\n\n# This gives a centralised location where all sources are registered\n\n# and lets us make the library in just one place.\n\n#\n\n#\n\n# Usage: GLOBAL_ADD_SRC( src1 src2 src3 )\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Usage: ADD_RTT_TYPEKIT( name version file1.cpp [file2.cpp...] )\n\n#\n\n# Requires: OROCOS_TARGET, \n\n#           PROJ_BINARY_DIR (optional, if given plugin is also installed in PROJ_BINARY_DIR/orocos/types ),\n\n#           RTT_DEFINITIONS (optional, added as COMPILE_DEFINITIONS to target's properties).\n\n#\n\n# The resulting CMake target's name is '${name}-${OROCOS_TARGET}_plugin'\n\n# The resulting filename is '${name}-${OROCOS_TARGET}[.dll|.so|...]'\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note: typkits don't get the symlinks\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Only copy if it was built:\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# In win32, we don't know which one will be built, so we prefix it with 'if exist', which is not portable.\n\n# Only the first comment is displayed, so its a non-filename specific comment.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#\n\n# Usage: ADD_RTT_PLUGIN( name version file1.cpp [file2.cpp...] )\n\n#\n\n# Requires: OROCOS_TARGET, \n\n#           PROJ_BINARY_DIR (optional, if given plugin is also installed in PROJ_BINARY_DIR/orocos/plugins ),\n\n#           RTT_DEFINITIONS (optional, added as COMPILE_DEFINITIONS to target's properties).\n\n#           DLL_EXPORT_PREFIX (optional, defines the symbol RTT_${UDLL_EXPORT_PREFIX}_DLL_EXPORT used for DLL import/export symbols on win32 \n\n#\n\n# The resulting CMake target's name is '${name}-${OROCOS_TARGET}_plugin'\n\n# The resulting filename is '${name}-${OROCOS_TARGET}[.dll|.so|...]'\n\n#\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Note: plugins do get the symlinks\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# In win32, we don't know which one will be built, so we prefix it with 'if exist', which is not portable.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 10
    },
    "doc/AnyToPNG.cmake" : {
      "ObjectId" : "3e10530e1a783851df41ddb7edc3c32c9e46a3d0",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SEPARATE_ARGUMENTS( ARGN )\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Create the target directory.\n\n#MESSAGE( \"Processing ${CMAKE_CURRENT_BINARY_DIR}/${_current_FILE}\" )\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#MESSAGE( \"Converting ${_current_FILE} to ${CMAKE_CURRENT_BINARY_DIR}/${_current_PNGFILE}\" )\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#MESSAGE( \"Converting ${_current_FILE} to ${_current_PNGFILE}\" )\n",
        "Line" : 28,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "#MESSAGE( \"Copying ${_current_FILE} to ${CMAKE_CURRENT_BINARY_DIR}/${_current_PNGFILE}\" )\n",
        "Line" : 40,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : "#MESSAGE( \"Processing RESULT is: ${${RESULT}}\" )\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "d3b14f436827f617329ea9b628a5f7913dcae764",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#list the xml files:\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "doc/DocBookToHTML.cmake" : {
      "ObjectId" : "fe888ddf09e071090155a08d698bb1e30cf23153",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Usage : DOCBOOK_TO_HTML( stylesheet [CATALOG catalog1 ...] FILES source1.xml ... )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# process catalogs\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Detect break out of loop...\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#MESSAGE( \"Converting ${_current_FILE} to ${CMAKE_CURRENT_BINARY_DIR}/${_current_HTMLFILE}\" )\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#add_custom_target(dochtml DEPENDS ${_current_HTMLFILE} )\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "doc/DocBookToPDF.cmake" : {
      "ObjectId" : "de9d698dee6906868655304a31674d55cd0d9917",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Usage : DOCBOOK_TO_PDF( stylesheet [CATALOG catalog1 ...] FILES source1.xml ... )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect break out of loop...\n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#MESSAGE( \"Converting ${_current_FILE} to ${_current_PDFFILE}\" )\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#add_custom_target(docpdf DEPENDS ${_current_PDFFILE} )\n",
        "Line" : 40,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "doc/SvgToPDF.cmake" : {
      "ObjectId" : "c9527d4be4cc092e120b359b705911ea97434d5e",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SEPARATE_ARGUMENTS( ARGN )\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Create the target directory.\n\n#MESSAGE( \"Processing ${CMAKE_CURRENT_BINARY_DIR}/${_current_FILE}\" )\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#MESSAGE( \"Converting ${_current_FILE} to ${_current_PDFFILE}\" )\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#MESSAGE( \"Processing RESULT is: ${${RESULT}}\" )\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "orocos-rtt-config.cmake" : {
      "ObjectId" : "296fd0602b6a55f432325b3c9d582e7081e2804a",
      "LastModified" : "2019-01-16T23:01:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################################################################\n\n#\n\n# CMake package configuration file for the OROCOS-RTT package.\n\n# This script imports targets and sets up the variables needed to use the package.\n\n# In case this file is installed in a nonstandard location, its location can be specified using the OROCOS-RTT_DIR cache\n\n# entry.\n\n#\n\n# find_package COMPONENTS represent OROCOS-RTT plugins such as scripting, marshalling or corba-transport.\n\n# The default search path for them is:\n\n#  /path/to/OROCOS-RTTinstallation/lib/orocos/plugins\n\n#  /path/to/OROCOS-RTTinstallation/lib/orocos/types\n\n#\n\n# For this script to find user-defined OROCOS-RTT plugins, the RTT_COMPONENT_PATH environment variable should be\n\n# appropriately set. E.g., if the plugin is located at /path/to/plugins/libfoo-plugin.so,\n\n# then add /path/to to RTT_COMPONENT_PATH\n\n#\n\n# This script sets the following variables:\n\n#  OROCOS-RTT_FOUND: Boolean that indicates if OROCOS-RTT was found\n\n#  OROCOS-RTT_INCLUDE_DIRS: Paths to the necessary header files\n\n#  OROCOS-RTT_LIBRARIES: Libraries to link against to use OROCOS-RTT\n\n#  OROCOS-RTT_LIBRARY_DIRS: Link directories for OROCOS-RTT\n\n#  OROCOS-RTT_DEFINITIONS: Definitions to use when compiling code that uses OROCOS-RTT\n\n#\n\n#  OROCOS-RTT_PATH: Path of the RTT installation directory (its CMAKE_INSTALL_PREFIX).\n\n#  OROCOS-RTT_COMPONENT_PATH: The component path of the installation (<prefix>/lib/orocos) + RTT_COMPONENT_PATH\n\n#  OROCOS-RTT_PLUGIN_PATH: OROCOS-RTT_PLUGINS_PATH + OROCOS-RTT_TYPES_PATH\n\n#  OROCOS-RTT_PLUGINS_PATH: The plugins path of the installation (<prefix>/lib/orocos/plugins) + RTT_COMPONENT_PATH * /plugins\n\n#  OROCOS-RTT_TYPES_PATH: The types path of the installation (<prefix>/lib/orocos/types) + RTT_COMPONENT_PATH * /types\n\n#\n\n#  OROCOS-RTT_CORBA_FOUND: Boolean that indicates if corba transport support is available\n\n#  OROCOS-RTT_CORBA_LIBRARIES: Libraries to link against to use OROCOS-RTT with corba transport support\n\n#\n\n#  OROCOS-RTT_MQUEUE_FOUND: Boolean that indicates if mqueue transport support is available\n\n#  OROCOS-RTT_MQUEUE_LIBRARIES: Libraries to link against to use OROCOS-RTT with mqueue transport support\n\n#\n\n#  OROCOS-RTT_VERSION: Package version\n\n#  OROCOS-RTT_VERSION_MAJOR: Package major version\n\n#  OROCOS-RTT_VERSION_MINOR: Package minor version\n\n#  OROCOS-RTT_VERSION_PATCH: Package patch version\n\n#\n\n#  OROCOS-RTT_USE_FILE_PATH: Path to package use file, so it can be included like so\n\n#                            include(${OROCOS-RTT_USE_FILE_PATH}/UseOROCOS-RTT.cmake)\n\n#  OROCOS-RTT_USE_FILE     : Allows you to write: include( ${OROCOS-RTT_USE_FILE} )\n\n#\n\n# This script additionally sets variables for each requested find_package COMPONENTS (OROCOS-RTT plugins).\n\n# For example, for the ''rtt-scripting'' plugin this would be:\n\n#  OROCOS-RTT_RTT-SCRIPTING_FOUND: Boolean that indicates if the component was found\n\n#  OROCOS-RTT_RTT-SCRIPTING_LIBRARY: Libraries to link against to use this component (notice singular _LIBRARY suffix)\n\n#\n\n# Note for advanced users: Apart from the OROCOS-RTT_*_LIBRARIES variables, non-COMPONENTS targets can be accessed by\n\n# their imported name, e.g., target_link_libraries(bar @IMPORTED_TARGET_PREFIX@orocos-rtt-gnulinux_dynamic).\n\n# This of course requires knowing the name of the desired target, which is why using the OROCOS-RTT_*_LIBRARIES\n\n# variables is recommended.\n\n#\n\n# Example usage:\n\n#  find_package(OROCOS-RTT 2.0.5 EXACT REQUIRED rtt-scripting) # Defines OROCOS-RTT_RTT-SCRIPTING_*\n\n#  find_package(OROCOS-RTT QUIET COMPONENTS rtt-transport-mqueue) # Defines OROCOS-RTT_RTT-TRANSPORT-MQUEUE_*\n\n#\n\n########################################################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################################################################\n\n#\n\n# Initialization\n\n#\n\n########################################################################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the default target operating system, if unspecified\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MUST use helper variable, otherwise not picked up !!!\n",
        "Line" : 70,
        "CharPositionInLine" : 43
      },
      "4" : {
        "Text" : "# By default, install libs in /target/ subdir in order to allow\n\n# multi-target installs.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Path to current file\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Include target specific config\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################################################################\n\n#\n\n# OROCOS-RTT core\n\n#\n\n########################################################################################################################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Only check for new modules if already found.\n\n# This test is very important, otherwise running this script multiple times in the same project will try to add multiple\n\n# imported targets with the same name, yielding a configuration-time error\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Import targets\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Core RTT libraries\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Typekit support\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Corba support\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Mqueue support\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Link directories\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Definitions\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Path to package use file\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Default component search path\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Append additional user-defined plugin search paths\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Append additional user-defined component search paths\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Confirm found, not cached !\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "########################################################################################################################\n\n#\n\n# Components: This is called each time a find_package is done:\n\n#\n\n########################################################################################################################\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Find components\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Find individual plugin\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Set *_FOUND variables and update a space-separated lists of found/missing components\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Signal error if required components are not found\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "########################################################################################################################\n\n#\n\n# Print success message\n\n#\n\n########################################################################################################################\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Basic message\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# List found components\n",
        "Line" : 233,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# List missing components\n",
        "Line" : 238,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Reset temporary variables to not mess up with later invocations\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "orocos-rtt.default.cmake" : {
      "ObjectId" : "1373243d6ad43e866df32836368723b838ebc2ef",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This file sets some defaults from your *source* directory, such that\n\n# for each build directory you create, the same defaults are used.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# BIG WARNING :\n\n#\n\n# DO NOT EDIT THIS FILE ! Instead: copy it to orocos-rtt.cmake (in the\n\n# top source directory) and edit that file to set your defaults.\n\n#\n\n# ie: cp orocos-rtt.default.cmake orocos-rtt.cmake ; edit orocos-rtt.cmake\n\n#\n\n# It will be included by the build system, right after the compiler has been\n\n# detected (see top level CMakeLists.txt file)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# BIG WARNING :\n\n#\n\n# This is *NOT* a CMake Toolchain file. See http://www.paraview.org/Wiki/CMake_Cross_Compiling\n\n# on how to create and one. This file is included *too late* in the cmake process\n\n# to function correctly as a toolchain file. ESPECIALLY: don't set a compiler\n\n# in this file, this will reset all your cached settings. Do not use this\n\n# file to setup a cross-compilation environment.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Uncomment to set additional include and library paths for: \n\n# Boost, Xerces, TAO, Omniorb etc.\n\n# The example below is for win32 targets.\n\n# \n\n# NOTE THE MANDATORY '/' instead of '\\' on win32 platforms !\n\n#\n\n# set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} \"C:/orocos/Boost-1_36_0/include\")\n\n# set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} \"C:/orocos/Boost-1_36_0/lib\")\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Sets the CMAKE_BUILD_TYPE to Release by default. This is not a normal\n\n# CMake flag which is not readable during configuration time.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# An option to make it easy to turn off all tests (defaults to ON)\n\n#\n\n# option( BUILD_TESTING \"Turn me off to disable compilation of all tests\" OFF )\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# OFF: SHARED  ON: SHARED AND STATIC (defaults to OFF)\n\n#\n\n# set(FORCE_BUILD_STATIC ON)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Set the target operating system. One of [lxrt gnulinux xenomai macosx win32]\n\n# You may leave this as-is or force a certain target by removing the if... logic.\n\n#\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MUST use helper variable, otherwise not picked up !!!\n",
        "Line" : 58,
        "CharPositionInLine" : 43
      },
      "9" : {
        "Text" : "# Useful for Windows/MSVC builds, sets all libraries and executables in one place.\n\n#\n\n# Uncomment to let output go to bin/ and libs/\n\n#\n\n# set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin CACHE PATH \"Bin directory\")\n\n# set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/libs CACHE PATH \"Lib directory\")\n\n#\n\n# And additional link directories.\n\n#\n\n# LINK_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/libs )\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "rtt/CMakeLists.txt" : {
      "ObjectId" : "2358cefbbd0407318f7f55a18a527303fc19692a",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n### List user options first before traversing sub-directories:\n\n### All user options must be defined in this file, sub-directories can\n\n### only read the options, not change them (Variable scope limits in cmake).\n\n###\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "### OS Abstraction\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for boost threads\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Notify unit tests that no assembly must be tested.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### Embedded\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Set build-local CFLAGS.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### Logger\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add to list of libraries in pkgconfig file\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# add to list of dependent link libraries\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "### Execution Engine\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "### Marshalling\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### Scripting\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "### RTT-Typekit\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "### TaskContext & Activities\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "### POSIX Message queues for IPC dataflow\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "### TLSF\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "### Use of Signal Class:\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "###\n\n#   Collect Sources:\n\n#\n\n### Subdirs must append srcs inhere.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "####\n\n#   Build Libraries:\n\n#\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Due to generation of some .h files in build directories, we also need to include some build dirs in our include paths.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "### Generate rtt-config.h : HAS NO ACCESS TO SUBDIRECTORY VARIABLES !!!\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "rtt/base/CMakeLists.txt" : {
      "ObjectId" : "65331911990ffebc46196e8c8737e52276c11b4f",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Exceptions:\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rtt/deployment/CMakeLists.txt" : {
      "ObjectId" : "cbdcc5ba788ddee0a1e291e4e7d98c8077959e26",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# See also plugin/CMakeLists.txt\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# This to reduce upgrade pains for in-tree upgraders:\n",
        "Line" : 13,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "rtt/extras/CMakeLists.txt" : {
      "ObjectId" : "f2272ce95b9034f9f04a1cb928e9f30f77ae0a3c",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/extras/dev/CMakeLists.txt" : {
      "ObjectId" : "8e53e02b9e638116c971e6b46d85dcf947e03b19",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/internal/CMakeLists.txt" : {
      "ObjectId" : "1028eae5dc3842a5a9e14c9ff358f80de63c4b27",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Exceptions:\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rtt/marsh/CMakeLists.txt" : {
      "ObjectId" : "f91374658c04b5651fef8cf84b680c92bb1172c1",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Due to generation of some .h files in build directories, we also need to include some build dirs in our include paths.\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# For rtt-typekit-config.h\n",
        "Line" : 7,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 2
    },
    "rtt/os/CMakeLists.txt" : {
      "ObjectId" : "4046290f0c13ce7b57612e15fafd05b52008a4e3",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Supported Operating Systems\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Supported Hardware\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Target specific config files\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "rtt/os/ecos/CMakeLists.txt" : {
      "ObjectId" : "7a2af0b758b3abd43705c82684b597f7d29a94a9",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/gnulinux/CMakeLists.txt" : {
      "ObjectId" : "188e8c010d7f2605afc7ca9fcc0e5c3a772c8314",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/lxrt/CMakeLists.txt" : {
      "ObjectId" : "1b67c03383c8a82799a595e1c647305b8f5fe88e",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/macosx/CMakeLists.txt" : {
      "ObjectId" : "a1dbb2b4ffc6ad9e4e8027ef63d1a6792b4c474a",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/oro_gcc/CMakeLists.txt" : {
      "ObjectId" : "f49b46141422b22c3c571c3301cdf8bc98bfe85c",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/oro_i386/CMakeLists.txt" : {
      "ObjectId" : "8a53b67d519483b4bb13847bd4fba395e64cd078",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/oro_msvc/CMakeLists.txt" : {
      "ObjectId" : "d2ae35e084735df7b352840e0bbf037b29f6f186",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/oro_noasm/CMakeLists.txt" : {
      "ObjectId" : "504d8b92b20b1dc1ea6459f729ab794dde5198e4",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/oro_powerpc/CMakeLists.txt" : {
      "ObjectId" : "ec2cc9b70c7b688895789fee7db02a44d591ebda",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/oro_x86_64/CMakeLists.txt" : {
      "ObjectId" : "9d793b11952bee4981c8388af0df4d66e5efb3a3",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/targets/CMakeLists.txt" : {
      "ObjectId" : "bad4d637be5a4fb3bb3da82cba93e84dd09d5e10",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/tlsf/Makefile" : {
      "ObjectId" : "d5beecb7efbce214e28caff534d0175a707ef28f",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CFLAGS+=-ftest-coverage -fprofile-arcs\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "rtt/os/win32/CMakeLists.txt" : {
      "ObjectId" : "358dc8ad2f2e8964b636cb3e24f03dcbb87928fd",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/os/xenomai/CMakeLists.txt" : {
      "ObjectId" : "e0b0dd59221663ac9d105ccb6e993668084b4ee4",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rtt/plugin/CMakeLists.txt" : {
      "ObjectId" : "2b9fadb7f5918f41285c3adedb71fdafc75acac1",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do this first.\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# This to reduce upgrade pains for in-tree upgraders:\n",
        "Line" : 14,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "rtt/scripting/CMakeLists.txt" : {
      "ObjectId" : "e31f88c564651e61e8c0b62c31662e1c260f2421",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Due to generation of some .h files in build directories, we also need to include some build dirs in our include paths.\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# For rtt-typekit-config.h\n",
        "Line" : 11,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 2
    },
    "rtt/transports/corba/CMakeLists.txt" : {
      "ObjectId" : "82694fe56a97ab9df079bd3aea6c1c7e9178a43f",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this option was set in global_rules.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Clang 2.9 needs this in order to get around undefined symbols of inlined operator>>= functions !\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# For rtt-typekit-config.h\n",
        "Line" : 19,
        "CharPositionInLine" : 62
      },
      "3" : {
        "Text" : "#  STRING(REPLACE \";\" \"  \" RTT_CORBA_CFLAGS2 \"${CORBA_CFLAGS}\")\n\n#  MESSAGE(STATUS \"YYY ${RTT_CORBA_CFLAGS2}\")\n\n#  SET(RTT_CORBA_CFLAGS \"${RTT_CFLAGS} ${RTT_CORBA_CFLAGS2}\")\n\n#  MESSAGE(STATUS \"YYY ${RTT_CORBA_CFLAGS}\")\n\n#  SET(RTT_CORBA_LINKFLAGS ${RTT_CFLAGS} ${CORBA_LDFLAGS})\n\n#  LINK_LIBRARIES( ${CORBA_LIBRARIES} )\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#This has been added in order to generate files before make -j<N>\n\n# make -j<N> causes corruption of generated files because of overwriting\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#MESSAGE(\"CPPS: ${CPPS}\")\n\n#MESSAGE(\"HPPS: ${HPPS}\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#GLOBAL_ADD_SRC( ${CPPS} )\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "rtt/transports/mqueue/CMakeLists.txt" : {
      "ObjectId" : "b6856c20547213d13c705919b4a3ef3042a6b24a",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this option was set in global_rules.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MESSAGE(\"CPPS: $ENV{GLOBAL_GENERATED_SRCS}\")\n\n#MESSAGE(\"HPPS: ${HPPS}\")\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Due to generation of some .h files in build directories, we also need to include some build dirs in our include paths.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# For rtt-typekit-config.h\n",
        "Line" : 19,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 4
    },
    "rtt/typekit/CMakeLists.txt" : {
      "ObjectId" : "ee052ecbad19d2708b99e52660a0d981f7a7a30f",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Due to generation of some .h files in build directories, we also need to include some build dirs in our include paths.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#SET_SOURCE_FILES_PROPERTIES( ${CPPS} PROPERTIES COMPILE_FLAGS \"-fvisibility=hidden\")    \n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "rtt/types/CMakeLists.txt" : {
      "ObjectId" : "08d628e20f408eaed382b8f8c77f5ede891b2a78",
      "LastModified" : "2014-04-22T02:15:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/AddUnitTest.cmake" : {
      "ObjectId" : "ada5738dd5b6ee042e1fd85916a82c6a3fa24bb2",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "332e5da19c0b94b95360b3538b9e2acb5608f815",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(TEST_LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# required for boost.test's use of _set_se_translator()\n",
        "Line" : 18,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "# Due to generation of some .h files in build directories, we also need to include some build dirs in our include paths.\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Setup fixtures library\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Work around unresolved symbols in tests when using CORBA *and* STATIC\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Work around unresolved symbols in tests when using MQUEUE *and* STATIC\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Copy over CPF files. It *must* be done like this to work on MSVC:\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# repeat for each test\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# This program requires the Unix 'system()' function and 'killall'. To be ported to windows.\n",
        "Line" : 131,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Launches our servers.\n",
        "Line" : 133,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# Launched before ctest.\n",
        "Line" : 138,
        "CharPositionInLine" : 11
      },
      "11" : {
        "Text" : "# This server is required to run when the corba-ipc-test runs\n",
        "Line" : 153,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# These tests require the Unix 'system()' function and 'killall'. To be ported to windows.\n",
        "Line" : 188,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# This server is required to run when the corba-mqueue-ipc-test runs\n",
        "Line" : 202,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "#This test must be last: it stops the corba servers (on Unix systems)\n",
        "Line" : 270,
        "CharPositionInLine" : 7
      },
      "15" : {
        "Text" : "# link to root build dir, to pick up CTest options when run from this dir\n",
        "Line" : 274,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "#ADD_DEPENDENCIES(check prep-cpf)\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "tests/testproject/plugins/CMakeLists.txt" : {
      "ObjectId" : "624ac50c99d21bbf5c6423993971c7594fb9a236",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allows us to build the plugin not in the debug/ or release/ subdir\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tests/testproject/types/CMakeLists.txt" : {
      "ObjectId" : "10e5ed62d5ebc104f26d5e7d762a878bd359cb89",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allows us to build the plugin not in the debug/ or release/ subdir\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tests/testtypes/types/CMakeLists.txt" : {
      "ObjectId" : "78e404b5d8bad720132db2ebc75a1a6a5b7b8d18",
      "LastModified" : "2018-05-04T13:42:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allows us to build the plugin not in the debug/ or release/ subdir\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 60,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2467
}