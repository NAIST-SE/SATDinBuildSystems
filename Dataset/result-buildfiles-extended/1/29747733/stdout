{
  "Repository" : "29747733",
  "Revision" : "HEAD",
  "ObjectId" : "b92e0a8b77fe59cd2311428b5feb2974ae986c91",
  "CommitTime" : "2019-04-17T20:23:02Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "37564f32ccaba9eb48813273db689cf7a609d603",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(CMAKE_VERBOSE_MAKEFILE ON)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set when installed via make install\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################\n\n# Compiled binaries folders #\n\n#############################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###########\n\n# Version #\n\n###########\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Appended to the X.Y.Z version format. For example \"-rc1\" or an empty string\n",
        "Line" : 37,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "#  If a relative path is specified, it is treated as relative to the $<INSTALL_PREFIX>\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set OPEN62541_VER_COMMIT\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#################\n\n# Build Options #\n\n#################\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Set default build type.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Platform. This is at the beginning in case the architecture changes some UA options\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# select some default architectures which should be included\n",
        "Line" : 77,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Create a list of ifdefs for all the architectures.\n\n# This is needed to enable a default architecture if none is selected through gcc compiler def.\n\n# Especially if someone is using the amalgamated file on Linux/Windows he should not need to define an architecture.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#to make it easier to append later the && symbol\n",
        "Line" : 128,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Options\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Namespace Zero\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# For the full NS0 we need a stack size of 8MB (as it is default on linux)\n\n# See https://github.com/open62541/open62541/issues/1326\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# It should not be possible to enable events without enabling subscriptions and full ns0\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Force enable options not passed in the build script, to also fuzzy-test this code\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Advanced options\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Semaphores/file system may not be available on embedded devices. It can be\n\n# disabled with the following option\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build options for debugging\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Build Targets\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# oss-fuzz already defines this by default\n",
        "Line" : 315,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Advanced Build Targets\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Building shared libs (dll, so). This option is written into ua_config.h.\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Warn if experimental features are enabled\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "########################\n\n# Linting during build #\n\n########################\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "######################\n\n# External Libraries #\n\n######################\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Force compilation with as C++\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# We need the UINT32_C define\n",
        "Line" : 377,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# The recommended way is to install mbedtls via the OS package manager. If\n\n# that is not possible, manually compile mbedTLS and set the cmake variables\n\n# defined in /tools/cmake/FindMbedTLS.cmake.\n",
        "Line" : 382,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "#####################\n\n# Compiler Settings #\n\n#####################\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Compiler\n",
        "Line" : 395,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# clang doesn't like the use of static inline methods inside static inline methods\n",
        "Line" : 398,
        "CharPositionInLine" : 42
      },
      "34" : {
        "Text" : "# may happen in the nodeset compiler when complex values are directly encoded\n",
        "Line" : 399,
        "CharPositionInLine" : 44
      },
      "35" : {
        "Text" : "# some methods may require unused arguments to cast to a method pointer\n",
        "Line" : 400,
        "CharPositionInLine" : 42
      },
      "36" : {
        "Text" : "# fewer compiler assumptions about pointer types\n",
        "Line" : 410,
        "CharPositionInLine" : 41
      },
      "37" : {
        "Text" : "# recommended for multi-threaded C code, also in combination with C++ code\n",
        "Line" : 411,
        "CharPositionInLine" : 33
      },
      "38" : {
        "Text" : "# more performant stack protector, available since gcc 4.9\n\n# increased reliability of stack overflow detection, available since gcc 8\n",
        "Line" : 416,
        "CharPositionInLine" : 54
      },
      "39" : {
        "Text" : "# future use (control flow integrity protection)\n",
        "Line" : 418,
        "CharPositionInLine" : 60
      },
      "40" : {
        "Text" : "# IPO requires too much memory for unit tests\n\n# GCC docu recommends to compile all files with the same options, therefore ignore it completely\n",
        "Line" : 421,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# needed to check if IPO is supported (check needs cmake > 3.9)\n",
        "Line" : 424,
        "CharPositionInLine" : 12
      },
      "42" : {
        "Text" : "# needed as long as required cmake < 3.9\n",
        "Line" : 426,
        "CharPositionInLine" : 46
      },
      "43" : {
        "Text" : "# Inter Procedural Optimization / Link Time Optimization (should be same as -flto)\n",
        "Line" : 428,
        "CharPositionInLine" : 55
      },
      "44" : {
        "Text" : "# Linker\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# cmake sets -rdynamic by default\n",
        "Line" : 445,
        "CharPositionInLine" : 46
      },
      "46" : {
        "Text" : "# Debug\n",
        "Line" : 447,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Add default sanitizer settings when using clang and Debug build.\n\n# This allows e.g. CLion to find memory locations for SegFaults\n",
        "Line" : 450,
        "CharPositionInLine" : 12
      },
      "48" : {
        "Text" : "# run-time buffer overflow detection (needs at least -O1)\n",
        "Line" : 460,
        "CharPositionInLine" : 45
      },
      "49" : {
        "Text" : "# Strip release builds\n",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# remove stack-protector with MinSizeRel\n",
        "Line" : 467,
        "CharPositionInLine" : 8
      },
      "51" : {
        "Text" : "# these settings reduce the binary size by ~2kb\n",
        "Line" : 483,
        "CharPositionInLine" : 12
      },
      "52" : {
        "Text" : "# Compiler warnings, error on warning\n",
        "Line" : 497,
        "CharPositionInLine" : 56
      },
      "53" : {
        "Text" : "#########################\n\n# Generate Main Library #\n\n#########################\n",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Historizing needs to be included before server_config.h\n",
        "Line" : 544,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# TODO: make client optional\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# services\n",
        "Line" : 627,
        "CharPositionInLine" : 16
      },
      "57" : {
        "Text" : "# client\n",
        "Line" : 637,
        "CharPositionInLine" : 16
      },
      "58" : {
        "Text" : "# dependencies\n",
        "Line" : 646,
        "CharPositionInLine" : 16
      },
      "59" : {
        "Text" : "# prepend in list, otherwise it complains that winsock2.h has to be included before windows.h\n",
        "Line" : 746,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "#########################\n\n# Generate source files #\n\n#########################\n",
        "Line" : 767,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# standard-defined data types\n",
        "Line" : 823,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# transport data types\n",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# statuscode explanation\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Header containing defines for all NodeIds\n",
        "Line" : 854,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# we need a custom target to avoid that the generator is called concurrently and\n\n# thus overwriting files while the other thread is compiling\n",
        "Line" : 862,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# single-file release\n",
        "Line" : 870,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# stack protector and optimization needs to be disabled for the huge ns0 file, otherwise debian packaging fails due to long build times.\n\n# We also disable optimization on Appveyor builds, since they take almost an hour otherwise\n",
        "Line" : 908,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# List of compilers which have problems with the huge ns0 optimization\n",
        "Line" : 912,
        "CharPositionInLine" : 12
      },
      "69" : {
        "Text" : "#####################\n\n# Build the Library #\n\n#####################\n",
        "Line" : 919,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# make sure the open62541_amalgamation target builds before so that amalgamation is finished and it is not executed again for open62541-object\n\n# and thus may overwrite the amalgamation result during multiprocessor compilation\n\n# the header is already a dependency of open62541 target itself\n",
        "Line" : 937,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# the only directory that needs to be included if open62541 (amalgameted) target from\n\n# the build directory is ${PROJECT_BINARY_DIR}, that contains the generated open62541.h\n",
        "Line" : 948,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Declare include directories\n",
        "Line" : 982,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Public includes\n",
        "Line" : 997,
        "CharPositionInLine" : 4
      },
      "74" : {
        "Text" : "# Private includes\n",
        "Line" : 1005,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# Option-specific includes\n",
        "Line" : 1012,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Ensure that the open62541::open62541 alias can be used inside open62541's build\n",
        "Line" : 1019,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Export Symbols\n",
        "Line" : 1022,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Generate properly versioned shared library links on Linux\n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "##################################\n\n#     Architectures changes      #\n\n##################################\n",
        "Line" : 1032,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# DLL requires linking to dependencies\n",
        "Line" : 1050,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "##########################\n\n# Build Selected Targets #\n\n##########################\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# always include, builds with make doc\n",
        "Line" : 1057,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Cannot compile tests with amalgamation. Not prepared for single header include\n",
        "Line" : 1062,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "# Cannot compile tests with amalgamation. Amalgamation uses the default plugins, not the testing plugins\n",
        "Line" : 1070,
        "CharPositionInLine" : 8
      },
      "85" : {
        "Text" : "########################\n\n# Linting as target    #\n\n########################\n",
        "Line" : 1087,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "##########################\n\n# Installation           #\n\n##########################\n\n# invoke via `make install`\n\n# specify install location with `-DCMAKE_INSTALL_PREFIX=xyz`\n\n# Enable shared library with `-DBUILD_SHARED_LIBS=ON`\n",
        "Line" : 1092,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# This list of components allows to define a find_package requirement.\n\n# E.g.:\n\n# find_package(open62541 0.4.0 REQUIRED COMPONENTS Events Methods FullNamespace)\n",
        "Line" : 1103,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# export library (either static or shared depending on BUILD_SHARED_LIBS)\n",
        "Line" : 1144,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Our default way of installation is the non-amalgamated version.\n\n# See also https://github.com/open62541/open62541/pull/2292#discussion_r241106424\n",
        "Line" : 1159,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# Recreate the include folder structure from the source also in /usr/lib/include/open62541\n",
        "Line" : 1223,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Construct a relative path by replacing any occurence of the absolute path\n",
        "Line" : 1237,
        "CharPositionInLine" : 8
      },
      "92" : {
        "Text" : "# Export amalgamated header open62541.h which is generated due to build of \n\n# open62541-object\n",
        "Line" : 1250,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "##################################\n\n# Visual studio solution folders #\n\n##################################\n",
        "Line" : 1257,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 94
    },
    "arch/CMakeLists.txt" : {
      "ObjectId" : "917290876c7f79ae1e89f89317cac8469ee39546",
      "LastModified" : "2018-12-05T08:49:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#to have access to ua_network_tcp.h\n",
        "Line" : 3,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 1
    },
    "arch/eCos/CMakeLists.txt" : {
      "ObjectId" : "42c8480fdf5000e0b6e38caca80660ce231162c2",
      "LastModified" : "2019-01-02T12:14:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arch/freertosLWIP/CMakeLists.txt" : {
      "ObjectId" : "dc7416f2402cd4554f013b8708d87638eb5db38e",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arch/posix/CMakeLists.txt" : {
      "ObjectId" : "1d21d21bc2b5956f36ab4667481e858f91ff7b4b",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#TODO - Error on first make run if pthread is included conditional?\n",
        "Line" : 23,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 1
    },
    "arch/vxworks/CMakeLists.txt" : {
      "ObjectId" : "810bb12f65d9aab74b811a258b7ec5858aea8e45",
      "LastModified" : "2019-01-02T12:14:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arch/wec7/CMakeLists.txt" : {
      "ObjectId" : "96b76e725913bbdc5a5f29fcf4d535251fa40dc7",
      "LastModified" : "2019-01-02T12:14:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "arch/win32/CMakeLists.txt" : {
      "ObjectId" : "ef536edca000d66c22db2007d2ac855b2dfc9fa6",
      "LastModified" : "2019-01-02T12:14:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#append iphlpapi permanently. Problem: PUBSUB Flag is configured after execution.        \n\n#if(UA_ENABLE_DISCOVERY_MULTICAST OR UA_ENABLE_PUBSUB)\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#    ua_architecture_append_to_library(iphlpapi)\n\n#endif()\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "f15f5292834b13684ca737e48fdf22eaf51f81dc",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Doc from headers\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Doc from tutorial code\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compile it twice so that the contents pages are correct\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "e362d2f8bd2eb136def6d72bf405af7828daf79c",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This examples folder can also be built standalone.\n\n# First install open62541 using `make install` then\n\n# copy this folder to any other location and call CMake directly:\n\n#\n\n# cp -r open62541/examples $HOME/open62541_examples\n\n# cd $HOME/open62541_examples\n\n# mkdir build && cd build\n\n# cmake -DUA_NAMESPACE_ZERO=FULL ..\n\n# make -j\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Examples are built standalone. Find installed open62541\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# define empty function. We don't need it in standalone\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Required for common.h header file used in examples\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#############################\n\n# Compiled binaries folders #\n\n#############################\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############\n\n# Tutorials #\n\n#############\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##################\n\n# Example Server #\n\n##################\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##################\n\n# Example Client #\n\n##################\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "####################\n\n# Feature Examples #\n\n####################\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# common.h\n",
        "Line" : 154,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "####################\n\n#  Example PubSub  #\n\n####################\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "examples/nodeset/CMakeLists.txt" : {
      "ObjectId" : "c4b612d911d59869ff7542b5c8f0068a306a5668",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####################\n\n# Nodeset Examples #\n\n####################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################\n\n# Custom XML      #\n\n###################\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# needed or cmake doesn't recognize dependencies of generated files\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# generate namespace from XML file\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# standalone examples build expects already installed Opc.Ua.NodeSet2.Minimal.xml\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The .csv file can be created from within UaModeler or manually\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###################\n\n# PLCopen Nodeset #\n\n###################\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# PLCopen requires the full ns0 as basis\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate types and namespace for DI\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# generate PLCopen namespace which is using DI\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# PLCopen does not define custom types. Only generate the nodeset\n",
        "Line" : 93,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# PLCopen depends on the di nodeset, which must be generated before\n",
        "Line" : 95,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# POWERLINK requires the full ns0 as basis\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# generate powerlink namespace which is using DI\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# POWERLINK depends on the di nodeset, which must be generated before\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 15
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "35cacfa820f5e47ade6a89fc39c52ae7523393e8",
      "LastModified" : "2019-04-17T20:23:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Load CMake Packages\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_package(Threads REQUIRED)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CLang on Apple complains about many cases like this:\n\n# /Users/travis/build/open62541/open62541/tests/check_chunking.c:148:22: warning: implicit conversion changes signedness: 'size_t' (aka 'unsigned long') to 'intmax_t' (aka 'long') [-Wsign-conversion]\n\n#    ck_assert_int_eq(counter,9); //10 chunks allocated - callback called 4 times\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# ua_server_internal.h\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# testing_clock.h\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# #include <src_generated/<...>.h>\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# mbedtls includes\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#############################\n\n# Compiled binaries folders #\n\n#############################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use different plugins for testing\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Workaround some clang warnings in the uni tests\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Unit Test Definition Macro\n\n# For now we need to disable the libc freeres. See https://github.com/open62541/open62541/pull/1003#issuecomment-315045143\n\n# This also requires to disable the phtread cache with no-nptl-pthread-stackcache\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# the unit test are built directly on the open62541 object files. so they can\n\n# access symbols that are hidden/not exported to the shared library\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Test Server\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Test Client\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Test Encryption\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Tests for Nodeset Compiler\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "tests/fuzz/CMakeLists.txt" : {
      "ObjectId" : "53147b308ff675d2f44ffc3889ad894088bd7f8c",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ua_server_internal.h\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# testing_clock.h\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# oss-fuzz builds already include these flags\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use different plugins for testing\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the fuzzer test are built directly on the open62541 object files. so they can\n\n# access symbols that are hidden/not exported to the shared library\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add new fuzzers here\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "tests/nodeset-compiler/CMakeLists.txt" : {
      "ObjectId" : "153759aa16c63a6b2d745220db02610aba6d8d1b",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################\n\n# Test Companion Specs that need the full NS0 #\n\n###############################################\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate types and namespace for DI\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Generate types and namespace for ADI\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# generate PLCopen namespace which is using DI\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# PLCopen does not define custom types. Only generate the nodeset\n",
        "Line" : 48,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# PLCopen depends on the di nodeset, which must be generated before\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#generate testnodeset\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generate types and namespace for ADI\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "tools/cmake/AssignSourceGroup.cmake" : {
      "ObjectId" : "66da31522bf6f4906d6c92d51fbfb1857ec1e7b2",
      "LastModified" : "2019-01-02T12:14:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/CompilerFlags.cmake" : {
      "ObjectId" : "4ef257b1eb6234514330ddaa791189b6fb00ed49",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check if a C compiler flag is possible\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check if an untested C compiler flag is possible\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/cmake/FindCheck.cmake" : {
      "ObjectId" : "775dee828289f1815807d6404fd331f7b6b665d7",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find CHECK libraries\n\n#\n\n# This module defines:\n\n#  CHECK_FOUND - system has check\n\n#  CHECK_INCLUDE_DIRS - the check include directory\n\n#  CHECK_LIBRARIES - check library\n\n#\n\n# If you have libcheck installed in a non-standard place, you can define\n\n# CHECK_PREFIX to tell cmake where it is.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for CHECK include dir and libraries\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Hide advanced variables from CMake GUIs\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "tools/cmake/FindClangTools.cmake" : {
      "ObjectId" : "c3841f42e5ee0ba0c85772f0b3c8c7550c07fb0b",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Clang Tools\n\n#\n\n# This module defines\n\n#  CLANG_TIDY_PROGRAM, The  path to the clang tidy binary\n\n#  CLANG_TIDY_FOUND, Whether clang tidy was found\n\n#  CLANG_FORMAT_PROGRAM, The path to the clang format binary\n\n#  CLANG_FORMAT_FOUND, Whether clang format was found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/FindMbedTLS.cmake" : {
      "ObjectId" : "de86c79b2bd6f62dd1bde9aa606e2910903b9d99",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#check environment variable\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# oss-fuzz requires static linking of libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/cmake/FindSphinx.cmake" : {
      "ObjectId" : "cce3c56f418a68607038aa285a47c37048c770bc",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/FindValgrind.cmake" : {
      "ObjectId" : "6ca72e3743981c3da400da34b2df6e596e1bc157",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Valgrind.\n\n#\n\n# This module defines:\n\n#  VALGRIND_INCLUDE_DIR, where to find valgrind/memcheck.h, etc.\n\n#  VALGRIND_PROGRAM, the valgrind executable.\n\n#  VALGRIND_FOUND, If false, do not try to use valgrind.\n\n#\n\n# If you have valgrind installed in a non-standard place, you can define\n\n# VALGRIND_PREFIX to tell cmake where it is.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/Toolchain-QNX-6.5.0.cmake" : {
      "ObjectId" : "6ec077758dab8062cc24210fa6bd76955ccb22b2",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# (C) Copyright 2009 Johns Hopkins University (JHU), All Rights\n\n# Reserved.\n\n#\n\n# --- begin cisst license - do not edit ---\n\n# \n\n# This software is provided \"as is\" under an open source license, with\n\n# no warranty.  The complete license can be found in license.txt and\n\n# http://www.cisst.org/cisst/license.txt.\n\n# \n\n# --- end cisst license ---\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(CMAKE_IMPORT_LIBRARY_SUFFIX \".a\")\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/cmake/Toolchain-gcc-m32.cmake" : {
      "ObjectId" : "406209049d5e72764c070246b219b23834b68c09",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/cmake/Toolchain-mingw32.cmake" : {
      "ObjectId" : "ba500f1f28463c94d733bce2711a77356bd91e47",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#remove the runtime dependency for libgcc_s_sjlj-1.dll\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Which compilers to use for C and C++, and location of target\n\n# environment.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First look in standard location as used by Debian/Ubuntu/etc.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# First look in standard location as used by Debian/Ubuntu/etc.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# You can get a MinGW environment using the script at <http://mxe.cc>.\n\n# It downloads and builds MinGW and most of the dependencies for you.\n\n# You can use the toolchain file generated by MXE called `mxe-conf.cmake'\n\n# or you can use this file by adjusting the above and following paths.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Else fill in local path which the user will likely adjust.\n\n# This is the location assumed by <http://www.libsdl.org/extras/win32/cross/>\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Tell pkg-config not to look at the target environment's .pc files.\n\n# Setting PKG_CONFIG_LIBDIR sets the default search directory, but we have to\n\n# set PKG_CONFIG_PATH as well to prevent pkg-config falling back to the host's\n\n# path.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "tools/cmake/Toolchain-mingw64.cmake" : {
      "ObjectId" : "6dee6b4993a3e9e077f2ea3431f7710b216cc5d0",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#remove the runtime dependency for libgcc_s_sjlj-1.dll\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Which compilers to use for C and C++, and location of target\n\n# environment.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# First look in standard location as used by Debian/Ubuntu/etc.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Else fill in local path which the user will likely adjust.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Tell pkg-config not to look at the target environment's .pc files.\n\n# Setting PKG_CONFIG_LIBDIR sets the default search directory, but we have to\n\n# set PKG_CONFIG_PATH as well to prevent pkg-config falling back to the host's\n\n# path.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "tools/cmake/Toolchain-rpi.cmake" : {
      "ObjectId" : "5fc197d85e6f9a75b9dfd51f6c03794b7307e8e6",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -- How to cross compile for Raspberry Pi (on a 32bit host) -- \n\n# 1) get the toolchain\n\n# cd ~\n\n# git clone https://github.com/raspberrypi/tools\n\n# 2) export path to one of the compilers\n\n# export PATH=$PATH:~/tools/arm-bcm2708/arm-bcm2708hardfp-linux-gnueabi/bin/\n\n# 3) use this toolchain file \n\n# cmake -DCMAKE_TOOLCHAIN_FILE=../tools/cmake/Toolchain-rpi.cmake -DEXAMPLESERVER=ON ..\n\n# make\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/Toolchain-rpi64.cmake" : {
      "ObjectId" : "ce9381d361490dfac1593ab1ef84b80d5a90fdf2",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -- How to cross compile for Raspberry Pi (on a 64bit host) -- \n\n# 1) get the toolchain\n\n# cd ~\n\n# git clone https://github.com/raspberrypi/tools\n\n# 2) export path to one of the compilers\n\n# export PATH=$PATH:~/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/\n\n# 3) use this toolchain file \n\n# cmake -DCMAKE_TOOLCHAIN_FILE=../tools/cmake/Toolchain-rpi64.cmake -DEXAMPLESERVER=ON ..\n\n# make\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/cmake/linting_build.cmake" : {
      "ObjectId" : "1865544d326dff20a7322027a9872c5eb46c4365",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cpplint just gives warnings about coding style\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# clang-tidy has certain warnings as errors\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# cppcheck provides just warnings but checks \"all\" (for now) - huge CPU impact\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# \"include what you use\" requires additional configuration - ignore for now\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#set(CMAKE_C_INCLUDE_WHAT_YOU_USE \"${IWYU_EXE}\")\n\n#set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE \"${IWYU_EXE}\")\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "tools/cmake/linting_target.cmake" : {
      "ObjectId" : "202ac526dedb4ffd90e40038741e649952853b5b",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clang-tidy uses the compile_commands.json file for include dirs and other config\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# adds new target \"clang-format\" to enforce clang-format rules\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/cmake/macros_internal.cmake" : {
      "ObjectId" : "aa8d02460419f8b62905ef394521e17bbc35159e",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Add a new architecture to to the lists of available architectures\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Include folders to the compilation\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#Add a new header file to the architecture group\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Add a new header file to the architecture group at the beginning of it\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Add a new source file to the architecture group\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Add definitions to the compilations that are exclusive for the selected architecture\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Remove definitions from the compilations that are exclusive for the selected architecture\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Add libraries to be linked to the comnpilation that are exclusive for the selected architecture\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tools/cmake/macros_public.cmake" : {
      "ObjectId" : "0c9fe40e95e0231723a0443f8549c96b533c75f5",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# --------------- Generate NodeIDs header ---------------------\n\n#\n\n# Generates header file from .csv which contains defines for every\n\n# node id to be used instead of numeric node ids.\n\n#\n\n# The resulting files will be put into OUTPUT_DIR with the names:\n\n# - NAME.h\n\n#\n\n#\n\n# The following arguments are accepted:\n\n#   Options:\n\n#\n\n#   Arguments taking one value:\n\n#\n\n#   NAME            Full name of the generated files, e.g. di_nodeids\n\n#   TARGET_SUFFIX   Suffix for the resulting target. e.g. ids-di\n\n#   [TARGET_PREFIX] Optional prefix for the resulting target. Default `open62541-generator`\n\n#   ID_PREFIX       Prefix for the generated node ID defines, e.g. NS_DI\n\n#   [OUTPUT_DIR]    Optional target directory for the generated files. Default is '${PROJECT_BINARY_DIR}/src_generated'\n\n#   FILE_CSV        Path to the .csv file containing the node ids, e.g. 'OpcUaDiModel.csv'\n\n#\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default value for output dir\n",
        "Line" : 33,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Set default target prefix\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Replace dash with underscore to make valid c literal\n",
        "Line" : 42,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Make sure that the output directory exists\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Header containing defines for all NodeIds\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# --------------- Generate Datatypes ---------------------\n\n#\n\n# Generates Datatype definition based on the .csv and .bsd files of a nodeset.\n\n# The result of the generation will be C Code which can be compiled with the rest of the stack.\n\n# Some nodesets come with custom datatypes. These datatype structures first need to be\n\n# generated so that the nodeset can use these types.\n\n#\n\n# The resulting files will be put into OUTPUT_DIR with the names:\n\n# - NAME_generated.c\n\n# - NAME_generated.h\n\n# - NAME_generated_encoding_binary.h\n\n# - NAME_generated_handling.h\n\n#\n\n# The cmake resulting cmake target will be named like this:\n\n#   open62541-generator-${TARGET_SUFFIX}\n\n#\n\n# The following arguments are accepted:\n\n#   Options:\n\n#\n\n#   [BUILTIN]       Optional argument. If given, then builtin types will be generated.\n\n#   [INTERNAL]      Optional argument. If given, then the given types file is seen as internal file (e.g. does not require a .csv)\n\n#\n\n#   Arguments taking one value:\n\n#\n\n#   NAME            Full name of the generated files, e.g. ua_types_di\n\n#   TARGET_SUFFIX   Suffix for the resulting target. e.g. types-di\n\n#   [TARGET_PREFIX] Optional prefix for the resulting target. Default `open62541-generator`\n\n#   NAMESPACE_IDX   Namespace index of the nodeset, when it is loaded into the server. This index\n\n#                   is used for the node ids withing the types array and is currently not determined automatically.\n\n#                   Make sure that it matches the namespace index in the server.\n\n#   [OUTPUT_DIR]    Optional target directory for the generated files. Default is '${PROJECT_BINARY_DIR}/src_generated'\n\n#   FILE_CSV        Path to the .csv file containing the node ids, e.g. 'OpcUaDiModel.csv'\n\n#\n\n#   Arguments taking multiple values:\n\n#\n\n#   FILES_BSD        Path to the .bsd file containing the type definitions, e.g. 'Opc.Ua.Di.Types.bsd'. Multiple files can be\n\n#                   passed which will all combined to one resulting code.\n\n#   [FILES_SELECTED] Optional path to a simple text file which contains a list of types which should be included in the generation.\n\n#                   The file should contain one type per line. Multiple files can be passed to this argument.\n\n#\n\n#\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ------ Argument checking -----\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Set default value for output dir\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Set default target prefix\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# ------ Add custom command and target -----\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Make sure that the output directory exists\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Replace dash with underscore to make valid c literal\n",
        "Line" : 168,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# --------------- Generate Nodeset ---------------------\n\n#\n\n# Generates C code for the given NodeSet2.xml file.\n\n# This C code can be used to initialize the server.\n\n#\n\n# The resulting files will be put into OUTPUT_DIR with the names:\n\n# - ua_namespace_NAME.c\n\n# - ua_namespace_NAME.h\n\n#\n\n# The resulting cmake target will be named like this:\n\n#   open62541-generator-ns-${NAME}\n\n#\n\n# The following arguments are accepted:\n\n#   Options:\n\n#\n\n#   [INTERNAL]      Optional argument. If given, then the generated node set code will use internal headers.\n\n#\n\n#   Arguments taking one value:\n\n#\n\n#   NAME            Name of the nodeset, e.g. 'di'\n\n#   [TYPES_ARRAY]   Optional name of the types array containing the custom datatypes of this node set.\n\n#   [OUTPUT_DIR]    Optional target directory for the generated files. Default is '${PROJECT_BINARY_DIR}/src_generated'\n\n#   [ENCODE_BINARY_SIZE]    Optional array size for binary encoding extension objects.\n\n#   [IGNORE]        Optional file containing a list of node ids which should be ignored. The file should have one id per line.\n\n#   [TARGET_PREFIX] Optional prefix for the resulting target. Default `open62541-generator`\n\n#\n\n#   Arguments taking multiple values:\n\n#\n\n#   FILE            Path to the NodeSet2.xml file. Multiple values can be passed. These nodesets will be combined into one output.\n\n#   [DEPENDS_TYPES]   Optional list of types array which match with the DEPENDS_NS node sets. e.g. 'UA_TYPES;UA_TYPES_DI'\n\n#   [DEPENDS_NS]      Optional list of NodeSet2.xml files which are a dependency of this node set.\n\n#   [DEPENDS_TARGET]  Optional list of CMake targets this nodeset depends on.\n\n#\n\n#\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ------ Argument checking -----\n",
        "Line" : 252,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Set default value for output dir\n",
        "Line" : 261,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Set default target prefix\n",
        "Line" : 266,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# ------ Add custom command and target -----\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Replace dash with underscore to make valid c literal\n",
        "Line" : 302,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# Replace dash with underscore to make valid c literal\n",
        "Line" : 308,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# Make sure that the output directory exists\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# --------------- Generate Nodeset and Datatypes ---------------------\n\n#\n\n# Generates C code for the given NodeSet2.xml and Datatype file.\n\n# This C code can be used to initialize the server.\n\n#\n\n# This is a combination of the ua_generate_datatypes, ua_generate_nodeset, and\n\n# ua_generate_nodeid_header macros.\n\n# This function can also be used to just create a nodeset without datatypes by\n\n# omitting the CSV, BSD, and NAMESPACE_IDX parameter.\n\n# If only one of the previous parameters is given, all of them are required.\n\n#\n\n# It is possible to define dependencies of nodesets by using the DEPENDS argument.\n\n# E.g. the PLCOpen nodeset depends on the 'di' nodeset. Thus it is enough to just\n\n# pass 'DEPENDS di' to the function. The 'di' nodeset then first needs to be generated\n\n# with this function or with the ua_generate_nodeset function.\n\n#\n\n# The resulting cmake target will be named like this:\n\n#   open62541-generator-ns-${NAME}\n\n#\n\n# The following arguments are accepted:\n\n#\n\n#   Options:\n\n#\n\n#   INTERNAL        Include internal headers. Required if custom datatypes are added.\n\n#\n\n#   Arguments taking one value:\n\n#\n\n#   NAME            Short name of the nodeset. E.g. 'di'\n\n#   FILE_NS         Path to the NodeSet2.xml file. Multiple values can be passed. These nodesets will be combined into one output.\n\n#\n\n#   [FILE_CSV]      Optional path to the .csv file containing the node ids, e.g. 'OpcUaDiModel.csv'\n\n#   [FILE_BSD]      Optional path to the .bsd file containing the type definitions, e.g. 'Opc.Ua.Di.Types.bsd'. Multiple files can be\n\n#                   passed which will all combined to one resulting code.\n\n#   [NAMESPACE_IDX] Optional namespace index of the nodeset, when it is loaded into the server. This parameter is mandatory if FILE_CSV\n\n#                   or FILE_BSD is set. See ua_generate_datatypes function.\n\n#   [TARGET_PREFIX] Optional prefix for the resulting targets. Default `open62541-generator`\n\n#\n\n#   Arguments taking multiple values:\n\n#   [DEPENDS]       Optional list of nodeset names on which this nodeset depends. These names must match any name from a previous\n\n#                   call to this funtion. E.g. 'di' if you are generating the 'plcopen' nodeset\n\n#\n\n#\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ------ Argument checking -----\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Set default value for output dir\n",
        "Line" : 461,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Set default target prefix\n",
        "Line" : 465,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Generate Datatypes for nodeset\n",
        "Line" : 474,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Create a list of nodesets on which this nodeset depends on\n",
        "Line" : 498,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 27
    },
    "tools/packaging/CMakeLists.txt" : {
      "ObjectId" : "87fd02f5603903ad77e04589d9689e5134eefeae",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##########################\n\n# Packaging (DEB/RPM)    #\n\n##########################\n\n# invoke via `make package`\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#required\n",
        "Line" : 15,
        "CharPositionInLine" : 54
      },
      "CommentCount" : 2
    },
    "tools/ua2json/CMakeLists.txt" : {
      "ObjectId" : "0385292872a523d84a3175a76ca5d22fe46aa4ca",
      "LastModified" : "2019-04-05T12:17:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 33
  },
  "ElapsedTime" : 3324
}