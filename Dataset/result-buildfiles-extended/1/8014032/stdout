{
  "Repository" : "8014032",
  "Revision" : "HEAD",
  "ObjectId" : "519f917a88f583a2ed74689454bbb50ce223f465",
  "CommitTime" : "2018-12-03T00:30:25Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1cee91a05e829dc8a9edf6fcfa3388f456da7527",
      "LastModified" : "2015-02-27T23:08:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "VERSION.cmake" : {
      "ObjectId" : "3bcd49427ff4957ae95f2a4f3fb8a9ac341c9ca8",
      "LastModified" : "2018-04-07T15:42:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindDWARF.cmake" : {
      "ObjectId" : "d084bf25505a3336563cfbb643fe29b070c2391a",
      "LastModified" : "2015-02-27T23:08:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Dwarf\n\n# Find the dwarf.h header from elf utils\n\n#\n\n#  DWARF_INCLUDE_DIR - where to find dwarf.h, etc.\n\n#  DWARF_LIBRARIES   - List of libraries when using elf utils.\n\n#  DWARF_FOUND       - True if fdo found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 14,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# check if libdw have the dwfl_module_build_id routine,\n\n# i.e. if it supports the buildid mechanism to match binaries\n\n# to detached debug info sections (the -debuginfo packages in\n\n# distributions such as fedora). We do it against libelf\n\n# because, IIRC, some distros include libdw linked statically\n\n# into libelf.\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Check if we are in a Red Hat (RHEL) or Fedora system to tell\n\n# exactly which packages should be installed. Please send\n\n# patches for other distributions.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "267764b46bbf2d4e522a22249a7a9aff4dcacbfb",
      "LastModified" : "2015-02-27T23:08:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "634777f8c1b083a832ae83cacb51338cea869500",
      "LastModified" : "2015-02-27T23:08:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dwgrep/CMakeLists.txt" : {
      "ObjectId" : "18d0125245ee260d182eeece2edd0c260e103737",
      "LastModified" : "2015-02-27T23:08:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libzwerg/CMakeLists.txt" : {
      "ObjectId" : "e3c128b0fcbccaae344f833807e5caf87a280d61",
      "LastModified" : "2017-12-08T22:28:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Core pseudo-library.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dwarf pseudo-library.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# libzwerg version script\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The dependency between libzwerg.so and LibZwergVersionScript is\n\n# captured in generated Makefiles, so this rule runs before\n\n# libzwerg.so one.  But there's no direct dependency between the DSO\n\n# and its map file and the DSO thus doesn't get rebuilt.  Adding the\n\n# map file as direct dependence to ADD_LIBRARY doesn't help either.\n\n# Not even if we make this ADD_CUSTOM_COMMAND.\n\n#\n\n# So we have a little script that copies libzwerg.map to the build\n\n# directory if the one there is older, and if it is, it also deletes\n\n# libzwerg.so.  When building in-tree, this automatism doesn't work,\n\n# but the build itself doesn't break.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# libzwerg DSO\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "cc58da95402e30d5b35d8364a2ba7b42d00afd4e",
      "LastModified" : "2015-02-27T23:08:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 1184
}