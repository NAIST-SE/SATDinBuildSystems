{
  "Repository" : "11597",
  "Revision" : "HEAD",
  "ObjectId" : "6c3c64c02087951c27c0ae6ab4c78cd8265fce80",
  "CommitTime" : "2018-06-07T15:51:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1ede260448086a0d5c8bbc1e32f7dacbe9e9a8aa",
      "LastModified" : "2017-12-09T14:22:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/AddCompilationFlags.cmake" : {
      "ObjectId" : "09a26e2cdabbe4e898d79eadbcff83564778b656",
      "LastModified" : "2018-05-19T13:46:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default compilation flags.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile as C++11.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# To avoid a compilation error in vorbisfile.h with fseeko64.\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Compile in release mode by default.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Warnings and errors.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Be less pedantic in release builds for users.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Be more pedantic in debug mode for developers.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Platform-specific flags.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MinGW: disable the console by default.\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "cmake/AddConfigurationHeader.cmake" : {
      "ObjectId" : "de52650c9ff37539ed80033544c38ae16c272637",
      "LastModified" : "2018-01-21T16:38:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate config.h with useful configuration info.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/AddDefines.cmake" : {
      "ObjectId" : "765d499c39fdef6bca2994361d09f7ac25118374",
      "LastModified" : "2015-12-01T16:16:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Solarus-specific -D preprocessor constants.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Quest to launch if none is specified at runtime.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Directory where to write savegames and other files saved by quests.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Quest size.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/AddDependencies.cmake" : {
      "ObjectId" : "2fea10e4232de69d2f380c944348a37b381af824",
      "LastModified" : "2018-03-23T16:41:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file adds the necessary dependencies of the Solarus library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Whether LuaJIT should be used instead of vanilla Lua.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find dependencies.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Explicit link to libdl is needed for Lua on some systems.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Specify we are in a GL Context, else GLES2 would be used by default.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/AddGui.cmake" : {
      "ObjectId" : "9f1272951e790efb3fb25d511b61ab5e60cd96e9",
      "LastModified" : "2016-01-29T11:27:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Whether the user wants to build the launcher GUI additionally to the batch\n\n# executable (requires Qt).\n\n# Building the GUI is optional to allow systems to directly\n\n# run a game without a GUI launcher window.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The Solarus GUI executable has its own CMakeLists.txt file\n\n# because dependencies and includes are different.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/AddIncludeDirectories.cmake" : {
      "ObjectId" : "1affefe2c82ea5fa8a839a40870277cb9f9af1d6",
      "LastModified" : "2018-05-24T18:44:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include paths.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For config.h.\n",
        "Line" : 3,
        "CharPositionInLine" : 35
      },
      "2" : {
        "Text" : "# Third-party include paths, marked as system ones to disable their warnings.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# External include paths, marked as system ones to disable their warnings.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Before SDL2 because we want the sndfile.h of ModPlug.\n",
        "Line" : 15,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 5
    },
    "cmake/AddInstallTargets.cmake" : {
      "ObjectId" : "67eba8534de53dcd9f217632834e816356e4f84f",
      "LastModified" : "2017-12-09T14:22:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default installation directories.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle standard multi-architecture library directory names like x86_64-linux-gnu\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Install location for Debian-based systems\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Files to install with make install.\n\n# Install the shared library and the solarus-run executable.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Install headers: useful for projects that use Solarus as a library.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# For config.h.\n",
        "Line" : 27,
        "CharPositionInLine" : 41
      },
      "6" : {
        "Text" : "# Linux Manpage\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/AddSolarusExecutable.cmake" : {
      "ObjectId" : "1978371ae6b94e855837e05aea956e878a8d9d96",
      "LastModified" : "2017-12-09T14:22:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Source file of the solarus-run executable.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the Solarus icon in Windows.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/AddSolarusLibrary.cmake" : {
      "ObjectId" : "4935aa05d3d7086c1fa2742b7e5bdf9310e3c6fd",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Solarus library source files.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Additional source files for Apple systems.\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build the Solarus library.\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Configuration for OSX and iOS build and deployment.\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/AddSolarusVersion.cmake" : {
      "ObjectId" : "b1f5d30bf19e76a215fc7666e801977013a5c306",
      "LastModified" : "2017-12-09T14:22:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/AddUnitTests.cmake" : {
      "ObjectId" : "3f634b30f148a715372a86f36b1691b450fc3a04",
      "LastModified" : "2016-01-29T11:27:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit tests.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set up the root path on OSX testing target.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/apple/OSXBuild.cmake" : {
      "ObjectId" : "074d83bbc14eaa6a847ecc49db17109488201ea3",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####\n\n# By default, you will build a binary with the maximum of compatibility that your current version can provide.\n\n# You may want to produce an optimized (or exotic) binary instead of a standard one.\n\n# To do so, overload the following options :\n\n#\n\n# SOLARUS_ARCH represent the build (multi-)architecture.\n\n# SOLARUS_SYSROOT represent the path to the OSX SDK.\n\n# SOLARUS_DEPLOYMENT represent the oldest OSX version supported.\n\n#\n\n# Some options set to the cache also need the FORCE parameter for obscure reasons.\n\n#\n\n# Exportable to XCode.\n\n####\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build architectures.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Deployment version.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add a run-time search path for the bundle use case.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# LuaJIT workaround.\n\n# According to the LuaJIT doc, additional linker flags are needed with a 64bit build.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/apple/iOSBuild.cmake" : {
      "ObjectId" : "aff554d7b3fde61c57360b2c70893721ff95a56c",
      "LastModified" : "2017-12-09T14:22:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####\n\n# Copied from http://code.google.com/p/ios-cmake/ .\n\n#\n\n# This file is based off of the Platform/Darwin.cmake and Platform/UnixPaths.cmake\n\n# files which are included with CMake 2.8.4\n\n# It has been altered for iOS development\n\n#\n\n# Options:\n\n#\n\n# IOS_PLATFORM = OS (default) or SIMULATOR\n\n#   This decides if SDKS will be selected from the iPhoneOS.platform or iPhoneSimulator.platform folders\n\n#   OS - the default, used to build for iPhone and iPad physical devices, which have an arm arch.\n\n#   SIMULATOR - used to build for the Simulator platforms, which have an x86 arch.\n\n#\n\n# CMAKE_IOS_DEVELOPER_ROOT = automatic(default) or /path/to/platform/Developer folder\n\n#   By default this location is automatcially chosen based on the IOS_PLATFORM value above.\n\n#   If set manually, it will override the default location and force the user of a particular Developer Platform\n\n#\n\n# CMAKE_IOS_SDK_ROOT = automatic(default) or /path/to/platform/Developer/SDKs/SDK folder\n\n#   By default this location is automatcially chosen based on the CMAKE_IOS_DEVELOPER_ROOT value.\n\n#   In this case it will always be the most up-to-date SDK found in the CMAKE_IOS_DEVELOPER_ROOT path.\n\n#   If set manually, this will force the use of a specific SDK version\n\n####\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Standard settings\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Force the compilers to gcc for iOS\n\n#include (CMakeForceCompiler)\n\n#CMAKE_FORCE_C_COMPILER (gcc gcc)\n\n#CMAKE_FORCE_CXX_COMPILER (g++ g++)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip the platform compiler checks for cross compiling\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Hidden visibilty is required for cxx on iOS\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old build tree\n\n# (where install_name_tool was hardcoded) and where CMAKE_INSTALL_NAME_TOOL isn't in the cache\n\n# and still cmake didn't fail in CMakeFindBinUtils.cmake (because it isn't rerun)\n\n# hardcode CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did before, Alex\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Setup iOS platform\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check the platform selection and setup for developer root\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Setup iOS developer location\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Find and use the most recent iOS sdk\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# set the architecture for iOS - using ARCHS_STANDARD_32_BIT sets armv6,armv7 and appears to be XCode's standard.\n\n# The other value that works is ARCHS_UNIVERSAL_IPHONE_OS but that sets armv7 only\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# default to searching for frameworks first\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# only search the iOS sdks, not the remainder of the host filesystem\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/gcw-zero/gcw-zero.cmake" : {
      "ObjectId" : "8c391cd237cf69d0a7aebad4e2706f80d2ecdfd5",
      "LastModified" : "2016-01-29T11:27:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which C and C++ compiler to use\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET(CMAKE_EXE_LINKER_FLAGS \"-Wl,-rpath,./libs -Wl,\")\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS \"-D_REENTRANT -DGCWZERO  -fomit-frame-pointer -ffunction-sections -fsingle-precision-constant -G0  -mips32r2\")\n\n#SET(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\n#SET(CMAKE_CXX_FLAGS_RELEASE \"\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#SET(CMAKE_CXX_FLAGS_RELEASE \"-D_REENTRANT -DGCWZERO  -fomit-frame-pointer -ffunction-sections -fsingle-precision-constant -G0 -mips32r2\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#####\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/FindGLM.cmake" : {
      "ObjectId" : "2f5ac46f41ea429627557f14187712a15b6882a8",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindLuaJit.cmake" : {
      "ObjectId" : "206bfecae15d730bbb868ecd3d0994de9482832d",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate LuaJIT library\n\n# This module defines\n\n#  LUA51_FOUND, if false, do not try to link to Lua\n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# This module is similar to FindLua51.cmake except that it finds LuaJit instead.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 17,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 18,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 19,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindModPlug.cmake" : {
      "ObjectId" : "30a4c7126952ecb9ab40b4613b5538d4889e1f21",
      "LastModified" : "2018-05-22T04:45:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find modplug\n\n# Find the native modplug includes and libraries\n\n#\n\n#  MODPLUG_INCLUDE_DIRS - where to find modplug.h, etc.\n\n#  MODPLUG_LIBRARIES    - List of libraries when using libmodplug.\n\n#  MODPLUG_FOUND        - True if modplug found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindOgg.cmake" : {
      "ObjectId" : "56278e18a6342cf22402c05086887f2cadd272eb",
      "LastModified" : "2018-05-22T04:45:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ogg\n\n# Find the native ogg includes and libraries\n\n#\n\n#  OGG_INCLUDE_DIRS - where to find ogg.h, etc.\n\n#  OGG_LIBRARIES    - List of libraries when using libogg.\n\n#  OGG_FOUND        - True if ogg was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindSDL2.cmake" : {
      "ObjectId" : "192e149c24d074263ad8d45d5f1a8aed3d978a19",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from https://code.google.com/r/neobrainx-dolphin/source/browse/CMakeTests/FindSDL2.cmake\n\n#\n\n# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2_main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 80,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 81,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 82,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "#MESSAGE(\"SDL2_INCLUDE_DIR is ${SDL2_INCLUDE_DIR}\")\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#MESSAGE(\"SDL2_LIBRARY_TEMP is ${SDL2_LIBRARY_TEMP}\")\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# For SDL2main\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For MinGW library\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/modules/FindSDL2_image.cmake" : {
      "ObjectId" : "a36d5e9d15a2d3abd7c80c3dc1436b4331ac9ec9",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from http://cmake.3232098.n2.nabble.com/Find-modules-for-SDL2-td7585211.html\n\n#\n\n# - Find SDL2_image library and headers\r\n\n# \r\n\n# Find module for SDL_image 2.0 (http://www.libsdl.org/projects/SDL_image/).\r\n\n# It defines the following variables:\r\n\n#  SDL2_IMAGE_INCLUDE_DIRS - The location of the headers, e.g., SDL_image.h.\r\n\n#  SDL2_IMAGE_LIBRARIES - The libraries to link against to use SDL2_image.\r\n\n#  SDL2_IMAGE_FOUND - If false, do not try to use SDL2_image.\r\n\n#  SDL2_IMAGE_VERSION_STRING\r\n\n#    Human-readable string containing the version of SDL2_image.\r\n\n#\r\n\n# Also defined, but not for general use are:\r\n\n#   SDL2_IMAGE_INCLUDE_DIR - The directory that contains SDL_image.h.\r\n\n#   SDL2_IMAGE_LIBRARY - The location of the SDL2_image library.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2013 Benjamin Eikel\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindSDL2_ttf.cmake" : {
      "ObjectId" : "2c95ed65252c327358a8c92e6bf0966cbb486ee5",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Downloaded from http://cmake.3232098.n2.nabble.com/Find-modules-for-SDL2-td7585211.html and adapted to SDL2_ttf\n\n#\n\n# - Find SDL2_ttf library and headers\r\n\n# \r\n\n# Find module for SDL_ttf 2.0 (http://www.libsdl.org/projects/SDL_ttf/).\r\n\n# It defines the following variables:\r\n\n#  SDL2_TTF_INCLUDE_DIRS - The location of the headers, e.g., SDL_ttf.h.\r\n\n#  SDL2_TTF_LIBRARIES - The libraries to link against to use SDL2_ttf.\r\n\n#  SDL2_TTF_FOUND - If false, do not try to use SDL2_ttf.\r\n\n#  SDL2_TTF_VERSION_STRING\r\n\n#    Human-readable string containing the version of SDL2_ttf.\r\n\n#\r\n\n# Also defined, but not for general use are:\r\n\n#   SDL2_TTF_INCLUDE_DIR - The directory that contains SDL_ttf.h.\r\n\n#   SDL2_TTF_LIBRARY - The location of the SDL2_ttf library.\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\r\n\n# Copyright 2013 Benjamin Eikel\r\n\n#\r\n\n# Distributed under the OSI-approved BSD License (the \"License\");\r\n\n# see accompanying file Copyright.txt for details.\r\n\n#\r\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\r\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\n# See the License for more information.\r\n\n#=============================================================================\r\n\n# (To distribute this file outside of CMake, substitute the full\r\n\n#  License text for the above reference.)\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindVorbis.cmake" : {
      "ObjectId" : "d506b5d344927297b44c627267e7d1fbdc43dcac",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbis\n\n# Find the native vorbis library\n\n#\n\n#  VORBIS_LIBRARIES   - List of libraries when using libvorbis.\n\n#  VORBIS_FOUND       - True if vorbis was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBIS_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindVorbisFile.cmake" : {
      "ObjectId" : "144aeaa076369df9e76478dbd30375f89898c64b",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbisfile\n\n# Find the native vorbisfile includes and libraries\n\n#\n\n#  VORBISFILE_INCLUDE_DIR - where to find vorbisfile.h, etc.\n\n#  VORBISFILE_LIBRARIES   - List of libraries when using libvorbisfile.\n\n#  VORBISFILE_FOUND       - True if vorbisfile was found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBISFILE_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/pandora/PandoraToolchain.cmake" : {
      "ObjectId" : "c4383e4b6badc9cc2cbfbaf38ee52ace263f7f89",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this one is important\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# specify the cross compiler\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# where is the target environment\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# search for programs in the build host directories\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# for libraries and headers in the target directories\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#usage sample with the sample case \"wesnoth\":\n\n#current 1.10 setup:\n\n#PATH=/home/christophe/pandora-dev/arm-2011.09/usr/bin:$PATH CFLAGS=\"-DPANDORA -O3 -pipe -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -ftree-vectorize -mfloat-abi=softfp\" CXXFLAGS=\"-DPANDORA -O3 -pipe -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -ftree-vectorize -mfloat-abi=softfp\" cmake -DCMAKE_BUILD_TYPE=release -DENABLE_STRICT_COMPILATION=off -DCMAKE_TOOLCHAIN_FILE=/home/christophe/pandora-dev/sdk_utils/PandoraToolchain.cmake -DPKG_CONFIG_EXECUTABLE=/home/christophe/pandora-dev/arm-2011.09/bin/arm-none-linux-gnueabi-pkg-config -DSDL_CONFIG=/home/christophe/pandora-dev/arm-2011.09/usr/bin/sdl-config -DLIBINTL_INCLUDE_DIR=/home/christophe/pandora-dev/arm-2011.09/arm-none-linux-gnueabi/libc/usr/include/ -DPREFERENCES_DIR=wesnoth-1.10_userdata ../wesnoth-1.10.x\n\n#\n\n#current 1.11 setup:\n\n#PATH=/home/christophe/pandora-dev/arm-2011.09/usr/bin:$PATH CFLAGS=\"-DPANDORA -O3 -pipe -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -ftree-vectorize -mfloat-abi=softfp\" CXXFLAGS=\"-DPANDORA -O3 -pipe -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -ftree-vectorize -mfloat-abi=softfp\" cmake -DCMAKE_BUILD_TYPE=release -DENABLE_STRICT_COMPILATION=off -DCMAKE_TOOLCHAIN_FILE=/home/christophe/pandora-dev/sdk_utils/PandoraToolchain.cmake -DPKG_CONFIG_EXECUTABLE=/home/christophe/pandora-dev/arm-2011.09/bin/arm-none-linux-gnueabi-pkg-config -DSDL_CONFIG=/home/christophe/pandora-dev/arm-2011.09/usr/bin/sdl-config -DLIBINTL_INCLUDE_DIR=/home/christophe/pandora-dev/arm-2011.09/arm-none-linux-gnueabi/libc/usr/include/ -DPREFERENCES_DIR=wesnoth-1.11_userdata ../wesnoth-1.11.x\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "gui/CMakeLists.txt" : {
      "ObjectId" : "ad0c7b691272b841769d16a34b553294d207fe76",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# As Qt generates ui header files, the build directory needs to be an include\n\n# directory too.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tell CMake to run moc automatically when needed.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Source files.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# UI files.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate .h from .ui.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Resources.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Compile resource files.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Translations.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Build the Solarus GUI library.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Main executable.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add the Solarus icon in Windows.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Name the GUI executable \"solarus\".\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set files to install.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Platform specific.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Windows: disable the console.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# FreeDesktop compatible icons\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# FreeDesktop compatible start menu launcher\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# AppStream compatible software gallery metadata\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Linux Manpage\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "include/solarus/third_party/glm/CMakeLists.txt" : {
      "ObjectId" : "44ed80c523a499f2670ab0ceb361795cdf3d4583",
      "LastModified" : "2018-05-18T22:34:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(glm STATIC glm.cpp)\r\n\n#add_library(glm_shared SHARED glm.cpp)\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libraries/win32/mingw32/include/glm/CMakeLists.txt" : {
      "ObjectId" : "67f114666d464990612d20508a53a42eec3e7726",
      "LastModified" : "2018-05-22T04:45:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "ec82692c6d0f911ac90ba362daaeab36de83f0ff",
      "LastModified" : "2018-06-07T15:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# List of maps of the testing quest that are unit tests to be run.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build the Solarus testing library.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build individual tests.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Source files of the 'src/tests' directory that are a test with a main() function.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Lua test runner: add an individual test for each map.\n",
        "Line" : 155,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Normal C++ test.\n",
        "Line" : 160,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 29
  },
  "ElapsedTime" : 4052
}