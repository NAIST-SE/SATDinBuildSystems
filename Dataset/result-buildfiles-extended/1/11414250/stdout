{
  "Repository" : "11414250",
  "Revision" : "HEAD",
  "ObjectId" : "9fdca72a466ae028a145c92eb35e6c1201a9a50e",
  "CommitTime" : "2019-03-17T15:01:56Z",
  "Files" : {
    "standalone/CMake/FindCUDA.cmake" : {
      "ObjectId" : "f615e0d24b7a7866d0cfa005c0bacc5afcc29748",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Tools for building CUDA C files: libraries and build dependencies.\n\n# This script locates the NVIDIA CUDA C tools. It should work on linux, windows,\n\n# and mac and should be reasonably up to date with CUDA C releases.\n\n#\n\n# This script makes use of the standard find_package arguments of <VERSION>,\n\n# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\n\n# was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix\n\n# cannot be determined by the location of nvcc in the system path and REQUIRED\n\n# is specified to find_package(). To use a different installed version of the\n\n# toolkit set the environment variable CUDA_BIN_PATH before running cmake\n\n# (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda)\n\n# or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If you change the value of\n\n# CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be\n\n# relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default location. In\n\n# newer versions of the toolkit the cuda library is included with the graphics\n\n# driver- be sure that the driver version matches what is needed by the cuda\n\n# runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the script (in\n\n# alphebetical order).  Note that any of these flags can be changed multiple\n\n# times in the same directory before calling CUDA_ADD_EXECUTABLE,\n\n# CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX or CUDA_WRAP_SRCS.\n\n#\n\n#  CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#  -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#     Note that making this different from the host code when generating object\n\n#     or C files from CUDA code just won't work, because size_t gets defined by\n\n#     nvcc in the generated source.  If you compile to PTX and then load the\n\n#     file yourself, you can mix bit sizes between device and host.\n\n#\n\n#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#  -- Set to ON if you want the custom build rule to be attached to the source\n\n#     file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#     targets.\n\n#\n\n#     This allows the user to build the target from the CUDA file; however, bad\n\n#     things can happen if the CUDA source file is added to multiple targets.\n\n#     When performing parallel builds it is possible for the custom build\n\n#     command to be run more than once and in parallel causing cryptic build\n\n#     errors.  VS runs the rules for every source file in the target, and a\n\n#     source can have only one rule no matter how many projects it is added to.\n\n#     When the rule is run from multiple targets race conditions can occur on\n\n#     the generated file.  Eventually everything will get built, but if the user\n\n#     is unaware of this behavior, there may be confusion.  It would be nice if\n\n#     this script could detect the reuse of source files across multiple targets\n\n#     and turn the option off for the user, but no good solution could be found.\n\n#\n\n#  CUDA_BUILD_CUBIN (Default OFF)\n\n#  -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#     Device mode. The output is parsed and register, shared memory usage is\n\n#     printed during build.\n\n#\n\n#  CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#  -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#     when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#  CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#  -- Set to the path you wish to have the generated files placed.  If it is\n\n#     blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#     Intermediate files will always be placed in\n\n#     CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#  CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#  -- Set to OFF for C compilation of host code.\n\n#\n\n#  CUDA_NVCC_FLAGS\n\n#  CUDA_NVCC_FLAGS_<CONFIG>\n\n#  -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#     semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#  -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#     dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#     host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#     generated host code match the rest of the system better.  Sometimes\n\n#     certain flags give nvcc problems, and this will help you turn the flag\n\n#     propagation off.  This does not affect the flags supplied directly to nvcc\n\n#     via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#     CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#     shared library compilation are not affected by this flag.\n\n#\n\n#  CUDA_VERBOSE_BUILD (Default OFF)\n\n#  -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#     using a Makefile generator the value defaults to VERBOSE (run make\n\n#     VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#     always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order):\n\n#\n\n#  CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#  -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#     you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#  -- Adds the cublas library to the target (can be any target).  Handles\n\n#     whether you are in emulation mode or not.\n\n#\n\n#  CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                       [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Creates an executable \"cuda_target\" which is made up of the files\n\n#     specified.  All of the non CUDA C files are compiled using the standard\n\n#     build rules specified by CMAKE and the cuda files are compiled to object\n\n#     files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#     added automatically to include_directories().  Standard CMake target calls\n\n#     can be used on the target after calling this macro\n\n#     (e.g. set_target_properties and target_link_libraries).\n\n#\n\n#  CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#  -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#  CUDA_BUILD_CLEAN_TARGET()\n\n#  -- Creates a convience target that deletes all the dependency files\n\n#     generated.  You should make clean after running this target to ensure the\n\n#     dependency files get regenerated.\n\n#\n\n#  CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                [OPTIONS ...] )\n\n#  -- Returns a list of generated files from the input source files to be used\n\n#     with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#  CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#  -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#  CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#  -- Sets the directories that should be passed to nvcc\n\n#     (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#     files.\n\n#\n\n#  CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#  -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#     CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#     function under the hood.\n\n#\n\n#     Given the list of files (file0 file1 ... fileN) this macro generates\n\n#     custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#     \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#     or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#     The arguments passed in after OPTIONS are extra command line options to\n\n#     give to nvcc.  You can also specify per configuration options by\n\n#     specifying the name of the configuration followed by the options.  General\n\n#     options must preceed configuration specific options.  Not all\n\n#     configurations need to be specified, only the ones provided will be used.\n\n#\n\n#        OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#        DEBUG -g\n\n#        RELEASE --use_fast_math\n\n#        RELWITHDEBINFO --use_fast_math;-g\n\n#        MINSIZEREL --use_fast_math\n\n#\n\n#     For certain configurations (namely VS generating object files with\n\n#     CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#     be produced for the given cuda file.  This is because when you add the\n\n#     cuda file to Visual Studio it knows that this file produces an object file\n\n#     and will link in the resulting object file automatically.\n\n#\n\n#     This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#     override the behavior specified by the value of the CMake variable\n\n#     BUILD_SHARED_LIBS.  See BUILD_SHARED_LIBS below for more details.\n\n#\n\n#     This script will also generate a separate cmake script that is used at\n\n#     build time to invoke nvcc.  This is for serveral reasons.\n\n#\n\n#       1. nvcc can return negative numbers as return values which confuses\n\n#       Visual Studio into thinking that the command succeeded.  The script now\n\n#       checks the error codes and produces errors when there was a problem.\n\n#\n\n#       2. nvcc has been known to not delete incomplete results when it\n\n#       encounters problems.  This confuses build systems into thinking the\n\n#       target was generated when in fact an unusable file exists.  The script\n\n#       now deletes the output files if there was an error.\n\n#\n\n#       3. By putting all the options that affect the build into a file and then\n\n#       make the build rule dependent on the file, the output files will be\n\n#       regenerated when the options change.\n\n#\n\n#     In addition, on some systems special flags are added for building objects\n\n#     intended for shared libraries.  FindCUDA make use of the CMake variable\n\n#     BUILD_SHARED_LIBS and the usual STATIC, SHARED, and MODULE arguments to\n\n#     determine if these flags should be used.  Please set BUILD_SHARED_LIBS or\n\n#     pass in STATIC, SHARED, or MODULE according to how the objects are to be\n\n#     used before calling CUDA_ADD_LIBRARY.  A preprocessor macro,\n\n#     <target_name>_EXPORTS is defined when BUILD_SHARED_LIBS is defined.\n\n#\n\n#     Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n# The script defines the following variables:\n\n#\n\n#  CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#  CUDA_VERSION_MINOR    -- The minor version.\n\n#  CUDA_VERSION\n\n#  CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#\n\n#  CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                           SDK.  This script will not directly support finding\n\n#                           specific libraries or headers, as that isn't\n\n#                           supported by NVIDIA.  If you want to change\n\n#                           libraries when the path changes see the\n\n#                           FindCUDA.cmake script for an example of how to clear\n\n#                           these variables.  There are also examples of how to\n\n#                           use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                           libraries, if you so choose (at your own risk).\n\n#  CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                           for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#  CUDA_LIBRARIES        -- Cuda RT library.\n\n#  CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                           implementation (alternative to:\n\n#                           CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#  CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                           implementation (alterative to:\n\n#                           CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#\n\n#\n\n#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008-2009\n\n#  NVIDIA Corp.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to have at least this version to support the VERSION_LESS argument to 'if' (2.6.2) and unset (2.6.3)\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 304,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 316,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND true\")\n",
        "Line" : 325,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#message(\"searching for ${f}\")\n",
        "Line" : 327,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 329,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 339,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\n",
        "Line" : 431,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 441,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Now search default paths\n",
        "Line" : 448,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 458,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 470,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Compute the version.\n",
        "Line" : 483,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Here we need to determine if the version we found is acceptable.  We will\n\n# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\n\n# specified.  The presence of either of these options checks the version\n\n# string and signals if the version is acceptable or not.\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n",
        "Line" : 507,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 519,
        "CharPositionInLine" : 21
      },
      "48" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 524,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 544,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Add cuda library to the link line only if it is found.\n",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Search for cufft and cublas libraries.\n",
        "Line" : 573,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "########################\n\n# Look for the SDK stuff\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 607,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 622,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil32)\n\n# endif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 675,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "##############################################################################\n",
        "Line" : 684,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 713,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 726,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 731,
        "CharPositionInLine" : 8
      },
      "74" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 742,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependant upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Set up all the command line flags here, so that they can be overriden on a per target basis.\n",
        "Line" : 785,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 789,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Emulation.\n",
        "Line" : 791,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 794,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.\n",
        "Line" : 812,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Add nvcc flag for 64b Windows\n",
        "Line" : 816,
        "CharPositionInLine" : 6
      },
      "82" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 821,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 831,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\n",
        "Line" : 833,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "# Reset these variables\n",
        "Line" : 841,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# Figure out if we are building a shared library.  Default the value of BUILD_SHARED_LIBS.\n",
        "Line" : 851,
        "CharPositionInLine" : 2
      },
      "87" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 853,
        "CharPositionInLine" : 2
      },
      "88" : {
        "Text" : "# STATIC\n",
        "Line" : 859,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 865,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 867,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 871,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 880,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 883,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# nvcc chokes on -g3, so replace it with -g\n",
        "Line" : 887,
        "CharPositionInLine" : 6
      },
      "95" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 897,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 904,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# Get the list of definitions from the directory property\n",
        "Line" : 909,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# Determine output directory\n",
        "Line" : 921,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 928,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 931,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 934,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 938,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 952,
        "CharPositionInLine" : 6
      },
      "104" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 962,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 966,
        "CharPositionInLine" : 31
      },
      "106" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 970,
        "CharPositionInLine" : 6
      },
      "107" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 978,
        "CharPositionInLine" : 6
      },
      "108" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 981,
        "CharPositionInLine" : 6
      },
      "109" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 988,
        "CharPositionInLine" : 6
      },
      "110" : {
        "Text" : "# Configure the build script\n",
        "Line" : 996,
        "CharPositionInLine" : 6
      },
      "111" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 999,
        "CharPositionInLine" : 6
      },
      "112" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1016,
        "CharPositionInLine" : 6
      },
      "113" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1024,
        "CharPositionInLine" : 6
      },
      "114" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1027,
        "CharPositionInLine" : 8
      },
      "115" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1041,
        "CharPositionInLine" : 6
      },
      "116" : {
        "Text" : "# Don't add the object file to the list of generated files if we are using\n\n# visual studio and we are attaching the build rule to the cuda file.  VS\n\n# will add our object file to the linker automatically for us.\n",
        "Line" : 1044,
        "CharPositionInLine" : 6
      },
      "117" : {
        "Text" : "# Visual Studio 8 crashes when you close the solution when you don't add the object file.\n",
        "Line" : 1050,
        "CharPositionInLine" : 8
      },
      "118" : {
        "Text" : "#message(\"Not adding ${generated_file}\")\n",
        "Line" : 1052,
        "CharPositionInLine" : 10
      },
      "119" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1061,
        "CharPositionInLine" : 6
      },
      "120" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1069,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1074,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1083,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1085,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# Add the library.\n",
        "Line" : 1089,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1099,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1109,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1118,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1120,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# Add the library.\n",
        "Line" : 1123,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1133,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1143,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1150,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1152,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1161,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1168,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1170,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1178,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1191,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1204,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1210,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1221,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 142
    },
    "standalone/CMake/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "19e47d57bd73aeebaa8bf6ca5a17d0e1a4c73d96",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008-2009\n\n#  NVIDIA Corp.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "standalone/CMake/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "b41dd63da0d71f76fd45fd5bd6851311de80b3a4",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008-2009\n\n#  NVIDIA Corp.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 59,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 65,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 66,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# else (${entry} MATCHES \"^_\")\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# endif (${entry} MATCHES \"^_\")\n",
        "Line" : 71,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 75,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Registers\n",
        "Line" : 78,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Local memory\n",
        "Line" : 84,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Shared memory\n",
        "Line" : 90,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "standalone/CMake/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "9baca161a3d6aece3e4c6ebe12b45dbfacd0196c",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008-2009\n\n#  NVIDIA Corp.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 132,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Echo the command\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Run the command\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Delete the target file\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Make sure the output directory is present\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Generate the code\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 29
    },
    "standalone/CMakeLists.txt" : {
      "ObjectId" : "b4eec4475ae41a681901018d8620219d0b252f23",
      "LastModified" : "2016-11-14T22:14:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_package(CUDA)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_subdirectory(${CMAKE_SOURCE_DIR}/codebase/CCD)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if(CUDA_FOUND)\n\n#\tadd_subdirectory(${CMAKE_SOURCE_DIR}/codebase/GPU)\t\n\n##\tadd_subdirectory(${CMAKE_SOURCE_DIR}/codebase/GPU-DP)\n\n#endif(CUDA_FOUND)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_subdirectory(${CMAKE_SOURCE_DIR}/codebase/jni)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "standalone/codebase/CCD-DP/CMakeLists.txt" : {
      "ObjectId" : "47fe6c0edb79ac8bc2139dbd6fa5dce74a1df9a8",
      "LastModified" : "2016-11-14T22:14:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\t ${CCD_SOURCE_DIR}/CCD/io/CLRInputReader.cpp\n\n#\t ${CCD_SOURCE_DIR}/CCD/io/RTestInputReader.cpp\n\n#\t ${CCD_SOURCE_DIR}/CCD/io/CoxInputReader.cpp\n\n#\t ${CCD_SOURCE_DIR}/CCD/io/CCTestInputReader.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(CUDA_FOUND)\n\n#\tset(SOURCE_FILES ${SOURCE_FILES}\n\n#\t    ../CCD/GPUCyclicCoordinateDescent.cpp\n\n##\t    ../CCD/BetterGPU.cpp\n\n#        )\n\n#\tadd_definitions(-DCUDA)\n\n## \tif(APPLE)\n\n## \t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")\n\n## \t\tset(CUDA_64_BIT_DEVICE_CODE OFF)\t\n\n## \tendif(APPLE)\t\t\n\n#\tadd_definitions(-DDOUBLE_PRECISION)\t\n\n# \tif(APPLE)\n\n# \t\tset(CUDA_NVCC_FLAGS -arch=sm_11)\n\n# \telse(APPLE)\t \t\t\n\n# \t\tset(CUDA_NVCC_FLAGS -arch=sm_20) \t\t\n\n# \tendif(APPLE) \t\n\n# \tcuda_add_executable(ccd-dp ${SOURCE_FILES})\n\n# \ttarget_link_libraries(ccd-dp CUDADriver-dp)\n\n#else(CUDA_FOUND)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#endif(CUDA_FOUND)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "standalone/codebase/CCD/CMakeLists.txt" : {
      "ObjectId" : "4d121a5409a7147d36f2a798c6a9a8cc683ab317",
      "LastModified" : "2016-11-14T22:14:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\t ${CCD_SOURCE_DIR}/CCD/io/CLRInputReader.cpp\n\n#\t ${CCD_SOURCE_DIR}/CCD/io/RTestInputReader.cpp\n\n#\t ${CCD_SOURCE_DIR}/CCD/io/CoxInputReader.cpp\n\n#\t ${CCD_SOURCE_DIR}/CCD/io/CCTestInputReader.cpp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tif(APPLE)\n\n#\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")\n\n#\t\tset(CUDA_64_BIT_DEVICE_CODE OFF)\t\n\n# \tendif(APPLE)\t\t\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#add_executable(ccdimpute ${IMPUTE_SOURCE_FILES})\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#target_link_libraries(ccdimpute base_bsccs)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "standalone/codebase/Eigen/CMakeLists.txt" : {
      "ObjectId" : "a92dd6f6cafd2206f8be1a50f1294e2ae49feb5a",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/CMakeLists.txt" : {
      "ObjectId" : "c326f374d9ee89c953dd9caefbfaffccb905511c",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Cholesky/CMakeLists.txt" : {
      "ObjectId" : "d01488b41a826850277a918f555e3668167dd367",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/CholmodSupport/CMakeLists.txt" : {
      "ObjectId" : "814dfa61313847c0f33538e11c4ac4557ec3e32e",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/CMakeLists.txt" : {
      "ObjectId" : "2346fc2bbca4d9bd699efc4c366afd7abd400e3c",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/arch/AltiVec/CMakeLists.txt" : {
      "ObjectId" : "9f8d2e9c46765f4253d6877d040e5c2a90612086",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/arch/CMakeLists.txt" : {
      "ObjectId" : "8456dec1581554a4f7798ebe7d9d292369f21607",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/arch/Default/CMakeLists.txt" : {
      "ObjectId" : "339c091d156100d46f3acbc67ad205749d8f4b3d",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/arch/NEON/CMakeLists.txt" : {
      "ObjectId" : "fd4d4af50cb46dac7e6b29ef8654e70528e1f3ca",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/arch/SSE/CMakeLists.txt" : {
      "ObjectId" : "46ea7cc623c62394c78425b15e100b84126b40a7",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/products/CMakeLists.txt" : {
      "ObjectId" : "21fc94ae38a5574289ae4e304ce087f3ed6897f0",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Core/util/CMakeLists.txt" : {
      "ObjectId" : "a1e2e521fc11124c92768621c4edf784bc10f51f",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Eigen2Support/CMakeLists.txt" : {
      "ObjectId" : "7ae41b3cbe9c568f7efdaf45cd1a1ef874bf309b",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Eigen2Support/Geometry/CMakeLists.txt" : {
      "ObjectId" : "c347a8f26228694dc67e0e89ff6d509152dac738",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Eigenvalues/CMakeLists.txt" : {
      "ObjectId" : "193e0268599516e2515318ed04eb6dda37b2dd59",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Geometry/CMakeLists.txt" : {
      "ObjectId" : "f8f728b84faf0e08d91fac04e2986260368b9063",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Geometry/arch/CMakeLists.txt" : {
      "ObjectId" : "1267a79c78767c43d11c529cc84468cbdd1052a2",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Householder/CMakeLists.txt" : {
      "ObjectId" : "ce4937db061bbadb0357ccc45547b141761a70e3",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/IterativeLinearSolvers/CMakeLists.txt" : {
      "ObjectId" : "59ccc0072cc4ed78e6aa783bfab2486aac757fca",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/Jacobi/CMakeLists.txt" : {
      "ObjectId" : "490dac626439ade5e05baaba504689366db22e6d",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/LU/CMakeLists.txt" : {
      "ObjectId" : "e0d8d78c1720abb27432f41aa2ace29ef3f3794f",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/LU/arch/CMakeLists.txt" : {
      "ObjectId" : "f6b7ed9ecc3a25e3885c7fece60428481e51c696",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/OrderingMethods/CMakeLists.txt" : {
      "ObjectId" : "9f4bb275808257ac71d6c04d9c602ce5c0b5be8d",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/PaStiXSupport/CMakeLists.txt" : {
      "ObjectId" : "28c657e9bcf7d3e0ecc800f6d5a11d54020b58cc",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/PardisoSupport/CMakeLists.txt" : {
      "ObjectId" : "a097ab401920ea1b7068f790edcfcf9086b3038b",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/QR/CMakeLists.txt" : {
      "ObjectId" : "96f43d7f5b30fa024b9bd2d9e3a5dacb9d401ecb",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/SVD/CMakeLists.txt" : {
      "ObjectId" : "55efc44b12970d5ec715393cb68cd061203ce941",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/SparseCholesky/CMakeLists.txt" : {
      "ObjectId" : "375a59d7a577877313a1ff2a6bf1c8fac138768b",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/SparseCore/CMakeLists.txt" : {
      "ObjectId" : "d860452a65cb20850a12a120ab1fd3e3fd83dccc",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/StlSupport/CMakeLists.txt" : {
      "ObjectId" : "0f094f637acd51b0931e58a199c30f550beaa282",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/SuperLUSupport/CMakeLists.txt" : {
      "ObjectId" : "b28ebe5839cf5c664abdb44c186547507ce688d3",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/UmfPackSupport/CMakeLists.txt" : {
      "ObjectId" : "a57de00209d3bc746b050d1b8aa736bccc66f2bc",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/misc/CMakeLists.txt" : {
      "ObjectId" : "a58ffb7457e06a7a69426a21a9d46d07a6a8ee91",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/Eigen/src/plugins/CMakeLists.txt" : {
      "ObjectId" : "1a1d3ffbd724d17e161c40c48ac56c8b1aeb2e1f",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "standalone/codebase/GPU-DP/CMakeLists.txt" : {
      "ObjectId" : "58dc161cc9acfd829cadeb00d43e79c82d4d65d9",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######## Less editting below this point\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(APPLE)\n\n#\tset(CUDA_64_BIT_DEVICE_CODE OFF)\n\n#\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -m32\")\n\n#endif(APPLE)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "standalone/codebase/GPU/CMakeLists.txt" : {
      "ObjectId" : "29dbf415240314dd0a4274b304c7f411be0f12b4",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######## Less editting below this point\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if(APPLE)\n\n#\tset(CUDA_64_BIT_DEVICE_CODE OFF)\n\n#\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\n#endif(APPLE)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "standalone/codebase/jni/CMakeLists.txt" : {
      "ObjectId" : "3085f4018205b7450cce863ce43727097906f746",
      "LastModified" : "2014-04-12T03:57:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#IF(APPLE)\n\n#  SET_TARGET_PROPERTIES(${SWIG_MODULE_<module_name>_REAL_NAME} PROPERTIES\n\n#    PREFIX \"lib\" SUFFIX \".jnilib\")\n\n#ELSEIF(WIN32)\n\n#  SET_TARGET_PROPERTIES(${SWIG_MODULE_<module_name>_REAL_NAME} PROPERTIES\n\n#    PREFIX \"\" SUFFIX \".dll\")\n\n#ELSEIF(UNIX)\n\n#  SET_TARGET_PROPERTIES(${SWIG_MODULE_<module_name>_REAL_NAME} PROPERTIES\n\n#    PREFIX \"lib\" SUFFIX \".so\")\n\n#ENDIF(APPLE)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 44
  },
  "ElapsedTime" : 1686
}