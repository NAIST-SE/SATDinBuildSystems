{
  "Repository" : "14656275",
  "Revision" : "HEAD",
  "ObjectId" : "e59e5e63c7fde24af6b8a5618ec698907af86377",
  "CommitTime" : "2019-04-11T12:45:45Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "05f38066043ba8169060b976dbf2287742f6ee21",
      "LastModified" : "2019-03-31T17:14:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get access to CMake helpers\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# By default JIT is OFF\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For now we switch to static build \n\n# TODO A fix is needed to ensure that in shared library the asm functions are resolved\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# We also need to define USE_LLVM when compiling code\n\n# but rather than setting globally we set this when building the\n\n# library \n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Disable signed/unsigned int conversion warnings.\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Disable warning about using struct/class for the same symobl.\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Disable performance warning about int-to-bool conversion.\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Disable signed/unsigned int conversion warnings.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Disable warning about the insecurity of using \"std::copy\".\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# assume Linux\n",
        "Line" : 102,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# set(SANITIZER_FLAGS \"-fsanitize=address\")\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Note that enabling ltests.h messes with global_State and thus interferes with ASM_VM\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# For now we switch to static build \n\n# TODO A fix is needed to ensure that in shared library the asm functions are resolved\n",
        "Line" : 139,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# This macro runs the buildvm command to generate the VM code\n",
        "Line" : 151,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Generate ravi_asmvm.obj / ravi_asmvm.s (obj on Windows)\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Generate the ravi_bcdef.h header file\n",
        "Line" : 169,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# define LLVM JIT compiler sources\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# define the lua core source files\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# define the lua lib source files\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# On Linux we need to link libdl to get access to\n\n# functions like dlopen()\n\n# ubsan can be added to get -fsanitize=undefined\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Enable minimal required LLVM components so that the\n\n# the size of the resulting binary is manageable\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#Main library\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# enable DLL export\n",
        "Line" : 389,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# Main Ravi executable\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Sources that are needed for a static NOJIT basic library\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# We always build a static library without JIT so that\n\n# we can create some default executables\n",
        "Line" : 426,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# As we already prefix with lib\n",
        "Line" : 430,
        "CharPositionInLine" : 64
      },
      "27" : {
        "Text" : "# Create a simple NoJIT version of statically linked ravi\n\n# This is sometimes useful in other projects that just need a Lua commandline\n\n# but do not care about the shared library \n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Ravi VSCode Debug adapter\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Tests for VSCode Debug Adapter  \n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Simple VM tests\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# LLVM playground\n",
        "Line" : 460,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 32
    },
    "Makefile" : {
      "ObjectId" : "32e7267ea6f26222b80083400362e39689a5ddf9",
      "LastModified" : "2017-10-28T21:52:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# The preferred build method for Ravi is to use CMake\n\n# However if you want a quick build without JIT or other options then this\n\n# Makefile might be adequate. It is based off the standard Lua Makefile\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to install. The installation starts in the src and doc directories,\n\n# so take care if INSTALL_TOP is not an absolute path. See the local target.\n\n# You may want to make INSTALL_LMOD and INSTALL_CMOD consistent with\n\n# LUA_ROOT, LUA_LDIR, and LUA_CDIR in luaconf.h.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#INSTALL_MAN= $(INSTALL_TOP)/man/man1\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# How to install. If your install program does not support \"-p\", then\n\n# you may have to run ranlib on the installed liblua.a.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# If you don't have \"install\" you can use \"cp\" instead.\n\n# INSTALL= cp -p\n\n# INSTALL_EXEC= $(INSTALL)\n\n# INSTALL_DATA= $(INSTALL)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Other utilities.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Convenience platforms targets.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# What to install.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#TO_MAN= lua.1 luac.1\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Lua version and release.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Targets start here.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\tcd doc && $(INSTALL_DATA) $(TO_MAN) $(INSTALL_MAN)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\tcd doc && cd $(INSTALL_MAN) && $(RM) $(TO_MAN)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# make may get confused with test/ and install/\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# echo config parameters\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t@echo \"TO_MAN= $(TO_MAN)\"\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\t@echo \"INSTALL_MAN= $(INSTALL_MAN)\"\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# echo pkg-config data\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "cmake/FindOMRJIT.cmake" : {
      "ObjectId" : "250e05a16b5ae2690de142904d8fb48648e3c522",
      "LastModified" : "2018-11-09T00:36:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "readthedocs/Makefile" : {
      "ObjectId" : "14c0491c94d65ab0aa5e34bae821248833961ec1",
      "LastModified" : "2017-10-28T21:52:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/Makefile" : {
      "ObjectId" : "3cfb3a7933cc322916b6cd1d0a694ecaad97cf6b",
      "LastModified" : "2019-03-31T17:14:08Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Ravi based on Lua Makefile\n\n# This Makefile builds an interpreter only version right now - no JIT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CC= gcc -std=gnu99\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Targets start here.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "vmbuilder/src/CMakeLists.txt" : {
      "ObjectId" : "251fa66ff4dd77b601e06227d230fc92c96fb959",
      "LastModified" : "2017-11-25T21:20:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This CMake script is based on the LuaJIT one created by:\n\n# Copyright (C) 2007-2013 LuaDist.\n\n# Created by Peter Drahoš\n\n# Redistribution and use of this file is allowed according to the terms of the MIT license.\n\n# For details see the COPYRIGHT file distributed with LuaDist.\n\n# Please note that the package source code is licensed under its own license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Dynasm\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build minilua\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Windows is ... special\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Generate buildvm arch header\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Buildvm\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 3,
    "MAKEFILE" : 3
  },
  "ElapsedTime" : 1121
}