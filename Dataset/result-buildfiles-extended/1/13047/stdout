{
  "Repository" : "13047",
  "Revision" : "HEAD",
  "ObjectId" : "e86ff4019a4343579cc307d96d79272d5efcd1be",
  "CommitTime" : "2018-03-12T05:34:45Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "5753dbc87f15fb102b46a8be897d8d81c0167ca5",
      "LastModified" : "2017-05-30T22:11:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## build c library\n",
        "Line" : 4,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "## run tests\n",
        "Line" : 6,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "## clean up\n",
        "Line" : 8,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "## log into the docker test image\n",
        "Line" : 14,
        "CharPositionInLine" : 17
      },
      "4" : {
        "Text" : "## run the tests in docker, as travis-ci does\n",
        "Line" : 22,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# https://www.client9.com/self-documenting-makefiles/\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 32:99 token recognition error at: '\"\\0'\nline 32:113 token recognition error at: '\\0'\nline 32:125 token recognition error at: '\", $$1, $$2}'\\n.PHONY: help\\n.DEFAULT_GOAL := help\\n\\n\u0000'\n"
    },
    "go/Makefile" : {
      "ObjectId" : "59fb988b507e9df25e500d05cebd2ee3b0723866",
      "LastModified" : "2014-05-12T08:56:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "lua/Makefile" : {
      "ObjectId" : "35cfd9aad80c1bba070398ae03a9b5c68e29aeeb",
      "LastModified" : "2014-05-12T08:56:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# either works\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ubuntu\n\n#LUA_FLAGS=-I/usr/include/lua5.1 -llua5.1\n\n#LUA=/usr/bin/lua5.1\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ubuntu luajit 2\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# centos and friends\n\n#LUA_FLAGS=-I/usr/include/ -L/usr/lib64 -llua\n\n#LUA=lua\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MAC OS X - brew install luajit\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# need to hack a linux version here\n\n#\n\n# MAC OS X: note using \".so\" suffix NOT \".dylib\"\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# build and run unit tests\n\n# Uses a python helper to read the test files to generate\n\n# a TAP test plan.  Easier that writing lots of LUA glue code\n\n# and super-fast!\n\n#\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# --depth 1 -- get without history\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "misc/Makefile" : {
      "ObjectId" : "fbbeb506f9ca88f9cb3805cc144e2e04a33eed9f",
      "LastModified" : "2014-05-12T08:56:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "php/Makefile" : {
      "ObjectId" : "d6beb9dbb160b20b556518cae111142c70e9712f",
      "LastModified" : "2014-05-12T08:56:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# this requires swig, and an installation of php (and php-dev tools)\n\n#\n\n# everything is copied and generating int the build directory\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# old\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "python/Makefile" : {
      "ObjectId" : "dc75977ee25748739a441630d60c63c85b8d70de",
      "LastModified" : "2014-05-12T08:56:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Makefile" : {
      "ObjectId" : "f288176c984788f7ebaa1e6e40b0328bcd4de937",
      "LastModified" : "2017-05-30T22:11:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# MAC\n\n# AR=libtool -static\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#all: ${STATICLIB}\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# remove speed checks for now\n\n#\t@./test-driver.sh test-speed-xss.sh\n\n#\t@./test-driver.sh test-speed-sqli.sh\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#---- CLANG STATIC ANALYZER\n\n#\n\n#\n\n#\n\n# We are not using scan-analyze since it depends on perl\n\n# Using clang directly produces text output which is fine for\n\n# automated testing.  Oddly -Werror doesn't work here, and\n\n# we have to test if any output occurred or not.  This done by\n\n# piping output to a file and then checking what it contains.\n\n#\n\n# Open to better ideas here.\n\n#\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ubuntu adds \"-3.7\" suffix\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 7
  },
  "ElapsedTime" : 1998
}