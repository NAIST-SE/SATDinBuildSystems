{
  "Repository" : "7791182",
  "Revision" : "HEAD",
  "ObjectId" : "741816b25d8292940c16e11be6d33d11813a5550",
  "CommitTime" : "2019-04-09T12:49:27Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "5537e8f06889302406106952ee346694dc306378",
      "LastModified" : "2017-05-18T11:54:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location focus\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-- CMAKE Configurations ------------------------------------------------------\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set CMAKE Policies\n\n#~~ TODO\n\n#cmake_policy(SET CMP0012 NEW)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CMAKE extra config files\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-- PROJECT Configurations ----------------------------------------------------\n\n# \n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Get the current working branch\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Get the latest abbreviated commit hash of the working branch\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#-- FIND PROGRAMS -------------------------------------------------------------\n\n# \n\n# INTELCC\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# CUDA\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-- BASE DIRECTORIES ----------------------------------------------------------\n\n#\n\n# Source directory\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Include directory\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Binary Directory\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#add_subdirectory(include)\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-- EXTRA CONFIGURATION -------------------------------------------------------\n\n#\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Configure files to replace version numbers\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#-- ADD SUBDIRECTORIES --------------------------------------------------------\n\n#\n\n# the libraries have to be built before by the build_all script \n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#-- COPY SCRIPTS AND WEB FOLDER AS THEY ARE -----------------------------------\n\n#\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "5fe0f5e304bde34875e2e66fb000b10d7350bf77",
      "LastModified" : "2017-01-05T16:36:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location focus/apps\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-- CMAKE Configurations ------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMAKE extra config files --------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#--- C++ Compiler --------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Debug options\n",
        "Line" : 18,
        "CharPositionInLine" : 32
      },
      "6" : {
        "Text" : "#C++ options\n",
        "Line" : 19,
        "CharPositionInLine" : 56
      },
      "7" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#--- Libraries to use ----------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# FFTW ---------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# QT5 ---------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# OPENGL ---------------------------------\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#-- ADD SUBDIRECTORIES --------------------------------------------------------\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-------------------------------------------------------------------------------",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "apps/bin/CMakeLists.txt" : {
      "ObjectId" : "1179f0e60c4dbbfe13bdb9b468e7cba469c17610",
      "LastModified" : "2016-11-17T17:37:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tfile(GLOB SCRIPTS *.mac)\n",
        "Line" : 11,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#file(GLOB SCRIPTS *.linux)\n",
        "Line" : 17,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 3
    },
    "apps/fLogBrowser/CMakeLists.txt" : {
      "ObjectId" : "c5dd5a85c33dd3bb11b8b316e7d3283515625196",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Application Name\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Libraries to use ------------------------------------------------------------\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# moc files --------------------------------------------------------------------\n\n# these are all the headers containing Q_OBJECT\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n\n# generate moc files\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Define some settings for the Bundle\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# create a bundle with an icon too!\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Allows for bundle re-creation just by running \"make\". Also installs bundle icon\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## This tells cmake where to place files inside the bundle\n",
        "Line" : 76,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "#set_source_files_properties( ${ProjectName_RESOURCES} ${ProjectName_TRANSLATIONS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources )\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Linking\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Now the installation stuff below\n\n#--------------------------------------------------------------------------------\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Installation\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Install needed Qt plugins by copying directories from the qt installation\n\n# One can cull what gets copied by using 'REGEX \"...\" EXCLUDE'\n\n#INSTALL(DIRECTORY \"${QT_PLUGINS_DIR}/imageformats\" DESTINATION ${plugin_dest_dir} COMPONENT Runtime)\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#for  cocoa qt in Mac OS X\n",
        "Line" : 111,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# install a qt.conf file\n\n# this inserts some cmake code into the install script to write the file\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#--------------------------------------------------------------------------------\n\n# Use BundleUtilities to get all other dependencies for the application to work.\n\n# It takes a bundle or executable along with possible plugins and inspects it\n\n# for dependencies.  If they are not system dependencies, they are copied.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\n\n# The quotes are escaped and variables to use at install time have their $ escaped\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\n\n# over.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# To Create a package, one can run \"cpack -G DragNDrop CPackConfig.cmake\" on Mac OS X\n\n# where CPackConfig.cmake is created by including CPack\n\n# And then there's ways to customize this as well\n\n#set(CPACK_BINARY_DRAGNDROP ON)\n\n#include(CPack)\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "apps/fMrcConverter/CMakeLists.txt" : {
      "ObjectId" : "49880de41c659581f9de4bf57bdbdf0b07b23132",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location focus/apps/src/fMrcConverter/\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CMAKE Configurations ------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--- Configuration -------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Application name\n",
        "Line" : 13,
        "CharPositionInLine" : 38
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--- BASE DIRECTORIES ----------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Header Files\n",
        "Line" : 17,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "# Get the header files from the lib\n",
        "Line" : 18,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# Source Files\n",
        "Line" : 19,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--- Create Executable ---------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Define some settings for the Bundle\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# create a bundle with an icon too!\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Allows for bundle re-creation just by running \"make\". Also installs bundle icon\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#--- INSTALL -------------------------------------------------------------------\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Installation\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Install needed Qt plugins by copying directories from the qt installation\n\n# One can cull what gets copied by using 'REGEX \"...\" EXCLUDE'\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#for  cocoa qt in Mac OS X\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# install a qt.conf file\n\n# this inserts some cmake code into the install script to write the file\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Use BundleUtilities to get all other dependencies for the application to work.\n\n# It takes a bundle or executable along with possible plugins and inspects it\n\n# for dependencies.  If they are not system dependencies, they are copied.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\n\n# The quotes are escaped and variables to use at install time have their $ escaped\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\n\n# over.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# To Create a package, one can run \"cpack -G DragNDrop CPackConfig.cmake\" on Mac OS X\n\n# where CPackConfig.cmake is created by including CPack\n\n# And then there's ways to customize this as well\n\n#set(CPACK_BINARY_DRAGNDROP ON)\n\n#include(CPack)\n\n#-------------------------------------------------------------------------------",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "apps/fViewer/CMakeLists.txt" : {
      "ObjectId" : "cec81d809dc9ae6e96bfd153271fa56a31c87596",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location focus/apps/src/fViewer/\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CMAKE Configurations ------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--- Configuration -------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Application name\n",
        "Line" : 13,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--- BASE DIRECTORIES ----------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Header Files\n",
        "Line" : 17,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "# Get the header files from the lib\n",
        "Line" : 18,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# Source Files\n",
        "Line" : 19,
        "CharPositionInLine" : 24
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--- Create Executable ---------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Define some settings for the Bundle\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# create a bundle with an icon too!\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Allows for bundle re-creation just by running \"make\". Also installs bundle icon\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#--- INSTALL -------------------------------------------------------------------\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Installation\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Install needed Qt plugins by copying directories from the qt installation\n\n# One can cull what gets copied by using 'REGEX \"...\" EXCLUDE'\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#for  cocoa qt in Mac OS X\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# install a qt.conf file\n\n# this inserts some cmake code into the install script to write the file\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Use BundleUtilities to get all other dependencies for the application to work.\n\n# It takes a bundle or executable along with possible plugins and inspects it\n\n# for dependencies.  If they are not system dependencies, they are copied.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\n\n# The quotes are escaped and variables to use at install time have their $ escaped\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\n\n# over.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# To Create a package, one can run \"cpack -G DragNDrop CPackConfig.cmake\" on Mac OS X\n\n# where CPackConfig.cmake is created by including CPack\n\n# And then there's ways to customize this as well\n\n#set(CPACK_BINARY_DRAGNDROP ON)\n\n#include(CPack)\n\n#-------------------------------------------------------------------------------",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "apps/focus/CMakeLists.txt" : {
      "ObjectId" : "7799c46de3229bd0142a8ff29fc04be8b7225dfc",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location focus/apps/focus/\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CMAKE Configurations ------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--- Configuration -------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Application name\n",
        "Line" : 13,
        "CharPositionInLine" : 30
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--- BASE DIRECTORIES ----------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Header Files\n",
        "Line" : 17,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "# Get the header files from the lib\n",
        "Line" : 18,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# Source Files\n",
        "Line" : 19,
        "CharPositionInLine" : 63
      },
      "10" : {
        "Text" : "# MOC Headers\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Create MOC Sources\n",
        "Line" : 32,
        "CharPositionInLine" : 35
      },
      "12" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#--- Create Executable ---------------------------------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Define some settings for the Bundle\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# create a bundle with an icon too!\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Allows for bundle re-creation just by running \"make\". Also installs bundle icon\n",
        "Line" : 52,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#--- INSTALL -------------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Installation\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Install needed Qt plugins by copying directories from the qt installation\n\n# One can cull what gets copied by using 'REGEX \"...\" EXCLUDE'\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#for  cocoa qt in Mac OS X\n",
        "Line" : 86,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# install a qt.conf file\n\n# this inserts some cmake code into the install script to write the file\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Use BundleUtilities to get all other dependencies for the application to work.\n\n# It takes a bundle or executable along with possible plugins and inspects it\n\n# for dependencies.  If they are not system dependencies, they are copied.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\n\n# The quotes are escaped and variables to use at install time have their $ escaped\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\n\n# over.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# To Create a package, one can run \"cpack -G DragNDrop CPackConfig.cmake\" on Mac OS X\n\n# where CPackConfig.cmake is created by including CPack\n\n# And then there's ways to customize this as well\n\n#set(CPACK_BINARY_DRAGNDROP ON)\n\n#include(CPack)\n\n#-------------------------------------------------------------------------------",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "apps/plugins/CMakeLists.txt" : {
      "ObjectId" : "4aa488f9a78c8511deee11a506b9499a22cd5fd1",
      "LastModified" : "2016-08-10T12:13:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/plugins/tools/CMakeLists.txt" : {
      "ObjectId" : "3117ccd72c5fd8d1d7e013039d06ea9a6077e899",
      "LastModified" : "2016-08-10T12:13:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/plugins/translators/CMakeLists.txt" : {
      "ObjectId" : "0122b81a862fb4ac5afb774a6882ce4e953e3294",
      "LastModified" : "2016-08-10T12:13:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/resources/CMakeLists.txt" : {
      "ObjectId" : "21f88540302b8e577919b01e653aaf0d65997773",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @location 2dx/apps/resources\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-- CMAKE Configurations ------------------------------------------------------\n\n#\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-- Install directories -------------------------------------------------------\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "apps/src/CMakeLists.txt" : {
      "ObjectId" : "7b7e3c08ae6cf4e2d8f9c07985e09483c4acdb30",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location focus/apps/src\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CMAKE Configurations ------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--- Configuration -------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#--- BASE DIRECTORIES ----------------------------------------------------------\n\n# Header files\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Source Files\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MOC files\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create MOC Sources\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#--- Add Library --------------------------------------------------------------\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Include all the current header directories\n",
        "Line" : 97,
        "CharPositionInLine" : 32
      },
      "12" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "apps/stale/2dx_automator/CMakeLists.txt" : {
      "ObjectId" : "8f3a1c3e61beb670f48b84d57466ff19f97647f2",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/stale/2dx_image/CMakeLists.txt" : {
      "ObjectId" : "8480635db6340ea501b77052a82b4e5feec065da",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location 2dx/apps/src/2dx_gui/\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CMAKE Configurations ------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--- Configuration -------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Application name\n",
        "Line" : 13,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--- BASE DIRECTORIES ----------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Header Files\n",
        "Line" : 17,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "# Get the header files from the lib\n",
        "Line" : 18,
        "CharPositionInLine" : 28
      },
      "9" : {
        "Text" : "# Source Files\n",
        "Line" : 19,
        "CharPositionInLine" : 22
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--- Create Executable ---------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Define some settings for the Bundle\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# create a bundle with an icon too!\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Allows for bundle re-creation just by running \"make\". Also installs bundle icon\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#--- INSTALL -------------------------------------------------------------------\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Installation\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Install needed Qt plugins by copying directories from the qt installation\n\n# One can cull what gets copied by using 'REGEX \"...\" EXCLUDE'\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#for  cocoa qt in Mac OS X\n",
        "Line" : 73,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "# install a qt.conf file\n\n# this inserts some cmake code into the install script to write the file\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Use BundleUtilities to get all other dependencies for the application to work.\n\n# It takes a bundle or executable along with possible plugins and inspects it\n\n# for dependencies.  If they are not system dependencies, they are copied.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# directories to look for dependencies\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Now the work of copying dependencies into the bundle/package\n\n# The quotes are escaped and variables to use at install time have their $ escaped\n\n# An alternative is the do a configure_file() on a script and use install(SCRIPT  ...).\n\n# Note that the image plugins depend on QtSvg and QtXml, and it got those copied\n\n# over.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# To Create a package, one can run \"cpack -G DragNDrop CPackConfig.cmake\" on Mac OS X\n\n# where CPackConfig.cmake is created by including CPack\n\n# And then there's ways to customize this as well\n\n#set(CPACK_BINARY_DRAGNDROP ON)\n\n#include(CPack)\n\n#-------------------------------------------------------------------------------",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "apps/stale/2dx_merge/CMakeLists.txt" : {
      "ObjectId" : "e8c1c16ddff4e69070efba145b51bdf38e92a58e",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#------------------------------------------------------------------------------\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location 2dx/apps/src/2dx_merge/\n\n#------------------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#--- CMAKE Configurations ------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#--- Configuration -------------------------------------------------------------\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Application name\n",
        "Line" : 13,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#--- BASE DIRECTORIES ----------------------------------------------------------\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Header Files\n",
        "Line" : 17,
        "CharPositionInLine" : 49
      },
      "8" : {
        "Text" : "# Get the header files from the lib\n",
        "Line" : 18,
        "CharPositionInLine" : 28
      },
      "9" : {
        "Text" : "# Source Files\n",
        "Line" : 19,
        "CharPositionInLine" : 18
      },
      "10" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--- Create Executable ---------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#--- INSTALL -------------------------------------------------------------------\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#-------------------------------------------------------------------------------",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "993273221c7d966e5c92fc3350cc5cb5b1aef011",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindCppUnit.cmake" : {
      "ObjectId" : "bd1097197d88cef4c395dfe708a7cf304d38d8a4",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# http://root.cern.ch/viewvc/trunk/cint/reflex/cmake/modules/FindCppUnit.cmake\n\n#\n\n# - Find CppUnit\n\n# This module finds an installed CppUnit package.\n\n#\n\n# It sets the following variables:\n\n#  CPPUNIT_FOUND       - Set to false, or undefined, if CppUnit isn't found.\n\n#  CPPUNIT_INCLUDE_DIR - The CppUnit include directory.\n\n#  CPPUNIT_LIBRARY     - The CppUnit library to link against.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which CppUnit was found only if not quiet\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if CppUnit is required but not found\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "cmake/FindEigen2.cmake" : {
      "ObjectId" : "2579a6c9c00140c223a1e6456a1bf4fb1123c4ee",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen2 lib\n\n# Once done this will define\n\n#\n\n#  EIGEN2_FOUND - system has eigen lib\n\n#  EIGEN2_INCLUDE_DIR - the eigen include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/FindEigen3.cmake" : {
      "ObjectId" : "a7c29b371549e1a3661cea9d512afbecd2d10c1e",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/FindFFTW.cmake" : {
      "ObjectId" : "dae0838ef6331c7d1afda8e340c1509402945a0e",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Last modified by Alexis Rohou on 11.02.2018\n\n## FFTW can be compiled and subsequently linked against\n\n## various data types.\n\n## There is a single set of include files, and then muttiple libraries,\n\n## One for each type.  I.e. libfftw.a-->double, libfftwf.a-->float\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## The following logic belongs in the individual package\n\n## MARK_AS_ADVANCED(USE_FFTWD)\n\n## OPTION(USE_FFTWD \"Use double precision FFTW if found\" ON)\n\n## MARK_AS_ADVANCED(USE_FFTWF)\n\n## OPTION(USE_FFTWF \"Use single precision FFTW if found\" ON)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## to include FFTW even if none of the of the variables are set\n\n#IF(NOT(USE_FFTWD OR USE_FFTWF))\n\n#\t#message(WARNING \"both USE_FFTWD and USE_FFTWF ar not set, so we use single precision\")\n\n#\tset(USE_FFTWD ON)\n\n#ENDIF(NOT(USE_FFTWD OR USE_FFTWF))\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# when we find threaded versions of the fftw library,\n\n# we will need to also know how to link against system\n\n# threading libraries, e.g. pthread\n\n#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Look for double-precision first\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# OPTION(FFTWD_LIB \"The full path to the fftw3 library (including the library)\" )\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Double Precision Lib\n",
        "Line" : 75,
        "CharPositionInLine" : 56
      },
      "7" : {
        "Text" : "#Double Precision Lib only if compiled with threads support\n",
        "Line" : 76,
        "CharPositionInLine" : 72
      },
      "8" : {
        "Text" : "#list(APPEND CMAKE_REQUIRED_LIBRARIES \"${CMAKE_THREAD_LIBS_INIT}\")\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "#\n\n# Single precision now\n\n#\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# OPTION(FFTWF_LIB \"The full path to the fftw3f library (including the library)\" )\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Single Precision Lib\n",
        "Line" : 143,
        "CharPositionInLine" : 57
      },
      "12" : {
        "Text" : "#Single Precision Lib only if compiled with threads support\n",
        "Line" : 144,
        "CharPositionInLine" : 73
      },
      "13" : {
        "Text" : "#SET(CMAKE_REQUIRED_LIBRARIES \"${CMAKE_THREAD_LIBS_INIT}\")\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 14
    },
    "cmake/FindQt5.cmake" : {
      "ObjectId" : "0f159a53a8fca9dd4539bd27994e40c8c8427d3c",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################\n\n# A config file to load Qt5\n\n# Sets the following variables\n\n#   Qt5_Found\n\n#   Qt5_NOT_FOUND_MESSAGE (if not found)\n\n#   Qt5_VERSION\n\n#   Qt5_DIR\n\n#   Qt5_LIB_DIR\n\n#   Qt5_INCLUDE_DIR\n\n#   Qt5_PLUGINS_DIR\n\n#   Qt5_IMPORTS_DIR\n\n#   Qt5_CMAKE_DIR\n\n#   \n\n################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Check if qmake is present\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if(${QMAKE_EXECUTABLE} MATCHES \"/usr/local/cina/qt4/qt-4.8.6/bin/qmake\")\n\n#     set(QMAKE_EXECUTABLE \"/usr/local/cina/qt5/Qt5.5.0/5.5/gcc_64/bin/qmake\")\n\n# endif()\n\n# if(${QMAKE_EXECUTABLE} MATCHES \"/usr/bin/qmake\")\n\n#     set(QMAKE_EXECUTABLE \"/usr/local/cina/qt5/Qt5.5.0/5.5/gcc_64/bin/qmake\")\n\n# endif()\n\n# if(${QMAKE_EXECUTABLE} MATCHES \"/usr/local/cina/anaconda/Anaconda2-2.5.0/bin/qmake\")\n\n#     set(QMAKE_EXECUTABLE \"/usr/local/cina/qt5/Qt5.5.0/5.5/gcc_64/bin/qmake\")\n\n# endif()\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/GetPropagateDeps.cmake" : {
      "ObjectId" : "205dfec1688038d6df9425a5a68ba13fc8af8ee4",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##> Filter out duplicates wrt. current-directory properties\n",
        "Line" : 7,
        "CharPositionInLine" : 16
      },
      "1" : {
        "Text" : "#message(\">>>${_current}\")\n\n#message(\">>>${_depdefs}\")\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "##\n\n#> Removes duplicate wrt. current-directory  \n",
        "Line" : 25,
        "CharPositionInLine" : 16
      },
      "3" : {
        "Text" : "#message(\"DEBUG> Adding propagated define (${_prefix}->${PROJECT_NAME}): ${_def}\")\n",
        "Line" : 29,
        "CharPositionInLine" : 24
      },
      "4" : {
        "Text" : "#message(\"DEBUG> Omitting duplicate propagated define (${_prefix}->${PROJECT_NAME}): ${_def}\")\n",
        "Line" : 32,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 5
    },
    "cmake/SetPropagateDeps.cmake" : {
      "ObjectId" : "4a925ebdd23dbe7fb12bed058076f46aafdd064a",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message(\">>>>${_prefix} ${_DEP_DEFINITIONS}\")\n",
        "Line" : 9,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "external/CMakeLists.txt" : {
      "ObjectId" : "e6c65ff526462af66427bb15e9d2bb076b59e37c",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt for external                                              #\n\n############################################################################\n\n# Author:                                                                  #\n\n# Nikhil Biyani  03/2016                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================#\n\n# Add subdirectories           #\n\n#==============================#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/tclap/CMakeLists.txt" : {
      "ObjectId" : "d16dc111d15377d5b5c9deefa176c9feb3ec66aa",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt for tclap                                                 #\n\n############################################################################\n\n# Author:                                                                  #\n\n# Nikhil Biyani  03/2016                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================#\n\n# Add subdirectories           #\n\n#==============================#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/tclap/Makefile.am" : {
      "ObjectId" : "0e247bf5bf317de4a0e1a40270598092c56d95fc",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "kernel/CMakeLists.txt" : {
      "ObjectId" : "47f73806e12c8f53a4eeac5b89d43f1b753042bc",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libraries --------------------------------------------------------------------\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/executables/CMakeLists.txt" : {
      "ObjectId" : "f2e42a37c62a3b21cb76bac2e8169f15e0a8077b",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt for kernel/executables                                    #\n\n############################################################################\n\n# Author:                                                                  #\n\n# Nikhil Biyani  03/2016                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================#\n\n# Set Environment              #\n\n#==============================#\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Executables\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#==============================#\n\n# External Libraries           #\n\n#==============================#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#==============================#\n\n# Include Directories          #\n\n#==============================#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#=============================#\n\n# Create Executables          # \n\n#=============================#\n\n# For Executables\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Link to the library created in step above\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#==============================#\n\n# Installation                 #\n\n#==============================#\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "kernel/mrc/CMakeLists.txt" : {
      "ObjectId" : "25ebafef2aff92dd5fa6a3dd586931f95beff64d",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/bin/CMakeLists.txt" : {
      "ObjectId" : "1514512e894eb38aa7b575c388503bc2a9acb5bf",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/include/CMakeLists.txt" : {
      "ObjectId" : "efe6b6eb8508d4bdc304d3c0f913f7952e9bf500",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Libraries --------------------------------------------------------------------i\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/lib/CMakeLists.txt" : {
      "ObjectId" : "703c9284d97ec59fabe9b23215a585fc1125816d",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Application Name\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# Fortran Compiler -------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#gfortra\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#gfortra\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#ifort\n\n#LIST(APPEND CMAKE_Fortran_FLAGS_RELEASE \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_DEBUG \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# g77\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "################################################################################\n\n# C Compiler -------------------------------------------------------------------\n\n#add_definitions(-DPROTOTYPE -Dalliant -Dpowerpc -w -ffast-math -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -c)\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################################\n\n# C++ Compiler -----------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###############################################################################\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################################\n\n# Libraries --------------------------------------------------------------------i\n\n#set(LOCAL_LIB_DIR ../lib)\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################################\n\n# Executables ------------------------------------------------------------------\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# create Fortran object files\n\n#set(CMAKE_FORTRAN_COMPILE_OBJECT ON)\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# fsplit -----------------------------------------------------------------------\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# libgen -----------------------------------------------------------------------\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# libmisc ----------------------------------------------------------------------\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# libim2k ----------------------------------------------------------------------\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# libplot2k --------------------------------------------------------------------\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# lib2dx -----------------------------------------------------------------------\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# libfft -----------------------------------------------------------------------\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# libconvi ---------------------------------------------------------------------\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##############################################################################\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# sources\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# executables\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "###############################################################################\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "kernel/mrc/lib/collectFiles.cmake" : {
      "ObjectId" : "001006980e02937a1f29973dc435fb0f212ad1ec",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message(STATUS ${FSPLIT_FILES})\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#check if sources newere then lib\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/lib/createLib.cmake" : {
      "ObjectId" : "67a5a6b58b52e9e1767d524901a4daf530966a11",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message(\"OBJECT_FILES=${OBJECT_FILES}\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/lib/doPostFortran.cmake" : {
      "ObjectId" : "770a3e0525c23530243c688b4c94ac7239f81ae3",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kernel/mrc/lib/doPostGCC.cmake" : {
      "ObjectId" : "6ce73b04d9015a38c8f7857a41b50e195c8cf131",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kernel/mrc/lib/old/CMakeLists.txt" : {
      "ObjectId" : "9333a989ecaed46230758c7fa0f52b1d9cb89232",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/source/2dx_getlat/CMakeLists.txt" : {
      "ObjectId" : "c39f447d8b2421f906c530164ddb0cf9db42fb2d",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Executables ------------------------------------------------------------------\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#target_link_libraries(${EXECUTABLE} ${LOCAL_LIBRARIES} ${LIBRARIES})\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Installation  ---------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "kernel/mrc/source/2dx_single_particle_lib/CMakeLists.txt" : {
      "ObjectId" : "3c6858e061aa3ea0e5f5128aa847c936d7014447",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(\"/opt/intel/mkl/include/fftw/\")\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#EMAN2 specific include dir\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# C++ Compiler -----------------------------------------------------------------\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"-openmp -std=c++11 -O3 -xhost\")\n\n#set(CMAKE_CXX_FLAGS \"-openmp -O3 -xhost -vec-report2\")\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# -Werror -std=c++11\") \n",
        "Line" : 84,
        "CharPositionInLine" : 451
      },
      "6" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"-fopenmp -g -ggdb -pedantic -W -Wall -Wno-long-long -Wno-unused-variable\") \n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "kernel/mrc/source/2dx_single_particle_lib/ParallelRunners/CMakeLists.txt" : {
      "ObjectId" : "6144cb890db7bf166a3eed8b26074cc6682b5405",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"-fopenmp\") \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries(${EXECUTABLE} /usr/lib64/mpich2/lib/libmpl.so)\n\n#target_link_libraries(${EXECUTABLE} /usr/lib64/mpich2/lib/libopa.so)\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#linking for eman2 lib (libEM2.a)\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# executables\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# sources\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "kernel/mrc/source/2dx_single_particle_lib/Runners/CMakeLists.txt" : {
      "ObjectId" : "4c9edb74d076fc6e3245178afdcacb9e4ef2a278",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"-fopenmp -O3 -funroll-loops -W -Waddress -Wchar-subscripts -Wcomment -Wformat -Wmissing-braces -Wparentheses -Wreorder -Wreturn-type -Wsequence-point -Wsign-compare -Wstrict-aliasing -Wstrict-overflow=1 -Wswitch -Wtrigraphs -Wuninitialized  -Wunknown-pragmas -Wunused-function -Wunused-label -Wunused-value -Wvolatile-register-var -Wno-long-long -Wextra\") \n\n#set(CMAKE_CXX_FLAGS \"-fopenmp -g3 -pedantic -W -Wall -Wno-long-long -Wno-unused-variable\") \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# C++ Compiler -----------------------------------------------------------------\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(CMAKE_CXX_FLAGS \"-openmp -O3 -std=c++11 -xhost\")\n\n#set(CMAKE_CXX_FLAGS \"-openmp -O3 -xhost -ipo -fast -xavx -no-prec-div -unroll\")\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#target_link_libraries(${EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/../eman2/libEM/cuda/libEM2Cuda.a)\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#linking for eman2 lib (libEM2.a)\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# executables\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# sources\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "kernel/mrc/source/2dx_single_particle_lib/Test/CMakeLists.txt" : {
      "ObjectId" : "f44fde8dee3ad134816b84f20a0c0732378b6b77",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sources\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/source/2dx_single_particle_lib/cmake/CMakeLists.txt" : {
      "ObjectId" : "6717720d62a426da6e5d5a642cd52bb6eb9f17bb",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install(FILES FindBoost.cmake        DESTINATION ${CMAKE_BINARY_DIR}/share)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#install(FILES build_all              DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/source/2dx_single_particle_lib/cmake/FindCppUnit.cmake" : {
      "ObjectId" : "bd1097197d88cef4c395dfe708a7cf304d38d8a4",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# http://root.cern.ch/viewvc/trunk/cint/reflex/cmake/modules/FindCppUnit.cmake\n\n#\n\n# - Find CppUnit\n\n# This module finds an installed CppUnit package.\n\n#\n\n# It sets the following variables:\n\n#  CPPUNIT_FOUND       - Set to false, or undefined, if CppUnit isn't found.\n\n#  CPPUNIT_INCLUDE_DIR - The CppUnit include directory.\n\n#  CPPUNIT_LIBRARY     - The CppUnit library to link against.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# show which CppUnit was found only if not quiet\n",
        "Line" : 22,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "# fatal error if CppUnit is required but not found\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 3
    },
    "kernel/mrc/source/2dx_single_particle_lib/cmake/FindEigen2.cmake" : {
      "ObjectId" : "2579a6c9c00140c223a1e6456a1bf4fb1123c4ee",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen2 lib\n\n# Once done this will define\n\n#\n\n#  EIGEN2_FOUND - system has eigen lib\n\n#  EIGEN2_INCLUDE_DIR - the eigen include directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "kernel/mrc/source/2dx_single_particle_lib/cmake/FindEigen3.cmake" : {
      "ObjectId" : "08fde2af321453992844a4d128d2246060aeda5c",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#  FIND_PATH(FFTW_INCLUDE_PATH fftw3.h ${FFTW_INC_SEARCHPATH})\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "kernel/mrc/source/2dx_single_particle_lib/cmake/FindFFTW.cmake" : {
      "ObjectId" : "8d8a4333a9c638f78ff7ee78ae8a61df6da30858",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## FFTW can be compiled and subsequently linked against\n\n## various data types.\n\n## There is a single set of include files, and then muttiple libraries,\n\n## One for each type.  I.e. libfftw.a-->double, libfftwf.a-->float\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## The following logic belongs in the individual package\n\n## MARK_AS_ADVANCED(USE_FFTWD)\n\n## OPTION(USE_FFTWD \"Use double precision FFTW if found\" ON)\n\n## MARK_AS_ADVANCED(USE_FFTWF)\n\n## OPTION(USE_FFTWF \"Use single precision FFTW if found\" ON)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## to include FFTW even if none of the of the variables are set\n\n#IF(NOT(USE_FFTWD OR USE_FFTWF))\n\n#\t#message(WARNING \"both USE_FFTWD and USE_FFTWF ar not set, so we use single precision\")\n\n#\tset(USE_FFTWD ON)\n\n#ENDIF(NOT(USE_FFTWD OR USE_FFTWF))\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#   OPTION(FFTWD_LIB \"The full path to the fftw3 library (including the library)\" )\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Double Precision Lib\n",
        "Line" : 54,
        "CharPositionInLine" : 57
      },
      "5" : {
        "Text" : "#Double Precision Lib only if compiled with threads support\n",
        "Line" : 55,
        "CharPositionInLine" : 73
      },
      "6" : {
        "Text" : "#   OPTION(FFTWF_LIB \"The full path to the fftw3f library (including the library)\" )\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Single Precision Lib\n",
        "Line" : 68,
        "CharPositionInLine" : 58
      },
      "8" : {
        "Text" : "#Single Precision Lib only if compiled with threads support\n",
        "Line" : 69,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 9
    },
    "kernel/mrc/source/2dx_single_particle_lib/cmake/GetPropagateDeps.cmake" : {
      "ObjectId" : "7a960fd903576eaac525fadbdc4d8ef47f45be3c",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##> Filter out duplicates wrt. current-directory properties\n",
        "Line" : 7,
        "CharPositionInLine" : 16
      },
      "1" : {
        "Text" : "#message(\"DEBUG> Adding propagated include (${_prefix}->${PROJECT_NAME}): ${_dir}\")\n",
        "Line" : 11,
        "CharPositionInLine" : 24
      },
      "2" : {
        "Text" : "#message(\"DEBUG> Omittin duplicate propagated include (${_prefix}->${PROJECT_NAME}): ${_dir}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 24
      },
      "3" : {
        "Text" : "##\n\n#> Removes duplicate wrt. current-directory  \n",
        "Line" : 22,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "#message(\"DEBUG> Adding propagated define (${_prefix}->${PROJECT_NAME}): ${_def}\")\n",
        "Line" : 26,
        "CharPositionInLine" : 24
      },
      "5" : {
        "Text" : "#message(\"DEBUG> Omitting duplicate propagated define (${_prefix}->${PROJECT_NAME}): ${_def}\")\n",
        "Line" : 29,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 6
    },
    "kernel/mrc/source/2dx_single_particle_lib/cmake/SetPropagateDeps.cmake" : {
      "ObjectId" : "30a4ec97688c27d8859d6fdd4e7835bf44be2b0c",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/CMakeLists.txt" : {
      "ObjectId" : "e40d7852071871a6f174dacae12fe894f9850738",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(CMAKE_INSTALL_PREFIX ${EMAN_INSTALL_PREFIX} CACHE INTERNAL \"installation prefix\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET(EXECUTABLE_OUTPUT_PATH ${EMAN_BINARY_DIR}/bin CACHE PATH \"output directory for building all executables.\")\n\n#SET(LIBRARY_OUTPUT_PATH ${EMAN_BINARY_DIR}/lib CACHE PATH \"output directory for building all libraries.\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#flags used for debugging and testing\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#flags for optimization level. You can only turn one of following option to ON, or leave all of them to OFF.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is the default\n",
        "Line" : 105,
        "CharPositionInLine" : 39
      },
      "5" : {
        "Text" : "#MESSAGE(\"OPT_FLAGS = \" ${OPT_FLAGS})\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################\n\n# C++ Compiler -----------------------------------------------------------------\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#set(OPT_FLAGS \"-openmp -O3 -xhost\")\n\n#set(CMAKE_CXX_FLAGS \"-openmp -O2 -xhost -vec-report2\")\n",
        "Line" : 113,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# \tFIND_PATH(GL_INCLUDE_DIR gl.h /usr/include/GL)\n\n# \tFIND_PATH(GLU_INCLUDE_DIR glu.h /usr/include/GL)\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#SET(EMAN_CXX_FLAGS \"-n32 -LANG:std -w2 -fullwarn -LANG:ansi-for-init-scope=ON\" CACHE INTERNAL \"C++ compiler flags\")\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#SET(EMAN_CXX_FLAGS \"-Wall -Werror\" CACHE INTERNAL \"EMAN CXX FLAGS\")\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# for 64-bit large file support\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# end for 64-bit large file support\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#MESSAGE(\"WARNING: ${upper} not found, ENABLE_${upper} is set back to OFF\")\n",
        "Line" : 260,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "#MESSAGE(\"WARNING: ${upper} not found, ENABLE_${upper} is set back to OFF\")\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# CHECK_REQUIRED_LIB(FFTW3 fftw3f fftw3.h)\n",
        "Line" : 350,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "#FIND_PATH(NUMPY_INCLUDE_PATH numpy/arrayobject.h\n\n#    $ENV{PYTHON_ROOT}/lib/python2.7/site-packages/numpy/core/include\n\n#    $ENV{PYTHON_ROOT}/lib/python2.6/site-packages/numpy/core/include\n\n#\t$ENV{PYTHON_ROOT}/lib/python2.5/site-packages/numpy/core/include\n\n#\t$ENV{PYTHON_ROOT}/lib/python2.4/site-packages/numpy/core/include\n\n#\t/usr/local/lib/python2.7/site-packages/numpy/core/include\n\n#\t/usr/local/lib/python2.6/site-packages/numpy/core/include\n\n#\t/usr/lib64/python2.7/site-packages/numpy/core/include\n\n#\t/usr/lib64/python2.6/site-packages/numpy/core/include\n\n#\t/usr/lib64/python2.5/site-packages/numpy/core/include\n\n#\t/usr/lib64/python2.4/site-packages/numpy/core/include\n\n#\t/usr/lib/python2.7/site-packages/numpy/core/include\n\n#\t/usr/lib/python2.6/site-packages/numpy/core/include\n\n#\t/usr/lib/python2.5/site-packages/numpy/core/include\n\n#    /Library/Python/2.5/site-packages/numpy/core/include\n\n#    /usr/lib/python2.4/site-packages/numpy/core/include\n\n#    /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/core/include\n\n#    /System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/numpy/core/include\n\n#    /usr/include)\n\n#INCLUDE_DIRECTORIES(${NUMPY_INCLUDE_PATH}) \n",
        "Line" : 467,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#IF(WIN32)\n\n#\tCHECK_PYTHON($ENV{PYTHON_VERSION} 27 26 25 24 23 22)\n\n#ELSE(WIN32)\n\n#\tCHECK_PYTHON($ENV{PYTHON_VERSION} 2.7 2.6 2.5 2.4 2.3 2.2)\n\n#ENDIF(WIN32)\n",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#IF(PYTHON_INCLUDE_PATH)\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Check the most generic name first (used by cctbx).\n\n# CHECK_REQUIRED_LIB(BOOST boost_python boost/python.hpp)\n",
        "Line" : 495,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#ELSE(PYTHON_INCLUDE_PATH)\n\n#    MESSAGE(\"ERROR: Python.h not found\")\n\n#ENDIF(PYTHON_INCLUDE_PATH)\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#            /usr/include/freetype2\n\n#            /usr/local/include/freetype2\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#ADD_SUBDIRECTORY(libpyEM)\n\n#ADD_SUBDIRECTORY(pyemtbx)\n\n#ADD_SUBDIRECTORY(sparx)\n\n#ADD_SUBDIRECTORY(utils)\n\n#ADD_SUBDIRECTORY(mpi_eman)\n\n#ADD_SUBDIRECTORY(examples)\n\n#ADD_SUBDIRECTORY(programs)\n\n#ADD_SUBDIRECTORY(doc)\n\n#ADD_SUBDIRECTORY(images)\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#set the list of unit test to run\n\n#\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#add the custom commands for each unit test program\n\n#\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#this is the trick to make the target run every time, DoUnitTest suppose is a file never been built\n\n#\n",
        "Line" : 600,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "#build a list of all the results\n",
        "Line" : 608,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 27
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/CMakeLists.txt" : {
      "ObjectId" : "3454fd58619917766348b2b887933a6fce6f7447",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    TARGET_LINK_LIBRARIES(EM2 ${FFTW_LIBRARIES} ${GSL_LIBRARY} ${GSL_CBLAS_LIBRARY} m)\n\n#\tTARGET_LINK_LIBRARIES(EM2 ${ACML_LIBRARY} ${GSL_LIBRARY} ${GSL_CBLAS_LIBRARY} m g2c)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/CMakeLists.txt" : {
      "ObjectId" : "ad0011be4e7a0097258a9a3bd4abe05208068e99",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add current directory to the nvcc include line.\n\n#CUDA_INCLUDE_DIRECTORIES(\n\n#  ${CMAKE_CURRENT_SOURCE_DIR}\n\n#)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# And an executable\n\n#CUDA_ADD_EXECUTABLE(proj3d\n\n#\tproj3d.cu\n\n# )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Build a shared library\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Specify the dependency.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n\n# Use the CUDA_COMPILE macro.\n\n#CUDA_COMPILE(CUDA_FILES test_bin.cu)\n\n# \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#INSTALL_TARGETS(/bin proj3d)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/CudaDependency.cmake" : {
      "ObjectId" : "630725c1bc84dd5e080f05b02c87e6072bcf4153",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  For more information, please see: http://software.sci.utah.edu\n\n#\n\n#  The MIT License\n\n#\n\n#  Copyright (c) 2007\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  License for the specific language governing rights and limitations under\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\n\n#  copy of this software and associated documentation files (the \"Software\"),\n\n#  to deal in the Software without restriction, including without limitation\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n#  and/or sell copies of the Software, and to permit persons to whom the\n\n#  Software is furnished to do so, subject to the following conditions:\n\n#\n\n#  The above copyright notice and this permission notice shall be included\n\n#  in all copies or substantial portions of the Software.\n\n#\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n#  DEALINGS IN THE SOFTWARE.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This code is based on the Manta swig/python wrapper dependency checking code.\n\n# -- Abe Stephens\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist\n\n# for make files except for IDEs (see below).  The INCLUDE puts a\n\n# dependency that will force CMake to rerun and bring in the new info\n\n# when it changes.  DO NOT REMOVE THIS (as I did and spent a few hours\n\n# figuring out why it didn't work.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# for IDE generators like MS dev only include the depend files\n\n# if they exist.   This is to prevent ecessive reloading of\n\n# workspaces after each build.   This also means\n\n# that the depends will not be correct until cmake\n\n# is run once after the build has completed once.\n\n# the depend files are created in the wrap tcl/python sections\n\n# when the .xml file is parsed.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# No dependencies, so regenerate the file.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Force CMake to run again next build\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/FindCUDA.cmake" : {
      "ObjectId" : "98bca0f899ea5f45e485dbf2d84161453cdba253",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Tools for building CUDA C files: libraries and build dependencies.\r\n\n# This script locates the NVIDIA CUDA C tools. It should work on linux, windows,\r\n\n# and mac and should be reasonably up to date with CUDA C releases.\r\n\n#\r\n\n# This script makes use of the standard find_package arguments of <VERSION>,\r\n\n# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\r\n\n# was found.\r\n\n#\r\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix\r\n\n# cannot be determined by the location of nvcc in the system path and REQUIRED\r\n\n# is specified to find_package(). To use a different installed version of the\r\n\n# toolkit set the environment variable CUDA_BIN_PATH before running cmake\r\n\n# (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda)\r\n\n# or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If you change the value of\r\n\n# CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be\r\n\n# relocated.\r\n\n#\r\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\r\n\n# platforms, or to use a cuda runtime not installed in the default location. In\r\n\n# newer versions of the toolkit the cuda library is included with the graphics\r\n\n# driver- be sure that the driver version matches what is needed by the cuda\r\n\n# runtime version.\r\n\n#\r\n\n# The following variables affect the behavior of the macros in the script (in\r\n\n# alphebetical order).  Note that any of these flags can be changed multiple\r\n\n# times in the same directory before calling CUDA_ADD_EXECUTABLE,\r\n\n# CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX or CUDA_WRAP_SRCS.\r\n\n#\r\n\n#  CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\r\n\n#  -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\r\n\n#     Note that making this different from the host code when generating object\r\n\n#     or C files from CUDA code just won't work, because size_t gets defined by\r\n\n#     nvcc in the generated source.  If you compile to PTX and then load the\r\n\n#     file yourself, you can mix bit sizes between device and host.\r\n\n#\r\n\n#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\r\n\n#  -- Set to ON if you want the custom build rule to be attached to the source\r\n\n#     file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\r\n\n#     targets.\r\n\n#\r\n\n#     This allows the user to build the target from the CUDA file; however, bad\r\n\n#     things can happen if the CUDA source file is added to multiple targets.\r\n\n#     When performing parallel builds it is possible for the custom build\r\n\n#     command to be run more than once and in parallel causing cryptic build\r\n\n#     errors.  VS runs the rules for every source file in the target, and a\r\n\n#     source can have only one rule no matter how many projects it is added to.\r\n\n#     When the rule is run from multiple targets race conditions can occur on\r\n\n#     the generated file.  Eventually everything will get built, but if the user\r\n\n#     is unaware of this behavior, there may be confusion.  It would be nice if\r\n\n#     this script could detect the reuse of source files across multiple targets\r\n\n#     and turn the option off for the user, but no good solution could be found.\r\n\n#\r\n\n#  CUDA_BUILD_CUBIN (Default OFF)\r\n\n#  -- Set to ON to enable and extra compilation pass with the -cubin option in\r\n\n#     Device mode. The output is parsed and register, shared memory usage is\r\n\n#     printed during build.\r\n\n#\r\n\n#  CUDA_BUILD_EMULATION (Default OFF for device mode)\r\n\n#  -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\r\n\n#     when CUDA_BUILD_EMULATION is TRUE.\r\n\n#\r\n\n#  CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\r\n\n#  -- Set to the path you wish to have the generated files placed.  If it is\r\n\n#     blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\r\n\n#     Intermediate files will always be placed in\r\n\n#     CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\r\n\n#\r\n\n#  CUDA_GENERATE_DEPENDENCIES_DURING_CONFIGURE (Default ON)\r\n\n#  -- Instead of waiting until build time compute dependencies, do it during\r\n\n#     configure time.  Note that dependencies are still generated during\r\n\n#     build, so that if they change the build system can be updated.  This\r\n\n#     mainly removes the need for configuring once after the first build to\r\n\n#     load the dependies into the build system.\r\n\n#\r\n\n#  CUDA_CHECK_DEPENDENCIES_DURING_COMPILE (Default ON)\r\n\n#  -- During build, the file level dependencies are checked.  If all\r\n\n#     dependencies are older than the generated file, the generated file isn't\r\n\n#     compiled but touched (time stamp updated) so the driving build system\r\n\n#     thinks it has been compiled.\r\n\n#\r\n\n#  CUDA_HOST_COMPILATION_CPP (Default ON)\r\n\n#  -- Set to OFF for C compilation of host code.\r\n\n#\r\n\n#  CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\r\n\n#  -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\r\n\n#     --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\r\n\n#     CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\r\n\n#     $(VCInstallDir)/bin is a special value that expands out to the path when\r\n\n#     the command is run from withing VS.\r\n\n#\r\n\n#  CUDA_NVCC_FLAGS\r\n\n#  CUDA_NVCC_FLAGS_<CONFIG>\r\n\n#  -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\r\n\n#     semi-colon delimited (e.g. --compiler-options;-Wall)\r\n\n#\r\n\n#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)\r\n\n#  -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\r\n\n#     dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\r\n\n#     host compiler through nvcc's -Xcompiler flag.  This helps make the\r\n\n#     generated host code match the rest of the system better.  Sometimes\r\n\n#     certain flags give nvcc problems, and this will help you turn the flag\r\n\n#     propagation off.  This does not affect the flags supplied directly to nvcc\r\n\n#     via CUDA_NVCC_FLAGS or through the OPTION flags specified through\r\n\n#     CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\r\n\n#     shared library compilation are not affected by this flag.\r\n\n#\r\n\n#  CUDA_SEPARABLE_COMPILATION (Default OFF)\r\n\n#  -- If set this will enable separable compilation for all CUDA runtime object\r\n\n#     files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\r\n\n#     (e.g. calling CUDA_WRAP_SRCS directly),\r\n\n#     CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\r\n\n#     CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\r\n\n#\r\n\n#  CUDA_VERBOSE_BUILD (Default OFF)\r\n\n#  -- Set to ON to see all the commands used when building the CUDA file.  When\r\n\n#     using a Makefile generator the value defaults to VERBOSE (run make\r\n\n#     VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\r\n\n#     always print the output.\r\n\n#\r\n\n# The script creates the following macros (in alphebetical order):\r\n\n#\r\n\n#  CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\r\n\n#  -- Adds the cufft library to the target (can be any target).  Handles whether\r\n\n#     you are in emulation mode or not.\r\n\n#\r\n\n#  CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\r\n\n#  -- Adds the cublas library to the target (can be any target).  Handles\r\n\n#     whether you are in emulation mode or not.\r\n\n#\r\n\n#  CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\r\n\n#                       [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\r\n\n#  -- Creates an executable \"cuda_target\" which is made up of the files\r\n\n#     specified.  All of the non CUDA C files are compiled using the standard\r\n\n#     build rules specified by CMAKE and the cuda files are compiled to object\r\n\n#     files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\r\n\n#     added automatically to include_directories().  Some standard CMake target\r\n\n#     calls can be used on the target after calling this macro\r\n\n#     (e.g. set_target_properties and target_link_libraries), but setting\r\n\n#     properties that adjust compilation flags will not affect code compiled by\r\n\n#     nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\r\n\n#     CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\r\n\n#\r\n\n#  CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\r\n\n#                    [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\r\n\n#  -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\r\n\n#\r\n\n#  CUDA_BUILD_CLEAN_TARGET()\r\n\n#  -- Creates a convience target that deletes all the dependency files\r\n\n#     generated.  You should make clean after running this target to ensure the\r\n\n#     dependency files get regenerated.\r\n\n#\r\n\n#  CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\r\n\n#                [OPTIONS ...] )\r\n\n#  -- Returns a list of generated files from the input source files to be used\r\n\n#     with ADD_LIBRARY or ADD_EXECUTABLE.\r\n\n#\r\n\n#  CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\r\n\n#  -- Returns a list of PTX files generated from the input source files.\r\n\n#\r\n\n#  CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\r\n\n#                                                       cuda_target\r\n\n#                                                       object_files )\r\n\n#  -- Compute the name of the intermediate link file used for separable\r\n\n#     compilation.  This file name is typically passed into\r\n\n#     CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\r\n\n#     based on cuda_target the list of objects files that need separable\r\n\n#     compilation as specified by object_files.  If the object_files list is\r\n\n#     empty, then output_file_var will be empty.  This function is called\r\n\n#     automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\r\n\n#     this is a function and not a macro.\r\n\n#\r\n\n#  CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\r\n\n#  -- Sets the directories that should be passed to nvcc\r\n\n#     (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\r\n\n#     files.\r\n\n#\r\n\n#\r\n\n#  CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\r\n\n#                                           nvcc_flags object_files)\r\n\n#\r\n\n#  -- Generates the link object required by separable compilation from the given\r\n\n#     object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\r\n\n#     CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\r\n\n#     directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\r\n\n#     nvcc_flags passed in are the same as the flags passed in via the OPTIONS\r\n\n#     argument.  The only nvcc flag added automatically is the bitness flag as\r\n\n#     specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\r\n\n#     instead of a macro.\r\n\n#\r\n\n#  CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\r\n\n#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )\r\n\n#  -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\r\n\n#     CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\r\n\n#     function under the hood.\r\n\n#\r\n\n#     Given the list of files (file0 file1 ... fileN) this macro generates\r\n\n#     custom commands that generate either PTX or linkable objects (use \"PTX\" or\r\n\n#     \"OBJ\" for the format argument to switch).  Files that don't end with .cu\r\n\n#     or have the HEADER_FILE_ONLY property are ignored.\r\n\n#\r\n\n#     The arguments passed in after OPTIONS are extra command line options to\r\n\n#     give to nvcc.  You can also specify per configuration options by\r\n\n#     specifying the name of the configuration followed by the options.  General\r\n\n#     options must preceed configuration specific options.  Not all\r\n\n#     configurations need to be specified, only the ones provided will be used.\r\n\n#\r\n\n#        OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\r\n\n#        DEBUG -g\r\n\n#        RELEASE --use_fast_math\r\n\n#        RELWITHDEBINFO --use_fast_math;-g\r\n\n#        MINSIZEREL --use_fast_math\r\n\n#\r\n\n#     For certain configurations (namely VS generating object files with\r\n\n#     CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\r\n\n#     be produced for the given cuda file.  This is because when you add the\r\n\n#     cuda file to Visual Studio it knows that this file produces an object file\r\n\n#     and will link in the resulting object file automatically.\r\n\n#\r\n\n#     This script will also generate a separate cmake script that is used at\r\n\n#     build time to invoke nvcc.  This is for several reasons.\r\n\n#\r\n\n#       1. nvcc can return negative numbers as return values which confuses\r\n\n#       Visual Studio into thinking that the command succeeded.  The script now\r\n\n#       checks the error codes and produces errors when there was a problem.\r\n\n#\r\n\n#       2. nvcc has been known to not delete incomplete results when it\r\n\n#       encounters problems.  This confuses build systems into thinking the\r\n\n#       target was generated when in fact an unusable file exists.  The script\r\n\n#       now deletes the output files if there was an error.\r\n\n#\r\n\n#       3. By putting all the options that affect the build into a file and then\r\n\n#       make the build rule dependent on the file, the output files will be\r\n\n#       regenerated when the options change.\r\n\n#\r\n\n#     This script also looks at optional arguments STATIC, SHARED, or MODULE to\r\n\n#     determine when to target the object compilation for a shared library.\r\n\n#     BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\r\n\n#     CUDA_ADD_LIBRARY.  On some systems special flags are added for building\r\n\n#     objects intended for shared libraries.  A preprocessor macro,\r\n\n#     <target_name>_EXPORTS is defined when a shared library compilation is\r\n\n#     detected.\r\n\n#\r\n\n#     Flags passed into add_definitions with -D or /D are passed along to nvcc.\r\n\n#\r\n\n# The script defines the following variables:\r\n\n#\r\n\n#  CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\r\n\n#  CUDA_VERSION_MINOR    -- The minor version.\r\n\n#  CUDA_VERSION\r\n\n#  CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\r\n\n#\r\n\n#  CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\r\n\n#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\r\n\n#                           SDK.  This script will not directly support finding\r\n\n#                           specific libraries or headers, as that isn't\r\n\n#                           supported by NVIDIA.  If you want to change\r\n\n#                           libraries when the path changes see the\r\n\n#                           FindCUDA.cmake script for an example of how to clear\r\n\n#                           these variables.  There are also examples of how to\r\n\n#                           use the CUDA_SDK_ROOT_DIR to locate headers or\r\n\n#                           libraries, if you so choose (at your own risk).\r\n\n#  CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\r\n\n#                           for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\r\n\n#  CUDA_LIBRARIES        -- Cuda RT library.\r\n\n#  CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\r\n\n#                           implementation (alternative to:\r\n\n#                           CUDA_ADD_CUFFT_TO_TARGET macro)\r\n\n#  CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\r\n\n#                           implementation (alterative to:\r\n\n#                           CUDA_ADD_CUBLAS_TO_TARGET macro).\r\n\n#  CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\r\n\n#                           Only available for CUDA version 4.0+.\r\n\n#  CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\r\n\n#                           Only available for CUDA version 3.2+.\r\n\n#  CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\r\n\n#                           Only available for CUDA version 3.2+.\r\n\n#  CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives library.\r\n\n#                           Only available for CUDA version 4.0+.\r\n\n#  CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\r\n\n#                           Only available for CUDA version 3.2+.\r\n\n#                           Windows only.\r\n\n#  CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\r\n\n#                           Only available for CUDA version 3.2+.\r\n\n#                           Windows only.\r\n\n#\r\n\n#\r\n\n#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  Copyright (c) 2007-2009\r\n\n#  Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n\n#\r\n\n###############################################################################\r\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FindCUDA.cmake\r\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We need to have at least this version to support the VERSION_LESS argument to 'if' (2.6.2) and unset (2.6.3)\r\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\r\n",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\r\n\n# processed.  Using this variable, we can pull out the current path, and\r\n\n# provide a way to get access to the other files we need local to here.\r\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\r\n",
        "Line" : 346,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\r\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\r\n\n##\r\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\r\n\n# it doesn't exist then we need to create an empty one, so we can\r\n\n# include it.\r\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\r\n\n# depends on exist.  If they don't then we should clear the dependency\r\n\n# file and regenerate it later.  This covers the case where a header\r\n\n# file has disappeared or moved.\r\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\r\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\r\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\r\n\n# hours figuring out why it didn't work.\r\n",
        "Line" : 368,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\r\n\n# invocation and rebuild the dependencies.\r\n\n#message(\"including dependency_file = ${dependency_file}\")\r\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\r\n\n# here.  If they aren't there we need to just blank this variable and\r\n\n# make the file regenerate again.\r\n",
        "Line" : 380,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\r\n\n#     message(\"CUDA_NVCC_DEPEND set\")\r\n\n#   else()\r\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\r\n\n#   endif()\r\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\r\n",
        "Line" : 389,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\r\n",
        "Line" : 391,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\r\n",
        "Line" : 393,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\r\n\n# No dependencies, so regenerate the file.\r\n",
        "Line" : 398,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\r\n\n# No incoming dependencies, so we need to generate them.  Make the\r\n\n# output depend on the dependency file itself, which should cause the\r\n\n# rule to re-run.\r\n",
        "Line" : 403,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\r\n",
        "Line" : 409,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Setup variables' defaults\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\r\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\r\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\r\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\r\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\r\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\r\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\r\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\r\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\r\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\r\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\r\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\r\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\r\n\n# for completeness.  We need run this loop in order to accomodate the addition\r\n\n# of extra configuration types.  Duplicate entries will be removed by\r\n\n# REMOVE_DUPLICATES.\r\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Locate CUDA, Set Build Type, etc.\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\r\n\n# if they have then clear the cache variables, so that will be detected again.\r\n",
        "Line" : 495,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\r\n",
        "Line" : 501,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\r\n",
        "Line" : 503,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# No specific variables to catch.  Use this kind of code before calling\r\n\n# find_package(CUDA) to clean up any variables that may depend on this path.\r\n",
        "Line" : 521,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\r\n\n#   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\r\n",
        "Line" : 524,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Search for the cuda distribution.\r\n",
        "Line" : 528,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\r\n",
        "Line" : 531,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Now search default paths\r\n",
        "Line" : 541,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# We need to force this back into the cache.\r\n",
        "Line" : 551,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\r\n",
        "Line" : 563,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Compute the version.\r\n",
        "Line" : 577,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Need to set these based off of the cached value\r\n",
        "Line" : 584,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Always set this convenience variable\r\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Here we need to determine if the version we found is acceptable.  We will\r\n\n# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\r\n\n# specified.  The presence of either of these options checks the version\r\n\n# string and signals if the version is acceptable or not.\r\n",
        "Line" : 592,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#\r\n",
        "Line" : 597,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#\r\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#\r\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\r\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Header included in toolkit\r\n",
        "Line" : 617,
        "CharPositionInLine" : 21
      },
      "53" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\r\n",
        "Line" : 628,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\r\n\n# and old paths.\r\n",
        "Line" : 634,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\r\n\n# (lib/Win32) and the old path (lib).\r\n",
        "Line" : 638,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 649,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# CUDA_LIBRARIES\r\n",
        "Line" : 658,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\r\n",
        "Line" : 661,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\r\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\r\n\n# that one instead of cudart.\r\n",
        "Line" : 674,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# We need to add the path to cudart to the linker using rpath, since the\r\n\n# library name for the cuda libraries is prepended with @rpath.\r\n",
        "Line" : 682,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\r\n\n# some platforms.\r\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#######################\r\n\n# Look for some of the toolkit helper libraries\r\n",
        "Line" : 703,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#######################\r\n\n# Disable emulation for v3.1 onward\r\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\r\n",
        "Line" : 718,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\r\n",
        "Line" : 720,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# cusparse showed up in version 3.2\r\n",
        "Line" : 727,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "########################\r\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\r\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\r\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\r\n\n# environment variables.\r\n",
        "Line" : 759,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\r\n",
        "Line" : 771,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\r\n\n#   cutil.h\r\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\r\n\n#   PATH_SUFFIXES \"common/inc\"\r\n\n#   DOC \"Location of cutil.h\"\r\n\n#   NO_DEFAULT_PATH\r\n\n#   )\r\n\n# # Now search system paths\r\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\r\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\r\n",
        "Line" : 783,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\r\n",
        "Line" : 786,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\r\n\n# # to get these confused, so we are setting the name based on the word size of\r\n\n# # the build.\r\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\r\n\n#   set(cuda_cutil_name cutil64)\r\n\n# else()\r\n\n#   set(cuda_cutil_name cutil32)\r\n\n# endif()\r\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\r\n\n#   NAMES cutil ${cuda_cutil_name}\r\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\r\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\r\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\r\n\n#   DOC \"Location of cutil library\"\r\n\n#   NO_DEFAULT_PATH\r\n\n#   )\r\n\n# # Now search system paths\r\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\r\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\r\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\r\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#############################\r\n\n# Check for required components\r\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Macros\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "###############################################################################\r\n\n# Add include directories to pass to the nvcc command.\r\n",
        "Line" : 839,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "##############################################################################\r\n",
        "Line" : 848,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "##############################################################################\r\n\n# Separate the OPTIONS out from the sources\r\n\n#\r\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Assume this is a file\r\n",
        "Line" : 877,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "##############################################################################\r\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\r\n\n#\r\n",
        "Line" : 884,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\r\n",
        "Line" : 890,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\r\n",
        "Line" : 895,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "##############################################################################\r\n\n# Helper to add the include directory for CUDA only once\r\n",
        "Line" : 906,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\r\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\r\n",
        "Line" : 925,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "##############################################################################\r\n\n# Helper to avoid clashes of files with the same basename but different paths.\r\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\r\n\n# add this path when there is a conflict, since by the time a second collision\r\n\n# in names is detected it's already too late to fix the first one.  For\r\n\n# consistency sake the relative path will be added to all files.\r\n",
        "Line" : 944,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\r\n\n# Only deal with CMake style paths from here on out\r\n",
        "Line" : 951,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\r\n\n# file(GLOB_RECURSE) is used to pick up the files.\r\n",
        "Line" : 955,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# This recipie is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\r\n\n# CMake source.\r\n",
        "Line" : 960,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Remove leading /\r\n",
        "Line" : 963,
        "CharPositionInLine" : 2
      },
      "94" : {
        "Text" : "# Avoid absolute paths by removing ':'\r\n",
        "Line" : 965,
        "CharPositionInLine" : 2
      },
      "95" : {
        "Text" : "# Avoid relative paths that go up the tree\r\n",
        "Line" : 967,
        "CharPositionInLine" : 2
      },
      "96" : {
        "Text" : "# Avoid spaces\r\n",
        "Line" : 969,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\r\n\n# basename can make a path that looked like path/../basename turn into\r\n\n# path/.. (notice the trailing slash).\r\n",
        "Line" : 972,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\r\n",
        "Line" : 978,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "##############################################################################\r\n\n# This helper macro populates the following variables and setups up custom\r\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\r\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\r\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\r\n\n# a .cpp or .ptx file.\r\n\n# INPUT:\r\n\n#   cuda_target         - Target name\r\n\n#   format              - PTX or OBJ\r\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\r\n\n#   OPTIONS             - Extra options to NVCC\r\n\n# OUTPUT:\r\n\n#   generated_files     - List of generated files\r\n\n##############################################################################\r\n\n##############################################################################\r\n",
        "Line" : 981,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\r\n",
        "Line" : 999,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\r\n",
        "Line" : 1004,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "# Emulation if the card isn't present.\r\n",
        "Line" : 1008,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# Emulation.\r\n",
        "Line" : 1010,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "# Device mode.  No flags necessary.\r\n",
        "Line" : 1013,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\r\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\r\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\r\n\n# $(VCInstallDir)/bin.\r\n",
        "Line" : 1035,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\r\n\n# the script.  We need to defer the decision until compilation time, because\r\n\n# for VS projects we won't know if we are making a debug or release build\r\n\n# until build time.\r\n",
        "Line" : 1045,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\r\n",
        "Line" : 1055,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\r\n",
        "Line" : 1057,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Reset these variables\r\n",
        "Line" : 1065,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\r\n\n# respected in CUDA_ADD_LIBRARY.\r\n",
        "Line" : 1075,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# SHARED, MODULE\r\n",
        "Line" : 1078,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# STATIC\r\n",
        "Line" : 1084,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# CUDA_HOST_FLAGS\r\n",
        "Line" : 1090,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\r\n\n# compiling objects for shared libraries.\r\n",
        "Line" : 1092,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\r\n\n# always need to set the SHARED_FLAGS, though.\r\n",
        "Line" : 1098,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\r\n",
        "Line" : 1107,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\r\n\n# we convert the strings to lists (like we want).\r\n",
        "Line" : 1110,
        "CharPositionInLine" : 4
      },
      "118" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\r\n",
        "Line" : 1114,
        "CharPositionInLine" : 6
      },
      "119" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\r\n\n# like it is currently), we can remove the quotes around the\r\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\r\n",
        "Line" : 1134,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# Get the list of definitions from the directory property\r\n",
        "Line" : 1140,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# Reset the output variable\r\n",
        "Line" : 1152,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Iterate over the macro arguments and create custom\r\n\n# commands for all the .cu files.\r\n",
        "Line" : 1155,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\r\n",
        "Line" : 1158,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Allow per source file overrides of the format.\r\n",
        "Line" : 1162,
        "CharPositionInLine" : 6
      },
      "125" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\r\n",
        "Line" : 1178,
        "CharPositionInLine" : 8
      },
      "126" : {
        "Text" : "# Determine output directory\r\n",
        "Line" : 1186,
        "CharPositionInLine" : 6
      },
      "127" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\r\n",
        "Line" : 1199,
        "CharPositionInLine" : 6
      },
      "128" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\r\n\n# generated_file_path in them get passed in through as a command line\r\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\r\n\n# instead of configure time.\r\n",
        "Line" : 1217,
        "CharPositionInLine" : 6
      },
      "129" : {
        "Text" : "# Setup properties for obj files:\r\n",
        "Line" : 1227,
        "CharPositionInLine" : 6
      },
      "130" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\r\n",
        "Line" : 1231,
        "CharPositionInLine" : 31
      },
      "131" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\r\n",
        "Line" : 1235,
        "CharPositionInLine" : 6
      },
      "132" : {
        "Text" : "# Convience string for output ###########################################\r\n",
        "Line" : 1247,
        "CharPositionInLine" : 6
      },
      "133" : {
        "Text" : "# Build the NVCC made dependency file ###################################\r\n",
        "Line" : 1254,
        "CharPositionInLine" : 6
      },
      "134" : {
        "Text" : "# Configure the build script\r\n",
        "Line" : 1262,
        "CharPositionInLine" : 6
      },
      "135" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\r\n\n# can have bad things happen with dependencies.  Here we check an option\r\n\n# to see if this is the behavior they want.\r\n",
        "Line" : 1265,
        "CharPositionInLine" : 6
      },
      "136" : {
        "Text" : "# Create up the comment string\r\n",
        "Line" : 1282,
        "CharPositionInLine" : 6
      },
      "137" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\r\n",
        "Line" : 1290,
        "CharPositionInLine" : 6
      },
      "138" : {
        "Text" : "# Check to see if the build script is newer than the dependency file.  If\r\n\n# it is, regenerate it.\r\n\n# message(\"CUDA_GENERATE_DEPENDENCIES_DURING_CONFIGURE  = ${CUDA_GENERATE_DEPENDENCIES_DURING_CONFIGURE}\")\r\n\n# message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\r\n\n# execute_process(COMMAND ls -lTtr \"${custom_target_script}\" \"${cmake_dependency_file}\" \"${NVCC_generated_dependency_file}\")\r\n",
        "Line" : 1293,
        "CharPositionInLine" : 6
      },
      "139" : {
        "Text" : "# Note that NVCC_generated_dependency_file is always generated.\r\n",
        "Line" : 1299,
        "CharPositionInLine" : 6
      },
      "140" : {
        "Text" : "# If the two files were generated about the same time then reversing the\r\n\n# comparison will also be true, so check the CUDA_NVCC_DEPEND_REGENERATE\r\n\n# flag.\r\n",
        "Line" : 1302,
        "CharPositionInLine" : 8
      },
      "141" : {
        "Text" : "# message(\"************************************************************************\")\r\n\n# message(\"Same modification time: ${custom_target_script} ${NVCC_generated_dependency_file}\")\r\n",
        "Line" : 1306,
        "CharPositionInLine" : 10
      },
      "142" : {
        "Text" : "# The timestep check is valid\r\n",
        "Line" : 1312,
        "CharPositionInLine" : 10
      },
      "143" : {
        "Text" : "# message(\"_cuda_generate_dependencies = ${_cuda_generate_dependencies}\")\r\n",
        "Line" : 1316,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "# If we needed to regenerate the dependency file, do so now.\r\n",
        "Line" : 1318,
        "CharPositionInLine" : 6
      },
      "145" : {
        "Text" : "# message(\"CUDA_HOST_COMPILER = ${CUDA_HOST_COMPILER}\")\r\n",
        "Line" : 1322,
        "CharPositionInLine" : 8
      },
      "146" : {
        "Text" : "#message(\"CUDA_VS_DIR = ${CUDA_VS_DIR}\")\r\n",
        "Line" : 1334,
        "CharPositionInLine" : 10
      },
      "147" : {
        "Text" : "# The CUDA_HOST_COMPILER is set to something interesting, so use the\r\n\n# ccbin_flags as-is.\r\n",
        "Line" : 1339,
        "CharPositionInLine" : 10
      },
      "148" : {
        "Text" : "# message(\"_cuda_dependency_ccbin = ${_cuda_dependency_ccbin}\")\r\n",
        "Line" : 1343,
        "CharPositionInLine" : 8
      },
      "149" : {
        "Text" : "# Only do this if we have some kind of host compiler defined in\r\n\n# _cuda_dependency_ccbin or ccbin_flags isn't set.\r\n",
        "Line" : 1345,
        "CharPositionInLine" : 10
      },
      "150" : {
        "Text" : "# Try and reload the dependies\r\n",
        "Line" : 1365,
        "CharPositionInLine" : 12
      },
      "151" : {
        "Text" : "# Build the generated file and dependency file ##########################\r\n",
        "Line" : 1371,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\r\n",
        "Line" : 1374,
        "CharPositionInLine" : 8
      },
      "153" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\r\n",
        "Line" : 1378,
        "CharPositionInLine" : 8
      },
      "154" : {
        "Text" : "# Make sure the build system knows the file is generated.\r\n",
        "Line" : 1392,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# Don't add the object file to the list of generated files if we are using\r\n\n# visual studio and we are attaching the build rule to the cuda file.  VS\r\n\n# will add our object file to the linker automatically for us.\r\n",
        "Line" : 1395,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# Visual Studio 8 crashes when you close the solution when you don't add the object file.\r\n",
        "Line" : 1401,
        "CharPositionInLine" : 8
      },
      "157" : {
        "Text" : "#message(\"Not adding ${generated_file}\")\r\n",
        "Line" : 1403,
        "CharPositionInLine" : 10
      },
      "158" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\r\n",
        "Line" : 1412,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "# Set the return parameter\r\n",
        "Line" : 1420,
        "CharPositionInLine" : 2
      },
      "160" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Separable Compilation Link\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1435,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\r\n",
        "Line" : 1441,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\r\n",
        "Line" : 1453,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "# This is an object file not to be compiled, but only\r\n\n# be linked.\r\n\n# This file is generated during the build\r\n",
        "Line" : 1459,
        "CharPositionInLine" : 27
      },
      "164" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\r\n",
        "Line" : 1464,
        "CharPositionInLine" : 4
      },
      "165" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\r\n",
        "Line" : 1472,
        "CharPositionInLine" : 4
      },
      "166" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\r\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\r\n\n# we work around that issue by compiling the intermediate link object as a\r\n\n# pre-link custom command in that situation.\r\n",
        "Line" : 1489,
        "CharPositionInLine" : 4
      },
      "167" : {
        "Text" : "# VS 2010 and 2012 have this problem.  If future versions fix this issue,\r\n\n# it should still work, it just won't be as nice as the other method.\r\n",
        "Line" : 1495,
        "CharPositionInLine" : 6
      },
      "168" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# ADD LIBRARY\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1519,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1528,
        "CharPositionInLine" : 2
      },
      "170" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1531,
        "CharPositionInLine" : 2
      },
      "171" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\r\n\n# compilation.\r\n",
        "Line" : 1536,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# Add the library.\r\n",
        "Line" : 1540,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\r\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\r\n\n# variable will have been defined.\r\n",
        "Line" : 1547,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\r\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n",
        "Line" : 1556,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# ADD EXECUTABLE\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1566,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1575,
        "CharPositionInLine" : 2
      },
      "177" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1577,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\r\n\n# compilation.\r\n",
        "Line" : 1580,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# Add the library.\r\n",
        "Line" : 1584,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\r\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\r\n\n# variable will have been defined.\r\n",
        "Line" : 1591,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\r\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n",
        "Line" : 1600,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1610,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1617,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1619,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE PTX\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1628,
        "CharPositionInLine" : 0
      },
      "186" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1635,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1637,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA ADD CUFFT TO TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1645,
        "CharPositionInLine" : 0
      },
      "189" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA ADD CUBLAS TO TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1658,
        "CharPositionInLine" : 0
      },
      "190" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA BUILD CLEAN TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1671,
        "CharPositionInLine" : 0
      },
      "191" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\r\n\n# target.  You should also make clean after running this target to get the\r\n\n# build system to generate all the code again.\r\n",
        "Line" : 1677,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\r\n\n# This is useful so that the files won't persist in the list after targets\r\n\n# have been removed.\r\n",
        "Line" : 1688,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 193
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "e6118e7aa52c2a931ac6a248bb9812cc36f488ac",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  Copyright (c) 2007-2009\r\n\n#  Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n\n#\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\r\n\n# This converts a file written in makefile syntax into one that can be included\r\n\n# by CMake.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\r\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\r\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\r\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\r\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\r\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\r\n\n# path.\r\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\r\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\r\n\n# just /include.\r\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\r\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Remove the duplicate entries and sort them.\r\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "0519053d1717f420f6180514095ce37c82f83d77",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 62,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 64,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# else ()\n",
        "Line" : 68,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# endif ()\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Registers\n",
        "Line" : 77,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Local memory\n",
        "Line" : 83,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Shared memory\n",
        "Line" : 89,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "ff06449d2dff6f3edaf905c74e306909a5348c33",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\r\n\n# This file runs the nvcc commands to produce the desired output file along with\r\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\r\n\n# file checks the output of each command and if the command fails it deletes the\r\n\n# output files.\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\r\n\n#\r\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\r\n\n#                          ON : Describe each step\r\n\n#\r\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\r\n\n#                               RelWithDebInfo, but it should match one of the\r\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\r\n\n#                               configuration used when compiling the code.  If\r\n\n#                               blank or unspecified Debug is assumed as this is\r\n\n#                               what CMake does.\r\n\n#\r\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\r\n\n#\r\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\r\n\n#                                                   in if build_cubin is true.\r\n\n# generate_dependency_only:BOOL=<> Only generate the dependency file.\r\n\n#\r\n\n# check_dependencies:BOOL=<> Check the dependencies.  If everything is up to\r\n\n#                            date, simply touch the output file instead of\r\n\n#                            generating it.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\r\n",
        "Line" : 63,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\r\n",
        "Line" : 64,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\r\n",
        "Line" : 65,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\r\n",
        "Line" : 66,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\r\n",
        "Line" : 67,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\r\n",
        "Line" : 68,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\r\n",
        "Line" : 69,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# bool\r\n",
        "Line" : 70,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\r\n\n# order to force this file to be run again if it changes.\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\r\n",
        "Line" : 73,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\r\n",
        "Line" : 74,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\r\n",
        "Line" : 75,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\r\n",
        "Line" : 77,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\r\n",
        "Line" : 78,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\r\n",
        "Line" : 80,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\r\n",
        "Line" : 81,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# string\r\n",
        "Line" : 82,
        "CharPositionInLine" : 33
      },
      "22" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\r\n\n# been chosen by FindCUDA.cmake.\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\r\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\r\n\n# Add the build specific configuration flags\r\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\r\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\r\n\n#\r\n\n#   status  - Status message to print if verbose is true\r\n\n#   command - COMMAND argument from the usual execute_process argument structure\r\n\n#   ARGN    - Remaining arguments are the command with arguments\r\n\n#\r\n\n#   CUDA_result - return value from running the command\r\n\n#\r\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\r\n\n# and other return variables are present after executing the process.\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\r\n\n# and spaces, anything else is left up to the user to fix if they want to\r\n\n# copy and paste a runnable command line.\r\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# If there are quotes, excape them, so they come through.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\r\n",
        "Line" : 146,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Echo the command\r\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Run the command\r\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\r\n\n# for dependency generation and hope for the best.\r\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\r\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\r\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Note that this will remove all occurances of -G.\r\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\r\n\n# can cause incorrect dependencies when #including files based on this macro which is\r\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\r\n\n# define this for now until a future version fixes this bug.\r\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Generate the dependency file\r\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\r\n\n# quotes just around the filenames for the input_file and output_file variables.\r\n\n# CMake will pass the quotes through and not be able to find the file.\r\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Copy the file if it is different\r\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Delete the temporary file\r\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# CUDA_NVCC_DEPEND should have something useful in it by now.  If not we\r\n\n# should force the rebuild.\r\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Rebuilding is also dependent on this file changing.\r\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# True if file1 is newer than file2 or if one of the two files doesn't\r\n\n# exist. Behavior is well-defined only for full paths. If the file time\r\n\n# stamps are exactly the same, an IS_NEWER_THAN comparison returns true, so\r\n\n# that any dependent build operations will occur in the event of a tie. This\r\n\n# includes the case of passing the same file name for both file1 and file2.\r\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "#message(\"file ${f} is newer than ${generated_file}\")\r\n",
        "Line" : 259,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "#message(\"Not rebuilding ${generated_file}\")\r\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Delete the target file\r\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Generate the code\r\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\r\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Cubin resource report commands.\r\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Run with -cubin to produce resource usage report.\r\n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Execute the parser script.\r\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 54
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/make2cmake.cmake" : {
      "ObjectId" : "e6118e7aa52c2a931ac6a248bb9812cc36f488ac",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  Copyright (c) 2007-2009\r\n\n#  Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n\n#\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\r\n\n# This converts a file written in makefile syntax into one that can be included\r\n\n# by CMake.\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# message(\"FOUND DEPENDS\")\r\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\r\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\r\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\r\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\r\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\r\n\n# path.\r\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\r\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\r\n\n# just /include.\r\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\r\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Remove the duplicate entries and sort them.\r\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/parse_cubin.cmake" : {
      "ObjectId" : "0519053d1717f420f6180514095ce37c82f83d77",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 62,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 64,
        "CharPositionInLine" : 10
      },
      "9" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 65,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# else ()\n",
        "Line" : 68,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# endif ()\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 74,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Registers\n",
        "Line" : 77,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Local memory\n",
        "Line" : 83,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# Shared memory\n",
        "Line" : 89,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/cuda/run_nvcc.cmake" : {
      "ObjectId" : "ff06449d2dff6f3edaf905c74e306909a5348c33",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n\n#\r\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n\n#\r\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n\n#  for the text of the license.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\r\n\n#\r\n\n# License for the specific language governing rights and limitations under\r\n\n# Permission is hereby granted, free of charge, to any person obtaining a\r\n\n# copy of this software and associated documentation files (the \"Software\"),\r\n\n# to deal in the Software without restriction, including without limitation\r\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n# and/or sell copies of the Software, and to permit persons to whom the\r\n\n# Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n# DEALINGS IN THE SOFTWARE.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\r\n\n# This file runs the nvcc commands to produce the desired output file along with\r\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\r\n\n# file checks the output of each command and if the command fails it deletes the\r\n\n# output files.\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\r\n\n#\r\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\r\n\n#                          ON : Describe each step\r\n\n#\r\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\r\n\n#                               RelWithDebInfo, but it should match one of the\r\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\r\n\n#                               configuration used when compiling the code.  If\r\n\n#                               blank or unspecified Debug is assumed as this is\r\n\n#                               what CMake does.\r\n\n#\r\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\r\n\n#\r\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\r\n\n#                                                   in if build_cubin is true.\r\n\n# generate_dependency_only:BOOL=<> Only generate the dependency file.\r\n\n#\r\n\n# check_dependencies:BOOL=<> Check the dependencies.  If everything is up to\r\n\n#                            date, simply touch the output file instead of\r\n\n#                            generating it.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\r\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\r\n",
        "Line" : 63,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\r\n",
        "Line" : 64,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\r\n",
        "Line" : 65,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\r\n",
        "Line" : 66,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\r\n",
        "Line" : 67,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\r\n",
        "Line" : 68,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\r\n",
        "Line" : 69,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# bool\r\n",
        "Line" : 70,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\r\n\n# order to force this file to be run again if it changes.\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\r\n",
        "Line" : 73,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\r\n",
        "Line" : 74,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\r\n",
        "Line" : 75,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\r\n",
        "Line" : 77,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\r\n",
        "Line" : 78,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\r\n",
        "Line" : 80,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\r\n",
        "Line" : 81,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# string\r\n",
        "Line" : 82,
        "CharPositionInLine" : 33
      },
      "22" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\r\n\n# been chosen by FindCUDA.cmake.\r\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\r\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\r\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\r\n\n# Add the build specific configuration flags\r\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\r\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\r\n\n#\r\n\n#   status  - Status message to print if verbose is true\r\n\n#   command - COMMAND argument from the usual execute_process argument structure\r\n\n#   ARGN    - Remaining arguments are the command with arguments\r\n\n#\r\n\n#   CUDA_result - return value from running the command\r\n\n#\r\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\r\n\n# and other return variables are present after executing the process.\r\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\r\n\n# and spaces, anything else is left up to the user to fix if they want to\r\n\n# copy and paste a runnable command line.\r\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# If there are quotes, excape them, so they come through.\r\n",
        "Line" : 144,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\r\n",
        "Line" : 146,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Echo the command\r\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Run the command\r\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\r\n\n# for dependency generation and hope for the best.\r\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\r\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\r\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Note that this will remove all occurances of -G.\r\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\r\n\n# can cause incorrect dependencies when #including files based on this macro which is\r\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\r\n\n# define this for now until a future version fixes this bug.\r\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Generate the dependency file\r\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\r\n\n# quotes just around the filenames for the input_file and output_file variables.\r\n\n# CMake will pass the quotes through and not be able to find the file.\r\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Copy the file if it is different\r\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Delete the temporary file\r\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# CUDA_NVCC_DEPEND should have something useful in it by now.  If not we\r\n\n# should force the rebuild.\r\n",
        "Line" : 243,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Rebuilding is also dependent on this file changing.\r\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# True if file1 is newer than file2 or if one of the two files doesn't\r\n\n# exist. Behavior is well-defined only for full paths. If the file time\r\n\n# stamps are exactly the same, an IS_NEWER_THAN comparison returns true, so\r\n\n# that any dependent build operations will occur in the event of a tie. This\r\n\n# includes the case of passing the same file name for both file1 and file2.\r\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "#message(\"file ${f} is newer than ${generated_file}\")\r\n",
        "Line" : 259,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "#message(\"Not rebuilding ${generated_file}\")\r\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Delete the target file\r\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Generate the code\r\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\r\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Cubin resource report commands.\r\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Run with -cubin to produce resource usage report.\r\n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Execute the parser script.\r\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 54
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/gorgon/CMakeLists.txt" : {
      "ObjectId" : "28d794418e1a5c917d509ca880fb35167b5fe66a",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/plugins/CMakeLists.txt" : {
      "ObjectId" : "08f8e7e14d38ae1002013bfb341e6484d423b6b6",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/pmconfig/CMakeLists.txt" : {
      "ObjectId" : "25344e05ab5b5feb01a2a2b9eb0829fcb66539d6",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#FILE(GLOB pmfiles \"${CMAKE_CURRENT_SOURCE_DIR}/*.*\")\n\n#INSTALL(FILES ${pmfiles}\n\n#  DESTINATION    lib/pmconfig\n\n#)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/sparx/CMakeLists.txt" : {
      "ObjectId" : "1f6d79550bb6e83cf7e4b56ef45ccf16e27f24bf",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/sparx/cuda/CMakeLists.txt" : {
      "ObjectId" : "e65c6b95139435d352c07ed6ec27e9e980ea25a2",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add current directory to the nvcc include line.\n\n#CUDA_INCLUDE_DIRECTORIES(\n\n#  ${CMAKE_CURRENT_SOURCE_DIR}\n\n#)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Use one executable only.\n\n#CUDA_ADD_EXECUTABLE(sparx_cuda_test\n\n# sparx_cuda_test.cu\n\n# cuda_ccf.cu\n\n# )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Build a shared library\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Specify the dependency.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#INSTALL_TARGETS(/bin sparx_cuda_test)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/sparx/temp/Makefile" : {
      "ObjectId" : "77ec48ddfed7636fc4ac68e450a4cf903fa12aa5",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "kernel/mrc/source/2dx_single_particle_lib/eman2/libEM/sparx/temp/voldist/Makefile" : {
      "ObjectId" : "92ba163099cc7b3145e53d95900f34a11bcba60a",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "kernel/mrc/source/2dx_single_particle_lib/python_helper/CMakeLists.txt" : {
      "ObjectId" : "158f97a3004cb2b6e2f8b67f8850a2cf7f995412",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# python files\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/source/2dx_single_particle_lib/sh_helper/CMakeLists.txt" : {
      "ObjectId" : "37c03ab432a50678a93c72dd4482da67b3e103d4",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# sh files\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/source/2dx_single_particle_lib/sparx_python/CMakeLists.txt" : {
      "ObjectId" : "158f97a3004cb2b6e2f8b67f8850a2cf7f995412",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# python files\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/mrc/source/CMakeLists.txt" : {
      "ObjectId" : "7ad0c18c45a3dae8f76e84cb4d9057d39572f961",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Application Name\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# Fortran Compiler -------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#gfortran\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_DEBUG \"-fno-f2c -O0 -g\")\n",
        "Line" : 33,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -ffpe-trap=zero\")\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#ifort\n\n#SET(CMAKE_Fortran_FLAGS_RELEASE \"-w -132 -cxxlib\")\n\n#LIST(APPEND CMAKE_Fortran_FLAGS_RELEASE \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#g77\n",
        "Line" : 60,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "################################################################################\n\n# C Compiler -------------------------------------------------------------------\n\n#add_definitions(-DPROTOTYPE -Dalliant -Dpowerpc -w -ffast-math -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -c)\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################\n\n# C++ Compiler -----------------------------------------------------------------\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#set(CMAKE_CXX_FLAGS_RELEASE \"\") \n",
        "Line" : 98,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Header files -----------------------------------------------------------------\n\n#include_directories(${2DX_INCLUDE_DIR})\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###############################################################################\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################################\n\n# Libraries --------------------------------------------------------------------i\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################################\n\n# Executables ------------------------------------------------------------------\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# create Fortran object files\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# fortran \n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# c++ \n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# c \n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# sources\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# executables\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "###############################################################################\n\n# sub directories -------------------------------------------------------------\n\n#add_subdirectory(2dx_single_particle_lib)\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# add_subdirectory(MRCOMP)\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "###############################################################################\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 28
    },
    "kernel/mrc/source/MOVIE/CMakeLists.txt" : {
      "ObjectId" : "bf95c32cb6fecdaac3e95ef64595b35fc4104d7d",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Application Name\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# Fortran Compiler -------------------------------------------------------------\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#gfortra\n",
        "Line" : 28,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE}  -static-libgcc\")\n\n# set(CMAKE_Fortran_FLAGS_DEBUG  \"${CMAKE_Fortran_FLAGS_DEBUG} -static-libgcc\")\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#\tset(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -dead_strip -static-libgcc\")\n\n#set(FORTRAN_FLAGS ${CMAKE_Fortran_FLAGS_RELEASE}  -dead_strip -static-libgcc)\n\n#set(CMAKE_Fortran_FLAGS_DEBUG  \"${CMAKE_Fortran_FLAGS_DEBUG} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 36,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "#gfortra\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#ifort\n\n#LIST(APPEND CMAKE_Fortran_FLAGS_RELEASE \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 51,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_DEBUG \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 54,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# g77\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "################################################################################\n\n# C Compiler -------------------------------------------------------------------\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -DPROTOTYPE -Dalliant -w -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE\")\n",
        "Line" : 74,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "###############################################################################\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Libraries --------------------------------------------------------------------i\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###############################################################################\n\n# Executables ------------------------------------------------------------------\n\n# create Fortran object files\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# sources\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# executables\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "kernel/mrc/source/RUtils/CMakeLists.txt" : {
      "ObjectId" : "711c8a7420b17c1befe53673b25ac9fd4f797ebc",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2014 Sebastian Scherer                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Python files -----------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CShell files -----------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "kernel/mrc/source/ctf/2dx-ctf-before-2009/CMakeLists.txt" : {
      "ObjectId" : "f05a19d4972ae7b6313bcb55d665f5f4697a87e5",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Application Name\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# Fortran Compiler -------------------------------------------------------------\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#gfortran\n\n#set(CMAKE_Fortran_FLAGS_RELEASE \"-funroll-all-loops -fno-f2c\")\n",
        "Line" : 31,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -w\")\n",
        "Line" : 34,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#ifort\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# g77\n",
        "Line" : 41,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# the linker will not be run\n\n#set(CMAKE_Fortran_FLAGS_RELEASE  ${CMAKE_Fortran_FLAGS_RELEASE} \"-c\")\n\n#set(CMAKE_Fortran_FLAGS_DEBUG ${CMAKE_Fortran_FLAGS_DEBUG} \"-c\")\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "################################################################################\n\n# C Compiler -------------------------------------------------------------------\n\n#add_definitions(-DPROTOTYPE -Dalliant -Dpowerpc -w -ffast-math -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -c)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "###############################################################################\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#Custom Fortran command\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#add_custom_command(TARGET EXE_CTFFIND PRE_LINK COMMAND ${Fortran_COMPILER_NAME} ARGS ${CMAKE_Fortran_FLAGS_RELEASE} -c ${CMAKE_CURRENT_SOURCE_DIR}/mrc_ccp4.f)\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#add_custom_command(TARGET EXE_CTFTILT PRE_LINK COMMAND ${Fortran_COMPILER_NAME} ARGS ${CMAKE_Fortran_FLAGS_RELEASE} -c 2dx_ctftilt.f)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#add_custom_command(TARGET EXE_CTFFIND PRE_LINK COMMAND ${Fortran_COMPILER_NAME} ARGS ${CMAKE_Fortran_FLAGS_RELEASE} -c 2dx_ctffindi3.f)\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#foreach(i ${FORTRAN_SRC})\n\n#\tadd_executable(${i} \"${i}.f\")\n\n#endforeach(i ${FORTRAN_SRC})\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#strip the -c option from the Fortran compile command\n\n#string(REPLACE \" -c\" \n\n#         \"\" CMAKE_Fortran_FLAGS_RELEASE ${CMAKE_Fortran_FLAGS_RELEASE})\n\n#string(REPLACE \" -c\" \n\n#         \"\" CMAKE_Fortran_FLAGS_DEBUG ${CMAKE_Fortran_FLAGS_DEBUG})\n\n#message(STATUS \"The striped fortran flags:\" ${CMAKE_Fortran_FLAGS_RELEASE})\n\n#add_executable(library library.c)\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# last thing we have to do is to tell CMake what libraries our executable\n\n# needs,\n\n#\n\n# luckily FIND_PACKAGE prepared 2DX_LIBRARIES variable for us:\n\n#\n\n# target_link_libraries( ${EXETITLE} ${QT_LIBRARIES} ${2DX_LIBRARIES} ${LIBS})\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Installation\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "kernel/mrc/source/ctf/CMakeLists.txt" : {
      "ObjectId" : "a7f5b9f2e302ff23f7696af197e3dbd9fd52b5b4",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################\n\n# Fortran Compiler -------------------------------------------------------------\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#gfortra\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#\tset(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -dead_strip -static-libgcc\")\n\n#set(FORTRAN_FLAGS ${CMAKE_Fortran_FLAGS_RELEASE}  -dead_strip -static-libgcc)\n\n#set(CMAKE_Fortran_FLAGS_DEBUG  \"${CMAKE_Fortran_FLAGS_DEBUG} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 30,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "#gfortra\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#ifort\n\n#LIST(APPEND CMAKE_Fortran_FLAGS_RELEASE \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 45,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_DEBUG \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# g77\n",
        "Line" : 50,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "################################################################################\n\n# C Compiler -------------------------------------------------------------------\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -DPROTOTYPE -Dalliant -w -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE\")\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "###############################################################################\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "###############################################################################\n\n# Executables ------------------------------------------------------------------\n\n# create Fortran object files\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# sources\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# executables\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "kernel/mrc/source/ctf/ORIGINALS/CMakeLists.txt" : {
      "ObjectId" : "9a4d556210d24ec771aa62ae307872319809a679",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS SOURCES=${SOURCES})\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/source/ctfcor/CMakeLists.txt" : {
      "ObjectId" : "31ee312c597321b4a1f83ea33193ae3220cfd512",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                     #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2012 Sebastian Scherer                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Fortran Compiler -------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#gfortra\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE}  -static-libgcc\")\n\n# set(CMAKE_Fortran_FLAGS_DEBUG  \"${CMAKE_Fortran_FLAGS_DEBUG} -static-libgcc\")\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#       set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -dead_strip -static-libgcc\")\n\n#set(FORTRAN_FLAGS ${CMAKE_Fortran_FLAGS_RELEASE}  -dead_strip -static-libgcc)\n\n#set(CMAKE_Fortran_FLAGS_DEBUG  \"${CMAKE_Fortran_FLAGS_DEBUG} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 23,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "#gfortra\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 32,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "#ifort\n\n#LIST(APPEND CMAKE_Fortran_FLAGS_RELEASE \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_DEBUG \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# g77\n",
        "Line" : 43,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Libraries --------------------------------------------------------------------i\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Executables ------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# \tset_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/${i}.f PROPERTIES LANGUAGE fortran )\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Installation  ---------------------------------------------------------------\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "kernel/mrc/source/diffmap/CMakeLists.txt" : {
      "ObjectId" : "3456667bafb2a52b58d141de75ab7c948e24b540",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2013 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Python files -----------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CShell files -----------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "kernel/mrc/source/endianness/CMakeLists.txt" : {
      "ObjectId" : "cb19d7c8168969f4b054b73ee16cfc5bb4fb5757",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Executables ------------------------------------------------------------------\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Installation  ---------------------------------------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "kernel/mrc/source/fouriercrop/CMakeLists.txt" : {
      "ObjectId" : "26689d8f3a2ce3ab65e88ee5b7f397e5dceec9cd",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                     #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2012 Sebastian Scherer                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Fortran Compiler -------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#gfortra\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE}  -static-libgcc\")\n\n# set(CMAKE_Fortran_FLAGS_DEBUG  \"${CMAKE_Fortran_FLAGS_DEBUG} -static-libgcc\")\n",
        "Line" : 19,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#       set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -dead_strip -static-libgcc\")\n\n#set(FORTRAN_FLAGS ${CMAKE_Fortran_FLAGS_RELEASE}  -dead_strip -static-libgcc)\n\n#set(CMAKE_Fortran_FLAGS_DEBUG  \"${CMAKE_Fortran_FLAGS_DEBUG} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 23,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "#gfortra\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_RELEASE \"${CMAKE_Fortran_FLAGS_RELEASE} -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -static-libgcc\")\n",
        "Line" : 32,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "#ifort\n\n#LIST(APPEND CMAKE_Fortran_FLAGS_RELEASE \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "#set(CMAKE_Fortran_FLAGS_DEBUG \"-O3 -axN -w -132 -cxxlib\")\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# g77\n",
        "Line" : 43,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Libraries --------------------------------------------------------------------i\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Executables ------------------------------------------------------------------\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# \tset_source_files_properties(${CMAKE_CURRENT_SOURCE_DIR}/${i}.f PROPERTIES LANGUAGE fortran )\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Installation  ---------------------------------------------------------------\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "kernel/mrc/source/image_conversion/CMakeLists.txt" : {
      "ObjectId" : "c1ed0000e6ffdb9e4c5c311dcb9fa606f3c47876",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS SOURCES=${SOURCES})\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/source/image_conversion/image_conversion.pro" : {
      "ObjectId" : "7e7f3d4dfdec3b40229c0920bb17480638865a5e",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "######################################################################\n\n# Automatically generated by qmake (2.01a) Wed Mar 21 09:46:25 2007\n\n######################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Input\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/source/incompatible/CMakeLists.txt" : {
      "ObjectId" : "5b8b92ea9b918a369c9c19dfb446486b27f13f0a",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS SOURCES=${SOURCES})\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/source/maximum_likelihood/CMakeLists.txt" : {
      "ObjectId" : "841086c30fe659f2c20966bbf3efb537ced22fe3",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Source files -----------------------------------------------------------------\n\n#set(ML_FILES 2dx_ML.c main_ML.c get_stack.c 2dx_lowpass.c ctf.c whitening.c mask.c trans.c quadintp.c rotate.c cross_corr.c get_resolution.c apply_envelop.c maximum_likelihood.c)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(3D_STACK_SOURCES  2dx_ML_stack.c write_stack_merge.c fgetline.c cgetline.c 2dx_lowpass.c ctf.c whitening.c mask.c trans.c quadintp.c rotate.c cross_corr.c get_resolution.c apply_envelop.c maximum_likelihood.c) \n\n#set(3D_MERGE_SOURCES  2dx_ML_merge.c  fgetline.c cgetline.c 2dx_lowpass.c ctf.c whitening.c mask.c trans.c quadintp.c rotate.c cross_corr.c get_resolution.c apply_envelop.c maximum_likelihood.c) \n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(ML_TARGETS 2dx_ML 2dx_ML_stack 2dx_ML_merge)\n\n# Libraries --------------------------------------------------------------------i\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Executables ------------------------------------------------------------------\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Installation  ---------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "kernel/mrc/source/movie_mode_py/CMakeLists.txt" : {
      "ObjectId" : "3456667bafb2a52b58d141de75ab7c948e24b540",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2013 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Python files -----------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CShell files -----------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "kernel/mrc/source/peaksearch/CMakeLists.txt" : {
      "ObjectId" : "cf8dc1e56349d20171578bfc92049297595518b6",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Executables ------------------------------------------------------------------\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Installation  ---------------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "kernel/mrc/source/periodogram/CMakeLists.txt" : {
      "ObjectId" : "daa151c6b84f555c073fd4a4cf71e1dc84b7f4b4",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                     #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2012 Sebastian Scherer                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Header files -----------------------------------------------------------------\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Source files -----------------------------------------------------------------\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Libraries --------------------------------------------------------------------i\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Executables ------------------------------------------------------------------\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Installation  ---------------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "kernel/mrc/source/py_util/CMakeLists.txt" : {
      "ObjectId" : "3456667bafb2a52b58d141de75ab7c948e24b540",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2013 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure that the default is a RELEASE\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Python files -----------------------------------------------------------------\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CShell files -----------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###############################################################################\n\n# Installation  ---------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###############################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "kernel/mrc/source/rmeasure/CMakeLists.txt" : {
      "ObjectId" : "4cc8b82c426dcc751d98cd8accfee947fdf08121",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS SOURCES=${SOURCES})\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/source/spotIntensity/CMakeLists.txt" : {
      "ObjectId" : "14c8b3e0b3443945c19977035be089b2349d3786",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# A 2dx CMakeLists.txt                                                  #\n\n############################################################################\n\n# The author was:                                                          #\n\n# 2010 Marcel Arheit                                                       #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(STATUS SOURCES=${SOURCES})\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/mrc/source/spotIntensity/spotIntensity.pro" : {
      "ObjectId" : "38fcb2b659992a762fbd9f7d871d72f951cf12e2",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "######################################################################\n\n# Automatically generated by qmake (2.01a) Fri Jul 20 13:54:16 2007\n\n######################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Input\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/toolkit/CMakeLists.txt" : {
      "ObjectId" : "bfebdd9ad85aa4962aac9ae5395eb1e447163a5d",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# CMakeLists.txt for kernel/toolkit                                        #\n\n############################################################################\n\n# Author:                                                                  #\n\n# Nikhil Biyani  03/2016                                                   #\n\n############################################################################\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#==============================#\n\n# Set Environment              #\n\n#==============================#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#==============================#\n\n# Add library\t\t           #\n\n#==============================#\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#==============================#\n\n# Installation                 #\n\n#==============================#\n\n#get_filename_component(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} NAME)\n\n#if(INSTALL_SRC_DIR)\n\n#\tset(INSTALL_SRC_DIR ${INSTALL_SRC_DIR}/${DIRECTORY})\n\n#else(INSTALL_SRC_DIR)\n\n#\tset(INSTALL_SRC_DIR kernel/toolkit/${DIRECTORY})\n\n#endif(INSTALL_SRC_DIR)\n\n#\n\n#install(FILES ${PROJECT_SOURCES} DESTINATION ${INSTALL_SRC_DIR})\n\n#install(FILES ${PROJECT_HEADERS} DESTINATION ${INSTALL_SRC_DIR})\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "packaging/CMakeLists.txt" : {
      "ObjectId" : "fe5c83318cd661f5b37ec0117b713ae09832ab93",
      "LastModified" : "2018-09-14T17:09:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# @file CMakeLists.txt\n\n# @author Nikhil Biyani\n\n# @author Marcel Arheit\n\n# @location focus/packaging\n\n##########################################################################\n\n#-- CMAKE Configurations ------------------------------------------------------\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#-- CONFIGURE FILES -----------------------------------------------------------\n\n#\n\n# These will copy/ configure the files and write to build directory which can\n\n# be later used to install\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-- INSTALL FILES -------------------------------------------------------------\n\n#\n\n# These will copy the files directly to installation location\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#------------------------------------------------------------------------------\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#-- PACKAGING -----------------------------------------------------------------\n\n#\n\n# (only for Debian and RPM for OSX we use native tools)\n\n# General Settings\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# DEBIAN SETTINGS\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# RPM SETTINGS\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "CMAKE" : 88,
    "QMAKE" : 2,
    "MAKEFILE" : 2,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 3431
}