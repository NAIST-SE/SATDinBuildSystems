{
  "Repository" : "21030367",
  "Revision" : "HEAD",
  "ObjectId" : "9b80bbb5bbc5f08faad06976e98db867b36e700b",
  "CommitTime" : "2017-05-15T04:32:38Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "5e0b2bc75825a871aeff37e5e6aa0cfd7b5e01b3",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines Graphene library target.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# http://stackoverflow.com/a/18369825\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set (ENABLE_INSTALLER 1)\n\n#set (USE_PCH 1)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# force dynamic linking for all libraries\n",
        "Line" : 56,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "# For Boost 1.53 on windows, coroutine was not in BOOST_LIBRARYDIR and do not need it to build,  but if boost versin >= 1.54, find coroutine otherwise will cause link errors\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#looks like this flag can have different default on some machines.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Probably cmake has a bug and vcxproj generated for executable in Debug conf. has disabled debug info\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# On windows tcl should be installed to the directory pointed by setenv.bat script\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Apple AND Linux\n",
        "Line" : 101,
        "CharPositionInLine" : 14
      },
      "9" : {
        "Text" : "#if(NOT READLINE_INCLUDE_DIR OR NOT READLINE_LIBRARIES)\n\n#  MESSAGE(FATAL_ERROR \"Could not find lib readline.\")\n\n#endif()\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Apple Specific Options Here\n",
        "Line" : 110,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Linux Specific Options Here\n",
        "Line" : 114,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# I'm not sure why this is here, I guess someone has openssl and can't detect it with find_package()?\n\n# if you have a normal install, you can define crypto_library to the empty string to avoid a build error\n",
        "Line" : 120,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# based on http://www.delorie.com/gnu/docs/gdb/gdb_70.html\n\n# uncomment this line to tell GDB about macros (slows compile times)\n\n# set( CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-2 -g3\" )\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# override above\n",
        "Line" : 184,
        "CharPositionInLine" : 36
      },
      "15" : {
        "Text" : "# it seems like windows zip files usually don't have a single directory inside them, unix tgz frequently do\n",
        "Line" : 189,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Linux gets a .tgz\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "CMakeModules/FindBerkeleyDB.cmake" : {
      "ObjectId" : "6dcb3e9bc0c813ec2934a87ddec154089af23182",
      "LastModified" : "2015-06-08T16:36:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the BerkeleyDB includes and library\r\n\n# Customizable variables:\r\n\n#   BDB_ROOT_DIR\r\n\n#     This variable points to the BerkeleyDB root directory. On Windows the\r\n\n#     library location typically will have to be provided explicitly using the\r\n\n#     -D command-line option. Alternatively, the DBROOTDIR environment variable\r\n\n#     can be set.\r\n\n#\r\n\n#   BDB_STATIC_LIBS\r\n\n#     Should be set to 1 if static version of libraries should be found. Defaults to 0 (shared libs).\r\n\n#\r\n\n# This module defines\r\n\n# BDB_INCLUDE_DIR, where to find db.h, etc.\r\n\n# BDB_LIBRARIES, the libraries needed to use BerkeleyDB.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On unix library in all versions have the same names.\r\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindGperftools.cmake" : {
      "ObjectId" : "cd990662cf1b197890f1e0662a1cde08b6f03ca3",
      "LastModified" : "2015-06-08T16:36:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tries to find Gperftools.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Gperftools)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Gperftools_ROOT_DIR  Set this variable to the root installation of\n\n#                       Gperftools if the module has problems finding\n\n#                       the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  GPERFTOOLS_FOUND              System has Gperftools libs/headers\n\n#  GPERFTOOLS_LIBRARIES          The Gperftools libraries (tcmalloc & profiler)\n\n#  GPERFTOOLS_INCLUDE_DIR        The location of Gperftools headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindLineman.cmake" : {
      "ObjectId" : "f6f480daf5501de6cbc5ee77a96f09bf2f4cb9d5",
      "LastModified" : "2015-06-08T16:36:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/FindNodeJs.cmake" : {
      "ObjectId" : "3d6987010180414c7cd44111c32cca9a74ba5c49",
      "LastModified" : "2015-06-08T16:36:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/cotire.cmake" : {
      "ObjectId" : "0df9a4a225a65250a6aef41179cdea6130b0b5a4",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - cotire (compile time reducer)\n\n#\n\n# See the cotire manual for usage hints.\n\n#\n\n#=============================================================================\n\n# Copyright 2012-2015 Sascha Kratky\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation\n\n# files (the \"Software\"), to deal in the Software without\n\n# restriction, including without limitation the rights to use,\n\n# copy, modify, merge, publish, distribute, sublicense, and/or sell\n\n# copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following\n\n# conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\n# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# call cmake_minimum_required, but prevent modification of the CMake policy stack in include mode\n\n# cmake_minimum_required also sets the policy version as a side effect, which we have to avoid\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# activate select policies\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# targets may not link directly to themselves\n",
        "Line" : 47,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# utility targets may not have link dependencies\n",
        "Line" : 52,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# target in the TARGET signature of add_custom_command() must exist\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# error on non-existent target in get_target_property\n",
        "Line" : 62,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# error on non-existent dependency in add_dependencies\n",
        "Line" : 67,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# do not expand variables in target source entries\n",
        "Line" : 72,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# disallow add_custom_command SOURCE signatures\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# include TARGET_OBJECTS expressions in a target's SOURCES property\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# simplify variable reference and escape sequence evaluation\n",
        "Line" : 87,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# only interpret if() arguments as variables or keywords when unquoted\n",
        "Line" : 92,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# get_filename_component returns extension from first occurrence of . in file name\n\n# this function computes the extension from last occurrence of . in file name\n",
        "Line" : 119,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# as of CMake 3.1 target sources may contain generator expressions\n\n# since we cannot obtain required property information about source files added\n\n# through generator expressions at configure time, we filter them out\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# consider source file unless it is excluded explicitly\n",
        "Line" : 194,
        "CharPositionInLine" : 7
      },
      "16" : {
        "Text" : "# add to excluded sources, if file is not ignored and has correct language without having the correct extension\n",
        "Line" : 204,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# separate filtered source files from already cotired ones\n\n# the COTIRE_TARGET property of a source file may be set while a target is being processed by cotire\n",
        "Line" : 213,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# add to excluded sources, if file has custom compile flags\n",
        "Line" : 224,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# remove from head\n",
        "Line" : 317,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# process transitive libraries\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# option with separate argument\n",
        "Line" : 348,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# remember option\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# option with joined argument\n",
        "Line" : 355,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# flush remembered option\n",
        "Line" : 359,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# add to unfiltered options\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# collect options from CMake language variables\n",
        "Line" : 384,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "# add target compile flags\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# target compile options\n",
        "Line" : 406,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# interface compile options from linked library targets\n",
        "Line" : 413,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "# handle the POSITION_INDEPENDENT_CODE target property\n",
        "Line" : 424,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# platform specific flags\n",
        "Line" : 436,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# default include dirs\n",
        "Line" : 471,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# parse additional include directories from target compile flags\n",
        "Line" : 476,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# target include directories\n",
        "Line" : 483,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# interface include directories from linked library targets\n",
        "Line" : 495,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# CMAKE_INTDIR for multi-configuration build systems\n",
        "Line" : 565,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# target export define symbol\n",
        "Line" : 569,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# directory compile definitions\n",
        "Line" : 574,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# target compile definitions\n",
        "Line" : 583,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# interface compile definitions from linked library targets\n",
        "Line" : 592,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# parse additional compile definitions from target compile flags\n\n# and don't look at directory compile definitions, which we already handled\n",
        "Line" : 601,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# parse target compile flags omitting compile definitions and include directives\n",
        "Line" : 617,
        "CharPositionInLine" : 1
      },
      "43" : {
        "Text" : "# IS_NEWER_THAN returns TRUE if both files have the same timestamp\n\n# thus we do the comparison in both directions to exclude ties\n",
        "Line" : 808,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# if path matches exactly, return short non-empty string\n",
        "Line" : 852,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "# check header path against ignored and honored include directories\n",
        "Line" : 860,
        "CharPositionInLine" : 1
      },
      "46" : {
        "Text" : "# header is inside, but could be become outside if there is a shorter outside match\n",
        "Line" : 863,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# header is outside\n",
        "Line" : 877,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# heuristic: ignore C headers with embedded parent directory references or \"-fixed\" or \"_fixed\" in path\n\n# these often stem from using GCC #include_next tricks, which may break the precompiled header compilation\n\n# with the error message \"error: no include path in which to search for header.h\"\n",
        "Line" : 888,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# check header file extension\n",
        "Line" : 898,
        "CharPositionInLine" : 1
      },
      "50" : {
        "Text" : "# cl.exe /showIncludes output looks different depending on the language pack used, e.g.:\n\n# English: \"Note: including file:   C:\\directory\\file\"\n\n# German: \"Hinweis: Einlesen der Datei:   C:\\directory\\file\"\n\n# We use a very general regular expression, relying on the presence of the : characters\n",
        "Line" : 911,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Visual Studio compiler output\n",
        "Line" : 916,
        "CharPositionInLine" : 3
      },
      "52" : {
        "Text" : "# GCC like output\n",
        "Line" : 925,
        "CharPositionInLine" : 3
      },
      "53" : {
        "Text" : "# prevent CMake macro invocation errors due to backslash characters in Windows paths\n",
        "Line" : 941,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# canonize slashes\n",
        "Line" : 944,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# prevent semicolon from being interpreted as a line separator\n",
        "Line" : 946,
        "CharPositionInLine" : 1
      },
      "56" : {
        "Text" : "# then separate lines\n",
        "Line" : 948,
        "CharPositionInLine" : 1
      },
      "57" : {
        "Text" : "# remove duplicate lines to speed up parsing\n",
        "Line" : 951,
        "CharPositionInLine" : 1
      },
      "58" : {
        "Text" : "# stack keeps track of inside/outside project status of processed header files\n",
        "Line" : 969,
        "CharPositionInLine" : 1
      },
      "59" : {
        "Text" : "# update stack\n",
        "Line" : 979,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# header is a candidate if it is outside project\n",
        "Line" : 995,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# get parent header file's inside/outside status\n",
        "Line" : 997,
        "CharPositionInLine" : 5
      },
      "62" : {
        "Text" : "# select header file if parent header file is inside project\n\n# (e.g., a project header file that includes a standard header file)\n",
        "Line" : 1004,
        "CharPositionInLine" : 5
      },
      "63" : {
        "Text" : "# fix header's inside status on stack, it is ignored by extension now\n",
        "Line" : 1013,
        "CharPositionInLine" : 8
      },
      "64" : {
        "Text" : "# for cl.exe do not keep unparsed lines which solely consist of a source file name\n",
        "Line" : 1025,
        "CharPositionInLine" : 5
      },
      "65" : {
        "Text" : "# only consider existing source files for scanning\n",
        "Line" : 1064,
        "CharPositionInLine" : 1
      },
      "66" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1080,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "# use absolute path as source file location\n",
        "Line" : 1228,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# create empty log file\n",
        "Line" : 1269,
        "CharPositionInLine" : 3
      },
      "69" : {
        "Text" : "# Intel compiler requires hdrstop pragma to stop generating PCH file\n",
        "Line" : 1285,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# cl.exe options used\n\n# /nologo suppresses display of sign-on banner\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /EP preprocess to stdout without #line directives\n\n# /showIncludes list include files\n",
        "Line" : 1320,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# append to list\n",
        "Line" : 1329,
        "CharPositionInLine" : 3
      },
      "72" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1332,
        "CharPositionInLine" : 3
      },
      "73" : {
        "Text" : "# GCC options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fdirectives-only do not expand macros, requires GCC >= 4.3\n",
        "Line" : 1336,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# append to list\n",
        "Line" : 1341,
        "CharPositionInLine" : 3
      },
      "75" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1347,
        "CharPositionInLine" : 3
      },
      "76" : {
        "Text" : "# Clang options used\n\n# -H print the name of each header file used\n\n# -E invoke preprocessor\n\n# -fno-color-diagnostics don't prints diagnostics in color\n",
        "Line" : 1354,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# append to list\n",
        "Line" : 1359,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1362,
        "CharPositionInLine" : 3
      },
      "79" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /QH display the include file order\n\n# /EP preprocess to stdout, omitting #line directives\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n",
        "Line" : 1367,
        "CharPositionInLine" : 3
      },
      "80" : {
        "Text" : "# append to list\n",
        "Line" : 1376,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1379,
        "CharPositionInLine" : 4
      },
      "82" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -H print the name of each header file used\n\n# -EP preprocess to stdout, omitting #line directives\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n",
        "Line" : 1383,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "# append to list\n",
        "Line" : 1388,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1394,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# cl.exe options used\n\n# /Yc creates a precompiled header file\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /TC treat all files named on the command line as C source files\n\n# /TP treat all files named on the command line as C++ source files\n\n# /Zs syntax check only\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1413,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# append to list\n",
        "Line" : 1424,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1431,
        "CharPositionInLine" : 3
      },
      "88" : {
        "Text" : "# GCC / Clang options used\n\n# -x specify the source language\n\n# -c compile but do not link\n\n# -o place output in file\n\n# note that we cannot use -w to suppress all warnings upon pre-compiling, because turning off a warning may\n\n# alter compile flags as a side effect (e.g., -Wwrite-string implies -fconst-strings)\n",
        "Line" : 1438,
        "CharPositionInLine" : 2
      },
      "89" : {
        "Text" : "# append to list\n",
        "Line" : 1447,
        "CharPositionInLine" : 3
      },
      "90" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1450,
        "CharPositionInLine" : 3
      },
      "91" : {
        "Text" : "# Windows Intel options used\n\n# /nologo do not display compiler version information\n\n# /Yc create a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /TC process all source or unrecognized file types as C source files\n\n# /TP process all source or unrecognized file types as C++ source files\n\n# /Zs syntax check only\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1458,
        "CharPositionInLine" : 3
      },
      "92" : {
        "Text" : "# append to list\n",
        "Line" : 1470,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-create name of the precompiled header (PCH) to create\n\n# -Kc++ process all source or unrecognized file types as C++ source files\n\n# -fsyntax-only check only for correct syntax\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1484,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "# append to list\n",
        "Line" : 1495,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1504,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "# cl.exe options used\n\n# /Yu uses a precompiled header file during build\n\n# /Fp specifies precompiled header binary file name\n\n# /FI forces inclusion of file\n\n# /Zm precompiled header memory allocation scaling factor\n",
        "Line" : 1521,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "# append to list\n",
        "Line" : 1529,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1535,
        "CharPositionInLine" : 4
      },
      "100" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1542,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "# append to list\n",
        "Line" : 1544,
        "CharPositionInLine" : 4
      },
      "102" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1547,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "# GCC options used\n\n# -include process include file as the first line of the primary source file\n\n# -Winvalid-pch warns if precompiled header is found but cannot be used\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1552,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# append to list\n",
        "Line" : 1557,
        "CharPositionInLine" : 3
      },
      "105" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1560,
        "CharPositionInLine" : 3
      },
      "106" : {
        "Text" : "# Clang options used\n\n# -include process include file as the first line of the primary source file\n\n# -include-pch include precompiled header file\n\n# -Qunused-arguments don't emit warning for unused driver arguments\n\n# note: ccache requires the -include flag to be used in order to process precompiled header correctly\n",
        "Line" : 1564,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# append to list\n",
        "Line" : 1570,
        "CharPositionInLine" : 3
      },
      "108" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1573,
        "CharPositionInLine" : 3
      },
      "109" : {
        "Text" : "# Windows Intel options used\n\n# /Yu use a precompiled header (PCH) file\n\n# /Fp specify a path or file name for precompiled header files\n\n# /FI tells the preprocessor to include a specified file name as the header file\n\n# /Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1579,
        "CharPositionInLine" : 3
      },
      "110" : {
        "Text" : "# append to list\n",
        "Line" : 1587,
        "CharPositionInLine" : 5
      },
      "111" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1593,
        "CharPositionInLine" : 5
      },
      "112" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1600,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# append to list\n",
        "Line" : 1602,
        "CharPositionInLine" : 5
      },
      "114" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1605,
        "CharPositionInLine" : 5
      },
      "115" : {
        "Text" : "# Linux / Mac OS X Intel options used\n\n# -pch-dir location for precompiled header files\n\n# -pch-use name of the precompiled header (PCH) to use\n\n# -include process include file as the first line of the primary source file\n\n# -Wpch-messages enable diagnostics related to pre-compiled headers (requires Intel XE 2013 Update 2)\n",
        "Line" : 1610,
        "CharPositionInLine" : 3
      },
      "116" : {
        "Text" : "# append to list\n",
        "Line" : 1619,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1625,
        "CharPositionInLine" : 5
      },
      "118" : {
        "Text" : "# no precompiled header, force inclusion of prefix header\n",
        "Line" : 1632,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# append to list\n",
        "Line" : 1634,
        "CharPositionInLine" : 5
      },
      "120" : {
        "Text" : "# return as a flag string\n",
        "Line" : 1637,
        "CharPositionInLine" : 5
      },
      "121" : {
        "Text" : "# cl.exe messes with the output streams unless the environment variable VS_UNICODE_OUTPUT is cleared\n",
        "Line" : 1674,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# supported since Visual Studio C++ 6.0\n\n# and CMake does not support an earlier version\n",
        "Line" : 1690,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# GCC PCH support requires version >= 3.4\n",
        "Line" : 1694,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "# all Clang versions have PCH support\n",
        "Line" : 1701,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Intel PCH support requires version >= 8.0.0\n",
        "Line" : 1704,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "# PCH compilation not supported by GCC / Clang for multi-architecture builds (e.g., i386, x86_64)\n",
        "Line" : 1721,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# ${CMAKE_CFG_INTDIR} may reference a build-time variable when using a generator which supports configuration types\n",
        "Line" : 1740,
        "CharPositionInLine" : 1
      },
      "128" : {
        "Text" : "# start new unity file segment\n",
        "Line" : 1783,
        "CharPositionInLine" : 4
      },
      "129" : {
        "Text" : "# there is only a single unity file\n",
        "Line" : 1794,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# end with final unity file segment\n",
        "Line" : 1797,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# For Xcode, we completely hand off the compilation of the prefix header to the IDE\n",
        "Line" : 1868,
        "CharPositionInLine" : 4
      },
      "132" : {
        "Text" : "# MSVC uses the extension .pch added to the prefix header base name\n",
        "Line" : 1873,
        "CharPositionInLine" : 4
      },
      "133" : {
        "Text" : "# Clang looks for a precompiled header corresponding to the prefix header with the extension .pch appended\n",
        "Line" : 1876,
        "CharPositionInLine" : 4
      },
      "134" : {
        "Text" : "# GCC looks for a precompiled header corresponding to the prefix header with the extension .gch appended\n",
        "Line" : 1879,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# Intel uses the extension .pchi added to the prefix header base name\n",
        "Line" : 1882,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# depend on target's generated source files\n",
        "Line" : 1914,
        "CharPositionInLine" : 1
      },
      "137" : {
        "Text" : "# but omit all generated source files that have the COTIRE_EXCLUDED property set to true\n",
        "Line" : 1918,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# and omit all generated source files that have the COTIRE_DEPENDENCY property set to false explicitly\n",
        "Line" : 1923,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "# depend on target source files marked with custom COTIRE_DEPENDENCY property\n",
        "Line" : 1940,
        "CharPositionInLine" : 1
      },
      "140" : {
        "Text" : "# GCC and clang raise a fatal error if a file is not found during preprocessing\n\n# thus we depend on target's generated source files for prefix header generation\n",
        "Line" : 1944,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# set up variables to be configured\n",
        "Line" : 1961,
        "CharPositionInLine" : 1
      },
      "142" : {
        "Text" : "# set up COTIRE_TARGET_SOURCES\n",
        "Line" : 1986,
        "CharPositionInLine" : 1
      },
      "143" : {
        "Text" : "# use absolute paths for generated files only, retrieving the LOCATION property is an expensive operation\n",
        "Line" : 1991,
        "CharPositionInLine" : 3
      },
      "144" : {
        "Text" : "# copy variable definitions to cotire target script\n",
        "Line" : 1998,
        "CharPositionInLine" : 1
      },
      "145" : {
        "Text" : "# remove COTIRE_VERBOSE which is passed as a CMake define on command line\n",
        "Line" : 2001,
        "CharPositionInLine" : 1
      },
      "146" : {
        "Text" : "# generate target script file\n",
        "Line" : 2020,
        "CharPositionInLine" : 1
      },
      "147" : {
        "Text" : "# use file(GENERATE ...) to expand generator expressions in the target script at CMake generate-time\n",
        "Line" : 2025,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "# for Visual Studio and Intel, we attach the precompiled header compilation to the host file\n\n# the remaining files include the precompiled header, see cotire_setup_pch_file_inclusion\n",
        "Line" : 2039,
        "CharPositionInLine" : 2
      },
      "149" : {
        "Text" : "# make object file generated from host file depend on prefix header\n",
        "Line" : 2048,
        "CharPositionInLine" : 3
      },
      "150" : {
        "Text" : "# mark host file as cotired to prevent it from being used in another cotired target\n",
        "Line" : 2050,
        "CharPositionInLine" : 3
      },
      "151" : {
        "Text" : "# for makefile based generator, we add a custom command to precompile the prefix header\n",
        "Line" : 2054,
        "CharPositionInLine" : 2
      },
      "152" : {
        "Text" : "# for Visual Studio and Intel, we include the precompiled header in all but the host file\n\n# the host file does the precompiled header compilation, see cotire_setup_pch_file_compilation\n",
        "Line" : 2077,
        "CharPositionInLine" : 2
      },
      "153" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2082,
        "CharPositionInLine" : 3
      },
      "154" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2089,
        "CharPositionInLine" : 3
      },
      "155" : {
        "Text" : "# for makefile based generator, we force the inclusion of the prefix header for a subset\n\n# of the source files, if this is a multi-language target or has excluded files\n",
        "Line" : 2095,
        "CharPositionInLine" : 3
      },
      "156" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2102,
        "CharPositionInLine" : 3
      },
      "157" : {
        "Text" : "# make object files generated from source files depend on precompiled header\n",
        "Line" : 2105,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "# force the inclusion of the prefix header for the given source files\n",
        "Line" : 2112,
        "CharPositionInLine" : 1
      },
      "159" : {
        "Text" : "# mark sources as cotired to prevent them from being used in another cotired target\n",
        "Line" : 2119,
        "CharPositionInLine" : 1
      },
      "160" : {
        "Text" : "# make object files generated from source files depend on prefix header\n",
        "Line" : 2121,
        "CharPositionInLine" : 1
      },
      "161" : {
        "Text" : "# for Xcode, we attach a pre-build action to generate the unity sources and prefix headers\n",
        "Line" : 2181,
        "CharPositionInLine" : 2
      },
      "162" : {
        "Text" : "# we also generate a generic, single prefix header which includes all language specific prefix headers\n",
        "Line" : 2192,
        "CharPositionInLine" : 3
      },
      "163" : {
        "Text" : "# because CMake PRE_BUILD command does not support dependencies,\n\n# we check dependencies explicity in cotire script mode when the pre-build action is run\n",
        "Line" : 2203,
        "CharPositionInLine" : 2
      },
      "164" : {
        "Text" : "# make Xcode precompile the generated prefix header with ProcessPCH and ProcessPCH++\n",
        "Line" : 2211,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "# for makefile based generator, we force inclusion of the prefix header for all target source files\n\n# if this is a single-language target without any excluded files\n",
        "Line" : 2215,
        "CharPositionInLine" : 2
      },
      "166" : {
        "Text" : "# for Visual Studio and Intel, precompiled header inclusion is always done on the source file level\n\n# see cotire_setup_pch_file_inclusion\n",
        "Line" : 2219,
        "CharPositionInLine" : 3
      },
      "167" : {
        "Text" : "# set up compiled unity source dependencies via OBJECT_DEPENDS\n\n# this ensures that missing source files are generated before the unity file is compiled\n",
        "Line" : 2241,
        "CharPositionInLine" : 2
      },
      "168" : {
        "Text" : "# the OBJECT_DEPENDS property requires a list of full paths\n",
        "Line" : 2247,
        "CharPositionInLine" : 3
      },
      "169" : {
        "Text" : "# unity file compilation results in potentially huge object file, thus use /bigobj by default unter MSVC and Windows Intel\n",
        "Line" : 2256,
        "CharPositionInLine" : 3
      },
      "170" : {
        "Text" : "# CMake 3.1.0 supports generator expressions in arguments to DEPENDS\n",
        "Line" : 2264,
        "CharPositionInLine" : 3
      },
      "171" : {
        "Text" : "# create a joint unity file from all unity file segments\n",
        "Line" : 2282,
        "CharPositionInLine" : 2
      },
      "172" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2320,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2337,
        "CharPositionInLine" : 2
      },
      "174" : {
        "Text" : "# GNU and Clang require indirect compilation of the prefix header to make them honor the system_header pragma\n",
        "Line" : 2346,
        "CharPositionInLine" : 2
      },
      "175" : {
        "Text" : "# set up generation of a prefix source file which includes the prefix header\n",
        "Line" : 2353,
        "CharPositionInLine" : 2
      },
      "176" : {
        "Text" : "# for Xcode, we cannot apply the precompiled header to individual sources, only to the whole target\n",
        "Line" : 2526,
        "CharPositionInLine" : 3
      },
      "177" : {
        "Text" : "# for Xcode, we cannot apply the required PRE_BUILD action to generate the prefix header to an OBJECT_LIBRARY target\n",
        "Line" : 2530,
        "CharPositionInLine" : 3
      },
      "178" : {
        "Text" : "# cache message to avoid redundant messages on re-configure\n",
        "Line" : 2544,
        "CharPositionInLine" : 3
      },
      "179" : {
        "Text" : "# use all available cores\n",
        "Line" : 2564,
        "CharPositionInLine" : 3
      },
      "180" : {
        "Text" : "# a unity source segment must not contain less than COTIRE_MINIMUM_NUMBER_OF_TARGET_SOURCES files\n",
        "Line" : 2569,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# check for user provided unity source file list\n",
        "Line" : 2593,
        "CharPositionInLine" : 1
      },
      "182" : {
        "Text" : "# check for user provided prefix header files\n",
        "Line" : 2609,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "# check if selected language has enough sources at all\n",
        "Line" : 2618,
        "CharPositionInLine" : 2
      },
      "184" : {
        "Text" : "# first file in _sourceFiles is passed as the host file\n",
        "Line" : 2628,
        "CharPositionInLine" : 4
      },
      "185" : {
        "Text" : "# user provided prefix header must be included unconditionally\n",
        "Line" : 2635,
        "CharPositionInLine" : 3
      },
      "186" : {
        "Text" : "# mark target as cotired for language\n",
        "Line" : 2639,
        "CharPositionInLine" : 1
      },
      "187" : {
        "Text" : "# for makefile based generators, we add a custom target to trigger the generation of the cotire related files\n",
        "Line" : 2667,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# Visual Studio and Intel only create precompiled header as a side effect\n",
        "Line" : 2672,
        "CharPositionInLine" : 4
      },
      "189" : {
        "Text" : "# for other generators, we add the \"clean all\" target to clean up the precompiled header\n",
        "Line" : 2687,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "# remove source files that are included in the unity source\n",
        "Line" : 2698,
        "CharPositionInLine" : 3
      },
      "191" : {
        "Text" : "# add unity source files instead\n",
        "Line" : 2706,
        "CharPositionInLine" : 3
      },
      "192" : {
        "Text" : "# determine unity target sub type\n",
        "Line" : 2718,
        "CharPositionInLine" : 1
      },
      "193" : {
        "Text" : "# determine unity target sources\n",
        "Line" : 2728,
        "CharPositionInLine" : 1
      },
      "194" : {
        "Text" : "# handle automatic Qt processing\n",
        "Line" : 2731,
        "CharPositionInLine" : 1
      },
      "195" : {
        "Text" : "# if the original target sources are subject to CMake's automatic Qt processing,\n\n# also include implicitly generated <targetname>_automoc.cpp file\n",
        "Line" : 2736,
        "CharPositionInLine" : 2
      },
      "196" : {
        "Text" : "# prevent AUTOMOC, AUTOUIC and AUTORCC properties from being set when the unity target is created\n",
        "Line" : 2741,
        "CharPositionInLine" : 1
      },
      "197" : {
        "Text" : "# generate unity target\n",
        "Line" : 2748,
        "CharPositionInLine" : 1
      },
      "198" : {
        "Text" : "# depend on the original target's implicity generated <targetname>_automoc target\n",
        "Line" : 2755,
        "CharPositionInLine" : 2
      },
      "199" : {
        "Text" : "# copy output location properties\n",
        "Line" : 2758,
        "CharPositionInLine" : 1
      },
      "200" : {
        "Text" : "# append relative COTIRE_UNITY_OUTPUT_DIRECTORY to target's actual output directory\n",
        "Line" : 2768,
        "CharPositionInLine" : 3
      },
      "201" : {
        "Text" : "# copy output name\n",
        "Line" : 2793,
        "CharPositionInLine" : 1
      },
      "202" : {
        "Text" : "# copy compile stuff\n",
        "Line" : 2801,
        "CharPositionInLine" : 1
      },
      "203" : {
        "Text" : "# copy compile features\n",
        "Line" : 2810,
        "CharPositionInLine" : 1
      },
      "204" : {
        "Text" : "# copy interface stuff\n",
        "Line" : 2815,
        "CharPositionInLine" : 1
      },
      "205" : {
        "Text" : "# copy link stuff\n",
        "Line" : 2823,
        "CharPositionInLine" : 1
      },
      "206" : {
        "Text" : "# copy cmake stuff\n",
        "Line" : 2833,
        "CharPositionInLine" : 1
      },
      "207" : {
        "Text" : "# copy Apple platform specific stuff\n",
        "Line" : 2836,
        "CharPositionInLine" : 1
      },
      "208" : {
        "Text" : "# copy Windows platform specific stuff\n",
        "Line" : 2841,
        "CharPositionInLine" : 1
      },
      "209" : {
        "Text" : "# copy Android platform specific stuff\n",
        "Line" : 2851,
        "CharPositionInLine" : 1
      },
      "210" : {
        "Text" : "# use output name from original target\n",
        "Line" : 2854,
        "CharPositionInLine" : 1
      },
      "211" : {
        "Text" : "# use export symbol from original target\n",
        "Line" : 2859,
        "CharPositionInLine" : 1
      },
      "212" : {
        "Text" : "# trivial checks\n",
        "Line" : 2883,
        "CharPositionInLine" : 1
      },
      "213" : {
        "Text" : "# resolve alias\n",
        "Line" : 2889,
        "CharPositionInLine" : 1
      },
      "214" : {
        "Text" : "# check if target needs to be cotired for build type\n\n# when using configuration types, the test is performed at build time\n",
        "Line" : 2897,
        "CharPositionInLine" : 1
      },
      "215" : {
        "Text" : "# when not using configuration types, immediately create cotire intermediate dir\n",
        "Line" : 2913,
        "CharPositionInLine" : 1
      },
      "216" : {
        "Text" : "# choose languages that apply to the target\n",
        "Line" : 2918,
        "CharPositionInLine" : 1
      },
      "217" : {
        "Text" : "# use target's corresponding unity target, if available\n",
        "Line" : 2949,
        "CharPositionInLine" : 3
      },
      "218" : {
        "Text" : "# filter files in intermediate directory\n",
        "Line" : 2998,
        "CharPositionInLine" : 1
      },
      "219" : {
        "Text" : "# cotire is being run in script mode\n\n# locate -P on command args\n",
        "Line" : 3085,
        "CharPositionInLine" : 1
      },
      "220" : {
        "Text" : "# include target script if available\n",
        "Line" : 3097,
        "CharPositionInLine" : 1
      },
      "221" : {
        "Text" : "# the included target scripts sets up additional variables relating to the target (e.g., COTIRE_TARGET_SOURCES)\n",
        "Line" : 3099,
        "CharPositionInLine" : 2
      },
      "222" : {
        "Text" : "# check if target has been cotired for actual build type COTIRE_BUILD_TYPE\n",
        "Line" : 3115,
        "CharPositionInLine" : 1
      },
      "223" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on target script\n",
        "Line" : 3136,
        "CharPositionInLine" : 3
      },
      "224" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3139,
        "CharPositionInLine" : 3
      },
      "225" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on unity file and prefix dependencies\n",
        "Line" : 3158,
        "CharPositionInLine" : 3
      },
      "226" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3161,
        "CharPositionInLine" : 3
      },
      "227" : {
        "Text" : "# executing pre-build action under Xcode, check dependency on files to be combined\n",
        "Line" : 3229,
        "CharPositionInLine" : 3
      },
      "228" : {
        "Text" : "# executing custom command, no need to re-check for dependencies\n",
        "Line" : 3232,
        "CharPositionInLine" : 3
      },
      "229" : {
        "Text" : "# cotire is being run in include mode\n\n# set up all variable and property definitions\n",
        "Line" : 3255,
        "CharPositionInLine" : 1
      },
      "230" : {
        "Text" : "# enable parallelization for generators that run multiple jobs by default\n",
        "Line" : 3292,
        "CharPositionInLine" : 3
      },
      "231" : {
        "Text" : "# MSVC default PCH memory scaling factor of 100 percent (75 MB) is too small for template heavy C++ code\n\n# use a bigger default factor of 140 percent (105 MB)\n",
        "Line" : 3326,
        "CharPositionInLine" : 2
      },
      "232" : {
        "Text" : "# generated Ninja build files do not work if the unity target produces the same output file as the cotired target\n",
        "Line" : 3340,
        "CharPositionInLine" : 3
      },
      "233" : {
        "Text" : "# define cotire cache variables\n",
        "Line" : 3347,
        "CharPositionInLine" : 1
      },
      "234" : {
        "Text" : "# define cotire directory properties\n",
        "Line" : 3400,
        "CharPositionInLine" : 1
      },
      "235" : {
        "Text" : "# define cotire target properties\n",
        "Line" : 3472,
        "CharPositionInLine" : 1
      },
      "236" : {
        "Text" : "# define cotire source properties\n",
        "Line" : 3636,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 237
    },
    "libraries/CMakeLists.txt" : {
      "ObjectId" : "be71012dcc142bbd6066167aef22b50d5000d468",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory( p2p )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libraries/app/CMakeLists.txt" : {
      "ObjectId" : "2dd91f630a380de31515248a3cfc7614b2f05951",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# need to link graphene_debug_witness because plugins aren't sufficiently isolated #246\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libraries/chain/CMakeLists.txt" : {
      "ObjectId" : "9cc4285dd83852d1dcdadf34f8ed7bd2b2f74d73",
      "LastModified" : "2016-02-17T14:17:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## SORT .cpp by most likely to change / break compile\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As database takes the longest to compile, start it first\n",
        "Line" : 33,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 2
    },
    "libraries/db/CMakeLists.txt" : {
      "ObjectId" : "986fe9cbfc7185138102b8f8fcb889719033145b",
      "LastModified" : "2016-02-12T05:11:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/deterministic_openssl_rand/CMakeLists.txt" : {
      "ObjectId" : "13ef69a0775e12f1805a744275d031ba9d11a94a",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/egenesis/CMakeLists.txt" : {
      "ObjectId" : "68de4b00792635098efc179be2009bf83ac4d508",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/net/CMakeLists.txt" : {
      "ObjectId" : "cabf26a67e375731b74b60c5727a4d5030829cce",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/p2p/CMakeLists.txt" : {
      "ObjectId" : "6b5918d51abf457389104b3dcd1859cea8cc8296",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if(MSVC)\n\n#  set_source_files_properties( node.cpp PROPERTIES COMPILE_FLAGS \"/bigobj\" )\n\n#endif(MSVC)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#if (USE_PCH)\n\n#  set_target_properties(graphene_p2p  PROPERTIES COTIRE_ADD_UNITY_BUILD FALSE)\n\n#  cotire(graphene_p2p )\n\n#endif(USE_PCH)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libraries/plugins/CMakeLists.txt" : {
      "ObjectId" : "7a02ceba30cb7eec2fc2d7b55bf373548466dad5",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/plugins/account_history/CMakeLists.txt" : {
      "ObjectId" : "18fd613539a2f955dfc7e23aecca8a3ecf1eef32",
      "LastModified" : "2015-09-21T13:30:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/plugins/debug_witness/CMakeLists.txt" : {
      "ObjectId" : "f0fcb7fb28b3c506dfb66a8182bbce31a88b85dd",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/plugins/delayed_node/CMakeLists.txt" : {
      "ObjectId" : "63dd73e53c0c866f8317e5b83e0bd592f4ed8601",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/plugins/market_history/CMakeLists.txt" : {
      "ObjectId" : "21b8211f09c131070bccb8690c2cda15cd7fe073",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/plugins/witness/CMakeLists.txt" : {
      "ObjectId" : "c82442fff2adf56cd5bdd31d7fbbeb2ebdd12d1b",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/time/CMakeLists.txt" : {
      "ObjectId" : "cc8a909d295ec9935ae86b55ab4d2359e8a48b39",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/utilities/CMakeLists.txt" : {
      "ObjectId" : "cce166446ebc0173c25b28b1d2b34770ac89387e",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libraries/wallet/CMakeLists.txt" : {
      "ObjectId" : "3d66c48e64edc38d8602d1cd226ed21e8bfed966",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# no perl and doxygen, generate the best docs we can at runtime from reflection\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "programs/CMakeLists.txt" : {
      "ObjectId" : "932e69b7777de16e85d1e5c15fa2c7d2a8796156",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/build_helpers/CMakeLists.txt" : {
      "ObjectId" : "7a625b258c6a4d784efd5d0904fc9d0f1ebf5a91",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we only actually need Boost, but link against FC for now so we don't duplicate it.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we only actually need Boost, but link against FC for now so we don't duplicate it.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "programs/cli_wallet/CMakeLists.txt" : {
      "ObjectId" : "140bdce32e1b679664403bfadc007670e7428c1f",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/debug_node/CMakeLists.txt" : {
      "ObjectId" : "8ec7362ba45d2b08de435ee642c5e40af481876c",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/delayed_node/CMakeLists.txt" : {
      "ObjectId" : "4dbe2bbfce148286e59fde5de56a779f07dad978",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/genesis_util/CMakeLists.txt" : {
      "ObjectId" : "9c3b278d23209c185185d56e23db8cf0e7d88eeb",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/js_operation_serializer/CMakeLists.txt" : {
      "ObjectId" : "dad8ded224ca0286f8a678abfb933c3b78e97dc5",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/size_checker/CMakeLists.txt" : {
      "ObjectId" : "5e0a167c63be520e2eae4e0b23a7057077501b09",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "programs/witness_node/CMakeLists.txt" : {
      "ObjectId" : "0509a0af79b6fefcf49a766caea16a2e8521a5e7",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We have to link against graphene_debug_witness because deficiency in our API infrastructure doesn't allow plugins to be fully abstracted #246\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "b03d58a8024da78777b153127e929c36104737e9",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/generate_empty_blocks/CMakeLists.txt" : {
      "ObjectId" : "af53ee918eed96b5c272af3cb82b0f15baee4c22",
      "LastModified" : "2016-03-16T05:09:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 34
  },
  "ElapsedTime" : 2791
}