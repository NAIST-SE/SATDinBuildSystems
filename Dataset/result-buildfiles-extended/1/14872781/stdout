{
  "Repository" : "14872781",
  "Revision" : "HEAD",
  "ObjectId" : "a49b76f13849565b00594f6cf3da53f03519d2c9",
  "CommitTime" : "2019-02-28T17:21:28Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f20a26318a3689ca5f8b30153d6308a3ea19e636",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#####################################################################\n\n## Generic parameters of the Orthanc framework\n\n#####################################################################\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable all the optional components of the Orthanc framework\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####################################################################\n\n## CMake parameters tunable at the command line to configure the\n\n## plugins, the companion tools, and the unit tests\n\n#####################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Parameters of the build\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#####################################################################\n\n## Configuration of the Orthanc framework\n\n#####################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#####################################################################\n\n## List of source files\n\n#####################################################################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add the \"-pedantic\" flag only on the Orthanc sources, and only if\n\n# cross-compiling DCMTK 3.6.0\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## Autogeneration of files\n\n#####################################################################\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We embed all the resources in the binaries for standalone builds\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#####################################################################\n\n## Configuration of the C/C++ macros\n\n#####################################################################\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Macros for the plugins\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Setup precompiled headers for Microsoft Visual Studio\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# WARNING: There must be NO MORE \"add_definitions()\", \"include()\" or\n\n# \"include_directories()\" below, otherwise the generated precompiled\n\n# headers might get broken!\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#####################################################################\n\n## Build the core of Orthanc\n\n#####################################################################\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# \"CoreLibrary\" contains all the third-party dependencies and the\n\n# content of the \"Core\" folder\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#####################################################################\n\n## Build the Orthanc server\n\n#####################################################################\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Ensure autogenerated code is built before building ServerLibrary\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#####################################################################\n\n## Build the unit tests\n\n#####################################################################\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#####################################################################\n\n## Build a static library to share code between the plugins\n\n#####################################################################\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add the \"-fPIC\" option as this static library must be embedded\n\n# inside shared libraries (important on UNIX)\n",
        "Line" : 363,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#####################################################################\n\n## Build the \"ServeFolders\" plugin\n\n#####################################################################\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Destination for Windows\n",
        "Line" : 408,
        "CharPositionInLine" : 31
      },
      "22" : {
        "Text" : "# Destination for Linux\n",
        "Line" : 409,
        "CharPositionInLine" : 49
      },
      "23" : {
        "Text" : "#####################################################################\n\n## Build the \"ModalityWorklists\" plugin\n\n#####################################################################\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Destination for Windows\n",
        "Line" : 451,
        "CharPositionInLine" : 31
      },
      "25" : {
        "Text" : "# Destination for Linux\n",
        "Line" : 452,
        "CharPositionInLine" : 49
      },
      "26" : {
        "Text" : "#####################################################################\n\n## Build the companion tool to recover files compressed using Orthanc\n\n#####################################################################\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#####################################################################\n\n## Generate the documentation if Doxygen is present\n\n#####################################################################\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#####################################################################\n\n## Install the plugin SDK\n\n#####################################################################\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#####################################################################\n\n## Prepare the \"uninstall\" target\n\n## http://www.cmake.org/Wiki/CMake_FAQ#Can_I_do_.22make_uninstall.22_with_CMake.3F\n\n#####################################################################\n",
        "Line" : 551,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "Plugins/Samples/AutomatedJpeg2kCompression/CMakeLists.txt" : {
      "ObjectId" : "769db9477d4b2c7700b1d816eb8799494ecfe6fc",
      "LastModified" : "2015-11-24T12:36:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Samples/Basic/CMakeLists.txt" : {
      "ObjectId" : "0a926bb61f85cc659a3d79a2784716c783eb5cf1",
      "LastModified" : "2015-11-24T12:36:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Samples/Common/OrthancPlugins.cmake" : {
      "ObjectId" : "90f522478f8006b854f14c32d170cfc3b0337197",
      "LastModified" : "2016-12-08T15:16:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Linking with \"pthread\" is necessary, otherwise the software crashes\r\n\n# http://sourceware.org/bugzilla/show_bug.cgi?id=10652#c17\r\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "Plugins/Samples/CustomImageDecoder/CMakeLists.txt" : {
      "ObjectId" : "24e1f60f2c01c7405fbcdceeda1cbb6d6715e459",
      "LastModified" : "2015-11-25T15:56:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Samples/GdcmDecoder/CMakeLists.txt" : {
      "ObjectId" : "fc6cd29e96a56db28e2086a145e44db52043d396",
      "LastModified" : "2015-11-27T11:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Samples/ModalityWorklists/CMakeLists.txt" : {
      "ObjectId" : "fcf660664e0ed282e7eca9687e9026248a09a478",
      "LastModified" : "2016-12-08T15:16:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Destination for Windows\n",
        "Line" : 35,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "# Destination for Linux\n",
        "Line" : 36,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 2
    },
    "Plugins/Samples/ServeFolders/CMakeLists.txt" : {
      "ObjectId" : "e9c611f6c204baee04f64759b151908c35ce2f47",
      "LastModified" : "2016-12-08T15:16:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Destination for Windows\n",
        "Line" : 35,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "# Destination for Linux\n",
        "Line" : 36,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 2
    },
    "Plugins/Samples/StorageArea/CMakeLists.txt" : {
      "ObjectId" : "ab4db08383219d050ec8d879f8bc09e4a509f3c9",
      "LastModified" : "2015-11-27T11:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Samples/WebSkeleton/CMakeLists.txt" : {
      "ObjectId" : "dea9d59bff1c84321aead739be80114cf83ca334",
      "LastModified" : "2015-11-27T11:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Plugins/Samples/WebSkeleton/Framework/Framework.cmake" : {
      "ObjectId" : "4e5d0262ae2abba622a1fd8553c79f0d59409c0d",
      "LastModified" : "2018-12-24T10:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Orthanc - A Lightweight, RESTful DICOM Store\n\n# Copyright (C) 2012-2016 Sebastien Jodogne, Medical Physics\n\n# Department, University Hospital of Liege, Belgium\n\n# Copyright (C) 2017-2019 Osimis S.A., Belgium\n\n#\n\n# This program is free software: you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License as\n\n# published by the Free Software Foundation, either version 3 of the\n\n# License, or (at your option) any later version.\n\n# \n\n# This program is distributed in the hope that it will be useful, but\n\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\n# General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Resources/CMake/AutoGeneratedCode.cmake" : {
      "ObjectId" : "6dded7a2dd753bd94c7d4a0921d693c0849acf03",
      "LastModified" : "2015-11-27T11:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Convert a semicolon separated list to a whitespace separated string\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Loop over the arguments of the function\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Extract the first character of the argument\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# If the argument starts with a dash \"-\", this is an option to\n\n# EmbedResources.py\n",
        "Line" : 19,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 4
    },
    "Resources/CMake/BoostConfiguration.cmake" : {
      "ObjectId" : "725d26cd4fac74c7a5f224d6210609c1b7e857b7",
      "LastModified" : "2019-02-27T07:14:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(Boost_DEBUG 1)\n\n#set(Boost_USE_STATIC_LIBS ON)\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Boost releases 1.44 through 1.47 supply both V2 and V3 filesystem\n\n# http://www.boost.org/doc/libs/1_46_1/libs/filesystem/v3/doc/index.htm\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "##\n\n## Parameters for static compilation of Boost \n\n##\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##\n\n## Patching boost\n\n## \n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "##\n\n## Generic configuration of Boost\n\n## \n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Static build of Boost\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "##\n\n## Configuration of boost::thread\n\n##\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# No support for threads in asm.js/WebAssembly\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "##\n\n## Configuration of boost::regex\n\n##\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "##\n\n## Configuration of boost::datetime\n\n##\n",
        "Line" : 176,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "##\n\n## Configuration of boost::filesystem\n\n## \n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# boost::filesystem is not available on PNaCl\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "##\n\n## Configuration of boost::locale\n\n## \n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# For WebAssembly or asm.js\n",
        "Line" : 291,
        "CharPositionInLine" : 53
      },
      "14" : {
        "Text" : "# In WebAssembly or asm.js, we rely on the version of iconv\n\n# that is shipped with the stdlib\n",
        "Line" : 308,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Starting with release 0.8.2, Orthanc statically links against\n\n# libiconv on Windows. Indeed, the \"WCONV\" library of Windows XP\n\n# seems not to support properly several codepages (notably\n\n# \"Latin3\", \"Hebrew\", and \"Arabic\"). Set \"BOOST_LOCALE_BACKEND\"\n\n# to \"wconv\" to use WCONV anyway.\n",
        "Line" : 332,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 16
    },
    "Resources/CMake/CivetwebConfiguration.cmake" : {
      "ObjectId" : "4c287a876d6a22a7c7bac8c7bcbe2f834d919ade",
      "LastModified" : "2019-01-30T11:41:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Remove SSL support from civetweb\n",
        "Line" : 44,
        "CharPositionInLine" : 19
      },
      "CommentCount" : 1
    },
    "Resources/CMake/Compiler.cmake" : {
      "ObjectId" : "b68a0418488aba5ca60f1b5b6c0da0a1ddf9ef1b",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file sets all the compiler-related flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cross-compilation necessarily implies standalone and static build\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# --std=c99 makes libcurl not to compile\n\n# -pedantic gives a lot of warnings on OpenSSL \n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# http://stackoverflow.com/a/3543845/881731\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Use static runtime under Visual Studio\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace\n\n# http://stackoverflow.com/a/6510446\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Add /Zm256 compiler option to Visual Studio to fix PCH errors\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# New in Orthanc 1.5.5\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# \"If you omit the processMax argument in the /MP option, the\n\n# compiler obtains the number of effective processors from the\n\n# operating system, and then creates one process per effective\n\n# processor\"\n\n# https://blog.kitware.com/cmake-building-with-all-your-cores/\n\n# https://docs.microsoft.com/en-us/cpp/build/reference/mp-build-with-multiple-processes\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Starting with Visual Studio >= 2010 (i.e. macro _MSC_VER >=\n\n# 1600), Microsoft ships a standard-compliant <stdint.h>\n\n# header. For earlier versions of Visual Studio, give access to a\n\n# compatibility header.\n\n# http://stackoverflow.com/a/70630/881731\n\n# https://en.wikibooks.org/wiki/C_Programming/C_Reference/stdint.h#External_links\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# In FreeBSD/OpenBSD, the \"/usr/local/\" folder contains the ports and need to be imported\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# The \"--no-undefined\" linker flag makes the shared libraries\n\n# (plugins ModalityWorklists and ServeFolders) fail to compile on\n\n# OpenBSD, and make the PostgreSQL plugin complain about missing\n\n# \"environ\" global variable in FreeBSD\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Remove the \"-rdynamic\" option\n\n# http://www.mail-archive.com/cmake@cmake.org/msg08837.html\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# The \"--as-needed\" linker flag is not available on FreeBSD and OpenBSD\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# FreeBSD/OpenBSD have just one single interface for file\n\n# handling, which is 64bit clean, so there is no need to define macro\n\n# for LFS (Large File Support).\n\n# https://ohse.de/uwe/articles/lfs.html\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Starting Visual Studio 2013 (version 1800), it is not possible\n\n# to target Windows XP anymore\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Some additional C/C++ compiler flags for MinGW\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# This is a patch for MinGW64\n",
        "Line" : 166,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# This line is necessary to compile with recent versions of MinGW,\n\n# otherwise \"libwinpthread-1.dll\" is not statically linked.\n",
        "Line" : 172,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# The BINARYEN_TRAP_MODE specifies what to do when divisions per\n\n# zero (and similar conditions like integer overflows) are\n\n# encountered: The \"clamp\" mode avoids throwing errors, as they\n\n# cannot be properly catched by \"try {} catch (...)\" constructions.\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# \"When creating a static library using binutils (ar) and there\n\n# exist a duplicate object name (e.g. a/Foo.cpp.o, b/Foo.cpp.o), the\n\n# resulting static library can end up having only one of the\n\n# duplicate objects. [...] This bug only happens if there are many\n\n# objects.\" The trick consists in replacing the \"r\" argument\n\n# (\"replace\") provided to \"ar\" (as used in CMake < 3.1) by the \"q\"\n\n# argument (\"quick append\"). This is because of the fact that CMake\n\n# will invoke \"ar\" several times with several batches of \".o\"\n\n# objects, and using \"r\" would overwrite symbols defined in\n\n# preceding batches. https://cmake.org/Bug/view.php?id=14874\n",
        "Line" : 220,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 20
    },
    "Resources/CMake/DcmtkConfiguration.cmake" : {
      "ObjectId" : "24379ea0a0f8c817c4889a0676cf50555f3d3113",
      "LastModified" : "2019-02-28T17:21:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## Commands shared by all versions of DCMTK\n\n##\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Disable support for encoding JPEG (modification in Orthanc 1.0.1)\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Disable support for encoding JPEG-LS (modification in Orthanc 1.0.1)\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# This fixes crashes related to the destruction of the DCMTK OFLogger\n\n# http://support.dcmtk.org/docs-snapshot/file_macros.html\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Disable logging internal to DCMTK\n\n# https://groups.google.com/d/msg/orthanc-users/v2SzzAmY948/VxT1QVGiBAAJ\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#${DCMTK_SOURCES_DIR}\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# The following line allows to manually add libraries at the\n\n# command-line, which is necessary for Ubuntu/Debian packages\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# This is for Arch Linux\n",
        "Line" : 141,
        "CharPositionInLine" : 60
      },
      "8" : {
        "Text" : "# This is for Debian Buster\n",
        "Line" : 143,
        "CharPositionInLine" : 67
      },
      "9" : {
        "Text" : "# Autodetection of the version of DCMTK\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Lookup for DICOM dictionaries, if none is specified by the user\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 11
    },
    "Resources/CMake/DcmtkConfigurationStatic-3.6.0.cmake" : {
      "ObjectId" : "9f69b071c38fec39896dd4f9a5f7e6562e55effe",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If using DCMTK 3.6.0, backport the \"private.dic\" file from DCMTK\n\n# 3.6.2. This adds support for more private tags, and fixes some\n\n# import problems with Philips MRI Achieva.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Patches specific to DCMTK 3.6.0\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This patch is not needed anymore thanks to the following commit\n\n# (information sent by Jorg Riesmeier on Twitter on 2017-07-19):\n\n# http://git.dcmtk.org/?p=dcmtk.git;a=commit;h=8df1f5e517b8629ae09088d0935c2a8dd333c76f\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# C_CHAR_UNSIGNED *must* be set before calling \"GenerateDCMTKConfigure.cmake\"\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# MinGW\n",
        "Line" : 65,
        "CharPositionInLine" : 45
      },
      "5" : {
        "Text" : "# WebAssembly or asm.js\n",
        "Line" : 68,
        "CharPositionInLine" : 51
      },
      "6" : {
        "Text" : "# Check out \"../WebAssembly/ArithmeticTests/\" to regenerate the\n\n# \"arith.h\" file\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# WebAssembly or\n",
        "Line" : 107,
        "CharPositionInLine" : 46
      },
      "8" : {
        "Text" : "# asm.js The macros below are not properly discovered by DCMTK\n\n# when using WebAssembly. Check out \"../WebAssembly/arith.h\" for\n\n# how we produced these values. This step MUST be after\n\n# \"GenerateDCMTKConfigure\" and before the generation of\n\n# \"osconfig.h\".\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Source for the logging facility of DCMTK\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is a patch for DCMTK 3.6.0 and MinGW64\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "Resources/CMake/DcmtkConfigurationStatic-3.6.2.cmake" : {
      "ObjectId" : "6f2bb0de7820ed3dab806fa01ac5e6b8946035a8",
      "LastModified" : "2019-02-28T17:21:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \"3.6.2 CXX11 fails on Linux; patch suggestions included\"\n\n# https://forum.dcmtk.org/viewtopic.php?f=3&t=4637\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# C_CHAR_UNSIGNED *must* be set before calling \"GenerateDCMTKConfigure.cmake\"\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MinGW\n",
        "Line" : 50,
        "CharPositionInLine" : 45
      },
      "3" : {
        "Text" : "# WebAssembly or asm.js\n",
        "Line" : 53,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : "# Check out \"../WebAssembly/ArithmeticTests/\" to regenerate the\n\n# \"arith.h\" file\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# WebAssembly or\n",
        "Line" : 92,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : "# asm.js The macros below are not properly discovered by DCMTK\n\n# when using WebAssembly. Check out \"../WebAssembly/arith.h\" for\n\n# how we produced these values. This step MUST be after\n\n# \"GenerateDCMTKConfigure\" and before the generation of\n\n# \"osconfig.h\".\n",
        "Line" : 93,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# For NetWkstaUserGetInfo@12\n\n# For GetAdaptersInfo@8\n",
        "Line" : 126,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : "# Configure Wine if cross-compiling for Windows\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# This step must be after the generation of \"osconfig.h\"\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Source for the logging facility of DCMTK\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#set_source_files_properties(${DCMTK_SOURCES}\n\n#  PROPERTIES COMPILE_DEFINITIONS\n\n#  \"PACKAGE_VERSION=\\\"${DCMTK_PACKAGE_VERSION}\\\";PACKAGE_VERSION_NUMBER=\\\"${DCMTK_VERSION_NUMBER}\\\"\")\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Starting with DCMTK 3.6.2, the Nagle algorithm is not disabled by\n\n# default since this does not seem to be appropriate (anymore) for\n\n# most modern operating systems. In order to change this default, the\n\n# environment variable NO_TCPDELAY can be set to \"1\" (see envvars.txt\n\n# for details). Alternatively, the macro DISABLE_NAGLE_ALGORITHM can\n\n# be defined to change this setting at compilation time (see\n\n# macros.txt for details).\n\n# https://forum.dcmtk.org/viewtopic.php?t=4632\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Resources/CMake/DcmtkConfigurationStatic-3.6.4.cmake" : {
      "ObjectId" : "9d4637cffea67b277834c6ee2a8a5b265950cad7",
      "LastModified" : "2019-02-28T17:21:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Apply the patches\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C_CHAR_UNSIGNED *must* be set before calling \"GenerateDCMTKConfigure.cmake\"\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MinGW\n",
        "Line" : 49,
        "CharPositionInLine" : 45
      },
      "3" : {
        "Text" : "# WebAssembly or asm.js\n",
        "Line" : 52,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : "# Check out \"../WebAssembly/ArithmeticTests/\" to regenerate the\n\n# \"arith.h\" file\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# WebAssembly or\n",
        "Line" : 81,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : "# asm.js The macros below are not properly discovered by DCMTK\n\n# when using WebAssembly. Check out \"../WebAssembly/arith.h\" for\n\n# how we produced these values. This step MUST be after\n\n# \"GenerateDCMTKConfigure\" and before the generation of\n\n# \"osconfig.h\".\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# For NetWkstaUserGetInfo@12\n\n# For GetAdaptersInfo@8\n",
        "Line" : 115,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : "# Configure Wine if cross-compiling for Windows\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# This step must be after the generation of \"osconfig.h\"\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Source for the logging facility of DCMTK\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Starting with DCMTK 3.6.2, the Nagle algorithm is not disabled by\n\n# default since this does not seem to be appropriate (anymore) for\n\n# most modern operating systems. In order to change this default, the\n\n# environment variable NO_TCPDELAY can be set to \"1\" (see envvars.txt\n\n# for details). Alternatively, the macro DISABLE_NAGLE_ALGORITHM can\n\n# be defined to change this setting at compilation time (see\n\n# macros.txt for details).\n\n# https://forum.dcmtk.org/viewtopic.php?t=4632\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "Resources/CMake/DownloadPackage.cmake" : {
      "ObjectId" : "625cb2f4ba6d73d13b808a4421d2d31e2c5f865b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#string(REGEX REPLACE \"^.*/[^.]*\\\\.\" \"\" TMP \"${Url}\")\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "##\n\n## Setup the patch command-line tool\n\n##\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## Check the existence of the required decompression tools\n\n##\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This fixes issue 6: \"I think cmake shouldn't download the\n\n# packages which are not in the system, it should stop and let\n\n# user know.\"\n\n# https://code.google.com/p/orthanc/issues/detail?id=6\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#message(${TMP_EXTENSION})\n",
        "Line" : 119,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# How to silently extract files using 7-zip\n\n# http://superuser.com/questions/331148/7zip-command-line-extract-silently-quietly\n",
        "Line" : 123,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "#message(\"tar xvfz ${TMP_PATH}\")\n",
        "Line" : 173,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#message(${TMP_EXTENSION})\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# How to silently extract files using 7-zip\n\n# http://superuser.com/questions/331148/7zip-command-line-extract-silently-quietly\n",
        "Line" : 220,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 9
    },
    "Resources/CMake/GoogleTestConfiguration.cmake" : {
      "ObjectId" : "28db542d1f324061371951268b7360d105d45f72",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# https://code.google.com/p/googletest/issues/detail?id=412\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# VS2012 does not support tuples correctly yet\n",
        "Line" : 48,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# The variable GTEST_LIBRARIES contains the shared library of\n\n# Google Test, create an alias for more uniformity\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "Resources/CMake/JsonCppConfiguration.cmake" : {
      "ObjectId" : "96d277609bf8fa8223ba08e76404d438f8e90de5",
      "LastModified" : "2019-01-24T09:55:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Switch to the C++11 standard if the version of JsonCpp is 1.y.z\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Osimis has encountered problems when this macro is left at its\n\n# default value (1000), so we increase this limit\n\n# https://gitlab.kitware.com/third-party/jsoncpp/commit/56df2068470241f9043b676bfae415ed62a0c172\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "Resources/CMake/LibCurlConfiguration.cmake" : {
      "ObjectId" : "cbe4530e83b2655303dd54574343827eca0d0c77",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-DCURL_DISABLE_PROXY=1\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#-DHAVE_LIBSSL=1\n",
        "Line" : 56,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "#file(WRITE ${CURL_SOURCES_DIR}/lib/curl_config.h \"\")\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# WARNING: Do *not* reorder the \"check_include_file_concat()\" below!\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# poll on macOS is unreliable, it first did not exist, then was broken until\n\n# fixed in 10.9 only to break again in 10.12.\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "Resources/CMake/LibIconvConfiguration.cmake" : {
      "ObjectId" : "c2af60957af31736b55b32d5b7e8f3f0f8995d33",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable the support of libiconv that is shipped by default with\n\n# the C standard library on Linux. Setting this macro redirects\n\n# calls from \"iconv*()\" to \"libiconv*()\" by defining macros in the\n\n# C headers of \"libiconv-1.15\".\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# https://groups.google.com/d/msg/android-ndk/AS1nkxnk6m4/EQm09hD1tigJ\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#-DENABLE_EXTRA=1\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Create an empty \"config.h\" for libiconv\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check whether the support for libiconv is bundled within the\n\n# standard C library\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# No builtin support for libiconv, try and find an external library.\n\n# Open question: Does this make sense on any platform?\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "Resources/CMake/LibIcuConfiguration.cmake" : {
      "ObjectId" : "fb3f7103769ef44d48f29548963f935e2d12a1f5",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check out: ../ThirdParty/icu/README.txt\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# http://userguide.icu-project.org/packaging\n\n# http://userguide.icu-project.org/howtouseicu\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# In Visual Studio 2015 64bit, we get the following error if using\n\n# the plain C version of the ICU data: \"icudt58l_dat.c(1638339):\n\n# fatal error C1060: compiler is out of heap space\" => we use a\n\n# precompiled binary generated using MinGW on Linux\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use plain C data library\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#-DU_COMBINED_IMPLEMENTATION\n\n#-DU_DEF_ICUDATA_ENTRY_POINT=icudt63l_dat\n\n#-DU_LIB_SUFFIX_C_NAME=l\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#-DUCONFIG_NO_SERVICE=1\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#-DU_CHARSET_IS_UTF8\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "Resources/CMake/LibJpegConfiguration.cmake" : {
      "ObjectId" : "1c90419adc202802dff1944701f785a99c71bba6",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${LIBJPEG_SOURCES_DIR}/jmemansi.c\n\n#${LIBJPEG_SOURCES_DIR}/jmemdos.c\n\n#${LIBJPEG_SOURCES_DIR}/jmemmac.c\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#${LIBJPEG_SOURCES_DIR}/jmemname.c\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# ${LIBJPEG_SOURCES_DIR}/rdbmp.c\n\n# ${LIBJPEG_SOURCES_DIR}/rdcolmap.c\n\n# ${LIBJPEG_SOURCES_DIR}/rdgif.c\n\n# ${LIBJPEG_SOURCES_DIR}/rdppm.c\n\n# ${LIBJPEG_SOURCES_DIR}/rdrle.c\n\n# ${LIBJPEG_SOURCES_DIR}/rdswitch.c\n\n# ${LIBJPEG_SOURCES_DIR}/rdtarga.c\n\n# ${LIBJPEG_SOURCES_DIR}/transupp.c\n\n# ${LIBJPEG_SOURCES_DIR}/wrbmp.c\n\n# ${LIBJPEG_SOURCES_DIR}/wrgif.c\n\n# ${LIBJPEG_SOURCES_DIR}/wrppm.c\n\n# ${LIBJPEG_SOURCES_DIR}/wrrle.c\n\n# ${LIBJPEG_SOURCES_DIR}/wrtarga.c\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Resources/CMake/LibP11Configuration.cmake" : {
      "ObjectId" : "2dbb6007aed06cbefbedad8fb683e77c59076f06",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Apply the patches\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# This command MUST be after applying the patch\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#${LIBP11_SOURCES_DIR}/src/eng_front.c\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Resources/CMake/LibPngConfiguration.cmake" : {
      "ObjectId" : "b2113acde9877d01824902faaa13ecaebe2b8ee5",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${LIBPNG_SOURCES_DIR}/example.c\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#${LIBPNG_SOURCES_DIR}/pngtest.c\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# The following declaration avoids \"__declspec(dllexport)\" in\n\n# libpng to prevent publicly exposing its symbols by the DLLs\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Resources/CMake/LuaConfiguration.cmake" : {
      "ObjectId" : "fca97290e5e1e20b2f4211e992eb3ded5c5f6083",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable loading of shared libraries (for UNIX-like)\n",
        "Line" : 13,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : "# Publish the functions of the Lua engine (that are built within\n\n# the Orthanc binary) as global symbols, so that the external\n\n# shared libraries can call them\n",
        "Line" : 16,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Enable loading of shared libraries (for Microsoft Windows)\n",
        "Line" : 35,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# Enable loading of shared libraries (for Apple OS X)\n",
        "Line" : 41,
        "CharPositionInLine" : 30
      },
      "4" : {
        "Text" : "# Don't compile the Lua command-line\n\n#${LUA_SOURCES_DIR}/src/lua.c\n\n#${LUA_SOURCES_DIR}/src/luac.c\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Core Lua\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Base Lua modules\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "Resources/CMake/MongooseConfiguration.cmake" : {
      "ObjectId" : "b2d92eefa3ea2bba298424713f3cbbfc469554fc",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use Mongoose 3.1\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Use Mongoose 3.8\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Patch mongoose\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Remove SSL support from mongoose\n",
        "Line" : 63,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# This is a patch for MinGW64\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "Resources/CMake/OpenSslConfiguration.cmake" : {
      "ObjectId" : "57f0057eec52119dc14b972adb7c394465677d59",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following patch of \"e_os2.h\" prevents from building OpenSSL\n\n# as a DLL under Windows. Otherwise, symbols have inconsistent\n\n# linkage if ${OPENSSL_SOURCES} is used to create a DLL (notably\n\n# if building an Orthanc plugin such as MySQL).\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#-DOPENSSL_NO_MD4   # MD4 is necessary for MariaDB/MySQL client\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# EC, ECDH and ECDSA are necessary for PKCS11, and for contacting\n\n# HTTPS servers that use TLS certificate encrypted with ECDSA\n\n# (check the output of a recent version of the \"sslscan\"\n\n# command). Until Orthanc <= 1.4.1, these features were only\n\n# enabled if ENABLE_PKCS11 support was set to \"ON\".\n\n# https://groups.google.com/d/msg/orthanc-users/2l-bhYIMEWg/oMmK33bYBgAJ\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "Resources/CMake/OrthancFrameworkConfiguration.cmake" : {
      "ObjectId" : "7f39d4e74b1357f1e4430f6c2cd2c6611d5653e4",
      "LastModified" : "2019-02-27T07:14:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## This is a CMake configuration file that configures the core\n\n## libraries of Orthanc. This file can be used by external projects so\n\n## as to gain access to the Orthanc APIs (the most prominent examples\n\n## are currently \"Stone of Orthanc\" and \"Orthanc for whole-slide\n\n## imaging plugin\").\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#####################################################################\n\n## Configuration of the components\n\n#####################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Path to the root folder of the Orthanc distribution\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Some basic inclusions\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#####################################################################\n\n## Disable unneeded macros\n\n#####################################################################\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#####################################################################\n\n## List of source files\n\n#####################################################################\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#####################################################################\n\n## Configuration of optional third-party dependencies\n\n#####################################################################\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##\n\n## Embedded database: SQLite\n\n##\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##\n\n## Cryptography: OpenSSL and libp11\n\n## Must be above \"ENABLE_WEB_CLIENT\" and \"ENABLE_WEB_SERVER\"\n\n##\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "##\n\n## HTTP client: libcurl\n\n##\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##\n\n## HTTP server: Mongoose 3.8 or Civetweb\n\n##\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##\n\n## JPEG support: libjpeg\n\n##\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##\n\n## zlib support\n\n##\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##\n\n## PNG support: libpng (in conjunction with zlib)\n\n##\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##\n\n## Lua support\n\n##\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##\n\n## XML support: pugixml\n\n##\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##\n\n## Locale support\n\n##\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# In WebAssembly or asm.js, we rely on the version of iconv that\n\n# is shipped with the stdlib\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "##\n\n## Google Test for unit testing\n\n##\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#####################################################################\n\n## Inclusion of mandatory third-party dependencies\n\n#####################################################################\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# We put Boost as the last dependency, as it is the heaviest to\n\n# configure, which allows to quickly spot problems when configuring\n\n# static builds in other dependencies\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#####################################################################\n\n## Optional configuration of DCMTK\n\n#####################################################################\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#####################################################################\n\n## Configuration of the C/C++ macros\n\n#####################################################################\n",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#####################################################################\n\n## Configuration of Orthanc versioning macros (new in Orthanc 1.5.0)\n\n#####################################################################\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#####################################################################\n\n## Gathering of all the source code\n\n#####################################################################\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# The \"xxx_INTERNAL\" variables list the source code that belongs to\n\n# the Orthanc project. It can be used to configure precompiled headers\n\n# if using Microsoft Visual Studio.\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# The \"xxx_DEPENDENCIES\" variables list the source code coming from\n\n# third-party dependencies.\n",
        "Line" : 612,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the minizip distribution to create ZIP files using zlib\n",
        "Line" : 640,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "Resources/CMake/OrthancFrameworkParameters.cmake" : {
      "ObjectId" : "dde0f0a0fd9f124c7ff320aa30fe22196635083f",
      "LastModified" : "2019-02-27T07:14:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#####################################################################\n\n## Versioning information\n\n#####################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Version of the build, should always be \"mainline\" except in release branches\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Version of the database schema. History:\n\n#   * Orthanc 0.1.0 -> Orthanc 0.3.0 = no versioning\n\n#   * Orthanc 0.3.1                  = version 2\n\n#   * Orthanc 0.4.0 -> Orthanc 0.7.2 = version 3\n\n#   * Orthanc 0.7.3 -> Orthanc 0.8.4 = version 4\n\n#   * Orthanc 0.8.5 -> Orthanc 0.9.4 = version 5\n\n#   * Orthanc 0.9.5 -> mainline      = version 6\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Version of the Orthanc API, can be retrieved from \"/system\" URI in\n\n# order to check whether new URI endpoints are available even if using\n\n# the mainline version of Orthanc\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#####################################################################\n\n## CMake parameters tunable by the user\n\n#####################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Support of static compilation\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generic parameters of the build\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Parameters to fine-tune linking against system libraries\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Parameters specific to DCMTK\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Advanced and distribution-specific parameters\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#####################################################################\n\n## Internal CMake parameters to enable the optional subcomponents of\n\n## the Orthanc framework\n\n#####################################################################\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# These options must be set to \"ON\" if compiling Orthanc, but might be\n\n# set to \"OFF\" by third-party projects if their associated features\n\n# are not required\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# These options can be used to turn off some modules of the Orthanc\n\n# framework, in order to speed up the compilation time of third-party\n\n# projects.\n\n#\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "Resources/CMake/PugixmlConfiguration.cmake" : {
      "ObjectId" : "08d2172ae9fb4aca5b5dd1e3ce98899d2acead27",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#${PUGIXML_SOURCES_DIR}/src/vlog_is_on.cc\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Resources/CMake/SQLiteConfiguration.cmake" : {
      "ObjectId" : "22c13cca003e7e465c57a48cd91ff127711507fc",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Under OS X, the binaries must always be linked against the\n\n# system-wide version of SQLite. Otherwise, if some Orthanc plugin\n\n# also uses its own version of SQLite (such as orthanc-webviewer),\n\n# this results in a crash in \"sqlite3_mutex_enter(db->mutex);\" (the\n\n# mutex is not initialized), probably because the EXE and the DYNLIB\n\n# share the same memory location for this mutex.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# For SQLite to run in the \"Serialized\" thread-safe mode\n\n# http://www.sqlite.org/threadsafe.html\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Disable SQLite plugins\n",
        "Line" : 34,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# Autodetection of the version of SQLite\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Remove the trailing spaces to convert the string to a proper integer\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# \"sqlite3_create_function_v2\" is not defined in SQLite < 3.7.0\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "Resources/CMake/UuidConfiguration.cmake" : {
      "ObjectId" : "22eb189637e655bd5b500fd2d3e6b66a72ec40ba",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## Patch for OS X, in order to be compatible with Cocoa (used in Stone)\n\n## \n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#${E2FSPROGS_SOURCES_DIR}/lib/uuid/tst_uuid.c\n\n#${E2FSPROGS_SOURCES_DIR}/lib/uuid/uuid_time.c\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# This is the case of OpenBSD\n",
        "Line" : 65,
        "CharPositionInLine" : 28
      },
      "3" : {
        "Text" : "# This is the case of OpenBSD\n",
        "Line" : 70,
        "CharPositionInLine" : 33
      },
      "CommentCount" : 4
    },
    "Resources/CMake/VisualStudioPrecompiledHeaders.cmake" : {
      "ObjectId" : "c1091827a859cfc27e73d96610d061a90fcfd2f1",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Resources/CMake/ZlibConfiguration.cmake" : {
      "ObjectId" : "27135de11e76a162e14b2e848595296d04602b60",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \"ioapi.c\" from zlib (minizip) expects the \"IOAPI_NO_64\" macro to be set to \"true\"\n\n# https://ohse.de/uwe/articles/lfs.html\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "Resources/DownloadOrthancFramework.cmake" : {
      "ObjectId" : "00735c6069c929e250991e7c0f6ec7f767b8ba57",
      "LastModified" : "2019-02-27T07:14:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Orthanc - A Lightweight, RESTful DICOM Store\n\n# Copyright (C) 2012-2016 Sebastien Jodogne, Medical Physics\n\n# Department, University Hospital of Liege, Belgium\n\n# Copyright (C) 2017-2019 Osimis S.A., Belgium\n\n#\n\n# This program is free software: you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License as\n\n# published by the Free Software Foundation, either version 3 of the\n\n# License, or (at your option) any later version.\n\n#\n\n# In addition, as a special exception, the copyright holders of this\n\n# program give permission to link the code of its release with the\n\n# OpenSSL project's \"OpenSSL\" library (or with modified versions of it\n\n# that use the same license as the \"OpenSSL\" library), and distribute\n\n# the linked executables. You must obey the GNU General Public License\n\n# in all respects for all of the code used other than \"OpenSSL\". If you\n\n# modify file(s) with this exception, you may extend this exception to\n\n# your version of the file(s), but you are not obligated to do so. If\n\n# you do not wish to do so, delete this exception statement from your\n\n# version. If you delete this exception statement from all source files\n\n# in the program, then also delete it here.\n\n# \n\n# This program is distributed in the hope that it will be useful, but\n\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\n# General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## Check whether the parent script sets the mandatory variables\n\n##\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## Detection of the requested version\n\n##\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n\n## Detection of the third-party software\n\n##\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n\n## Case of the Orthanc framework specified as a path on the filesystem\n\n##\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##\n\n## Case of the Orthanc framework cloned using Mercurial\n\n##\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##\n\n## Case of the Orthanc framework provided as a source archive on the\n\n## filesystem\n\n##\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##\n\n## Case of the Orthanc framework downloaded from the Web\n\n##\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Default case: Download from the official Web site\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "##\n\n## Uncompressing the Orthanc framework, if it was retrieved from a\n\n## source archive on the filesystem, or from the official Web site\n\n##\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# How to silently extract files using 7-zip\n\n# http://superuser.com/questions/331148/7zip-command-line-extract-silently-quietly\n",
        "Line" : 300,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 11
    },
    "Resources/Graveyard/DatabasePluginSample/CMakeLists.txt" : {
      "ObjectId" : "11c6cfd52bac1ca4d85c5d4f7f439845c76fa720",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Parameters of the build\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Advanced parameters to fine-tune linking against system libraries\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use \"std::runtime_error\" instead of \"OrthancException\" for embedded resources\n",
        "Line" : 24,
        "CharPositionInLine" : 22
      },
      "3" : {
        "Text" : "# Destination for Windows\n",
        "Line" : 72,
        "CharPositionInLine" : 29
      },
      "4" : {
        "Text" : "# Destination for Linux\n",
        "Line" : 73,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 5
    },
    "Resources/LinuxStandardBaseToolchain.cmake" : {
      "ObjectId" : "ed57fc9daf71eb550cc0f778801423a242b740a4",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LSB_CC=gcc-4.8 LSB_CXX=g++-4.8 cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=../Resources/LinuxStandardBaseToolchain.cmake -DUSE_LEGACY_JSONCPP=ON -DUSE_LEGACY_LIBICU=ON -DBOOST_LOCALE_BACKEND=icu\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Resources/MinGW-W64-Toolchain32.cmake" : {
      "ObjectId" : "043df3240f34148368df4acd1918b4c37ee26695",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Resources/MinGW-W64-Toolchain64.cmake" : {
      "ObjectId" : "4dee01008177c03978c09b97de8cb0e72138ec5b",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Resources/MinGWToolchain.cmake" : {
      "ObjectId" : "7dd3bbbdfe84061bc47d1ee14925e5a329f3bfc2",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search \n\n# programs in the host environment\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Resources/Samples/OrthancFramework/MicroService/CMakeLists.txt" : {
      "ObjectId" : "6dfd7b6d6803452a63c2b2679aa740e5b1b227fc",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Resources/Samples/Tools/CMakeLists.txt" : {
      "ObjectId" : "408d890fc24fb38bfbf222e246d64e2f40493532",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Linking with \"pthread\" is necessary, otherwise the software crashes\n\n# http://sourceware.org/bugzilla/show_bug.cgi?id=10652#c17\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "Resources/Testing/Issue32/Cpp/CMakeLists.txt" : {
      "ObjectId" : "8bd22cb6699855dba6766188e15c5daadc0e7878",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Resources/Testing/Issue32/Java/pom.xml" : {
      "ObjectId" : "dd962cdd220a770a80c4265ea3923c1af3711000",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " FIXME change it to the project's website ",
        "Line" : 12,
        "CharPositionInLine" : 52
      },
      "CommentCount" : 1
    },
    "Resources/ThirdParty/icu/CMakeLists.txt" : {
      "ObjectId" : "8912c29c5aff94a997944f2f0ef5ca7da54ad4a3",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# \"--no-name\" is necessary for 7-zip on Windows to behave similarly to gunzip\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate a precompiled version for Visual Studio 64bit\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# \"--no-name\" is necessary for 7-zip on Windows to behave similarly to gunzip\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#-DU_COMBINED_IMPLEMENTATION\n",
        "Line" : 117,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "Resources/ThirdParty/icu/Version.cmake" : {
      "ObjectId" : "34f627c298ec0b1b42cd1ecd07d98059b774494c",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NB: Orthanc assume that the platform is of ASCII-family, not of\n\n# EBCDIC-family. A \"e\" suffix would be needed on EBCDIC. Look for\n\n# macro \"U_ICUDATA_TYPE_LETTER\" in the source code of icu for more\n\n# information.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is the last version of icu that compiles with C++11\n\n# support. It can be used for Linux Standard Base and Visual Studio 2008.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "Resources/WebAssembly/ArithmeticTests/CMakeLists.txt" : {
      "ObjectId" : "801d77ac307047369124d967baaf8c07bf28ceaf",
      "LastModified" : "2019-02-22T11:51:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# source ~/Downloads/emsdk-portable/emsdk_env.sh\n\n# cmake .. -DCMAKE_TOOLCHAIN_FILE=${EMSCRIPTEN}/cmake/Modules/Platform/Emscripten.cmake \\\n\n#       -DCMAKE_BUILD_TYPE=Debug \\\n\n#       -DCMAKE_INSTALL_PREFIX=/tmp/wasm-install/\n\n# make install\n\n# -> Open the \"/tmp/wasm-install/\" with Firefox by serving it through Apache\n\n# -> Copy the result as \"../arith.h\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#####################################################################\n\n## Configuration of the Emscripten compiler for WebAssembly target\n\n#####################################################################\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Turn on support for debug exceptions\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#####################################################################\n\n## Prepare DCMTK 3.6.2\n\n#####################################################################\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#####################################################################\n\n## Build the DCMTK tests for arithmetics\n\n#####################################################################\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# https://github.com/kripken/emscripten/wiki/WebAssembly#web-server-setup\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 50,
    "MAVEN" : 1
  },
  "ElapsedTime" : 2545
}