{
  "Repository" : "29261651",
  "Revision" : "HEAD",
  "ObjectId" : "86e4467c527d191a175b464cd82e04bc1997af93",
  "CommitTime" : "2019-04-17T23:12:58Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b4d91e2ee24d54a6582f9b26c1ed6f2c8830559b",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Fix RPATH usage to be CMP0068 compliant\n\n# Disable Policy CMP0068 for CMake 3.9\n\n# rdar://37725888\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add path for custom CMake modules.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# CMake < 3.11 doesn't support CMAKE_JOB_POOLS. Manually set the property.\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Make a job pool for things that can't yet be distributed\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Put linking in that category\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# First include general CMake utilities.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# User-configurable options that control the inclusion and default build\n\n# behavior for components which may not strictly be necessary (tools, examples,\n\n# and tests).\n\n#\n\n# This is primarily to support building smaller or faster project files.\n\n#\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# In many cases, the CMake build system needs to determine whether to include\n\n# a directory, or perform other actions, based on whether the stdlib or SDK is\n\n# being built at all -- statically or dynamically. Please note that these\n\n# flags are not related to the deprecated build-script-impl arguments\n\n# 'build-swift-stdlib' and 'build-swift-sdk-overlay'. These are not flags that\n\n# the build script should be able to set.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Miscellaneous User-configurable options.\n\n#\n\n# TODO: Please categorize these!\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# SWIFT_VERSION is deliberately /not/ cached so that an existing build directory\n\n# can be reused when a new version of Swift comes out (assuming the user hasn't\n\n# manually set it as part of their own CMake configuration).\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Indicate whether Swift should attempt to use the lld linker.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Indicate whether Swift should attempt to use the gold linker.\n\n# This is not used on Darwin.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# The following only works with the Ninja generator in CMake >= 3.0.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Allow building Swift with Clang's Profile Guided Optimization\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# User-configurable Swift Standard Library specific options.\n\n#\n\n# TODO: Once the stdlib/compiler builds are split, this should be sunk into the\n\n# stdlib cmake.\n\n#\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# User-configurable Android specific options.\n\n#\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# User-configurable ICU specific options for Android, FreeBSD, Linux and Haiku.\n\n#\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# User-configurable Darwin-specific options.\n\n#\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# User-configurable debugging options.\n\n#\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# User-configurable experimental options.  Do not use in production builds.\n\n#\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n\n# End of user-configurable options.\n\n#\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Look for either a program in execute_process()'s path or for a hardcoded path.\n\n# Find a program's version and set it in the parent scope.\n\n# Replace newlines with spaces so it prints on one line.\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Print out path and version of any installed commands.\n\n# We migth be using the wrong version of a command, so record them all.\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# Assume a new enough ar to generate the index at construction time. This avoids\n\n# having to invoke ranlib as a secondary command.\n\n#\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# Include CMake modules\n\n#\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Configure swift include, install, build components.\n",
        "Line" : 471,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# lipo is used to create universal binaries.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Reset CMAKE_SYSTEM_PROCESSOR if not cross-compiling.\n\n# CMake refuses to use `uname -m` on OS X\n\n# http://public.kitware.com/Bug/view.php?id=10326\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Support building Swift as a standalone project, using LLVM as an\n\n# external library.\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# This setting causes all CMakeLists.txt to automatically have\n\n# ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CURRENT_SOURCE_DIR} as an\n\n# include_directories path. This is done for developer\n\n# convenience. Additionally, LLVM/Clang build with this option enabled, so we\n\n# should match them unless it is removed from LLVM/Clang as well.\n\n#\n\n# *NOTE* Even though these directories are added to the include path for a\n\n# specific CMakeLists.txt, these include paths are not propagated down to\n\n# subdirectories.\n",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# We'll need this once we have generated headers\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# A convenience pattern to match Darwin platforms. Example:\n\n#  if(SWIFT_HOST_VARIANT MATCHES \"${SWIFT_DARWIN_VARIANTS}\")\n\n#     ...\n\n#  endif()\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# A convenient list to match Darwin SDKs. Example:\n\n#  if(\"${SWIFT_HOST_VARIANT_SDK}\" IN_LIST SWIFT_APPLE_PLATFORMS)\n\n#    ...\n\n#  endif()\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Configuration flags passed to all of our invocations of gyb.  Try to\n\n# avoid making up new variable names here if you can find a CMake\n\n# variable that will do the job.\n",
        "Line" : 542,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Directory to use as the Clang module cache when building Swift source files.\n",
        "Line" : 549,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Xcode: use libc++ and c++11 using proper build settings.\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# If SWIFT_HOST_VARIANT_SDK not given, try to detect from the CMAKE_SYSTEM_NAME.\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# If SWIFT_HOST_VARIANT_ARCH not given, try to detect from the CMAKE_SYSTEM_PROCESSOR.\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# FIXME: Only matches v6l/v7l - by far the most common variants\n",
        "Line" : 598,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#\n\n# Enable additional warnings.\n\n#\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Check if we're build with MSVC or Clang-cl, as these compilers have similar command line arguments.\n",
        "Line" : 624,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n# Configure SDKs.\n\n#\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# FIXME: Cannot cross-compile the standard library using Xcode.  Xcode\n\n# insists on passing -mmacosx-version-min to the compiler, and we need\n\n# to pass -mios-version-min.  Clang sees both options and complains.\n",
        "Line" : 634,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# FIXME: the parameters we specify in SWIFT_SDKS are lacking architecture specifics,\n\n# so we need to hard-code it. For example, the SDK for Android is just 'ANDROID',\n\n# which we assume below to be armv7.\n\n# The iOS SDKs all have their architectures hardcoded because they are just specified by name (e.g. 'IOS' or 'WATCHOS').\n\n# We can't cross-compile the standard library for another linux architecture,\n\n# because the SDK list would just be 'LINUX' and we couldn't disambiguate it from the host.\n\n#\n\n# To fix it, we would need to append the architecture to the SDKs,\n\n# for example: 'OSX-x86_64;IOS-armv7;...etc'.\n\n# We could easily do that - we have all of that information in build-script-impl.\n\n# Darwin targets cheat and use `xcrun`.\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Should we build the standard library for the host?\n",
        "Line" : 657,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Display Xcode toolchain version.\n\n# The SDK configuration below prints each SDK version.\n",
        "Line" : 715,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# FIXME: guess target variant based on the host.\n\n# if(SWIFT_HOST_VARIANT MATCHES \"^macosx\")\n\n#   set(SWIFT_PRIMARY_VARIANT_GUESS \"OSX-R\")\n\n# elseif(SWIFT_HOST_VARIANT MATCHES \"^iphoneos\")\n\n#   set(SWIFT_PRIMARY_VARIANT_GUESS \"IOS-R\")\n\n# else()\n\n#   message(FATAL_ERROR \"Unknown SWIFT_HOST_VARIANT '${SWIFT_HOST_VARIANT}'\")\n\n# endif()\n\n#\n\n# set(SWIFT_PRIMARY_VARIANT ${SWIFT_PRIMARY_VARIANT_GUESS} CACHE STRING\n\n#    \"[OSX-DA, OSX-RA, OSX-R, IOS-DA, IOS-RA, IOS-R, IOS_SIMULATOR-DA, IOS_SIMULATOR-RA, IOS_SIMULATOR-R]\")\n\n#\n\n# Primary variant is always OSX; even on iOS hosts.\n",
        "Line" : 727,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Should we cross-compile the standard library for Android?\n",
        "Line" : 752,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Should we cross-compile the standard library for Windows?\n",
        "Line" : 768,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Clear universal library names to prevent adding duplicates\n",
        "Line" : 791,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Set the CMAKE_OSX_* variables in a way that minimizes conflicts.\n",
        "Line" : 805,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#\n\n# Find required dependencies.\n\n#\n",
        "Line" : 836,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# ICU is provided through CoreFoundation on Darwin.  On other hosts, if the ICU\n\n# unicode and i18n include and library paths are not defined, perform a standard\n\n# package lookup.  Otherwise, rely on the paths specified by the user.  These\n\n# need to be defined when cross-compiling.\n",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#\n\n# Find optional dependencies.\n\n#\n",
        "Line" : 873,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# You need libedit linked in order to check if you have el_wgets.\n",
        "Line" : 883,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# NOTE(compnerd) provide a custom install command to\n\n# ensure that we strip out the DESTDIR environment\n\n# from the sub-build\n",
        "Line" : 952,
        "CharPositionInLine" : 24
      },
      "56" : {
        "Text" : "# CMake does not like the addition of INTERFACE_INCLUDE_DIRECTORIES without\n\n# the directory existing.  Just create the location which will be populated\n\n# during the installation.\n",
        "Line" : 968,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# FIXME(compnerd) this should be taken care of by the\n\n# INTERFACE_INCLUDE_DIRECTORIES above\n",
        "Line" : 1015,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Add all of the subdirectories, where we actually do work.\n",
        "Line" : 1022,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "###############\n\n# PLEASE READ #\n\n###############\n\n#\n\n# We have to include stdlib/ before tools/.\n\n# Do not move add_subdirectory(stdlib) after add_subdirectory(tools)!\n\n#\n\n# We must include stdlib/ before tools/ because stdlib/CMakeLists.txt\n\n# declares the swift-stdlib-* set of targets. These targets will then\n\n# implicitly depend on any targets declared with IS_STDLIB or\n\n# TARGET_LIBRARY.\n\n#\n\n# One such library that declares IS_STDLIB is SwiftSyntax, living in\n\n# tools/SwiftSyntax. If we include stdlib/ after tools/,\n\n# the swift-stdlib-* set of targets will not have been generated yet,\n\n# causing the implicit dependency for SwiftSyntax to silently not be\n\n# created. This then will cause SwiftSyntax to fail to build.\n\n#\n\n# https://bugs.swift.org/browse/SR-5975\n",
        "Line" : 1024,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Always include this after including stdlib/!\n\n# Refer to the large comment above the add_subdirectory(stdlib) call.\n\n# https://bugs.swift.org/browse/SR-5975\n",
        "Line" : 1058,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Add a documentation target so that documentation shows up in the\n\n# Xcode project.\n",
        "Line" : 1090,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 62
    },
    "apinotes/CMakeLists.txt" : {
      "ObjectId" : "dffa6d550fe75308217006e17b28e257f93e83ac",
      "LastModified" : "2019-02-14T01:56:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is treated as an OPTIONAL target because if we don't build the SDK\n\n# overlay, the files will be missing anyway. It also allows us to build\n\n# single overlays without installing the API notes.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "benchmark/CMakeLists.txt" : {
      "ObjectId" : "6063c62935444bc5e8742084466c8cf638b5f7bd",
      "LastModified" : "2019-04-17T17:32:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add path for custom CMake modules.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Load utility modules.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#===-----------------------------------------------------------------------===#\n\n# Declarative Description of Benchmarks\n\n#===-----------------------------------------------------------------------===#\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#===-----------------------------------------------------------------------===#\n\n# Build Configuration\n\n#===-----------------------------------------------------------------------===#\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# You have to delete CMakeCache.txt in the swift build to force a\n\n# reconfiguration.\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Syntax for an optset:  <optimization-level>_<configuration>\n\n#    where \"_<configuration>\" is optional.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This option's value must match the value of the same option used when\n\n# building the swift runtime.\n",
        "Line" : 218,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Options for the default (= empty) configuration\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If the path to the opt-viewer was specified manually and we have no access\n\n# to the LLVM tree, assume we have the modules for the opt-viewer installed.\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Options for other configurations\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#===-----------------------------------------------------------------------===#\n\n# SDK Configuration\n\n#===-----------------------------------------------------------------------===#\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#===---------------------------------------------------------------------===#\n\n# Statement of Configuration for Build Users\n\n#===---------------------------------------------------------------------===#\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#===---------------------------------------------------------------------===#\n\n# Build Rule Generation\n\n#===---------------------------------------------------------------------===#\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Compile the perf test suite for each platform\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "benchmark/cmake/modules/AddSwiftBenchmarkSuite.cmake" : {
      "ObjectId" : "bc05c8f864789cb7c7545f6a10416ab8650bae36",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If the CMAKE_C_COMPILER is already clang, don't find it again,\n\n# thus allowing the --host-cc build-script argument to work here.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# We always require SWIFT_EXEC and CLANG_EXEC to be specified explicitly\n\n# when compiling for Linux.\n\n#\n\n# TODO: Investigate if we can eliminate CLANG_EXEC/SWIFT_EXEC and use more\n\n# normal like cmake patterns.\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# If we are using a pre-built compiler, check if it supports the\n\n# -align-module-to-page-size option.\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set LIBRARY_PATH and either RPATH or RPATH_BASE. To build and run\n\n# for multiple platforms, RPATH_BASE must be set instead of RPATH. It\n\n# is the platform-independent runtime library directory. The platform\n\n# subdirectory name will be appended to form a different RPATH for\n\n# on platform.\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If requested, use Swift-in-the-OS. This way, the benchmarks may be built\n\n# standalone on the host, and the binaries can run directly from a temp dir\n\n# on any target machine. Of course, this factors out performance changes in\n\n# stdlib or overlays.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# When SWIFT_LIBRARY_PATH is specified explicitly for a standalone\n\n# build, use it as an absolute RPATH_BASE. This only works when\n\n# running benchmarks on the host machine. Otherwise, RPATH is set\n\n# assuming that libraries will be installed later (manually)\n\n# relative to the benchmark binaries.\n\n#\n\n# When not building standalone, SWIFT_LIBRARY_PATH is set by LLVM\n\n# cmake to the build directory for Swift dylibs. Otherwise, assume\n\n# that the dylibs are built relative to SWIFT_EXEC.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If the benchmarks are built against a local swift build, assume that\n\n# either the benchmarks will be installed in the swift build dir,\n\n# or the swift libraries will be installed in the benchmark location in\n\n# a platform specific subdirectory.\n\n# This way, performance always factors in changes to the libraries.\n",
        "Line" : 97,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# TODO: Get the correct triple.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Linux doesn't use the ver field\n",
        "Line" : 147,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# Linux doesn't use sdks.\n",
        "Line" : 150,
        "CharPositionInLine" : 20
      },
      "10" : {
        "Text" : "# This is not applicable on linux since on linux we do not use\n\n# SDKs/frameworks when building our benchmarks.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Regular whole-module-compilation: only a single object file is\n\n# generated.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# No whole-module-compilation or multi-threaded compilation.\n\n# There is an output object file for each input file. We have to write\n\n# an output-map-file to specify the output object file names.\n",
        "Line" : 307,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Always optimize the driver modules.\n\n# Note that we compile the driver for Osize also with -Osize\n\n# (and not with -O), because of <rdar://problem/19614516>.\n",
        "Line" : 377,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Build libraries used by the driver and benchmarks.\n",
        "Line" : 397,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# For this file we disable automatic bridging between Foundation and swift.\n",
        "Line" : 450,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# If host == target.\n",
        "Line" : 595,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# If we are on Linux, we do not support cross compiling.\n",
        "Line" : 602,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# TODO: Unify the linux and darwin builds here.\n\n#\n\n# We are avoiding this for now until it is investigated if swiftc and clang\n\n# both do exactly the same thing with both sets of arguments. It also lets us\n\n# avoid issues around code-signing.\n",
        "Line" : 606,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# TODO: rpath.\n",
        "Line" : 648,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# If we are building standalone as part of a subcmake build, we add the\n\n# -external suffix to all of our cmake target names. This enables the main\n\n# swift build to simple create -external targets and forward them via\n\n# AddExternalProject to the standalone benchmark project. The reason why\n\n# this is necessary is that we want to be able to support in-tree and\n\n# out-of-tree benchmark builds at the same time implying that we need some\n\n# sort of way to distinguish the in-tree (which don't have the suffix) from\n\n# the out of tree target (which do).\n",
        "Line" : 691,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 21
    },
    "benchmark/cmake/modules/SwiftBenchmarkUtils.cmake" : {
      "ObjectId" : "d457bac8aee911b5ce6680513028c53a80458784",
      "LastModified" : "2018-05-25T01:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prefix\n",
        "Line" : 6,
        "CharPositionInLine" : 17
      },
      "1" : {
        "Text" : "# options\n",
        "Line" : 7,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# single-value args\n",
        "Line" : 8,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# multi-value args\n",
        "Line" : 9,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# Translate a yes/no variable to the presence of a given string in a\n\n# variable.\n\n#\n\n# Usage:\n\n#   translate_flag(is_set flag_name var_name)\n\n#\n\n# If is_set is true, sets ${var_name} to ${flag_name}. Otherwise,\n\n# unsets ${var_name}.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Run a shell command and assign output to a variable or fail with an error.\n\n# Example usage:\n\n#   runcmd(COMMAND \"xcode-select\" \"-p\"\n\n#          VARIABLE xcodepath\n\n#          ERROR \"Unable to find current Xcode path\")\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "benchmark/scripts/CMakeLists.txt" : {
      "ObjectId" : "4922f6dd84031f9db9c56f145e3c5c7f38869781",
      "LastModified" : "2018-08-22T19:48:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/AddSwift.cmake" : {
      "ObjectId" : "368f717f50b29c1daf6786ad6283e607bc5ffbca",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SWIFTLIB_DIR is the directory in the build tree where Swift resource files\n\n# should be placed.  Note that $CMAKE_CFG_INTDIR expands to \".\" for\n\n# single-configuration builds.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix\n",
        "Line" : 16,
        "CharPositionInLine" : 11
      },
      "2" : {
        "Text" : "# options\n\n# single-value args\n",
        "Line" : 17,
        "CharPositionInLine" : 9
      },
      "3" : {
        "Text" : "# multi-value args\n",
        "Line" : 19,
        "CharPositionInLine" : 24
      },
      "4" : {
        "Text" : "# Compute the library subdirectory to use for the given sdk and\n\n# architecture, placing the result in 'result_var_name'.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Usage:\n\n# _add_variant_c_compile_link_flags(\n\n#   SDK sdk\n\n#   ARCH arch\n\n#   BUILD_TYPE build_type\n\n#   ENABLE_LTO enable_lto\n\n#   ANALYZE_CODE_COVERAGE analyze_code_coverage\n\n#   RESULT_VAR_NAME result_var_name\n\n#   DEPLOYMENT_VERSION_OSX version # If provided, overrides the default value of the OSX deployment target set by the Swift project for this compilation only.\n\n#   DEPLOYMENT_VERSION_IOS version\n\n#   DEPLOYMENT_VERSION_TVOS version\n\n#   DEPLOYMENT_VERSION_WATCHOS version\n\n#\n\n# )\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check if there's a specific OS deployment version needed for this invocation\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# MSVC, clang-cl, gcc don't understand -target.\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# lld can handle targeting the android build.  However, if lld is not\n\n# enabled, then fallback to the linker included in the android NDK.\n",
        "Line" : 140,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Omit leaf frame pointers on x86 production builds (optimized, no debug\n\n# info, and no asserts).\n",
        "Line" : 196,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# CMake automatically adds the flags for debug info if we use MSVC/clang-cl.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# MSVC doesn't support -Xclang. We don't need to manually specify\n\n# -D_MD or D_MDd either, as CMake does this automatically.\n",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# TODO(compnerd) handle /MT, /MTd\n",
        "Line" : 236,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# MSVC/clang-cl don't support -fno-pic or -fms-compatibility-version.\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# TODO(compnerd) permit building for different families\n",
        "Line" : 258,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# TODO(compnerd) handle /MT\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# NOTE: We assume that we are using VS 2015 U2+\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# msvcprt's std::function requires RTTI, but we do not want RTTI data.\n\n# Emulate /GR-.\n\n# TODO(compnerd) when moving up to VS 2017 15.3 and newer, we can disable\n\n# RTTI again\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# NOTE: VS 2017 15.3 introduced this to disable the static components of\n\n# RTTI as well.  This requires a newer SDK though and we do not have\n\n# guarantees on the SDK version currently.\n",
        "Line" : 279,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# NOTE(compnerd) workaround LLVM invoking `add_definitions(-D_DEBUG)` which\n\n# causes failures for the runtime library when cross-compiling due to\n\n# undefined symbols from the standard library.\n",
        "Line" : 284,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# On Windows, we don't set SWIFT_SDK_WINDOWS_PATH_ARCH_{ARCH}_PATH, so don't include it.\n\n# On Android the sdk is split to two different paths for includes and libs, so these\n\n# need to be set manually.\n",
        "Line" : 352,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# No extra libraries required.\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# We don't need to add -nostdlib using MSVC or clang-cl, as MSVC and clang-cl rely on auto-linking entirely.\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# NOTE: we do not use \"/MD\" or \"/MDd\" and select the runtime via linker\n\n# options. This causes conflicts.\n",
        "Line" : 446,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# NOTE(compnerd) workaround incorrectly extensioned import libraries from\n\n# the Windows SDK on case sensitive file systems.\n",
        "Line" : 453,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# We provide our own C++ below, so we ask the linker not to do it. However,\n\n# we need to add the math library, which is linked implicitly by libc++.\n",
        "Line" : 462,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# If lto is enabled, we need to add the object path flag so that the LTO code\n\n# generator leaves the intermediate object file in a place where it will not\n\n# be touched. The reason why this must be done is that on OS X, debug info is\n\n# left in object files. So if the object file is removed when we go to\n\n# generate a dsym, the debug info is gone.\n",
        "Line" : 479,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# FIXME: On Apple platforms, find_program needs to look for \"ld64.lld\"\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Enable dead stripping. Portions of this logic were copied from llvm's\n\n# `add_link_opts` function (which, perhaps, should have been used here in the\n\n# first place, but at this point it's hard to say whether that's feasible).\n\n#\n\n# TODO: Evaluate/enable -f{function,data}-sections --gc-sections for bfd,\n\n# gold, and lld.\n",
        "Line" : 517,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# See rdar://48283130: This gives 6MB+ size reductions for swift and\n\n# SourceKitService, and much larger size reductions for sil-opt etc.\n",
        "Line" : 525,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Look up extra flags for a module that matches a regexp.\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Add a universal binary target created from the output of the given\n\n# set of targets by running 'lipo'.\n\n#\n\n# Usage:\n\n#   _add_swift_lipo_target(\n\n#     sdk                 # The name of the SDK the target was created for.\n\n#                         # Examples include \"OSX\", \"IOS\", \"ANDROID\", etc.\n\n#     target              # The name of the target to create\n\n#     output              # The file to be created by this target\n\n#     source_targets...   # The source targets whose outputs will be\n\n#                         # lipo'd into the output.\n\n#   )\n",
        "Line" : 568,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# prefix\n\n# options\n\n# single-value args\n\n# multi-value args\n",
        "Line" : 582,
        "CharPositionInLine" : 24
      },
      "33" : {
        "Text" : "# Gather the source binaries.\n",
        "Line" : 595,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Use lipo to create the final binary.\n",
        "Line" : 605,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# We don't know how to create fat binaries for other platforms.\n",
        "Line" : 613,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Add a single variant of a new Swift library.\n\n#\n\n# Usage:\n\n#   _add_swift_library_single(\n\n#     target\n\n#     name\n\n#     [MODULE_TARGET]\n\n#     [SHARED]\n\n#     [STATIC]\n\n#     [SDK sdk]\n\n#     [ARCHITECTURE architecture]\n\n#     [DEPENDS dep1 ...]\n\n#     [LINK_LIBRARIES dep1 ...]\n\n#     [FRAMEWORK_DEPENDS dep1 ...]\n\n#     [FRAMEWORK_DEPENDS_WEAK dep1 ...]\n\n#     [LLVM_COMPONENT_DEPENDS comp1 ...]\n\n#     [C_COMPILE_FLAGS flag1...]\n\n#     [SWIFT_COMPILE_FLAGS flag1...]\n\n#     [LINK_FLAGS flag1...]\n\n#     [FILE_DEPENDS target1 ...]\n\n#     [DONT_EMBED_BITCODE]\n\n#     [IS_STDLIB]\n\n#     [FORCE_BUILD_OPTIMIZED]\n\n#     [IS_STDLIB_CORE]\n\n#     [IS_SDK_OVERLAY]\n\n#     INSTALL_IN_COMPONENT comp\n\n#     source1 [source2 source3 ...])\n\n#\n\n# target\n\n#   Name of the target (e.g., swiftParse-IOS-armv7).\n\n#\n\n# name\n\n#   Name of the library (e.g., swiftParse).\n\n#\n\n# MODULE_TARGET\n\n#   Name of the module target (e.g., swiftParse-swiftmodule-IOS-armv7).\n\n#\n\n# SHARED\n\n#   Build a shared library.\n\n#\n\n# STATIC\n\n#   Build a static library.\n\n#\n\n# SDK sdk\n\n#   SDK to build for.\n\n#\n\n# ARCHITECTURE\n\n#   Architecture to build for.\n\n#\n\n# DEPENDS\n\n#   Targets that this library depends on.\n\n#\n\n# LINK_LIBRARIES\n\n#   Libraries this library depends on.\n\n#\n\n# FRAMEWORK_DEPENDS\n\n#   System frameworks this library depends on.\n\n#\n\n# FRAMEWORK_DEPENDS_WEAK\n\n#   System frameworks this library depends on that should be weakly-linked.\n\n#\n\n# LLVM_COMPONENT_DEPENDS\n\n#   LLVM components this library depends on.\n\n#\n\n# C_COMPILE_FLAGS\n\n#   Extra compile flags (C, C++, ObjC).\n\n#\n\n# SWIFT_COMPILE_FLAGS\n\n#   Extra compile flags (Swift).\n\n#\n\n# LINK_FLAGS\n\n#   Extra linker flags.\n\n#\n\n# FILE_DEPENDS\n\n#   Additional files this library depends on.\n\n#\n\n# DONT_EMBED_BITCODE\n\n#   Don't embed LLVM bitcode in this target, even if it is enabled globally.\n\n#\n\n# IS_STDLIB\n\n#   Install library dylib and swift module files to lib/swift.\n\n#\n\n# IS_STDLIB_CORE\n\n#   Compile as the standard library core.\n\n#\n\n# IS_SDK_OVERLAY\n\n#   Treat the library as a part of the Swift SDK overlay.\n\n#\n\n# INSTALL_IN_COMPONENT comp\n\n#   The Swift installation component that this library belongs to.\n\n#\n\n# source1 ...\n\n#   Sources to add into this library\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Check arguments.\n",
        "Line" : 769,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Determine the subdirectory where this library will be installed.\n",
        "Line" : 781,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Include LLVM Bitcode slices for iOS, Watch OS, and Apple TV OS device libraries.\n",
        "Line" : 785,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# If we are asked to hide symbols, pass the obfuscation flag to libLTO.\n",
        "Line" : 791,
        "CharPositionInLine" : 6
      },
      "41" : {
        "Text" : "# If both SHARED and STATIC are specified, we add the SHARED library first.\n\n# The STATIC library is handled further below.\n",
        "Line" : 829,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Remove the \"swift\" prefix from the name to determine the module name.\n",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# TODO(compnerd) handle /MT and /MTd\n",
        "Line" : 872,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# FIXME: don't actually depend on the libraries in SWIFTLIB_SINGLE_LINK_LIBRARIES,\n\n# just any swiftmodule files that are associated with them.\n",
        "Line" : 880,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# If there were any swift sources, then a .swiftmodule may have been created.\n\n# If that is the case, then add a target which is an alias of the module files.\n",
        "Line" : 907,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# For standalone overlay builds to work\n",
        "Line" : 917,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Note: the dummy.cpp source file provides no definitions. However,\n\n# it forces Xcode to properly link the static library.\n",
        "Line" : 947,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# TODO(compnerd) switch to the generator expression when cmake is upgraded\n\n# to a version which supports it.\n\n# target_sources(${target}\n\n#                PRIVATE\n\n#                  $<TARGET_OBJECTS:swiftImageRegistrationObject${SWIFT_SDK_${SWIFTLIB_SINGLE_SDK}_OBJECT_FORMAT}-${SWIFT_SDK_${SWIFTLIB_SINGLE_SDK}_LIB_SUBDIR}-${SWIFTLIB_SINGLE_ARCHITECTURE}>)\n",
        "Line" : 967,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Each dll has an associated .lib (import library); since we may be\n\n# building on a non-DLL platform (not windows), create an imported target\n\n# for the library which created implicitly by the dll.\n",
        "Line" : 997,
        "CharPositionInLine" : 6
      },
      "50" : {
        "Text" : "# Install runtime libraries to lib/swift instead of lib. This works around\n\n# the fact that -isysroot prevents linking to libraries in the system\n\n# /usr/lib if Swift is installed in /usr.\n",
        "Line" : 1024,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# Always use @rpath for XCTest\n",
        "Line" : 1052,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Configure the static library target.\n\n# Set compile and link flags for the non-static target.\n\n# Do these LAST.\n",
        "Line" : 1073,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# We have already compiled Swift sources.  Link everything into a static\n\n# library.\n",
        "Line" : 1080,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Library name (without the variant information)\n",
        "Line" : 1107,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "# Don't build standard libraries by default.  We will enable building\n\n# standard libraries that the user requested; the rest can be built on-demand.\n",
        "Line" : 1115,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Handle linking and dependencies.\n",
        "Line" : 1123,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# HACK: On some systems or build directory setups, CMake will not find static\n\n# archives of Clang libraries in the Clang build directory, and it will pass\n\n# them as '-lclangFoo'.  Some other logic in CMake would reorder libraries\n\n# specified with this syntax, which breaks linking.\n",
        "Line" : 1133,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Don't add the icucore target.\n",
        "Line" : 1160,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# FIXME: should this be target_link_libraries?\n",
        "Line" : 1173,
        "CharPositionInLine" : 4
      },
      "60" : {
        "Text" : "# Link against system frameworks.\n",
        "Line" : 1179,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Call llvm_config() only for libraries that are part of the compiler.\n",
        "Line" : 1192,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# Collect compile and link flags for the static and non-static targets.\n\n# Don't set PROPERTY COMPILE_FLAGS or LINK_FLAGS directly.\n",
        "Line" : 1196,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# Add variant-specific flags.\n",
        "Line" : 1207,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# We don't ever want to link against the ABI-breakage checking symbols\n\n# in the standard library, runtime, or overlays because they only rely\n\n# on the header parts of LLVM's ADT.\n",
        "Line" : 1237,
        "CharPositionInLine" : 4
      },
      "65" : {
        "Text" : "# Configure plist creation for OS X.\n",
        "Line" : 1266,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# If Application Extensions are enabled, pass the linker flag marking\n\n# the dylib as safe.\n",
        "Line" : 1286,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "# Convert variables to space-separated strings.\n",
        "Line" : 1298,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Set compilation and link flags.\n",
        "Line" : 1302,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# Adjust the linked libraries for windows targets.  On Windows, the link is\n\n# performed against the import library, and the runtime uses the dll.  Not\n\n# doing so will result in incorrect symbol resolution and linkage.  We created\n\n# import library targets when the library was added.  Use that to adjust the\n\n# link libraries.\n",
        "Line" : 1310,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# Ensure that the library is a target.  If an absolute path was given,\n\n# then we do not have an import library associated with it.  This occurs\n\n# primarily with ICU (which will be an import library).  Import\n\n# libraries are only associated with shared libraries, so add an\n\n# additional check for that as well.\n",
        "Line" : 1319,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "# FIXME: The fallback paths here are going to be dynamic libraries.\n",
        "Line" : 1360,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# Do not add code here.\n",
        "Line" : 1370,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# Add a new Swift host library.\n\n#\n\n# Usage:\n\n#   add_swift_host_library(name\n\n#     [SHARED]\n\n#     [STATIC]\n\n#     [LLVM_COMPONENT_DEPENDS comp1 ...]\n\n#     [FILE_DEPENDS target1 ...]\n\n#     source1 [source2 source3 ...])\n\n#\n\n# name\n\n#   Name of the library (e.g., swiftParse).\n\n#\n\n# SHARED\n\n#   Build a shared library.\n\n#\n\n# STATIC\n\n#   Build a static library.\n\n#\n\n# LLVM_COMPONENT_DEPENDS\n\n#   LLVM components this library depends on.\n\n#\n\n# FILE_DEPENDS\n\n#   Additional files this library depends on.\n\n#\n\n# source1 ...\n\n#   Sources to add into this library.\n",
        "Line" : 1373,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Add a new Swift target library.\n\n#\n\n# NOTE: This has not had the swift host code debrided from it yet. That will be\n\n# in a forthcoming commit.\n\n#\n\n# Usage:\n\n#   add_swift_target_library(name\n\n#     [SHARED]\n\n#     [STATIC]\n\n#     [DEPENDS dep1 ...]\n\n#     [LINK_LIBRARIES dep1 ...]\n\n#     [INTERFACE_LINK_LIBRARIES dep1 ...]\n\n#     [SWIFT_MODULE_DEPENDS dep1 ...]\n\n#     [FRAMEWORK_DEPENDS dep1 ...]\n\n#     [FRAMEWORK_DEPENDS_WEAK dep1 ...]\n\n#     [LLVM_COMPONENT_DEPENDS comp1 ...]\n\n#     [FILE_DEPENDS target1 ...]\n\n#     [TARGET_SDKS sdk1...]\n\n#     [C_COMPILE_FLAGS flag1...]\n\n#     [SWIFT_COMPILE_FLAGS flag1...]\n\n#     [LINK_FLAGS flag1...]\n\n#     [DONT_EMBED_BITCODE]\n\n#     [INSTALL]\n\n#     [IS_STDLIB]\n\n#     [IS_STDLIB_CORE]\n\n#     [TARGET_LIBRARY]\n\n#     INSTALL_IN_COMPONENT comp\n\n#     DEPLOYMENT_VERSION_OSX version\n\n#     DEPLOYMENT_VERSION_IOS version\n\n#     DEPLOYMENT_VERSION_TVOS version\n\n#     DEPLOYMENT_VERSION_WATCHOS version\n\n#     source1 [source2 source3 ...])\n\n#\n\n# name\n\n#   Name of the library (e.g., swiftParse).\n\n#\n\n# SHARED\n\n#   Build a shared library.\n\n#\n\n# STATIC\n\n#   Build a static library.\n\n#\n\n# DEPENDS\n\n#   Targets that this library depends on.\n\n#\n\n# LINK_LIBRARIES\n\n#   Libraries this library depends on.\n\n#\n\n# SWIFT_MODULE_DEPENDS\n\n#   Swift modules this library depends on.\n\n#\n\n# SWIFT_MODULE_DEPENDS_OSX\n\n#   Swift modules this library depends on when built for OS X.\n\n#\n\n# SWIFT_MODULE_DEPENDS_IOS\n\n#   Swift modules this library depends on when built for iOS.\n\n#\n\n# SWIFT_MODULE_DEPENDS_TVOS\n\n#   Swift modules this library depends on when built for tvOS.\n\n#\n\n# SWIFT_MODULE_DEPENDS_WATCHOS\n\n#   Swift modules this library depends on when built for watchOS.\n\n#\n\n# SWIFT_MODULE_DEPENDS_FREEBSD\n\n#   Swift modules this library depends on when built for FreeBSD.\n\n#\n\n# SWIFT_MODULE_DEPENDS_LINUX\n\n#   Swift modules this library depends on when built for Linux.\n\n#\n\n# SWIFT_MODULE_DEPENDS_CYGWIN\n\n#   Swift modules this library depends on when built for Cygwin.\n\n#\n\n# SWIFT_MODULE_DEPENDS_HAIKU\n\n#   Swift modules this library depends on when built for Haiku.\n\n#\n\n# FRAMEWORK_DEPENDS\n\n#   System frameworks this library depends on.\n\n#\n\n# FRAMEWORK_DEPENDS_WEAK\n\n#   System frameworks this library depends on that should be weak-linked\n\n#\n\n# LLVM_COMPONENT_DEPENDS\n\n#   LLVM components this library depends on.\n\n#\n\n# FILE_DEPENDS\n\n#   Additional files this library depends on.\n\n#\n\n# TARGET_SDKS\n\n#   The set of SDKs in which this library is included. If empty, the library\n\n#   is included in all SDKs.\n\n#\n\n# C_COMPILE_FLAGS\n\n#   Extra compiler flags (C, C++, ObjC).\n\n#\n\n# SWIFT_COMPILE_FLAGS\n\n#   Extra compiler flags (Swift).\n\n#\n\n# LINK_FLAGS\n\n#   Extra linker flags.\n\n#\n\n# DONT_EMBED_BITCODE\n\n#   Don't embed LLVM bitcode in this target, even if it is enabled globally.\n\n#\n\n# IS_STDLIB\n\n#   Treat the library as a part of the Swift standard library.\n\n#   IS_STDLIB implies TARGET_LIBRARY.\n\n#\n\n# IS_STDLIB_CORE\n\n#   Compile as the Swift standard library core.\n\n#\n\n# IS_SDK_OVERLAY\n\n#   Treat the library as a part of the Swift SDK overlay.\n\n#   IS_SDK_OVERLAY implies TARGET_LIBRARY and IS_STDLIB.\n\n#\n\n# TARGET_LIBRARY\n\n#   Build library for the target SDKs.\n\n#\n\n# INSTALL_IN_COMPONENT comp\n\n#   The Swift installation component that this library belongs to.\n\n#\n\n# DEPLOYMENT_VERSION_OSX\n\n#   The minimum deployment version to build for if this is an OSX library.\n\n#\n\n# DEPLOYMENT_VERSION_IOS\n\n#   The minimum deployment version to build for if this is an iOS library.\n\n#\n\n# DEPLOYMENT_VERSION_TVOS\n\n#   The minimum deployment version to build for if this is an TVOS library.\n\n#\n\n# DEPLOYMENT_VERSION_WATCHOS\n\n#   The minimum deployment version to build for if this is an WATCHOS library.\n\n#\n\n# source1 ...\n\n#   Sources to add into this library.\n",
        "Line" : 1470,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Infer arguments.\n",
        "Line" : 1663,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# Install to sdk-overlay by default, but don't hardcode it\n",
        "Line" : 1670,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# Standard library is always a target library.\n",
        "Line" : 1676,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# If target SDKs are not specified, build for all known SDKs.\n",
        "Line" : 1686,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# All Swift code depends on the standard library, except for the standard\n\n# library itself.\n",
        "Line" : 1693,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# swiftSwiftOnoneSupport does not depend on itself, obviously.\n",
        "Line" : 1698,
        "CharPositionInLine" : 4
      },
      "81" : {
        "Text" : "# All Swift code depends on the SwiftOnoneSupport in non-optimized mode,\n\n# except for the standard library itself.\n",
        "Line" : 1700,
        "CharPositionInLine" : 6
      },
      "82" : {
        "Text" : "# In the standard library and overlays, warn about implicit overrides\n\n# as a reminder to consider when inherited protocols need different\n\n# behavior for their requirements.\n",
        "Line" : 1727,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# If we are building this library for targets, loop through the various\n\n# SDKs building the variants of this library.\n",
        "Line" : 1738,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# SWIFT_SDK_${sdk}_ARCHITECTURES is empty, so just continue\n",
        "Line" : 1745,
        "CharPositionInLine" : 6
      },
      "85" : {
        "Text" : "# Collect architecture agnostic SDK module dependencies\n",
        "Line" : 1751,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "# Collect architecture agnostic SDK framework dependencies\n",
        "Line" : 1782,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# Collect architecutre agnostic compiler flags\n",
        "Line" : 1793,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# FIXME(SR2005) static and shared are not mutually exclusive; however\n\n# since we do a single build of the sources, this doesn't work for\n\n# building both simultaneously.  Effectively, only shared builds are\n\n# supported on windows currently.\n",
        "Line" : 1808,
        "CharPositionInLine" : 6
      },
      "89" : {
        "Text" : "# Collect architecture agnostic SDK linker flags\n",
        "Line" : 1823,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "# message(\"DISABLING AUTOLINK FOR swiftMediaPlayer\")\n",
        "Line" : 1826,
        "CharPositionInLine" : 6
      },
      "91" : {
        "Text" : "# We unconditionally removed \"-z,defs\" from CMAKE_SHARED_LINKER_FLAGS in\n\n# swift_common_standalone_build_config_llvm within\n\n# SwiftSharedCMakeConfig.cmake, where it was added by a call to\n\n# HandleLLVMOptions.\n\n#\n\n# Rather than applying it to all targets and libraries, we here add it\n\n# back to supported targets and libraries only.  This is needed for ELF\n\n# targets only; however, RemoteMirror needs to build with undefined\n\n# symbols.\n",
        "Line" : 1830,
        "CharPositionInLine" : 4
      },
      "92" : {
        "Text" : "# For each architecture supported by this SDK\n",
        "Line" : 1844,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "# Configure variables for this subdirectory.\n",
        "Line" : 1846,
        "CharPositionInLine" : 6
      },
      "94" : {
        "Text" : "# Map dependencies over to the appropriate variants.\n",
        "Line" : 1852,
        "CharPositionInLine" : 6
      },
      "95" : {
        "Text" : "# Swift compiles depend on swift modules, while links depend on\n\n# linked libraries.  Find targets for both of these here.\n",
        "Line" : 1862,
        "CharPositionInLine" : 6
      },
      "96" : {
        "Text" : "# Add PrivateFrameworks, rdar://28466433\n",
        "Line" : 1886,
        "CharPositionInLine" : 6
      },
      "97" : {
        "Text" : "# Add this library variant.\n",
        "Line" : 1894,
        "CharPositionInLine" : 6
      },
      "98" : {
        "Text" : "# Add dependencies on the (not-yet-created) custom lipo target.\n",
        "Line" : 1933,
        "CharPositionInLine" : 8
      },
      "99" : {
        "Text" : "# Add dependencies on the (not-yet-created) custom lipo target.\n",
        "Line" : 1942,
        "CharPositionInLine" : 10
      },
      "100" : {
        "Text" : "# Note this thin library.\n",
        "Line" : 1951,
        "CharPositionInLine" : 8
      },
      "101" : {
        "Text" : "# Determine the name of the universal library.\n",
        "Line" : 1957,
        "CharPositionInLine" : 6
      },
      "102" : {
        "Text" : "# Cache universal libraries for dependency purposes\n",
        "Line" : 1990,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# Determine the subdirectory where this library will be installed.\n",
        "Line" : 1996,
        "CharPositionInLine" : 6
      },
      "104" : {
        "Text" : "# Allow installation of stdlib without building all variants on Darwin.\n",
        "Line" : 2016,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "# If we built static variants of the library, create a lipo target for\n\n# them.\n",
        "Line" : 2053,
        "CharPositionInLine" : 6
      },
      "106" : {
        "Text" : "# Add Swift standard library targets as dependencies to the top-level\n\n# convenience target.\n",
        "Line" : 2083,
        "CharPositionInLine" : 6
      },
      "107" : {
        "Text" : "# Add an executable compiled for a given variant.\n\n#\n\n# Don't use directly, use add_swift_executable and add_swift_target_executable\n\n# instead.\n\n#\n\n# See add_swift_executable for detailed documentation.\n\n#\n\n# Additional parameters:\n\n#   [SDK sdk]\n\n#     SDK to build for.\n\n#\n\n#   [ARCHITECTURE architecture]\n\n#     Architecture to build for.\n",
        "Line" : 2107,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# Parse the arguments we were given.\n",
        "Line" : 2121,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Check arguments.\n",
        "Line" : 2134,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Determine compiler flags.\n",
        "Line" : 2138,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "# Prepare linker search directories.\n",
        "Line" : 2142,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Add variant-specific flags.\n",
        "Line" : 2146,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "# Convert variables to space-separated strings.\n",
        "Line" : 2208,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# Create the executable rule.\n",
        "Line" : 2257,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# This declares a swift host tool that links with libfuzzer.\n",
        "Line" : 2276,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# First create our target. We do not actually parse the argument since we do\n\n# not care about the arguments, we just pass them all through to\n\n# add_swift_host_tool.\n",
        "Line" : 2278,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Then make sure that we pass the -fsanitize=fuzzer flag both on the cflags\n\n# and cxx flags line.\n",
        "Line" : 2283,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 118
    },
    "cmake/modules/AddSwiftTableGen.cmake" : {
      "ObjectId" : "4b7e3e0a8d3dac8dc5a93afd096778ce1f3bf444",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This needs to be a macro since tablegen (which is a function) needs to set\n\n# variables in its parent scope.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This needs to be a macro since add_public_tablegen_target (which is a\n\n# function) needs to set variables in its parent scope.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/AddSwiftUnittests.cmake" : {
      "ObjectId" : "52dcbabab573d03f0ff3e38cfd7f56d7324c8c01",
      "LastModified" : "2018-05-25T01:15:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# *NOTE* Even though \"add_unittest\" does not have llvm in its name, it is a\n\n# function defined by AddLLVM.cmake.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# TODO: _add_variant_c_compile_link_flags and these tests should share some\n\n# sort of logic.\n\n#\n\n# *NOTE* The unittests are never built for the target, so we always enable LTO\n\n# *if we are asked to.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Replace target references with full paths, so that we use LLVM's\n\n# build configuration rather than Swift's.\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Strangely, macOS finds lld and then can't find it when using -fuse-ld=\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "905f846f368485e34d053e83758be3d3c40c9092",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate build-tree exports list only\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/ClangClCompileRules.cmake" : {
      "ObjectId" : "1012478926f6cf1dd854ec7c31dee95abb17579a",
      "LastModified" : "2018-09-12T21:12:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clang-cl interprets paths starting with /U as macro undefines, so we need to\n\n# put a -- before the input file path to force it to be treated as a path.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE(compnerd) incremental linking is known to cause corruption in the\n\n# protocol conformance tables.  Avoid using incremental links with Visual\n\n# Studio.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/DarwinSDKs.cmake" : {
      "ObjectId" : "387ff28f6aaa7993daee1bf98a246bfe6d379e77",
      "LastModified" : "2018-09-12T21:12:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Compatible cross-compile SDKS for Darwin OSes: IOS, IOS_SIMULATOR, TVOS,\n\n#   TVOS_SIMULATOR, WATCHOS, WATCHOS_SIMULATOR (archs hardcoded below).\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindICU.cmake" : {
      "ObjectId" : "1b5c53a22b5b130bd8e066ef04a05c0fab31cb71",
      "LastModified" : "2018-09-12T21:12:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find libicu's libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PkgConfig doesn't exist on this system, so we manually provide hints via CMake.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindUUID.cmake" : {
      "ObjectId" : "e3a4b7a901cb05543469e09944da81b842ab5692",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find libuuid\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On OS X we don't need the library\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/StandaloneOverlay.cmake" : {
      "ObjectId" : "62245473347ed95f0697b6134a665193bfce4463",
      "LastModified" : "2019-03-08T22:00:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE_SOURCE_DIR is the directory that cmake got initially invoked on.\n\n# CMAKE_CURRENT_SOURCE_DIR is the current directory. If these are equal, it's\n\n# a top-level build of the CMAKE_SOURCE_DIR. Otherwise, define a guard variable\n\n# and return.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only happens if it's called from a top-level cmake invocation.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These variables should be passed as -D variables to cmake.\n\n# e.g. cmake -G Ninja -DSWIFT_HOST_VARIANT_SDK=OSX ..\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Without this line, installing components is broken. This needs refactoring.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Some overlays include the runtime's headers,\n\n# and some of those headers are generated at build time.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ARCH is set somewhere later.\n\n#precondition(SWIFT_HOST_VARIANT_ARCH MESSAGE \"No arch for host tools\")\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/SwiftAddCustomCommandTarget.cmake" : {
      "ObjectId" : "9360e2d3f7fcc5f521002c4812bdf69e38aa0bff",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Populate the variable 'args' in the parent scope with a keyword\n\n# argument list.  We read the variables options, ${k}_keyword, and\n\n# ACCT_${k} from the parent scope, for each ${k} in the list of\n\n# keyword names other than COMMAND accepted by\n\n# add_custom_command_target.\n\n#\n\n#   ${k}_keyword must expand to ${k} if ${k} was passed to\n\n#   add_custom_command_target, and be empty otherwise.\n\n#\n\n#   ACCT_${k} must expand to the list of arguments to\n\n#   add_custom_command_target marked by ${k}, and be empty otherwise.\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add a custom command/target pair.  Use this instead of\n\n# add_custom_command because it provides proper dependency tracking\n\n# when used with parallel builds and the 'Unix Makefiles' generator.\n\n# See https://www.cmake.org/Bug/view.php?id=10082\n\n#\n\n# The CMake documentation for add_custom_command quoth,\n\n#\n\n#    \"Do not list the output in more than one independent target that\n\n#     may build in parallel or the two instances of the rule may\n\n#     conflict (instead use add_custom_target to drive the command and\n\n#     make the other targets depend on that one).\"\n\n#\n\n# This function implements the suggested pattern.\n\n#\n\n# add_custom_command_target(\n\n#   dependency_out_var_name\n\n#\n\n#   COMMAND command1 [ARGS] [args1...]\n\n#   [COMMAND command2 [ARGS] [args2...] ...]\n\n#\n\n#   OUTPUT output1 [output2 ...]\n\n#   [MAIN_DEPENDENCY depend]\n\n#   [DEPENDS [depends...]]\n\n#   [IMPLICIT_DEPENDS <lang1> depend1\n\n#   [<lang2> depend2] ...]\n\n#   [WORKING_DIRECTORY dir]\n\n#   [COMMENT comment] [VERBATIM] [APPEND]\n\n#   [ALL]\n\n#   [SOURCES src1 [src2...]])\n\n#\n\n# dependency_out_var_name is the name of a variable, to be set in the\n\n# parent scope with the name of a target that all targets using the\n\n# OUTPUT should depend on.  For example:\n\n#\n\n#   add_custom_command_target(\n\n#       TheDependency\n\n#       COMMAND echo \"int main() {}\" \">\"  z.c\n\n#       OUTPUT z.c\n\n#       VERBATIM\n\n#       DEPENDS z.c.gyb)\n\n#\n\n#   add_executable(exe1 z.c)\n\n#   add_dependencies(exe1 ${TheDependency})\n\n#   add_executable(exe2 z.c)\n\n#   add_dependencies(exe2 ${TheDependency})\n\n#\n\n# **Note1**: all COMMAND arguments must immediately follow\n\n# dependency_out_var_name or this function will misbehave.\n\n#\n\n# **Note2**: any subdirectories that define targets dependent on\n\n# OUTPUT ${o} should invoke:\n\n#\n\n#   set_source_files_properties(${o} PROPERTIES GENERATED true)\n\n#\n\n# All arguments other than ALL, SOURCES, and dependency_out_var_name\n\n# are forwarded to add_custom_command; arguments ALL, SOURCES, and\n\n# WORKING_DIRECTORY are forwarded to add_custom_target.  See the\n\n# documentation of those functions for a description of all arguments.\n\n#\n\n# How This Function Works\n\n#\n\n# CMake offers one way to add new build rules: add_custom_command.\n\n# Most people, however, overlook its actual semantics.\n\n# add_custom_command does *not* create a target.  The CMake\n\n# documentation declareth,\n\n#\n\n#   \"A target created in the same directory (CMakeLists.txt file) that\n\n#    specifies any output of the custom command as a source file is\n\n#    given a rule to generate the file using the command at build\n\n#    time.\"\n\n#\n\n# Therefore, when two targets built in parallel depend on an output of\n\n# the same custom command, they may race to rebuild that output.\n\n# Hilarity ensues.  You might not notice this effect depending on the\n\n# generator you use, but it happens with 'Unix Makefiles'.\n\n#\n\n# By injecting a target into the dependency graph between the custom\n\n# command output and any targets that depend on that output, we force\n\n# the output to be built before starting on any of its dependent\n\n# targets.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parse the arguments.  We don't look for COMMAND arguments because\n\n# they don't follow the pattern supported by cmake_parse_arguments.\n\n# As a result, they end up in ACCT_UNPARSED_ARGUMENTS and are\n\n# forwarded verbatim.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# prefix\n",
        "Line" : 118,
        "CharPositionInLine" : 11
      },
      "4" : {
        "Text" : "# CMake doesn't allow '/' characters in filenames, so replace them with '-'\n",
        "Line" : 123,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# For each keyword argument k that was passed to this function, set\n\n# ${k}_keyword to ${k}.  That will allow us to use the incantation\n\n# '${${k}_keyword} ${ACCT_${k}}' to forward the arguments on.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# \"Return\" the name of the custom target\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/modules/SwiftAndroidSupport.cmake" : {
      "ObjectId" : "c6dcc783c68091927edc1cc065d0bbb8c435501d",
      "LastModified" : "2018-10-10T01:30:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/SwiftCheckCXXNativeRegex.cmake" : {
      "ObjectId" : "2e320bd8f9fb9cefe25db677d618ce4afcf2aa2f",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Apple operating systems use libc++, which has a working std::regex.\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Can't run C source when cross-compiling; assume false until we have a static check.\n",
        "Line" : 7,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# libstdc++ 4.8 has an incomplete std::regex implementation, and crashes\n\n# on many regexes.\n\n# libstdc++ 4.9 works.\n",
        "Line" : 10,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "cmake/modules/SwiftComponents.cmake" : {
      "ObjectId" : "cae4d3279706a0ea8a8040e4bea831c6cbba531b",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Swift Components\n\n# ----------------\n\n#\n\n# This file contains the cmake code for initialization and manipulation of\n\n# \"Swift Components\". A \"Swift Component\" is a disjoint set of source files,\n\n# binary products, and source products that are inputs or products of Swift's\n\n# cmake build system. At a high level each component can be viewed approximately\n\n# as an individual package in a Debian-style Linux package (i.e. a .deb file).\n\n#\n\n# *NOTE* In the following for brevity, a \"Swift Component\" will just be called a\n\n# component.\n\n#\n\n# For every cmake invocation, the set of components are split into the following\n\n# sets: defined, include, build, and install components. These sets form a\n\n# lattice as follows:\n\n#\n\n#    install => build => include => defined\n\n#\n\n# We describe the characteristics of each set below:\n\n#\n\n# 1. A \"defined\" component is a component that is known to the build system. It\n\n# has defined source inputs and binary/source outputs. But the build system is\n\n# not required to generate targets, run any targets associated with the package\n\n# while building, or install any binary/source outputs associated with the\n\n# component.\n\n#\n\n# 2. A \"include\" component is a \"defined\" component that cmake will generate\n\n# targets for. This means that it will not be built or installed by default\n\n# (i.e. it is not apart of the \"all\" target), but one can from the relevant\n\n# cmake build command invoke the generated targets directly and any dependencies\n\n# on the component from other packages will cause the package to be built and or\n\n# installed.\n\n#\n\n# 3. A \"build\" component is a \"include\" component that cmake will add to the\n\n# \"all\" target. This means that cmake will add this component to the \"all\"\n\n# target causing it to be built by default when one invokes a build tool. On the\n\n# other hand, the component is not guaranteed to be installed by default.\n\n#\n\n# 4. A \"install\" component is a \"build\" component that will have targets\n\n# generated by default, will be built by default, and will be installed by\n\n# default.\n\n#\n\n# Set of Defined Components\n\n# -------------------------\n\n#\n\n# The set of \"defined\" swift components are as follows:\n\n#\n\n# * autolink-driver -- the Swift driver support tools\n\n# * compiler -- the Swift compiler and (on supported platforms) the REPL.\n\n# * clang-builtin-headers -- install a copy of Clang builtin headers under\n\n#   'lib/swift/clang'.  This is useful when Swift compiler is installed in\n\n#   isolation.\n\n# * clang-resource-dir-symlink -- install a symlink to the Clang resource\n\n#   directory (which contains builtin headers) under 'lib/swift/clang'.  This is\n\n#   useful when Clang and Swift are installed side-by-side.\n\n# * stdlib -- the Swift standard library.\n\n# * stdlib-experimental -- the Swift standard library module for experimental\n\n#   APIs.\n\n# * sdk-overlay -- the Swift SDK overlay.\n\n# * editor-integration -- scripts for Swift integration in IDEs other than\n\n#   Xcode;\n\n# * tools -- tools (other than the compiler) useful for developers writing\n\n#   Swift code.\n\n# * toolchain-tools -- a subset of tools that we will install to the OSS toolchain.\n\n# * testsuite-tools -- extra tools required to run the Swift testsuite.\n\n# * toolchain-dev-tools -- install development tools useful in a shared toolchain\n\n# * dev -- headers and libraries required to use Swift compiler as a library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The default install components include all of the defined components, except\n\n# for the following exceptions.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# 'dev' takes up a lot of disk space and isn't part of a normal toolchain.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# These clang header options conflict with 'clang-builtin-headers'.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This conflicts with LLVM itself when doing unified builds.\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The sourcekit install variants are currently mutually exclusive.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the SWIFT_INSTALL_COMPONENTS variable to the default value if it is not passed in via -D\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Sets the is_installing variable.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# swift_install_in_component(<COMPONENT NAME>\n\n#   <same parameters as install()>)\n\n#\n\n# Executes the specified installation actions if the named component is\n\n# requested to be installed.\n\n#\n\n# This function accepts the same parameters as install().\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# swift_install_in_either_component(<COMPONENT1 NAME> <COMPONENT2 NAME>\n\n#   <same parameters as install()>)\n\n#\n\n# Executes the specified installation actions if either one of the named\n\n# components is requested to be installed.\n\n#\n\n# This function accepts the same parameters as install().\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# prefix\n",
        "Line" : 168,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# options\n",
        "Line" : 169,
        "CharPositionInLine" : 9
      },
      "12" : {
        "Text" : "# single-value args\n",
        "Line" : 170,
        "CharPositionInLine" : 37
      },
      "13" : {
        "Text" : "# multi-value args\n",
        "Line" : 171,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 14
    },
    "cmake/modules/SwiftConfigureSDK.cmake" : {
      "ObjectId" : "f5d77456dd43461154fcd91d16e7751d7355f698",
      "LastModified" : "2019-02-14T01:56:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Variable that tracks the set of configured SDKs.\n\n#\n\n# Each element in this list is an SDK for which the various\n\n# SWIFT_SDK_${name}_* variables are defined. Swift libraries will be\n\n# built for each variant.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Report the given SDK to the user.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure an SDK\n\n#\n\n# Usage:\n\n#   configure_sdk_darwin(\n\n#     prefix             # Prefix to use for SDK variables (e.g., OSX)\n\n#     name               # Display name for this SDK\n\n#     deployment_version # Deployment version\n\n#     xcrun_name         # SDK name to use with xcrun\n\n#     version_min_name   # The name used in the -mOS-version-min flag\n\n#     triple_name        # The name used in Swift's -triple\n\n#     architectures      # A list of architectures this SDK supports\n\n#   )\n\n#\n\n# Sadly there are three OS naming conventions.\n\n# xcrun SDK name:   macosx iphoneos iphonesimulator (+ version)\n\n# -mOS-version-min: macosx ios      ios-simulator\n\n# swift -triple:    macosx ios      ios\n\n#\n\n# This macro attempts to configure a given SDK. When successful, it\n\n# defines a number of variables:\n\n#\n\n#   SWIFT_SDK_${prefix}_NAME                Display name for the SDK\n\n#   SWIFT_SDK_${prefix}_VERSION             SDK version number (e.g., 10.9, 7.0)\n\n#   SWIFT_SDK_${prefix}_BUILD_NUMBER        SDK build number (e.g., 14A389a)\n\n#   SWIFT_SDK_${prefix}_DEPLOYMENT_VERSION  Deployment version (e.g., 10.9, 7.0)\n\n#   SWIFT_SDK_${prefix}_LIB_SUBDIR          Library subdir for this SDK\n\n#   SWIFT_SDK_${prefix}_VERSION_MIN_NAME    Version min name for this SDK\n\n#   SWIFT_SDK_${prefix}_TRIPLE_NAME         Triple name for this SDK\n\n#   SWIFT_SDK_${prefix}_ARCHITECTURES       Architectures (as a list)\n\n#   SWIFT_SDK_${prefix}_ARCH_${ARCH}_TRIPLE Triple name\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Note: this has to be implemented as a macro because it sets global\n\n# variables.\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Find the SDK\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Determine the SDK version we found.\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set other variables.\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# On Darwin, all archs share the same SDK path.\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add this to the list of known SDKs.\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Note: this has to be implemented as a macro because it sets global\n\n# variables.\n",
        "Line" : 162,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Get the prebuilt suffix to create the correct toolchain path when using the NDK\n",
        "Line" : 193,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Add this to the list of known SDKs.\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Note: this has to be implemented as a macro because it sets global\n\n# variables.\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# NOTE: set the path to / to avoid a spurious `--sysroot` from being passed\n\n# to the driver -- rely on the `INCLUDE` AND `LIB` environment variables\n\n# instead.\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# NOTE(compnerd) workaround incorrectly extensioned import libraries from\n\n# the Windows SDK on case sensitive file systems.\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Add this to the list of known SDKs.\n",
        "Line" : 299,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Configure a variant of a certain SDK\n\n#\n\n# In addition to the SDK and architecture, a variant determines build settings.\n\n#\n\n# FIXME: this is not wired up with anything yet.\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/modules/SwiftExternalBenchmarkBuild.cmake" : {
      "ObjectId" : "1ddf69b8cd65a7b3c72acede802f1d6baf40e6c1",
      "LastModified" : "2019-02-24T00:14:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is the name of the target on the parent cmake side that is associated\n\n# with an external project target.\n\n#\n\n# If LLVMExternalProjectUtils refactors its external target code, so we can\n\n# easily add individual forwarded targets with different dependencies, this can\n\n# be removed.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add dependencies from all of our stdlib dependencies to\n\n# swift-bench-configure. This will ensure the stdlib is ready to be poked at\n\n# in the configure script if we ever want to do so.\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/modules/SwiftHandleGybSources.cmake" : {
      "ObjectId" : "1d37e4ae80958d17560caf04a99d7063b37e2a74",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a target to process single gyb source with the 'gyb' tool.\n\n#\n\n# handle_gyb_source_single(\n\n#     dependency_out_var_name\n\n#     SOURCE src_gyb\n\n#     OUTPUT output\n\n#     [FLAGS [flags ...]])\n\n#     [DEPENDS [depends ...]]\n\n#     [COMMENT comment])\n\n#\n\n# dependency_out_var_name\n\n#   The name of a variable, to be set in the parent scope to be the target\n\n#   target that invoke gyb.\n\n#\n\n# src_gyb\n\n#   .gyb suffixed source file\n\n#\n\n# output\n\n#   Output filename to be generated\n\n#\n\n# flags ...\n\n#    gyb flags in addition to ${SWIFT_GYB_FLAGS}.\n\n#\n\n# depends ...\n\n#    gyb flags in addition to 'src_gyb' and sources of gyb itself.\n\n#\n\n# comment\n\n#    Additional comment.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix\n",
        "Line" : 37,
        "CharPositionInLine" : 17
      },
      "2" : {
        "Text" : "# Handle foo.gyb in pattern ``gyb.expand('foo.gyb'`` as a dependency\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Create a target to process .gyb files with the 'gyb' tool.\n\n#\n\n# handle_gyb_sources(\n\n#     dependency_out_var_name\n\n#     sources_var_name\n\n#     arch)\n\n#\n\n# Replace, in ${sources_var_name}, the given .gyb-suffixed sources with\n\n# their un-suffixed intermediate files, which will be generated by processing\n\n# the .gyb files with gyb.\n\n#\n\n# dependency_out_var_name\n\n#   The name of a variable, to be set in the parent scope to the list of\n\n#   targets that invoke gyb.  Every target that depends on the generated\n\n#   sources should depend on ${dependency_out_var_name} targets.\n\n#\n\n# arch\n\n#   The architecture that the files will be compiled for.  If this is\n\n#   false, the files are architecture-independent and will be emitted\n\n#   into ${CMAKE_CURRENT_BINARY_DIR} instead of an architecture-specific\n\n#   destination; this is useful for generated include files.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On Windows (using Visual Studio), the generated project files assume that the\n\n# generated GYB files will be in the source, not binary directory.\n\n# We can work around this by modifying the root directory when generating VS projects.\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# get_filename_component(src_sans_gyb ${src} NAME_WLE)\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/modules/SwiftList.cmake" : {
      "ObjectId" : "68708e242f35d9ca74a38c81941b87cd14ad5d9a",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/SwiftManpage.cmake" : {
      "ObjectId" : "1b0978cc041e85ad24ff87ae198d1ea38c39dc1a",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create a target to create a man page from a pod file.\n\n#\n\n# manpage(\n\n#     SOURCE foobar.pod\n\n#     PAGE_HEADER \"text\"\n\n#     MAN_FILE_BASENAME foobar\n\n#     MAN_SECTION N\n\n#     INSTALL_IN_COMPONENT comp\n\n#     )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# prefix\n\n# options\n",
        "Line" : 16,
        "CharPositionInLine" : 9
      },
      "2" : {
        "Text" : "# single-value args\n",
        "Line" : 18,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : "# multi-value args\n",
        "Line" : 19,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 4
    },
    "cmake/modules/SwiftSetIfArchBitness.cmake" : {
      "ObjectId" : "5212cf3ccb85444506cd7a9f8f40ef9c8f0c0044",
      "LastModified" : "2017-07-25T21:14:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prefix\n",
        "Line" : 3,
        "CharPositionInLine" : 10
      },
      "1" : {
        "Text" : "# options\n",
        "Line" : 4,
        "CharPositionInLine" : 9
      },
      "2" : {
        "Text" : "# single-value args\n",
        "Line" : 5,
        "CharPositionInLine" : 37
      },
      "3" : {
        "Text" : "# multi-value args\n",
        "Line" : 6,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 4
    },
    "cmake/modules/SwiftSharedCMakeConfig.cmake" : {
      "ObjectId" : "790d6cb31dbc49643d057807768a5f1b36d5a995",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If we already have a cached value for LLVM_ENABLE_ASSERTIONS, save the value.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Then we import LLVMConfig. This is going to override whatever cached value\n\n# we have for LLVM_ENABLE_ASSERTIONS.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# If we did not have a cached value for LLVM_ENABLE_ASSERTIONS, set\n\n# LLVM_ENABLE_ASSERTIONS_saved to be the ENABLE_ASSERTIONS value from LLVM so\n\n# we follow LLVMConfig.cmake's value by default if nothing is provided.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Then set LLVM_ENABLE_ASSERTIONS with a default value of\n\n# LLVM_ENABLE_ASSERTIONS_saved.\n\n#\n\n# The effect of this is that if LLVM_ENABLE_ASSERTION did not have a cached\n\n# value, then LLVM_ENABLE_ASSERTIONS_saved is set to LLVM's value, so we get a\n\n# default value from LLVM.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This could be computed using ${CMAKE_CFG_INTDIR} if we want to link Swift\n\n# against a matching LLVM build configuration.  However, we usually want to be\n\n# flexible and allow linking a debug Swift against optimized LLVM.\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# NOTE: LLVM NATIVE build is always built Release, as is specified in\n\n# CrossCompile.cmake\n",
        "Line" : 82,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# This imports TableGen from LLVM.\n",
        "Line" : 97,
        "CharPositionInLine" : 28
      },
      "7" : {
        "Text" : "# HACK: Not all targets support -z,defs as a linker flag. \n\n#\n\n# Normally, LLVM would only add it as an option for known ELF targets;\n\n# however, due to the custom scheme Swift uses for cross-compilation, the \n\n# CMAKE_SHARED_LINKER_FLAGS are determined based on the host system and \n\n# then applied to all targets. This causes issues in cross-compiling to\n\n# Windows from a Linux host.\n\n# \n\n# To work around this, we unconditionally remove the flag here and then\n\n# selectively add it to the per-target link flags; this is currently done in\n\n# add_swift_host_library and add_swift_target_library within AddSwift.cmake.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# *NOTE* if we want to support separate Clang builds as well as separate LLVM\n\n# builds, the clang build directory needs to be added here.\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Common cmake project config for standalone builds.\n\n#\n\n# Parameters:\n\n#   product\n\n#     The product name, e.g. Swift or SourceKit. Used as prefix for some\n\n#     cmake variables.\n\n#\n\n#   is_cross_compiling\n\n#     Whether this is cross-compiling host tools.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Enable groups for IDE generators (Xcode and MSVC).\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Common cmake project config for unified builds.\n\n#\n\n# Parameters:\n\n#   product\n\n#     The product name, e.g. Swift or SourceKit. Used as prefix for some\n\n#     cmake variables.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If cmark was checked out into tools/cmark, expect to build it as\n\n# part of the unified build.\n",
        "Line" : 226,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# This imports TableGen from LLVM.\n",
        "Line" : 250,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# Common cmake project config for additional warnings.\n\n#\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Make unhandled switch cases be an error in assert builds\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Check for -Wunreachable-code-aggressive instead of -Wunreachable-code, as that indicates\n\n# that we have the newer -Wunreachable-code implementation.\n",
        "Line" : 276,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Check for '-fapplication-extension'.  On OS X/iOS we wish to link all\n\n# dynamic libraries with this flag.\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Disable C4068: unknown pragma. This means that MSVC doesn't report hundreds of warnings across\n\n# the repository for IDE features such as #pragma mark \"Title\".\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Disallow calls to objc_msgSend() with no function pointer cast.\n",
        "Line" : 296,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Like 'llvm_config()', but uses libraries from the selected build\n\n# configuration in LLVM.  ('llvm_config()' selects the same build configuration\n\n# in LLVM as we have for Swift.)\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# HACK: Otherwise (for example, for executables), use a plain signature,\n\n# because LLVM CMake does that already.\n",
        "Line" : 316,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# If Swift was not built standalone, dispatch to 'llvm_config()'.\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 23
    },
    "cmake/modules/SwiftSource.cmake" : {
      "ObjectId" : "404d4daa739da4d7d1ac4f7b2a0ece00664375b8",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Process the sources within the given variable, pulling out any Swift\n\n# sources to be compiled with 'swift' directly. This updates\n\n# ${sourcesvar} in place with the resulting list and ${externalvar} with the\n\n# list of externally-build sources.\n\n#\n\n# Usage:\n\n#   handle_swift_sources(sourcesvar externalvar)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check arguments.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Clear the result variable.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# FIXME: We shouldn't /have/ to build things in a single process.\n\n# <rdar://problem/15972329>\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Add Swift source files to the (Xcode) project.\n\n#\n\n# Usage:\n\n#   add_swift_source_group(sources)\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Mark the source files as HEADER_FILE_ONLY, so that Xcode doesn't try\n\n# to build them itself.\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Compile a swift file into an object file (as a library).\n\n#\n\n# Usage:\n\n#   _compile_swift_files(\n\n#     dependency_target_out_var_name\n\n#     dependency_module_target_out_var_name\n\n#     dependency_sib_target_out_var_name    # -Onone sib target\n\n#     dependency_sibopt_target_out_var_name # -O sib target\n\n#     dependency_sibgen_target_out_var_name # -sibgen target\n\n#     OUTPUT objfile                    # Name of the resulting object file\n\n#     SOURCES swift_src [swift_src...]  # Swift source files to compile\n\n#     FLAGS -module-name foo            # Flags to add to the compilation\n\n#     [SDK sdk]                         # SDK to build for\n\n#     [ARCHITECTURE architecture]       # Architecture to build for\n\n#     [DEPENDS cmake_target...]         # CMake targets on which the object\n\n#                                       # file depends.\n\n#     [IS_MAIN]                         # This is an executable, not a library\n\n#     [IS_STDLIB]\n\n#     [IS_STDLIB_CORE]                  # This is the core standard library\n\n#     [OPT_FLAGS]                       # Optimization flags (overrides SWIFT_OPTIMIZE)\n\n#     [MODULE_DIR]                      # Put .swiftmodule, .swiftdoc., and .o\n\n#                                       # into this directory.\n\n#     [MODULE_NAME]                     # The module name.\n\n#     [INSTALL_IN_COMPONENT]            # Install produced files.\n\n#     [EMBED_BITCODE]                   # Embed LLVM bitcode into the .o files\n\n#     )\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check arguments.\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Determine where this file is.\n",
        "Line" : 187,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Compute flags for the Swift compiler.\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Determine the subdirectory where the binary should be placed.\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Allow import of other Swift modules we just built.\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# FIXME: should we use '-resource-dir' here?  Seems like it has no advantage\n\n# over '-I' in this case.\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# If we have a custom module cache path, use it.\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Don't include libarclite in any build products by default.\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# The standard library and overlays are always built resiliently.\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# FIXME: Cleaner way to do this?\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Force swift 5 mode for Standard Library.\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Force swift 4 compatibility mode for overlays.\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Determine the directory where the module file should be placed.\n",
        "Line" : 293,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# FIXME: These don't really belong inside the swiftmodule, but there's not\n\n# an obvious alternate place to put them.\n",
        "Line" : 314,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# If we have extra regexp flags, check if we match any of the regexps. If so\n\n# add the relevant flags to our swift_flags.\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Depend on the binary itself, in addition to the symlink.\n",
        "Line" : 357,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# If there are more than one output files, we assume that they are specified\n\n# otherwise e.g. with an output file map.\n",
        "Line" : 361,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# HACK: work around an issue with CMake Xcode generator and the Swift\n\n# driver.\n\n#\n\n# The Swift driver does not update the mtime of the output files if the\n\n# existing output files on disk are identical to the ones that are about\n\n# to be written.  This behavior confuses the makefiles used in CMake Xcode\n\n# projects: the makefiles will not consider everything up to date after\n\n# invoking the compiler.  As a result, the standard library gets rebuilt\n\n# multiple times during a single build.\n\n#\n\n# To work around this issue we touch the output files so that their mtime\n\n# always gets updated.\n",
        "Line" : 389,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# First generate the obj dirs\n",
        "Line" : 413,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Then we can compile both the object files and the swiftmodule files\n\n# in parallel in this target for the object file, and ...\n",
        "Line" : 421,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Windows doesn't support long command line paths, of 8191 chars or over. We\n\n# need to work around this by avoiding long command line arguments. This can\n\n# be achieved by writing the list of file paths to a file, then reading that\n\n# list in the Python script.\n",
        "Line" : 424,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# If this platform/architecture combo supports backward deployment to old\n\n# Objective-C runtimes, we need to copy a YAML file with legacy type layout\n\n# information to the build directory so that the compiler can find it.\n\n#\n\n# See stdlib/CMakeLists.txt and TypeConverter::TypeConverter() in\n\n# lib/IRGen/GenType.cpp.\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# This is the target to generate:\n\n#\n\n# 1. *.swiftmodule\n\n# 2. *.swiftdoc\n\n# 3. *.swiftinterface\n\n# 4. *.Onone.sib\n\n# 5. *.O.sib\n\n# 6. *.sibgen\n\n#\n\n# Only 1,2,3 are built by default. 4,5,6 are utility targets for use by\n\n# engineers and thus even though the targets are generated, the targets are\n\n# not built by default.\n\n#\n\n# We only build these when we are not producing a main file. We could do this\n\n# with sib/sibgen, but it is useful for looking at the stdlib.\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# This is the target to generate the .sib files. It is not built by default.\n",
        "Line" : 501,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# This is the target to generate the .sibgen files. It is not built by default.\n",
        "Line" : 534,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# Make sure the build system knows the file is a generated object file.\n",
        "Line" : 553,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 33
    },
    "cmake/modules/SwiftToolchainUtils.cmake" : {
      "ObjectId" : "6a3bebfcd431c67a9bc798855eaddfea2a174dd4",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/SwiftUtils.cmake" : {
      "ObjectId" : "19f17223ec3bc1851f129378f191129ae0f2b74f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# prefix\n",
        "Line" : 5,
        "CharPositionInLine" : 17
      },
      "1" : {
        "Text" : "# options\n",
        "Line" : 6,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : "# single-value args\n",
        "Line" : 7,
        "CharPositionInLine" : 14
      },
      "3" : {
        "Text" : "# multi-value args\n",
        "Line" : 8,
        "CharPositionInLine" : 7
      },
      "4" : {
        "Text" : "# Assert is 'NOT ${LHS} ${OP} ${RHS}' is true.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# prefix\n",
        "Line" : 33,
        "CharPositionInLine" : 22
      },
      "6" : {
        "Text" : "# options\n",
        "Line" : 34,
        "CharPositionInLine" : 13
      },
      "7" : {
        "Text" : "# single-value args\n",
        "Line" : 35,
        "CharPositionInLine" : 14
      },
      "8" : {
        "Text" : "# multi-value args\n",
        "Line" : 36,
        "CharPositionInLine" : 7
      },
      "9" : {
        "Text" : "# Translate a yes/no variable to the presence of a given string in a\n\n# variable.\n\n#\n\n# Usage:\n\n#   translate_flag(is_set flag_name var_name)\n\n#\n\n# If is_set is true, sets ${var_name} to ${flag_name}. Otherwise,\n\n# unsets ${var_name}.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Set ${outvar} to ${${invar}}, asserting if ${invar} is not set.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Set variable to value if value is not null or false. Otherwise set variable to\n\n# default_value.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/modules/SwiftWindowsSupport.cmake" : {
      "ObjectId" : "1ddbf84e741f03135310a9ffba39dd09694b55bc",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE(compnerd) provide compatibility with VS2015 which had the libraries in\n\n# a directory called \"Lib\" rather than VS2017 which normalizes the layout and\n\n# places them in a directory named \"lib\".\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# TODO(compnerd) use a target to avoid re-creating this file all the time\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# NOTE(compnerd) we use a macro here as this modifies global variables\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/SwiftXcodeSupport.cmake" : {
      "ObjectId" : "ea5135629e3822898618c0bdfe46b4576254de31",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file contains cmake configuration specifically related to support for the\n\n# Xcode generator in CMake.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If we are not using the Xcode generator, be defensive and early exit.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Hack to deal with the fact that paths contain the build-time\n\n# variables. Note that this fix is Xcode-specific.\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# First try to lookup the value associated with the \"real build type\".\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If the property is unspecified, return.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Otherwise for each cmake configuration that is not real_build_type, hardcode\n\n# its value to be PROP_VALUE.\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# When building with Xcode, we only support compiling against the LLVM\n\n# configuration that was specified by build-script. This becomes a problem since\n\n# if we compile LLVM-Release and Swift-Debug, Swift is going to look in the\n\n# Debug, not the Release folder for LLVM's code and thus will be compiling\n\n# against an unintended set of libraries, if those libraries exist at all.\n\n#\n\n# Luckily, via LLVMConfig.cmake, we know the configuration that LLVM was\n\n# compiled in, so we can grab the imported location for that configuration and\n\n# splat it across the other configurations as well.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This is the set of configuration specific cmake properties that are\n\n# supported for imported targets in cmake 3.4.3. Sadly, beyond hacks, it seems\n\n# that there is no way to dynamically query the list of set properties of a\n\n# target.\n\n#\n\n# *NOTE* In fixup_imported_target_property_for_xcode, we add the _${CONFIG}\n\n# *suffix.\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# First check that we actually imported the configuration that LLVM said\n\n# that we did. This is just a sanity check.\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Then loop through all of the imported properties and translate.\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Common additional cmake project config for Xcode.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Force usage of Clang.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Use C++'11.\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Use libc++.\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Enable some warnings not enabled by default.  These\n\n# mostly reset clang back to its default settings, since\n\n# Xcode passes -Wno... for many warnings that are not enabled\n\n# by default.\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Disable RTTI\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Disable exceptions\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "a0f36cb4b4b22e3869a30d13a9ceea5481c74927",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "docs/Makefile" : {
      "ObjectId" : "a3100e6c3eea38a49be3c682dee11dd49bc51be7",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "docs/tools/CMakeLists.txt" : {
      "ObjectId" : "1b3b5ea85a255a218b31a6ca3f824241ad25a1f5",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "4c3a2a59cfe6fec2ee741bf49ae99a9b3c76b312",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/swift/CMakeLists.txt" : {
      "ObjectId" : "12ed2cd85f973f13bfa7036e289bf652e5558f4a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/swift/Option/CMakeLists.txt" : {
      "ObjectId" : "524634a680a531616044504c69f07b9d7cd3e174",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/swift/Parse/CMakeLists.txt" : {
      "ObjectId" : "263e438572a265f27de2ea795e545e89f0e0492e",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/swift/Runtime/CMakeLists.txt" : {
      "ObjectId" : "7dea0d2c2a39f544a824e406632190f75a8801aa",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Detect B&I builds.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "include/swift/SwiftRemoteMirror/CMakeLists.txt" : {
      "ObjectId" : "69d845013220497f50dcda90c04aca90600bb1b0",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "include/swift/Syntax/CMakeLists.txt" : {
      "ObjectId" : "19463fc97e6fc5fc6f53e71fea4f69eff4092450",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/AST/CMakeLists.txt" : {
      "ObjectId" : "e8e6c58fe0444bea87a77e5d870290592fecf7bf",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add clangBasic as a single direct dependency to avoid bringing along some\n\n# llvm libraries that we don't need.\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# intrinsics_gen is the LLVM tablegen target that generates the include files\n\n# where intrinsics and attributes are declared. swiftAST depends on these\n\n# headers.\n\n# For more information see the comment at the top of lib/CMakeLists.txt.\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "lib/ASTSectionImporter/CMakeLists.txt" : {
      "ObjectId" : "9ddb54024fb004ca5a94f57e39cdf180cd8e87c0",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Basic/CMakeLists.txt" : {
      "ObjectId" : "27ace737ed628c5725d1488f21f9c93db8080891",
      "LastModified" : "2019-04-16T21:21:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On non-Darwin require UUID.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Figure out if we can track VC revisions.\n\n# FIXME: Copied from Clang.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Git\n\n# SVN 1.7\n\n# SVN 1.6\n",
        "Line" : 27,
        "CharPositionInLine" : 29
      },
      "3" : {
        "Text" : "# Create custom target to generate the VC revision include.\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Generate an empty Revision.inc file if we are not using git or SVN.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Mark the generated header as being generated.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Platform-specific TaskQueue implementations\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Platform-agnostic fallback TaskQueue implementation\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "47e6f66907b924704b18f269aa49cccec49ec95c",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# In the absence of fine grained tablegen dependencies we need to ensure that\n\n# Swift's libraries all build after the LLVM & Clang tablegen-generated headers\n\n# are generated. When building out-of-tree (as with build-script) LLVM & Clang's\n\n# CMake configuration files create these targets as dummies so we can safely\n\n# depend on them directly here (See: SR-6026)\n\n# LLVM_COMMON_DEPENDS is a construct from the LLVM build system. It is a special\n\n# purpose variable that provides common dependencies for all libraries, and\n\n# executables generated when it is set. CMake's scoping rules enforce that these\n\n# new dependencies will only be added to targets created under Swift's lib\n\n# directory.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add generated libSyntax headers to global dependencies.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "lib/ClangImporter/CMakeLists.txt" : {
      "ObjectId" : "263c1707d9481c529e50a81d6bf533f83374e0ba",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This property is only set by calls to clang_tablegen. It will not be set on\n\n# standalone builds, so it can always be safely passed.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/DWARFImporter/CMakeLists.txt" : {
      "ObjectId" : "83ae221dc41c1a1b961dfe833dd844f49bc5fce6",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Demangling/CMakeLists.txt" : {
      "ObjectId" : "8716652298f84ec929444fdc3a67486441a6fada",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Driver/CMakeLists.txt" : {
      "ObjectId" : "4c3850d5ff1b3312f2893a12e315cf6e1941606d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate the static-stdlib-args.lnk file used by -static-stdlib option\n\n# for 'GenericUnix' (eg linux)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/Frontend/CMakeLists.txt" : {
      "ObjectId" : "afdcf1781bd8fb1c376383f081c82aadd96e148c",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/FrontendTool/CMakeLists.txt" : {
      "ObjectId" : "6f51980a314811ef3c49563c676c082148f23ce5",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/IDE/CMakeLists.txt" : {
      "ObjectId" : "ffdc6b2410088569ebb2a0e459542fa49ba105d4",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/IRGen/CMakeLists.txt" : {
      "ObjectId" : "17f98b364e0815fda81ea8092a4a9f3aaeb66d22",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Immediate/CMakeLists.txt" : {
      "ObjectId" : "80d20ddc3423dc6c5981cf6d89e80f366a87538e",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Index/CMakeLists.txt" : {
      "ObjectId" : "e1667070d67d4fc623d51a9da7b11e984347cfa5",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/LLVMPasses/CMakeLists.txt" : {
      "ObjectId" : "ce762291d60fb54e9d7ee29255ece810a7df827e",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Markup/CMakeLists.txt" : {
      "ObjectId" : "b44efe1b17004d3f83d15e232c7d58af6db3ad90",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Migrator/CMakeLists.txt" : {
      "ObjectId" : "d935b84468d2bbc190a6e8469a528c1aad77c2c4",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Option/CMakeLists.txt" : {
      "ObjectId" : "bb58724f945e633052a8d1633952a7f57e769801",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Parse/CMakeLists.txt" : {
      "ObjectId" : "7d3726f1d23edadb483516387e31887ebd45e68f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/ParseSIL/CMakeLists.txt" : {
      "ObjectId" : "00fe8399bc4b87a6f97b31d352d7ba9780be154a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/PrintAsObjC/CMakeLists.txt" : {
      "ObjectId" : "123f748d82ffdcf6368c07275f444f2f6c1cf3e6",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/RemoteAST/CMakeLists.txt" : {
      "ObjectId" : "1beb81716158f9146359768d494fa420060618ae",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SIL/CMakeLists.txt" : {
      "ObjectId" : "2ff6676b409b1b26c83ed446db96b838a52e94c1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# intrinsics_gen is the LLVM tablegen target that generates the include files\n\n# where intrinsics and attributes are declared. swiftSIL depends on these\n\n# headers.\n\n# For more information see the comment at the top of lib/CMakeLists.txt.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/SILGen/CMakeLists.txt" : {
      "ObjectId" : "76802fc69b8a7dc97cdb63ae0a322ec8f284df16",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/ARC/CMakeLists.txt" : {
      "ObjectId" : "2a05a36f27826725ee7ae5755669a00bde93825e",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/Analysis/CMakeLists.txt" : {
      "ObjectId" : "009fea5b7e3d92a42d757e21198778eb74cd2252",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/CMakeLists.txt" : {
      "ObjectId" : "f05c7b8a223649eb700070ae1819c5f449ce4049",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/FunctionSignatureTransforms/CMakeLists.txt" : {
      "ObjectId" : "56ea0c3542ace7964f9301c59dd34c0c49f2fb03",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/IPO/CMakeLists.txt" : {
      "ObjectId" : "ea6b83f231ec08f63933ca9b0f322e40dfd0ecfc",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/LoopTransforms/CMakeLists.txt" : {
      "ObjectId" : "ecd44b2a4ceacc50879b3787e94e27b473274544",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/Mandatory/CMakeLists.txt" : {
      "ObjectId" : "58b55374d13df130fa62606e7064c63abf87bd8b",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/PassManager/CMakeLists.txt" : {
      "ObjectId" : "80a438a9d95d3c08b2f91fd5ab529c87f64750f1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/SILCombiner/CMakeLists.txt" : {
      "ObjectId" : "64cc710bd48ef2e8a7c7479f4603bd97cc4dde90",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/Transforms/CMakeLists.txt" : {
      "ObjectId" : "4ded5f556a312ee10297325b13bb34aee2a139ae",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/UtilityPasses/CMakeLists.txt" : {
      "ObjectId" : "e5b4524b9207b61c8e333e5531f6e3c61c6a7894",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SILOptimizer/Utils/CMakeLists.txt" : {
      "ObjectId" : "1115a8acd17e0369343c4f782bead41c8dcb3b13",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Sema/CMakeLists.txt" : {
      "ObjectId" : "15c1cea16b6ccf55ec69851bfcdf9856d3607956",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Serialization/CMakeLists.txt" : {
      "ObjectId" : "f569669e059600bf2a16a887fdb1d99cf605082a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SwiftDemangle/CMakeLists.txt" : {
      "ObjectId" : "046dcfa4e54a50658f7f205590de78cf86a5ba04",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/Syntax/CMakeLists.txt" : {
      "ObjectId" : "93ab40b71f0040b88de3dea7215bfe6b42df92ff",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/SyntaxParse/CMakeLists.txt" : {
      "ObjectId" : "b1b1c562988aa2241cef751030b18da3598dfd5e",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/TBDGen/CMakeLists.txt" : {
      "ObjectId" : "db15351647f2ccd65bbe2839c807a27836fbfd7f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "lib/TBDGen/tapi/CMakeLists.txt" : {
      "ObjectId" : "f858521eeee460c85e8bf3d500ee26b63a9a9650",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/CMakeLists.txt" : {
      "ObjectId" : "95ecb338fc193e59a05eda06c86eac1fcd963a6c",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add path for custom CMake modules.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create convenience targets for the Swift standard library.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# NOTE(compnerd) save the original compiler for the host swiftReflection that\n\n# we build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# If we use Clang-cl or MSVC, CMake provides default compiler and linker flags that are incompatible\n\n# with the frontend of Clang or Clang++.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# The sanitizers require using the same version of the compiler for\n\n# everything and there are various places where we link runtime code with\n\n# code built by the host compiler. Disable sanitizers for the runtime for\n\n# now.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Do not enforce checks for LLVM's ABI-breaking build settings.\n\n# The Swift runtime uses some header-only code from LLVM's ADT classes,\n\n# but we do not want to link libSupport into the runtime. These checks rely\n\n# on the presence of symbols in libSupport to identify how the code was\n\n# built and cause link failures for mismatches. Without linking that library,\n\n# we get link failures regardless, so instead, this just disables the checks.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Copy the input file to the build directory.\n",
        "Line" : 123,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Define a target for this so that we can depend on it when\n\n# building Swift sources.\n",
        "Line" : 132,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Make sure we ultimately always do this as part of building the\n\n# standard library. In practice we'll do this earlier if at least\n\n# one Swift source file has changed.\n",
        "Line" : 139,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Add a dummy target that does nothing so we can still depend on it\n\n# later without checking if the input files exist.\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 10
    },
    "stdlib/cmake/modules/AddSwiftStdlib.cmake" : {
      "ObjectId" : "77a81867c5385ea700a8b7e0df6920820a5d1a8f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add an executable for each target variant. Executables are given suffixes\n\n# with the variant SDK and ARCH.\n\n#\n\n# See add_swift_executable for detailed documentation.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse the arguments we were given.\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# All Swift executables depend on the standard library.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# All Swift executables depend on the swiftSwiftOnoneSupport library.\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# By default, don't build executables for target SDKs to avoid building\n\n# target stdlibs.\n",
        "Line" : 40,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Don't add the ${arch} to the suffix.  We want to link against fat\n\n# libraries.\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# No code signing on other platforms.\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 7
    },
    "stdlib/private/CMakeLists.txt" : {
      "ObjectId" : "45cf31363574b3d0946c60ac0fd87d2629e2da61",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SwiftPrivateThreadExtras makes use of Darwin/Glibc, which is part of the\n\n# SDK overlay. It can't be built separately from the SDK overlay.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# NOTE(compnerd) this must come after SwiftPrivateLibcExtras and\n\n# SwiftPrivateThreadExtras to ensure that the dependency targets are setup in\n\n# the correct order for Windows.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "stdlib/private/OSLog/CMakeLists.txt" : {
      "ObjectId" : "a120f6f019c6b31ed0690da59064b2e1fd134bce",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/private/RuntimeUnittest/CMakeLists.txt" : {
      "ObjectId" : "2989d2ad90a35205ef8b059077794c861fcbceb3",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "stdlib/private/StdlibCollectionUnittest/CMakeLists.txt" : {
      "ObjectId" : "5d87a11ecf9274110cc58ce2614c6ee01ffb104f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: support this on non-POSIX platforms.  It cannot be currently as it\n\n# depends on pthreads.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "stdlib/private/StdlibUnicodeUnittest/CMakeLists.txt" : {
      "ObjectId" : "9c5072769cc3aff76c471b2e449d343cb8cfed65",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: support this on non-POSIX platforms.  It cannot be currently as it\n\n# depends on pthreads.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "stdlib/private/StdlibUnittest/CMakeLists.txt" : {
      "ObjectId" : "ffac1c3a5b76abb268f792d50ed37bdec4cf1552",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "stdlib/private/StdlibUnittestFoundationExtras/CMakeLists.txt" : {
      "ObjectId" : "38e3017de99471525771da44cfeea45b9126161f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "stdlib/private/SwiftPrivate/CMakeLists.txt" : {
      "ObjectId" : "738698f6a81827a8c0df350832438ebca32aea6d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "stdlib/private/SwiftPrivateLibcExtras/CMakeLists.txt" : {
      "ObjectId" : "46111a89a7270a3a5f15c943833704f8660f5c68",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "stdlib/private/SwiftPrivateThreadExtras/CMakeLists.txt" : {
      "ObjectId" : "d5fd006f00e6044eb99fd7fedd20e4b9a7e9eae3",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "stdlib/private/SwiftReflectionTest/CMakeLists.txt" : {
      "ObjectId" : "5a688bdb4a1bb0ab355642333348c4fb3cc31a4a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/public/CMakeLists.txt" : {
      "ObjectId" : "8b661b508cfc722da784e5742951161c1590077a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Refactor this\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Build the runtime with -Wall to catch, e.g., uninitialized variables\n\n# warnings.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# C++ code in the runtime and standard library should generally avoid\n\n# introducing static constructors or destructors.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# C++ code in the runtime and standard library should generally avoid\n\n# introducing static constructors or destructors.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We don't want runtime C++ code to export symbols we didn't explicitly\n\n# choose to.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These must be kept in dependency order so that any referenced targets\n\n# exist at the time we look for them in add_swift_*.\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "stdlib/public/Darwin/ARKit/CMakeLists.txt" : {
      "ObjectId" : "c73c2c137f5234a06018a56a2a1b494a36433082",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 183
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/AVFoundation/CMakeLists.txt" : {
      "ObjectId" : "7ea987d42d53c4f7963da29037f8d3e83942eff6",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 20,
        "CharPositionInLine" : 150
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 21,
        "CharPositionInLine" : 114
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 22,
        "CharPositionInLine" : 115
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/Accelerate/CMakeLists.txt" : {
      "ObjectId" : "fbf4fe1dbf75e07b7e85eca0b3239099d6cc2d0e",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 109
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 102
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 103
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 18,
        "CharPositionInLine" : 100
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/AppKit/CMakeLists.txt" : {
      "ObjectId" : "b722ca276fb0d9e98de36bd248ba79bb4007d187",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 118
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/AssetsLibrary/CMakeLists.txt" : {
      "ObjectId" : "112985009c90c44be6b577210a86c35dcf9bbc4a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 93
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/CMakeLists.txt" : {
      "ObjectId" : "90e53d11a30ac62b0640ed7b46d3ab0b705109b8",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# All libraries in this directory tree are overlays that depend on Darwin SDK.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/CallKit/CMakeLists.txt" : {
      "ObjectId" : "df62a1e1f76692679c703816b7f3c5fa01effd53",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 98
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/CloudKit/CMakeLists.txt" : {
      "ObjectId" : "288eea76263fe24be9a97151c74f68c3ce9882de",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 23,
        "CharPositionInLine" : 121
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 25,
        "CharPositionInLine" : 102
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 27,
        "CharPositionInLine" : 94
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 29,
        "CharPositionInLine" : 97
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/Compression/CMakeLists.txt" : {
      "ObjectId" : "52167e5d31d6e8aefc5d650a587dc9672d170406",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/public/Darwin/Contacts/CMakeLists.txt" : {
      "ObjectId" : "1268b40813f74732dfb9a54b20e399bae09e05d1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 99
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 93
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 97
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/CoreAudio/CMakeLists.txt" : {
      "ObjectId" : "d1ddac4ee09c0a99fb7a332e1855d17185c95331",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n\n# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 69
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 70
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 73
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/CoreData/CMakeLists.txt" : {
      "ObjectId" : "975183cd507e8c88717793f10b7d43434019aace",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 99
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 93
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 94
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 97
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/CoreFoundation/CMakeLists.txt" : {
      "ObjectId" : "113177f34ed8b35cd46f26494f9123a376ba9cc8",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n\n# auto-updated\n",
        "Line" : 11,
        "CharPositionInLine" : 54
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 55
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 58
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/CoreGraphics/CMakeLists.txt" : {
      "ObjectId" : "b66c9a08cb83f2dedeb5f6e70f387023716b4b85",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 75
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 69
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 70
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 18,
        "CharPositionInLine" : 73
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/CoreImage/CMakeLists.txt" : {
      "ObjectId" : "f608ae4ea563de055cf348c7f93c94760b7eabff",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 109
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 99
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 100
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/CoreLocation/CMakeLists.txt" : {
      "ObjectId" : "896eb0c36427460d2720aa090ae19a24776e451d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 99
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 93
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 94
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 97
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/CoreMedia/CMakeLists.txt" : {
      "ObjectId" : "eb9ad41c11c19e8f70e19d56a87253fc5ad267f2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 11,
        "CharPositionInLine" : 141
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 94
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 95
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/CryptoTokenKit/CMakeLists.txt" : {
      "ObjectId" : "a1b39d9243579bc60be5e0d826fbc66d7729f180",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 99
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/Dispatch/CMakeLists.txt" : {
      "ObjectId" : "d8b7f1a8492157937c3995b2c0d2b3d367707c66",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n\n# auto-updated\n",
        "Line" : 20,
        "CharPositionInLine" : 45
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 22,
        "CharPositionInLine" : 46
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 23,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/Foundation/CMakeLists.txt" : {
      "ObjectId" : "87004e12138ef917c7eac689056ea192f1d6468e",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 74,
        "CharPositionInLine" : 88
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 75,
        "CharPositionInLine" : 82
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 76,
        "CharPositionInLine" : 83
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 77,
        "CharPositionInLine" : 86
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/GLKit/CMakeLists.txt" : {
      "ObjectId" : "439cccc0df1375d78e09ddee2343796ec912016d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 153
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 133
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 134
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/GameplayKit/CMakeLists.txt" : {
      "ObjectId" : "0d7362e055f97e53338a0c85a78d434686d54ea2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 155
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 158
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 136
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/HomeKit/CMakeLists.txt" : {
      "ObjectId" : "3514cd072e490016ca94db8399850f0f39d275f3",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 123
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 121
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 97
      },
      "3" : {
        "Text" : "# required in some configurations but not found by tool\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/IOKit/CMakeLists.txt" : {
      "ObjectId" : "35971921a77460fb6e7d08994667a66f973a8230",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/Intents/CMakeLists.txt" : {
      "ObjectId" : "027c73c6ae339cef1390663f438f8de35902beb0",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 36,
        "CharPositionInLine" : 112
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 37,
        "CharPositionInLine" : 93
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 38,
        "CharPositionInLine" : 97
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/MapKit/CMakeLists.txt" : {
      "ObjectId" : "536d13d10992f413e03a6da5b255aae283981676",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 11,
        "CharPositionInLine" : 138
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 121
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 119
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 95
      },
      "4" : {
        "Text" : "# required in some configurations but not found by tool\n",
        "Line" : 15,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 5
    },
    "stdlib/public/Darwin/MediaPlayer/CMakeLists.txt" : {
      "ObjectId" : "f739cf78f13c7ba01928deee94296bb9cb8da52f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 176
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/Metal/CMakeLists.txt" : {
      "ObjectId" : "50755a8aa9373babfcd23998e0c7e7dcc6ce366c",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 103
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 80
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/MetalKit/CMakeLists.txt" : {
      "ObjectId" : "03babc5897c7ec756335a301f60ca6e83a3eaf17",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 159
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 139
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 140
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/ModelIO/CMakeLists.txt" : {
      "ObjectId" : "794574769bdd56ed760552fb854f23fa3a71a197",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 104
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 98
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 99
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/NaturalLanguage/CMakeLists.txt" : {
      "ObjectId" : "6c35af2de780ce42c6573fa5d512878c9a93ba8d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n\n# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 72
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/Network/CMakeLists.txt" : {
      "ObjectId" : "fc02afb3a9e1c12b5738bfde52ccb6ccdc0a7f12",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# WATCHOS WATCHOS_SIMULATOR\n",
        "Line" : 23,
        "CharPositionInLine" : 56
      },
      "1" : {
        "Text" : "# auto-updated\n\n# auto-updated\n",
        "Line" : 24,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 26,
        "CharPositionInLine" : 66
      },
      "3" : {
        "Text" : "# SWIFT_MODULE_DEPENDS_WATCHOS Darwin Dispatch Foundation ObjectiveC # auto-updated\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# DEPLOYMENT_VERSION_WATCHOS ${SWIFTLIB_DEPLOYMENT_VERSION_NETWORK_WATCHOS}\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "stdlib/public/Darwin/ObjectiveC/CMakeLists.txt" : {
      "ObjectId" : "5e3127d61557da429b2476eb01d8250cb22080b1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n\n# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 35
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/OpenCL/CMakeLists.txt" : {
      "ObjectId" : "4561f06295e0bc0783581fad8bb15be32c571d45",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 54
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/Photos/CMakeLists.txt" : {
      "ObjectId" : "ecf991b07bc1d007555e8f89b6367e4a05882093",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 183
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 181
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 176
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/QuartzCore/CMakeLists.txt" : {
      "ObjectId" : "57eb2da15b1dc5e073e2974eb5088c1d991fecca",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 119
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 99
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 100
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/SafariServices/CMakeLists.txt" : {
      "ObjectId" : "63ea9cb5274f865234c42dab0df9b24117872fc8",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 125
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/SceneKit/CMakeLists.txt" : {
      "ObjectId" : "3ff9eed2d47d8c4794c33e3745925c695f4cd357",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 136
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 139
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 117
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 93
      },
      "4" : {
        "Text" : "# required in some configurations but not found by tool\n",
        "Line" : 18,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 5
    },
    "stdlib/public/Darwin/SpriteKit/CMakeLists.txt" : {
      "ObjectId" : "0465bd05bbc79af3293181a519383ec92a235532",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 136
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 119
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 117
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 18,
        "CharPositionInLine" : 93
      },
      "CommentCount" : 4
    },
    "stdlib/public/Darwin/UIKit/CMakeLists.txt" : {
      "ObjectId" : "7709f9e2309b980ec379de1dbb3467c7bf3734d1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 117
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 115
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 18,
        "CharPositionInLine" : 97
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/Vision/CMakeLists.txt" : {
      "ObjectId" : "1953436cfab04e05fad6649cc947bacb9bf9702a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 124
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 13,
        "CharPositionInLine" : 114
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 115
      },
      "CommentCount" : 3
    },
    "stdlib/public/Darwin/WatchKit/CMakeLists.txt" : {
      "ObjectId" : "f4368d2b65fa32cace4985d45b9967ecf2c09b88",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 140
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 14,
        "CharPositionInLine" : 145
      },
      "CommentCount" : 2
    },
    "stdlib/public/Darwin/XCTest/CMakeLists.txt" : {
      "ObjectId" : "d49714e086bfd1a5b6803984b25295a38259d76b",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/public/Darwin/XPC/CMakeLists.txt" : {
      "ObjectId" : "26e35e1a720a39cbe02c0a2dd2182f570a198ff6",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 12,
        "CharPositionInLine" : 54
      },
      "CommentCount" : 1
    },
    "stdlib/public/Darwin/os/CMakeLists.txt" : {
      "ObjectId" : "a0e2a3b3ad65854e6ece9c56e660504ca034c3a7",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n",
        "Line" : 16,
        "CharPositionInLine" : 58
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : "# required in some configurations but not found by tool\n",
        "Line" : 18,
        "CharPositionInLine" : 13
      },
      "3" : {
        "Text" : "# auto-updated\n",
        "Line" : 19,
        "CharPositionInLine" : 55
      },
      "4" : {
        "Text" : "# required in some configurations but not found by tool\n",
        "Line" : 20,
        "CharPositionInLine" : 13
      },
      "5" : {
        "Text" : "# auto-updated\n",
        "Line" : 21,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# required in some configurations but not found by tool\n",
        "Line" : 22,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 7
    },
    "stdlib/public/Darwin/simd/CMakeLists.txt" : {
      "ObjectId" : "46b57a38bbeae80cb65d9078c0468d613f97b9a7",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# auto-updated\n\n# auto-updated\n",
        "Line" : 15,
        "CharPositionInLine" : 34
      },
      "1" : {
        "Text" : "# auto-updated\n",
        "Line" : 17,
        "CharPositionInLine" : 35
      },
      "2" : {
        "Text" : "# auto-updated\n",
        "Line" : 18,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 3
    },
    "stdlib/public/Platform/CMakeLists.txt" : {
      "ObjectId" : "13032c2573ab59e2d89f779453094abb50c1c285",
      "LastModified" : "2019-04-16T21:21:37Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is overly conservative, but we have so few API notes files that\n\n# haven't migrated to the Swift repo that it's probably fine in practice.\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Haiku doesn't have /usr/include, instead the headers are located\n\n# at /system/develop/headers.\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Determine the location of glibc headers based on the target.\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Some SDKs place their headers in architecture-specific subfolders.\n",
        "Line" : 80,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Configure the module map based on the target. Each platform needs to\n\n# reference different headers, based on what's available in their glibc.\n\n# This is the 'glibc.modulemap' in the 'resource-dir', so\n\n# it's the one we'll look at during the build process.\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# If this SDK is a target for a non-native host, create a native modulemap\n\n# without a sysroot prefix. This is the one we'll install instead.\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# FIXME: When SDK is a cross-compile target (SDK != Host), the generated\n\n#        modulemap will be relative to the Host, with hardcoded paths.\n\n#        It is not relocatable to the target platform itself.\n\n#        This affects any cross-comipled targets that use glibc.modulemap.\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "stdlib/public/Reflection/CMakeLists.txt" : {
      "ObjectId" : "b3a1706da1fd9522d747f04f34b561a86e9ee0d5",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# When we're building with assertions, include the demangle node dumper to aid\n\n# in debugging.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build a specific version for the host with the host toolchain.  This is going\n\n# to be used by tools (e.g. lldb)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stdlib/public/SwiftOnoneSupport/CMakeLists.txt" : {
      "ObjectId" : "838393562260dd0a5b9f69fda3f060b859dd09e4",
      "LastModified" : "2019-04-16T23:57:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file should be listed the first.  Module name is inferred from the\n\n# filename.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# We have to disable validation of TBD files, because this module is\n\n# _explicitly_ special-cased to result in extra symbols generated by the\n\n# optimizer, meaning TBDGen can't (and shouldn't: it has to run\n\n# pre-optimization for performance) list them.\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# When building in Debug mode, the standard library provides the symbols that\n\n# we need and as such SwiftOnoneSupport does not need to provide any exported\n\n# interfaces.  This results in the import library beinging elided.  However,\n\n# we explicitly link against the SwiftOnoneSupport library when building\n\n# programs in Debug mode, and need the import library to be generated even if\n\n# nothing is exported.  Because we will still generate the DLL, create an\n\n# empty import library.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "stdlib/public/SwiftRemoteMirror/CMakeLists.txt" : {
      "ObjectId" : "ec208a9d0b0671585a6115b1a7189cc7a0b7c34f",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# libswiftRemoteMirror.dylib should not have runtime dependencies; it's\n\n# always built as a shared library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build a specific version for the host with the host toolchain.  This is going\n\n# to be used by tools (e.g. lldb)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stdlib/public/SwiftShims/CMakeLists.txt" : {
      "ObjectId" : "5fe05a03eb0884fb8cdafb5b6201cdb0c1f20383",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Put the output dir itself last so that it isn't considered the primary output.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Symlink in the Clang headers.\n\n# First extract the \"version\" used for Clang's resource directory.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install Clang headers under the Swift library so that an installed Swift's\n\n# module importer can find the compiler headers corresponding to its Clang.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Possibly install Clang headers under Clang's resource directory in case we\n\n# need to use a different version of the headers than the installed Clang. This\n\n# should be used in conjunction with clang-resource-dir-symlink.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "stdlib/public/Windows/CMakeLists.txt" : {
      "ObjectId" : "89a47647152c7ab010cab960e93bd4cad16a0a2a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/public/core/CMakeLists.txt" : {
      "ObjectId" : "849a883920f0d38290ab00390cf30134d18bece8",
      "LastModified" : "2019-04-17T21:57:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#===--- CMakeLists.txt - Build the core standard library -----------------===#\n\n#\n\n# This source file is part of the Swift.org open source project\n\n#\n\n# Copyright (c) 2014 - 2018 Apple Inc. and the Swift project authors\n\n# Licensed under Apache License v2.0 with Runtime Library Exception\n\n#\n\n# See https://swift.org/LICENSE.txt for license information\n\n# See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors\n\n#\n\n#===----------------------------------------------------------------------===#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The list of sources without which it's impossible to build a core\n\n# standard library.  Try to add new standard library sources to\n\n# SWIFTLIB_SOURCES, below, rather than SWIFTLIB_ESSENTIAL, if\n\n# possible, to improve layering.  Check that you got it right by\n\n# configuring with -DSWIFT_CHECK_ESSENTIAL_STDLIB=YES\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### PLEASE KEEP THIS LIST IN ALPHABETICAL ORDER ###\n\n# Some files can't be sorted alphabetically, see notes in the list below.\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# WORKAROUND: This file name is not sorted alphabetically in the list because\n\n# if we do so, the compiler crashes.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# END WORKAROUND\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# ORDER DEPENDENCY: Must precede Mirrors.swift\n",
        "Line" : 91,
        "CharPositionInLine" : 22
      },
      "6" : {
        "Text" : "# ORDER DEPENDENCY: Must precede String.swift\n",
        "Line" : 134,
        "CharPositionInLine" : 24
      },
      "7" : {
        "Text" : "# ORDER DEPENDENCY: UnicodeScalarProperties.swift\n",
        "Line" : 169,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : "# ORDER DEPENDENCY: must follow new unicode support\n",
        "Line" : 179,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# ORDER DEPENDENCY: Must follow UTF16.swift\n",
        "Line" : 180,
        "CharPositionInLine" : 31
      },
      "10" : {
        "Text" : "# The complete list of sources in the core standard library.  Includes\n\n# all the essential sources listed above.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "### PLEASE KEEP THIS LIST IN ALPHABETICAL ORDER ###\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# With the GNU linker the equivalent of -all_load is to tell the linker\n\n# --whole-archive before the archive and --no-whole-archive after (without\n\n# the second, it causes errors when the system libraries are told to\n\n# include everything). The best way to get it in there, according to the\n\n# documentation, is to put the flags in the target_link_libraries setting.\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# TODO: However, for the moment this actually makes things explode with an\n\n# incomplete runtime. This should be turned back on when more of the porting\n\n# effort has been completed.\n\n#set(LINK_FLAGS\n\n#  -Wl,--whole-archive swiftRuntime -Wl,--no-whole-archive)\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# workaround for libatomic needing to be after object files for swiftCore.so\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# TODO(compnerd) cache this variable to permit re-configuration\n",
        "Line" : 261,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# workaround for libatomic needing to be after object files for swiftCore.so\n",
        "Line" : 267,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# The copy_shim_headers target dependency is required to let the\n\n# build system know that there's a rule to produce the shims\n\n# directory, but is not sufficient to cause the object file to be rebuilt\n\n# when the shim header changes.  Therefore, we pass both the target\n\n# and the generated directory as dependencies.\n",
        "Line" : 305,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 18
    },
    "stdlib/public/runtime/CMakeLists.txt" : {
      "ObjectId" : "8f5d79fb6be49b63bd92c0262a48e25875d88819",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# When we're building with assertions, include the demangle node dumper to aid\n\n# in debugging.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Acknowledge that the following sources are known.\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These two libraries are only used with the static swiftcore\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Generate the static-executable-args.lnk file used for ELF systems (eg linux)\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# FIXME(compnerd) this should be compiled twice, once for static and once for\n\n# shared.  The static version should be used for building the standard library.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TODO(compnerd) switch to the generator expression when cmake is upgraded\n\n# to a version which supports it.\n\n# set(swiftrtObject \"$<TARGET_OBJECTS:swiftImageRegistrationObject${SWIFT_SDK_${sdk}_OBJECT_FORMAT}-${arch_suffix}>\")\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "stdlib/public/stubs/CMakeLists.txt" : {
      "ObjectId" : "606a768bbcffea81da568abffb067a830b1cc24b",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/tools/CMakeLists.txt" : {
      "ObjectId" : "471c392bb005ebcb0b821770ab12d1b7d2d37a4a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "stdlib/tools/swift-reflection-test/CMakeLists.txt" : {
      "ObjectId" : "de9d4b2f24089812024051dee55ceb60e50b5c5d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE(compnerd) since _WINDLL has no impact on non-Windows targets,\n\n# we just spam it on all the targets for simplicity due to the build\n\n# structure of swift.  This will make the global variable imported,\n\n# which we need.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "74ee9b27f2488c819ad0d77a2df3cca348475cb8",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# No extra dependencies.\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Xcode's build paths have a configuration variable in them,\n\n# so CMake can't match them at compile time. Just use target names.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Incremental mode in lit orders test files by the last modification time\n\n# instead of by the path, which is good for CI. In this mode lit also updates\n\n# the mtime on the failed tests, which makes them run first on the\n\n# consecutive execution, which makes local builds fail faster.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Normalize spelling of boolean values.\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure variables for this subdirectory.\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# A directory where to put the xUnit-style XML test results.\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# NOTE create a stub BlocksRuntime library that can be used for the\n\n# reflection tests\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# These are supported testing SDKs, but their implementation of\n\n# `command_upload_stdlib` is hidden.\n",
        "Line" : 243,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Warning: This step will fail if you do not have an Android device\n\n#          connected via USB. See docs/Android.md for details on\n\n#          how to run the test suite for Android.\n",
        "Line" : 252,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Reboot the device and remove everything in its tmp\n\n# directory. Build products and test executables are pushed\n\n# to that directory when running the test suite.\n",
        "Line" : 257,
        "CharPositionInLine" : 14
      },
      "10" : {
        "Text" : "# Build products like libswiftCore.so.\n",
        "Line" : 266,
        "CharPositionInLine" : 14
      },
      "11" : {
        "Text" : "# These two directories may contain the same libraries,\n\n# but upload both to device just in case. Duplicates will be\n\n# overwritten, and uploading doesn't take very long anyway.\n",
        "Line" : 268,
        "CharPositionInLine" : 14
      },
      "12" : {
        "Text" : "# second\n",
        "Line" : 292,
        "CharPositionInLine" : 20
      },
      "13" : {
        "Text" : "# 50 minutes\n",
        "Line" : 295,
        "CharPositionInLine" : 47
      },
      "14" : {
        "Text" : "# Add shortcuts for the default variant.\n",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "d02d0341d6fc15048bc40204bef6ad375c7d4df7",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add generated libSyntax headers to global dependencies.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Only build Darwin-specific tools when deploying to OS X.\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "tools/SourceKit/CMakeLists.txt" : {
      "ObjectId" : "d00d06b1d8c2cb4f0ea3f2156da869cacfa03000",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Append our own modules to the module path.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove '_simulator' from the name if it exists\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If we were don't have XPC, just build inproc.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Now include AddSwiftSourceKit\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Choose a deployment target if none was set.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Sadly there are two OS naming conventions.\n\n# xcrun SDK name:   macosx iphoneos iphonesimulator (+ \"internal\" or version)\n\n# -mOS-version-min: macosx ios      ios-simulator\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add deployment target to C/C++ compiler and linker flags.\n\n# FIXME: CMAKE_OSX_DEPLOYMENT_TARGET falls over when used for iOS versions.\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "tools/SourceKit/cmake/modules/AddSwiftSourceKit.cmake" : {
      "ObjectId" : "1f7eebe40f0288b4166217681dce7562904c95f2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Makefile.rules contains special cases for different platforms.\n\n# We restrict ourselves to Darwin for the time being.\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Force re-linking when the exports file changes. Actually, it\n\n# forces recompilation of the source file. The LINK_DEPENDS target\n\n# property only works for makefile-based generators.\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Add default compiler and linker flags to 'target'.\n\n#\n\n# FIXME: this is a HACK.  All SourceKit CMake code using this function should be\n\n# rewritten to use 'add_swift_host_library' or 'add_swift_target_library'.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add variant-specific flags.\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Convert variables to space-separated strings.\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set compilation and link flags.\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Add a new SourceKit library.\n\n#\n\n# Usage:\n\n#   add_sourcekit_library(name     # Name of the library\n\n#     [LINK_LIBS dep1 ...]         # Libraries this library will be linked with\n\n#     [DEPENDS dep1 ...]           # Targets this library depends on\n\n#     [LLVM_COMPONENT_DEPENDS comp1 ...]  # LLVM components this library depends on\n\n#     [INSTALL_IN_COMPONENT comp]  # The Swift installation component that this library belongs to.\n\n#     [SHARED]\n\n#     source1 [source2 source3 ...]) # Sources to add into this library\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add public headers\n",
        "Line" : 106,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add a new SourceKit executable.\n\n#\n\n# Usage:\n\n#   add_sourcekit_executable(name        # Name of the executable\n\n#     [LINK_LIBS dep1 ...]               # Libraries this executable depends on\n\n#     [LLVM_COMPONENT_DEPENDS comp1 ...] # LLVM components this executable\n\n#                                        # depends on\n\n#     [EXCLUDE_FROM_ALL]              # Whether to exclude this executable from\n\n#                                     # the ALL_BUILD target\n\n#     source1 [source2 source3 ...])  # Sources to add into this executable\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Add appropriate dependencies\n",
        "Line" : 230,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Add a new SourceKit framework.\n\n#\n\n# Usage:\n\n#   add_sourcekit_framework(name     # Name of the framework\n\n#     [LINK_LIBS dep1 ...]           # Libraries this framework will link with\n\n#     [LLVM_COMPONENT_DEPENDS comp1 ...]  # LLVM components this framework depends on\n\n#     [MODULEMAP modulemap]          # Module map file for this framework\n\n#     [INSTALL_IN_COMPONENT comp]    # The Swift installation component that this framework belongs to.\n\n#     source1 [source2 source3 ...]) # Sources to add into this framework\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add a new SourceKit XPC service to a framework.\n\n#\n\n# Usage:\n\n#   add_sourcekit_xpc_service(name      # Name of the XPC service\n\n#     [LINK_LIBS dep1 ...]              # Libraries this service will link with\n\n#     [LLVM_COMPONENT_DEPENDS comp1 ...]   # LLVM components this service depends on\n\n#     source1 [source2 source3 ...])    # Sources to add into this service\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add appropriate dependencies\n",
        "Line" : 417,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# This is necessary to avoid having an rpath with an absolute build directory.\n\n# Without this, such an rpath is added during build time and preserved at install time.\n",
        "Line" : 428,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ASan does not play well with exported_symbol option. This should be fixed soon.\n",
        "Line" : 441,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "tools/SourceKit/include/CMakeLists.txt" : {
      "ObjectId" : "ec62daeb103dead94fdf8fa883d925a6be8a9747",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/include/SourceKit/CMakeLists.txt" : {
      "ObjectId" : "194a13a1af8451a09a0aa6013bbac7d0b84b9afa",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/include/SourceKit/Config/config.h.cmake" : {
      "ObjectId" : "dec76932f83bc447c705ec75efa0f4ffe1f4bda8",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* This generated file is for internal use. Do not include it from headers. */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Define to 1 if you have the 'dispatch_block_create' function in <dispatch/dispatch.h> */",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/SourceKit/include/SourceKit/Core/CMakeLists.txt" : {
      "ObjectId" : "bfe7cf6da1f6bc538b79a687d14712ea234394eb",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/lib/CMakeLists.txt" : {
      "ObjectId" : "16bc0f084a9fe8f3cb2cfe6e1452f80532912c56",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/lib/Core/CMakeLists.txt" : {
      "ObjectId" : "ce80d3bbea0668f7a03f80c80fc6719320b4af68",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/lib/Support/CMakeLists.txt" : {
      "ObjectId" : "587f2b62395d64c08c7f9120f17c46ca927103d0",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/lib/SwiftLang/CMakeLists.txt" : {
      "ObjectId" : "f52e46cff4248550d0954751a3e1630c1db2adf8",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clang dependencies.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "tools/SourceKit/tools/CMakeLists.txt" : {
      "ObjectId" : "6c89dc8a6c92be62f9c2ab794f3673227797a07a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/complete-test/CMakeLists.txt" : {
      "ObjectId" : "bac7dc229027cc9bfc9b9b50940a7c08ce6b80c9",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd-repl/CMakeLists.txt" : {
      "ObjectId" : "65782375679f273c945bccd5ccfeba9a8ddb5a65",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt" : {
      "ObjectId" : "74abb0831259e42f12996100b33c6e361f60193a",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd/CMakeLists.txt" : {
      "ObjectId" : "1d235e17df0ccc2c45ae31065c2abbe17096f409",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd/bin/CMakeLists.txt" : {
      "ObjectId" : "3e9c346d8100901ba38dc229b581643922f13459",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt" : {
      "ObjectId" : "16b57894449e917d9260b94cd8e7b00f521c7cff",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# While it is possible to build this as a static library,\n\n# to get the runtime paths correct, it must be linked into a binary\n\n# that is in the same directory as the swift library directory.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create the symlinks necessary to find the swift runtime.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "tools/SourceKit/tools/sourcekitd/bin/XPC/CMakeLists.txt" : {
      "ObjectId" : "7f3998e491258f85e1144379be2382c8de209997",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd/bin/XPC/Client/CMakeLists.txt" : {
      "ObjectId" : "8eb94673f590f186aeb81f44fa1d3415c4c08c7c",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: If you delete sourcekitd.framework, the soft links inside it need\n\n# a CMake reconfigure in order for them to be created.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create the symlink necessary to find the swift stdlib.\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "tools/SourceKit/tools/sourcekitd/bin/XPC/Service/CMakeLists.txt" : {
      "ObjectId" : "a3d29f4ead8e7b8957a93884ed35bea535e6b524",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd/lib/API/CMakeLists.txt" : {
      "ObjectId" : "c29f9d32ff208b9a645b3b5032f20c1038467771",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/sourcekitd/lib/CMakeLists.txt" : {
      "ObjectId" : "01e40a3c9eafa32de7e89dc38a6b9b1854316636",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/SourceKit/tools/swift-lang/CMakeLists.txt" : {
      "ObjectId" : "e096a14b777ff4120f93ce8d99f111ef6d0da9b7",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The build type of swiftlang should agree with stdlib\n\n# This setting could avoid us adding additional search paths when building\n\n# executables using SwiftLang.\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tools/driver/CMakeLists.txt" : {
      "ObjectId" : "796da09ab35a1b0c7bfc1f86aaa228ab3e85ed65",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If building as part of clang, make sure the headers are installed.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/libSwiftSyntaxParser/CMakeLists.txt" : {
      "ObjectId" : "e94b53110aa1043ecd9afbeb891acfb2ddf34872",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use an 'internal' name, this is primarily intended for SwiftSyntax to import.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adds -dead_strip option\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/lldb-moduleimport-test/CMakeLists.txt" : {
      "ObjectId" : "62811e188609568c674c63513ab201e3a62b58c1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/sil-func-extractor/CMakeLists.txt" : {
      "ObjectId" : "5fbffe70d09a42d86d6ce466193b161378e3db0c",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/sil-llvm-gen/CMakeLists.txt" : {
      "ObjectId" : "8c6dc35460822946f95e168de4ffaf6039e14ae4",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clang libraries included to appease the linker on linux.\n",
        "Line" : 11,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 1
    },
    "tools/sil-nm/CMakeLists.txt" : {
      "ObjectId" : "0a7838afa8e1707b15078485c05f31c79a1955d0",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/sil-opt/CMakeLists.txt" : {
      "ObjectId" : "72e9b50e5007216f6fe834f33a759a67e42b3133",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Clang libraries included to appease the linker on linux.\n",
        "Line" : 11,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 1
    },
    "tools/sil-passpipeline-dumper/CMakeLists.txt" : {
      "ObjectId" : "5fa881fc464fbbd6495083ef9e8ab7f9ef3bd47b",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Circular dependencies require re-listing these libraries.\n",
        "Line" : 13,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 1
    },
    "tools/swift-api-digester/CMakeLists.txt" : {
      "ObjectId" : "e9e013b3bf33a60bcef6a5074e14d6b8c2200f96",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-demangle-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "99b3eaeb8a3917f79ea8ce4451180484363b8600",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-demangle-yamldump/CMakeLists.txt" : {
      "ObjectId" : "9a0d480f5e7c7d3dba39fc028e7803584e2e744d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-demangle/CMakeLists.txt" : {
      "ObjectId" : "a3f395ca3b5491df731c4bc0a693e7b477017260",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-ide-test/CMakeLists.txt" : {
      "ObjectId" : "e412e508bf4ac3d014ce4860afdf7c456d375aa2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If libxml2 is available, make it available for swift-ide-test.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Create a symlink for swift-api-dump.py in the bin directory\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/swift-llvm-opt/CMakeLists.txt" : {
      "ObjectId" : "80ea3707b156a57f32aafb384b4fe343e7b38bf2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Swift libraries included to appease the linker on linux.\n",
        "Line" : 8,
        "CharPositionInLine" : 24
      },
      "1" : {
        "Text" : "# Clang libraries included to appease the linker on linux.\n",
        "Line" : 11,
        "CharPositionInLine" : 24
      },
      "2" : {
        "Text" : "# LLVM libraries included to appease the linker on linux.\n",
        "Line" : 14,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 3
    },
    "tools/swift-refactor/CMakeLists.txt" : {
      "ObjectId" : "b0006759007b07e2b96383089fab83173548d014",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-reflection-dump/CMakeLists.txt" : {
      "ObjectId" : "371e23bfe234a3fb65249523ca68698647abbaad",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-reflection-fuzzer/CMakeLists.txt" : {
      "ObjectId" : "3ea54fac714baf2574cb3f1e475c1a13da561c36",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-remoteast-test/CMakeLists.txt" : {
      "ObjectId" : "99526a5f32aa2abbcd5582651811b10e5f869710",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If building as part of clang, make sure the headers are installed.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/swift-stdlib-tool/CMakeLists.txt" : {
      "ObjectId" : "b280077cb83680ce4cc87aa0f9bd2dc4028c66f1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/swift-syntax-parser-test/CMakeLists.txt" : {
      "ObjectId" : "c1beb7949f1c1ce460692545d3eef92d5449d1b1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prioritize finding the parser library from the build/lib directory.\n\n# Otherwise it may find it from the 'lib/swift/macosx' directory which could\n\n# be out-of-date.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "tools/swift-syntax-test/CMakeLists.txt" : {
      "ObjectId" : "f69e4f66f2d85203ded282073f089a5c81606ccd",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/AST/CMakeLists.txt" : {
      "ObjectId" : "242ec64817ebbb8290d0f02457e74039b7a69a9d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Circular dependencies.\n",
        "Line" : 13,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 1
    },
    "unittests/Basic/CMakeLists.txt" : {
      "ObjectId" : "10a7bdf509f2e89273117e9a511c29dc2c7858a6",
      "LastModified" : "2019-04-16T23:57:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/CMakeLists.txt" : {
      "ObjectId" : "0aa744d919f6cc3ba163732dfbdafdc1b4c83936",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We can't link C++ unit tests unless we build the tools.\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Runtime tests depend on symbols in StdlibUnittest.\n\n#\n\n# FIXME: cross-compile runtime unittests.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "unittests/ClangImporter/CMakeLists.txt" : {
      "ObjectId" : "4f86c3da90e394b1024443345fe758d3e4fc67f7",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Driver/CMakeLists.txt" : {
      "ObjectId" : "d85fc16fe52a98e8044307d8d9cfbcdf93d69ed2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/FrontendTool/CMakeLists.txt" : {
      "ObjectId" : "e726099af6b8687e0497b249ec504e41ab34f623",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/IDE/CMakeLists.txt" : {
      "ObjectId" : "f55846dd2c6ada3d8ac8bb5fb5e35218c5bcba69",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Parse/CMakeLists.txt" : {
      "ObjectId" : "d762d4b9c24d8e0867bde30fd79eb245141d8df3",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Sema must go last because of circular dependencies with AST.\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "unittests/Reflection/CMakeLists.txt" : {
      "ObjectId" : "0354f0c10a0487a06caaf91402ce3bdcf4ff4a18",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/SourceKit/CMakeLists.txt" : {
      "ObjectId" : "9ef3b6b8eaeabbc411425c15ac0a008ec2b69250",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/SourceKit/Support/CMakeLists.txt" : {
      "ObjectId" : "da17a059b87b35928d47a8546c1cd43ed93853ea",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/SourceKit/SwiftLang/CMakeLists.txt" : {
      "ObjectId" : "a94360b03171a1ae6518447308da58ffc6939125",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/SwiftDemangle/CMakeLists.txt" : {
      "ObjectId" : "9ba1aeb348d2d5a20298d5982be986d0adc2202d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/Syntax/CMakeLists.txt" : {
      "ObjectId" : "3acb46d81d2399fe198bbaf8f0a803d532948f68",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "unittests/SyntaxParser/CMakeLists.txt" : {
      "ObjectId" : "6082cbed76a87091c7f3babd9ef1ab958f39c17b",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Prioritize finding the parser library from the build/lib directory.\n\n# Otherwise it may find it from the 'lib/swift/macosx' directory which could\n\n# be out-of-date.\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "unittests/runtime/CMakeLists.txt" : {
      "ObjectId" : "60f365b7b3d0613de63a019200bf930a4ed50657",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do nothing\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# If we use Clang-cl or MSVC, CMake provides default compiler and linker flags that are incompatible\n\n# with the frontend of Clang or Clang++.\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We need to link swiftCore on Darwin because the runtime still relies on\n\n# some stdlib hooks to implement SwiftObject.\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# The runtime tests link to internal runtime symbols, which aren't exported\n\n# from the swiftCore dylib, so we need to link to both the runtime archive\n\n# and the stdlib.\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# The local stdlib implementation provides definitions of the swiftCore\n\n# interfaes to avoid pulling in swiftCore itself.  Build the SwiftRuntimeTests\n\n# with swiftCore_EXPORTS to permit exporting the stdlib interfaces.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# FIXME: cross-compile for all variants.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "unittests/runtime/LongTests/CMakeLists.txt" : {
      "ObjectId" : "a25efc9323fefc58e6cc5d306d9ca2743960cae5",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   Placeholder for Darwin Foundation tests (currently none)\n\n#    find_library(FOUNDATION_LIBRARY Foundation)\n\n#    list(APPEND PLATFORM_SOURCES\n\n#      YourTestNameHere.mm\n\n#      )\n\n#    # We need to link swiftCore on Darwin because the runtime still relies on\n\n#    # some stdlib hooks to implement SwiftObject.\n\n#    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES\n\n#      ${FOUNDATION_LIBRARY}\n\n#      swiftStdlibUnittest${SWIFT_PRIMARY_VARIANT_SUFFIX}\n\n#      )\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The runtime tests link to internal runtime symbols, which aren't exported\n\n# from the swiftCore dylib, so we need to link to both the runtime archive\n\n# and the stdlib.\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# The local stdlib implementation provides definitions of the swiftCore\n\n# interfaes to avoid pulling in swiftCore itself.  Build the\n\n# SwiftRuntimeLongTests with swiftCore_EXPORTS to permit exporting the stdlib\n\n# interfaces.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# FIXME: cross-compile for all variants.\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "utils/CMakeLists.txt" : {
      "ObjectId" : "a5429ca1b6c3c9bccbfd35f60d8e1970379742b2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We install LLVM's FileCheck, if requested.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/api_checker/CMakeLists.txt" : {
      "ObjectId" : "56e22505f80c9249440afc064bbdd4edb511a42d",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/lldb/CMakeLists.txt" : {
      "ObjectId" : "5880d6f701add5cded7d0e0c69f8bf738abddbb1",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/test-clustered-bit-vector/Makefile" : {
      "ObjectId" : "0f0e6d5acfb74ef11a1f6a33d4f1df9906f46a79",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "utils/test-prefix-map/Makefile" : {
      "ObjectId" : "7493163d291f50b2b33085f1b4afe4623e7a07ba",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "utils/test-successor-map/Makefile" : {
      "ObjectId" : "05932a978752c7c3bcbdb6d599ec8f5c6111b4a5",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "utils/vim/CMakeLists.txt" : {
      "ObjectId" : "7fa6ce50f2eea0eb12088cafb4ed9bb08e003ac2",
      "LastModified" : "2019-04-12T20:28:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 220,
    "CMAKESOURCE" : 1,
    "MAKEFILE" : 4
  },
  "ElapsedTime" : 45938
}