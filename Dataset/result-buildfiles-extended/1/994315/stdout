{
  "Repository" : "994315",
  "Revision" : "HEAD",
  "ObjectId" : "61715fc84806f37db99519da62882f88f99cbf60",
  "CommitTime" : "2019-02-21T14:50:46Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f2175c59d11a0a7c620c782da27adb99fc1c245d",
      "LastModified" : "2016-03-03T01:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_SKIP_RPATH OFF)\n\n#set(CMAKE_SKIP_BUILD_RPATH  OFF)\n\n#set(CMAKE_SKIP_INSTALL_RPATH ON)\n\n#set(CMAKE_BUILD_WITH_INSTALL_RPATH ON)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set id_size\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test endianness\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for threads\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find some cocaine\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Find eblob\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Handystats instrumentation\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Handystats symbols are spilled across many source files,\n\n# so even if we do want to disable handystats instrumentation,\n\n# handystats headers still needed to set macros to empty stubs.\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# GoLD does no overlinking\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Collect all libraries together\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Build parts\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#export(PACKAGE Elliptics)\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\tinstall( DIRECTORY\n\n#\t\t${CMAKE_CURRENT_BINARY_DIR}/doc/html\n\n#\t\t${CMAKE_CURRENT_BINARY_DIR}/doc/qch\n\n#\t\tDESTINATION share/elliptics/doc\n\n#        )\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "bindings/CMakeLists.txt" : {
      "ObjectId" : "094045a2b64f3d7b89352abfe7cd5bebfeb7702d",
      "LastModified" : "2014-08-01T00:57:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check for boost\n\n#set(Boost_USE_STATIC_LIBS ON)\n\n#set(Boost_USE_STLPORT ON)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bindings/cpp/CMakeLists.txt" : {
      "ObjectId" : "d058f4418edaf287bb3990de1670d4a22e53ae05",
      "LastModified" : "2015-10-15T15:22:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Added includes for better IDE's experience\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "bindings/python/CMakeLists.txt" : {
      "ObjectId" : "97fb78013efed8d19ef11274318e105070c966a4",
      "LastModified" : "2014-08-01T00:57:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cache/CMakeLists.txt" : {
      "ObjectId" : "1408b841a81cd1aaf93195938055d6b0b821d8fe",
      "LastModified" : "2014-08-01T00:57:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/CheckAtomic.cmake" : {
      "ObjectId" : "3408514ea42f87e43893c7c82267b802ef692d14",
      "LastModified" : "2012-08-06T10:37:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check whether libatomic or __sync are supported\n\n# Sets variables:\n\n#  HAVE_SYNC_ATOMIC_SUPPORT - whether __sync support is available\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CheckIoprio.cmake" : {
      "ObjectId" : "fae48a2c4d6c2927d34ab1a089d1efded1281fdc",
      "LastModified" : "2012-08-02T19:39:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check whether ioprio is supported\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CheckLargefile.cmake" : {
      "ObjectId" : "fb001bf1b88062d3aea0b5f01c4db3b4c1a60048",
      "LastModified" : "2012-08-02T19:39:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check whether large files are supported\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CheckProcStats.cmake" : {
      "ObjectId" : "3d47abb10cb42d9a064f0b90f0ce6174f244f19d",
      "LastModified" : "2012-08-06T10:37:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check supported methods to gather system statistics\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CheckSendfile.cmake" : {
      "ObjectId" : "ec267dee8789a7d7c70c2aa45335c45380b5f53a",
      "LastModified" : "2012-08-06T10:37:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check whether sendfile() is supported and what prototype it has\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/CreateStdint.cmake" : {
      "ObjectId" : "68218e4ef80af0bcafb357296d0aaac49cb2ced5",
      "LastModified" : "2012-08-21T17:07:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Create local stdint.h file or other headerfile with the name given.\n\n# In most cases that file will just \"#include <stdint.h>\" or \"#include <inttypes.h>\",\n\n# while in some environments it will provide some common definitions and typedefs.\n\n#\n\n# Defines macro CREATE_STDINT(FILENAME)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check if C type exists\n\n# Defines HAVE_${TYPE} variable\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# [HEADER]\n",
        "Line" : 12,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# Check the char_data_model (CDM) and long_data_model (LDM) and store the data model name in data_model (DM)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check sizes of default types\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Make variable contents suitable for #define\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make define name for define guard from some filename\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Create stdint.h and store its contents in FILENAME\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# 1997 typedefs\n",
        "Line" : 130,
        "CharPositionInLine" : 45
      },
      "9" : {
        "Text" : "# 1995 typedefs\n",
        "Line" : 133,
        "CharPositionInLine" : 47
      },
      "10" : {
        "Text" : "# BSD typedefs\n",
        "Line" : 138,
        "CharPositionInLine" : 49
      },
      "11" : {
        "Text" : "# TODO FIXME\n",
        "Line" : 163,
        "CharPositionInLine" : 23
      },
      "12" : {
        "Text" : "# Prevent compiler messages about newlines\n",
        "Line" : 575,
        "CharPositionInLine" : 36
      },
      "CommentCount" : 13
    },
    "cmake/Modules/FindCocaine.cmake" : {
      "ObjectId" : "8be7480957277fb96a67f1c2bb9646aa396a2f8f",
      "LastModified" : "2013-01-11T20:18:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find COCAINE engine - engine that makes you fly\n\n# https://github.com/cocaine/cocaine-core\n\n#\n\n# This module defines\n\n#  COCAINE_FOUND - whether the cocaine was found\n\n#  COCAINE_LIBRARIES - cocaine libraries\n\n#  COCAINE_INCLUDE_DIRS - the include path of the cocaine library\n\n#  COCAINE_CFLAGS - flags to compile with\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindCocaineNative.cmake" : {
      "ObjectId" : "bd714bafd8c51a962d837b102e36b89db82b75a4",
      "LastModified" : "2014-08-01T00:57:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Cocaine Native Framework - base for building c++ applications running under the Cocaine.\n\n# https://github.com/cocaine/cocaine-framework-native\n\n#\n\n# This module defines\n\n#  CocaineNative_FOUND - whether the cocaine-framework-native was found\n\n#  CocaineNative_LIBRARIES - it's libraries\n\n#  CocaineNative_INCLUDE_DIRS - it's include paths\n\n#  CocaineNative_CFLAGS - flags to compile with\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindEblob.cmake" : {
      "ObjectId" : "c91de14cadc2ee8bf23af0acd189011fdaa00bb9",
      "LastModified" : "2012-08-21T17:50:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Eblob\n\n#\n\n# This module defines\n\n#  EBLOB_FOUND - whether the eblob was found\n\n#  EBLOB_LIBRARIES - eblob libraries\n\n#  EBLOB_INCLUDE_DIRS - the include path of the eblob library\n\n#  EBLOB_CFLAGS - eblob compile flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindHandystats.cmake" : {
      "ObjectId" : "00f45eb82d679793243eb7e906e5255f6ec45205",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find HANDYSTATS library\n\n#\n\n# This module defines\n\n#  HANDYSTATS_FOUND - whether the handystats was found\n\n#  HANDYSTATS_LIBRARY - handystats libraries\n\n#  HANDYSTATS_INCLUDE_DIRS - the include path of the handystats library\n\n#  HANDYSTATS_CFLAGS - flags to compile with\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#mark_as_advanced(HANDYSTATS_LIBRARY HANDYSTATS_INCLUDE_DIRS HANDYSTATS_CFLAGS)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindMsgpack.cmake" : {
      "ObjectId" : "590e9b8088ee79b37ec6f3bbfd6c287dd7f89cdc",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the msgpack library\n\n# http://msgpack.org\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindPythonExtensionDir.cmake" : {
      "ObjectId" : "6c4aeb564e6b38d8cc1b73e4433320fd948eabe3",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FixRpath.cmake" : {
      "ObjectId" : "f2405ea7b42f12c433f9b3f3d4097d5531befec0",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# http://www.cmake.org/Wiki/CMake_RPATH_handling#Always_full_RPATH\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/Modules/locate_library.cmake" : {
      "ObjectId" : "4c0386d92a90a20032aa5d1c75b9050960b1e0b8",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cocaine/plugins/CMakeLists.txt" : {
      "ObjectId" : "1a57d491bd8f08aa03383bab9dbf0ea19b1d50c8",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "8f6a707aa80572ad86f8c8d90cf92a71e9bb6d96",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/CMakeLists.txt" : {
      "ObjectId" : "7f7856161716dffc3f2512d2b21fc21892c44981",
      "LastModified" : "2015-10-15T15:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "indexes/CMakeLists.txt" : {
      "ObjectId" : "c4c35559e3004b27addc34848a2867befcc6d785",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "library/CMakeLists.txt" : {
      "ObjectId" : "b1eb28e43fa2f3b8f21c8981603d49f0211b5339",
      "LastModified" : "2015-10-15T15:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "monitor/CMakeLists.txt" : {
      "ObjectId" : "7d0c6fce976e92b16346f57fdc07e339e813c866",
      "LastModified" : "2015-10-15T15:22:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "srw/CMakeLists.txt" : {
      "ObjectId" : "10c2ad1b67824ed916c71ea814294419a7b89082",
      "LastModified" : "2016-03-03T01:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set_target_properties(elliptics_cocaine PROPERTIES\n\n#    VERSION ${ELLIPTICS_VERSION}\n\n#    SOVERSION ${ELLIPTICS_VERSION_ABI}\n\n#    )\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#install(TARGETS elliptics_cocaine\n\n#    LIBRARY DESTINATION lib${LIB_SUFFIX}\n\n#    ARCHIVE DESTINATION lib${LIB_SUFFIX}\n\n#    BUNDLE DESTINATION library\n\n#    )\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "4c45768c487426aff6ae1c3ac728e16c5259ccd4",
      "LastModified" : "2016-03-03T01:53:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# add_test_target({target} {test-executables} DEPENDS {required-dependencies})\n\n#\n\n# Defines target for running a set of test modules.\n\n#\n\n# {test-executables} is a list of test modules build targets.\n\n#\n\n# {required-dependencies} should specify both build dependencies and runtime dependencies.\n\n# Such as dnet_ioserv, private instances of which are being created during execution of\n\n# many tests.\n\n#\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Keyword DEPENDS separates test names from dependencies\n",
        "Line" : 57,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# message(\"ARGS ${ARGN}\")\n\n# message(\"KW ${deps_kw}\")\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# this is actually list split operation,\n\n# argument list gets splitted by DEPENDS into two lists: tests and deps\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# message(\"INDEX ${i}\")\n",
        "Line" : 71,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# message(\"START ${deps_start}, END ${deps_end}\")\n",
        "Line" : 79,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# message(\"INDEX ${i}\")\n",
        "Line" : 83,
        "CharPositionInLine" : 16
      },
      "7" : {
        "Text" : "# message(\"TESTS ${tests}\")\n\n# message(\"DEPS ${deps}\")\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# All C++ tests (except one or two) launch their own private instance of\n\n# dnet_ioserv to run against it. So its a common runtime dependency.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Definitions of C++ test modules and test targets.\n\n#\n\n# How to add new C++ test module:\n\n#  1. define build target using add_executable() etc.\n\n#  2. define test target using add_test_target()\n\n#  3. add build target name to TESTS_LIST\n\n#\n\n# As a rule, target names should follow this scheme: if {name} is a base\n\n# test name, then build target should be named \"dnet_{name}_test\",\n\n# and test target should be named \"test_{name}\".\n\n#\n\n# Easiest way to add new test is to copy one of the definition blocks\n\n# below and replace base names.\n\n#\n\n#TODO: may be its worth making utility function for test definition block\n\n#\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#FIXME: add set_target_properties?\n\n# set_target_properties(dnet_cpp_indexes_test ${TEST_PROPERTIES})\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#FIXME: is this also a test? Then uncomment the next line and add it to the TESTS_LIST below.\n\n# add_test_target(test_indexes dnet_cpp_indexes_test)\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n\n# General list of test modules (implemented in C++).\n\n#\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# Define target `test_srw`\n\n#\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#\n\n# Append test_srw to general list of tests\n\n#\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#\n\n# Tests written in python use dnet_run_servers to instantiate testing environments.\n\n#\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#\n\n# Target `test` execute all available tests (both implemented in C++ and in python)\n\n#\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "tests/remotes/CMakeLists.txt" : {
      "ObjectId" : "e816c1d635a2264fbf3f9b69d6df6b9966318269",
      "LastModified" : "2014-10-04T19:24:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 28
  },
  "ElapsedTime" : 4690
}