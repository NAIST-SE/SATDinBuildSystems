{
  "Repository" : "10382427",
  "Revision" : "HEAD",
  "ObjectId" : "e7deeea19d632af076fb7895b2f4117d01706d89",
  "CommitTime" : "2019-04-10T17:48:19Z",
  "Files" : {
    "core/pom.xml" : {
      "ObjectId" : "fc6f9de6d749d51ba6bd45582cb2ff641843b3ba",
      "LastModified" : "2019-03-08T19:24:46Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n      Manually add a dependency that guava-gwt needs but doesn't declare as of May 2018.\n      But only in the test scope, since that's the only place that _we_ need it.\n      _Downstream users_ might need to add it manually, as we've done here, but only until we fix guava-gwt and update Truth to use the new version.\n      And anyway, the current setup is causing users problems, since checker-qual is built for Java 8: https://github.com/google/truth/issues/479\n      ",
        "Line" : 26,
        "CharPositionInLine" : 10
      },
      "1" : {
        "Text" : " Required only to build the -gwt sub-artifact. ",
        "Line" : 40,
        "CharPositionInLine" : 59
      },
      "2" : {
        "Text" : " TODO(cgruber): Replace this with Gwt annotation processing plugin. ",
        "Line" : 113,
        "CharPositionInLine" : 84
      },
      "3" : {
        "Text" : " Fix OutOfMemoryError in Travis. ",
        "Line" : 161,
        "CharPositionInLine" : 55
      },
      "4" : {
        "Text" : " Keep these timeouts very large because, if we hit the timeout, the tests silently pass :( ",
        "Line" : 166,
        "CharPositionInLine" : 113
      },
      "5" : {
        "Text" : " seconds ",
        "Line" : 167,
        "CharPositionInLine" : 50
      },
      "6" : {
        "Text" : " minutes ",
        "Line" : 168,
        "CharPositionInLine" : 55
      },
      "CommentCount" : 7
    },
    "extensions/java8/pom.xml" : {
      "ObjectId" : "d78a96b214c74d288ab8dbd92033860f64cfa6cb",
      "LastModified" : "2018-09-04T19:52:12Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "extensions/liteproto/pom.xml" : {
      "ObjectId" : "41cf8015333516f0daf7b334ad350242fda5a1be",
      "LastModified" : "2018-09-04T19:52:12Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " protobuf-lite is not compatible with protobuf-java, so we mark it optional. ",
        "Line" : 47,
        "CharPositionInLine" : 91
      },
      "CommentCount" : 1
    },
    "extensions/pom.xml" : {
      "ObjectId" : "49ea34ca679b4ee8cd069a06bf691de549308769",
      "LastModified" : "2018-01-04T18:40:32Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "extensions/proto/pom.xml" : {
      "ObjectId" : "428eff797ba9d5b5917e3389ece3e08899b7cdbf",
      "LastModified" : "2018-09-04T19:52:12Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "extensions/re2j/pom.xml" : {
      "ObjectId" : "5c7a936d3410fb12fea98bbaa7f4782c3abcd4bb",
      "LastModified" : "2018-09-04T19:52:12Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "pom.xml" : {
      "ObjectId" : "62a266715eb03fcd374e5c4075be51442b2207f0",
      "LastModified" : "2019-03-08T19:24:46Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Properties for plugins for which pluginManagement hasn't been working for us. ",
        "Line" : 21,
        "CharPositionInLine" : 91
      },
      "1" : {
        "Text" : " Properties for multiple-artifact deps. ",
        "Line" : 25,
        "CharPositionInLine" : 52
      },
      "2" : {
        "Text" : " Property for protobuf-lite protocArtifact, which isn't a \"normal\" Maven dep. ",
        "Line" : 31,
        "CharPositionInLine" : 90
      },
      "3" : {
        "Text" : " Property for protobuf-java protocArtifact, which ought to be the same as protobuf.version but can't be internally at the moment. ",
        "Line" : 33,
        "CharPositionInLine" : 142
      },
      "4" : {
        "Text" : " Property for an extension, since Maven doesn't have extensionManagement. ",
        "Line" : 36,
        "CharPositionInLine" : 86
      },
      "5" : {
        "Text" : "\n        We could add the other modules of Truth, but there's no need because no\n        modules depend on them yet.\n        ",
        "Line" : 54,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "\n          In addition to setting the version of Guava that's used when Truth\n          depends directly on com.google.common:guava, this section also\n          overrides the version that's pulled in transitively by guava-gwt\n          (which is a test-scope dependency of core Truth). The Guava APIs\n          \"missing\" in guava-android might cause us problems down the line if we\n          actually started to run nontrivial GWT tests; I'm not sure.\n          ",
        "Line" : 63,
        "CharPositionInLine" : 14
      },
      "7" : {
        "Text" : " TODO(cpovirk): Remove after a Compile-Testing release moves this to test scope. ",
        "Line" : 122,
        "CharPositionInLine" : 99
      },
      "8" : {
        "Text" : " TODO(cpovirk): Link to the version that we depend on? ",
        "Line" : 251,
        "CharPositionInLine" : 77
      },
      "9" : {
        "Text" : " work around ubuntu bug ",
        "Line" : 259,
        "CharPositionInLine" : 65
      },
      "10" : {
        "Text" : "\n                    Perhaps surprisingly, requireUpperBoundDeps catches problems\n                    that dependencyConvergence does not: If we use\n                    dependencyManagement to force Maven to use an *old* version\n                    of a dependency, that will satisfy dependencyConvergence\n                    (because the version is now consistent), but it will not\n                    satisfy requireUpperBoundDeps, which apparently still sees\n                    the original request for the newer version.\n                    requireUpperBoundDeps's behavior is probably a good thing.\n\n                    But, in what seems like a bug, dependencyConvergence catches\n                    certain upper-bound problems that requireUpperBoundDeps does\n                    not. To be clear, it's usually *not* a bug for\n                    dependencyConvergence to give an error when\n                    requireUpperBoundDeps does not: dependencyConvergence is in\n                    some ways a stricter test than requireUpperBoundDeps. What\n                    I'm seeing here is weirder: When I changed liteproto to\n                    request checker-compat-qual 2.1.0 and\n                    error_prone_annotations 2.0.9, both older versions than\n                    those inherited through core Truth, dependencyConvergence\n                    flagged both as expected, but requireUpperBoundDeps flagged\n                    only error_prone_annotations. The reason for this may have\n                    something to do with guava-25.1-android's dependency on the\n                    even older checker-compat-qual 2.0.0: When I updated Truth\n                    to depend on guava-26.0, which depends on\n                    checker-compat-qual 2.5.3, then requireUpperBoundDeps\n                    detected the problem.\n\n                    I filed a bug against Maven:\n                    https://issues.apache.org/jira/browse/MENFORCER-316\n                    ",
        "Line" : 338,
        "CharPositionInLine" : 24
      },
      "11" : {
        "Text" : " We have some deps on guava-android and others on guava-jre. ",
        "Line" : 341,
        "CharPositionInLine" : 91
      },
      "12" : {
        "Text" : "\n                    This should be a no-op for us, since we try to list\n                    everything in dependencyManagement. But it should at least\n                    make sure that we do remember to put new deps into\n                    dependencyManagement. It might also flag conflicts that\n                    exist only in transitive dependencies. If that becomes too\n                    much of a pain, we can back this check out.\n                    ",
        "Line" : 352,
        "CharPositionInLine" : 24
      },
      "13" : {
        "Text" : "\n                    Note that neither of these rules would catch a conflict\n                    between, say, java8 and liteproto, since no Truth module\n                    depends on both of those. If we wanted, we could create\n                    such a module.\n                    ",
        "Line" : 359,
        "CharPositionInLine" : 24
      },
      "14" : {
        "Text" : "\n        Force a version >2.7 for this parent project. If we use the current\n        default of 2.7, Maven ignores this parent project's configuration when\n        running maven-javadoc-plugin in children during releases.\n        ",
        "Line" : 385,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "\n        Similar. Without this, Maven tries to run maven-enforcer-plugin 1.0,\n        and it fails to construct an instance of the rule class, apparently\n        because of a mismatch between the new Maven APIs and the old Enforcer\n        APIs.\n        ",
        "Line" : 395,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 16
    }
  },
  "FileTypes" : {
    "MAVEN" : 7
  },
  "ElapsedTime" : 1143
}