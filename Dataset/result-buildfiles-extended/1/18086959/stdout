{
  "Repository" : "18086959",
  "Revision" : "HEAD",
  "ObjectId" : "bd62058cb3d7fdaf85ea2841d32199389152e7fa",
  "CommitTime" : "2018-04-03T04:14:42Z",
  "Files" : {
    "BasisBootstrapping.cmake" : {
      "ObjectId" : "112d83bd66dfe54bf133f03fb27e8da9209d783a",
      "LastModified" : "2015-02-24T05:15:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2014 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  BasisBootstrapping.cmake\n\n# @brief Auxiliary function to bootstrap the build of CMake BASIS.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n## @brief Boostrap build of CMake BASIS during configuration of project.\n\n#\n\n# This function downloads, configures, and builds CMake BASIS. If the (cached)\n\n# variable @c BASIS_INSTALL_PREFIX is set, it also installs BASIS into the\n\n# specified directory. This is only required if the project uses the\n\n# BASIS Utilities. Otherwise, the BASIS build tree can be used directly to\n\n# build the software project which bootstrapped BASIS. It is not required\n\n# during runtime of the software.\n\n#\n\n# @param[in] ARGN The list of arguments is parsed as follows:\n\n# @par\n\n# <table border=0>\n\n#  <tr>\n\n#    @tp @b VERSION major.minor.patch|commit @endtp\n\n#    <td>Release, commit, or branch of CMake BASIS to download.</td>\n\n#  </tr>\n\n#  <tr>\n\n#    @tp @b DOWNLOAD_URL url @endtp\n\n#    <td>URL from which to download the CMake BASIS source distribution package.\n\n#        The given URL can be either a complete download URL which includes the\n\n#        package name (which must end with .tar.gz or .zip), the path of\n\n#        a remote directory which contains the CMake BASIS packages named\n\n#        cmake-basis-version.zip (for Windows) and cmake-basis-version.tar.gz\n\n#        (for Unix), or the URL of a Git repository.\n\n#        (default: http://opensource.andreasschuh.com/cmake-basis/_downloads\n\n#                  or git@github.com:schuhschuh/cmake-basis.git)</td>\n\n#  </tr>\n\n#  <tr>\n\n#    @tp @b INFORM_USER @endtp\n\n#    <td>This option causes this function to abort the initial configure step\n\n#        of CMake. It informs the user that this project required BASIS for\n\n#        the build configuration and that it upon the next configure run it\n\n#        will attempt to download and build BASIS automatically. It further\n\n#        notes that the user can set the @c BASIS_DIR variable prior to the\n\n#        next configure run in order to use an existing BASIS installation.\n\n#        (default: off)</td>\n\n#  </tr>\n\n#  <tr>\n\n#     @tp @b BASIS_VARIABLE_NAME value @endtp\n\n#     <td>Adds a build configuration to the CMake command used to configure\n\n#         the build of CMake BASIS using the -D option of @c cmake. The\n\n#         @c BASIS_VARIABLE_NAME can be any CMake option or variable that\n\n#         is normally used to configure a BASIS build using CMake. For example,\n\n#         USE_PythonInterp, USE_BASH, USE_DOXYGEN.</td>\n\n#  </tr>\n\n# </table>\n\n#\n\n# @returns Sets the @c BASIS_DIR variable to the bootstrapped BASIS build.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# parse arguments -- unparsed arguments are passed on to CMake using -D\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# abort the first time to give users a chance to specify where their\n\n# CMake BASIS installation is located by setting BASIS_DIR in the GUI\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# bootstrap BASIS build/installation only if not done before\n\n# or when BASIS_INSTALL_PREFIX has changed\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# download and extract source code if not done before\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# clone Git repository and checkout specified commit/branch\n",
        "Line" : 119,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# download source code distribution package\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# extract source package\n",
        "Line" : 173,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# configure\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# do not register this BASIS build/installation\n\n# as it should only be used by this project\n",
        "Line" : 188,
        "CharPositionInLine" : 54
      },
      "12" : {
        "Text" : "# build\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# install\n",
        "Line" : 207,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# remember in which directory BASIS was installed to avoid re-running\n\n# the bootstrapping every time the project needs to be re-configured\n",
        "Line" : 215,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "BasisProject.cmake" : {
      "ObjectId" : "dc9e90aef8ee7597f19cb66b3f950e0766983f8e",
      "LastModified" : "2017-07-27T05:32:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ===============================================================================\n\n# Copyright (c) 2015-2016 Andrew Hundt\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ===============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################################\n\n# @file  BasisProject.cmake\n\n# @brief Sets basic information about a BASIS Project and calls basis_project().\n\n#\n\n# This file defines basic information about a project by calling\n\n# the basis_project() function. This basic information, also known as metadata,\n\n# is used by BASIS to setup the project. Moreover, if the project is a module\n\n# of another BASIS project, the dependencies to other modules have to be specified\n\n# here such that the top-level project can analyze the inter-module dependencies.\n\n#\n\n# @sa http://opensource.andreasschuh.com/cmake-basis/standard/modules.html\n\n#\n\n# However, not only dependencies to other modules can be specified here,\n\n# but also dependencies on external packages. A more flexible alternative to\n\n# resolve external dependencies is to add the corresponding basis_find_package()\n\n# statements to the Depends.cmake file. This should, however, only be done\n\n# if specifying the dependencies as arguments to the basis_project() function\n\n# cannot be used to resolve the dependencies properly. If you only need to\n\n# make use of additional variables set by the package configuration file\n\n# of the external package or the corresponding Find<Package>.cmake module,\n\n# add the related CMake code to the Settings.cmake file instead.\n\n#\n\n# Example:\n\n# @code\n\n# basis_project (\n\n#   # ------------------------------------------------------------------------\n\n#   # meta-data\n\n#   NAME              MyProject\n\n#   PACKAGE_VENDOR    shortvname     # Note: PACKAGE_VENDOR will also be part of the default installation path\n\n#   VERSION           1.1.5\n\n#   DESCRIPTION       \"This is the description of the project, which is useful for this\"\n\n#                     \" important thing and that important thing.\"\n\n#                     \" MyProject follows the BASIS implementation standard.\"\n\n#   AUTHOR            \"Ima Nauthor\"\n\n#   PROVIDER_NAME     \"Great Product Co\"\n\n#   PROVIDER_WEBSITE  \"http://www.greatproductcompany.com\"\n\n#   PROVIDER_LOGO     \"${PROJECT_SOURCE_DIR}/doc/logo.png\"\n\n#   DIVISION_NAME     \"Awesome App Division\"\n\n#   DIVISION_WEBSITE  \"http://www.awesomeapp.greatproductcompany.com\"\n\n#   DIVISION_LOGO     \"\"${PROJECT_SOURCE_DIR}/doc/division_logo.png\"\"\n\n#   COPYRIGHT         \"Copyright (c) 2013 Great Product Co\"\n\n#   LICENSE           \"See COPYING file.\"\n\n#   CONTACT           \"Contact <info@greatproductcompany.com>\"\n\n#   # ------------------------------------------------------------------------\n\n#   # dependencies\n\n#   DEPENDS\n\n#      NiftiCLib\n\n#      PythonInterp\n\n#   OPTIONAL_DEPENDS\n\n#     PythonInterp\n\n#     JythonInterp\n\n#     Perl\n\n#     MATLAB{matlab}\n\n#     BASH\n\n#     Doxygen\n\n#     Sphinx{build}\n\n#     ITK # TODO required by basistest-driver, get rid of this dependency\n\n#   TEST_DEPENDS\n\n#      Perl\n\n#   OPTIONAL_TEST_DEPENDS\n\n#     MATLAB{mex}\n\n#     MATLAB{mcc}\n\n# )\n\n# @endcode\n\n#\n\n# @ingroup BasisSettings\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Note: The #<*> dependency patterns are required by the basisproject tool and\n\n#       should be kept on a separate line as last commented argument of the\n\n#       corresponding options of the basis_project() command. The TEMPLATE\n\n#       option and set argument are also required by this tool and should not\n\n#       be changed manually. The argument is updated by basisproject --update.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# meta-data\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#<author>\n",
        "Line" : 88,
        "CharPositionInLine" : 19
      },
      "5" : {
        "Text" : "# Note: VENDOR will also be part of the default installation path\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#<vendor>\n\n#<provider-name>\n\n#<provider-logo>\n",
        "Line" : 91,
        "CharPositionInLine" : 19
      },
      "7" : {
        "Text" : "#<division-name>\n\n#<division-logo>\n",
        "Line" : 95,
        "CharPositionInLine" : 19
      },
      "8" : {
        "Text" : "# --------------------------------------------------------------------------\n\n# dependencies\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# google flatbuffers https://github.com/google/flatbuffers\n",
        "Line" : 106,
        "CharPositionInLine" : 16
      },
      "10" : {
        "Text" : "#<dependency>\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#<optional-dependency>\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# pthreads, see CMake documentation\n\n# Linear Algebra eigen.tuxfamily.com\n\n# Used in Kuka Fast Robot Interface for serializing and deserializing protobufs\n\n# http://ceres-solver.org/ used in arm hand eye calibration\n",
        "Line" : 111,
        "CharPositionInLine" : 23
      },
      "13" : {
        "Text" : "#CAMODOCAL         # used for hand eye calibration plugin, files included directly https://github.com/hengli/camodocal\n",
        "Line" : 115,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Robot Operating System http://ROS.org\n\n# Transform Registration Toolkit, for pivot calibration https://github.com/RWTHmediTEC/TRTK\n\n# Implementation of Roy Featherstone's Spatial Vector Algebra https://github.com/jrl-umi3218/SpaceVecAlg\n\n# Algorithms for convex hulls https://github.com/jrl-umi3218/sch-core used for inverse kinematics\n\n# Models the dynamics of rigid body system https://github.com/jrl-umi3218/RBDyn used for inverse kinematics\n\n# Real time control of Kinematic Trees https://github.com/jrl-umi3218/Tasks used for inverse kinematics\n\n# fast logging library https://github.com/gabime/spdlog\n\n# Linux Dynamic Loader library, linux only https://refspecs.linuxfoundation.org/LSB_2.0.1/LSB-Core/LSB-Core/libdl.html\n",
        "Line" : 116,
        "CharPositionInLine" : 23
      },
      "15" : {
        "Text" : "#<test-dependency>\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#<optional-test-dependency>\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 17
    },
    "CMakeLists.txt" : {
      "ObjectId" : "2d38b1d4620d072874fb12639613243c5d26ce9b",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Root build configuration file.\n\n#\n\n# @note This package utilizes <a href=\"http://opensource.andreasschuh.com/cmake-basis\">CMake BASIS</a>.\n\n#\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# minimum required CMake version\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# include BASIS policies, settings, macros, and functions\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# circumvent issue with CMake's find_package() interpreting these variables\n\n# relative to the current binary directory instead of the top-level directory\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# users tend to specify the directory where BASIS was installed\n\n# rather than the directory containing a BASISConfig.cmake,\n\n# so add a workaround to allow that to work as well\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# look for an existing CMake BASIS installation and use it if found\n\n# otherwise, attempt to download and install it locally\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# download and install BASIS in build tree of project\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# CMake BASIS version to download\n\n# Enable/disable Matlab support\n\n# Enable/disable Python support\n\n# Enable/disable Jython support\n\n# Enable/disalbe Perl   support\n\n# Enable/disable Bash   support\n\n# Enable/disable documentation generation using Doxygen\n\n# Enable/disable documentation generation using Sphinx\n\n# Enable/disable image processing regression testing\n\n# Inform user during first configure step\n\n# that BASIS needs to be bootstrapped or installed manually\n",
        "Line" : 51,
        "CharPositionInLine" : 27
      },
      "9" : {
        "Text" : "# look for local installation\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# configure build system\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# raise error if project uses the BASIS Utilities,\n\n# but BASIS was not installed as part of the bootstrapping\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "41f8deddda7070b5d35adc9131f9a1efe91d8a8f",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CTestConfig.cmake\n\n# @brief Dashboard configuration file.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set CTest/CDash project name\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# start time of Nightly test model\n\n#\n\n# All Nightly tests which are executed within a time window of 24 hours\n\n# starting at the specified start time, will replace previous submissions\n\n# made within the same time frame such that for each time frame of 24 hours\n\n# only one result of test executions is present on the dashboard.\n\n# The execution of the Nightly tests is usually triggered automatically\n\n# via a scheduled cron job that is run once every 24 hours.\n\n#\n\n# Use the Continuous or Experimental test models if you want to execute\n\n# tests manually.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# dashboard submission to <project-name> CDash server\n\n#\n\n# Note: By default, CTest does not support HTTPS as submission method.\n\n#       In order to enable it, CTest (and hence CMake) has to be build\n\n#       manually with the option CMAKE_USE_OPENSSL enabled.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# launchers\n\n#\n\n# See CTest.cmake module.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "config/Components.cmake" : {
      "ObjectId" : "b2678940f471baef480a97a6fc455769c25594cc",
      "LastModified" : "2015-02-03T19:31:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  Components.cmake\n\n# @brief Configuration of component-based installers.\n\n#\n\n# This file is included by the BasisPack.cmake module if found in the\n\n# @c PROJECT_CONFIG_DIR after the CPack module was included. It is used to\n\n# configure component-based installers.\n\n#\n\n# Use the functions basis_add_component() and basis_add_component_group()\n\n# to add a component or component group, respectively. See documentation of\n\n# these functions for details.\n\n#\n\n# @sa basis_add_component()\n\n# @sa basis_add_component_group()\n\n#\n\n# For CPack generators which generate several packages, the default behavior\n\n# is to generate one package per component group. However, one can modify this\n\n# default behavior by setting CPACK_COMPONENTS_GROUPING to one of the\n\n# following values:\n\n#\n\n#   - ALL_GROUPS_IN_ONE       Generate separate package for each component group.\n\n#   - IGNORE                  Generate separate package for each component.\n\n#   - ALL_COMPONENTS_IN_ONE   Generate single package for all components.\n\n#\n\n# @sa http://www.vtk.org/Wiki/CMake:Component_Install_With_CPack#Controlling_Differents_Ways_of_packaging_components\n\n#\n\n# @ingroup BasisSettings\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "config/ConfigSettings.cmake" : {
      "ObjectId" : "7c3f22c002cafd0578e473df747f78cc70f54e6a",
      "LastModified" : "2015-02-03T19:31:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  ConfigSettings.cmake\n\n# @brief Sets variables used in CMake package configuration.\n\n#\n\n# It is suggested to use @c _CONFIG as suffix for variable names that are to\n\n# be substituted in the Config.cmake.in template file in order to distinguish\n\n# these variables from the build configuration.\n\n#\n\n# @note The default BasisConfigSettings.cmake file which is part of the BASIS\n\n#       installation is included prior to this file. Hence, the variables are\n\n#       valid even if a custom project-specific configuration is used and\n\n#       default values can further be overwritten in this file.\n\n#\n\n# @ingroup BasisSettings\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# build tree configuration settings\n\n# ============================================================================\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ============================================================================\n\n# installation configuration settings\n\n# ============================================================================\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "config/Depends.cmake" : {
      "ObjectId" : "df1e440b6f26702dd8ec14cebbfd60b2ddb610e5",
      "LastModified" : "2015-02-03T19:31:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  Depends.cmake\n\n# @brief Find additional dependencies.\n\n#\n\n# This file is included by basis_project_impl() after it included the\n\n# BasisProject.cmake file of the project and collected information about its\n\n# modules. Furthermore, it is included before it looks for the packages\n\n# specified as arguments to the basis_project() command. At this point, the\n\n# CMake project is not initialized yet and most BASIS variables are not set.\n\n#\n\n# Use this file to find additional dependencies or dependencies which are\n\n# only required by a project if certain modules are enabled.\n\n#\n\n# Use case: If this project has a module which is a Slicer Extension\n\n# and the project itself shall be build as Slicer Extension only if the\n\n# module is enabled, the Slicer package configuration file has to be\n\n# included here such that the Slicer settings are imported before any\n\n# module is configured. This is done by using the command\n\n#\n\n# Another use case would be that you want to specify advanced options to\n\n# the basis_find_package() function which you cannot specify as part of\n\n# the dependencies arguments of the basis_project() function.\n\n#\n\n# Example:\n\n# @code\n\n# if (SlicerExtension_ENABLED)\n\n#   # requires Slicer if the SlicerExtension module is enabled\n\n#   basis_find_package (Slicer REQUIRED)\n\n#   basis_use_package (Slicer)\n\n# endif ()\n\n# @endcode\n\n#\n\n# @ingroup BasisSettings\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "config/FRI_Client_SDK_Cpp.cmake" : {
      "ObjectId" : "b0a10815f7f6b7125b17a38ae82b49fbaec853d0",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sets up KUKA Sunrise FRI Cpp SDK with KUKA connectivity suite\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Variables\n\n# FRI_Client_SDK_Cpp_zip_PATH - Path to folder containing FRI-Client-SDK_Cpp.zip\n\n#\n\n# Targets\n\n# KukaFRIClient     - KukaFRIClient Libraries you should link to to use Kuka FRI APIs\n\n# nanopb            - nanopb library used to communicate with FRI on Kuka controller\n\n# friUdpConnection  - UDP components for demo code (not needed by github.com/ahundt/grl)\n\n#\n\n# Author: Andrew Hundt <ATHundt@gmail.com>\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Sets up KUKA Sunrise FRI Cpp SDK with KUKA connectivity suite\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# directory where fri code will be extracted\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# TODO: DONT HARDCODE DEFINITIONS, Use cmake CHECK_INCLUDE_FILE() to dynamically configure compile definitions\n",
        "Line" : 38,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "#${FRI_SRC_DIR}/client_trafo/friTransformationContainer.cpp # uncomment for sunrise connectivity 1.9\n",
        "Line" : 76,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# LBRJointSineOverlayApp\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# LBRTorqueSineOverlayApp\n",
        "Line" : 105,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# LBRWrenchSineOverlayApp\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# SimulatedTransformationProviderApp\n",
        "Line" : 119,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# TransformationProviderApp\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 11
    },
    "config/FindEigen3.cmake" : {
      "ObjectId" : "f00e432c9f1bd8e4adb68156f311016a7e1732db",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "config/FindFlatBuffers.cmake" : {
      "ObjectId" : "1b884aaf126df51cdf23f395cc3ea215f7c97441",
      "LastModified" : "2018-04-03T00:00:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#\n\n# Tries to find Flatbuffers headers and libraries.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#  find_package(Flatbuffers)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Flatbuffers_HOME -\n\n#   When set, this path is inspected instead of standard library locations as\n\n#   the root of the Flatbuffers installation.  The environment variable\n\n#   FLATBUFFERS_HOME overrides this veriable.\n\n#\n\n# This module defines\n\n#  FLATBUFFERS_INCLUDE_DIR, directory containing headers\n\n#  FLATBUFFERS_LIBS, directory containing flatbuffers libraries\n\n#  FLATBUFFERS_STATIC_LIB, path to libflatbuffers.a\n\n#  FLATBUFFERS_FOUND, whether flatbuffers has been found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try the parameterized roots, if they exist\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Name is the name of the user defined variable that will be created by this function\n\n#     Another variable that will be set is ${NAME}_OUTPUTS which will be set to the names\n\n#     of all output files that have been generated.\n\n# FLATBUFFERS_DIR is the directory in which to look for the .fbs files\n\n# OUTPUT_DIR is the directory in which all output files should be placed\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# create a target for the specific flatbuffers file\n",
        "Line" : 108,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# create a target for the generated output cpp file\n",
        "Line" : 111,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# this is the absolute path to the actual filename.fbs file\n",
        "Line" : 116,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Note: We are setting several custom parameters here to make life easier.\n\n# see flatbuffers documentation for details.\n\n# flatc --gen-name-strings --scoped-enums --gen-object-api -c -j -p -o\n\n# see https://google.github.io/flatbuffers/flatbuffers_guide_using_schema_compiler.html\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# need to copy the flatbuffers schema so config files can be loaded\n\n# http://stackoverflow.com/a/13429998/99379\n\n# CMAKE_CURRENT_SOURCE_DIR \n\n#    this is the directory where the currently processed CMakeLists.txt is located in\n",
        "Line" : 130,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# terminal copy commands change between OS versions, so we use CMake's built in file\n\n# copy command which runs with \"cmake -E copy file_to_copy file_destination\"\n\n# we use some variables here so the path is reproducible.\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# TODO(ahundt) remove hacky /bin manually set path, this will break for some IDEs\n",
        "Line" : 145,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 10
    },
    "config/FindLibDL.cmake" : {
      "ObjectId" : "64435452b3ca74721f0122e3e3bbba13fb114cb5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libdl\n\n# Find the native LIBDL includes and library\n\n#\n\n#  LIBDL_INCLUDE_DIR - where to find dlfcn.h, etc.\n\n#  LIBDL_LIBRARIES   - List of libraries when using libdl.\n\n#  LIBDL_FOUND       - True if libdl found.\n\n#\n\n# source: https://github.com/Fadis/libdcompile/blob/master/CMakeFiles/modules/FindLibDL.cmake\n\n# License: BSD 2 clause\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBDL_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "config/FindROS.cmake" : {
      "ObjectId" : "255b9cd6b969ff8a25654410cca72d7d4f6f0afa",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds ROS packages.\n\n# If successful, sets the following variables:\n\n#\n\n# ROS_VERSION: string for the found ROS version (if not already set)\n\n# ROS_INCLUDE_DIR: ROS header include path\n\n# ROS_LIBRARIES: library files to link with in order to get ROS functionality\n\n#\n\n# If ROS_VERSION is not set, it will check ros versions jade, indigo, hydro, and groovy\n\n# and configure variables for the newest version.  ROS_VERSION will also be set.\n\n#\n\n# If ROSDEPS is set, then it will add these dependencies to ROS_LIBRARIES\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "config/FindZeroMQ.cmake" : {
      "ObjectId" : "b06edfe177b9f7ac016d1a9a2cac9208bfdbb93c",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find ZeroMQ Headers/Libs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Variables\n\n# ZMQ_ROOT - set this to a location where ZeroMQ may be found\n\n#\n\n# ZeroMQ_FOUND - True of ZeroMQ found\n\n# ZeroMQ_INCLUDE_DIRS - Location of ZeroMQ includes\n\n# ZeroMQ_LIBRARIES - ZeroMQ libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We should provide version to find_package_handle_standard_args in the same format as it was requested,\n\n# otherwise it can't check whether version matches exactly.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# User has requested ZeroMQ version without patch part => user is not interested in specific patch =>\n\n# any patch should be an exact match.\n",
        "Line" : 46,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "config/Package.cmake" : {
      "ObjectId" : "df2b932f82a3b884a10cf169dee4fed2db7f9b47",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  Package.cmake\n\n# @brief Package configuration.\n\n#\n\n# This file is included by the BasisPack module prior to the CPack module.\n\n# It can be used to overwrite or extend the default package configuration.\n\n#\n\n# @ingroup BasisSettings\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# package information/general settings\n\n# ============================================================================\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# overwrite default package information here.\n\n#\n\n# See http://www.vtk.org/Wiki/CMake:Packaging_With_CPack\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ============================================================================\n\n# source package\n\n# ============================================================================\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Pattern of files in the source tree that will not be packaged when building\n\n# a source package. This is a list of patterns, e.g., \"/CVS/\", \"/\\\\.svn/\",\n\n# \".swp$\", \".#\", \"/#\", \"*~\", and \"cscope*\", which are ignored by default.\n\n# Moreover, the directory PROJECT_TESTING_DIR/internal/ is excluded.\n\n# Ignore additional patterns by appending to CPACK_SOURCE_IGNORE_FILE.\n\n#\n\n# Example: list (APPEND CPACK_SOURCE_IGNORE_FILE \"<exclude_regex>\")\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "config/Settings.cmake" : {
      "ObjectId" : "804cb12bb59d45c68f21c3ed2ed734990233fef7",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  Settings.cmake\n\n# @brief Non-default project settings.\n\n#\n\n# This file is included by basis_project_impl(), after it looked for the\n\n# required and optional dependencies and the CMake variables related to the\n\n# project directory structure were defined (see Directories.cmake file in\n\n# @c BINARY_CONFIG_DIR). It is also included before the BasisSettings.cmake\n\n# file.\n\n#\n\n# In particular build options should be added in this file using CMake's\n\n# <a href=\"http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:option\">\n\n# option()</a> command. Further, any common settings related to using a found\n\n# dependency can be set here if the basis_use_package() command was enable\n\n# to import the required configuration of a particular external package.\n\n#\n\n# @ingroup BasisSettings\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable C++11\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the boost.log library\n\n# @todo consider an alternative to always linking boost log\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# OSX RPATH\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set(CMAKE_SKIP_BUILD_RPATH FALSE)\n\n#set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)\n\n#set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n\n#set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n#list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES \"${CMAKE_INSTALL_PREFIX}/lib\" isSystemDir)\n\n#if(\"${isSystemDir}\" STREQUAL \"-1\")\n\n#    set(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/lib\")\n\n#endif()\n",
        "Line" : 53,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# list flatbuffer headers\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# directory to include flatbuffers\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate flatbuffer message C++ headers\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# workaround so that compilation will work if FindFRI-Client-SDK_Cpp is a module\n\n# it may also be an external, see config/FindFRI-Client-SDK_Cpp\n\n# if(MODULE_FRI-Client-SDK_Cpp)\n\n#     set(FRI-Client-SDK_Cpp_LIBRARIES  KukaFRIClient)\n\n#\n\n#     if(NOT Nanopb_FOUND)\n\n#         set(Nanopb_LIBRARIES nanopb)\n\n#     endif()\n\n# endif()\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "data/CMakeLists.txt" : {
      "ObjectId" : "58fa3bc83a4874631086217b1e1a997a379fba16",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of auxiliary data files.\n\n#\n\n# The data within this folder is required to execute the software tools of\n\n# this project. Example data which is only required for an example run of\n\n# the software are, on the other side, available in the example folder.\n\n#\n\n# By default, all content of this directory is simply installed in the\n\n# @c INSTALL_DATA_DIR directory of the installation tree. To group data files,\n\n# place them in proper subdirectories which will be copied to the\n\n# @c DESTINATION directory of the basis_install() function.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "751288640b670976b4739e6e77ba4d7e976cb6c0",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software documentation.\n\n#\n\n# This build configuration builds and/or installs the documentation of the\n\n# software package. The documentation can be divided into user documentation\n\n# (e.g., software manual) and developer documentation (e.g., developer's guide).\n\n# For developers, both those using a library provided by this package and the\n\n# package maintainers, the documentation of the API is of particular interest.\n\n# Developers who are responsible for maintaining this software may be provided\n\n# with even more detailed documentation of the implementation in the so-called\n\n# developer's guide.\n\n#\n\n# See the basis_add_doc() command for details on the documentation build tools\n\n# supported by BASIS for the generation of documentation from plain text files\n\n# and in-source code comments.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# generic targets\n\n# ============================================================================\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# create custom targets so \"make site\" and \"make manual\" always work\n\n# note that the \"doc\" target is added automatically which will trigger\n\n# the build of the complete documentation unless the EXCLUDE_FROM_ALL\n\n# option is passed to basis_add_doc\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# build HTML pages\n\n# build PDF manual\n",
        "Line" : 34,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# ============================================================================\n\n# API reference (Doxygen-style in-source code comments)\n\n# ============================================================================\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# documentation build target name\n\n# select Doxygen as the generator\n\n# output location of html documentation\n\n# custom top of page with CMake substitutions to fit with Sphinx\n\n# custom bottom of page with CMake substitutions to fit with Sphinx\n\n# custom formatting to fit in with the Sphinx docs\n\n# request output in HTML for websites and XML for reprocessing,\n\n# such as with the breathe Sphinx extension in particular\n",
        "Line" : 42,
        "CharPositionInLine" : 64
      },
      "7" : {
        "Text" : "# ============================================================================\n\n# Software manual\n\n# ============================================================================\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# add build target for the generation of the web pages and PDF manual from\n\n# the same set of reStructuredText input source files\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# documenation build target name\n\n# select Sphinx as the generator\n\n# selected Sphinx output formats\n\n# http://en.wikipedia.org/wiki/Man_page#Manual_sections\n\n# select the Sphinx layout theme\n\n# logo to use at heading of documentation\n\n# sidebar options to use\n\n# output directory for completed documentation\n\n# sidebar width in pixels\n\n# .rst file to start with when generating HTML\n\n# .rst file to start with when generating LaTeX/PDF\n\n# title within LaTeX/PDF documents\n\n# general output file name, e.g., LaTeX/PDF files\n\n# Doxygen generator build target for integrated API reference\n\n# location of Doxygen output files\n\n# disable currently unused index page\n",
        "Line" : 62,
        "CharPositionInLine" : 58
      },
      "10" : {
        "Text" : "# the Sphinx :download: link directive requires the download file to\n\n# be present in the source tree; thus copy generated PDF to source tree\n\n# if it contains modifications since last time\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# add dependency such that PDF is re-generated before copied to source tree if it differs\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# before building the HTML documentation, ensure that source tree version of manual is up-to-date\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# so \"make site\"   builds softwaremanual_html\n\n# so \"make manual\" builds softwaremanual_pdf\n",
        "Line" : 94,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 14
    },
    "example/CMakeLists.txt" : {
      "ObjectId" : "48c488ce899ddc2182d90bf0753f303371d3ee0e",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of example application of software.\n\n#\n\n# By default, all content of the example folder is simply copied to the\n\n# example directory of the installation tree.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# need to copy the flatbuffers schema so config files can be loaded\n\n# http://stackoverflow.com/a/13429998/99379\n\n# CMAKE_CURRENT_SOURCE_DIR \n\n#    this is the directory where the currently processed CMakeLists.txt is located in\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "example/v_repExtPluginSkeleton/CMakeLists.txt" : {
      "ObjectId" : "ec50b6aca906e7471fdf72e342fc462571c2a223",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "065611aaf0ceece3beaf8d094f7a8b00e4bc5508",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# kuka iiwa FRI-Client-SDK_Cpp robotic arm C++ interface\n\n# needed by ROS and VREP kuka iiwa APIS\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/ros/CMakeLists.txt" : {
      "ObjectId" : "af03ea37e201b38269188788e2266d6bdd87b890",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/v_rep/CMakeLists.txt" : {
      "ObjectId" : "0ae4f3a098689eefbcac13a0b4ee7994d436df5c",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# these files are from the vrep progamming/common/ folder\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/v_repExtAtracsysFusionTrack/CMakeLists.txt" : {
      "ObjectId" : "89bc27eea4f88d5211509142a71aaba057d89cd6",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/v_repExtGrlCisstInverseKinematics/CMakeLists.txt" : {
      "ObjectId" : "c72394bdc442cdd9dae7cc9b291d24d854f7d5cd",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#TODO: add cisst-saw found flag and make it work correctly for independent grl https://github.com/jhu-cisst/cisst-saw\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#TODO: #WARNING: INSTALLER WILL BE BROKEN UNLESS THIS IS CHANGED TO USE basis_target_link_libraries, etc. \n\n#@see https://github.com/schuhschuh/cmake-basis/issues/442\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# ${CISST_SAW_INCLUDE_DIRS}\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# ${cisstNetlib_LIBRARY_cisstNetlib}\n\n# ${cisstNetlib_LIBRARY_cisstNetlib_gcc}\n\n# ${cisstNetlib_LIBRARY_cisstNetlib_blas}\n\n# ${cisstNetlib_LIBRARY_cisstNetlib_lapack}\n\n# ${cisstNetlib_LIBRARY_cisstNetlib_gfortran}\n",
        "Line" : 49,
        "CharPositionInLine" : 20
      },
      "8" : {
        "Text" : "##${CISST_SAW_LIBRARIES}\n\n#${CISSTNETLIB_LIBRARIES}\n",
        "Line" : 56,
        "CharPositionInLine" : 20
      },
      "9" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/v_repExtGrlInverseKinematics/CMakeLists.txt" : {
      "ObjectId" : "7870e9c551b7806fa3c7251425dc781c4880f93e",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SpaceVecAlg        # Implementation of Roy Featherstone's Spatial Vector Algebra https://github.com/jrl-umi3218/SpaceVecAlg\n\n# sch-core           # Algorithms for convex hulls https://github.com/jrl-umi3218/sch-core used for inverse kinematics\n\n# RBDyn              # Models the dynamics of rigid body system https://github.com/jrl-umi3218/RBDyn used for inverse kinematics\n\n# Tasks              # Real time control of Kinematic Trees https://github.com/jrl-umi3218/Tasks used for inverse kinematics\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# TODO(ahundt) link_directories is a hack, remove me!\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#TODO: #WARNING: INSTALLER WILL BE BROKEN UNLESS THIS IS CHANGED TO USE basis_target_link_libraries, etc. \n\n#@see https://github.com/schuhschuh/cmake-basis/issues/442\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# TODO(ahundt): include directories from Tasks & its deps\n\n#$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>\n\n#$<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# ${CISST_SAW_INCLUDE_DIRS}\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#TODO: re-enable when exported targets are correct again\n",
        "Line" : 58,
        "CharPositionInLine" : 32
      },
      "10" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/v_repExtHandEyeCalibration/CMakeLists.txt" : {
      "ObjectId" : "42786bb22f2c028ab2374b83f709e1a0eec994f9",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/v_repExtKukaLBRiiwaPlugin/CMakeLists.txt" : {
      "ObjectId" : "72295bd436001d2bfdda359a00df1f4353949588",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/v_repExtPivotCalibration/CMakeLists.txt" : {
      "ObjectId" : "1e79a9ff22644cb389984c90f8c003d331d3fc86",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO(ahundt) link_directories is a hack, remove me!\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/v_repExtUniversalRobotsPlugin/CMakeLists.txt" : {
      "ObjectId" : "628f78449dfe15a4b9164e8bfd168e44aa360055",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# library target(s)\n\n# ============================================================================\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add library target for each library using basis_add_library().\n\n#\n\n# This command can not only be used to build libraries from C/C++, but also source\n\n# code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash. Note that here we consider modules written in a scripting\n\n# language which are no executables but to be included by other scripts written\n\n# in the particular language as libraries.\n\n#\n\n# Note: Public modules written in a scripting language such as Python, Perl,\n\n#       MATLAB, or Bash which are intended for use by other packages should\n\n#       be placed in the lib/[<lang>/]grl/ directory,\n\n#       where <lang> is the language name in lowercase and is optional.\n\n#       BASIS will automatically add a library build target for these modules.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ============================================================================\n\n# executable target(s)\n\n# ============================================================================\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add executable target for each executable program using basis_add_executable().\n\n#\n\n# This command can not only be used to build executables from C/C++, but also\n\n# source code written in other programming languages such as Java, Python, Perl,\n\n# MATLAB, and Bash.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "879a80031010b32b36073ad1aed37e604fdf8747",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of software testing.\n\n#\n\n# Unit tests test only single functions, classes, and modules of the software.\n\n# System tests, on the other side, execute the programs of this package with\n\n# given test input data and compare the output of the programs to the expected\n\n# results. For the definition of system tests which perform image regression\n\n# tests, i.e., compare the images written by the test to given baseline images,\n\n# the basis.testdriver executable target imported from BASIS can be used to\n\n# execute the executable to test and perform the regression tests.\n\n#\n\n# Example:\n\n# @code\n\n# basis_add_test (\n\n#  COMMAND basis.testdriver -v\n\n#    --intensity-tolerance 2\n\n#    --compare \"t1_bc.nii.gz\"\n\n#              \"${PROJECT_TESTING_DIR}/baseline/t1_bc.nii.gz\"\n\n#    --\n\n#    $<TARGET_FILE:biascorrect>\n\n#      \"${PROJECT_TESTING_DIR}/input/t1.nii.gz\"\n\n#      t1_bc.nii.gz\n\n# )\n\n# @endcode\n\n#\n\n# If the tests are implemented in C/C++ as supported by CMake's\n\n# create_test_sourcelist() function, a custom test driver can be generated\n\n# using the basis_add_test_driver() function and this test driver then be used\n\n# to execute the tests and perform the regression tests.\n\n#\n\n# Example:\n\n# @code\n\n# basis_add_test_driver (testdriver test1.cxx test2.cxx test3.cxx)\n\n#\n\n# basis_add_test (\n\n#   COMMAND testdriver -v\n\n#     --intensity-tolerance 2\n\n#     --compare \"t1_bc.nii.gz\"\n\n#               \"${PROJECT_TESTING_DIR}/baseline/t1_bc.nii.gz\"\n\n#     --\n\n#     biascorrect # test1.cxx defines int biascorrect(int argc, char* argv[])\n\n#      \"${PROJECT_TESTING_DIR}/input/t1.nii.gz\"\n\n#      t1_bc.nii.gz\n\n# )\n\n#\n\n# # ...\n\n# @endcomsg->#\n\n# @sa http://www.cmake.org/cmake/help/cmake-2-8-docs.html#command:create_test_sourcelist\n\n#\n\n# The built test executables can be found in @c TESTING_RUNTIME_DIR.\n\n# The test output shall be written to @c TESTING_OUTPUT_DIR. In most cases,\n\n# a subdirectory for each test should be created under this output directory.\n\n# Therefore, the basis_add_test() function creates such subdirectory and sets\n\n# the working directory of the test to this output directory.\n\n##############################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ============================================================================\n\n# internal tests\n\n# ============================================================================\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ============================================================================\n\n# public tests\n\n# ============================================================================\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# For KUKA IIWA FRI Libraries\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ${GRL_FLATBUFFERS_OUTPUTS})\n",
        "Line" : 83,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 6
    },
    "test/internal/CMakeLists.txt" : {
      "ObjectId" : "0a80740d890a1b566a61ef81425135e961442eef",
      "LastModified" : "2018-01-25T19:53:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ============================================================================\n\n# Copyright (c) 2015 <provider-name>\n\n# All rights reserved.\n\n#\n\n# See COPYING file for license information.\n\n# ============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# @file  CMakeLists.txt\n\n# @brief Build configuration of internal software tests.\n\n#\n\n# The tests defined by this build configuration file are intended for internal\n\n# use only. They are excluded from the public distribution package which is\n\n# generated by CPack. Reasons for excluding these tests are to reduce the\n\n# size of the distribution package and to avoid reports about failing tests,\n\n# where it is known that the tests will only run successfully within the\n\n# environment of the package provider.\n\n##############################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 31
  },
  "ElapsedTime" : 2198
}