{
  "Repository" : "29838942",
  "Revision" : "HEAD",
  "ObjectId" : "effbe3245492041047f736f8c7f08fe2b9ea308c",
  "CommitTime" : "2019-03-02T14:45:46Z",
  "Files" : {
    "js/node/myapp/node_modules/arraybuffer.slice/Makefile" : {
      "ObjectId" : "849887f7fafa87e356e644f284781a040009f4b9",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/backo2/Makefile" : {
      "ObjectId" : "9987df81aae366edffe9f845b048f7fe8a0c90db",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/better-assert/Makefile" : {
      "ObjectId" : "36a3ed7d0a641bdc9d47c3608b07a2f683e17fac",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/blob/Makefile" : {
      "ObjectId" : "7d9601a95b3cad21257840a1305c9a1273c3f5dd",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/callsite/Makefile" : {
      "ObjectId" : "634e37219281be9e2f2129c5d31390b166cfdd9e",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/component-bind/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/component-emitter/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/component-inherit/Makefile" : {
      "ObjectId" : "ebbc52a3df3bf5bd55c578ef664efbf555a3d822",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/consolidate/Makefile" : {
      "ObjectId" : "2bc56b4c31e9c9b62ee4a9f57caf737fec062dd2",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/css-parse/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/css-stringify/Makefile" : {
      "ObjectId" : "4e9c8d36ebcd2f63843cf5a534e4db3459b2d637",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/css/Makefile" : {
      "ObjectId" : "f13b4a7840e0acc3fd7c055b8522802ebf52a11c",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/debug/Makefile" : {
      "ObjectId" : "5cf4a5962b8ba3719bd0f2ff7703cba5de225d1a",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# get Makefile directory name: http://stackoverflow.com/a/5982798/376773\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BIN directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# applications\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "js/node/myapp/node_modules/engine.io-parser/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/es-abstract/Makefile" : {
      "ObjectId" : "959bbd49c1def0b484e00ec993e35158f4e1c71f",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "js/node/myapp/node_modules/es-to-primitive/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "js/node/myapp/node_modules/foreach/Makefile" : {
      "ObjectId" : "eae41178666a0e7f624dd07f1e9fc8d8e38e038b",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/has-binary/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/has-cors/Makefile" : {
      "ObjectId" : "0f14dac306f8e0e08c210fa2410c5ef1807600a0",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/indexof/Makefile" : {
      "ObjectId" : "3f6119d227040d0493452f89e06013b2a9886da6",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/is-callable/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "js/node/myapp/node_modules/is-date-object/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "js/node/myapp/node_modules/is-regex/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "js/node/myapp/node_modules/is-symbol/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "js/node/myapp/node_modules/is/Makefile" : {
      "ObjectId" : "d1e265ad1387e2e1714a72b3f393111af7bac759",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/object-component/Makefile" : {
      "ObjectId" : "b6b98504ec9ce79a7abfb6b8b7c10426c234c963",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/options/Makefile" : {
      "ObjectId" : "7496b6fcc5008519c078985a624fac04b6e9e285",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/parsejson/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/parseqs/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/parseuri/Makefile" : {
      "ObjectId" : "1d90629d2698f2c6f1f86099710de10101694bac",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/socket.io-adapter/node_modules/socket.io-parser/Makefile" : {
      "ObjectId" : "ee0a3b2727fc0fa94907fbcd7497ed0a22f5562c",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/string.prototype.trim/Makefile" : {
      "ObjectId" : "b9e4fe1aab3dde87b3071e9b39e45a22ce3bf33a",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The files that need updating when incrementing the version number.\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\n# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\n# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure that all required utilities can be located.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Default target (by virtue of being the first non '.'-prefixed in the file).\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Lists all targets defined in this makefile.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Ensures that the git workspace is clean.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#v}; \\\n\t new_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\t if printf \"$$new_ver\" | command grep -q '^[0-9]'; then \\\n\t   semver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t   semver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\t else \\\n\t   new_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\t fi; \\\n\t printf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; };  \\\n\t replace \"$$old_ver\" \"$$new_ver\" -- $(VERSIONED_FILES) && \\\n\t git commit -m \"v$$new_ver\" $(VERSIONED_FILES) CHANGELOG.md && \\\n\t git tag -a -m \"v$$new_ver\" \"v$$new_ver\"\n",
        "Line" : 50,
        "CharPositionInLine" : 158
      },
      "CommentCount" : 10
    },
    "js/node/myapp/node_modules/ws/Makefile" : {
      "ObjectId" : "94612c5ce470a741758fa728fcd42444a4511aa2",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/node/myapp/node_modules/xtend/Makefile" : {
      "ObjectId" : "d583fcf49dc1a343087a932f9912fab74e2b2f6b",
      "LastModified" : "2016-11-05T22:25:23Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "js/threejs_exp/landscapes/clouds_smoke_etc/fireworks.js-master/Makefile" : {
      "ObjectId" : "880a9d4c30235b4ac3dada6bfb28c407fbafb19e",
      "LastModified" : "2017-06-19T18:19:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# makefile to automatize simple operations\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# assume there is something to commit\n\n# use \"git diff --exit-code HEAD\" to know if there is something to commit\n\n# so two lines: one if no commit, one if something to commit \n",
        "Line" : 7,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 35
  },
  "ElapsedTime" : 6208
}